{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1alpha1/receivers.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 42,
                  "endLine": 65,
                  "endColumn": 47,
                  "snippet": {
                    "text": "Generate a random string and create a secret with a `token` field:\n\n```sh\nTOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\necho $TOKEN\n\nkubectl -n gitops-system create secret generic webhook-token \\\t\n",
                    "rendered": {
                      "text": "Generate a random string and create a secret with a `token` field:\n\n```sh\nTOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\necho $TOKEN\n\nkubectl -n gitops-system create secret generic webhook-token \\\t\n",
                      "markdown": "`Generate a random string and create a secret with a `token` field:\n\n```sh\nTOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\necho $TOKEN\n\nkubectl -n gitops-system create secret generic webhook-token \\\t\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/alerts.md"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 60,
                  "endLine": 173,
                  "endColumn": 65,
                  "snippet": {
                    "text": "The above definition will not send alerts for transient Git clone errors like:\n\n```\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n",
                    "rendered": {
                      "text": "The above definition will not send alerts for transient Git clone errors like:\n\n```\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n",
                      "markdown": "`The above definition will not send alerts for transient Git clone errors like:\n\n```\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/alerts.md"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 55,
                  "endLine": 170,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n",
                    "rendered": {
                      "text": "    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n",
                      "markdown": "`    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/events.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 38,
                  "endLine": 58,
                  "endColumn": 42,
                  "snippet": {
                    "text": "with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n",
                    "rendered": {
                      "text": "with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n",
                      "markdown": "`with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/oss_fuzz_run.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 59,
                  "endLine": 20,
                  "endColumn": 65,
                  "snippet": {
                    "text": "set -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n",
                    "rendered": {
                      "text": "set -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n",
                      "markdown": "`set -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/oss_fuzz_run.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/oss_fuzz_run.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/oss_fuzz_run.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 59,
                  "endLine": 20,
                  "endColumn": 65,
                  "snippet": {
                    "text": "set -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n",
                    "rendered": {
                      "text": "set -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n",
                      "markdown": "`set -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/oss_fuzz_run.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 58,
                  "endLine": 20,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nset -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n",
                    "rendered": {
                      "text": "\nset -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n",
                      "markdown": "`\nset -euxo pipefail\n\n# run each fuzzer once to ensure they are working properly\nfind /out -type f -iname \"fuzz*\" -exec echo {} -runs=1 \\; | bash -e\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/oss_fuzz_run.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/Dockerfile.builder"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 3,
                  "endLine": 13,
                  "endColumn": 9,
                  "snippet": {
                    "text": "ENV FLUX_CI=true\n\nCOPY ./ $SRC\nRUN wget https://raw.githubusercontent.com/google/oss-fuzz/master/projects/fluxcd/build.sh -O $SRC/build.sh\n\nWORKDIR $SRC\n",
                    "rendered": {
                      "text": "ENV FLUX_CI=true\n\nCOPY ./ $SRC\nRUN wget https://raw.githubusercontent.com/google/oss-fuzz/master/projects/fluxcd/build.sh -O $SRC/build.sh\n\nWORKDIR $SRC\n",
                      "markdown": "`ENV FLUX_CI=true\n\nCOPY ./ $SRC\nRUN wget https://raw.githubusercontent.com/google/oss-fuzz/master/projects/fluxcd/build.sh -O $SRC/build.sh\n\nWORKDIR $SRC\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/Dockerfile.builder"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 61,
                  "endLine": 10,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n\nCOPY ./ $SRC\nRUN wget https://raw.githubusercontent.com/google/oss-fuzz/master/projects/fluxcd/build.sh -O $SRC/build.sh\n",
                    "rendered": {
                      "text": "    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n\nCOPY ./ $SRC\nRUN wget https://raw.githubusercontent.com/google/oss-fuzz/master/projects/fluxcd/build.sh -O $SRC/build.sh\n",
                      "markdown": "`    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n\nCOPY ./ $SRC\nRUN wget https://raw.githubusercontent.com/google/oss-fuzz/master/projects/fluxcd/build.sh -O $SRC/build.sh\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/Dockerfile.builder"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 9,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n\nCOPY ./ $SRC\n",
                    "rendered": {
                      "text": "    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n\nCOPY ./ $SRC\n",
                      "markdown": "`    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n\nCOPY ./ $SRC\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/Dockerfile.builder"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 7,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n",
                    "rendered": {
                      "text": "    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n",
                      "markdown": "`    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\nENV FLUX_CI=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/Dockerfile.builder"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "endLine": 6,
                  "endColumn": 11,
                  "snippet": {
                    "text": "RUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \\\n    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\n",
                    "rendered": {
                      "text": "RUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \\\n    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\n",
                      "markdown": "`RUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \\\n    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n    && mv temp-go/go/* /root/.go/\n\nENV SRC=$GOPATH/src/github.com/fluxcd/notification-controller\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/Dockerfile.builder"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 3,
                  "endLine": 3,
                  "endColumn": 9,
                  "snippet": {
                    "text": "FROM gcr.io/oss-fuzz-base/base-builder-go\n\nRUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \\\n    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n",
                    "rendered": {
                      "text": "FROM gcr.io/oss-fuzz-base/base-builder-go\n\nRUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \\\n    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n",
                      "markdown": "`FROM gcr.io/oss-fuzz-base/base-builder-go\n\nRUN wget https://go.dev/dl/go1.23.0.linux-amd64.tar.gz \\\n    && mkdir temp-go \\\n    && rm -rf /root/.go/* \\\n    && tar -C temp-go/ -xzf go1.23.0.linux-amd64.tar.gz \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 50,
                  "endLine": 59,
                  "endColumn": 3,
                  "snippet": {
                    "text": "// +build gofuzz_libfuzzer\n```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n\n",
                    "rendered": {
                      "text": "// +build gofuzz_libfuzzer\n```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n\n",
                      "markdown": "`// +build gofuzz_libfuzzer\n```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 26,
                  "endLine": 58,
                  "endColumn": 30,
                  "snippet": {
                    "text": "// +build gofuzz_libfuzzer\n```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n",
                    "rendered": {
                      "text": "// +build gofuzz_libfuzzer\n```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n",
                      "markdown": "`// +build gofuzz_libfuzzer\n```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "endLine": 52,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nDue to the issue above, code duplication will occur when creating fuzz tests that rely on\nhelper functions that are shared with other tests. To avoid build issues, add a conditional\nbuild tag at the top of the `*_fuzz_test.go` file:\n```go\n//go:build gofuzz_libfuzzer\n// +build gofuzz_libfuzzer\n",
                    "rendered": {
                      "text": "\nDue to the issue above, code duplication will occur when creating fuzz tests that rely on\nhelper functions that are shared with other tests. To avoid build issues, add a conditional\nbuild tag at the top of the `*_fuzz_test.go` file:\n```go\n//go:build gofuzz_libfuzzer\n// +build gofuzz_libfuzzer\n",
                      "markdown": "`\nDue to the issue above, code duplication will occur when creating fuzz tests that rely on\nhelper functions that are shared with other tests. To avoid build issues, add a conditional\nbuild tag at the top of the `*_fuzz_test.go` file:\n```go\n//go:build gofuzz_libfuzzer\n// +build gofuzz_libfuzzer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "endLine": 68,
                  "endColumn": 4,
                  "snippet": {
                    "text": "upstream. If our checks ever run out of sync with upstream, the upstream tests can be\nexecuted locally with:\n\n```\ngit clone --depth 1 https://github.com/google/oss-fuzz\ncd oss-fuzz\npython infra/helper.py build_image fluxcd\npython infra/helper.py build_fuzzers --sanitizer address --architecture x86_64 fluxcd\n",
                    "rendered": {
                      "text": "upstream. If our checks ever run out of sync with upstream, the upstream tests can be\nexecuted locally with:\n\n```\ngit clone --depth 1 https://github.com/google/oss-fuzz\ncd oss-fuzz\npython infra/helper.py build_image fluxcd\npython infra/helper.py build_fuzzers --sanitizer address --architecture x86_64 fluxcd\n",
                      "markdown": "`upstream. If our checks ever run out of sync with upstream, the upstream tests can be\nexecuted locally with:\n\n```\ngit clone --depth 1 https://github.com/google/oss-fuzz\ncd oss-fuzz\npython infra/helper.py build_image fluxcd\npython infra/helper.py build_fuzzers --sanitizer address --architecture x86_64 fluxcd\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 16,
                  "endLine": 59,
                  "endColumn": 22,
                  "snippet": {
                    "text": "```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n\n",
                    "rendered": {
                      "text": "```\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n\n",
                      "markdown": "````\n\nThe build tag above is set at [go-118-fuzz-build].\nAt this point in time we can't pass on specific tags from [compile_native_go_fuzzer].\n\n### Running oss-fuzz locally\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 16,
                  "endLine": 52,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nDue to the issue above, code duplication will occur when creating fuzz tests that rely on\nhelper functions that are shared with other tests. To avoid build issues, add a conditional\nbuild tag at the top of the `*_fuzz_test.go` file:\n```go\n//go:build gofuzz_libfuzzer\n// +build gofuzz_libfuzzer\n",
                    "rendered": {
                      "text": "\nDue to the issue above, code duplication will occur when creating fuzz tests that rely on\nhelper functions that are shared with other tests. To avoid build issues, add a conditional\nbuild tag at the top of the `*_fuzz_test.go` file:\n```go\n//go:build gofuzz_libfuzzer\n// +build gofuzz_libfuzzer\n",
                      "markdown": "`\nDue to the issue above, code duplication will occur when creating fuzz tests that rely on\nhelper functions that are shared with other tests. To avoid build issues, add a conditional\nbuild tag at the top of the `*_fuzz_test.go` file:\n```go\n//go:build gofuzz_libfuzzer\n// +build gofuzz_libfuzzer\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/README.md"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Run fuzzer inside a container:\n\n```bash\n\tdocker run --rm -ti \\\n\t\t-v \"$(pwd)/build/fuzz/out\":/out \\\n\t\tgcr.io/oss-fuzz/fluxcd \\\n\t\t/out/fuzz_conditions_match\n",
                    "rendered": {
                      "text": "Run fuzzer inside a container:\n\n```bash\n\tdocker run --rm -ti \\\n\t\t-v \"$(pwd)/build/fuzz/out\":/out \\\n\t\tgcr.io/oss-fuzz/fluxcd \\\n\t\t/out/fuzz_conditions_match\n",
                      "markdown": "`Run fuzzer inside a container:\n\n```bash\n\tdocker run --rm -ti \\\n\t\t-v \"$(pwd)/build/fuzz/out\":/out \\\n\t\tgcr.io/oss-fuzz/fluxcd \\\n\t\t/out/fuzz_conditions_match\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/native_go_run.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/native_go_run.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/native_go_run.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 23,
                  "endLine": 20,
                  "endColumn": 29,
                  "snippet": {
                    "text": "set -euxo pipefail\n\n# This script iterates through all go fuzzing targets, running each one\n# through the period of time established by FUZZ_TIME.\n\nFUZZ_TIME=${FUZZ_TIME:-\"5s\"}\n\n",
                    "rendered": {
                      "text": "set -euxo pipefail\n\n# This script iterates through all go fuzzing targets, running each one\n# through the period of time established by FUZZ_TIME.\n\nFUZZ_TIME=${FUZZ_TIME:-\"5s\"}\n\n",
                      "markdown": "`set -euxo pipefail\n\n# This script iterates through all go fuzzing targets, running each one\n# through the period of time established by FUZZ_TIME.\n\nFUZZ_TIME=${FUZZ_TIME:-\"5s\"}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/native_go_run.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 19,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nset -euxo pipefail\n\n# This script iterates through all go fuzzing targets, running each one\n# through the period of time established by FUZZ_TIME.\n\nFUZZ_TIME=${FUZZ_TIME:-\"5s\"}\n",
                    "rendered": {
                      "text": "\nset -euxo pipefail\n\n# This script iterates through all go fuzzing targets, running each one\n# through the period of time established by FUZZ_TIME.\n\nFUZZ_TIME=${FUZZ_TIME:-\"5s\"}\n",
                      "markdown": "`\nset -euxo pipefail\n\n# This script iterates through all go fuzzing targets, running each one\n# through the period of time established by FUZZ_TIME.\n\nFUZZ_TIME=${FUZZ_TIME:-\"5s\"}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/tests/fuzz/native_go_run.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2022 The Flux authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/manager/service.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 19,
                  "snippet": {
                    "text": "      targetPort: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: webhook-receiver\n  labels:\n    control-plane: controller\n",
                    "rendered": {
                      "text": "      targetPort: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: webhook-receiver\n  labels:\n    control-plane: controller\n",
                      "markdown": "`      targetPort: http\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: webhook-receiver\n  labels:\n    control-plane: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/manager/service.yaml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 3,
                  "snippet": {
                    "text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: notification-controller\n  labels:\n    control-plane: controller\n",
                    "rendered": {
                      "text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: notification-controller\n  labels:\n    control-plane: controller\n",
                      "markdown": "`apiVersion: v1\nkind: Service\nmetadata:\n  name: notification-controller\n  labels:\n    control-plane: controller\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 35,
                  "endLine": 256,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t// Verify signature using the same token as the Secret referenced in\n\t// Provider\n\tkey := []byte(\"<token>\")\n\tif err := verifySignature(r.Header.Get(\"X-Signature\"), body, key); err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to verify HMAC signature: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "\t// Verify signature using the same token as the Secret referenced in\n\t// Provider\n\tkey := []byte(\"<token>\")\n\tif err := verifySignature(r.Header.Get(\"X-Signature\"), body, key); err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to verify HMAC signature: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n",
                      "markdown": "`\t// Verify signature using the same token as the Secret referenced in\n\t// Provider\n\tkey := []byte(\"<token>\")\n\tif err := verifySignature(r.Header.Get(\"X-Signature\"), body, key); err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to verify HMAC signature: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 118,
                  "endLine": 1576,
                  "endColumn": 126,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 108,
                  "endLine": 1576,
                  "endColumn": 116,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1576,
                  "startColumn": 49,
                  "endLine": 1576,
                  "endColumn": 57,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1571,
                  "startColumn": 64,
                  "endLine": 1571,
                  "endColumn": 72,
                  "snippet": {
                    "text": "- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1568,
                  "startColumn": 33,
                  "endLine": 1568,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucketserver`, the following auth methods are available:\n\n- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucketserver`, the following auth methods are available:\n\n- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucketserver`, the following auth methods are available:\n\n- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1561,
                  "startColumn": 83,
                  "endLine": 1561,
                  "endColumn": 91,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bitbucket-token --from-literal=token=<username>:<app-password>\n```\n\n#### BitBucket Server/Data Center\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bitbucket-token --from-literal=token=<username>:<app-password>\n```\n\n#### BitBucket Server/Data Center\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bitbucket-token --from-literal=token=<username>:<app-password>\n```\n\n#### BitBucket Server/Data Center\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1555,
                  "startColumn": 8,
                  "endLine": 1555,
                  "endColumn": 16,
                  "snippet": {
                    "text": "[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n",
                    "rendered": {
                      "text": "[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n",
                      "markdown": "`[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1553,
                  "startColumn": 31,
                  "endLine": 1553,
                  "endColumn": 39,
                  "snippet": {
                    "text": "When `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n",
                      "markdown": "`When `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 95,
                  "endLine": 1552,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 70,
                  "endLine": 1552,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 5,
                  "endLine": 1552,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1224,
                  "startColumn": 38,
                  "endLine": 1224,
                  "endColumn": 46,
                  "snippet": {
                    "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                    "rendered": {
                      "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                      "markdown": "````shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1224,
                  "startColumn": 15,
                  "endLine": 1224,
                  "endColumn": 23,
                  "snippet": {
                    "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                    "rendered": {
                      "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                      "markdown": "````shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1219,
                  "startColumn": 13,
                  "endLine": 1219,
                  "endColumn": 21,
                  "snippet": {
                    "text": "```\n\nGrafana can also use basic authorization to authenticate the requests, if both the token and\nthe username/password are set in the secret, then token takes precedence over`basic auth:\n\n```shell\nkubectl create secret generic grafana-token \\\n",
                    "rendered": {
                      "text": "```\n\nGrafana can also use basic authorization to authenticate the requests, if both the token and\nthe username/password are set in the secret, then token takes precedence over`basic auth:\n\n```shell\nkubectl create secret generic grafana-token \\\n",
                      "markdown": "````\n\nGrafana can also use basic authorization to authenticate the requests, if both the token and\nthe username/password are set in the secret, then token takes precedence over`basic auth:\n\n```shell\nkubectl create secret generic grafana-token \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1136,
                  "startColumn": 26,
                  "endLine": 1136,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  name: my-provider-proxy\n  namespace: default\nstringData:\n  proxy: \"http://username:password@proxy_url:proxy_port\"\n```\n\n### TLS certificates\n",
                    "rendered": {
                      "text": "  name: my-provider-proxy\n  namespace: default\nstringData:\n  proxy: \"http://username:password@proxy_url:proxy_port\"\n```\n\n### TLS certificates\n",
                      "markdown": "`  name: my-provider-proxy\n  namespace: default\nstringData:\n  proxy: \"http://username:password@proxy_url:proxy_port\"\n```\n\n### TLS certificates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 96,
                  "endLine": 1126,
                  "endColumn": 104,
                  "snippet": {
                    "text": "#### Proxy auth example\n\nSome networks need to use an authenticated proxy to access external services.\nTherefore, the proxy address can be stored as a secret to hide parameters like the username and password:\n\n```yaml\n---\n",
                    "rendered": {
                      "text": "#### Proxy auth example\n\nSome networks need to use an authenticated proxy to access external services.\nTherefore, the proxy address can be stored as a secret to hide parameters like the username and password:\n\n```yaml\n---\n",
                      "markdown": "`#### Proxy auth example\n\nSome networks need to use an authenticated proxy to access external services.\nTherefore, the proxy address can be stored as a secret to hide parameters like the username and password:\n\n```yaml\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 64,
                  "endLine": 1046,
                  "endColumn": 72,
                  "snippet": {
                    "text": "For the `generic` Provider for example this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.\n\nIf the address contains sensitive information such as tokens or passwords, it is \nrecommended to store the address in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains an `address` key, the `.spec.address` value is ignored.\n\n",
                    "rendered": {
                      "text": "For the `generic` Provider for example this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.\n\nIf the address contains sensitive information such as tokens or passwords, it is \nrecommended to store the address in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains an `address` key, the `.spec.address` value is ignored.\n\n",
                      "markdown": "`For the `generic` Provider for example this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.\n\nIf the address contains sensitive information such as tokens or passwords, it is \nrecommended to store the address in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains an `address` key, the `.spec.address` value is ignored.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 18,
                  "endLine": 1036,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  namespace: desired-namespace\nstringData:\n  username: <NATS Username>\n  password: <NATS Password>\n```\n\n### Address\n",
                    "rendered": {
                      "text": "  namespace: desired-namespace\nstringData:\n  username: <NATS Username>\n  password: <NATS Password>\n```\n\n### Address\n",
                      "markdown": "`  namespace: desired-namespace\nstringData:\n  username: <NATS Username>\n  password: <NATS Password>\n```\n\n### Address\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 2,
                  "endLine": 1036,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  namespace: desired-namespace\nstringData:\n  username: <NATS Username>\n  password: <NATS Password>\n```\n\n### Address\n",
                    "rendered": {
                      "text": "  namespace: desired-namespace\nstringData:\n  username: <NATS Username>\n  password: <NATS Password>\n```\n\n### Address\n",
                      "markdown": "`  namespace: desired-namespace\nstringData:\n  username: <NATS Username>\n  password: <NATS Password>\n```\n\n### Address\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 16,
                  "endLine": 1012,
                  "endColumn": 24,
                  "snippet": {
                    "text": "###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n[Secret reference](#secret-reference).\n\n```yaml\n",
                    "rendered": {
                      "text": "###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n[Secret reference](#secret-reference).\n\n```yaml\n",
                      "markdown": "`###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n[Secret reference](#secret-reference).\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 62,
                  "endLine": 1011,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n[Secret reference](#secret-reference).\n\n",
                    "rendered": {
                      "text": "\n###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n[Secret reference](#secret-reference).\n\n",
                      "markdown": "`\n###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n[Secret reference](#secret-reference).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1009,
                  "startColumn": 26,
                  "endLine": 1009,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nAdditionally if using credentials, the User must have [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization) to publish on the Subject provided.\n\n###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n",
                    "rendered": {
                      "text": "\nAdditionally if using credentials, the User must have [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization) to publish on the Subject provided.\n\n###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n",
                      "markdown": "`\nAdditionally if using credentials, the User must have [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization) to publish on the Subject provided.\n\n###### NATS with Username/Password Credentials Example\n\nTo configure a Provider for NATS authenticating with Username/Password, create a Secret with the\n`username` and `password` fields set, and add a `nats` Provider with the associated\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 165,
                  "endLine": 1004,
                  "endColumn": 173,
                  "snippet": {
                    "text": "er/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/connecting/userpass#connecting-with-a-user-password-in-the-url). In this case the `address` should be provided through a \nSecret reference.\n\nAdditionally if using credentials, the User must have [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization) to publish on the Subject provided.\n\n###### NATS with",
                    "rendered": {
                      "text": "er/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/connecting/userpass#connecting-with-a-user-password-in-the-url). In this case the `address` should be provided through a \nSecret reference.\n\nAdditionally if using credentials, the User must have [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization) to publish on the Subject provided.\n\n###### NATS with",
                      "markdown": "`er/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/connecting/userpass#connecting-with-a-user-password-in-the-url). In this case the `address` should be provided through a \nSecret reference.\n\nAdditionally if using credentials, the User must have [authorization](https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization) to publish on the Subject provided.\n\n###### NATS with`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 78,
                  "endLine": 1003,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\nThis Provider type can optionally use the [Secret reference](#secret-reference) to\nauthenticate to the NATS server using [Username/Password](https://docs.nats.io/using-nats/developer/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/connecting/userpass#connecting-with-a-user-password-in-the-url). In this case the `address` should be provided through a \nSecret reference.\n\n",
                    "rendered": {
                      "text": "\nThis Provider type can optionally use the [Secret reference](#secret-reference) to\nauthenticate to the NATS server using [Username/Password](https://docs.nats.io/using-nats/developer/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/connecting/userpass#connecting-with-a-user-password-in-the-url). In this case the `address` should be provided through a \nSecret reference.\n\n",
                      "markdown": "`\nThis Provider type can optionally use the [Secret reference](#secret-reference) to\nauthenticate to the NATS server using [Username/Password](https://docs.nats.io/using-nats/developer/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/connecting/userpass#connecting-with-a-user-password-in-the-url). In this case the `address` should be provided through a \nSecret reference.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1002,
                  "startColumn": 48,
                  "endLine": 1002,
                  "endColumn": 56,
                  "snippet": {
                    "text": "the [NATS Subject](https://docs.nats.io/nats-concepts/subjects) provided in the\n[Channel](#channel) field, using the server specified in the [Address](#address) field.\n\nThis Provider type can optionally use the [Secret reference](#secret-reference) to\nauthenticate to the NATS server using [Username/Password](https://docs.nats.io/using-nats/developer/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/co",
                    "rendered": {
                      "text": "the [NATS Subject](https://docs.nats.io/nats-concepts/subjects) provided in the\n[Channel](#channel) field, using the server specified in the [Address](#address) field.\n\nThis Provider type can optionally use the [Secret reference](#secret-reference) to\nauthenticate to the NATS server using [Username/Password](https://docs.nats.io/using-nats/developer/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/co",
                      "markdown": "`the [NATS Subject](https://docs.nats.io/nats-concepts/subjects) provided in the\n[Channel](#channel) field, using the server specified in the [Address](#address) field.\n\nThis Provider type can optionally use the [Secret reference](#secret-reference) to\nauthenticate to the NATS server using [Username/Password](https://docs.nats.io/using-nats/developer/connecting/userpass).\nThe credentials must be specified in [the `username`](#username-example) and `password` fields of the Secret.\nAlternatively, NATS also supports passing the credentials with [the server URL](https://docs.nats.io/using-nats/developer/co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 30,
                  "endLine": 944,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  name: alertmanager-address\n  namespace: default\nstringData:\n    address: https://username:password@<alertmanager-url>/api/v2/alerts/\"\n```\n\n##### Webex\n",
                    "rendered": {
                      "text": "  name: alertmanager-address\n  namespace: default\nstringData:\n    address: https://username:password@<alertmanager-url>/api/v2/alerts/\"\n```\n\n##### Webex\n",
                      "markdown": "`  name: alertmanager-address\n  namespace: default\nstringData:\n    address: https://username:password@<alertmanager-url>/api/v2/alerts/\"\n```\n\n##### Webex\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1595,
                  "startColumn": 34,
                  "endLine": 1595,
                  "endColumn": 42,
                  "snippet": {
                    "text": "When `.spec.type` is set to `azuredevops`, the referenced secret must contain a key called `token` with the value set to a\n[Azure DevOps personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page).\n\nThe token must have permissions to update the commit status for the Azure DevOps repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `azuredevops`, the referenced secret must contain a key called `token` with the value set to a\n[Azure DevOps personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page).\n\nThe token must have permissions to update the commit status for the Azure DevOps repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`When `.spec.type` is set to `azuredevops`, the referenced secret must contain a key called `token` with the value set to a\n[Azure DevOps personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page).\n\nThe token must have permissions to update the commit status for the Azure DevOps repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 82,
                  "endLine": 1535,
                  "endColumn": 7,
                  "snippet": {
                    "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to\nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\nDue to a bug in Gitea 1.20.0 and 1.20.1, these versions require the additional\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to\nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\nDue to a bug in Gitea 1.20.0 and 1.20.1, these versions require the additional\n",
                      "markdown": "`When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to\nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\nDue to a bug in Gitea 1.20.0 and 1.20.1, these versions require the additional\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 19,
                  "endLine": 1534,
                  "endColumn": 23,
                  "snippet": {
                    "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to\nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to\nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\n",
                      "markdown": "`When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to\nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1521,
                  "startColumn": 34,
                  "endLine": 1521,
                  "endColumn": 42,
                  "snippet": {
                    "text": "When `.spec.type` is set to `gitlab`, the referenced secret must contain a key called `token` with the value set to a\n[GitLab personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html).\n\nThe token must have permissions to update the commit status for the GitLab repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `gitlab`, the referenced secret must contain a key called `token` with the value set to a\n[GitLab personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html).\n\nThe token must have permissions to update the commit status for the GitLab repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`When `.spec.type` is set to `gitlab`, the referenced secret must contain a key called `token` with the value set to a\n[GitLab personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html).\n\nThe token must have permissions to update the commit status for the GitLab repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1508,
                  "startColumn": 34,
                  "endLine": 1508,
                  "endColumn": 42,
                  "snippet": {
                    "text": "When `.spec.type` is set to `github`, the referenced secret must contain a key called `token` with the value set to a\n[GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nThe token must have permissions to update the commit status for the GitHub repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `github`, the referenced secret must contain a key called `token` with the value set to a\n[GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nThe token must have permissions to update the commit status for the GitHub repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`When `.spec.type` is set to `github`, the referenced secret must contain a key called `token` with the value set to a\n[GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nThe token must have permissions to update the commit status for the GitHub repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1475,
                  "startColumn": 37,
                  "endLine": 1475,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                    "rendered": {
                      "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                      "markdown": "`\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1588,
                  "startColumn": 81,
                  "endLine": 1588,
                  "endColumn": 86,
                  "snippet": {
                    "text": "The HTTP access token must have `Repositories (Read/Write)` permission for\nthe repository specified in `.spec.address`.\n\n**NOTE:** Please provide HTTPS clone URL in the `address` field of this provider. SSH URLs are not supported by this provider type.\n\n#### Azure DevOps\n\n",
                    "rendered": {
                      "text": "The HTTP access token must have `Repositories (Read/Write)` permission for\nthe repository specified in `.spec.address`.\n\n**NOTE:** Please provide HTTPS clone URL in the `address` field of this provider. SSH URLs are not supported by this provider type.\n\n#### Azure DevOps\n\n",
                      "markdown": "`The HTTP access token must have `Repositories (Read/Write)` permission for\nthe repository specified in `.spec.address`.\n\n**NOTE:** Please provide HTTPS clone URL in the `address` field of this provider. SSH URLs are not supported by this provider type.\n\n#### Azure DevOps\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1475,
                  "startColumn": 48,
                  "endLine": 1475,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                    "rendered": {
                      "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                      "markdown": "`\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1471,
                  "startColumn": 58,
                  "endLine": 1471,
                  "endColumn": 63,
                  "snippet": {
                    "text": "### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n\n",
                    "rendered": {
                      "text": "### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n\n",
                      "markdown": "`### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1470,
                  "startColumn": 36,
                  "endLine": 1470,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n",
                    "rendered": {
                      "text": "\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n",
                      "markdown": "`\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1468,
                  "startColumn": 3,
                  "endLine": 1468,
                  "endColumn": 8,
                  "snippet": {
                    "text": "--from-literal=address=\"Endpoint=sb://fluxv2.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yoursaskeygeneatedbyazure\"\n```\n\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n",
                    "rendered": {
                      "text": "--from-literal=address=\"Endpoint=sb://fluxv2.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yoursaskeygeneatedbyazure\"\n```\n\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n",
                      "markdown": "`--from-literal=address=\"Endpoint=sb://fluxv2.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yoursaskeygeneatedbyazure\"\n```\n\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1415,
                  "endLine": 1416,
                  "endColumn": 5,
                  "snippet": {
                    "text": "enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU",
                    "rendered": {
                      "text": "enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU",
                      "markdown": "`enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 18,
                  "endLine": 1192,
                  "endColumn": 27,
                  "snippet": {
                    "text": "HTTP/S request sent to the provider endpoint.\nThe value must be in a\n[Go recognized duration string format](https://pkg.go.dev/time#ParseDuration),\ne.g. `5m30s` for a timeout of five minutes and thirty seconds.\n\n### Suspend\n\n",
                    "rendered": {
                      "text": "HTTP/S request sent to the provider endpoint.\nThe value must be in a\n[Go recognized duration string format](https://pkg.go.dev/time#ParseDuration),\ne.g. `5m30s` for a timeout of five minutes and thirty seconds.\n\n### Suspend\n\n",
                      "markdown": "`HTTP/S request sent to the provider endpoint.\nThe value must be in a\n[Go recognized duration string format](https://pkg.go.dev/time#ParseDuration),\ne.g. `5m30s` for a timeout of five minutes and thirty seconds.\n\n### Suspend\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1188,
                  "startColumn": 51,
                  "endLine": 1188,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n### Timeout\n\n`.spec.timeout` is an optional field to specify the timeout for the\nHTTP/S request sent to the provider endpoint.\nThe value must be in a\n[Go recognized duration string format](https://pkg.go.dev/time#ParseDuration),\n",
                    "rendered": {
                      "text": "\n### Timeout\n\n`.spec.timeout` is an optional field to specify the timeout for the\nHTTP/S request sent to the provider endpoint.\nThe value must be in a\n[Go recognized duration string format](https://pkg.go.dev/time#ParseDuration),\n",
                      "markdown": "`\n### Timeout\n\n`.spec.timeout` is an optional field to specify the timeout for the\nHTTP/S request sent to the provider endpoint.\nThe value must be in a\n[Go recognized duration string format](https://pkg.go.dev/time#ParseDuration),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 1186,
                  "startColumn": 3,
                  "endLine": 1187,
                  "snippet": {
                    "text": "recommended to store the proxy in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains a `proxy` key, the `.spec.proxy` value is ignored.\n\n### Timeout\n\n`.spec.timeout` is an optional field to specify the timeout for the\nHTTP/S request sent to the provider endpoint.\nThe value must be in a\n",
                    "rendered": {
                      "text": "recommended to store the proxy in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains a `proxy` key, the `.spec.proxy` value is ignored.\n\n### Timeout\n\n`.spec.timeout` is an optional field to specify the timeout for the\nHTTP/S request sent to the provider endpoint.\nThe value must be in a\n",
                      "markdown": "`recommended to store the proxy in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains a `proxy` key, the `.spec.proxy` value is ignored.\n\n### Timeout\n\n`.spec.timeout` is an optional field to specify the timeout for the\nHTTP/S request sent to the provider endpoint.\nThe value must be in a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 52,
                  "endLine": 901,
                  "endColumn": 58,
                  "snippet": {
                    "text": "| namespace | The namespace of the involved object associated with the event                                       |\n\nNote that due to the way other Flux controllers currently emit events, there's\nno way for notification-controller to figure out the time the event ends to set\n`.EndsAt` (a reasonable estimate being double the reconciliation interval of the\nresource involved) that doesn't involve a Kubernetes API roundtrip. A\npossible workaround could be setting\n",
                    "rendered": {
                      "text": "| namespace | The namespace of the involved object associated with the event                                       |\n\nNote that due to the way other Flux controllers currently emit events, there's\nno way for notification-controller to figure out the time the event ends to set\n`.EndsAt` (a reasonable estimate being double the reconciliation interval of the\nresource involved) that doesn't involve a Kubernetes API roundtrip. A\npossible workaround could be setting\n",
                      "markdown": "`| namespace | The namespace of the involved object associated with the event                                       |\n\nNote that due to the way other Flux controllers currently emit events, there's\nno way for notification-controller to figure out the time the event ends to set\n`.EndsAt` (a reasonable estimate being double the reconciliation interval of the\nresource involved) that doesn't involve a Kubernetes API roundtrip. A\npossible workaround could be setting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 11,
                  "endLine": 887,
                  "endColumn": 17,
                  "snippet": {
                    "text": "alert](https://prometheus.io/docs/alerting/latest/notifications/#alert), with\nthe metadata added to the `labels` fields, and the `message` (and optional\n`.metadata.summary`) added as annotations. Event timestamp will be used to set\nalert start time (`.StartsAt`).\n\nIn addition to the metadata from the Event, the following labels will be added:\n\n",
                    "rendered": {
                      "text": "alert](https://prometheus.io/docs/alerting/latest/notifications/#alert), with\nthe metadata added to the `labels` fields, and the `message` (and optional\n`.metadata.summary`) added as annotations. Event timestamp will be used to set\nalert start time (`.StartsAt`).\n\nIn addition to the metadata from the Event, the following labels will be added:\n\n",
                      "markdown": "`alert](https://prometheus.io/docs/alerting/latest/notifications/#alert), with\nthe metadata added to the `labels` fields, and the `message` (and optional\n`.metadata.summary`) added as annotations. Event timestamp will be used to set\nalert start time (`.StartsAt`).\n\nIn addition to the metadata from the Event, the following labels will be added:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 858,
                  "startColumn": 23,
                  "endLine": 858,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  address: https://events.pagerduty.com\n  channel: <integrationKey>\n```\nIf you are sending to a service integration, it is recommended to set your Alert to filter to\nonly those sources you want to trigger an incident for that service. For example:\n\n```yaml\n",
                    "rendered": {
                      "text": "  address: https://events.pagerduty.com\n  channel: <integrationKey>\n```\nIf you are sending to a service integration, it is recommended to set your Alert to filter to\nonly those sources you want to trigger an incident for that service. For example:\n\n```yaml\n",
                      "markdown": "`  address: https://events.pagerduty.com\n  channel: <integrationKey>\n```\nIf you are sending to a service integration, it is recommended to set your Alert to filter to\nonly those sources you want to trigger an incident for that service. For example:\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/providers.md"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 32,
                  "endLine": 842,
                  "endColumn": 41,
                  "snippet": {
                    "text": "the integration key (also known as a routing key) for your [service](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration)\nor [event orchestration](https://support.pagerduty.com/docs/event-orchestration).\n\nWhen adding an integration for a service on PagerDuty, it is recommended to use `Events API v2` integration.\n\n**Note**: PagerDuty does not support Change Events when sent to global integrations, such as event orchestration.\n\n",
                    "rendered": {
                      "text": "the integration key (also known as a routing key) for your [service](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration)\nor [event orchestration](https://support.pagerduty.com/docs/event-orchestration).\n\nWhen adding an integration for a service on PagerDuty, it is recommended to use `Events API v2` integration.\n\n**Note**: PagerDuty does not support Change Events when sent to global integrations, such as event orchestration.\n\n",
                      "markdown": "`the integration key (also known as a routing key) for your [service](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration)\nor [event orchestration](https://support.pagerduty.com/docs/event-orchestration).\n\nWhen adding an integration for a service on PagerDuty, it is recommended to use `Events API v2` integration.\n\n**Note**: PagerDuty does not support Change Events when sent to global integrations, such as event orchestration.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 15,
                  "endLine": 160,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.GHCR_TOKEN }}\n",
                    "rendered": {
                      "text": "      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.GHCR_TOKEN }}\n",
                      "markdown": "`      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.GHCR_TOKEN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 51,
                  "endLine": 145,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release]\n",
                    "rendered": {
                      "text": "      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release]\n",
                      "markdown": "`      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 15,
                  "endLine": 145,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release]\n",
                    "rendered": {
                      "text": "      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release]\n",
                      "markdown": "`      digest: ${{ needs.release.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 46,
                  "endLine": 59,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate images meta\n        id: meta\n        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate images meta\n        id: meta\n        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1\n",
                      "markdown": "`        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate images meta\n        id: meta\n        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 10,
                  "endLine": 59,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate images meta\n        id: meta\n        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate images meta\n        id: meta\n        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1\n",
                      "markdown": "`        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate images meta\n        id: meta\n        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 10,
                  "endLine": 54,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        with:\n          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GHCR_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n",
                    "rendered": {
                      "text": "        with:\n          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GHCR_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n",
                      "markdown": "`        with:\n          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GHCR_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 6,
                  "endLine": 129,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0\n    with:\n      provenance-name: \"provenance.intoto.jsonl\"\n      base64-subjects: \"${{ needs.release.outputs.hashes }}\"\n      upload-assets: true\n\n  dockerhub-provenance:\n",
                    "rendered": {
                      "text": "    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0\n    with:\n      provenance-name: \"provenance.intoto.jsonl\"\n      base64-subjects: \"${{ needs.release.outputs.hashes }}\"\n      upload-assets: true\n\n  dockerhub-provenance:\n",
                      "markdown": "`    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0\n    with:\n      provenance-name: \"provenance.intoto.jsonl\"\n      base64-subjects: \"${{ needs.release.outputs.hashes }}\"\n      upload-assets: true\n\n  dockerhub-provenance:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 191,
                  "endLine": 110,
                  "endColumn": 197,
                  "snippet": {
                    "text": "        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/${{ env.CONTROLLER }}:${{ steps.prep.outputs.version }}\n",
                    "rendered": {
                      "text": "        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/${{ env.CONTROLLER }}:${{ steps.prep.outputs.version }}\n",
                      "markdown": "`        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/${{ env.CONTROLLER }}:${{ steps.prep.outputs.version }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 190,
                  "endLine": 110,
                  "endColumn": 198,
                  "snippet": {
                    "text": "        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/${{ env.CONTROLLER }}:${{ steps.prep.outputs.version }}\n",
                    "rendered": {
                      "text": "        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/${{ env.CONTROLLER }}:${{ steps.prep.outputs.version }}\n",
                      "markdown": "`        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/${{ env.CONTROLLER }}:${{ steps.prep.outputs.version }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 22,
                  "endLine": 55,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GHCR_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n",
                    "rendered": {
                      "text": "          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GHCR_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n",
                      "markdown": "`          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GHCR_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n        with:\n          username: fluxcdbot\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 19,
                  "endLine": 46,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          echo \"VERSION=${VERSION}\" >> $GITHUB_OUTPUT\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Login to GitHub Container Registry\n",
                    "rendered": {
                      "text": "          echo \"VERSION=${VERSION}\" >> $GITHUB_OUTPUT\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Login to GitHub Container Registry\n",
                      "markdown": "`          echo \"VERSION=${VERSION}\" >> $GITHUB_OUTPUT\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Login to GitHub Container Registry\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/e2e.yaml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        name: Move cache\n        run: |\n          rm -rf /tmp/.buildx-cache\n          mv /tmp/.buildx-cache-new /tmp/.buildx-cache\n      - name: Load test image\n        run: kind load docker-image test/notification-controller:latest\n      - name: Install CRDs\n",
                    "rendered": {
                      "text": "        name: Move cache\n        run: |\n          rm -rf /tmp/.buildx-cache\n          mv /tmp/.buildx-cache-new /tmp/.buildx-cache\n      - name: Load test image\n        run: kind load docker-image test/notification-controller:latest\n      - name: Install CRDs\n",
                      "markdown": "`        name: Move cache\n        run: |\n          rm -rf /tmp/.buildx-cache\n          mv /tmp/.buildx-cache-new /tmp/.buildx-cache\n      - name: Load test image\n        run: kind load docker-image test/notification-controller:latest\n      - name: Install CRDs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/e2e.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 26,
                  "endLine": 48,
                  "snippet": {
                    "text": "      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n      - name: Build container image\n",
                    "rendered": {
                      "text": "      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n      - name: Build container image\n",
                      "markdown": "`      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n      - name: Build container image\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/e2e.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 11,
                  "endLine": 47,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n",
                    "rendered": {
                      "text": "      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n",
                      "markdown": "`      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/e2e.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 21,
                  "endLine": 46,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        run: make test\n      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n",
                    "rendered": {
                      "text": "        run: make test\n      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n",
                      "markdown": "`        run: make test\n      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git --no-pager diff\n            echo 'run make test and commit changes'\n            exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/e2e.yaml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 19,
                  "endLine": 21,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Cache Docker layers\n        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2\n        id: cache\n        with:\n",
                    "rendered": {
                      "text": "      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Cache Docker layers\n        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2\n        id: cache\n        with:\n",
                      "markdown": "`      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Cache Docker layers\n        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2\n        id: cache\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/workflows/e2e.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 19,
                  "endLine": 18,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Cache Docker layers\n",
                    "rendered": {
                      "text": "        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Cache Docker layers\n",
                      "markdown": "`        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1\n      - name: Cache Docker layers\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/dependabot.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 33,
                  "endLine": 20,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      - dependency-name: \"k8s.io/*\"\n      - dependency-name: \"sigs.k8s.io/*\"\n      - dependency-name: \"github.com/go-logr/*\"\n      # Flux APIs pkg are updated at release time\n      - dependency-name: \"github.com/fluxcd/notification-controller/api\"\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n",
                    "rendered": {
                      "text": "      - dependency-name: \"k8s.io/*\"\n      - dependency-name: \"sigs.k8s.io/*\"\n      - dependency-name: \"github.com/go-logr/*\"\n      # Flux APIs pkg are updated at release time\n      - dependency-name: \"github.com/fluxcd/notification-controller/api\"\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n",
                      "markdown": "`      - dependency-name: \"k8s.io/*\"\n      - dependency-name: \"sigs.k8s.io/*\"\n      - dependency-name: \"github.com/go-logr/*\"\n      # Flux APIs pkg are updated at release time\n      - dependency-name: \"github.com/fluxcd/notification-controller/api\"\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/.github/dependabot.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 44,
                  "endLine": 21,
                  "snippet": {
                    "text": "      - dependency-name: \"k8s.io/*\"\n      - dependency-name: \"sigs.k8s.io/*\"\n      - dependency-name: \"github.com/go-logr/*\"\n      # Flux APIs pkg are updated at release time\n      - dependency-name: \"github.com/fluxcd/notification-controller/api\"\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    labels: [\"area/ci\", \"dependencies\"]\n",
                    "rendered": {
                      "text": "      - dependency-name: \"k8s.io/*\"\n      - dependency-name: \"sigs.k8s.io/*\"\n      - dependency-name: \"github.com/go-logr/*\"\n      # Flux APIs pkg are updated at release time\n      - dependency-name: \"github.com/fluxcd/notification-controller/api\"\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    labels: [\"area/ci\", \"dependencies\"]\n",
                      "markdown": "`      - dependency-name: \"k8s.io/*\"\n      - dependency-name: \"sigs.k8s.io/*\"\n      - dependency-name: \"github.com/go-logr/*\"\n      # Flux APIs pkg are updated at release time\n      - dependency-name: \"github.com/fluxcd/notification-controller/api\"\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    labels: [\"area/ci\", \"dependencies\"]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/api/v1beta1/provider_types.go"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// HTTP/S address of the proxy\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://\"\n",
                    "rendered": {
                      "text": "\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// HTTP/S address of the proxy\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://\"\n",
                      "markdown": "`\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// HTTP/S address of the proxy\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller.go"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 16,
                  "endLine": 244,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t}\n\n\tvar secret corev1.Secret\n\terr := r.Client.Get(ctx, secretName, &secret)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read token from secret '%s' error: %w\", secretName, err)\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar secret corev1.Secret\n\terr := r.Client.Get(ctx, secretName, &secret)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read token from secret '%s' error: %w\", secretName, err)\n\t}\n",
                      "markdown": "`\t}\n\n\tvar secret corev1.Secret\n\terr := r.Client.Get(ctx, secretName, &secret)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read token from secret '%s' error: %w\", secretName, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller.go"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 18,
                  "endLine": 216,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t// reconciliation has failed.\n\tif conditions.IsFalse(obj, meta.ReadyCondition) &&\n\t\tconditions.Has(obj, meta.ReconcilingCondition) {\n\t\trc := conditions.Get(obj, meta.ReconcilingCondition)\n\t\trc.Reason = meta.ProgressingWithRetryReason\n\t\tconditions.Set(obj, rc)\n\t}\n",
                    "rendered": {
                      "text": "\t// reconciliation has failed.\n\tif conditions.IsFalse(obj, meta.ReadyCondition) &&\n\t\tconditions.Has(obj, meta.ReconcilingCondition) {\n\t\trc := conditions.Get(obj, meta.ReconcilingCondition)\n\t\trc.Reason = meta.ProgressingWithRetryReason\n\t\tconditions.Set(obj, rc)\n\t}\n",
                      "markdown": "`\t// reconciliation has failed.\n\tif conditions.IsFalse(obj, meta.ReadyCondition) &&\n\t\tconditions.Has(obj, meta.ReconcilingCondition) {\n\t\trc := conditions.Get(obj, meta.ReconcilingCondition)\n\t\trc.Reason = meta.ProgressingWithRetryReason\n\t\tconditions.Set(obj, rc)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 12,
                  "endLine": 102,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1.Receiver{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1.Receiver{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                      "markdown": "`\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1.Receiver{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 40,
                  "endLine": 205,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\tobj.Status.LastHandledReconcileAt = v\n\t}\n\n\t// Remove the Reconciling condition and update the observed generation\n\t// if the reconciliation was successful.\n\tif conditions.IsTrue(obj, meta.ReadyCondition) {\n\t\tconditions.Delete(obj, meta.ReconcilingCondition)\n",
                    "rendered": {
                      "text": "\t\tobj.Status.LastHandledReconcileAt = v\n\t}\n\n\t// Remove the Reconciling condition and update the observed generation\n\t// if the reconciliation was successful.\n\tif conditions.IsTrue(obj, meta.ReadyCondition) {\n\t\tconditions.Delete(obj, meta.ReconcilingCondition)\n",
                      "markdown": "`\t\tobj.Status.LastHandledReconcileAt = v\n\t}\n\n\t// Remove the Reconciling condition and update the observed generation\n\t// if the reconciliation was successful.\n\tif conditions.IsTrue(obj, meta.ReadyCondition) {\n\t\tconditions.Delete(obj, meta.ReconcilingCondition)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 19,
                  "endLine": 114,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, providerKey, provider); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                    "rendered": {
                      "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, providerKey, provider); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                      "markdown": "`\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, providerKey, provider); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 15,
                  "endLine": 107,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tprovider.ObjectMeta.Finalizers = []string{apiv1.NotificationFinalizer}\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, providerKey, provider)\n\t\treturn controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tprovider.ObjectMeta.Finalizers = []string{apiv1.NotificationFinalizer}\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, providerKey, provider)\n\t\treturn controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout).Should(BeTrue())\n\n",
                      "markdown": "`\tprovider.ObjectMeta.Finalizers = []string{apiv1.NotificationFinalizer}\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, providerKey, provider)\n\t\treturn controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 15,
                  "endLine": 95,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, providerKey, provider)\n\t\treturn provider.Spec.Suspend == true\n\t}, timeout).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, providerKey, provider)\n\t\treturn provider.Spec.Suspend == true\n\t}, timeout).Should(BeTrue())\n\n",
                      "markdown": "`\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, providerKey, provider)\n\t\treturn provider.Spec.Suspend == true\n\t}, timeout).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "endLine": 76,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 13,
                  "endLine": 64,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tg.Expect(testEnv.Create(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(testEnv.Create(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(testEnv.Create(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 16,
                  "endLine": 114,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, providerKey, provider); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                    "rendered": {
                      "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, providerKey, provider); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                      "markdown": "`\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, providerKey, provider); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 10,
                  "endLine": 76,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 10,
                  "endLine": 64,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tg.Expect(testEnv.Create(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(testEnv.Create(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(testEnv.Create(ctx, provider)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, providerKey, provider)\n\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 3,
                  "endLine": 90,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n",
                      "markdown": "`\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n\t// Suspend the provider to prevent finalizer from getting removed.\n\t// Ensure only flux finalizer is set to allow the object to be garbage\n\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n",
                    "rendered": {
                      "text": "\n\t// Suspend the provider to prevent finalizer from getting removed.\n\t// Ensure only flux finalizer is set to allow the object to be garbage\n\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n",
                      "markdown": "`\n\t// Suspend the provider to prevent finalizer from getting removed.\n\t// Ensure only flux finalizer is set to allow the object to be garbage\n\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 20,
                  "endLine": 80,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at delete.\n\n\tpatchHelper, err = patch.NewHelper(provider, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at delete.\n\n\tpatchHelper, err = patch.NewHelper(provider, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                      "markdown": "`\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at delete.\n\n\tpatchHelper, err = patch.NewHelper(provider, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 20,
                  "endLine": 68,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at update.\n\n\tpatchHelper, err := patch.NewHelper(provider, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at update.\n\n\tpatchHelper, err := patch.NewHelper(provider, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                      "markdown": "`\t\treturn !controllerutil.ContainsFinalizer(provider, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at update.\n\n\tpatchHelper, err := patch.NewHelper(provider, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t}\n\tproviderKey := client.ObjectKeyFromObject(provider)\n\n\t// Remove finalizer at create.\n\n\tprovider.ObjectMeta.Finalizers = append(provider.ObjectMeta.Finalizers, \"foo.bar\", apiv1.NotificationFinalizer)\n\tprovider.Spec = apiv1beta3.ProviderSpec{\n",
                    "rendered": {
                      "text": "\t}\n\tproviderKey := client.ObjectKeyFromObject(provider)\n\n\t// Remove finalizer at create.\n\n\tprovider.ObjectMeta.Finalizers = append(provider.ObjectMeta.Finalizers, \"foo.bar\", apiv1.NotificationFinalizer)\n\tprovider.Spec = apiv1beta3.ProviderSpec{\n",
                      "markdown": "`\t}\n\tproviderKey := client.ObjectKeyFromObject(provider)\n\n\t// Remove finalizer at create.\n\n\tprovider.ObjectMeta.Finalizers = append(provider.ObjectMeta.Finalizers, \"foo.bar\", apiv1.NotificationFinalizer)\n\tprovider.Spec = apiv1beta3.ProviderSpec{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 3,
                  "endLine": 91,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n",
                    "rendered": {
                      "text": "\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n",
                      "markdown": "`\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\tprovider.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, provider)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller_test.go"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "endColumn": 9,
                  "snippet": {
                    "text": "func TestProviderReconciler(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 10 * time.Second\n\n\ttestns, err := testEnv.CreateNamespace(ctx, \"provider-test\")\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "func TestProviderReconciler(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 10 * time.Second\n\n\ttestns, err := testEnv.CreateNamespace(ctx, \"provider-test\")\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                      "markdown": "`func TestProviderReconciler(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 10 * time.Second\n\n\ttestns, err := testEnv.CreateNamespace(ctx, \"provider-test\")\n\tg.Expect(err).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 12,
                  "endLine": 55,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1beta3.Alert{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1beta3.Alert{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                      "markdown": "`\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1beta3.Alert{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/lark_fuzz_test.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Severity = severity\n\n\t\t_ = lark.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Severity = severity\n\n\t\t_ = lark.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Severity = severity\n\n\t\t_ = lark.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/pagerduty_test.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tpd, err := NewPagerDuty(ts.URL, \"\", nil, \"token\")\n\trequire.NoError(t, err)\n\n\terr = pd.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                    "rendered": {
                      "text": "\tpd, err := NewPagerDuty(ts.URL, \"\", nil, \"token\")\n\trequire.NoError(t, err)\n\n\terr = pd.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                      "markdown": "`\tpd, err := NewPagerDuty(ts.URL, \"\", nil, \"token\")\n\trequire.NoError(t, err)\n\n\terr = pd.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/webex_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = webex.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = webex.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = webex.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/webex_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\twebex, err := NewWebex(ts.URL, \"\", nil, \"room\", \"token\")\n\trequire.NoError(t, err)\n\n\terr = webex.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                    "rendered": {
                      "text": "\twebex, err := NewWebex(ts.URL, \"\", nil, \"room\", \"token\")\n\trequire.NoError(t, err)\n\n\terr = webex.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                      "markdown": "`\twebex, err := NewWebex(ts.URL, \"\", nil, \"room\", \"token\")\n\trequire.NoError(t, err)\n\n\terr = webex.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/opsgenie_fuzz_test.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 14,
                  "endLine": 63,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Message = message\n\n\t\t_ = opsgenie.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Message = message\n\n\t\t_ = opsgenie.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Message = message\n\n\t\t_ = opsgenie.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 26,
                  "endLine": 150,
                  "endColumn": 34,
                  "snippet": {
                    "text": "func TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n\n",
                    "rendered": {
                      "text": "func TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n\n",
                      "markdown": "`func TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 14,
                  "endLine": 149,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nfunc TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n",
                    "rendered": {
                      "text": "\nfunc TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n",
                      "markdown": "`\nfunc TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 1,
                  "endLine": 149,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n",
                    "rendered": {
                      "text": "\nfunc TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n",
                      "markdown": "`\nfunc TestUtil_BasicAuth(t *testing.T) {\n\tusername := \"user\"\n\tpassword := \"password\"\n\ts := basicAuth(username, password)\n\trequire.Equal(t, \"dXNlcjpwYXNzd29yZA==\", s)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 18,
                  "endLine": 144,
                  "endColumn": 60,
                  "snippet": {
                    "text": "func TestUtil_Sha1String(t *testing.T) {\n\tstr := \"kustomization/namespace-foo-and-service-bar\"\n\ts := sha1String(str)\n\trequire.Equal(t, \"12ea142172e98435e16336acbbed8919610922c3\", s)\n}\n\nfunc TestUtil_BasicAuth(t *testing.T) {\n",
                    "rendered": {
                      "text": "func TestUtil_Sha1String(t *testing.T) {\n\tstr := \"kustomization/namespace-foo-and-service-bar\"\n\ts := sha1String(str)\n\trequire.Equal(t, \"12ea142172e98435e16336acbbed8919610922c3\", s)\n}\n\nfunc TestUtil_BasicAuth(t *testing.T) {\n",
                      "markdown": "`func TestUtil_Sha1String(t *testing.T) {\n\tstr := \"kustomization/namespace-foo-and-service-bar\"\n\ts := sha1String(str)\n\trequire.Equal(t, \"12ea142172e98435e16336acbbed8919610922c3\", s)\n}\n\nfunc TestUtil_BasicAuth(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 71,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:     \"legacy (nested branch)\",\n\t\t\trevision: \"environment/dev/a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy (one component)\",\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:     \"legacy (nested branch)\",\n\t\t\trevision: \"environment/dev/a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy (one component)\",\n",
                      "markdown": "`\t\t{\n\t\t\tname:     \"legacy (nested branch)\",\n\t\t\trevision: \"environment/dev/a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy (one component)\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:     \"legacy\",\n\t\t\trevision: \"master/a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy (nested branch)\",\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:     \"legacy\",\n\t\t\trevision: \"master/a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy (nested branch)\",\n",
                      "markdown": "`\t\t{\n\t\t\tname:     \"legacy\",\n\t\t\trevision: \"master/a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy (nested branch)\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 13,
                  "endLine": 61,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:     \"nested branch\",\n\t\t\trevision: \"environment/dev@sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy\",\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:     \"nested branch\",\n\t\t\trevision: \"environment/dev@sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy\",\n",
                      "markdown": "`\t\t{\n\t\t\tname:     \"nested branch\",\n\t\t\trevision: \"environment/dev@sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"legacy\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:     \"branch\",\n\t\t\trevision: \"master@sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"nested branch\",\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:     \"branch\",\n\t\t\trevision: \"master@sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"nested branch\",\n",
                      "markdown": "`\t\t{\n\t\t\tname:     \"branch\",\n\t\t\trevision: \"master@sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"nested branch\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:     \"commit\",\n\t\t\trevision: \"sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"branch\",\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:     \"commit\",\n\t\t\trevision: \"sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"branch\",\n",
                      "markdown": "`\t\t{\n\t\t\tname:     \"commit\",\n\t\t\trevision: \"sha1:a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t\texpect:   \"a1afe267b54f38b46b487f6e938a6fd508278c07\",\n\t\t},\n\t\t{\n\t\t\tname:     \"branch\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util_test.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ttests := []struct {\n\t\tname     string\n\t\trevision string\n\t\texpect   string\n\t\twantErr  string\n\t}{\n\t\t{\n",
                    "rendered": {
                      "text": "\ttests := []struct {\n\t\tname     string\n\t\trevision string\n\t\texpect   string\n\t\twantErr  string\n\t}{\n\t\t{\n",
                      "markdown": "`\ttests := []struct {\n\t\tname     string\n\t\trevision string\n\t\texpect   string\n\t\twantErr  string\n\t}{\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucket.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 44,
                  "endLine": 68,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\towner := comp[0]\n\trepo := comp[1]\n\n\tclient := bitbucket.NewBasicAuth(username, password)\n\tif certPool != nil {\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{\n",
                    "rendered": {
                      "text": "\towner := comp[0]\n\trepo := comp[1]\n\n\tclient := bitbucket.NewBasicAuth(username, password)\n\tif certPool != nil {\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{\n",
                      "markdown": "`\towner := comp[0]\n\trepo := comp[1]\n\n\tclient := bitbucket.NewBasicAuth(username, password)\n\tif certPool != nil {\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucket.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\treturn nil, errors.New(\"invalid token format, expected to be <user>:<password>\")\n\t}\n\tusername := comp[0]\n\tpassword := comp[1]\n\n\tcomp = strings.Split(id, \"/\")\n\tif len(comp) != 2 {\n",
                    "rendered": {
                      "text": "\t\treturn nil, errors.New(\"invalid token format, expected to be <user>:<password>\")\n\t}\n\tusername := comp[0]\n\tpassword := comp[1]\n\n\tcomp = strings.Split(id, \"/\")\n\tif len(comp) != 2 {\n",
                      "markdown": "`\t\treturn nil, errors.New(\"invalid token format, expected to be <user>:<password>\")\n\t}\n\tusername := comp[0]\n\tpassword := comp[1]\n\n\tcomp = strings.Split(id, \"/\")\n\tif len(comp) != 2 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucket.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 71,
                  "endLine": 56,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n\tcomp := strings.Split(token, \":\")\n\tif len(comp) != 2 {\n\t\treturn nil, errors.New(\"invalid token format, expected to be <user>:<password>\")\n\t}\n\tusername := comp[0]\n\tpassword := comp[1]\n",
                    "rendered": {
                      "text": "\n\tcomp := strings.Split(token, \":\")\n\tif len(comp) != 2 {\n\t\treturn nil, errors.New(\"invalid token format, expected to be <user>:<password>\")\n\t}\n\tusername := comp[0]\n\tpassword := comp[1]\n",
                      "markdown": "`\n\tcomp := strings.Split(token, \":\")\n\tif len(comp) != 2 {\n\t\treturn nil, errors.New(\"invalid token format, expected to be <user>:<password>\")\n\t}\n\tusername := comp[0]\n\tpassword := comp[1]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 72,
                  "endLine": 86,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n\terr := postMessage(ctx, g.URL, g.ProxyURL, g.CertPool, payload, func(request *retryablehttp.Request) {\n\t\tif (g.Username != \"\" && g.Password != \"\") && g.Token == \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Basic \"+basicAuth(g.Username, g.Password))\n\t\t}\n\t\tif g.Token != \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Bearer \"+g.Token)\n",
                    "rendered": {
                      "text": "\n\terr := postMessage(ctx, g.URL, g.ProxyURL, g.CertPool, payload, func(request *retryablehttp.Request) {\n\t\tif (g.Username != \"\" && g.Password != \"\") && g.Token == \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Basic \"+basicAuth(g.Username, g.Password))\n\t\t}\n\t\tif g.Token != \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Bearer \"+g.Token)\n",
                      "markdown": "`\n\terr := postMessage(ctx, g.URL, g.ProxyURL, g.CertPool, payload, func(request *retryablehttp.Request) {\n\t\tif (g.Username != \"\" && g.Password != \"\") && g.Token == \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Basic \"+basicAuth(g.Username, g.Password))\n\t\t}\n\t\tif g.Token != \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Bearer \"+g.Token)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 28,
                  "endLine": 85,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t}\n\n\terr := postMessage(ctx, g.URL, g.ProxyURL, g.CertPool, payload, func(request *retryablehttp.Request) {\n\t\tif (g.Username != \"\" && g.Password != \"\") && g.Token == \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Basic \"+basicAuth(g.Username, g.Password))\n\t\t}\n\t\tif g.Token != \"\" {\n",
                    "rendered": {
                      "text": "\t}\n\n\terr := postMessage(ctx, g.URL, g.ProxyURL, g.CertPool, payload, func(request *retryablehttp.Request) {\n\t\tif (g.Username != \"\" && g.Password != \"\") && g.Token == \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Basic \"+basicAuth(g.Username, g.Password))\n\t\t}\n\t\tif g.Token != \"\" {\n",
                      "markdown": "`\t}\n\n\terr := postMessage(ctx, g.URL, g.ProxyURL, g.CertPool, payload, func(request *retryablehttp.Request) {\n\t\tif (g.Username != \"\" && g.Password != \"\") && g.Token == \"\" {\n\t\t\trequest.Header.Add(\"Authorization\", \"Basic \"+basicAuth(g.Username, g.Password))\n\t\t}\n\t\tif g.Token != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 12,
                  "endLine": 59,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\tToken:    token,\n\t\tCertPool: certPool,\n\t\tUsername: username,\n\t\tPassword: password,\n\t}, nil\n}\n\n",
                    "rendered": {
                      "text": "\t\tToken:    token,\n\t\tCertPool: certPool,\n\t\tUsername: username,\n\t\tPassword: password,\n\t}, nil\n}\n\n",
                      "markdown": "`\t\tToken:    token,\n\t\tCertPool: certPool,\n\t\tUsername: username,\n\t\tPassword: password,\n\t}, nil\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 2,
                  "endLine": 59,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tToken:    token,\n\t\tCertPool: certPool,\n\t\tUsername: username,\n\t\tPassword: password,\n\t}, nil\n}\n\n",
                    "rendered": {
                      "text": "\t\tToken:    token,\n\t\tCertPool: certPool,\n\t\tUsername: username,\n\t\tPassword: password,\n\t}, nil\n}\n\n",
                      "markdown": "`\t\tToken:    token,\n\t\tCertPool: certPool,\n\t\tUsername: username,\n\t\tPassword: password,\n\t}, nil\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 101,
                  "endLine": 47,
                  "endColumn": 109,
                  "snippet": {
                    "text": "}\n\n// NewGrafana validates the Grafana URL and returns a Grafana object\nfunc NewGrafana(URL string, proxyURL string, token string, certPool *x509.CertPool, username string, password string) (*Grafana, error) {\n\t_, err := url.ParseRequestURI(URL)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid Grafana URL %s\", URL)\n",
                    "rendered": {
                      "text": "}\n\n// NewGrafana validates the Grafana URL and returns a Grafana object\nfunc NewGrafana(URL string, proxyURL string, token string, certPool *x509.CertPool, username string, password string) (*Grafana, error) {\n\t_, err := url.ParseRequestURI(URL)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid Grafana URL %s\", URL)\n",
                      "markdown": "`}\n\n// NewGrafana validates the Grafana URL and returns a Grafana object\nfunc NewGrafana(URL string, proxyURL string, token string, certPool *x509.CertPool, username string, password string) (*Grafana, error) {\n\t_, err := url.ParseRequestURI(URL)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid Grafana URL %s\", URL)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tProxyURL string\n\tCertPool *x509.CertPool\n\tUsername string\n\tPassword string\n}\n\n// GraphiteAnnotation represents a Grafana API annotation in Graphite format\n",
                    "rendered": {
                      "text": "\tProxyURL string\n\tCertPool *x509.CertPool\n\tUsername string\n\tPassword string\n}\n\n// GraphiteAnnotation represents a Grafana API annotation in Graphite format\n",
                      "markdown": "`\tProxyURL string\n\tCertPool *x509.CertPool\n\tUsername string\n\tPassword string\n}\n\n// GraphiteAnnotation represents a Grafana API annotation in Graphite format\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 26,
                  "endLine": 65,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n// Post annotation\nfunc (g *Grafana) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                    "rendered": {
                      "text": "\n// Post annotation\nfunc (g *Grafana) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                      "markdown": "`\n// Post annotation\nfunc (g *Grafana) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 8,
                  "endLine": 65,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n// Post annotation\nfunc (g *Grafana) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                    "rendered": {
                      "text": "\n// Post annotation\nfunc (g *Grafana) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                      "markdown": "`\n// Post annotation\nfunc (g *Grafana) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/discord_fuzz_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 13,
                  "endLine": 61,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Severity = severity\n\n\t\t_ = discord.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Severity = severity\n\n\t\t_ = discord.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\t\tevent.Severity = severity\n\n\t\t_ = discord.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 102,
                  "endLine": 236,
                  "endColumn": 110,
                  "snippet": {
                    "text": "}\n\nfunc bitbucketServerNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewBitbucketServer(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool, opts.Username, opts.Password)\n}\n\nfunc bitbucketNotifierFunc(opts notifierOptions) (Interface, error) {\n",
                    "rendered": {
                      "text": "}\n\nfunc bitbucketServerNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewBitbucketServer(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool, opts.Username, opts.Password)\n}\n\nfunc bitbucketNotifierFunc(opts notifierOptions) (Interface, error) {\n",
                      "markdown": "`}\n\nfunc bitbucketServerNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewBitbucketServer(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool, opts.Username, opts.Password)\n}\n\nfunc bitbucketNotifierFunc(opts notifierOptions) (Interface, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 20,
                  "endLine": 230,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunc giteaNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitea(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n",
                    "rendered": {
                      "text": "\nfunc giteaNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitea(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n",
                      "markdown": "`\nfunc giteaNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitea(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 29,
                  "endLine": 229,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nfunc giteaNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitea(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n",
                    "rendered": {
                      "text": "}\n\nfunc giteaNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitea(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n",
                      "markdown": "`}\n\nfunc giteaNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitea(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 20,
                  "endLine": 223,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunc gitLabNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitLab(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n",
                    "rendered": {
                      "text": "\nfunc gitLabNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitLab(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n",
                      "markdown": "`\nfunc gitLabNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitLab(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 29,
                  "endLine": 222,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nfunc gitLabNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitLab(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n",
                    "rendered": {
                      "text": "}\n\nfunc gitLabNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitLab(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n",
                      "markdown": "`}\n\nfunc gitLabNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitLab(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 20,
                  "endLine": 216,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunc gitHubDispatchNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHubDispatch(opts.URL, opts.Token, opts.CertPool)\n}\n",
                    "rendered": {
                      "text": "\nfunc gitHubDispatchNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHubDispatch(opts.URL, opts.Token, opts.CertPool)\n}\n",
                      "markdown": "`\nfunc gitHubDispatchNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHubDispatch(opts.URL, opts.Token, opts.CertPool)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 29,
                  "endLine": 215,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nfunc gitHubDispatchNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHubDispatch(opts.URL, opts.Token, opts.CertPool)\n",
                    "rendered": {
                      "text": "}\n\nfunc gitHubDispatchNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHubDispatch(opts.URL, opts.Token, opts.CertPool)\n",
                      "markdown": "`}\n\nfunc gitHubDispatchNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHubDispatch(opts.URL, opts.Token, opts.CertPool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 20,
                  "endLine": 209,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHub(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n",
                    "rendered": {
                      "text": "\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHub(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n",
                      "markdown": "`\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHub(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 29,
                  "endLine": 208,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHub(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n",
                    "rendered": {
                      "text": "}\n\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHub(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n",
                      "markdown": "`}\n\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n\tif opts.Token == \"\" && opts.Password != \"\" {\n\t\topts.Token = opts.Password\n\t}\n\treturn NewGitHub(opts.ProviderUID, opts.URL, opts.Token, opts.CertPool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 60,
                  "endLine": 204,
                  "endColumn": 68,
                  "snippet": {
                    "text": "}\n\nfunc natsNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewNATS(opts.URL, opts.Channel, opts.Username, opts.Password)\n}\n\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n",
                    "rendered": {
                      "text": "}\n\nfunc natsNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewNATS(opts.URL, opts.Channel, opts.Username, opts.Password)\n}\n\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n",
                      "markdown": "`}\n\nfunc natsNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewNATS(opts.URL, opts.Channel, opts.Username, opts.Password)\n}\n\nfunc gitHubNotifierFunc(opts notifierOptions) (Interface, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 91,
                  "endLine": 192,
                  "endColumn": 99,
                  "snippet": {
                    "text": "}\n\nfunc grafanaNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewGrafana(opts.URL, opts.ProxyURL, opts.Token, opts.CertPool, opts.Username, opts.Password)\n}\n\nfunc pagerDutyNotifierFunc(opts notifierOptions) (Interface, error) {\n",
                    "rendered": {
                      "text": "}\n\nfunc grafanaNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewGrafana(opts.URL, opts.ProxyURL, opts.Token, opts.CertPool, opts.Username, opts.Password)\n}\n\nfunc pagerDutyNotifierFunc(opts notifierOptions) (Interface, error) {\n",
                      "markdown": "`}\n\nfunc grafanaNotifierFunc(opts notifierOptions) (Interface, error) {\n\treturn NewGrafana(opts.URL, opts.ProxyURL, opts.Token, opts.CertPool, opts.Username, opts.Password)\n}\n\nfunc pagerDutyNotifierFunc(opts notifierOptions) (Interface, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 16,
                  "endLine": 100,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\tToken:       token,\n\t\t\tHeaders:     headers,\n\t\t\tCertPool:    certPool,\n\t\t\tPassword:    password,\n\t\t\tProviderUID: providerUID,\n\t\t},\n\t}\n",
                    "rendered": {
                      "text": "\t\t\tToken:       token,\n\t\t\tHeaders:     headers,\n\t\t\tCertPool:    certPool,\n\t\t\tPassword:    password,\n\t\t\tProviderUID: providerUID,\n\t\t},\n\t}\n",
                      "markdown": "`\t\t\tToken:       token,\n\t\t\tHeaders:     headers,\n\t\t\tCertPool:    certPool,\n\t\t\tPassword:    password,\n\t\t\tProviderUID: providerUID,\n\t\t},\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 3,
                  "endLine": 100,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\tToken:       token,\n\t\t\tHeaders:     headers,\n\t\t\tCertPool:    certPool,\n\t\t\tPassword:    password,\n\t\t\tProviderUID: providerUID,\n\t\t},\n\t}\n",
                    "rendered": {
                      "text": "\t\t\tToken:       token,\n\t\t\tHeaders:     headers,\n\t\t\tCertPool:    certPool,\n\t\t\tPassword:    password,\n\t\t\tProviderUID: providerUID,\n\t\t},\n\t}\n",
                      "markdown": "`\t\t\tToken:       token,\n\t\t\tHeaders:     headers,\n\t\t\tCertPool:    certPool,\n\t\t\tPassword:    password,\n\t\t\tProviderUID: providerUID,\n\t\t},\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ttoken string,\n\theaders map[string]string,\n\tcertPool *x509.CertPool,\n\tpassword string,\n\tproviderUID string) *Factory {\n\treturn &Factory{\n\t\tnotifierOptions: notifierOptions{\n",
                    "rendered": {
                      "text": "\ttoken string,\n\theaders map[string]string,\n\tcertPool *x509.CertPool,\n\tpassword string,\n\tproviderUID string) *Factory {\n\treturn &Factory{\n\t\tnotifierOptions: notifierOptions{\n",
                      "markdown": "`\ttoken string,\n\theaders map[string]string,\n\tcertPool *x509.CertPool,\n\tpassword string,\n\tproviderUID string) *Factory {\n\treturn &Factory{\n\t\tnotifierOptions: notifierOptions{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/factory.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tToken       string\n\tHeaders     map[string]string\n\tCertPool    *x509.CertPool\n\tPassword    string\n\tProviderUID string\n}\n\n",
                    "rendered": {
                      "text": "\tToken       string\n\tHeaders     map[string]string\n\tCertPool    *x509.CertPool\n\tPassword    string\n\tProviderUID string\n}\n\n",
                      "markdown": "`\tToken       string\n\tHeaders     map[string]string\n\tCertPool    *x509.CertPool\n\tPassword    string\n\tProviderUID string\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 26,
                  "endLine": 125,
                  "endColumn": 34,
                  "snippet": {
                    "text": "}\n\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\n",
                    "rendered": {
                      "text": "}\n\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\n",
                      "markdown": "`}\n\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util.go"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 25,
                  "endLine": 124,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\treturn fmt.Sprintf(\"%x\", sha1.Sum(bs))\n}\n\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n",
                    "rendered": {
                      "text": "\treturn fmt.Sprintf(\"%x\", sha1.Sum(bs))\n}\n\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n",
                      "markdown": "`\treturn fmt.Sprintf(\"%x\", sha1.Sum(bs))\n}\n\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "endLine": 126,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\nfunc strPtr(s string) *string {\n",
                    "rendered": {
                      "text": "\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\nfunc strPtr(s string) *string {\n",
                      "markdown": "`\nfunc basicAuth(username, password string) string {\n\tauth := username + \":\" + password\n\treturn base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\nfunc strPtr(s string) *string {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/util.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 11,
                  "endLine": 21,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n",
                    "rendered": {
                      "text": "\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n",
                      "markdown": "`\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/opsgenie_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\topsgenie, err := NewOpsgenie(ts.URL, \"\", nil, \"token\")\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = opsgenie.Post(context.TODO(), tt.event())\n\t\t\trequire.NoError(t, err)\n\t\t})\n\t}\n",
                    "rendered": {
                      "text": "\t\t\topsgenie, err := NewOpsgenie(ts.URL, \"\", nil, \"token\")\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = opsgenie.Post(context.TODO(), tt.event())\n\t\t\trequire.NoError(t, err)\n\t\t})\n\t}\n",
                      "markdown": "`\t\t\topsgenie, err := NewOpsgenie(ts.URL, \"\", nil, \"token\")\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = opsgenie.Post(context.TODO(), tt.event())\n\t\t\trequire.NoError(t, err)\n\t\t})\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/google_chat_fuzz_test.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 16,
                  "endLine": 60,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = googlechat.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = googlechat.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = googlechat.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/webex_fuzz_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 11,
                  "endLine": 64,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = webex.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = webex.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = webex.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t\t\tsubject: tt.subject,\n\t\t\t}\n\n\t\t\terr := topic.Post(context.Background(), tt.event)\n\t\t\tif tt.expectedErr == nil {\n\t\t\t\tg.Expect(err).To(BeNil())\n\t\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t\t\tsubject: tt.subject,\n\t\t\t}\n\n\t\t\terr := topic.Post(context.Background(), tt.event)\n\t\t\tif tt.expectedErr == nil {\n\t\t\t\tg.Expect(err).To(BeNil())\n\t\t\t} else {\n",
                      "markdown": "`\t\t\t\tsubject: tt.subject,\n\t\t\t}\n\n\t\t\terr := topic.Post(context.Background(), tt.event)\n\t\t\tif tt.expectedErr == nil {\n\t\t\t\tg.Expect(err).To(BeNil())\n\t\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 50,
                  "endLine": 79,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n\t\t\t\tg.Expect(client.server).To(Equal(tt.server))\n\t\t\t\tg.Expect(client.username).To(Equal(tt.expectedUsername))\n\t\t\t\tg.Expect(client.password).To(Equal(tt.expectedPassword))\n\t\t\t}\n\t\t})\n\t}\n",
                    "rendered": {
                      "text": "\n\t\t\t\tg.Expect(client.server).To(Equal(tt.server))\n\t\t\t\tg.Expect(client.username).To(Equal(tt.expectedUsername))\n\t\t\t\tg.Expect(client.password).To(Equal(tt.expectedPassword))\n\t\t\t}\n\t\t})\n\t}\n",
                      "markdown": "`\n\t\t\t\tg.Expect(client.server).To(Equal(tt.server))\n\t\t\t\tg.Expect(client.username).To(Equal(tt.expectedUsername))\n\t\t\t\tg.Expect(client.password).To(Equal(tt.expectedPassword))\n\t\t\t}\n\t\t})\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 20,
                  "endLine": 79,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n\t\t\t\tg.Expect(client.server).To(Equal(tt.server))\n\t\t\t\tg.Expect(client.username).To(Equal(tt.expectedUsername))\n\t\t\t\tg.Expect(client.password).To(Equal(tt.expectedPassword))\n\t\t\t}\n\t\t})\n\t}\n",
                    "rendered": {
                      "text": "\n\t\t\t\tg.Expect(client.server).To(Equal(tt.server))\n\t\t\t\tg.Expect(client.username).To(Equal(tt.expectedUsername))\n\t\t\t\tg.Expect(client.password).To(Equal(tt.expectedPassword))\n\t\t\t}\n\t\t})\n\t}\n",
                      "markdown": "`\n\t\t\t\tg.Expect(client.server).To(Equal(tt.server))\n\t\t\t\tg.Expect(client.username).To(Equal(tt.expectedUsername))\n\t\t\t\tg.Expect(client.password).To(Equal(tt.expectedPassword))\n\t\t\t}\n\t\t})\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 67,
                  "endLine": 63,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tg := NewWithT(t)\n\n\t\t\tprovider, err := NewNATS(tt.server, tt.subject, tt.username, tt.password)\n\t\t\tif tt.expectedErr != nil {\n\t\t\t\tg.Expect(err).To(Equal(tt.expectedErr))\n\t\t\t\tg.Expect(provider).To(BeNil())\n",
                    "rendered": {
                      "text": "\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tg := NewWithT(t)\n\n\t\t\tprovider, err := NewNATS(tt.server, tt.subject, tt.username, tt.password)\n\t\t\tif tt.expectedErr != nil {\n\t\t\t\tg.Expect(err).To(Equal(tt.expectedErr))\n\t\t\t\tg.Expect(provider).To(BeNil())\n",
                      "markdown": "`\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tg := NewWithT(t)\n\n\t\t\tprovider, err := NewNATS(tt.server, tt.subject, tt.username, tt.password)\n\t\t\tif tt.expectedErr != nil {\n\t\t\t\tg.Expect(err).To(Equal(tt.expectedErr))\n\t\t\t\tg.Expect(provider).To(BeNil())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 11,
                  "endLine": 55,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t\tpassword:         \"pass\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"user\",\n\t\t\texpectedPassword: \"pass\",\n\t\t},\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\tpassword:         \"pass\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"user\",\n\t\t\texpectedPassword: \"pass\",\n\t\t},\n\t}\n\n",
                      "markdown": "`\t\t\tpassword:         \"pass\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"user\",\n\t\t\texpectedPassword: \"pass\",\n\t\t},\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 3,
                  "endLine": 52,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\tsubject:          \"test\",\n\t\t\tserver:           \"nats\",\n\t\t\tusername:         \"user\",\n\t\t\tpassword:         \"pass\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"user\",\n\t\t\texpectedPassword: \"pass\",\n",
                    "rendered": {
                      "text": "\t\t\tsubject:          \"test\",\n\t\t\tserver:           \"nats\",\n\t\t\tusername:         \"user\",\n\t\t\tpassword:         \"pass\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"user\",\n\t\t\texpectedPassword: \"pass\",\n",
                      "markdown": "`\t\t\tsubject:          \"test\",\n\t\t\tserver:           \"nats\",\n\t\t\tusername:         \"user\",\n\t\t\tpassword:         \"pass\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"user\",\n\t\t\texpectedPassword: \"pass\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 11,
                  "endLine": 45,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t\tpassword:         \"\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"\",\n\t\t\texpectedPassword: \"\",\n\t\t},\n\t\t{\n\t\t\tname:             \"non-empty creds are stored properly\",\n",
                    "rendered": {
                      "text": "\t\t\tpassword:         \"\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"\",\n\t\t\texpectedPassword: \"\",\n\t\t},\n\t\t{\n\t\t\tname:             \"non-empty creds are stored properly\",\n",
                      "markdown": "`\t\t\tpassword:         \"\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"\",\n\t\t\texpectedPassword: \"\",\n\t\t},\n\t\t{\n\t\t\tname:             \"non-empty creds are stored properly\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "endLine": 42,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\tsubject:          \"test\",\n\t\t\tserver:           \"nats\",\n\t\t\tusername:         \"\",\n\t\t\tpassword:         \"\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"\",\n\t\t\texpectedPassword: \"\",\n",
                    "rendered": {
                      "text": "\t\t\tsubject:          \"test\",\n\t\t\tserver:           \"nats\",\n\t\t\tusername:         \"\",\n\t\t\tpassword:         \"\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"\",\n\t\t\texpectedPassword: \"\",\n",
                      "markdown": "`\t\t\tsubject:          \"test\",\n\t\t\tserver:           \"nats\",\n\t\t\tusername:         \"\",\n\t\t\tpassword:         \"\",\n\t\t\texpectedSubject:  \"test\",\n\t\t\texpectedUsername: \"\",\n\t\t\texpectedPassword: \"\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 10,
                  "endLine": 23,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\texpectedErr      error\n\t\texpectedSubject  string\n\t\texpectedUsername string\n\t\texpectedPassword string\n\t}{\n\t\t{\n\t\t\tname:        \"empty subject is not allowed\",\n",
                    "rendered": {
                      "text": "\t\texpectedErr      error\n\t\texpectedSubject  string\n\t\texpectedUsername string\n\t\texpectedPassword string\n\t}{\n\t\t{\n\t\t\tname:        \"empty subject is not allowed\",\n",
                      "markdown": "`\t\texpectedErr      error\n\t\texpectedSubject  string\n\t\texpectedUsername string\n\t\texpectedPassword string\n\t}{\n\t\t{\n\t\t\tname:        \"empty subject is not allowed\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats_test.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 2,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tsubject          string\n\t\tserver           string\n\t\tusername         string\n\t\tpassword         string\n\t\texpectedErr      error\n\t\texpectedSubject  string\n\t\texpectedUsername string\n",
                    "rendered": {
                      "text": "\t\tsubject          string\n\t\tserver           string\n\t\tusername         string\n\t\tpassword         string\n\t\texpectedErr      error\n\t\texpectedSubject  string\n\t\texpectedUsername string\n",
                      "markdown": "`\t\tsubject          string\n\t\tserver           string\n\t\tusername         string\n\t\tpassword         string\n\t\texpectedErr      error\n\t\texpectedSubject  string\n\t\texpectedUsername string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucket_fuzz_test.go"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 15,
                  "endLine": 73,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t}\n\t\tevent.Severity = severity\n\n\t\t_ = bitbucket.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tevent.Severity = severity\n\n\t\t_ = bitbucket.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\t}\n\t\tevent.Severity = severity\n\n\t\t_ = bitbucket.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/teams_fuzz_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 11,
                  "endLine": 65,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = teams.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = teams.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = teams.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/discord_test.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 14,
                  "endLine": 49,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\tassert.True(t, strings.HasSuffix(discord.URL, \"/slack\"))\n\n\terr = discord.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\tassert.True(t, strings.HasSuffix(discord.URL, \"/slack\"))\n\n\terr = discord.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\trequire.NoError(t, err)\n\tassert.True(t, strings.HasSuffix(discord.URL, \"/slack\"))\n\n\terr = discord.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/datadog_fuzz_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 8,
                  "endLine": 51,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = dd.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = dd.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = dd.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/datadog_test.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\t\tdd, err := NewDataDog(ts.URL, \"\", nil, ddApiKey)\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = dd.Post(context.Background(), testEvent())\n\t\t\tif expectedToFail {\n\t\t\t\trequire.Error(t, err)\n\t\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t\tdd, err := NewDataDog(ts.URL, \"\", nil, ddApiKey)\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = dd.Post(context.Background(), testEvent())\n\t\t\tif expectedToFail {\n\t\t\t\trequire.Error(t, err)\n\t\t\t} else {\n",
                      "markdown": "`\t\t\tdd, err := NewDataDog(ts.URL, \"\", nil, ddApiKey)\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = dd.Post(context.Background(), testEvent())\n\t\t\tif expectedToFail {\n\t\t\t\trequire.Error(t, err)\n\t\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/matrix_fuzz_test.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t\tevent.Severity = severity\n\n\t\t_ = matrix.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\n\t\tevent.Severity = severity\n\n\t\t_ = matrix.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\n\t\tevent.Severity = severity\n\n\t\t_ = matrix.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/lark_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tlark, err := NewLark(ts.URL)\n\trequire.NoError(t, err)\n\n\terr = lark.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\tlark, err := NewLark(ts.URL)\n\trequire.NoError(t, err)\n\n\terr = lark.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\tlark, err := NewLark(ts.URL)\n\trequire.NoError(t, err)\n\n\terr = lark.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 15,
                  "endLine": 517,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\ttoken := bearer[tokenIndex:]\n\turl := fmt.Sprintf(\"https://oauth2.googleapis.com/tokeninfo?id_token=%s\", token)\n\n\tresp, err := c.Get(url)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot verify authenticity of payload: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\ttoken := bearer[tokenIndex:]\n\turl := fmt.Sprintf(\"https://oauth2.googleapis.com/tokeninfo?id_token=%s\", token)\n\n\tresp, err := c.Get(url)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot verify authenticity of payload: %w\", err)\n\t}\n",
                      "markdown": "`\ttoken := bearer[tokenIndex:]\n\turl := fmt.Sprintf(\"https://oauth2.googleapis.com/tokeninfo?id_token=%s\", token)\n\n\tresp, err := c.Get(url)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"cannot verify authenticity of payload: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 23,
                  "endLine": 469,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\tName:      resource.Name,\n\t}\n\n\tif err := s.kubeClient.Get(ctx, objectKey, u); err != nil {\n\t\treturn fmt.Errorf(\"unable to read %s '%s' error: %w\", resource.Kind, objectKey, err)\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tName:      resource.Name,\n\t}\n\n\tif err := s.kubeClient.Get(ctx, objectKey, u); err != nil {\n\t\treturn fmt.Errorf(\"unable to read %s '%s' error: %w\", resource.Kind, objectKey, err)\n\t}\n\n",
                      "markdown": "`\t\tName:      resource.Name,\n\t}\n\n\tif err := s.kubeClient.Get(ctx, objectKey, u); err != nil {\n\t\treturn fmt.Errorf(\"unable to read %s '%s' error: %w\", resource.Kind, objectKey, err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 20,
                  "endLine": 386,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t}\n\n\tvar secret corev1.Secret\n\terr := s.kubeClient.Get(ctx, secretName, &secret)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read token from secret '%s' error: %w\", secretName, err)\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar secret corev1.Secret\n\terr := s.kubeClient.Get(ctx, secretName, &secret)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read token from secret '%s' error: %w\", secretName, err)\n\t}\n",
                      "markdown": "`\t}\n\n\tvar secret corev1.Secret\n\terr := s.kubeClient.Get(ctx, secretName, &secret)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read token from secret '%s' error: %w\", secretName, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 23,
                  "endLine": 331,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\tlogger.Info(fmt.Sprintf(\"handling GCR event from %s for tag %s\", d.Digest, d.Tag))\n\t\treturn nil\n\tcase apiv1.NexusReceiver:\n\t\tsignature := r.Header.Get(\"X-Nexus-Webhook-Signature\")\n\t\tif len(signature) == 0 {\n\t\t\treturn fmt.Errorf(\"Nexus signature is missing from header\")\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tlogger.Info(fmt.Sprintf(\"handling GCR event from %s for tag %s\", d.Digest, d.Tag))\n\t\treturn nil\n\tcase apiv1.NexusReceiver:\n\t\tsignature := r.Header.Get(\"X-Nexus-Webhook-Signature\")\n\t\tif len(signature) == 0 {\n\t\t\treturn fmt.Errorf(\"Nexus signature is missing from header\")\n\t\t}\n",
                      "markdown": "`\t\tlogger.Info(fmt.Sprintf(\"handling GCR event from %s for tag %s\", d.Digest, d.Tag))\n\t\treturn nil\n\tcase apiv1.NexusReceiver:\n\t\tsignature := r.Header.Get(\"X-Nexus-Webhook-Signature\")\n\t\tif len(signature) == 0 {\n\t\t\treturn fmt.Errorf(\"Nexus signature is missing from header\")\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 56,
                  "endLine": 310,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\t\t} `json:\"message\"`\n\t\t}\n\n\t\terr := authenticateGCRRequest(&http.Client{}, r.Header.Get(\"Authorization\"), tokenIndex)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"cannot authenticate GCR request: %s\", err)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t} `json:\"message\"`\n\t\t}\n\n\t\terr := authenticateGCRRequest(&http.Client{}, r.Header.Get(\"Authorization\"), tokenIndex)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"cannot authenticate GCR request: %s\", err)\n\t\t}\n",
                      "markdown": "`\t\t\t} `json:\"message\"`\n\t\t}\n\n\t\terr := authenticateGCRRequest(&http.Client{}, r.Header.Get(\"Authorization\"), tokenIndex)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"cannot authenticate GCR request: %s\", err)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 13,
                  "endLine": 270,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tlogger.Info(fmt.Sprintf(\"handling Quay event from %s\", p.DockerUrl))\n\t\treturn nil\n\tcase apiv1.HarborReceiver:\n\t\tif r.Header.Get(\"Authorization\") != token {\n\t\t\treturn fmt.Errorf(\"the Harbor Authorization header value does not match the receiver token\")\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\tlogger.Info(fmt.Sprintf(\"handling Quay event from %s\", p.DockerUrl))\n\t\treturn nil\n\tcase apiv1.HarborReceiver:\n\t\tif r.Header.Get(\"Authorization\") != token {\n\t\t\treturn fmt.Errorf(\"the Harbor Authorization header value does not match the receiver token\")\n\t\t}\n\n",
                      "markdown": "`\t\tlogger.Info(fmt.Sprintf(\"handling Quay event from %s\", p.DockerUrl))\n\t\treturn nil\n\tcase apiv1.HarborReceiver:\n\t\tif r.Header.Get(\"Authorization\") != token {\n\t\t\treturn fmt.Errorf(\"the Harbor Authorization header value does not match the receiver token\")\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 19,
                  "endLine": 240,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"the Bitbucket server signature header is invalid, err: %w\", err)\n\t\t}\n\n\t\tevent := r.Header.Get(\"X-Event-Key\")\n\t\tif len(receiver.Spec.Events) > 0 {\n\t\t\tallowed := false\n\t\t\tfor _, e := range receiver.Spec.Events {\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"the Bitbucket server signature header is invalid, err: %w\", err)\n\t\t}\n\n\t\tevent := r.Header.Get(\"X-Event-Key\")\n\t\tif len(receiver.Spec.Events) > 0 {\n\t\t\tallowed := false\n\t\t\tfor _, e := range receiver.Spec.Events {\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"the Bitbucket server signature header is invalid, err: %w\", err)\n\t\t}\n\n\t\tevent := r.Header.Get(\"X-Event-Key\")\n\t\tif len(receiver.Spec.Events) > 0 {\n\t\t\tallowed := false\n\t\t\tfor _, e := range receiver.Spec.Events {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 19,
                  "endLine": 203,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tlogger.Info(fmt.Sprintf(\"handling GitLab event: %s\", event))\n\t\treturn nil\n\tcase apiv1.CDEventsReceiver:\n\t\tevent := r.Header.Get(\"Ce-Type\")\n\t\tb, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to read CDEvent request body: %s\", err)\n",
                    "rendered": {
                      "text": "\t\tlogger.Info(fmt.Sprintf(\"handling GitLab event: %s\", event))\n\t\treturn nil\n\tcase apiv1.CDEventsReceiver:\n\t\tevent := r.Header.Get(\"Ce-Type\")\n\t\tb, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to read CDEvent request body: %s\", err)\n",
                      "markdown": "`\t\tlogger.Info(fmt.Sprintf(\"handling GitLab event: %s\", event))\n\t\treturn nil\n\tcase apiv1.CDEventsReceiver:\n\t\tevent := r.Header.Get(\"Ce-Type\")\n\t\tb, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to read CDEvent request body: %s\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 19,
                  "endLine": 186,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"the X-Gitlab-Token header value does not match the receiver token\")\n\t\t}\n\n\t\tevent := r.Header.Get(\"X-Gitlab-Event\")\n\t\tif len(receiver.Spec.Events) > 0 {\n\t\t\tallowed := false\n\t\t\tfor _, e := range receiver.Spec.Events {\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"the X-Gitlab-Token header value does not match the receiver token\")\n\t\t}\n\n\t\tevent := r.Header.Get(\"X-Gitlab-Event\")\n\t\tif len(receiver.Spec.Events) > 0 {\n\t\t\tallowed := false\n\t\t\tfor _, e := range receiver.Spec.Events {\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"the X-Gitlab-Token header value does not match the receiver token\")\n\t\t}\n\n\t\tevent := r.Header.Get(\"X-Gitlab-Event\")\n\t\tif len(receiver.Spec.Events) > 0 {\n\t\t\tallowed := false\n\t\t\tfor _, e := range receiver.Spec.Events {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tlogger.Info(fmt.Sprintf(\"handling GitHub event: %s\", event))\n\t\treturn nil\n\tcase apiv1.GitLabReceiver:\n\t\tif r.Header.Get(\"X-Gitlab-Token\") != token {\n\t\t\treturn fmt.Errorf(\"the X-Gitlab-Token header value does not match the receiver token\")\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\tlogger.Info(fmt.Sprintf(\"handling GitHub event: %s\", event))\n\t\treturn nil\n\tcase apiv1.GitLabReceiver:\n\t\tif r.Header.Get(\"X-Gitlab-Token\") != token {\n\t\t\treturn fmt.Errorf(\"the X-Gitlab-Token header value does not match the receiver token\")\n\t\t}\n\n",
                      "markdown": "`\t\tlogger.Info(fmt.Sprintf(\"handling GitHub event: %s\", event))\n\t\treturn nil\n\tcase apiv1.GitLabReceiver:\n\t\tif r.Header.Get(\"X-Gitlab-Token\") != token {\n\t\t\treturn fmt.Errorf(\"the X-Gitlab-Token header value does not match the receiver token\")\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 41,
                  "endLine": 154,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"unable to read request body: %s\", err)\n\t\t}\n\n\t\terr = github.ValidateSignature(r.Header.Get(\"X-Signature\"), b, []byte(token))\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to validate HMAC signature: %s\", err)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"unable to read request body: %s\", err)\n\t\t}\n\n\t\terr = github.ValidateSignature(r.Header.Get(\"X-Signature\"), b, []byte(token))\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to validate HMAC signature: %s\", err)\n\t\t}\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"unable to read request body: %s\", err)\n\t\t}\n\n\t\terr = github.ValidateSignature(r.Header.Get(\"X-Signature\"), b, []byte(token))\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to validate HMAC signature: %s\", err)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 12,
                  "endLine": 320,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"cannot decode GCR webhook payload\")\n\t\t}\n\n\t\traw, _ := base64.StdEncoding.DecodeString(p.Message.Data)\n\n\t\tvar d data\n\t\terr = json.Unmarshal(raw, &d)\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"cannot decode GCR webhook payload\")\n\t\t}\n\n\t\traw, _ := base64.StdEncoding.DecodeString(p.Message.Data)\n\n\t\tvar d data\n\t\terr = json.Unmarshal(raw, &d)\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"cannot decode GCR webhook payload\")\n\t\t}\n\n\t\traw, _ := base64.StdEncoding.DecodeString(p.Message.Data)\n\n\t\tvar d data\n\t\terr = json.Unmarshal(raw, &d)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/receiver_handlers.go"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 11,
                  "endLine": 23,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\"context\"\n\t\"crypto/hmac\"\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "\t\"context\"\n\t\"crypto/hmac\"\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"errors\"\n",
                      "markdown": "`\t\"context\"\n\t\"crypto/hmac\"\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/api/v1beta2/provider_types.go"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// Proxy the HTTP/S address of the proxy server.\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://.*$\"\n",
                    "rendered": {
                      "text": "\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// Proxy the HTTP/S address of the proxy server.\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://.*$\"\n",
                      "markdown": "`\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// Proxy the HTTP/S address of the proxy server.\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://.*$\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/github_dispatch_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 21,
                  "endLine": 61,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = githubDispatch.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = githubDispatch.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = githubDispatch.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 50,
                  "endLine": 89,
                  "endColumn": 58,
                  "snippet": {
                    "text": "func (n *natsClient) publish(ctx context.Context, subject string, eventPayload []byte) (err error) {\n\topts := []nats.Option{nats.Name(\"NATS Provider Publisher\")}\n\tif n.username != \"\" && n.password != \"\" {\n\t\topts = append(opts, nats.UserInfo(n.username, n.password))\n\t}\n\n\tnc, err := nats.Connect(n.server, opts...)\n",
                    "rendered": {
                      "text": "func (n *natsClient) publish(ctx context.Context, subject string, eventPayload []byte) (err error) {\n\topts := []nats.Option{nats.Name(\"NATS Provider Publisher\")}\n\tif n.username != \"\" && n.password != \"\" {\n\t\topts = append(opts, nats.UserInfo(n.username, n.password))\n\t}\n\n\tnc, err := nats.Connect(n.server, opts...)\n",
                      "markdown": "`func (n *natsClient) publish(ctx context.Context, subject string, eventPayload []byte) (err error) {\n\topts := []nats.Option{nats.Name(\"NATS Provider Publisher\")}\n\tif n.username != \"\" && n.password != \"\" {\n\t\topts = append(opts, nats.UserInfo(n.username, n.password))\n\t}\n\n\tnc, err := nats.Connect(n.server, opts...)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 26,
                  "endLine": 88,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nfunc (n *natsClient) publish(ctx context.Context, subject string, eventPayload []byte) (err error) {\n\topts := []nats.Option{nats.Name(\"NATS Provider Publisher\")}\n\tif n.username != \"\" && n.password != \"\" {\n\t\topts = append(opts, nats.UserInfo(n.username, n.password))\n\t}\n\n",
                    "rendered": {
                      "text": "\nfunc (n *natsClient) publish(ctx context.Context, subject string, eventPayload []byte) (err error) {\n\topts := []nats.Option{nats.Name(\"NATS Provider Publisher\")}\n\tif n.username != \"\" && n.password != \"\" {\n\t\topts = append(opts, nats.UserInfo(n.username, n.password))\n\t}\n\n",
                      "markdown": "`\nfunc (n *natsClient) publish(ctx context.Context, subject string, eventPayload []byte) (err error) {\n\topts := []nats.Option{nats.Name(\"NATS Provider Publisher\")}\n\tif n.username != \"\" && n.password != \"\" {\n\t\topts = append(opts, nats.UserInfo(n.username, n.password))\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "endLine": 58,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tclient: &natsClient{\n\t\t\tserver:   server,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t},\n\t}, nil\n}\n",
                    "rendered": {
                      "text": "\t\tclient: &natsClient{\n\t\t\tserver:   server,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t},\n\t}, nil\n}\n",
                      "markdown": "`\t\tclient: &natsClient{\n\t\t\tserver:   server,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t},\n\t}, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "endLine": 58,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tclient: &natsClient{\n\t\t\tserver:   server,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t},\n\t}, nil\n}\n",
                    "rendered": {
                      "text": "\t\tclient: &natsClient{\n\t\t\tserver:   server,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t},\n\t}, nil\n}\n",
                      "markdown": "`\t\tclient: &natsClient{\n\t\t\tserver:   server,\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t},\n\t}, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 61,
                  "endLine": 46,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t}\n)\n\nfunc NewNATS(server string, subject string, username string, password string) (*NATS, error) {\n\tif server == \"\" {\n\t\treturn nil, errors.New(\"NATS server (address) cannot be empty\")\n\t}\n",
                    "rendered": {
                      "text": "\t}\n)\n\nfunc NewNATS(server string, subject string, username string, password string) (*NATS, error) {\n\tif server == \"\" {\n\t\treturn nil, errors.New(\"NATS server (address) cannot be empty\")\n\t}\n",
                      "markdown": "`\t}\n)\n\nfunc NewNATS(server string, subject string, username string, password string) (*NATS, error) {\n\tif server == \"\" {\n\t\treturn nil, errors.New(\"NATS server (address) cannot be empty\")\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 2,
                  "endLine": 42,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tnatsClient struct {\n\t\tserver   string\n\t\tusername string\n\t\tpassword string\n\t}\n)\n\n",
                    "rendered": {
                      "text": "\tnatsClient struct {\n\t\tserver   string\n\t\tusername string\n\t\tpassword string\n\t}\n)\n\n",
                      "markdown": "`\tnatsClient struct {\n\t\tserver   string\n\t\tusername string\n\t\tpassword string\n\t}\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 26,
                  "endLine": 65,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n// Post posts Flux events to a NATS subject.\nfunc (n *NATS) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                    "rendered": {
                      "text": "\n// Post posts Flux events to a NATS subject.\nfunc (n *NATS) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                      "markdown": "`\n// Post posts Flux events to a NATS subject.\nfunc (n *NATS) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/nats.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 8,
                  "endLine": 65,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n// Post posts Flux events to a NATS subject.\nfunc (n *NATS) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                    "rendered": {
                      "text": "\n// Post posts Flux events to a NATS subject.\nfunc (n *NATS) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n",
                      "markdown": "`\n// Post posts Flux events to a NATS subject.\nfunc (n *NATS) Post(ctx context.Context, event eventv1.Event) error {\n\t// Skip Git commit status update event.\n\tif event.HasMetadata(eventv1.MetaCommitStatusKey, eventv1.MetaCommitStatusUpdateValue) {\n\t\treturn nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 30,
                  "endLine": 3,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# Development\n\n> **Note:** Please take a look at <https://fluxcd.io/contributing/flux/>\n> to find out about how to contribute to Flux and how to interact with the\n> Flux Development team.\n\n",
                    "rendered": {
                      "text": "# Development\n\n> **Note:** Please take a look at <https://fluxcd.io/contributing/flux/>\n> to find out about how to contribute to Flux and how to interact with the\n> Flux Development team.\n\n",
                      "markdown": "`# Development\n\n> **Note:** Please take a look at <https://fluxcd.io/contributing/flux/>\n> to find out about how to contribute to Flux and how to interact with the\n> Flux Development team.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 4,
                  "endLine": 4,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# Development\n\n> **Note:** Please take a look at <https://fluxcd.io/contributing/flux/>\n> to find out about how to contribute to Flux and how to interact with the\n> Flux Development team.\n\n## Installing required dependencies\n",
                    "rendered": {
                      "text": "# Development\n\n> **Note:** Please take a look at <https://fluxcd.io/contributing/flux/>\n> to find out about how to contribute to Flux and how to interact with the\n> Flux Development team.\n\n## Installing required dependencies\n",
                      "markdown": "`# Development\n\n> **Note:** Please take a look at <https://fluxcd.io/contributing/flux/>\n> to find out about how to contribute to Flux and how to interact with the\n> Flux Development team.\n\n## Installing required dependencies\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 25,
                  "endLine": 704,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  name: api-token\n  namespace: default\ndata:\n  token: <username>:<app-password>\n```\n\nOpsgenie uses an api key to authenticate [api key](https://support.atlassian.com/opsgenie/docs/api-key-management/).\n",
                    "rendered": {
                      "text": "  name: api-token\n  namespace: default\ndata:\n  token: <username>:<app-password>\n```\n\nOpsgenie uses an api key to authenticate [api key](https://support.atlassian.com/opsgenie/docs/api-key-management/).\n",
                      "markdown": "`  name: api-token\n  namespace: default\ndata:\n  token: <username>:<app-password>\n```\n\nOpsgenie uses an api key to authenticate [api key](https://support.atlassian.com/opsgenie/docs/api-key-management/).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 72,
                  "endLine": 694,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n\n```yaml\n",
                    "rendered": {
                      "text": "\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n\n```yaml\n",
                      "markdown": "`\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 38,
                  "endLine": 693,
                  "endColumn": 46,
                  "snippet": {
                    "text": "```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n\n",
                    "rendered": {
                      "text": "```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n\n",
                      "markdown": "````\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 103,
                  "endLine": 692,
                  "endColumn": 111,
                  "snippet": {
                    "text": "  token: <personal-access-tokens>\n```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n",
                    "rendered": {
                      "text": "  token: <personal-access-tokens>\n```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n",
                      "markdown": "`  token: <personal-access-tokens>\n```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 38,
                  "endLine": 692,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  token: <personal-access-tokens>\n```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n",
                    "rendered": {
                      "text": "  token: <personal-access-tokens>\n```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n",
                      "markdown": "`  token: <personal-access-tokens>\n```\n\nBitbucket authenticates using an [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/).\nIt requires both the username and the password when authenticating.\nTherefore the token needs to be passed with the format `<username>:<app-password>`.\nA token that is not in this format will cause the provider to fail.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 77,
                  "endLine": 669,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\nYou can create the secret using this command:\n```shell\nkubectl create secret generic api-token --from-literal=token=<username>:<app-password>\n```\n\n#### Authentication\n",
                    "rendered": {
                      "text": "\nYou can create the secret using this command:\n```shell\nkubectl create secret generic api-token --from-literal=token=<username>:<app-password>\n```\n\n#### Authentication\n",
                      "markdown": "`\nYou can create the secret using this command:\n```shell\nkubectl create secret generic api-token --from-literal=token=<username>:<app-password>\n```\n\n#### Authentication\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 47,
                  "endLine": 665,
                  "endColumn": 55,
                  "snippet": {
                    "text": "The provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n```shell\n",
                    "rendered": {
                      "text": "The provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n```shell\n",
                      "markdown": "`The provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n```shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 27,
                  "endLine": 665,
                  "endColumn": 35,
                  "snippet": {
                    "text": "The provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n```shell\n",
                    "rendered": {
                      "text": "The provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n```shell\n",
                      "markdown": "`The provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n```shell\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 152,
                  "endLine": 664,
                  "endColumn": 160,
                  "snippet": {
                    "text": "\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n",
                    "rendered": {
                      "text": "\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n",
                      "markdown": "`\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 127,
                  "endLine": 664,
                  "endColumn": 135,
                  "snippet": {
                    "text": "\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n",
                    "rendered": {
                      "text": "\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n",
                      "markdown": "`\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 62,
                  "endLine": 664,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n",
                    "rendered": {
                      "text": "\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n",
                      "markdown": "`\nThe provider type can be: `github`, `gitlab`, `bitbucket` or `azuredevops`.\n\nFor bitbucket, the token should contain the username and [app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<password>`. The app password should have `Repositories (Read/Write)` permission.\n\nYou can create the secret using this command:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 38,
                  "endLine": 620,
                  "endColumn": 46,
                  "snippet": {
                    "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nThen reference the secret in `spec.secretRef`:\n",
                    "rendered": {
                      "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nThen reference the secret in `spec.secretRef`:\n",
                      "markdown": "````shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nThen reference the secret in `spec.secretRef`:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 15,
                  "endLine": 620,
                  "endColumn": 23,
                  "snippet": {
                    "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nThen reference the secret in `spec.secretRef`:\n",
                    "rendered": {
                      "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nThen reference the secret in `spec.secretRef`:\n",
                      "markdown": "````shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nThen reference the secret in `spec.secretRef`:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 9,
                  "endLine": 616,
                  "endColumn": 17,
                  "snippet": {
                    "text": "```\n\nGrafana can also use `basic authorization` to authenticate the requests, if both token and\nusername/password are set in the secret, then `API token` takes precedence over `basic auth`.\n```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n",
                    "rendered": {
                      "text": "```\n\nGrafana can also use `basic authorization` to authenticate the requests, if both token and\nusername/password are set in the secret, then `API token` takes precedence over `basic auth`.\n```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n",
                      "markdown": "````\n\nGrafana can also use `basic authorization` to authenticate the requests, if both token and\nusername/password are set in the secret, then `API token` takes precedence over `basic auth`.\n```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 35,
                  "endLine": 472,
                  "endColumn": 43,
                  "snippet": {
                    "text": "### Prometheus Alertmanager\n\nSends notifications to [alertmanager v2 api](https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml) if alert manager has basic authentication configured it is recommended to use\nsecretRef and include the username:password in the address string.\n\n```yaml\napiVersion: notification.toolkit.fluxcd.io/v1beta1\n",
                    "rendered": {
                      "text": "### Prometheus Alertmanager\n\nSends notifications to [alertmanager v2 api](https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml) if alert manager has basic authentication configured it is recommended to use\nsecretRef and include the username:password in the address string.\n\n```yaml\napiVersion: notification.toolkit.fluxcd.io/v1beta1\n",
                      "markdown": "`### Prometheus Alertmanager\n\nSends notifications to [alertmanager v2 api](https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml) if alert manager has basic authentication configured it is recommended to use\nsecretRef and include the username:password in the address string.\n\n```yaml\napiVersion: notification.toolkit.fluxcd.io/v1beta1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 37,
                  "endLine": 143,
                  "endColumn": 45,
                  "snippet": {
                    "text": "```sh\nkubectl create secret generic webhook-url \\\n--from-literal=address=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n--from-literal=proxy=http://username:password@proxy_url:proxy_port\n```\n\nWhen type `generic` is specified, the notification controller will post the\n",
                    "rendered": {
                      "text": "```sh\nkubectl create secret generic webhook-url \\\n--from-literal=address=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n--from-literal=proxy=http://username:password@proxy_url:proxy_port\n```\n\nWhen type `generic` is specified, the notification controller will post the\n",
                      "markdown": "````sh\nkubectl create secret generic webhook-url \\\n--from-literal=address=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK \\\n--from-literal=proxy=http://username:password@proxy_url:proxy_port\n```\n\nWhen type `generic` is specified, the notification controller will post the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 175,
                  "endLine": 138,
                  "endColumn": 183,
                  "snippet": {
                    "text": "`telegram`, `lark`, `matrix`, `azureeventhub`, `opsgenie`, `alertmanager`, `grafana`,\n`githubdispatch` or `generic`.\n\nSome networks need to use an authenticated proxy to access external services. Therefore, the authentication can be stored as a secret to hide parameters like the username and password.\n\n```sh\nkubectl create secret generic webhook-url \\\n",
                    "rendered": {
                      "text": "`telegram`, `lark`, `matrix`, `azureeventhub`, `opsgenie`, `alertmanager`, `grafana`,\n`githubdispatch` or `generic`.\n\nSome networks need to use an authenticated proxy to access external services. Therefore, the authentication can be stored as a secret to hide parameters like the username and password.\n\n```sh\nkubectl create secret generic webhook-url \\\n",
                      "markdown": "``telegram`, `lark`, `matrix`, `azureeventhub`, `opsgenie`, `alertmanager`, `grafana`,\n`githubdispatch` or `generic`.\n\nSome networks need to use an authenticated proxy to access external services. Therefore, the authentication can be stored as a secret to hide parameters like the username and password.\n\n```sh\nkubectl create secret generic webhook-url \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 19,
                  "endLine": 547,
                  "endColumn": 25,
                  "snippet": {
                    "text": "- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n- check that you have applied an Alert with the right even sources and providerRef\n",
                    "rendered": {
                      "text": "- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n- check that you have applied an Alert with the right even sources and providerRef\n",
                      "markdown": "`- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n- check that you have applied an Alert with the right even sources and providerRef\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 117,
                  "endLine": 546,
                  "endColumn": 123,
                  "snippet": {
                    "text": "\n- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n",
                    "rendered": {
                      "text": "\n- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n",
                      "markdown": "`\n- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 31,
                  "endLine": 538,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  name: webex-bot-access-token\n  namespace: flux-system\ndata:\n  # bot access token - must be base64 encoded\n  token: <webexBotAccessTokenBase64>\n```\n\n",
                    "rendered": {
                      "text": "  name: webex-bot-access-token\n  namespace: flux-system\ndata:\n  # bot access token - must be base64 encoded\n  token: <webexBotAccessTokenBase64>\n```\n\n",
                      "markdown": "`  name: webex-bot-access-token\n  namespace: flux-system\ndata:\n  # bot access token - must be base64 encoded\n  token: <webexBotAccessTokenBase64>\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 14,
                  "endLine": 255,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\treturn nil\n}\n[...]\nkey := []byte(\"b1fad212fb1b87a56c79e5da48018650b85ab7cf\")\nif len(r.Header[\"X-Signature\"]) > 0 {\n\tif err := verifySignature(r.Header[\"X-Signature\"][0], body, key); err != nil {\n\t\t// handle signature verification failure here\n",
                    "rendered": {
                      "text": "\treturn nil\n}\n[...]\nkey := []byte(\"b1fad212fb1b87a56c79e5da48018650b85ab7cf\")\nif len(r.Header[\"X-Signature\"]) > 0 {\n\tif err := verifySignature(r.Header[\"X-Signature\"][0], body, key); err != nil {\n\t\t// handle signature verification failure here\n",
                      "markdown": "`\treturn nil\n}\n[...]\nkey := []byte(\"b1fad212fb1b87a56c79e5da48018650b85ab7cf\")\nif len(r.Header[\"X-Signature\"]) > 0 {\n\tif err := verifySignature(r.Header[\"X-Signature\"][0], body, key); err != nil {\n\t\t// handle signature verification failure here\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 69,
                  "endLine": 486,
                  "endColumn": 73,
                  "snippet": {
                    "text": "  address: https://....@<alertmanager-url>/api/v2/alerts/\"\n```\n\nWhen an event is triggered the provider will send a single alert with at least one annotation for alert which is the \"message\" found for the event.\nIf a summary is provided in the alert resource an additional \"summary\" annotation will be added.\n\nThe provider will send the following labels for the event.\n",
                    "rendered": {
                      "text": "  address: https://....@<alertmanager-url>/api/v2/alerts/\"\n```\n\nWhen an event is triggered the provider will send a single alert with at least one annotation for alert which is the \"message\" found for the event.\nIf a summary is provided in the alert resource an additional \"summary\" annotation will be added.\n\nThe provider will send the following labels for the event.\n",
                      "markdown": "`  address: https://....@<alertmanager-url>/api/v2/alerts/\"\n```\n\nWhen an event is triggered the provider will send a single alert with at least one annotation for alert which is the \"message\" found for the event.\nIf a summary is provided in the alert resource an additional \"summary\" annotation will be added.\n\nThe provider will send the following labels for the event.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 31,
                  "endLine": 771,
                  "endColumn": 37,
                  "snippet": {
                    "text": "curl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nUse the output you got from the curl and add it to your secret like bellow.\n\n```shell\nkubectl create secret generic webhook-url \\\n",
                    "rendered": {
                      "text": "curl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nUse the output you got from the curl and add it to your secret like bellow.\n\n```shell\nkubectl create secret generic webhook-url \\\n",
                      "markdown": "`curl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nUse the output you got from the curl and add it to your secret like bellow.\n\n```shell\nkubectl create secret generic webhook-url \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 767,
                  "endLine": 768,
                  "endColumn": 5,
                  "snippet": {
                    "text": "enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU",
                    "rendered": {
                      "text": "enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU",
                      "markdown": "`enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 3,
                  "endLine": 643,
                  "endColumn": 8,
                  "snippet": {
                    "text": "commit status in the git repository from which the event originates from.\n\n{{% alert color=\"info\" title=\"Limitations\" %}}\nThe git notification providers require that a commit hash present in the meta data\nof the event. Therefore the the providers will only work with `Kustomization` as an\nevent source, as it is the only resource which includes this data.\n{{% /alert %}}\n",
                    "rendered": {
                      "text": "commit status in the git repository from which the event originates from.\n\n{{% alert color=\"info\" title=\"Limitations\" %}}\nThe git notification providers require that a commit hash present in the meta data\nof the event. Therefore the the providers will only work with `Kustomization` as an\nevent source, as it is the only resource which includes this data.\n{{% /alert %}}\n",
                      "markdown": "`commit status in the git repository from which the event originates from.\n\n{{% alert color=\"info\" title=\"Limitations\" %}}\nThe git notification providers require that a commit hash present in the meta data\nof the event. Therefore the the providers will only work with `Kustomization` as an\nevent source, as it is the only resource which includes this data.\n{{% /alert %}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 20,
                  "endLine": 640,
                  "endColumn": 25,
                  "snippet": {
                    "text": "### Git commit status\n\nThe GitHub, GitLab, Bitbucket, and Azure DevOps provider will write to the\ncommit status in the git repository from which the event originates from.\n\n{{% alert color=\"info\" title=\"Limitations\" %}}\nThe git notification providers require that a commit hash present in the meta data\n",
                    "rendered": {
                      "text": "### Git commit status\n\nThe GitHub, GitLab, Bitbucket, and Azure DevOps provider will write to the\ncommit status in the git repository from which the event originates from.\n\n{{% alert color=\"info\" title=\"Limitations\" %}}\nThe git notification providers require that a commit hash present in the meta data\n",
                      "markdown": "`### Git commit status\n\nThe GitHub, GitLab, Bitbucket, and Azure DevOps provider will write to the\ncommit status in the git repository from which the event originates from.\n\n{{% alert color=\"info\" title=\"Limitations\" %}}\nThe git notification providers require that a commit hash present in the meta data\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 3,
                  "endLine": 637,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    name: grafana-token\n```\n\n### Git commit status\n\nThe GitHub, GitLab, Bitbucket, and Azure DevOps provider will write to the\ncommit status in the git repository from which the event originates from.\n",
                    "rendered": {
                      "text": "    name: grafana-token\n```\n\n### Git commit status\n\nThe GitHub, GitLab, Bitbucket, and Azure DevOps provider will write to the\ncommit status in the git repository from which the event originates from.\n",
                      "markdown": "`    name: grafana-token\n```\n\n### Git commit status\n\nThe GitHub, GitLab, Bitbucket, and Azure DevOps provider will write to the\ncommit status in the git repository from which the event originates from.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 191,
                  "endLine": 552,
                  "endColumn": 197,
                  "snippet": {
                    "text": "If you do not see any notifications in the targeted Webex space:\n- check that you have applied an Alert with the right even sources and providerRef\n- check the notification controller log for any error messages\n- check that you have added the bot email address to the Webex space, if the bot email address is not added to the space, the notification controller will log a 404 room not found error every time a notification is sent out\n\nFull example of manifests with real looking but fictive room ID and access token:\n\n",
                    "rendered": {
                      "text": "If you do not see any notifications in the targeted Webex space:\n- check that you have applied an Alert with the right even sources and providerRef\n- check the notification controller log for any error messages\n- check that you have added the bot email address to the Webex space, if the bot email address is not added to the space, the notification controller will log a 404 room not found error every time a notification is sent out\n\nFull example of manifests with real looking but fictive room ID and access token:\n\n",
                      "markdown": "`If you do not see any notifications in the targeted Webex space:\n- check that you have applied an Alert with the right even sources and providerRef\n- check the notification controller log for any error messages\n- check that you have added the bot email address to the Webex space, if the bot email address is not added to the space, the notification controller will log a 404 room not found error every time a notification is sent out\n\nFull example of manifests with real looking but fictive room ID and access token:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 116,
                  "endLine": 546,
                  "endColumn": 124,
                  "snippet": {
                    "text": "\n- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n",
                    "rendered": {
                      "text": "\n- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n",
                      "markdown": "`\n- spec.address should always be set to the same global Webex API gateway https://webexapis.com/v1/messages\n- spec.channel should contain the Webex space room ID as obtained from https://developer.webex.com/ (long alphanumeric string copied as is)\n- token in the Secret manifest is the bot access token generated after creating the bot (as for all secrets, must be base64 encoded using for example\n\"echo -n <token> | base64\")\n\nIf you do not see any notifications in the targeted Webex space:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 30,
                  "endLine": 538,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  name: webex-bot-access-token\n  namespace: flux-system\ndata:\n  # bot access token - must be base64 encoded\n  token: <webexBotAccessTokenBase64>\n```\n\n",
                    "rendered": {
                      "text": "  name: webex-bot-access-token\n  namespace: flux-system\ndata:\n  # bot access token - must be base64 encoded\n  token: <webexBotAccessTokenBase64>\n```\n\n",
                      "markdown": "`  name: webex-bot-access-token\n  namespace: flux-system\ndata:\n  # bot access token - must be base64 encoded\n  token: <webexBotAccessTokenBase64>\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 1,
                  "endLine": 514,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Webex Space (User profile icon | MyWebexApps | Create a New App | Create a Bot)\n- make a note of the bot email address, this email needs to be added to the Webex space from the Webex App\n- generate a bot access token, this is the ID to use in the kubernetes Secret \"token\" field (see example below)\n- find the room ID associated to the webex space using https://developer.webex.com/docs/api/v1/rooms/list-rooms (select GET, click on \"Try It\" and search the GET results for the matching Webex space entry), this is the ID to use in the webex Provider manifest \"channel\" field\n\n\nManifests template to use:\n\n`",
                    "rendered": {
                      "text": "Webex Space (User profile icon | MyWebexApps | Create a New App | Create a Bot)\n- make a note of the bot email address, this email needs to be added to the Webex space from the Webex App\n- generate a bot access token, this is the ID to use in the kubernetes Secret \"token\" field (see example below)\n- find the room ID associated to the webex space using https://developer.webex.com/docs/api/v1/rooms/list-rooms (select GET, click on \"Try It\" and search the GET results for the matching Webex space entry), this is the ID to use in the webex Provider manifest \"channel\" field\n\n\nManifests template to use:\n\n`",
                      "markdown": "`Webex Space (User profile icon | MyWebexApps | Create a New App | Create a Bot)\n- make a note of the bot email address, this email needs to be added to the Webex space from the Webex App\n- generate a bot access token, this is the ID to use in the kubernetes Secret \"token\" field (see example below)\n- find the room ID associated to the webex space using https://developer.webex.com/docs/api/v1/rooms/list-rooms (select GET, click on \"Try It\" and search the GET results for the matching Webex space entry), this is the ID to use in the webex Provider manifest \"channel\" field\n\n\nManifests template to use:\n\n``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 3,
                  "endLine": 118,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  address: https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\n  # HTTP(S) proxy (optional)\n  proxy: https://proxy.corp:8080\n  # timeout (optional)\n  timeout: 30s\n  # secret containing the webhook address (optional)\n  secretRef:\n",
                    "rendered": {
                      "text": "  address: https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\n  # HTTP(S) proxy (optional)\n  proxy: https://proxy.corp:8080\n  # timeout (optional)\n  timeout: 30s\n  # secret containing the webhook address (optional)\n  secretRef:\n",
                      "markdown": "`  address: https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\n  # HTTP(S) proxy (optional)\n  proxy: https://proxy.corp:8080\n  # timeout (optional)\n  timeout: 30s\n  # secret containing the webhook address (optional)\n  secretRef:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 72,
                  "endColumn": 4,
                  "snippet": {
                    "text": "| Slack                     | slack          |\n| Telegram                  | telegram       |\n| WebEx                     | webex          |\n\nGit commit status providers:\n\n| Provider     | Type        |\n| ------------ | ----------- |\n",
                    "rendered": {
                      "text": "| Slack                     | slack          |\n| Telegram                  | telegram       |\n| WebEx                     | webex          |\n\nGit commit status providers:\n\n| Provider     | Type        |\n| ------------ | ----------- |\n",
                      "markdown": "`| Slack                     | slack          |\n| Telegram                  | telegram       |\n| WebEx                     | webex          |\n\nGit commit status providers:\n\n| Provider     | Type        |\n| ------------ | ----------- |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\t// Timeout for sending alerts to the provider.\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// HTTP/S address of the proxy\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://\"\n",
                    "rendered": {
                      "text": "\n\t// Timeout for sending alerts to the provider.\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// HTTP/S address of the proxy\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://\"\n",
                      "markdown": "`\n\t// Timeout for sending alerts to the provider.\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// HTTP/S address of the proxy\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/providers.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 29,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t// +optional\n\tAddress string `json:\"address,omitempty\"`\n\n\t// Timeout for sending alerts to the provider.\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n",
                    "rendered": {
                      "text": "\t// +optional\n\tAddress string `json:\"address,omitempty\"`\n\n\t// Timeout for sending alerts to the provider.\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n",
                      "markdown": "`\t// +optional\n\tAddress string `json:\"address,omitempty\"`\n\n\t// Timeout for sending alerts to the provider.\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 19,
                  "endLine": 386,
                  "endColumn": 23,
                  "snippet": {
                    "text": "```\n\nNote that the controller doesn't verify the authenticity of the request as Azure doesn't provide any mechanism for verification.\nYou can take a look at the [Azure Container webhook reference](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-webhook-reference).\n",
                    "rendered": {
                      "text": "```\n\nNote that the controller doesn't verify the authenticity of the request as Azure doesn't provide any mechanism for verification.\nYou can take a look at the [Azure Container webhook reference](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-webhook-reference).\n",
                      "markdown": "````\n\nNote that the controller doesn't verify the authenticity of the request as Azure doesn't provide any mechanism for verification.\nYou can take a look at the [Azure Container webhook reference](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-webhook-reference).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 33,
                  "endLine": 365,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nNote that the controller decodes the JWT from the authorization\nheader of the push request and verifies it against the GCP API.\nFor more information, take a look at this\n[documentation](https://cloud.google.com/pubsub/docs/push?&_ga=2.123897930.-1945316571.1602156486#authentication_and_authorization).\n\n### ACR receiver\n",
                    "rendered": {
                      "text": "\nNote that the controller decodes the JWT from the authorization\nheader of the push request and verifies it against the GCP API.\nFor more information, take a look at this\n[documentation](https://cloud.google.com/pubsub/docs/push?&_ga=2.123897930.-1945316571.1602156486#authentication_and_authorization).\n\n### ACR receiver\n",
                      "markdown": "`\nNote that the controller decodes the JWT from the authorization\nheader of the push request and verifies it against the GCP API.\nFor more information, take a look at this\n[documentation](https://cloud.google.com/pubsub/docs/push?&_ga=2.123897930.-1945316571.1602156486#authentication_and_authorization).\n\n### ACR receiver\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 32,
                  "endLine": 258,
                  "endColumn": 41,
                  "snippet": {
                    "text": "Note that you have to set the generated token as the Bitbucket server webhook secret value.\nThe controller uses the `X-Hub-Signature` HTTP header to verify that the request is legitimate.\n\nAlso note, the *Bitbucket cloud* service does not yet provide any support for signing webhook requests.\n([1](https://jira.atlassian.com/browse/BCLOUD-14683), [2](https://jira.atlassian.com/browse/BCLOUD-12195)).\nIf your repositories are on Bitbucket cloud, you will need to use the Generic receiver instead.\n\n",
                    "rendered": {
                      "text": "Note that you have to set the generated token as the Bitbucket server webhook secret value.\nThe controller uses the `X-Hub-Signature` HTTP header to verify that the request is legitimate.\n\nAlso note, the *Bitbucket cloud* service does not yet provide any support for signing webhook requests.\n([1](https://jira.atlassian.com/browse/BCLOUD-14683), [2](https://jira.atlassian.com/browse/BCLOUD-12195)).\nIf your repositories are on Bitbucket cloud, you will need to use the Generic receiver instead.\n\n",
                      "markdown": "`Note that you have to set the generated token as the Bitbucket server webhook secret value.\nThe controller uses the `X-Hub-Signature` HTTP header to verify that the request is legitimate.\n\nAlso note, the *Bitbucket cloud* service does not yet provide any support for signing webhook requests.\n([1](https://jira.atlassian.com/browse/BCLOUD-14683), [2](https://jira.atlassian.com/browse/BCLOUD-12195)).\nIf your repositories are on Bitbucket cloud, you will need to use the Generic receiver instead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 5,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n2. Send a HTTP POST request to the webhook URL:\n\n```sh\ncurl <webhook-url> -X POST -H \"X-Signature: sha1=<generated-hash>\" -d '<request-body>'\n```\n\nGenerate hash signature using Go:\n",
                    "rendered": {
                      "text": "\n2. Send a HTTP POST request to the webhook URL:\n\n```sh\ncurl <webhook-url> -X POST -H \"X-Signature: sha1=<generated-hash>\" -d '<request-body>'\n```\n\nGenerate hash signature using Go:\n",
                      "markdown": "`\n2. Send a HTTP POST request to the webhook URL:\n\n```sh\ncurl <webhook-url> -X POST -H \"X-Signature: sha1=<generated-hash>\" -d '<request-body>'\n```\n\nGenerate hash signature using Go:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 70,
                  "endLine": 151,
                  "endColumn": 75,
                  "snippet": {
                    "text": "1. Generate hash signature using OpenSSL:\n\n```sh\nprintf '<request-body>' | openssl dgst -sha1 -r -hmac \"<secret-key>\" | awk '{print $1}'\n```\n\nYou can use the flag `sha256` or `sha512` if you want a different hash function.\n",
                    "rendered": {
                      "text": "1. Generate hash signature using OpenSSL:\n\n```sh\nprintf '<request-body>' | openssl dgst -sha1 -r -hmac \"<secret-key>\" | awk '{print $1}'\n```\n\nYou can use the flag `sha256` or `sha512` if you want a different hash function.\n",
                      "markdown": "`1. Generate hash signature using OpenSSL:\n\n```sh\nprintf '<request-body>' | openssl dgst -sha1 -r -hmac \"<secret-key>\" | awk '{print $1}'\n```\n\nYou can use the flag `sha256` or `sha512` if you want a different hash function.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 25,
                  "endLine": 151,
                  "endColumn": 34,
                  "snippet": {
                    "text": "1. Generate hash signature using OpenSSL:\n\n```sh\nprintf '<request-body>' | openssl dgst -sha1 -r -hmac \"<secret-key>\" | awk '{print $1}'\n```\n\nYou can use the flag `sha256` or `sha512` if you want a different hash function.\n",
                    "rendered": {
                      "text": "1. Generate hash signature using OpenSSL:\n\n```sh\nprintf '<request-body>' | openssl dgst -sha1 -r -hmac \"<secret-key>\" | awk '{print $1}'\n```\n\nYou can use the flag `sha256` or `sha512` if you want a different hash function.\n",
                      "markdown": "`1. Generate hash signature using OpenSSL:\n\n```sh\nprintf '<request-body>' | openssl dgst -sha1 -r -hmac \"<secret-key>\" | awk '{print $1}'\n```\n\nYou can use the flag `sha256` or `sha512` if you want a different hash function.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta1/receivers.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 42,
                  "endLine": 84,
                  "endColumn": 47,
                  "snippet": {
                    "text": "Generate a random string and create a secret with a `token` field:\n\n```sh\nTOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\necho $TOKEN\n\nkubectl create secret generic webhook-token \\\n",
                    "rendered": {
                      "text": "Generate a random string and create a secret with a `token` field:\n\n```sh\nTOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\necho $TOKEN\n\nkubectl create secret generic webhook-token \\\n",
                      "markdown": "`Generate a random string and create a secret with a `token` field:\n\n```sh\nTOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\necho $TOKEN\n\nkubectl create secret generic webhook-token \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/alerts.md"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 26,
                  "endLine": 318,
                  "snippet": {
                    "text": "in the Alert's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-alert).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                    "rendered": {
                      "text": "in the Alert's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-alert).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                      "markdown": "`in the Alert's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-alert).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/alerts.md"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 78,
                  "endLine": 235,
                  "endColumn": 82,
                  "snippet": {
                    "text": "### Event inclusion\n\n`.spec.inclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be sent if the message matches at least one\nof the expressions in the list, and discarded otherwise. If the message matches one of the\nexpressions in the inclusion list but also matches one of the expressions in the exclusion\nlist, then the event is still discarded (exclusion is stronger than inclusion).\n",
                    "rendered": {
                      "text": "### Event inclusion\n\n`.spec.inclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be sent if the message matches at least one\nof the expressions in the list, and discarded otherwise. If the message matches one of the\nexpressions in the inclusion list but also matches one of the expressions in the exclusion\nlist, then the event is still discarded (exclusion is stronger than inclusion).\n",
                      "markdown": "`### Event inclusion\n\n`.spec.inclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be sent if the message matches at least one\nof the expressions in the list, and discarded otherwise. If the message matches one of the\nexpressions in the inclusion list but also matches one of the expressions in the exclusion\nlist, then the event is still discarded (exclusion is stronger than inclusion).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/alerts.md"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 82,
                  "endLine": 204,
                  "endColumn": 86,
                  "snippet": {
                    "text": "### Event exclusion\n\n`.spec.exclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be excluded if the message matches at least\none of the expressions in the list.\n\n#### Example\n",
                    "rendered": {
                      "text": "### Event exclusion\n\n`.spec.exclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be excluded if the message matches at least\none of the expressions in the list.\n\n#### Example\n",
                      "markdown": "`### Event exclusion\n\n`.spec.exclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be excluded if the message matches at least\none of the expressions in the list.\n\n#### Example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/alerts.md"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 60,
                  "endLine": 229,
                  "endColumn": 65,
                  "snippet": {
                    "text": "The above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n\n### Event inclusion\n",
                    "rendered": {
                      "text": "The above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n\n### Event inclusion\n",
                      "markdown": "`The above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n\n### Event inclusion\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/alerts.md"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 55,
                  "endLine": 226,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n",
                    "rendered": {
                      "text": "    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n",
                      "markdown": "`    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/events.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 38,
                  "endLine": 60,
                  "endColumn": 42,
                  "snippet": {
                    "text": "with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n",
                    "rendered": {
                      "text": "with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n",
                      "markdown": "`with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 35,
                  "endLine": 274,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t// Verify signature using the same token as the Secret referenced in\n\t// Provider\n\tkey := []byte(\"<token>\")\n\tif err := verifySignature(r.Header.Get(\"X-Signature\"), body, key); err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to verify HMAC signature: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "\t// Verify signature using the same token as the Secret referenced in\n\t// Provider\n\tkey := []byte(\"<token>\")\n\tif err := verifySignature(r.Header.Get(\"X-Signature\"), body, key); err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to verify HMAC signature: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n",
                      "markdown": "`\t// Verify signature using the same token as the Secret referenced in\n\t// Provider\n\tkey := []byte(\"<token>\")\n\tif err := verifySignature(r.Header.Get(\"X-Signature\"), body, key); err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to verify HMAC signature: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1530,
                  "startColumn": 118,
                  "endLine": 1530,
                  "endColumn": 126,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1530,
                  "startColumn": 108,
                  "endLine": 1530,
                  "endColumn": 116,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1530,
                  "startColumn": 49,
                  "endLine": 1530,
                  "endColumn": 57,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bb-server-username-password --from-literal=username=<username> --from-literal=password=<password>\n```\n\nFor HTTP access tokens, the secret can be created with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1525,
                  "startColumn": 64,
                  "endLine": 1525,
                  "endColumn": 72,
                  "snippet": {
                    "text": "- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1522,
                  "startColumn": 33,
                  "endLine": 1522,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucketserver`, the following auth methods are available:\n\n- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucketserver`, the following auth methods are available:\n\n- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucketserver`, the following auth methods are available:\n\n- Basic Authentication (username/password)\n- [HTTP access tokens](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html)\n\nFor Basic Authentication, the referenced secret must contain a `password` field. The `username` field can either come from the [`.spec.username` field of the Provider](https://fluxcd.io/flux/components/notification/providers/#username) or can be defined in the referenced secret.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1515,
                  "startColumn": 83,
                  "endLine": 1515,
                  "endColumn": 91,
                  "snippet": {
                    "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bitbucket-token --from-literal=token=<username>:<app-password>\n```\n\n#### BitBucket Server/Data Center\n",
                    "rendered": {
                      "text": "You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bitbucket-token --from-literal=token=<username>:<app-password>\n```\n\n#### BitBucket Server/Data Center\n",
                      "markdown": "`You can create the secret with `kubectl` like this:\n\n```shell\nkubectl create secret generic bitbucket-token --from-literal=token=<username>:<app-password>\n```\n\n#### BitBucket Server/Data Center\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1509,
                  "startColumn": 8,
                  "endLine": 1509,
                  "endColumn": 16,
                  "snippet": {
                    "text": "[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n",
                    "rendered": {
                      "text": "[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n",
                      "markdown": "`[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1507,
                  "startColumn": 31,
                  "endLine": 1507,
                  "endColumn": 39,
                  "snippet": {
                    "text": "When `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n",
                      "markdown": "`When `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\nthe BitBucket repository specified in `.spec.address`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1506,
                  "startColumn": 95,
                  "endLine": 1506,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1506,
                  "startColumn": 70,
                  "endLine": 1506,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1506,
                  "startColumn": 5,
                  "endLine": 1506,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                    "rendered": {
                      "text": "\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n",
                      "markdown": "`\nWhen `.spec.type` is set to `bitbucket`, the referenced secret must contain a key called `token` with the value\nset to a BitBucket username and an\n[app password](https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/#Create-an-app-password)\nin the format `<username>:<app-password>`.\n\nThe app password must have `Repositories (Read/Write)` permission for\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 38,
                  "endLine": 1178,
                  "endColumn": 46,
                  "snippet": {
                    "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                    "rendered": {
                      "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                      "markdown": "````shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 15,
                  "endLine": 1178,
                  "endColumn": 23,
                  "snippet": {
                    "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                    "rendered": {
                      "text": "```shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n",
                      "markdown": "````shell\nkubectl create secret generic grafana-token \\\n--from-literal=username=<your-grafana-username> \\\n--from-literal=password=<your-grafana-password>\n```\n\nCreate a provider of type `grafana` and reference the `grafana-token` secret:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 13,
                  "endLine": 1173,
                  "endColumn": 21,
                  "snippet": {
                    "text": "```\n\nGrafana can also use basic authorization to authenticate the requests, if both the token and\nthe username/password are set in the secret, then token takes precedence over`basic auth:\n\n```shell\nkubectl create secret generic grafana-token \\\n",
                    "rendered": {
                      "text": "```\n\nGrafana can also use basic authorization to authenticate the requests, if both the token and\nthe username/password are set in the secret, then token takes precedence over`basic auth:\n\n```shell\nkubectl create secret generic grafana-token \\\n",
                      "markdown": "````\n\nGrafana can also use basic authorization to authenticate the requests, if both the token and\nthe username/password are set in the secret, then token takes precedence over`basic auth:\n\n```shell\nkubectl create secret generic grafana-token \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 26,
                  "endLine": 1092,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  name: my-provider-proxy\n  namespace: default\nstringData:\n  proxy: \"http://username:password@proxy_url:proxy_port\"\n```\n\n### TLS certificates\n",
                    "rendered": {
                      "text": "  name: my-provider-proxy\n  namespace: default\nstringData:\n  proxy: \"http://username:password@proxy_url:proxy_port\"\n```\n\n### TLS certificates\n",
                      "markdown": "`  name: my-provider-proxy\n  namespace: default\nstringData:\n  proxy: \"http://username:password@proxy_url:proxy_port\"\n```\n\n### TLS certificates\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1082,
                  "startColumn": 96,
                  "endLine": 1082,
                  "endColumn": 104,
                  "snippet": {
                    "text": "#### Proxy auth example\n\nSome networks need to use an authenticated proxy to access external services.\nTherefore, the proxy address can be stored as a secret to hide parameters like the username and password:\n\n```yaml\n---\n",
                    "rendered": {
                      "text": "#### Proxy auth example\n\nSome networks need to use an authenticated proxy to access external services.\nTherefore, the proxy address can be stored as a secret to hide parameters like the username and password:\n\n```yaml\n---\n",
                      "markdown": "`#### Proxy auth example\n\nSome networks need to use an authenticated proxy to access external services.\nTherefore, the proxy address can be stored as a secret to hide parameters like the username and password:\n\n```yaml\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1002,
                  "startColumn": 64,
                  "endLine": 1002,
                  "endColumn": 72,
                  "snippet": {
                    "text": "For the `generic` Provider for example this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.\n\nIf the address contains sensitive information such as tokens or passwords, it is \nrecommended to store the address in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains an `address` key, the `.spec.address` value is ignored.\n\n",
                    "rendered": {
                      "text": "For the `generic` Provider for example this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.\n\nIf the address contains sensitive information such as tokens or passwords, it is \nrecommended to store the address in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains an `address` key, the `.spec.address` value is ignored.\n\n",
                      "markdown": "`For the `generic` Provider for example this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.\n\nIf the address contains sensitive information such as tokens or passwords, it is \nrecommended to store the address in the Kubernetes secret referenced by `.spec.secretRef.name`.\nWhen the referenced Secret contains an `address` key, the `.spec.address` value is ignored.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 30,
                  "endLine": 944,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  name: alertmanager-address\n  namespace: default\nstringData:\n    address: https://username:password@<alertmanager-url>/api/v2/alerts/\"\n```\n\n##### Webex\n",
                    "rendered": {
                      "text": "  name: alertmanager-address\n  namespace: default\nstringData:\n    address: https://username:password@<alertmanager-url>/api/v2/alerts/\"\n```\n\n##### Webex\n",
                      "markdown": "`  name: alertmanager-address\n  namespace: default\nstringData:\n    address: https://username:password@<alertmanager-url>/api/v2/alerts/\"\n```\n\n##### Webex\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1635,
                  "startColumn": 26,
                  "endLine": 1636,
                  "snippet": {
                    "text": "in the Provider's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-provider).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                    "rendered": {
                      "text": "in the Provider's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-provider).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                      "markdown": "`in the Provider's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-provider).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1549,
                  "startColumn": 34,
                  "endLine": 1549,
                  "endColumn": 42,
                  "snippet": {
                    "text": "When `.spec.type` is set to `azuredevops`, the referenced secret must contain a key called `token` with the value set to a\n[Azure DevOps personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page).\n\nThe token must have permissions to update the commit status for the Azure DevOps repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `azuredevops`, the referenced secret must contain a key called `token` with the value set to a\n[Azure DevOps personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page).\n\nThe token must have permissions to update the commit status for the Azure DevOps repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`When `.spec.type` is set to `azuredevops`, the referenced secret must contain a key called `token` with the value set to a\n[Azure DevOps personal access token](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page).\n\nThe token must have permissions to update the commit status for the Azure DevOps repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1488,
                  "startColumn": 83,
                  "endLine": 1489,
                  "endColumn": 7,
                  "snippet": {
                    "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to \nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\nDue to a bug in Gitea 1.20.0 and 1.20.1, these versions require the additional \n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to \nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\nDue to a bug in Gitea 1.20.0 and 1.20.1, these versions require the additional \n",
                      "markdown": "`When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to \nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\nDue to a bug in Gitea 1.20.0 and 1.20.1, these versions require the additional \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1488,
                  "startColumn": 19,
                  "endLine": 1488,
                  "endColumn": 23,
                  "snippet": {
                    "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to \nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to \nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\n",
                      "markdown": "`When `.spec.type` is set to `gitea`, the referenced secret must contain a key called `token` with the value set to a\n[Gitea token](https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens).\n\nThe token must have at least the `write:repository` permission for the provider to \nupdate the commit status for the Gitea repository specified in `.spec.address`.\n\n{{% alert color=\"info\" title=\"Gitea 1.20.0 & 1.20.1\" %}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1475,
                  "startColumn": 34,
                  "endLine": 1475,
                  "endColumn": 42,
                  "snippet": {
                    "text": "When `.spec.type` is set to `gitlab`, the referenced secret must contain a key called `token` with the value set to a\n[GitLab personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html).\n\nThe token must have permissions to update the commit status for the GitLab repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `gitlab`, the referenced secret must contain a key called `token` with the value set to a\n[GitLab personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html).\n\nThe token must have permissions to update the commit status for the GitLab repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`When `.spec.type` is set to `gitlab`, the referenced secret must contain a key called `token` with the value set to a\n[GitLab personal access token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html).\n\nThe token must have permissions to update the commit status for the GitLab repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1462,
                  "startColumn": 34,
                  "endLine": 1462,
                  "endColumn": 42,
                  "snippet": {
                    "text": "When `.spec.type` is set to `github`, the referenced secret must contain a key called `token` with the value set to a\n[GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nThe token must have permissions to update the commit status for the GitHub repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                    "rendered": {
                      "text": "When `.spec.type` is set to `github`, the referenced secret must contain a key called `token` with the value set to a\n[GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nThe token must have permissions to update the commit status for the GitHub repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n",
                      "markdown": "`When `.spec.type` is set to `github`, the referenced secret must contain a key called `token` with the value set to a\n[GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nThe token must have permissions to update the commit status for the GitHub repository specified in `.spec.address`.\n\nYou can create the secret with `kubectl` like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1429,
                  "startColumn": 37,
                  "endLine": 1429,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                    "rendered": {
                      "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                      "markdown": "`\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1145,
                  "startColumn": 17,
                  "endLine": 1145,
                  "endColumn": 21,
                  "snippet": {
                    "text": "### Interval\n\n`.spec.interval` is a required field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreferences.\n\n### Suspend\n",
                    "rendered": {
                      "text": "### Interval\n\n`.spec.interval` is a required field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreferences.\n\n### Suspend\n",
                      "markdown": "`### Interval\n\n`.spec.interval` is a required field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreferences.\n\n### Suspend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1542,
                  "startColumn": 81,
                  "endLine": 1542,
                  "endColumn": 86,
                  "snippet": {
                    "text": "The HTTP access token must have `Repositories (Read/Write)` permission for\nthe repository specified in `.spec.address`.\n\n**NOTE:** Please provide HTTPS clone URL in the `address` field of this provider. SSH URLs are not supported by this provider type.\n\n#### Azure DevOps\n\n",
                    "rendered": {
                      "text": "The HTTP access token must have `Repositories (Read/Write)` permission for\nthe repository specified in `.spec.address`.\n\n**NOTE:** Please provide HTTPS clone URL in the `address` field of this provider. SSH URLs are not supported by this provider type.\n\n#### Azure DevOps\n\n",
                      "markdown": "`The HTTP access token must have `Repositories (Read/Write)` permission for\nthe repository specified in `.spec.address`.\n\n**NOTE:** Please provide HTTPS clone URL in the `address` field of this provider. SSH URLs are not supported by this provider type.\n\n#### Azure DevOps\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1429,
                  "startColumn": 48,
                  "endLine": 1429,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                    "rendered": {
                      "text": "\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n",
                      "markdown": "`\n#### Example\n\nThe following is an example of how to update the Git commit status for the GitHub repository where\nFlux was bootstrapped with `flux bootstrap github --owner=my-gh-org --repository=my-gh-repo`.\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1425,
                  "startColumn": 58,
                  "endLine": 1425,
                  "endColumn": 63,
                  "snippet": {
                    "text": "### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n\n",
                    "rendered": {
                      "text": "### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n\n",
                      "markdown": "`### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 36,
                  "endLine": 1424,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n",
                    "rendered": {
                      "text": "\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n",
                      "markdown": "`\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n\n#### Example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1422,
                  "startColumn": 3,
                  "endLine": 1422,
                  "endColumn": 8,
                  "snippet": {
                    "text": "--from-literal=address=\"Endpoint=sb://fluxv2.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yoursaskeygeneatedbyazure\"\n```\n\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n",
                    "rendered": {
                      "text": "--from-literal=address=\"Endpoint=sb://fluxv2.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yoursaskeygeneatedbyazure\"\n```\n\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n",
                      "markdown": "`--from-literal=address=\"Endpoint=sb://fluxv2.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yoursaskeygeneatedbyazure\"\n```\n\n### Git Commit Status Updates\n\nThe notification-controller can mark Git commits as reconciled by posting\nFlux `Kustomization` events to the origin repository using Git SaaS providers APIs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1369,
                  "endLine": 1370,
                  "endColumn": 5,
                  "snippet": {
                    "text": "enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU",
                    "rendered": {
                      "text": "enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU",
                      "markdown": "`enerating the Azure Enterprise Application.\n\n```shell\nexport AZURE_CLIENT=$(az ad app list --filter \"startswith(displayName,'event-hub')\" --query '[].appId' |jq -r '.[0]')\nexport AZURE_SECRET='secret-client-secret-generated-at-creation'\nexport AZURE_TENANT=$(az account show -o tsv --query tenantId)\n\ncurl -X GET --data 'grant_type=client_credentials' --data \"client_id=$AZURE_CLIENT\" --data \"client_secret=$AZURE_SECRET\" --data 'resource=https://eventhubs.azure.net' -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/$AZURE_TENANT/oauth2/token |jq .access_token\n```\n\nU`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 1145,
                  "startColumn": 3,
                  "endLine": 1145,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Interval\n\n`.spec.interval` is a required field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreferences.\n\n### Suspend\n",
                    "rendered": {
                      "text": "### Interval\n\n`.spec.interval` is a required field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreferences.\n\n### Suspend\n",
                      "markdown": "`### Interval\n\n`.spec.interval` is a required field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreferences.\n\n### Suspend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 23,
                  "endLine": 873,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  address: https://events.pagerduty.com\n  channel: <integrationKey>\n```\nIf you are sending to a service integration, it is recommended to set your Alert to filter to\nonly those sources you want to trigger an incident for that service. For example:\n\n```yaml\n",
                    "rendered": {
                      "text": "  address: https://events.pagerduty.com\n  channel: <integrationKey>\n```\nIf you are sending to a service integration, it is recommended to set your Alert to filter to\nonly those sources you want to trigger an incident for that service. For example:\n\n```yaml\n",
                      "markdown": "`  address: https://events.pagerduty.com\n  channel: <integrationKey>\n```\nIf you are sending to a service integration, it is recommended to set your Alert to filter to\nonly those sources you want to trigger an incident for that service. For example:\n\n```yaml\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/providers.md"
                },
                "region": {
                  "startLine": 857,
                  "startColumn": 32,
                  "endLine": 857,
                  "endColumn": 41,
                  "snippet": {
                    "text": "the integration key (also known as a routing key) for your [service](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration)\nor [event orchestration](https://support.pagerduty.com/docs/event-orchestration).\n\nWhen adding an integration for a service on PagerDuty, it is recommended to use `Events API v2` integration.\n\n**Note**: PagerDuty does not support Change Events when sent to global integrations, such as event orchestration.\n\n",
                    "rendered": {
                      "text": "the integration key (also known as a routing key) for your [service](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration)\nor [event orchestration](https://support.pagerduty.com/docs/event-orchestration).\n\nWhen adding an integration for a service on PagerDuty, it is recommended to use `Events API v2` integration.\n\n**Note**: PagerDuty does not support Change Events when sent to global integrations, such as event orchestration.\n\n",
                      "markdown": "`the integration key (also known as a routing key) for your [service](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration)\nor [event orchestration](https://support.pagerduty.com/docs/event-orchestration).\n\nWhen adding an integration for a service on PagerDuty, it is recommended to use `Events API v2` integration.\n\n**Note**: PagerDuty does not support Change Events when sent to global integrations, such as event orchestration.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 15,
                  "endLine": 102,
                  "endColumn": 23,
                  "snippet": {
                    "text": "   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n   - **Secret**: The `token` string generated in step 1.\n\n## Writing a Receiver spec\n",
                    "rendered": {
                      "text": "   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n   - **Secret**: The `token` string generated in step 1.\n\n## Writing a Receiver spec\n",
                      "markdown": "`   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n   - **Secret**: The `token` string generated in step 1.\n\n## Writing a Receiver spec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 71,
                  "endLine": 99,
                  "endColumn": 79,
                  "snippet": {
                    "text": "5. On GitHub, navigate to your repository and click on the \"Add webhook\" button\n   under \"Settings/Webhooks\". Fill the form with:\n\n   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n",
                    "rendered": {
                      "text": "5. On GitHub, navigate to your repository and click on the \"Add webhook\" button\n   under \"Settings/Webhooks\". Fill the form with:\n\n   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n",
                      "markdown": "`5. On GitHub, navigate to your repository and click on the \"Add webhook\" button\n   under \"Settings/Webhooks\". Fill the form with:\n\n   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 26,
                  "endLine": 899,
                  "snippet": {
                    "text": "in the Receiver's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-receiver).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                    "rendered": {
                      "text": "in the Receiver's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-receiver).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                      "markdown": "`in the Receiver's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-receiver).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 17,
                  "endLine": 672,
                  "endColumn": 21,
                  "snippet": {
                    "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                    "rendered": {
                      "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                      "markdown": "`### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 8,
                  "endLine": 738,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n### Suspending and resuming\n\nWhen you find yourself in a situation where you temporarily want to pause the\nreconciliation of a Receiver and the handling of requests, you can suspend it\nusing the [`.spec.suspend` field](#suspend).\n\n",
                    "rendered": {
                      "text": "\n### Suspending and resuming\n\nWhen you find yourself in a situation where you temporarily want to pause the\nreconciliation of a Receiver and the handling of requests, you can suspend it\nusing the [`.spec.suspend` field](#suspend).\n\n",
                      "markdown": "`\n### Suspending and resuming\n\nWhen you find yourself in a situation where you temporarily want to pause the\nreconciliation of a Receiver and the handling of requests, you can suspend it\nusing the [`.spec.suspend` field](#suspend).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 10,
                  "endLine": 694,
                  "endColumn": 19,
                  "snippet": {
                    "text": "### Public Ingress considerations\n\nConsiderations should be made when exposing the controller's `webhook-receiver`\nKubernetes Service to the public internet. Each request to a Receiver [webhook\npath](#webhook-path) will result in request to the Kubernetes API, as the\ncontroller needs to fetch information about the resource. This endpoint may be\nprotected with a token, but this does not defend against a situation where a\n",
                    "rendered": {
                      "text": "### Public Ingress considerations\n\nConsiderations should be made when exposing the controller's `webhook-receiver`\nKubernetes Service to the public internet. Each request to a Receiver [webhook\npath](#webhook-path) will result in request to the Kubernetes API, as the\ncontroller needs to fetch information about the resource. This endpoint may be\nprotected with a token, but this does not defend against a situation where a\n",
                      "markdown": "`### Public Ingress considerations\n\nConsiderations should be made when exposing the controller's `webhook-receiver`\nKubernetes Service to the public internet. Each request to a Receiver [webhook\npath](#webhook-path) will result in request to the Kubernetes API, as the\ncontroller needs to fetch information about the resource. This endpoint may be\nprotected with a token, but this does not defend against a situation where a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 3,
                  "endLine": 672,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                    "rendered": {
                      "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                      "markdown": "`### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 2,
                  "endLine": 221,
                  "endColumn": 8,
                  "snippet": {
                    "text": "2. Send an HTTP POST request with the body and the HMAC hash to the webhook URL:\n\n   ```sh\n   curl <webhook-url> -X POST -H \"X-Signature: <hash-function>=<generated-hash>\" -d '<request-body>'\n   ```\n\n#### GitHub\n",
                    "rendered": {
                      "text": "2. Send an HTTP POST request with the body and the HMAC hash to the webhook URL:\n\n   ```sh\n   curl <webhook-url> -X POST -H \"X-Signature: <hash-function>=<generated-hash>\" -d '<request-body>'\n   ```\n\n#### GitHub\n",
                      "markdown": "`2. Send an HTTP POST request with the body and the HMAC hash to the webhook URL:\n\n   ```sh\n   curl <webhook-url> -X POST -H \"X-Signature: <hash-function>=<generated-hash>\" -d '<request-body>'\n   ```\n\n#### GitHub\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 68,
                  "endLine": 212,
                  "endColumn": 73,
                  "snippet": {
                    "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                    "rendered": {
                      "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                      "markdown": "`1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 28,
                  "endLine": 212,
                  "endColumn": 37,
                  "snippet": {
                    "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                    "rendered": {
                      "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                      "markdown": "`1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 45,
                  "endLine": 57,
                  "endColumn": 50,
                  "snippet": {
                    "text": "1. Generate a random string and create a Secret with a `token` field:\n\n   ```sh\n   TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\n\n   kubectl -n flux-system create secret generic receiver-token \\\n     --from-literal=token=$TOKEN\n",
                    "rendered": {
                      "text": "1. Generate a random string and create a Secret with a `token` field:\n\n   ```sh\n   TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\n\n   kubectl -n flux-system create secret generic receiver-token \\\n     --from-literal=token=$TOKEN\n",
                      "markdown": "`1. Generate a random string and create a Secret with a `token` field:\n\n   ```sh\n   TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\n\n   kubectl -n flux-system create secret generic receiver-token \\\n     --from-literal=token=$TOKEN\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta2/receivers.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 7,
                  "endLine": 10,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nThe following is an example of how to configure an incoming webhook for the\nGitHub repository where Flux was bootstrapped with `flux bootstrap github`.\nAfter a Git push, GitHub will send a push event to notification-controller,\nwhich in turn tells Flux to pull and apply the latest changes from upstream.\n\n**Note:** The following assumes an Ingress exposes the controller's\n",
                    "rendered": {
                      "text": "\nThe following is an example of how to configure an incoming webhook for the\nGitHub repository where Flux was bootstrapped with `flux bootstrap github`.\nAfter a Git push, GitHub will send a push event to notification-controller,\nwhich in turn tells Flux to pull and apply the latest changes from upstream.\n\n**Note:** The following assumes an Ingress exposes the controller's\n",
                      "markdown": "`\nThe following is an example of how to configure an incoming webhook for the\nGitHub repository where Flux was bootstrapped with `flux bootstrap github`.\nAfter a Git push, GitHub will send a push event to notification-controller,\nwhich in turn tells Flux to pull and apply the latest changes from upstream.\n\n**Note:** The following assumes an Ingress exposes the controller's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 15,
                  "endLine": 104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n   - **Secret**: The `token` string generated in step 1.\n\n## Writing a Receiver spec\n",
                    "rendered": {
                      "text": "   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n   - **Secret**: The `token` string generated in step 1.\n\n## Writing a Receiver spec\n",
                      "markdown": "`   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n   - **Secret**: The `token` string generated in step 1.\n\n## Writing a Receiver spec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 71,
                  "endLine": 101,
                  "endColumn": 79,
                  "snippet": {
                    "text": "5. On GitHub, navigate to your repository and click on the \"Add webhook\" button\n   under \"Settings/Webhooks\". Fill the form with:\n\n   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n",
                    "rendered": {
                      "text": "5. On GitHub, navigate to your repository and click on the \"Add webhook\" button\n   under \"Settings/Webhooks\". Fill the form with:\n\n   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n",
                      "markdown": "`5. On GitHub, navigate to your repository and click on the \"Add webhook\" button\n   under \"Settings/Webhooks\". Fill the form with:\n\n   - **Payload URL**: The composed address, consisting of the Ingress' hostname\n     exposing the controller's `webhook-receiver` Kubernetes Service, and the\n     generated path for the Receiver. For this example:\n     `https://<hostname>/hook/bed6d00b5555b1603e1f59b94d7fdbca58089cb5663633fb83f2815dc626d92b`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 26,
                  "endLine": 957,
                  "snippet": {
                    "text": "in the Receiver's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-receiver).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                    "rendered": {
                      "text": "in the Receiver's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-receiver).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n",
                      "markdown": "`in the Receiver's `.status.observedGeneration`. The observed generation is the\nlatest `.metadata.generation` which resulted in a [ready state](#ready-receiver).\n\n### Last Handled Reconcile At\n\nThe notification-controller reports the last `reconcile.fluxcd.io/requestedAt`\nannotation value it acted on in the `.status.lastHandledReconcileAt` field.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 17,
                  "endLine": 730,
                  "endColumn": 21,
                  "snippet": {
                    "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                    "rendered": {
                      "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                      "markdown": "`### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 8,
                  "endLine": 796,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n### Suspending and resuming\n\nWhen you find yourself in a situation where you temporarily want to pause the\nreconciliation of a Receiver and the handling of requests, you can suspend it\nusing the [`.spec.suspend` field](#suspend).\n\n",
                    "rendered": {
                      "text": "\n### Suspending and resuming\n\nWhen you find yourself in a situation where you temporarily want to pause the\nreconciliation of a Receiver and the handling of requests, you can suspend it\nusing the [`.spec.suspend` field](#suspend).\n\n",
                      "markdown": "`\n### Suspending and resuming\n\nWhen you find yourself in a situation where you temporarily want to pause the\nreconciliation of a Receiver and the handling of requests, you can suspend it\nusing the [`.spec.suspend` field](#suspend).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 10,
                  "endLine": 752,
                  "endColumn": 19,
                  "snippet": {
                    "text": "### Public Ingress considerations\n\nConsiderations should be made when exposing the controller's `webhook-receiver`\nKubernetes Service to the public internet. Each request to a Receiver [webhook\npath](#webhook-path) will result in request to the Kubernetes API, as the\ncontroller needs to fetch information about the resource. This endpoint may be\nprotected with a token, but this does not defend against a situation where a\n",
                    "rendered": {
                      "text": "### Public Ingress considerations\n\nConsiderations should be made when exposing the controller's `webhook-receiver`\nKubernetes Service to the public internet. Each request to a Receiver [webhook\npath](#webhook-path) will result in request to the Kubernetes API, as the\ncontroller needs to fetch information about the resource. This endpoint may be\nprotected with a token, but this does not defend against a situation where a\n",
                      "markdown": "`### Public Ingress considerations\n\nConsiderations should be made when exposing the controller's `webhook-receiver`\nKubernetes Service to the public internet. Each request to a Receiver [webhook\npath](#webhook-path) will result in request to the Kubernetes API, as the\ncontroller needs to fetch information about the resource. This endpoint may be\nprotected with a token, but this does not defend against a situation where a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 3,
                  "endLine": 730,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                    "rendered": {
                      "text": "### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n",
                      "markdown": "`### Interval\n\n`.spec.interval` is an optional field with a default of ten minutes that specifies\nthe time interval at which the controller reconciles the provider with its Secret\nreference.\n\n### Suspend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 2,
                  "endLine": 224,
                  "endColumn": 8,
                  "snippet": {
                    "text": "2. Send an HTTP POST request with the body and the HMAC hash to the webhook URL:\n\n   ```sh\n   curl <webhook-url> -X POST -H \"X-Signature: <hash-function>=<generated-hash>\" -d '<request-body>'\n   ```\n\n#### GitHub\n",
                    "rendered": {
                      "text": "2. Send an HTTP POST request with the body and the HMAC hash to the webhook URL:\n\n   ```sh\n   curl <webhook-url> -X POST -H \"X-Signature: <hash-function>=<generated-hash>\" -d '<request-body>'\n   ```\n\n#### GitHub\n",
                      "markdown": "`2. Send an HTTP POST request with the body and the HMAC hash to the webhook URL:\n\n   ```sh\n   curl <webhook-url> -X POST -H \"X-Signature: <hash-function>=<generated-hash>\" -d '<request-body>'\n   ```\n\n#### GitHub\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 68,
                  "endLine": 215,
                  "endColumn": 73,
                  "snippet": {
                    "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                    "rendered": {
                      "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                      "markdown": "`1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 28,
                  "endLine": 215,
                  "endColumn": 37,
                  "snippet": {
                    "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                    "rendered": {
                      "text": "1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n",
                      "markdown": "`1. Generate the HMAC hash for the request body using OpenSSL:\n\n   ```sh\n   printf '<request-body>' | openssl dgst -sha1 -r -hmac \"<token>\" | awk '{print $1}'\n   ```\n\n   You can replace the `-sha1` flag with `-sha256` or `-sha512` to use a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "endLine": 59,
                  "endColumn": 50,
                  "snippet": {
                    "text": "1. Generate a random string and create a Secret with a `token` field:\n\n   ```sh\n   TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\n\n   kubectl -n flux-system create secret generic receiver-token \\\n     --from-literal=token=$TOKEN\n",
                    "rendered": {
                      "text": "1. Generate a random string and create a Secret with a `token` field:\n\n   ```sh\n   TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\n\n   kubectl -n flux-system create secret generic receiver-token \\\n     --from-literal=token=$TOKEN\n",
                      "markdown": "`1. Generate a random string and create a Secret with a `token` field:\n\n   ```sh\n   TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)\n\n   kubectl -n flux-system create secret generic receiver-token \\\n     --from-literal=token=$TOKEN\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1/receivers.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 12,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nThe following is an example of how to configure an incoming webhook for the\nGitHub repository where Flux was bootstrapped with `flux bootstrap github`.\nAfter a Git push, GitHub will send a push event to notification-controller,\nwhich in turn tells Flux to pull and apply the latest changes from upstream.\n\n**Note:** The following assumes an Ingress exposes the controller's\n",
                    "rendered": {
                      "text": "\nThe following is an example of how to configure an incoming webhook for the\nGitHub repository where Flux was bootstrapped with `flux bootstrap github`.\nAfter a Git push, GitHub will send a push event to notification-controller,\nwhich in turn tells Flux to pull and apply the latest changes from upstream.\n\n**Note:** The following assumes an Ingress exposes the controller's\n",
                      "markdown": "`\nThe following is an example of how to configure an incoming webhook for the\nGitHub repository where Flux was bootstrapped with `flux bootstrap github`.\nAfter a Git push, GitHub will send a push event to notification-controller,\nwhich in turn tells Flux to pull and apply the latest changes from upstream.\n\n**Note:** The following assumes an Ingress exposes the controller's\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/alerts.md"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 78,
                  "endLine": 216,
                  "endColumn": 82,
                  "snippet": {
                    "text": "### Event inclusion\n\n`.spec.inclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be sent if the message matches at least one\nof the expressions in the list, and discarded otherwise. If the message matches one of the\nexpressions in the inclusion list but also matches one of the expressions in the exclusion\nlist, then the event is still discarded (exclusion is stronger than inclusion).\n",
                    "rendered": {
                      "text": "### Event inclusion\n\n`.spec.inclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be sent if the message matches at least one\nof the expressions in the list, and discarded otherwise. If the message matches one of the\nexpressions in the inclusion list but also matches one of the expressions in the exclusion\nlist, then the event is still discarded (exclusion is stronger than inclusion).\n",
                      "markdown": "`### Event inclusion\n\n`.spec.inclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be sent if the message matches at least one\nof the expressions in the list, and discarded otherwise. If the message matches one of the\nexpressions in the inclusion list but also matches one of the expressions in the exclusion\nlist, then the event is still discarded (exclusion is stronger than inclusion).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/alerts.md"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 82,
                  "endLine": 185,
                  "endColumn": 86,
                  "snippet": {
                    "text": "### Event exclusion\n\n`.spec.exclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be excluded if the message matches at least\none of the expressions in the list.\n\n#### Example\n",
                    "rendered": {
                      "text": "### Event exclusion\n\n`.spec.exclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be excluded if the message matches at least\none of the expressions in the list.\n\n#### Example\n",
                      "markdown": "`### Event exclusion\n\n`.spec.exclusionList` is an optional field to specify a list of regex expressions to filter\nevents based on message content. The event will be excluded if the message matches at least\none of the expressions in the list.\n\n#### Example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/alerts.md"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 60,
                  "endLine": 210,
                  "endColumn": 65,
                  "snippet": {
                    "text": "The above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n\n### Event inclusion\n",
                    "rendered": {
                      "text": "The above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n\n### Event inclusion\n",
                      "markdown": "`The above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n```\n\n### Event inclusion\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/alerts.md"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 55,
                  "endLine": 207,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n",
                    "rendered": {
                      "text": "    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n",
                      "markdown": "`    - \"waiting.*socket\"\n```\n\nThe above definition will not send alerts for transient Git clone errors like:\n\n```text\nunable to clone 'ssh://git@ssh.dev.azure.com/v3/...', error: SSH could not read data: Error waiting on socket\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1beta3/events.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 38,
                  "endLine": 60,
                  "endColumn": 42,
                  "snippet": {
                    "text": "with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n",
                    "rendered": {
                      "text": "with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n",
                      "markdown": "`with the `--rate-limit-interval` controller flag.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/google_chat_test.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 18,
                  "endLine": 49,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\tgoogle_chat, err := NewGoogleChat(ts.URL, \"\")\n\trequire.NoError(t, err)\n\n\terr = google_chat.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\tgoogle_chat, err := NewGoogleChat(ts.URL, \"\")\n\trequire.NoError(t, err)\n\n\terr = google_chat.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\tgoogle_chat, err := NewGoogleChat(ts.URL, \"\")\n\trequire.NoError(t, err)\n\n\terr = google_chat.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 67,
                  "endLine": 299,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\tif b.Token != \"\" {\n\t\treq.Header.Set(\"Authorization\", \"Bearer \"+b.Token)\n\t} else {\n\t\treq.Header.Add(\"Authorization\", \"Basic \"+basicAuth(b.Username, b.Password))\n\t}\n\treq.Header.Add(\"x-atlassian-token\", \"no-check\")\n\treq.Header.Add(\"x-requested-with\", \"XMLHttpRequest\")\n",
                    "rendered": {
                      "text": "\tif b.Token != \"\" {\n\t\treq.Header.Set(\"Authorization\", \"Bearer \"+b.Token)\n\t} else {\n\t\treq.Header.Add(\"Authorization\", \"Basic \"+basicAuth(b.Username, b.Password))\n\t}\n\treq.Header.Add(\"x-atlassian-token\", \"no-check\")\n\treq.Header.Add(\"x-requested-with\", \"XMLHttpRequest\")\n",
                      "markdown": "`\tif b.Token != \"\" {\n\t\treq.Header.Set(\"Authorization\", \"Bearer \"+b.Token)\n\t} else {\n\t\treq.Header.Add(\"Authorization\", \"Basic \"+basicAuth(b.Username, b.Password))\n\t}\n\treq.Header.Add(\"x-atlassian-token\", \"no-check\")\n\treq.Header.Add(\"x-requested-with\", \"XMLHttpRequest\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "endLine": 115,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tProviderAddress: addr,\n\t\tToken:           token,\n\t\tUsername:        username,\n\t\tPassword:        password,\n\t\tClient:          httpClient,\n\t}, nil\n}\n",
                    "rendered": {
                      "text": "\t\tProviderAddress: addr,\n\t\tToken:           token,\n\t\tUsername:        username,\n\t\tPassword:        password,\n\t\tClient:          httpClient,\n\t}, nil\n}\n",
                      "markdown": "`\t\tProviderAddress: addr,\n\t\tToken:           token,\n\t\tUsername:        username,\n\t\tPassword:        password,\n\t\tClient:          httpClient,\n\t}, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 2,
                  "endLine": 115,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tProviderAddress: addr,\n\t\tToken:           token,\n\t\tUsername:        username,\n\t\tPassword:        password,\n\t\tClient:          httpClient,\n\t}, nil\n}\n",
                    "rendered": {
                      "text": "\t\tProviderAddress: addr,\n\t\tToken:           token,\n\t\tUsername:        username,\n\t\tPassword:        password,\n\t\tClient:          httpClient,\n\t}, nil\n}\n",
                      "markdown": "`\t\tProviderAddress: addr,\n\t\tToken:           token,\n\t\tUsername:        username,\n\t\tPassword:        password,\n\t\tClient:          httpClient,\n\t}, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 78,
                  "endLine": 106,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\thttpClient.Logger = nil\n\n\tif len(token) == 0 && (len(username) == 0 || len(password) == 0) {\n\t\treturn nil, errors.New(\"invalid credentials, expected to be one of username/password or API Token\")\n\t}\n\n\treturn &BitbucketServer{\n",
                    "rendered": {
                      "text": "\thttpClient.Logger = nil\n\n\tif len(token) == 0 && (len(username) == 0 || len(password) == 0) {\n\t\treturn nil, errors.New(\"invalid credentials, expected to be one of username/password or API Token\")\n\t}\n\n\treturn &BitbucketServer{\n",
                      "markdown": "`\thttpClient.Logger = nil\n\n\tif len(token) == 0 && (len(username) == 0 || len(password) == 0) {\n\t\treturn nil, errors.New(\"invalid credentials, expected to be one of username/password or API Token\")\n\t}\n\n\treturn &BitbucketServer{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 50,
                  "endLine": 105,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\thttpClient.RetryMax = 4\n\thttpClient.Logger = nil\n\n\tif len(token) == 0 && (len(username) == 0 || len(password) == 0) {\n\t\treturn nil, errors.New(\"invalid credentials, expected to be one of username/password or API Token\")\n\t}\n\n",
                    "rendered": {
                      "text": "\thttpClient.RetryMax = 4\n\thttpClient.Logger = nil\n\n\tif len(token) == 0 && (len(username) == 0 || len(password) == 0) {\n\t\treturn nil, errors.New(\"invalid credentials, expected to be one of username/password or API Token\")\n\t}\n\n",
                      "markdown": "`\thttpClient.RetryMax = 4\n\thttpClient.Logger = nil\n\n\tif len(token) == 0 && (len(username) == 0 || len(password) == 0) {\n\t\treturn nil, errors.New(\"invalid credentials, expected to be one of username/password or API Token\")\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 113,
                  "endLine": 84,
                  "endColumn": 121,
                  "snippet": {
                    "text": "}\n\n// NewBitbucketServer creates and returns a new BitbucketServer notifier.\nfunc NewBitbucketServer(providerUID string, addr string, token string, certPool *x509.CertPool, username string, password string) (*BitbucketServer, error) {\n\turl, err := parseBitbucketServerGitAddress(addr)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "}\n\n// NewBitbucketServer creates and returns a new BitbucketServer notifier.\nfunc NewBitbucketServer(providerUID string, addr string, token string, certPool *x509.CertPool, username string, password string) (*BitbucketServer, error) {\n\turl, err := parseBitbucketServerGitAddress(addr)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`}\n\n// NewBitbucketServer creates and returns a new BitbucketServer notifier.\nfunc NewBitbucketServer(providerUID string, addr string, token string, certPool *x509.CertPool, username string, password string) (*BitbucketServer, error) {\n\turl, err := parseBitbucketServerGitAddress(addr)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tUrl             *url.URL\n\tProviderAddress string\n\tUsername        string\n\tPassword        string\n\tToken           string\n\tClient          *retryablehttp.Client\n}\n",
                    "rendered": {
                      "text": "\tUrl             *url.URL\n\tProviderAddress string\n\tUsername        string\n\tPassword        string\n\tToken           string\n\tClient          *retryablehttp.Client\n}\n",
                      "markdown": "`\tUrl             *url.URL\n\tProviderAddress string\n\tUsername        string\n\tPassword        string\n\tToken           string\n\tClient          *retryablehttp.Client\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 3,
                  "endLine": 284,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tprojectkey := comp[0]\n\treposlug := comp[1]\n\n\t// Update the path till commits endpoint. The final builds endpoint would be added in Post function.\n\tu.Path = fmt.Sprintf(bbServerEndPointCommitsTmpl, cntxtPath, projectkey, reposlug)\n\n\treturn u, nil\n",
                    "rendered": {
                      "text": "\tprojectkey := comp[0]\n\treposlug := comp[1]\n\n\t// Update the path till commits endpoint. The final builds endpoint would be added in Post function.\n\tu.Path = fmt.Sprintf(bbServerEndPointCommitsTmpl, cntxtPath, projectkey, reposlug)\n\n\treturn u, nil\n",
                      "markdown": "`\tprojectkey := comp[0]\n\treposlug := comp[1]\n\n\t// Update the path till commits endpoint. The final builds endpoint would be added in Post function.\n\tu.Path = fmt.Sprintf(bbServerEndPointCommitsTmpl, cntxtPath, projectkey, reposlug)\n\n\treturn u, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 41,
                  "endLine": 279,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n\tcomp := strings.Split(id, \"/\")\n\tif len(comp) != 2 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: invalid repository id %q\", id)\n\t}\n\tprojectkey := comp[0]\n\treposlug := comp[1]\n",
                    "rendered": {
                      "text": "\n\tcomp := strings.Split(id, \"/\")\n\tif len(comp) != 2 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: invalid repository id %q\", id)\n\t}\n\tprojectkey := comp[0]\n\treposlug := comp[1]\n",
                      "markdown": "`\n\tcomp := strings.Split(id, \"/\")\n\tif len(comp) != 2 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: invalid repository id %q\", id)\n\t}\n\tprojectkey := comp[0]\n\treposlug := comp[1]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 95,
                  "endLine": 269,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\t// /scm/ is always part of http/https clone urls : https://community.atlassian.com/t5/Bitbucket-questions/remote-url-in-Bitbucket-server-what-does-scm-represent-is-it/qaq-p/2060987\n\tlastIndex := strings.LastIndex(idWithContext, bbServerSourceCodeMgmtString)\n\tif lastIndex < 0 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: supplied provider address is not http(s) git clone url\")\n\t}\n\n\t// Handle context scenarios --> https://confluence.atlassian.com/bitbucketserver/change-bitbucket-s-context-path-776640153.html\n",
                    "rendered": {
                      "text": "\t// /scm/ is always part of http/https clone urls : https://community.atlassian.com/t5/Bitbucket-questions/remote-url-in-Bitbucket-server-what-does-scm-represent-is-it/qaq-p/2060987\n\tlastIndex := strings.LastIndex(idWithContext, bbServerSourceCodeMgmtString)\n\tif lastIndex < 0 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: supplied provider address is not http(s) git clone url\")\n\t}\n\n\t// Handle context scenarios --> https://confluence.atlassian.com/bitbucketserver/change-bitbucket-s-context-path-776640153.html\n",
                      "markdown": "`\t// /scm/ is always part of http/https clone urls : https://community.atlassian.com/t5/Bitbucket-questions/remote-url-in-Bitbucket-server-what-does-scm-represent-is-it/qaq-p/2060987\n\tlastIndex := strings.LastIndex(idWithContext, bbServerSourceCodeMgmtString)\n\tif lastIndex < 0 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: supplied provider address is not http(s) git clone url\")\n\t}\n\n\t// Handle context scenarios --> https://confluence.atlassian.com/bitbucketserver/change-bitbucket-s-context-path-776640153.html\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 41,
                  "endLine": 269,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t// /scm/ is always part of http/https clone urls : https://community.atlassian.com/t5/Bitbucket-questions/remote-url-in-Bitbucket-server-what-does-scm-represent-is-it/qaq-p/2060987\n\tlastIndex := strings.LastIndex(idWithContext, bbServerSourceCodeMgmtString)\n\tif lastIndex < 0 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: supplied provider address is not http(s) git clone url\")\n\t}\n\n\t// Handle context scenarios --> https://confluence.atlassian.com/bitbucketserver/change-bitbucket-s-context-path-776640153.html\n",
                    "rendered": {
                      "text": "\t// /scm/ is always part of http/https clone urls : https://community.atlassian.com/t5/Bitbucket-questions/remote-url-in-Bitbucket-server-what-does-scm-represent-is-it/qaq-p/2060987\n\tlastIndex := strings.LastIndex(idWithContext, bbServerSourceCodeMgmtString)\n\tif lastIndex < 0 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: supplied provider address is not http(s) git clone url\")\n\t}\n\n\t// Handle context scenarios --> https://confluence.atlassian.com/bitbucketserver/change-bitbucket-s-context-path-776640153.html\n",
                      "markdown": "`\t// /scm/ is always part of http/https clone urls : https://community.atlassian.com/t5/Bitbucket-questions/remote-url-in-Bitbucket-server-what-does-scm-represent-is-it/qaq-p/2060987\n\tlastIndex := strings.LastIndex(idWithContext, bbServerSourceCodeMgmtString)\n\tif lastIndex < 0 {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: supplied provider address is not http(s) git clone url\")\n\t}\n\n\t// Handle context scenarios --> https://confluence.atlassian.com/bitbucketserver/change-bitbucket-s-context-path-776640153.html\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 41,
                  "endLine": 261,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\treturn nil, fmt.Errorf(\"could not parse git address: %w\", err)\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: unsupported scheme type in address: %s. Must be http or https\", u.Scheme)\n\t}\n\n\tidWithContext := strings.TrimSuffix(u.Path, \".git\")\n",
                    "rendered": {
                      "text": "\t\treturn nil, fmt.Errorf(\"could not parse git address: %w\", err)\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: unsupported scheme type in address: %s. Must be http or https\", u.Scheme)\n\t}\n\n\tidWithContext := strings.TrimSuffix(u.Path, \".git\")\n",
                      "markdown": "`\t\treturn nil, fmt.Errorf(\"could not parse git address: %w\", err)\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: unsupported scheme type in address: %s. Must be http or https\", u.Scheme)\n\t}\n\n\tidWithContext := strings.TrimSuffix(u.Path, \".git\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 41,
                  "endLine": 258,
                  "endColumn": 46,
                  "snippet": {
                    "text": "func parseBitbucketServerGitAddress(s string) (*url.URL, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: %w\", err)\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: unsupported scheme type in address: %s. Must be http or https\", u.Scheme)\n",
                    "rendered": {
                      "text": "func parseBitbucketServerGitAddress(s string) (*url.URL, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: %w\", err)\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: unsupported scheme type in address: %s. Must be http or https\", u.Scheme)\n",
                      "markdown": "`func parseBitbucketServerGitAddress(s string) (*url.URL, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: %w\", err)\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"could not parse git address: unsupported scheme type in address: %s. Must be http or https\", u.Scheme)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/teams_test.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 14,
                  "endLine": 166,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t\trequire.NoError(t, err)\n\t\t\tteams.Schema = tt.schema\n\n\t\t\terr = teams.Post(context.TODO(), testEvent())\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.True(t, *tt.serverCalled)\n",
                    "rendered": {
                      "text": "\t\t\trequire.NoError(t, err)\n\t\t\tteams.Schema = tt.schema\n\n\t\t\terr = teams.Post(context.TODO(), testEvent())\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.True(t, *tt.serverCalled)\n",
                      "markdown": "`\t\t\trequire.NoError(t, err)\n\t\t\tteams.Schema = tt.schema\n\n\t\t\terr = teams.Post(context.TODO(), testEvent())\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.True(t, *tt.serverCalled)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/pagerduty_fuzz_test.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 8,
                  "endLine": 54,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = pd.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = pd.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Message = message\n\t\tevent.Severity = severity\n\n\t\t_ = pd.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana_fuzz_test.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "endLine": 63,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\n\t\t_ = grafana.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\n\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\n\t\t_ = grafana.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\n\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\n\t\t_ = grafana.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana_fuzz_test.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 98,
                  "endLine": 49,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\t\tvar cert x509.CertPool\n\t\t_ = fuzz.NewConsumer(seed).GenerateStruct(&cert)\n\n\t\tgrafana, err := NewGrafana(fmt.Sprintf(\"%s/%s\", ts.URL, urlSuffix), \"\", token, &cert, username, password)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tvar cert x509.CertPool\n\t\t_ = fuzz.NewConsumer(seed).GenerateStruct(&cert)\n\n\t\tgrafana, err := NewGrafana(fmt.Sprintf(\"%s/%s\", ts.URL, urlSuffix), \"\", token, &cert, username, password)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n",
                      "markdown": "`\t\tvar cert x509.CertPool\n\t\t_ = fuzz.NewConsumer(seed).GenerateStruct(&cert)\n\n\t\tgrafana, err := NewGrafana(fmt.Sprintf(\"%s/%s\", ts.URL, urlSuffix), \"\", token, &cert, username, password)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana_fuzz_test.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 19,
                  "endLine": 38,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tf.Add(\"token\", \"user\", \"pass\", \"\", \"update\", []byte{}, []byte{})\n\n\tf.Fuzz(func(t *testing.T,\n\t\ttoken, username, password, urlSuffix, commitStatus string, seed, response []byte) {\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Write(response)\n\t\t\tio.Copy(io.Discard, r.Body)\n",
                    "rendered": {
                      "text": "\tf.Add(\"token\", \"user\", \"pass\", \"\", \"update\", []byte{}, []byte{})\n\n\tf.Fuzz(func(t *testing.T,\n\t\ttoken, username, password, urlSuffix, commitStatus string, seed, response []byte) {\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Write(response)\n\t\t\tio.Copy(io.Discard, r.Body)\n",
                      "markdown": "`\tf.Add(\"token\", \"user\", \"pass\", \"\", \"update\", []byte{}, []byte{})\n\n\tf.Fuzz(func(t *testing.T,\n\t\ttoken, username, password, urlSuffix, commitStatus string, seed, response []byte) {\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Write(response)\n\t\t\tio.Copy(io.Discard, r.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/azure_devops_fuzz_test.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 17,
                  "endLine": 75,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t}\n\t\tevent.Severity = severity\n\n\t\t_ = azureDevOps.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tevent.Severity = severity\n\n\t\t_ = azureDevOps.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\t}\n\t\tevent.Severity = severity\n\n\t\t_ = azureDevOps.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/slack_fuzz_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 11,
                  "endLine": 65,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\tevent.Severity = severity\n\t\tevent.Message = message\n\n\t\t_ = slack.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Severity = severity\n\t\tevent.Message = message\n\n\t\t_ = slack.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Severity = severity\n\t\tevent.Message = message\n\n\t\t_ = slack.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/datadog.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 46,
                  "endLine": 106,
                  "endColumn": 53,
                  "snippet": {
                    "text": "// dataDogCtx returns a context with the DataDog API key set.\n// This is one way to authenticate with the DataDog API.\nfunc (d *DataDog) dataDogCtx(ctx context.Context) context.Context {\n\treturn context.WithValue(ctx, datadog.ContextAPIKeys, map[string]datadog.APIKey{\n\t\t\"apiKeyAuth\": {\n\t\t\tKey: d.apiKey,\n\t\t},\n",
                    "rendered": {
                      "text": "// dataDogCtx returns a context with the DataDog API key set.\n// This is one way to authenticate with the DataDog API.\nfunc (d *DataDog) dataDogCtx(ctx context.Context) context.Context {\n\treturn context.WithValue(ctx, datadog.ContextAPIKeys, map[string]datadog.APIKey{\n\t\t\"apiKeyAuth\": {\n\t\t\tKey: d.apiKey,\n\t\t},\n",
                      "markdown": "`// dataDogCtx returns a context with the DataDog API key set.\n// This is one way to authenticate with the DataDog API.\nfunc (d *DataDog) dataDogCtx(ctx context.Context) context.Context {\n\treturn context.WithValue(ctx, datadog.ContextAPIKeys, map[string]datadog.APIKey{\n\t\t\"apiKeyAuth\": {\n\t\t\tKey: d.apiKey,\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/github_dispatch_fuzz_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 14,
                  "endLine": 65,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\n\t\t_ = dispatch.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\n\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\n\t\t_ = dispatch.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\n\t\tevent.Metadata[\"commit_status\"] = commitStatus\n\n\t\t_ = dispatch.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/github_fuzz_test.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 12,
                  "endLine": 68,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tevent.Severity = severity\n\t\tevent.Reason = reason\n\n\t\t_ = github.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Severity = severity\n\t\tevent.Reason = reason\n\n\t\t_ = github.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Severity = severity\n\t\tevent.Reason = reason\n\n\t\t_ = github.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/alertmanager_fuzz_test.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 18,
                  "endLine": 67,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\n\t\t_ = alertmanager.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\n\t\t_ = alertmanager.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\n\t\t_ = alertmanager.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/rocket_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\trocket, err := NewRocket(ts.URL, \"\", nil, \"\", \"\")\n\trequire.NoError(t, err)\n\n\terr = rocket.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\trocket, err := NewRocket(ts.URL, \"\", nil, \"\", \"\")\n\trequire.NoError(t, err)\n\n\terr = rocket.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\trocket, err := NewRocket(ts.URL, \"\", nil, \"\", \"\")\n\trequire.NoError(t, err)\n\n\terr = rocket.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/rocket_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 13,
                  "endLine": 46,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\trocket, err := NewRocket(ts.URL, \"\", nil, \"test\", \"test\")\n\trequire.NoError(t, err)\n\n\terr = rocket.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                    "rendered": {
                      "text": "\trocket, err := NewRocket(ts.URL, \"\", nil, \"test\", \"test\")\n\trequire.NoError(t, err)\n\n\terr = rocket.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                      "markdown": "`\trocket, err := NewRocket(ts.URL, \"\", nil, \"test\", \"test\")\n\trequire.NoError(t, err)\n\n\terr = rocket.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/telegram_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 15,
                  "endLine": 65,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\tev := testEvent()\n\tev.Metadata[\"kubernetes.io/somekey\"] = \"some.value\"\n\terr = telegram.Post(context.TODO(), ev)\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\n\tev := testEvent()\n\tev.Metadata[\"kubernetes.io/somekey\"] = \"some.value\"\n\terr = telegram.Post(context.TODO(), ev)\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\n\tev := testEvent()\n\tev.Metadata[\"kubernetes.io/somekey\"] = \"some.value\"\n\terr = telegram.Post(context.TODO(), ev)\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/rocket_fuzz_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 12,
                  "endLine": 64,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tevent.Severity = severity\n\t\tevent.Message = message\n\n\t\t_ = rocket.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Severity = severity\n\t\tevent.Message = message\n\n\t\t_ = rocket.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Severity = severity\n\t\tevent.Message = message\n\n\t\t_ = rocket.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/google_pubsub_test.go"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 15,
                  "endLine": 183,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t\t\ttopicName: tt.topicName,\n\t\t\t}\n\n\t\t\terr := topic.Post(context.Background(), tt.event)\n\t\t\tif tt.expectedErr == nil {\n\t\t\t\tg.Expect(err).To(BeNil())\n\t\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t\t\ttopicName: tt.topicName,\n\t\t\t}\n\n\t\t\terr := topic.Post(context.Background(), tt.event)\n\t\t\tif tt.expectedErr == nil {\n\t\t\t\tg.Expect(err).To(BeNil())\n\t\t\t} else {\n",
                      "markdown": "`\t\t\t\ttopicName: tt.topicName,\n\t\t\t}\n\n\t\t\terr := topic.Post(context.Background(), tt.event)\n\t\t\tif tt.expectedErr == nil {\n\t\t\t\tg.Expect(err).To(BeNil())\n\t\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/gitea.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 40,
                  "endLine": 55,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\thost, id, err := parseGitAddress(addr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed parsing Git URL: %w\", err)\n\t}\n\n\tif _, err := url.Parse(host); err != nil {\n",
                    "rendered": {
                      "text": "\n\thost, id, err := parseGitAddress(addr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed parsing Git URL: %w\", err)\n\t}\n\n\tif _, err := url.Parse(host); err != nil {\n",
                      "markdown": "`\n\thost, id, err := parseGitAddress(addr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed parsing Git URL: %w\", err)\n\t}\n\n\tif _, err := url.Parse(host); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/slack_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 12,
                  "endLine": 58,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = slack.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = slack.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\n\tevent := testEvent()\n\tevent.Metadata[eventv1.MetaCommitStatusKey] = eventv1.MetaCommitStatusUpdateValue\n\terr = slack.Post(context.TODO(), event)\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/slack_test.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 12,
                  "endLine": 48,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tslack, err := NewSlack(ts.URL, \"\", \"\", nil, \"\", \"test\")\n\trequire.NoError(t, err)\n\n\terr = slack.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                    "rendered": {
                      "text": "\tslack, err := NewSlack(ts.URL, \"\", \"\", nil, \"\", \"test\")\n\trequire.NoError(t, err)\n\n\terr = slack.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n",
                      "markdown": "`\tslack, err := NewSlack(ts.URL, \"\", \"\", nil, \"\", \"test\")\n\trequire.NoError(t, err)\n\n\terr = slack.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/matrix_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 9,
                  "endLine": 35,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\t\t\tReportingController: \"\",\n\t\t\t\tReportingInstance:   \"\",\n\t\t\t},\n\t\t\tsha1: \"37d91b4f6a1e44c6a38273b0a0fd408fade7b0f5\",\n\t\t},\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tReportingController: \"\",\n\t\t\t\tReportingInstance:   \"\",\n\t\t\t},\n\t\t\tsha1: \"37d91b4f6a1e44c6a38273b0a0fd408fade7b0f5\",\n\t\t},\n\t}\n\n",
                      "markdown": "`\t\t\t\tReportingController: \"\",\n\t\t\t\tReportingInstance:   \"\",\n\t\t\t},\n\t\t\tsha1: \"37d91b4f6a1e44c6a38273b0a0fd408fade7b0f5\",\n\t\t},\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/matrix_test.go"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 74,
                  "endLine": 13,
                  "endColumn": 78,
                  "snippet": {
                    "text": ")\n\nfunc TestSha1Sum(t *testing.T) {\n\ttimestamp, err := time.Parse(\"Jan 2, 2006 at 3:04pm (WAT)\", \"Aug 24, 2021 at 4:18pm (WAT)\")\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error getting timestamp: %s\", err)\n\t}\n",
                    "rendered": {
                      "text": ")\n\nfunc TestSha1Sum(t *testing.T) {\n\ttimestamp, err := time.Parse(\"Jan 2, 2006 at 3:04pm (WAT)\", \"Aug 24, 2021 at 4:18pm (WAT)\")\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error getting timestamp: %s\", err)\n\t}\n",
                      "markdown": "`)\n\nfunc TestSha1Sum(t *testing.T) {\n\ttimestamp, err := time.Parse(\"Jan 2, 2006 at 3:04pm (WAT)\", \"Aug 24, 2021 at 4:18pm (WAT)\")\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error getting timestamp: %s\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/matrix_test.go"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 46,
                  "snippet": {
                    "text": ")\n\nfunc TestSha1Sum(t *testing.T) {\n\ttimestamp, err := time.Parse(\"Jan 2, 2006 at 3:04pm (WAT)\", \"Aug 24, 2021 at 4:18pm (WAT)\")\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error getting timestamp: %s\", err)\n\t}\n",
                    "rendered": {
                      "text": ")\n\nfunc TestSha1Sum(t *testing.T) {\n\ttimestamp, err := time.Parse(\"Jan 2, 2006 at 3:04pm (WAT)\", \"Aug 24, 2021 at 4:18pm (WAT)\")\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error getting timestamp: %s\", err)\n\t}\n",
                      "markdown": "`)\n\nfunc TestSha1Sum(t *testing.T) {\n\ttimestamp, err := time.Parse(\"Jan 2, 2006 at 3:04pm (WAT)\", \"Aug 24, 2021 at 4:18pm (WAT)\")\n\tif err != nil {\n\t\tt.Fatalf(\"unexpected error getting timestamp: %s\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/azure_devops_test.go"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 10,
                  "endLine": 140,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\ta.Client = fakeClient\n\t\t\tassert.Nil(t, err)\n\n\t\t\terr = a.Post(context.TODO(), tt.event)\n\t\t\tassert.Nil(t, err)\n\n\t\t\twant := []git.CreateCommitStatusArgs{tt.want}\n",
                    "rendered": {
                      "text": "\t\t\ta.Client = fakeClient\n\t\t\tassert.Nil(t, err)\n\n\t\t\terr = a.Post(context.TODO(), tt.event)\n\t\t\tassert.Nil(t, err)\n\n\t\t\twant := []git.CreateCommitStatusArgs{tt.want}\n",
                      "markdown": "`\t\t\ta.Client = fakeClient\n\t\t\tassert.Nil(t, err)\n\n\t\t\terr = a.Post(context.TODO(), tt.event)\n\t\t\tassert.Nil(t, err)\n\n\t\t\twant := []git.CreateCommitStatusArgs{tt.want}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/azure_devops_test.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 25,
                  "endLine": 118,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\t\t\t\tReason: \"ApplySucceeded\",\n\t\t\t},\n\t\t\twant: git.CreateCommitStatusArgs{\n\t\t\t\tCommitId:     strPtr(\"69b59063470310ebbd88a9156325322a124e55a3\"),\n\t\t\t\tProject:      strPtr(\"bar\"),\n\t\t\t\tRepositoryId: strPtr(\"baz\"),\n\t\t\t\tGitCommitStatusToCreate: &git.GitStatus{\n",
                    "rendered": {
                      "text": "\t\t\t\tReason: \"ApplySucceeded\",\n\t\t\t},\n\t\t\twant: git.CreateCommitStatusArgs{\n\t\t\t\tCommitId:     strPtr(\"69b59063470310ebbd88a9156325322a124e55a3\"),\n\t\t\t\tProject:      strPtr(\"bar\"),\n\t\t\t\tRepositoryId: strPtr(\"baz\"),\n\t\t\t\tGitCommitStatusToCreate: &git.GitStatus{\n",
                      "markdown": "`\t\t\t\tReason: \"ApplySucceeded\",\n\t\t\t},\n\t\t\twant: git.CreateCommitStatusArgs{\n\t\t\t\tCommitId:     strPtr(\"69b59063470310ebbd88a9156325322a124e55a3\"),\n\t\t\t\tProject:      strPtr(\"bar\"),\n\t\t\t\tRepositoryId: strPtr(\"baz\"),\n\t\t\t\tGitCommitStatusToCreate: &git.GitStatus{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/azure_devops_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 25,
                  "endLine": 90,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\t\t\t\tReason: \"ApplySucceeded\",\n\t\t\t},\n\t\t\twant: git.CreateCommitStatusArgs{\n\t\t\t\tCommitId:     strPtr(\"69b59063470310ebbd88a9156325322a124e55a3\"),\n\t\t\t\tProject:      strPtr(\"bar\"),\n\t\t\t\tRepositoryId: strPtr(\"baz\"),\n\t\t\t\tGitCommitStatusToCreate: &git.GitStatus{\n",
                    "rendered": {
                      "text": "\t\t\t\tReason: \"ApplySucceeded\",\n\t\t\t},\n\t\t\twant: git.CreateCommitStatusArgs{\n\t\t\t\tCommitId:     strPtr(\"69b59063470310ebbd88a9156325322a124e55a3\"),\n\t\t\t\tProject:      strPtr(\"bar\"),\n\t\t\t\tRepositoryId: strPtr(\"baz\"),\n\t\t\t\tGitCommitStatusToCreate: &git.GitStatus{\n",
                      "markdown": "`\t\t\t\tReason: \"ApplySucceeded\",\n\t\t\t},\n\t\t\twant: git.CreateCommitStatusArgs{\n\t\t\t\tCommitId:     strPtr(\"69b59063470310ebbd88a9156325322a124e55a3\"),\n\t\t\t\tProject:      strPtr(\"bar\"),\n\t\t\t\tRepositoryId: strPtr(\"baz\"),\n\t\t\t\tGitCommitStatusToCreate: &git.GitStatus{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/main.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 77,
                  "endLine": 99,
                  "endColumn": 84,
                  "snippet": {
                    "text": "9292\", \"The address the webhook receiver endpoint binds to.\")\n\tflag.IntVar(&concurrent, \"concurrent\", 4, \"The number of concurrent notification reconciles.\")\n\tflag.BoolVar(&watchAllNamespaces, \"watch-all-namespaces\", true,\n\t\t\"Watch for custom resources in all namespaces, if set to false it will only watch the runtime namespace.\")\n\tflag.DurationVar(&rateLimitInterval, \"rate-limit-interval\", 5*time.Minute, \"Interval in which rate limit has effect.\")\n\tflag.BoolVar(&exportHTTPPathMetrics, \"export-http-path-metrics\", false, \"When enabled, the requests full path is included in the HTTP server metrics (risk",
                    "rendered": {
                      "text": "9292\", \"The address the webhook receiver endpoint binds to.\")\n\tflag.IntVar(&concurrent, \"concurrent\", 4, \"The number of concurrent notification reconciles.\")\n\tflag.BoolVar(&watchAllNamespaces, \"watch-all-namespaces\", true,\n\t\t\"Watch for custom resources in all namespaces, if set to false it will only watch the runtime namespace.\")\n\tflag.DurationVar(&rateLimitInterval, \"rate-limit-interval\", 5*time.Minute, \"Interval in which rate limit has effect.\")\n\tflag.BoolVar(&exportHTTPPathMetrics, \"export-http-path-metrics\", false, \"When enabled, the requests full path is included in the HTTP server metrics (risk",
                      "markdown": "`9292\", \"The address the webhook receiver endpoint binds to.\")\n\tflag.IntVar(&concurrent, \"concurrent\", 4, \"The number of concurrent notification reconciles.\")\n\tflag.BoolVar(&watchAllNamespaces, \"watch-all-namespaces\", true,\n\t\t\"Watch for custom resources in all namespaces, if set to false it will only watch the runtime namespace.\")\n\tflag.DurationVar(&rateLimitInterval, \"rate-limit-interval\", 5*time.Minute, \"Interval in which rate limit has effect.\")\n\tflag.BoolVar(&exportHTTPPathMetrics, \"export-http-path-metrics\", false, \"When enabled, the requests full path is included in the HTTP server metrics (risk`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Dockerfile"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 30,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY main.go main.go\nCOPY internal/ internal/\n\n# build\nENV CGO_ENABLED=0\nRUN xx-go build -trimpath -a -o notification-controller main.go\n\nFROM alpine:3.19\n",
                    "rendered": {
                      "text": "COPY main.go main.go\nCOPY internal/ internal/\n\n# build\nENV CGO_ENABLED=0\nRUN xx-go build -trimpath -a -o notification-controller main.go\n\nFROM alpine:3.19\n",
                      "markdown": "`COPY main.go main.go\nCOPY internal/ internal/\n\n# build\nENV CGO_ENABLED=0\nRUN xx-go build -trimpath -a -o notification-controller main.go\n\nFROM alpine:3.19\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/MAINTAINERS"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 21,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "The maintainers are generally available in Slack at\nhttps://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\nas listed in\n",
                    "rendered": {
                      "text": "The maintainers are generally available in Slack at\nhttps://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\nas listed in\n",
                      "markdown": "`The maintainers are generally available in Slack at\nhttps://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\nas listed in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/MAINTAINERS"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 48,
                  "endLine": 2,
                  "snippet": {
                    "text": "The maintainers are generally available in Slack at\nhttps://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\n",
                    "rendered": {
                      "text": "The maintainers are generally available in Slack at\nhttps://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\n",
                      "markdown": "`The maintainers are generally available in Slack at\nhttps://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/MAINTAINERS"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 53,
                  "endLine": 5,
                  "endColumn": 58,
                  "snippet": {
                    "text": "https://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\nas listed in\n\n    https://github.com/fluxcd/flux2/blob/main/MAINTAINERS\n",
                    "rendered": {
                      "text": "https://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\nas listed in\n\n    https://github.com/fluxcd/flux2/blob/main/MAINTAINERS\n",
                      "markdown": "`https://cloud-native.slack.com in #flux (https://cloud-native.slack.com/messages/CLAJ40HV3)\n(obtain an invitation at https://slack.cncf.io/).\n\nThis project shares maintainers from the main Flux v2 git repository,\nas listed in\n\n    https://github.com/fluxcd/flux2/blob/main/MAINTAINERS\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 26,
                  "endLine": 465,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                type: string\n              interval:\n                description: |-\n                  Interval at which to reconcile the Provider with its Secret references.\n                  Deprecated and not used in v1beta3.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                    "rendered": {
                      "text": "                type: string\n              interval:\n                description: |-\n                  Interval at which to reconcile the Provider with its Secret references.\n                  Deprecated and not used in v1beta3.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                      "markdown": "`                type: string\n              interval:\n                description: |-\n                  Interval at which to reconcile the Provider with its Secret references.\n                  Deprecated and not used in v1beta3.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 37,
                  "endLine": 263,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                maxLength: 2048\n                type: string\n              interval:\n                description: Interval at which to reconcile the Provider with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                    "rendered": {
                      "text": "                maxLength: 2048\n                type: string\n              interval:\n                description: Interval at which to reconcile the Provider with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                      "markdown": "`                maxLength: 2048\n                type: string\n              interval:\n                description: Interval at which to reconcile the Provider with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 28,
                  "endLine": 491,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                  events handling for this Provider.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the Provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n",
                    "rendered": {
                      "text": "                  events handling for this Provider.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the Provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n",
                      "markdown": "`                  events handling for this Provider.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the Provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 115,
                  "endLine": 343,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 54,
                  "endLine": 342,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 28,
                  "endLine": 289,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                  events handling for this Provider.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the Provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n",
                    "rendered": {
                      "text": "                  events handling for this Provider.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the Provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n",
                      "markdown": "`                  events handling for this Provider.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the Provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 115,
                  "endLine": 140,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 54,
                  "endLine": 139,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_providers.yaml"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 28,
                  "endLine": 93,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                  Defaults to false.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n",
                    "rendered": {
                      "text": "                  Defaults to false.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n",
                      "markdown": "`                  Defaults to false.\n                type: boolean\n              timeout:\n                description: Timeout for sending alerts to the provider.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m))+$\n                type: string\n              type:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 43,
                  "endLine": 497,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                    "rendered": {
                      "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                      "markdown": "`                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 37,
                  "endLine": 488,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                  type: string\n                type: array\n              interval:\n                description: Interval at which to reconcile the Receiver with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                    "rendered": {
                      "text": "                  type: string\n                type: array\n              interval:\n                description: Interval at which to reconcile the Receiver with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                      "markdown": "`                  type: string\n                type: array\n              interval:\n                description: Interval at which to reconcile the Receiver with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 43,
                  "endLine": 287,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                    "rendered": {
                      "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                      "markdown": "`                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 43,
                  "endLine": 70,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                    "rendered": {
                      "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                      "markdown": "`                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 37,
                  "endLine": 61,
                  "endColumn": 41,
                  "snippet": {
                    "text": "                type: array\n              interval:\n                default: 10m\n                description: Interval at which to reconcile the Receiver with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                    "rendered": {
                      "text": "                type: array\n              interval:\n                default: 10m\n                description: Interval at which to reconcile the Receiver with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n",
                      "markdown": "`                type: array\n              interval:\n                default: 10m\n                description: Interval at which to reconcile the Receiver with its\n                  Secret references.\n                pattern: ^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$\n                type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 115,
                  "endLine": 594,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 54,
                  "endLine": 593,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 115,
                  "endLine": 380,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 54,
                  "endLine": 379,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 115,
                  "endLine": 168,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_receivers.yaml"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 54,
                  "endLine": 167,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 43,
                  "endLine": 490,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                    "rendered": {
                      "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                      "markdown": "`                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 43,
                  "endLine": 273,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                    "rendered": {
                      "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                      "markdown": "`                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 43,
                  "endLine": 69,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                    "rendered": {
                      "text": "                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n",
                      "markdown": "`                items:\n                  description: |-\n                    CrossNamespaceObjectReference contains enough information to let you locate the\n                    typed referenced object at cluster level\n                  properties:\n                    apiVersion:\n                      description: API version of the referent\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 115,
                  "endLine": 370,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 54,
                  "endLine": 369,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 115,
                  "endLine": 151,
                  "endColumn": 121,
                  "snippet": {
                    "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                    "rendered": {
                      "text": "                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n",
                      "markdown": "`                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n                    message:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/crd/bases/notification.toolkit.fluxcd.io_alerts.yaml"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 54,
                  "endLine": 150,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                    "rendered": {
                      "text": "                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n",
                      "markdown": "`                  properties:\n                    lastTransitionTime:\n                      description: |-\n                        lastTransitionTime is the last time the condition transitioned from one status to another.\n                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n                      format: date-time\n                      type: string\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/provider_editor_role.yaml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 18,
                  "snippet": {
                    "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                    "rendered": {
                      "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                      "markdown": "`  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/provider_editor_role.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 19,
                  "snippet": {
                    "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - providers/status\n",
                    "rendered": {
                      "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - providers/status\n",
                      "markdown": "`  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - providers/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/provider_viewer_role.yaml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 15,
                  "snippet": {
                    "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - providers/status\n",
                    "rendered": {
                      "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - providers/status\n",
                      "markdown": "`  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - providers/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/receiver_viewer_role.yaml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 15,
                  "snippet": {
                    "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n",
                    "rendered": {
                      "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n",
                      "markdown": "`  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/alert_editor_role.yaml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 18,
                  "snippet": {
                    "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                    "rendered": {
                      "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                      "markdown": "`  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/alert_editor_role.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 19,
                  "snippet": {
                    "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - alerts/status\n",
                    "rendered": {
                      "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - alerts/status\n",
                      "markdown": "`  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - alerts/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "endLine": 72,
                  "snippet": {
                    "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n",
                    "rendered": {
                      "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n",
                      "markdown": "`  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "endLine": 60,
                  "snippet": {
                    "text": "  verbs:\n  - get\n  - patch\n  - update\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n  - buckets\n",
                    "rendered": {
                      "text": "  verbs:\n  - get\n  - patch\n  - update\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n  - buckets\n",
                      "markdown": "`  verbs:\n  - get\n  - patch\n  - update\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n  - buckets\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 3,
                  "endLine": 51,
                  "snippet": {
                    "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                    "rendered": {
                      "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                      "markdown": "`  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 31,
                  "snippet": {
                    "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n",
                    "rendered": {
                      "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n",
                      "markdown": "`  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 3,
                  "endLine": 73,
                  "snippet": {
                    "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n  - buckets/status\n",
                    "rendered": {
                      "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n  - buckets/status\n",
                      "markdown": "`  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - source.fluxcd.io\n  resources:\n  - buckets/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 3,
                  "endLine": 52,
                  "snippet": {
                    "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n",
                    "rendered": {
                      "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n",
                      "markdown": "`  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 3,
                  "endLine": 32,
                  "snippet": {
                    "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n  - imagerepositories/status\n",
                    "rendered": {
                      "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n  - imagerepositories/status\n",
                      "markdown": "`  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n  - imagerepositories/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/role.yaml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 22,
                  "snippet": {
                    "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n  - imagerepositories\n",
                    "rendered": {
                      "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n  - imagerepositories\n",
                      "markdown": "`  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - image.fluxcd.io\n  resources:\n  - imagerepositories\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/leader_election_role.yaml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 7,
                  "endLine": 43,
                  "snippet": {
                    "text": "      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n",
                    "rendered": {
                      "text": "      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n",
                      "markdown": "`      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/leader_election_role.yaml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "endLine": 26,
                  "snippet": {
                    "text": "      - configmaps/status\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"\"\n    resources:\n",
                    "rendered": {
                      "text": "      - configmaps/status\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"\"\n    resources:\n",
                      "markdown": "`      - configmaps/status\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"\"\n    resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/leader_election_role.yaml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 7,
                  "endLine": 17,
                  "snippet": {
                    "text": "      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n  - apiGroups:\n      - \"\"\n",
                    "rendered": {
                      "text": "      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n  - apiGroups:\n      - \"\"\n",
                      "markdown": "`      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n  - apiGroups:\n      - \"\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/leader_election_role.yaml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 7,
                  "endLine": 41,
                  "snippet": {
                    "text": "    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n",
                    "rendered": {
                      "text": "    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n",
                      "markdown": "`    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/leader_election_role.yaml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 7,
                  "endLine": 15,
                  "snippet": {
                    "text": "    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n",
                    "rendered": {
                      "text": "    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n",
                      "markdown": "`    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/receiver_editor_role.yaml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 18,
                  "snippet": {
                    "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                    "rendered": {
                      "text": "  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n",
                      "markdown": "`  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/receiver_editor_role.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 19,
                  "snippet": {
                    "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n",
                    "rendered": {
                      "text": "  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n",
                      "markdown": "`  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - receivers/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/config/rbac/alert_viewer_role.yaml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 15,
                  "snippet": {
                    "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - alerts/status\n",
                    "rendered": {
                      "text": "  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - alerts/status\n",
                      "markdown": "`  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - notification.toolkit.fluxcd.io\n  resources:\n  - alerts/status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta2/notification.md"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 11,
                  "endLine": 1093,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta2/notification.md"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 11,
                  "endLine": 874,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.</p>\n</td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta2/notification.md"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 23,
                  "endLine": 760,
                  "endColumn": 27,
                  "snippet": {
                    "text": "<h3 id=\"notification.toolkit.fluxcd.io/v1beta2.CrossNamespaceObjectReference\">CrossNamespaceObjectReference\n</h3>\n<p>CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level</p>\n<div class=\"md-typeset__scrollwrap\">\n<div class=\"md-typeset__table\">\n<table>\n",
                    "rendered": {
                      "text": "<h3 id=\"notification.toolkit.fluxcd.io/v1beta2.CrossNamespaceObjectReference\">CrossNamespaceObjectReference\n</h3>\n<p>CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level</p>\n<div class=\"md-typeset__scrollwrap\">\n<div class=\"md-typeset__table\">\n<table>\n",
                      "markdown": "`<h3 id=\"notification.toolkit.fluxcd.io/v1beta2.CrossNamespaceObjectReference\">CrossNamespaceObjectReference\n</h3>\n<p>CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level</p>\n<div class=\"md-typeset__scrollwrap\">\n<div class=\"md-typeset__table\">\n<table>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta2/notification.md"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 11,
                  "endLine": 492,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta2/notification.md"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 11,
                  "endLine": 280,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.</p>\n</td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1/notification.md"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 11,
                  "endLine": 293,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1/notification.md"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 23,
                  "endLine": 176,
                  "endColumn": 27,
                  "snippet": {
                    "text": "<a href=\"#notification.toolkit.fluxcd.io/v1.ReceiverSpec\">ReceiverSpec</a>)\n</p>\n<p>CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level</p>\n<div class=\"md-typeset__scrollwrap\">\n<div class=\"md-typeset__table\">\n<table>\n",
                    "rendered": {
                      "text": "<a href=\"#notification.toolkit.fluxcd.io/v1.ReceiverSpec\">ReceiverSpec</a>)\n</p>\n<p>CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level</p>\n<div class=\"md-typeset__scrollwrap\">\n<div class=\"md-typeset__table\">\n<table>\n",
                      "markdown": "`<a href=\"#notification.toolkit.fluxcd.io/v1.ReceiverSpec\">ReceiverSpec</a>)\n</p>\n<p>CrossNamespaceObjectReference contains enough information to let you locate the\ntyped referenced object at cluster level</p>\n<div class=\"md-typeset__scrollwrap\">\n<div class=\"md-typeset__table\">\n<table>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1/notification.md"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 11,
                  "endLine": 94,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Receiver with its Secret references.</p>\n</td>\n</tr>\n<tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta3/notification.md"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 11,
                  "endLine": 554,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.</p>\n</td>\n</tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.</p>\n</td>\n</tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.</p>\n</td>\n</tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/api/v1beta3/notification.md"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 11,
                  "endLine": 266,
                  "endColumn": 15,
                  "snippet": {
                    "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.</p>\n</td>\n</tr>\n",
                    "rendered": {
                      "text": "</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.</p>\n</td>\n</tr>\n",
                      "markdown": "`</td>\n<td>\n<em>(Optional)</em>\n<p>Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.</p>\n</td>\n</tr>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1alpha1/events.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 12,
                  "endLine": 19,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t// +required\n\tSeverity string `json:\"severity\"`\n\n\t// The time at which this event was recorded.\n\t// +required\n\tTimestamp metav1.Time `json:\"timestamp\"`\n\n",
                    "rendered": {
                      "text": "\t// +required\n\tSeverity string `json:\"severity\"`\n\n\t// The time at which this event was recorded.\n\t// +required\n\tTimestamp metav1.Time `json:\"timestamp\"`\n\n",
                      "markdown": "`\t// +required\n\tSeverity string `json:\"severity\"`\n\n\t// The time at which this event was recorded.\n\t// +required\n\tTimestamp metav1.Time `json:\"timestamp\"`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1alpha1/events.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "endLine": 19,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t// +required\n\tSeverity string `json:\"severity\"`\n\n\t// The time at which this event was recorded.\n\t// +required\n\tTimestamp metav1.Time `json:\"timestamp\"`\n\n",
                    "rendered": {
                      "text": "\t// +required\n\tSeverity string `json:\"severity\"`\n\n\t// The time at which this event was recorded.\n\t// +required\n\tTimestamp metav1.Time `json:\"timestamp\"`\n\n",
                      "markdown": "`\t// +required\n\tSeverity string `json:\"severity\"`\n\n\t// The time at which this event was recorded.\n\t// +required\n\tTimestamp metav1.Time `json:\"timestamp\"`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1alpha1/providers.md"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 4,
                  "endLine": 105,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nThe GitHub/GitLab provider is a special kind of notification provider\nthat based on the state of a Kustomization resource,\nwill update the commit status for the currently reconciled commit id.\n\n```yaml\napiVersion: notification.toolkit.fluxcd.io/v1alpha1\n",
                    "rendered": {
                      "text": "\nThe GitHub/GitLab provider is a special kind of notification provider\nthat based on the state of a Kustomization resource,\nwill update the commit status for the currently reconciled commit id.\n\n```yaml\napiVersion: notification.toolkit.fluxcd.io/v1alpha1\n",
                      "markdown": "`\nThe GitHub/GitLab provider is a special kind of notification provider\nthat based on the state of a Kustomization resource,\nwill update the commit status for the currently reconciled commit id.\n\n```yaml\napiVersion: notification.toolkit.fluxcd.io/v1alpha1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1alpha1/providers.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 3,
                  "endLine": 101,
                  "endColumn": 8,
                  "snippet": {
                    "text": "When type `generic` is specified, the notification controller will post the\nincoming [event](event.md) in JSON format to the webhook address.\n\n### Git commit status\n\nThe GitHub/GitLab provider is a special kind of notification provider\nthat based on the state of a Kustomization resource,\n",
                    "rendered": {
                      "text": "When type `generic` is specified, the notification controller will post the\nincoming [event](event.md) in JSON format to the webhook address.\n\n### Git commit status\n\nThe GitHub/GitLab provider is a special kind of notification provider\nthat based on the state of a Kustomization resource,\n",
                      "markdown": "`When type `generic` is specified, the notification controller will post the\nincoming [event](event.md) in JSON format to the webhook address.\n\n### Git commit status\n\nThe GitHub/GitLab provider is a special kind of notification provider\nthat based on the state of a Kustomization resource,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/docs/spec/v1alpha1/providers.md"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 42,
                  "endColumn": 4,
                  "snippet": {
                    "text": "* Microsoft Teams\n* Rocket\n* Generic webhook\n\nGit commit status providers:\n\n* GitHub\n* GitLab\n",
                    "rendered": {
                      "text": "* Microsoft Teams\n* Rocket\n* Generic webhook\n\nGit commit status providers:\n\n* GitHub\n* GitLab\n",
                      "markdown": "`* Microsoft Teams\n* Rocket\n* Generic webhook\n\nGit commit status providers:\n\n* GitHub\n* GitLab\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/api/v1beta3/provider_types.go"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// Proxy the HTTP/S address of the proxy server.\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://.*$\"\n",
                    "rendered": {
                      "text": "\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// Proxy the HTTP/S address of the proxy server.\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://.*$\"\n",
                      "markdown": "`\t// +kubebuilder:validation:Type=string\n\t// +kubebuilder:validation:Pattern=\"^([0-9]+(\\\\.[0-9]+)?(ms|s|m))+$\"\n\t// +optional\n\tTimeout *metav1.Duration `json:\"timeout,omitempty\"`\n\n\t// Proxy the HTTP/S address of the proxy server.\n\t// +kubebuilder:validation:Pattern=\"^(http|https)://.*$\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 19,
                  "endLine": 116,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, alertKey, alert); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                    "rendered": {
                      "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, alertKey, alert); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                      "markdown": "`\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, alertKey, alert); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 15,
                  "endLine": 109,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\talert.ObjectMeta.Finalizers = []string{apiv1.NotificationFinalizer}\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, alertKey, alert)\n\t\treturn controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\talert.ObjectMeta.Finalizers = []string{apiv1.NotificationFinalizer}\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, alertKey, alert)\n\t\treturn controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout).Should(BeTrue())\n\n",
                      "markdown": "`\talert.ObjectMeta.Finalizers = []string{apiv1.NotificationFinalizer}\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, alertKey, alert)\n\t\treturn controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 15,
                  "endLine": 97,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, alertKey, alert)\n\t\treturn alert.Spec.Suspend == true\n\t}, timeout).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, alertKey, alert)\n\t\treturn alert.Spec.Suspend == true\n\t}, timeout).Should(BeTrue())\n\n",
                      "markdown": "`\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\t_ = k8sClient.Get(ctx, alertKey, alert)\n\t\treturn alert.Spec.Suspend == true\n\t}, timeout).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 13,
                  "endLine": 78,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tg.Expect(testEnv.Create(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(testEnv.Create(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(testEnv.Create(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 16,
                  "endLine": 116,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, alertKey, alert); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                    "rendered": {
                      "text": "\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, alertKey, alert); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n",
                      "markdown": "`\t// Delete the object and verify.\n\tg.Expect(testEnv.Delete(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n\t\tif err := testEnv.Get(ctx, alertKey, alert); err != nil {\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}\n\t\treturn false\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 10,
                  "endLine": 78,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 10,
                  "endLine": 66,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tg.Expect(testEnv.Create(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tg.Expect(testEnv.Create(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tg.Expect(testEnv.Create(ctx, alert)).ToNot(HaveOccurred())\n\n\tg.Eventually(func() bool {\n\t\t_ = testEnv.Get(ctx, alertKey, alert)\n\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "endLine": 92,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n",
                      "markdown": "`\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n\t// Suspend the alert to prevent finalizer from getting removed.\n\t// Ensure only flux finalizer is set to allow the object to be garbage\n\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n",
                    "rendered": {
                      "text": "\n\t// Suspend the alert to prevent finalizer from getting removed.\n\t// Ensure only flux finalizer is set to allow the object to be garbage\n\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n",
                      "markdown": "`\n\t// Suspend the alert to prevent finalizer from getting removed.\n\t// Ensure only flux finalizer is set to allow the object to be garbage\n\t// collected at the end.\n\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 20,
                  "endLine": 82,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at delete.\n\n\tpatchHelper, err = patch.NewHelper(alert, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at delete.\n\n\tpatchHelper, err = patch.NewHelper(alert, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                      "markdown": "`\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at delete.\n\n\tpatchHelper, err = patch.NewHelper(alert, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 20,
                  "endLine": 70,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at update.\n\n\tpatchHelper, err := patch.NewHelper(alert, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at update.\n\n\tpatchHelper, err := patch.NewHelper(alert, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                      "markdown": "`\t\treturn !controllerutil.ContainsFinalizer(alert, apiv1.NotificationFinalizer)\n\t}, timeout, time.Second).Should(BeTrue())\n\n\t// Remove finalizer at update.\n\n\tpatchHelper, err := patch.NewHelper(alert, testEnv.Client)\n\tg.Expect(err).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 20,
                  "endLine": 56,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t}\n\talertKey := client.ObjectKeyFromObject(alert)\n\n\t// Remove finalizer at create.\n\n\talert.ObjectMeta.Finalizers = append(alert.ObjectMeta.Finalizers, \"foo.bar\", apiv1.NotificationFinalizer)\n\talert.Spec = apiv1beta3.AlertSpec{\n",
                    "rendered": {
                      "text": "\t}\n\talertKey := client.ObjectKeyFromObject(alert)\n\n\t// Remove finalizer at create.\n\n\talert.ObjectMeta.Finalizers = append(alert.ObjectMeta.Finalizers, \"foo.bar\", apiv1.NotificationFinalizer)\n\talert.Spec = apiv1beta3.AlertSpec{\n",
                      "markdown": "`\t}\n\talertKey := client.ObjectKeyFromObject(alert)\n\n\t// Remove finalizer at create.\n\n\talert.ObjectMeta.Finalizers = append(alert.ObjectMeta.Finalizers, \"foo.bar\", apiv1.NotificationFinalizer)\n\talert.Spec = apiv1beta3.AlertSpec{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 3,
                  "endLine": 93,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n",
                    "rendered": {
                      "text": "\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n",
                      "markdown": "`\t// NOTE: Suspending and updating finalizers are done separately here as\n\t// doing them in a single patch results in flaky test where the finalizer\n\t// update doesn't gets registered with the kube-apiserver, resulting in\n\t// timeout waiting for finalizer to appear on the object below.\n\talert.Spec.Suspend = true\n\tg.Expect(patchHelper.Patch(ctx, alert)).ToNot(HaveOccurred())\n\tg.Eventually(func() bool {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/alert_controller_test.go"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "endColumn": 9,
                  "snippet": {
                    "text": "func TestAlertReconciler(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 10 * time.Second\n\n\ttestns, err := testEnv.CreateNamespace(ctx, \"alert-test\")\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                    "rendered": {
                      "text": "func TestAlertReconciler(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 10 * time.Second\n\n\ttestns, err := testEnv.CreateNamespace(ctx, \"alert-test\")\n\tg.Expect(err).ToNot(HaveOccurred())\n",
                      "markdown": "`func TestAlertReconciler(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 10 * time.Second\n\n\ttestns, err := testEnv.CreateNamespace(ctx, \"alert-test\")\n\tg.Expect(err).ToNot(HaveOccurred())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 21,
                  "endLine": 351,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tg.Eventually(func() bool {\n\t\t\tobj := &unstructured.Unstructured{}\n\t\t\tobj.SetGroupVersionKind(object.GroupVersionKind())\n\t\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(object), obj)).To(Succeed())\n\t\t\tv, ok := obj.GetAnnotations()[meta.ReconcileRequestAnnotation]\n\t\t\treturn ok && v != \"\"\n\t\t}, timeout, time.Second).Should(BeTrue())\n",
                    "rendered": {
                      "text": "\t\tg.Eventually(func() bool {\n\t\t\tobj := &unstructured.Unstructured{}\n\t\t\tobj.SetGroupVersionKind(object.GroupVersionKind())\n\t\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(object), obj)).To(Succeed())\n\t\t\tv, ok := obj.GetAnnotations()[meta.ReconcileRequestAnnotation]\n\t\t\treturn ok && v != \"\"\n\t\t}, timeout, time.Second).Should(BeTrue())\n",
                      "markdown": "`\t\tg.Eventually(func() bool {\n\t\t\tobj := &unstructured.Unstructured{}\n\t\t\tobj.SetGroupVersionKind(object.GroupVersionKind())\n\t\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(object), obj)).To(Succeed())\n\t\t\tv, ok := obj.GetAnnotations()[meta.ReconcileRequestAnnotation]\n\t\t\treturn ok && v != \"\"\n\t\t}, timeout, time.Second).Should(BeTrue())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 18,
                  "endLine": 344,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n\tt.Run(\"handles event\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tres, err := http.Post(\"http://localhost:56788/\"+address, \"application/json\", nil)\n\t\tg.Expect(err).ToNot(HaveOccurred())\n\t\tg.Expect(res.StatusCode).To(Equal(http.StatusOK))\n\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"handles event\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tres, err := http.Post(\"http://localhost:56788/\"+address, \"application/json\", nil)\n\t\tg.Expect(err).ToNot(HaveOccurred())\n\t\tg.Expect(res.StatusCode).To(Equal(http.StatusOK))\n\n",
                      "markdown": "`\n\tt.Run(\"handles event\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tres, err := http.Post(\"http://localhost:56788/\"+address, \"application/json\", nil)\n\t\tg.Expect(err).ToNot(HaveOccurred())\n\t\tg.Expect(res.StatusCode).To(Equal(http.StatusOK))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 16,
                  "endLine": 334,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.ObservedGeneration == resultR.Generation\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.ObservedGeneration == resultR.Generation\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.ObservedGeneration == resultR.Generation\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 20,
                  "endLine": 328,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tt.Run(\"doesn't update the URL on spec updates\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\tresultR.Spec.Events = []string{\"ping\", \"push\"}\n\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n",
                    "rendered": {
                      "text": "\tt.Run(\"doesn't update the URL on spec updates\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\tresultR.Spec.Events = []string{\"ping\", \"push\"}\n\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n",
                      "markdown": "`\tt.Run(\"doesn't update the URL on spec updates\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\tresultR.Spec.Events = []string{\"ping\", \"push\"}\n\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 16,
                  "endLine": 317,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tt.Run(\"generates URL when ready\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\tt.Run(\"generates URL when ready\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\tt.Run(\"generates URL when ready\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 19,
                  "endLine": 229,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tg.Expect(k8sClient.Delete(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\terr := k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\t})\n",
                    "rendered": {
                      "text": "\t\tg.Expect(k8sClient.Delete(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\terr := k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\t})\n",
                      "markdown": "`\t\tg.Expect(k8sClient.Delete(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\terr := k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn apierrors.IsNotFound(err)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 16,
                  "endLine": 222,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Spec.Suspend == true\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Spec.Suspend == true\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Spec.Suspend == true\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 20,
                  "endLine": 216,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tt.Run(\"finalizes suspended object\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\tresultR.Spec.Suspend = true\n\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n",
                    "rendered": {
                      "text": "\tt.Run(\"finalizes suspended object\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\tresultR.Spec.Suspend = true\n\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n",
                      "markdown": "`\tt.Run(\"finalizes suspended object\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\tresultR.Spec.Suspend = true\n\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 16,
                  "endLine": 208,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.LastHandledReconcileAt == reconcileRequestAt\n\t\t}, timeout, time.Second).Should(BeTrue())\n\t})\n",
                    "rendered": {
                      "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.LastHandledReconcileAt == reconcileRequestAt\n\t\t}, timeout, time.Second).Should(BeTrue())\n\t})\n",
                      "markdown": "`\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.LastHandledReconcileAt == reconcileRequestAt\n\t\t}, timeout, time.Second).Should(BeTrue())\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tt.Run(\"handles reconcileAt\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\treconcileRequestAt := metav1.Now().String()\n\t\tresultR.SetAnnotations(map[string]string{\n",
                    "rendered": {
                      "text": "\tt.Run(\"handles reconcileAt\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\treconcileRequestAt := metav1.Now().String()\n\t\tresultR.SetAnnotations(map[string]string{\n",
                      "markdown": "`\tt.Run(\"handles reconcileAt\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\treconcileRequestAt := metav1.Now().String()\n\t\tresultR.SetAnnotations(map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 16,
                  "endLine": 187,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tg.Expect(k8sClient.Create(context.Background(), newSecret)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\t\tg.Expect(k8sClient.Create(context.Background(), newSecret)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\t\tg.Expect(k8sClient.Create(context.Background(), newSecret)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 16,
                  "endLine": 161,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn !conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn !conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\t\tg.Expect(k8sClient.Update(context.Background(), resultR)).To(Succeed())\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn !conditions.IsReady(resultR)\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 20,
                  "endLine": 152,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\t\tg.Expect(k8sClient.Delete(context.Background(), secret)).To(Succeed())\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\treconcileRequestAt := metav1.Now().String()\n\t\tresultR.SetAnnotations(map[string]string{\n",
                    "rendered": {
                      "text": "\n\t\tg.Expect(k8sClient.Delete(context.Background(), secret)).To(Succeed())\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\treconcileRequestAt := metav1.Now().String()\n\t\tresultR.SetAnnotations(map[string]string{\n",
                      "markdown": "`\n\t\tg.Expect(k8sClient.Delete(context.Background(), secret)).To(Succeed())\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n\n\t\treconcileRequestAt := metav1.Now().String()\n\t\tresultR.SetAnnotations(map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 16,
                  "endLine": 135,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tg := NewWithT(t)\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.ObservedGeneration == resultR.Generation\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                    "rendered": {
                      "text": "\t\tg := NewWithT(t)\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.ObservedGeneration == resultR.Generation\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n",
                      "markdown": "`\t\tg := NewWithT(t)\n\n\t\tg.Eventually(func() bool {\n\t\t\t_ = k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)\n\t\t\treturn resultR.Status.ObservedGeneration == resultR.Generation\n\t\t}, timeout, time.Second).Should(BeTrue())\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 14,
                  "endLine": 277,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      secretKey.Name,\n\t\t\tNamespace: secretKey.Namespace,\n\t\t},\n\t\tStringData: map[string]string{\n\t\t\t\"token\": token,\n",
                    "rendered": {
                      "text": "\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      secretKey.Name,\n\t\t\tNamespace: secretKey.Namespace,\n\t\t},\n\t\tStringData: map[string]string{\n\t\t\t\"token\": token,\n",
                      "markdown": "`\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      secretKey.Name,\n\t\t\tNamespace: secretKey.Namespace,\n\t\t},\n\t\tStringData: map[string]string{\n\t\t\t\"token\": token,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 14,
                  "endLine": 276,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\t\tAPIVersion: \"v1\",\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      secretKey.Name,\n\t\t\tNamespace: secretKey.Namespace,\n\t\t},\n\t\tStringData: map[string]string{\n",
                    "rendered": {
                      "text": "\t\t\tAPIVersion: \"v1\",\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      secretKey.Name,\n\t\t\tNamespace: secretKey.Namespace,\n\t\t},\n\t\tStringData: map[string]string{\n",
                      "markdown": "`\t\t\tAPIVersion: \"v1\",\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      secretKey.Name,\n\t\t\tNamespace: secretKey.Namespace,\n\t\t},\n\t\tStringData: map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 1,
                  "endLine": 265,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tg.Expect(err).ToNot(HaveOccurred())\n\n\ttoken := \"test-token\"\n\tsecretKey := types.NamespacedName{\n\t\tNamespace: id,\n\t\tName:      \"receiver-secret\",\n\t}\n",
                    "rendered": {
                      "text": "\tg.Expect(err).ToNot(HaveOccurred())\n\n\ttoken := \"test-token\"\n\tsecretKey := types.NamespacedName{\n\t\tNamespace: id,\n\t\tName:      \"receiver-secret\",\n\t}\n",
                      "markdown": "`\tg.Expect(err).ToNot(HaveOccurred())\n\n\ttoken := \"test-token\"\n\tsecretKey := types.NamespacedName{\n\t\tNamespace: id,\n\t\tName:      \"receiver-secret\",\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 77,
                  "endLine": 242,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\n\t// Use the client from the manager as the server handler needs to list objects from the cache\n\t// which the \"live\" k8s client does not have access to.\n\treceiverServer := server.NewReceiverServer(\"127.0.0.1:56788\", logf.Log, testEnv.GetClient(), true)\n\treceiverMdlw := middleware.New(middleware.Config{\n\t\tRecorder: prommetrics.NewRecorder(prommetrics.Config{\n\t\t\tPrefix: \"gotk_receiver\",\n",
                    "rendered": {
                      "text": "\n\t// Use the client from the manager as the server handler needs to list objects from the cache\n\t// which the \"live\" k8s client does not have access to.\n\treceiverServer := server.NewReceiverServer(\"127.0.0.1:56788\", logf.Log, testEnv.GetClient(), true)\n\treceiverMdlw := middleware.New(middleware.Config{\n\t\tRecorder: prommetrics.NewRecorder(prommetrics.Config{\n\t\t\tPrefix: \"gotk_receiver\",\n",
                      "markdown": "`\n\t// Use the client from the manager as the server handler needs to list objects from the cache\n\t// which the \"live\" k8s client does not have access to.\n\treceiverServer := server.NewReceiverServer(\"127.0.0.1:56788\", logf.Log, testEnv.GetClient(), true)\n\treceiverMdlw := middleware.New(middleware.Config{\n\t\tRecorder: prommetrics.NewRecorder(prommetrics.Config{\n\t\t\tPrefix: \"gotk_receiver\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 15,
                  "endLine": 325,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tg.Expect(conditions.GetMessage(resultR, meta.ReadyCondition)).To(ContainSubstring(address))\n\t})\n\n\tt.Run(\"doesn't update the URL on spec updates\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n",
                    "rendered": {
                      "text": "\t\tg.Expect(conditions.GetMessage(resultR, meta.ReadyCondition)).To(ContainSubstring(address))\n\t})\n\n\tt.Run(\"doesn't update the URL on spec updates\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n",
                      "markdown": "`\t\tg.Expect(conditions.GetMessage(resultR, meta.ReadyCondition)).To(ContainSubstring(address))\n\t})\n\n\tt.Run(\"doesn't update the URL on spec updates\", func(t *testing.T) {\n\t\tg := NewWithT(t)\n\n\t\tg.Expect(k8sClient.Get(context.Background(), client.ObjectKeyFromObject(receiver), resultR)).To(Succeed())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 237,
                  "endLine": 237,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc TestReceiverReconciler_EventHandler(t *testing.T) {\n\tg := NewWithT(t)\n\ttimeout := 30 * time.Second\n\tresultR := &apiv1.Receiver{}\n\n\t// Use the client from the manager as the server handler needs to list objects from the cache\n",
                    "rendered": {
                      "text": "\nfunc TestReceiverReconciler_EventHandler(t *testing.T) {\n\tg := NewWithT(t)\n\ttimeout := 30 * time.Second\n\tresultR := &apiv1.Receiver{}\n\n\t// Use the client from the manager as the server handler needs to list objects from the cache\n",
                      "markdown": "`\nfunc TestReceiverReconciler_EventHandler(t *testing.T) {\n\tg := NewWithT(t)\n\ttimeout := 30 * time.Second\n\tresultR := &apiv1.Receiver{}\n\n\t// Use the client from the manager as the server handler needs to list objects from the cache\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/receiver_controller_test.go"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "endColumn": 9,
                  "snippet": {
                    "text": "func TestReceiverReconciler_Reconcile(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 5 * time.Second\n\tresultR := &apiv1.Receiver{}\n\tnamespaceName := \"receiver-\" + randStringRunes(5)\n\tsecretName := \"secret-\" + randStringRunes(5)\n",
                    "rendered": {
                      "text": "func TestReceiverReconciler_Reconcile(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 5 * time.Second\n\tresultR := &apiv1.Receiver{}\n\tnamespaceName := \"receiver-\" + randStringRunes(5)\n\tsecretName := \"secret-\" + randStringRunes(5)\n",
                      "markdown": "`func TestReceiverReconciler_Reconcile(t *testing.T) {\n\tg := NewWithT(t)\n\n\ttimeout := 5 * time.Second\n\tresultR := &apiv1.Receiver{}\n\tnamespaceName := \"receiver-\" + randStringRunes(5)\n\tsecretName := \"secret-\" + randStringRunes(5)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/provider_controller.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1beta3.Provider{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1beta3.Provider{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                      "markdown": "`\tlog := ctrl.LoggerFrom(ctx)\n\n\tobj := &apiv1beta3.Provider{}\n\tif err := r.Get(ctx, req.NamespacedName, obj); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/suite_test.go"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 35,
                  "endLine": 97,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tMetrics:        testMetricsH,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManagerAndOptions(testEnv, ReceiverReconcilerOptions{\n\t\tRateLimiter: controller.GetDefaultRateLimiter(),\n\t}); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start ReceiverReconciler: %v\", err))\n",
                    "rendered": {
                      "text": "\t\tMetrics:        testMetricsH,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManagerAndOptions(testEnv, ReceiverReconcilerOptions{\n\t\tRateLimiter: controller.GetDefaultRateLimiter(),\n\t}); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start ReceiverReconciler: %v\", err))\n",
                      "markdown": "`\t\tMetrics:        testMetricsH,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManagerAndOptions(testEnv, ReceiverReconcilerOptions{\n\t\tRateLimiter: controller.GetDefaultRateLimiter(),\n\t}); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start ReceiverReconciler: %v\", err))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/suite_test.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 22,
                  "endLine": 96,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tClient:         testEnv,\n\t\tMetrics:        testMetricsH,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManagerAndOptions(testEnv, ReceiverReconcilerOptions{\n\t\tRateLimiter: controller.GetDefaultRateLimiter(),\n\t}); err != nil {\n",
                    "rendered": {
                      "text": "\t\tClient:         testEnv,\n\t\tMetrics:        testMetricsH,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManagerAndOptions(testEnv, ReceiverReconcilerOptions{\n\t\tRateLimiter: controller.GetDefaultRateLimiter(),\n\t}); err != nil {\n",
                      "markdown": "`\t\tClient:         testEnv,\n\t\tMetrics:        testMetricsH,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManagerAndOptions(testEnv, ReceiverReconcilerOptions{\n\t\tRateLimiter: controller.GetDefaultRateLimiter(),\n\t}); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/suite_test.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "endLine": 87,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tif err := (&ProviderReconciler{\n\t\tClient:         testEnv,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManager(testEnv); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start ProviderReconciler: %v\", err))\n\t}\n",
                    "rendered": {
                      "text": "\tif err := (&ProviderReconciler{\n\t\tClient:         testEnv,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManager(testEnv); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start ProviderReconciler: %v\", err))\n\t}\n",
                      "markdown": "`\tif err := (&ProviderReconciler{\n\t\tClient:         testEnv,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManager(testEnv); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start ProviderReconciler: %v\", err))\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/controller/suite_test.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tif err := (&AlertReconciler{\n\t\tClient:         testEnv,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManager(testEnv); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start AlertReconciler: %v\", err))\n\t}\n",
                    "rendered": {
                      "text": "\tif err := (&AlertReconciler{\n\t\tClient:         testEnv,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManager(testEnv); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start AlertReconciler: %v\", err))\n\t}\n",
                      "markdown": "`\tif err := (&AlertReconciler{\n\t\tClient:         testEnv,\n\t\tControllerName: controllerName,\n\t\tEventRecorder:  testEnv.GetEventRecorderFor(controllerName),\n\t}).SetupWithManager(testEnv); err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to start AlertReconciler: %v\", err))\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 10,
                  "endLine": 427,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\tdefer ts.Close()\n\t\t\tc, err := NewBitbucketServer(tt.provideruid, ts.URL+\"/scm/projectfoo/repobar.git\", tt.token, nil, tt.username, tt.password)\n\t\t\trequire.NoError(t, err)\n\t\t\terr = c.Post(context.TODO(), tt.event)\n\t\t\tif tt.testFailReason == \"\" {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t} else {\n",
                    "rendered": {
                      "text": "\t\t\tdefer ts.Close()\n\t\t\tc, err := NewBitbucketServer(tt.provideruid, ts.URL+\"/scm/projectfoo/repobar.git\", tt.token, nil, tt.username, tt.password)\n\t\t\trequire.NoError(t, err)\n\t\t\terr = c.Post(context.TODO(), tt.event)\n\t\t\tif tt.testFailReason == \"\" {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t} else {\n",
                      "markdown": "`\t\t\tdefer ts.Close()\n\t\t\tc, err := NewBitbucketServer(tt.provideruid, ts.URL+\"/scm/projectfoo/repobar.git\", tt.token, nil, tt.username, tt.password)\n\t\t\trequire.NoError(t, err)\n\t\t\terr = c.Post(context.TODO(), tt.event)\n\t\t\tif tt.testFailReason == \"\" {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t} else {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 50,
                  "endLine": 376,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t\t\t\trequire.Equal(t, len(r.URL.Query()), 0)\n\n\t\t\t\t\t// Validate that this POST request has Content-Type: application/json header\n\t\t\t\t\trequire.Equal(t, \"application/json\", r.Header.Get(\"Content-Type\"))\n\n\t\t\t\t\t// Read json body of the request\n\t\t\t\t\tb, err := io.ReadAll(r.Body)\n",
                    "rendered": {
                      "text": "\t\t\t\t\trequire.Equal(t, len(r.URL.Query()), 0)\n\n\t\t\t\t\t// Validate that this POST request has Content-Type: application/json header\n\t\t\t\t\trequire.Equal(t, \"application/json\", r.Header.Get(\"Content-Type\"))\n\n\t\t\t\t\t// Read json body of the request\n\t\t\t\t\tb, err := io.ReadAll(r.Body)\n",
                      "markdown": "`\t\t\t\t\trequire.Equal(t, len(r.URL.Query()), 0)\n\n\t\t\t\t\t// Validate that this POST request has Content-Type: application/json header\n\t\t\t\t\trequire.Equal(t, \"application/json\", r.Header.Get(\"Content-Type\"))\n\n\t\t\t\t\t// Read json body of the request\n\t\t\t\t\tb, err := io.ReadAll(r.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 35,
                  "endLine": 329,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\t\tif r.Method == http.MethodGet {\n\n\t\t\t\t\t//Validate that this GET request has a query string with \"key\" as the query paraneter\n\t\t\t\t\trequire.Equal(t, r.URL.Query().Get(bbServerGetBuildStatusQueryString), tt.key)\n\n\t\t\t\t\t// Validate that this GET request has no body\n\t\t\t\t\trequire.Equal(t, http.NoBody, r.Body)\n",
                    "rendered": {
                      "text": "\t\t\t\tif r.Method == http.MethodGet {\n\n\t\t\t\t\t//Validate that this GET request has a query string with \"key\" as the query paraneter\n\t\t\t\t\trequire.Equal(t, r.URL.Query().Get(bbServerGetBuildStatusQueryString), tt.key)\n\n\t\t\t\t\t// Validate that this GET request has no body\n\t\t\t\t\trequire.Equal(t, http.NoBody, r.Body)\n",
                      "markdown": "`\t\t\t\tif r.Method == http.MethodGet {\n\n\t\t\t\t\t//Validate that this GET request has a query string with \"key\" as the query paraneter\n\t\t\t\t\trequire.Equal(t, r.URL.Query().Get(bbServerGetBuildStatusQueryString), tt.key)\n\n\t\t\t\t\t// Validate that this GET request has no body\n\t\t\t\t\trequire.Equal(t, http.NoBody, r.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 37,
                  "endLine": 319,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n\t\t\t\t// Validate Headers\n\t\t\t\tfor key, value := range tt.headers {\n\t\t\t\t\trequire.Equal(t, value, r.Header.Get(key))\n\t\t\t\t}\n\n\t\t\t\t// Validate URI\n",
                    "rendered": {
                      "text": "\n\t\t\t\t// Validate Headers\n\t\t\t\tfor key, value := range tt.headers {\n\t\t\t\t\trequire.Equal(t, value, r.Header.Get(key))\n\t\t\t\t}\n\n\t\t\t\t// Validate URI\n",
                      "markdown": "`\n\t\t\t\t// Validate Headers\n\t\t\t\tfor key, value := range tt.headers {\n\t\t\t\t\trequire.Equal(t, value, r.Header.Get(key))\n\t\t\t\t}\n\n\t\t\t\t// Validate URI\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 8,
                  "endLine": 149,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tassert.Nil(t, err)\n\n\t//Validate conversion to bitbucket state\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"badserveritystate\", map[string]string{\n\t\teventv1.MetaRevisionKey: \"main@sha1:5394cb7f48332b2de7c17dd8b8384bbc84b7e738\",\n\t}))\n\tassert.NotNil(t, err)\n",
                    "rendered": {
                      "text": "\tassert.Nil(t, err)\n\n\t//Validate conversion to bitbucket state\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"badserveritystate\", map[string]string{\n\t\teventv1.MetaRevisionKey: \"main@sha1:5394cb7f48332b2de7c17dd8b8384bbc84b7e738\",\n\t}))\n\tassert.NotNil(t, err)\n",
                      "markdown": "`\tassert.Nil(t, err)\n\n\t//Validate conversion to bitbucket state\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"badserveritystate\", map[string]string{\n\t\teventv1.MetaRevisionKey: \"main@sha1:5394cb7f48332b2de7c17dd8b8384bbc84b7e738\",\n\t}))\n\tassert.NotNil(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 8,
                  "endLine": 136,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tassert.Nil(t, err)\n\n\t//Validate extract commit hash\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"info\", map[string]string{\n\t\teventv1.MetaRevisionKey: \"badhash\",\n\t}))\n\tassert.NotNil(t, err)\n",
                    "rendered": {
                      "text": "\tassert.Nil(t, err)\n\n\t//Validate extract commit hash\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"info\", map[string]string{\n\t\teventv1.MetaRevisionKey: \"badhash\",\n\t}))\n\tassert.NotNil(t, err)\n",
                      "markdown": "`\tassert.Nil(t, err)\n\n\t//Validate extract commit hash\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"info\", map[string]string{\n\t\teventv1.MetaRevisionKey: \"badhash\",\n\t}))\n\tassert.NotNil(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 8,
                  "endLine": 124,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tassert.Nil(t, err)\n\n\t//Validate missing revision\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"info\", map[string]string{\n\t\t\"dummybadrevision\": \"bad\",\n\t}))\n\tassert.NotNil(t, err)\n",
                    "rendered": {
                      "text": "\tassert.Nil(t, err)\n\n\t//Validate missing revision\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"info\", map[string]string{\n\t\t\"dummybadrevision\": \"bad\",\n\t}))\n\tassert.NotNil(t, err)\n",
                      "markdown": "`\tassert.Nil(t, err)\n\n\t//Validate missing revision\n\terr = b.Post(context.TODO(), generateTestEventKustomization(\"info\", map[string]string{\n\t\t\"dummybadrevision\": \"bad\",\n\t}))\n\tassert.NotNil(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 117,
                  "endLine": 425,
                  "endColumn": 125,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t}))\n\t\t\tdefer ts.Close()\n\t\t\tc, err := NewBitbucketServer(tt.provideruid, ts.URL+\"/scm/projectfoo/repobar.git\", tt.token, nil, tt.username, tt.password)\n\t\t\trequire.NoError(t, err)\n\t\t\terr = c.Post(context.TODO(), tt.event)\n\t\t\tif tt.testFailReason == \"\" {\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t}))\n\t\t\tdefer ts.Close()\n\t\t\tc, err := NewBitbucketServer(tt.provideruid, ts.URL+\"/scm/projectfoo/repobar.git\", tt.token, nil, tt.username, tt.password)\n\t\t\trequire.NoError(t, err)\n\t\t\terr = c.Post(context.TODO(), tt.event)\n\t\t\tif tt.testFailReason == \"\" {\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t}))\n\t\t\tdefer ts.Close()\n\t\t\tc, err := NewBitbucketServer(tt.provideruid, ts.URL+\"/scm/projectfoo/repobar.git\", tt.token, nil, tt.username, tt.password)\n\t\t\trequire.NoError(t, err)\n\t\t\terr = c.Post(context.TODO(), tt.event)\n\t\t\tif tt.testFailReason == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 90,
                  "endLine": 300,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 17,
                  "endLine": 297,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:        \"Validate duplicate commit status successful match\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:        \"Validate duplicate commit status successful match\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t{\n\t\t\tname:        \"Validate duplicate commit status successful match\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 3,
                  "endLine": 297,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:        \"Validate duplicate commit status successful match\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:        \"Validate duplicate commit status successful match\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t{\n\t\t\tname:        \"Validate duplicate commit status successful match\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 90,
                  "endLine": 283,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 20,
                  "endLine": 280,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t\ttestFailReason: \"badpost\",\n\t\t\terrorString:    \"could not post build status: could not post build commit status: 401 - Unauthorized\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t\ttestFailReason: \"badpost\",\n\t\t\terrorString:    \"could not post build status: could not post build commit status: 401 - Unauthorized\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t\ttestFailReason: \"badpost\",\n\t\t\terrorString:    \"could not post build status: could not post build commit status: 401 - Unauthorized\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 3,
                  "endLine": 280,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\ttestFailReason: \"badpost\",\n\t\t\terrorString:    \"could not post build status: could not post build commit status: 401 - Unauthorized\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t\ttestFailReason: \"badpost\",\n\t\t\terrorString:    \"could not post build status: could not post build commit status: 401 - Unauthorized\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t\ttestFailReason: \"badpost\",\n\t\t\terrorString:    \"could not post build status: could not post build commit status: 401 - Unauthorized\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 90,
                  "endLine": 264,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 20,
                  "endLine": 261,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t\ttestFailReason: \"badstatuscode\",\n\t\t\terrorString:    \"could not get existing commit status: failed api call to check duplicate commit status: 400 - Bad Request\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t\ttestFailReason: \"badstatuscode\",\n\t\t\terrorString:    \"could not get existing commit status: failed api call to check duplicate commit status: 400 - Bad Request\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t\ttestFailReason: \"badstatuscode\",\n\t\t\terrorString:    \"could not get existing commit status: failed api call to check duplicate commit status: 400 - Bad Request\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 3,
                  "endLine": 261,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\ttestFailReason: \"badstatuscode\",\n\t\t\terrorString:    \"could not get existing commit status: failed api call to check duplicate commit status: 400 - Bad Request\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t\ttestFailReason: \"badstatuscode\",\n\t\t\terrorString:    \"could not get existing commit status: failed api call to check duplicate commit status: 400 - Bad Request\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t\ttestFailReason: \"badstatuscode\",\n\t\t\terrorString:    \"could not get existing commit status: failed api call to check duplicate commit status: 400 - Bad Request\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 90,
                  "endLine": 245,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 20,
                  "endLine": 242,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\t\ttestFailReason: \"badjson\",\n\t\t\terrorString:    \"could not get existing commit status: could not unmarshal json response body for duplicate commit status: unexpected end of JSON input\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t\ttestFailReason: \"badjson\",\n\t\t\terrorString:    \"could not get existing commit status: could not unmarshal json response body for duplicate commit status: unexpected end of JSON input\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t\ttestFailReason: \"badjson\",\n\t\t\terrorString:    \"could not get existing commit status: could not unmarshal json response body for duplicate commit status: unexpected end of JSON input\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 3,
                  "endLine": 242,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\ttestFailReason: \"badjson\",\n\t\t\terrorString:    \"could not get existing commit status: could not unmarshal json response body for duplicate commit status: unexpected end of JSON input\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t\ttestFailReason: \"badjson\",\n\t\t\terrorString:    \"could not get existing commit status: could not unmarshal json response body for duplicate commit status: unexpected end of JSON input\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t\ttestFailReason: \"badjson\",\n\t\t\terrorString:    \"could not get existing commit status: could not unmarshal json response body for duplicate commit status: unexpected end of JSON input\",\n\t\t\tusername:       \"hello\",\n\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 90,
                  "endLine": 226,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 17,
                  "endLine": 223,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:        \"Validate Post State=Failed\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:        \"Validate Post State=Failed\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t{\n\t\t\tname:        \"Validate Post State=Failed\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 3,
                  "endLine": 223,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:        \"Validate Post State=Failed\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:        \"Validate Post State=Failed\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t{\n\t\t\tname:        \"Validate Post State=Failed\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 90,
                  "endLine": 209,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 17,
                  "endLine": 206,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:        \"Validate Basic Auth and Post State=Successful\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:        \"Validate Basic Auth and Post State=Successful\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t{\n\t\t\tname:        \"Validate Basic Auth and Post State=Successful\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 3,
                  "endLine": 206,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t{\n\t\t\tname:        \"Validate Basic Auth and Post State=Successful\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                    "rendered": {
                      "text": "\t\t{\n\t\t\tname:        \"Validate Basic Auth and Post State=Successful\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n",
                      "markdown": "`\t\t{\n\t\t\tname:        \"Validate Basic Auth and Post State=Successful\",\n\t\t\tusername:    \"hello\",\n\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 2,
                  "endLine": 181,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\ttestFailReason string\n\t\theaders        map[string]string\n\t\tusername       string\n\t\tpassword       string\n\t\ttoken          string\n\t\tevent          eventv1.Event\n\t\tprovideruid    string\n",
                    "rendered": {
                      "text": "\t\ttestFailReason string\n\t\theaders        map[string]string\n\t\tusername       string\n\t\tpassword       string\n\t\ttoken          string\n\t\tevent          eventv1.Event\n\t\tprovideruid    string\n",
                      "markdown": "`\t\ttestFailReason string\n\t\theaders        map[string]string\n\t\tusername       string\n\t\tpassword       string\n\t\ttoken          string\n\t\tevent          eventv1.Event\n\t\tprovideruid    string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 83,
                  "endLine": 110,
                  "endColumn": 91,
                  "snippet": {
                    "text": "func TestNewBitbucketServerInvalidCreds(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"invalid credentials, expected to be one of username/password or API Token\")\n}\n\nfunc TestNewBitbucketServerInvalidRepo(t *testing.T) {\n",
                    "rendered": {
                      "text": "func TestNewBitbucketServerInvalidCreds(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"invalid credentials, expected to be one of username/password or API Token\")\n}\n\nfunc TestNewBitbucketServerInvalidRepo(t *testing.T) {\n",
                      "markdown": "`func TestNewBitbucketServerInvalidCreds(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"invalid credentials, expected to be one of username/password or API Token\")\n}\n\nfunc TestNewBitbucketServerInvalidRepo(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 175,
                  "endLine": 90,
                  "endColumn": 183,
                  "snippet": {
                    "text": "}\n\nfunc TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n",
                    "rendered": {
                      "text": "}\n\nfunc TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n",
                      "markdown": "`}\n\nfunc TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 169,
                  "endLine": 83,
                  "endColumn": 177,
                  "snippet": {
                    "text": "}\n\nfunc TestBitbucketServerApiPathMultipleWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/context2/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/context2/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                    "rendered": {
                      "text": "}\n\nfunc TestBitbucketServerApiPathMultipleWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/context2/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/context2/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                      "markdown": "`}\n\nfunc TestBitbucketServerApiPathMultipleWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/context2/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/context2/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 156,
                  "endLine": 76,
                  "endColumn": 164,
                  "snippet": {
                    "text": "}\n\nfunc TestBitbucketServerApiPathOneWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                    "rendered": {
                      "text": "}\n\nfunc TestBitbucketServerApiPathOneWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                      "markdown": "`}\n\nfunc TestBitbucketServerApiPathOneWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 179,
                  "endLine": 69,
                  "endColumn": 187,
                  "snippet": {
                    "text": "}\n\nfunc TestBitbucketServerApiPathMultipleWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/context2/context3/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                    "rendered": {
                      "text": "}\n\nfunc TestBitbucketServerApiPathMultipleWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/context2/context3/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                      "markdown": "`}\n\nfunc TestBitbucketServerApiPathMultipleWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/context2/context3/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 161,
                  "endLine": 62,
                  "endColumn": 169,
                  "snippet": {
                    "text": "}\n\nfunc TestBitbucketServerApiPathOneWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                    "rendered": {
                      "text": "}\n\nfunc TestBitbucketServerApiPathOneWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                      "markdown": "`}\n\nfunc TestBitbucketServerApiPathOneWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 152,
                  "endLine": 55,
                  "endColumn": 160,
                  "snippet": {
                    "text": "}\n\nfunc TestBitbucketServerApiPathNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                    "rendered": {
                      "text": "}\n\nfunc TestBitbucketServerApiPathNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n",
                      "markdown": "`}\n\nfunc TestBitbucketServerApiPathNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 34,
                  "endLine": 49,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                    "rendered": {
                      "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                      "markdown": "`\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 19,
                  "endLine": 49,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                    "rendered": {
                      "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                      "markdown": "`\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 160,
                  "endLine": 46,
                  "endColumn": 168,
                  "snippet": {
                    "text": "}\n\nfunc TestNewBitbucketServerBasicWithContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n",
                    "rendered": {
                      "text": "}\n\nfunc TestNewBitbucketServerBasicWithContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n",
                      "markdown": "`}\n\nfunc TestNewBitbucketServerBasicWithContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 34,
                  "endLine": 40,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                    "rendered": {
                      "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                      "markdown": "`\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 40,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                    "rendered": {
                      "text": "\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n",
                      "markdown": "`\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n\tassert.Equal(t, b.Url.Scheme, \"https\")\n\tassert.Equal(t, b.Url.Host, \"example.com:7990\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 152,
                  "endLine": 37,
                  "endColumn": 160,
                  "snippet": {
                    "text": ")\n\nfunc TestNewBitbucketServerBasicNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n",
                    "rendered": {
                      "text": ")\n\nfunc TestNewBitbucketServerBasicNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n",
                      "markdown": "`)\n\nfunc TestNewBitbucketServerBasicNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, b.Username, \"dummyuser\")\n\tassert.Equal(t, b.Password, \"testpassword\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 36,
                  "endLine": 300,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 36,
                  "endLine": 283,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 36,
                  "endLine": 264,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 36,
                  "endLine": 245,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:       \"password\",\n\t\t\tprovideruid:    \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 36,
                  "endLine": 226,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 36,
                  "endLine": 209,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n",
                      "markdown": "`\t\t\tpassword:    \"password\",\n\t\t\tprovideruid: \"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\",\n\t\t\theaders: map[string]string{\n\t\t\t\t\"Authorization\":     \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"hello\"+\":\"+\"password\")),\n\t\t\t\t\"x-atlassian-token\": \"no-check\",\n\t\t\t\t\"x-requested-with\":  \"XMLHttpRequest\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 11,
                  "endLine": 21,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"testing\"\n",
                    "rendered": {
                      "text": "\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"testing\"\n",
                      "markdown": "`\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"testing\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 39,
                  "endLine": 85,
                  "endColumn": 81,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathMultipleWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/context2/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/context2/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathMultipleWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/context2/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/context2/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                      "markdown": "`func TestBitbucketServerApiPathMultipleWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/context2/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/context2/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 39,
                  "endLine": 78,
                  "endColumn": 81,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathOneWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathOneWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                      "markdown": "`func TestBitbucketServerApiPathOneWordScmInContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/scm/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 39,
                  "endLine": 71,
                  "endColumn": 81,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathMultipleWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/context2/context3/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathMultipleWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/context2/context3/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                      "markdown": "`func TestBitbucketServerApiPathMultipleWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/context2/context3/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 39,
                  "endLine": 64,
                  "endColumn": 81,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathOneWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathOneWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                      "markdown": "`func TestBitbucketServerApiPathOneWordContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/context1/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 39,
                  "endLine": 57,
                  "endColumn": 81,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n",
                      "markdown": "`func TestBitbucketServerApiPathNoContext(t *testing.T) {\n\tb, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.Nil(t, err)\n\tu := b.Url.JoinPath(b.createBuildPath(\"00151b98e303e19610378e6f1c49e31e5e80cd3b\")).String()\n\tassert.Equal(t, u, \"https://example.com:7990/rest/api/latest/projects/projectfoo/repos/repobar/commits/00151b98e303e19610378e6f1c49e31e5e80cd3b/builds\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 46,
                  "endLine": 116,
                  "endColumn": 51,
                  "snippet": {
                    "text": "func TestNewBitbucketServerInvalidRepo(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar/invalid.git\", \"BBDC-ODIxODYxMzIyNzUyOttorMjO059P2rYTb6EH7mP\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: invalid repository id \\\"projectfoo/repobar/invalid\\\"\")\n}\n\nfunc TestPostBitbucketServerMissingRevision(t *testing.T) {\n",
                    "rendered": {
                      "text": "func TestNewBitbucketServerInvalidRepo(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar/invalid.git\", \"BBDC-ODIxODYxMzIyNzUyOttorMjO059P2rYTb6EH7mP\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: invalid repository id \\\"projectfoo/repobar/invalid\\\"\")\n}\n\nfunc TestPostBitbucketServerMissingRevision(t *testing.T) {\n",
                      "markdown": "`func TestNewBitbucketServerInvalidRepo(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/scm/projectfoo/repobar/invalid.git\", \"BBDC-ODIxODYxMzIyNzUyOttorMjO059P2rYTb6EH7mP\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: invalid repository id \\\"projectfoo/repobar/invalid\\\"\")\n}\n\nfunc TestPostBitbucketServerMissingRevision(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 46,
                  "endLine": 98,
                  "endColumn": 51,
                  "snippet": {
                    "text": "func TestBitbucketServerSshAddress(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"ssh://git@mybitbucket:2222/ap/fluxcd-sandbox.git\", \"\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: unsupported scheme type in address: ssh. Must be http or https\")\n}\n\nfunc TestNewBitbucketServerToken(t *testing.T) {\n",
                    "rendered": {
                      "text": "func TestBitbucketServerSshAddress(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"ssh://git@mybitbucket:2222/ap/fluxcd-sandbox.git\", \"\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: unsupported scheme type in address: ssh. Must be http or https\")\n}\n\nfunc TestNewBitbucketServerToken(t *testing.T) {\n",
                      "markdown": "`func TestBitbucketServerSshAddress(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"ssh://git@mybitbucket:2222/ap/fluxcd-sandbox.git\", \"\", nil, \"\", \"\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: unsupported scheme type in address: ssh. Must be http or https\")\n}\n\nfunc TestNewBitbucketServerToken(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 100,
                  "endLine": 92,
                  "endColumn": 105,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n\nfunc TestBitbucketServerSshAddress(t *testing.T) {\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n\nfunc TestBitbucketServerSshAddress(t *testing.T) {\n",
                      "markdown": "`func TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n\nfunc TestBitbucketServerSshAddress(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/bitbucketserver_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 46,
                  "endLine": 92,
                  "endColumn": 51,
                  "snippet": {
                    "text": "func TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n\nfunc TestBitbucketServerSshAddress(t *testing.T) {\n",
                    "rendered": {
                      "text": "func TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n\nfunc TestBitbucketServerSshAddress(t *testing.T) {\n",
                      "markdown": "`func TestBitbucketServerApiPathScmAlreadyRemovedInInput(t *testing.T) {\n\t_, err := NewBitbucketServer(\"0c9c2e41-d2f9-4f9b-9c41-bebc1984d67a\", \"https://example.com:7990/context1/context2/context3/projectfoo/repobar.git\", \"\", nil, \"dummyuser\", \"testpassword\")\n\tassert.NotNil(t, err)\n\tassert.Equal(t, err.Error(), \"could not parse git address: supplied provider address is not http(s) git clone url\")\n}\n\nfunc TestBitbucketServerSshAddress(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_test.go"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 18,
                  "endLine": 132,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n\t\t\tev := testEvent()\n\t\t\tev.Timestamp = metav1.NewTime(time.Unix(1664520029, 0))\n\t\t\terr = forwarder.Post(context.TODO(), ev)\n\t\t\trequire.NoError(t, err)\n\t\t})\n\t}\n",
                    "rendered": {
                      "text": "\n\t\t\tev := testEvent()\n\t\t\tev.Timestamp = metav1.NewTime(time.Unix(1664520029, 0))\n\t\t\terr = forwarder.Post(context.TODO(), ev)\n\t\t\trequire.NoError(t, err)\n\t\t})\n\t}\n",
                      "markdown": "`\n\t\t\tev := testEvent()\n\t\t\tev.Timestamp = metav1.NewTime(time.Unix(1664520029, 0))\n\t\t\terr = forwarder.Post(context.TODO(), ev)\n\t\t\trequire.NoError(t, err)\n\t\t})\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_test.go"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 45,
                  "endLine": 112,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t\t\t\t\t\trequire.Equal(t, []string{tt.xSigHeader}, sigHdrVal)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trequire.Equal(t, tt.hmacHeader, r.Header.Get(\"X-Signature\"))\n\t\t\t\t}\n\t\t\t\tvar payload = eventv1.Event{}\n\t\t\t\terr = json.Unmarshal(b, &payload)\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\trequire.Equal(t, []string{tt.xSigHeader}, sigHdrVal)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trequire.Equal(t, tt.hmacHeader, r.Header.Get(\"X-Signature\"))\n\t\t\t\t}\n\t\t\t\tvar payload = eventv1.Event{}\n\t\t\t\terr = json.Unmarshal(b, &payload)\n",
                      "markdown": "`\t\t\t\t\t\trequire.Equal(t, []string{tt.xSigHeader}, sigHdrVal)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trequire.Equal(t, tt.hmacHeader, r.Header.Get(\"X-Signature\"))\n\t\t\t\t}\n\t\t\t\tvar payload = eventv1.Event{}\n\t\t\t\terr = json.Unmarshal(b, &payload)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_test.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 38,
                  "endLine": 103,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\trequire.Equal(t, \"source-controller\", r.Header.Get(\"gotk-component\"))\n\t\t\t\trequire.Equal(t, \"token\", r.Header.Get(\"Authorization\"))\n\t\t\t\tif tt.hmacHeader == \"\" {\n\t\t\t\t\tsigHdrVal, ok := r.Header[\"X-Signature\"]\n\t\t\t\t\tif tt.xSigHeader == \"\" {\n",
                    "rendered": {
                      "text": "\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\trequire.Equal(t, \"source-controller\", r.Header.Get(\"gotk-component\"))\n\t\t\t\trequire.Equal(t, \"token\", r.Header.Get(\"Authorization\"))\n\t\t\t\tif tt.hmacHeader == \"\" {\n\t\t\t\t\tsigHdrVal, ok := r.Header[\"X-Signature\"]\n\t\t\t\t\tif tt.xSigHeader == \"\" {\n",
                      "markdown": "`\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\trequire.Equal(t, \"source-controller\", r.Header.Get(\"gotk-component\"))\n\t\t\t\trequire.Equal(t, \"token\", r.Header.Get(\"Authorization\"))\n\t\t\t\tif tt.hmacHeader == \"\" {\n\t\t\t\t\tsigHdrVal, ok := r.Header[\"X-Signature\"]\n\t\t\t\t\tif tt.xSigHeader == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_test.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 50,
                  "endLine": 102,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t\t\tb, err := io.ReadAll(r.Body)\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\trequire.Equal(t, \"source-controller\", r.Header.Get(\"gotk-component\"))\n\t\t\t\trequire.Equal(t, \"token\", r.Header.Get(\"Authorization\"))\n\t\t\t\tif tt.hmacHeader == \"\" {\n\t\t\t\t\tsigHdrVal, ok := r.Header[\"X-Signature\"]\n",
                    "rendered": {
                      "text": "\t\t\t\tb, err := io.ReadAll(r.Body)\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\trequire.Equal(t, \"source-controller\", r.Header.Get(\"gotk-component\"))\n\t\t\t\trequire.Equal(t, \"token\", r.Header.Get(\"Authorization\"))\n\t\t\t\tif tt.hmacHeader == \"\" {\n\t\t\t\t\tsigHdrVal, ok := r.Header[\"X-Signature\"]\n",
                      "markdown": "`\t\t\t\tb, err := io.ReadAll(r.Body)\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\trequire.Equal(t, \"source-controller\", r.Header.Get(\"gotk-component\"))\n\t\t\t\trequire.Equal(t, \"token\", r.Header.Get(\"Authorization\"))\n\t\t\t\tif tt.hmacHeader == \"\" {\n\t\t\t\t\tsigHdrVal, ok := r.Header[\"X-Signature\"]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 22,
                  "endLine": 90,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\t\t},\n\t\t{\n\t\t\tname:       \"non-empty HMAC key adds signature header\",\n\t\t\thmacKey:    []byte(\"7152fed34dd6149a7c75a276c510da27cb6f82b0\"),\n\t\t\thmacHeader: \"sha256=65b018549b1254e7226d1c08f9567ee45bc9de0fc4e7b1a40253f9a018b08be7\",\n\t\t\txSigHeader: \"should be overwritten with actual signature\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t},\n\t\t{\n\t\t\tname:       \"non-empty HMAC key adds signature header\",\n\t\t\thmacKey:    []byte(\"7152fed34dd6149a7c75a276c510da27cb6f82b0\"),\n\t\t\thmacHeader: \"sha256=65b018549b1254e7226d1c08f9567ee45bc9de0fc4e7b1a40253f9a018b08be7\",\n\t\t\txSigHeader: \"should be overwritten with actual signature\",\n\t\t},\n",
                      "markdown": "`\t\t},\n\t\t{\n\t\t\tname:       \"non-empty HMAC key adds signature header\",\n\t\t\thmacKey:    []byte(\"7152fed34dd6149a7c75a276c510da27cb6f82b0\"),\n\t\t\thmacHeader: \"sha256=65b018549b1254e7226d1c08f9567ee45bc9de0fc4e7b1a40253f9a018b08be7\",\n\t\t\txSigHeader: \"should be overwritten with actual signature\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_test.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 19,
                  "endLine": 57,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\t},\n\t\t{\n\t\t\tname:    \"non-empty HMAC key adds signature header\",\n\t\t\thmacKey: []byte(\"7152fed34dd6149a7c75a276c510da27cb6f82b0\"),\n\t\t\terr:     false,\n\t\t},\n\t}\n",
                    "rendered": {
                      "text": "\t\t},\n\t\t{\n\t\t\tname:    \"non-empty HMAC key adds signature header\",\n\t\t\thmacKey: []byte(\"7152fed34dd6149a7c75a276c510da27cb6f82b0\"),\n\t\t\terr:     false,\n\t\t},\n\t}\n",
                      "markdown": "`\t\t},\n\t\t{\n\t\t\tname:    \"non-empty HMAC key adds signature header\",\n\t\t\thmacKey: []byte(\"7152fed34dd6149a7c75a276c510da27cb6f82b0\"),\n\t\t\terr:     false,\n\t\t},\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana_test.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 15,
                  "endLine": 50,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tgrafana, err := NewGrafana(ts.URL, \"\", \"\", nil, \"\", \"\")\n\t\trequire.NoError(t, err)\n\n\t\terr = grafana.Post(context.TODO(), testEvent())\n\t\tassert.NoError(t, err)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tgrafana, err := NewGrafana(ts.URL, \"\", \"\", nil, \"\", \"\")\n\t\trequire.NoError(t, err)\n\n\t\terr = grafana.Post(context.TODO(), testEvent())\n\t\tassert.NoError(t, err)\n\t})\n}\n",
                      "markdown": "`\t\tgrafana, err := NewGrafana(ts.URL, \"\", \"\", nil, \"\", \"\")\n\t\trequire.NoError(t, err)\n\n\t\terr = grafana.Post(context.TODO(), testEvent())\n\t\tassert.NoError(t, err)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/grafana_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 29,
                  "endLine": 32,
                  "endColumn": 37,
                  "snippet": {
                    "text": ")\n\nfunc TestGrafana_Post(t *testing.T) {\n\tt.Run(\"Successfully post and expect 200 ok\", func(t *testing.T) {\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tb, err := io.ReadAll(r.Body)\n\t\t\trequire.NoError(t, err)\n",
                    "rendered": {
                      "text": ")\n\nfunc TestGrafana_Post(t *testing.T) {\n\tt.Run(\"Successfully post and expect 200 ok\", func(t *testing.T) {\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tb, err := io.ReadAll(r.Body)\n\t\t\trequire.NoError(t, err)\n",
                      "markdown": "`)\n\nfunc TestGrafana_Post(t *testing.T) {\n\tt.Run(\"Successfully post and expect 200 ok\", func(t *testing.T) {\n\t\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tb, err := io.ReadAll(r.Body)\n\t\t\trequire.NoError(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/gitea_test.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 8,
                  "endLine": 102,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\t\tMessage: \"Service/podinfo/podinfo configured\",\n\t\tReason:  \"\",\n\t}\n\terr = g.Post(context.Background(), event)\n\tassert.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\t\tMessage: \"Service/podinfo/podinfo configured\",\n\t\tReason:  \"\",\n\t}\n\terr = g.Post(context.Background(), event)\n\tassert.NoError(t, err)\n}\n",
                      "markdown": "`\t\tMessage: \"Service/podinfo/podinfo configured\",\n\t\tReason:  \"\",\n\t}\n\terr = g.Post(context.Background(), event)\n\tassert.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/gitea_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 29,
                  "endLine": 46,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\tcase \"/api/v1/repos/foo/bar/statuses/69b59063470310ebbd88a9156325322a124e55a3\":\n\t\t\tfmt.Fprintf(w, \"{}\")\n\t\tdefault:\n\t\t\tt.Logf(\"unknown %s request at %s\", r.Method, r.URL.Path)\n\t\t}\n\t}))\n\treturn srv\n",
                    "rendered": {
                      "text": "\t\tcase \"/api/v1/repos/foo/bar/statuses/69b59063470310ebbd88a9156325322a124e55a3\":\n\t\t\tfmt.Fprintf(w, \"{}\")\n\t\tdefault:\n\t\t\tt.Logf(\"unknown %s request at %s\", r.Method, r.URL.Path)\n\t\t}\n\t}))\n\treturn srv\n",
                      "markdown": "`\t\tcase \"/api/v1/repos/foo/bar/statuses/69b59063470310ebbd88a9156325322a124e55a3\":\n\t\t\tfmt.Fprintf(w, \"{}\")\n\t\tdefault:\n\t\t\tt.Logf(\"unknown %s request at %s\", r.Method, r.URL.Path)\n\t\t}\n\t}))\n\treturn srv\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/gitlab_fuzz_test.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 12,
                  "endLine": 66,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tevent.Severity = severity\n\t\tevent.Reason = reason\n\n\t\t_ = gitLab.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent.Severity = severity\n\t\tevent.Reason = reason\n\n\t\t_ = gitLab.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent.Severity = severity\n\t\tevent.Reason = reason\n\n\t\t_ = gitLab.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/forwarder_fuzz_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 15,
                  "endLine": 58,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tevent := eventv1.Event{}\n\t\t_ = fuzz.NewConsumer(seed).GenerateStruct(&event)\n\n\t\t_ = forwarder.Post(context.TODO(), event)\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tevent := eventv1.Event{}\n\t\t_ = fuzz.NewConsumer(seed).GenerateStruct(&event)\n\n\t\t_ = forwarder.Post(context.TODO(), event)\n\t})\n}\n",
                      "markdown": "`\t\tevent := eventv1.Event{}\n\t\t_ = fuzz.NewConsumer(seed).GenerateStruct(&event)\n\n\t\t_ = forwarder.Post(context.TODO(), event)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/notifier/alertmanager_test.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 44,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\talertmanager, err := NewAlertmanager(ts.URL, \"\", nil)\n\trequire.NoError(t, err)\n\n\terr = alertmanager.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                    "rendered": {
                      "text": "\talertmanager, err := NewAlertmanager(ts.URL, \"\", nil)\n\trequire.NoError(t, err)\n\n\terr = alertmanager.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n",
                      "markdown": "`\talertmanager, err := NewAlertmanager(ts.URL, \"\", nil)\n\trequire.NoError(t, err)\n\n\terr = alertmanager.Post(context.TODO(), testEvent())\n\trequire.NoError(t, err)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers_test.go"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 41,
                  "endLine": 438,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\t\t\twantErr:           true,\n\t\t},\n\t\t{\n\t\t\tname:              \"provider secret in diff NS but provider suspended\",\n\t\t\tproviderSuspended: true,\n\t\t\tsecretNamespace:   \"bar-ns\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\twantErr:           true,\n\t\t},\n\t\t{\n\t\t\tname:              \"provider secret in diff NS but provider suspended\",\n\t\t\tproviderSuspended: true,\n\t\t\tsecretNamespace:   \"bar-ns\",\n\t\t},\n",
                      "markdown": "`\t\t\twantErr:           true,\n\t\t},\n\t\t{\n\t\t\tname:              \"provider secret in diff NS but provider suspended\",\n\t\t\tproviderSuspended: true,\n\t\t\tsecretNamespace:   \"bar-ns\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers_test.go"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 45,
                  "endLine": 426,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\t\tsecretNamespace:   \"bar-ns\",\n\t\t},\n\t\t{\n\t\t\tname:              \"event src and alert in diff NS with no cross NS refs\",\n\t\t\talertNamespace:    \"bar-ns\",\n\t\t\tproviderNamespace: \"bar-ns\",\n\t\t\tnoCrossNSRefs:     true,\n",
                    "rendered": {
                      "text": "\t\t\tsecretNamespace:   \"bar-ns\",\n\t\t},\n\t\t{\n\t\t\tname:              \"event src and alert in diff NS with no cross NS refs\",\n\t\t\talertNamespace:    \"bar-ns\",\n\t\t\tproviderNamespace: \"bar-ns\",\n\t\t\tnoCrossNSRefs:     true,\n",
                      "markdown": "`\t\t\tsecretNamespace:   \"bar-ns\",\n\t\t},\n\t\t{\n\t\t\tname:              \"event src and alert in diff NS with no cross NS refs\",\n\t\t\talertNamespace:    \"bar-ns\",\n\t\t\tproviderNamespace: \"bar-ns\",\n\t\t\tnoCrossNSRefs:     true,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers_test.go"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 45,
                  "endLine": 420,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\twantErr            bool\n\t}{\n\t\t{\n\t\t\tname:              \"event src and alert in diff NS\",\n\t\t\talertNamespace:    \"bar-ns\",\n\t\t\tproviderNamespace: \"bar-ns\",\n\t\t\tsecretNamespace:   \"bar-ns\",\n",
                    "rendered": {
                      "text": "\t\twantErr            bool\n\t}{\n\t\t{\n\t\t\tname:              \"event src and alert in diff NS\",\n\t\t\talertNamespace:    \"bar-ns\",\n\t\t\tproviderNamespace: \"bar-ns\",\n\t\t\tsecretNamespace:   \"bar-ns\",\n",
                      "markdown": "`\t\twantErr            bool\n\t}{\n\t\t{\n\t\t\tname:              \"event src and alert in diff NS\",\n\t\t\talertNamespace:    \"bar-ns\",\n\t\t\tproviderNamespace: \"bar-ns\",\n\t\t\tsecretNamespace:   \"bar-ns\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_server_test.go"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 25,
                  "endLine": 526,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n\t\t\tif tt.rateLimit {\n\t\t\t\tg.Expect(res.Code).Should(Equal(429))\n\t\t\t\tg.Expect(res.Header().Get(\"X-Ratelimit-Remaining\")).Should(Equal(\"0\"))\n\t\t\t} else {\n\t\t\t\tg.Expect(res.Code).Should(Equal(200))\n\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\t\tif tt.rateLimit {\n\t\t\t\tg.Expect(res.Code).Should(Equal(429))\n\t\t\t\tg.Expect(res.Header().Get(\"X-Ratelimit-Remaining\")).Should(Equal(\"0\"))\n\t\t\t} else {\n\t\t\t\tg.Expect(res.Code).Should(Equal(200))\n\t\t\t}\n",
                      "markdown": "`\n\t\t\tif tt.rateLimit {\n\t\t\t\tg.Expect(res.Code).Should(Equal(429))\n\t\t\t\tg.Expect(res.Header().Get(\"X-Ratelimit-Remaining\")).Should(Equal(\"0\"))\n\t\t\t} else {\n\t\t\t\tg.Expect(res.Code).Should(Equal(200))\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_server_test.go"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 19,
                  "endLine": 309,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\t\t\tbuf := &bytes.Buffer{}\n\t\t\tg.Expect(json.NewEncoder(buf).Encode(event)).To(Succeed())\n\t\t\tres, err := http.Post(\"http://localhost:\"+eventServerPort, \"application/json\", buf)\n\t\t\tg.Expect(err).ToNot(HaveOccurred())\n\t\t\tg.Expect(res.StatusCode).To(Equal(http.StatusAccepted)) // Event server responds with 202 Accepted.\n\n",
                    "rendered": {
                      "text": "\n\t\t\tbuf := &bytes.Buffer{}\n\t\t\tg.Expect(json.NewEncoder(buf).Encode(event)).To(Succeed())\n\t\t\tres, err := http.Post(\"http://localhost:\"+eventServerPort, \"application/json\", buf)\n\t\t\tg.Expect(err).ToNot(HaveOccurred())\n\t\t\tg.Expect(res.StatusCode).To(Equal(http.StatusAccepted)) // Event server responds with 202 Accepted.\n\n",
                      "markdown": "`\n\t\t\tbuf := &bytes.Buffer{}\n\t\t\tg.Expect(json.NewEncoder(buf).Encode(event)).To(Succeed())\n\t\t\tres, err := http.Post(\"http://localhost:\"+eventServerPort, \"application/json\", buf)\n\t\t\tg.Expect(err).ToNot(HaveOccurred())\n\t\t\tg.Expect(res.StatusCode).To(Equal(http.StatusAccepted)) // Event server responds with 202 Accepted.\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_server_test.go"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 6,
                  "endLine": 324,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t\t\t// responding to the POST of the event. This makes it\n\t\t\t\t// difficult to know whether the provider has filtered the\n\t\t\t\t// event, or just not run the goroutine yet. For now, use a\n\t\t\t\t// timeout (and consistently so it can fail early).\n\t\t\t\tg.Consistently(func() bool {\n\t\t\t\t\treturn req == nil\n\t\t\t\t}, \"1s\", \"0.1s\").Should(BeTrue())\n",
                    "rendered": {
                      "text": "\t\t\t\t// responding to the POST of the event. This makes it\n\t\t\t\t// difficult to know whether the provider has filtered the\n\t\t\t\t// event, or just not run the goroutine yet. For now, use a\n\t\t\t\t// timeout (and consistently so it can fail early).\n\t\t\t\tg.Consistently(func() bool {\n\t\t\t\t\treturn req == nil\n\t\t\t\t}, \"1s\", \"0.1s\").Should(BeTrue())\n",
                      "markdown": "`\t\t\t\t// responding to the POST of the event. This makes it\n\t\t\t\t// difficult to know whether the provider has filtered the\n\t\t\t\t// event, or just not run the goroutine yet. For now, use a\n\t\t\t\t// timeout (and consistently so it can fail early).\n\t\t\t\tg.Consistently(func() bool {\n\t\t\t\t\treturn req == nil\n\t\t\t\t}, \"1s\", \"0.1s\").Should(BeTrue())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 23,
                  "endLine": 398,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\tobj.SetName(event.InvolvedObject.Name)\n\tobj.SetNamespace(event.InvolvedObject.Namespace)\n\n\tif err := s.kubeClient.Get(ctx, types.NamespacedName{\n\t\tNamespace: event.InvolvedObject.Namespace,\n\t\tName:      event.InvolvedObject.Name,\n\t}, &obj); err != nil {\n",
                    "rendered": {
                      "text": "\tobj.SetName(event.InvolvedObject.Name)\n\tobj.SetNamespace(event.InvolvedObject.Namespace)\n\n\tif err := s.kubeClient.Get(ctx, types.NamespacedName{\n\t\tNamespace: event.InvolvedObject.Namespace,\n\t\tName:      event.InvolvedObject.Name,\n\t}, &obj); err != nil {\n",
                      "markdown": "`\tobj.SetName(event.InvolvedObject.Name)\n\tobj.SetNamespace(event.InvolvedObject.Namespace)\n\n\tif err := s.kubeClient.Get(ctx, types.NamespacedName{\n\t\tNamespace: event.InvolvedObject.Namespace,\n\t\tName:      event.InvolvedObject.Name,\n\t}, &obj); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 19,
                  "endLine": 323,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tvar secret corev1.Secret\n\t\tsecretName := types.NamespacedName{Namespace: provider.Namespace, Name: provider.Spec.CertSecretRef.Name}\n\n\t\terr := kubeClient.Get(ctx, secretName, &secret)\n\t\tif err != nil {\n\t\t\treturn nil, \"\", fmt.Errorf(\"failed to read cert secret: %w\", err)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tvar secret corev1.Secret\n\t\tsecretName := types.NamespacedName{Namespace: provider.Namespace, Name: provider.Spec.CertSecretRef.Name}\n\n\t\terr := kubeClient.Get(ctx, secretName, &secret)\n\t\tif err != nil {\n\t\t\treturn nil, \"\", fmt.Errorf(\"failed to read cert secret: %w\", err)\n\t\t}\n",
                      "markdown": "`\t\tvar secret corev1.Secret\n\t\tsecretName := types.NamespacedName{Namespace: provider.Namespace, Name: provider.Spec.CertSecretRef.Name}\n\n\t\terr := kubeClient.Get(ctx, secretName, &secret)\n\t\tif err != nil {\n\t\t\treturn nil, \"\", fmt.Errorf(\"failed to read cert secret: %w\", err)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 19,
                  "endLine": 278,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tvar secret corev1.Secret\n\t\tsecretName := types.NamespacedName{Namespace: provider.Namespace, Name: provider.Spec.SecretRef.Name}\n\n\t\terr := kubeClient.Get(ctx, secretName, &secret)\n\t\tif err != nil {\n\t\t\treturn nil, \"\", fmt.Errorf(\"failed to read secret: %w\", err)\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tvar secret corev1.Secret\n\t\tsecretName := types.NamespacedName{Namespace: provider.Namespace, Name: provider.Spec.SecretRef.Name}\n\n\t\terr := kubeClient.Get(ctx, secretName, &secret)\n\t\tif err != nil {\n\t\t\treturn nil, \"\", fmt.Errorf(\"failed to read secret: %w\", err)\n\t\t}\n",
                      "markdown": "`\t\tvar secret corev1.Secret\n\t\tsecretName := types.NamespacedName{Namespace: provider.Namespace, Name: provider.Spec.SecretRef.Name}\n\n\t\terr := kubeClient.Get(ctx, secretName, &secret)\n\t\tif err != nil {\n\t\t\treturn nil, \"\", fmt.Errorf(\"failed to read secret: %w\", err)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 20,
                  "endLine": 243,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tvar provider apiv1beta3.Provider\n\tproviderName := types.NamespacedName{Namespace: alert.Namespace, Name: alert.Spec.ProviderRef.Name}\n\n\terr := s.kubeClient.Get(ctx, providerName, &provider)\n\tif err != nil {\n\t\treturn nil, nil, \"\", 0, fmt.Errorf(\"failed to read provider: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\tvar provider apiv1beta3.Provider\n\tproviderName := types.NamespacedName{Namespace: alert.Namespace, Name: alert.Spec.ProviderRef.Name}\n\n\terr := s.kubeClient.Get(ctx, providerName, &provider)\n\tif err != nil {\n\t\treturn nil, nil, \"\", 0, fmt.Errorf(\"failed to read provider: %w\", err)\n\t}\n",
                      "markdown": "`\tvar provider apiv1beta3.Provider\n\tproviderName := types.NamespacedName{Namespace: alert.Namespace, Name: alert.Spec.ProviderRef.Name}\n\n\terr := s.kubeClient.Get(ctx, providerName, &provider)\n\tif err != nil {\n\t\treturn nil, nil, \"\", 0, fmt.Errorf(\"failed to read provider: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 13,
                  "endLine": 211,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\tgo func(n notifier.Interface, e eventv1.Event) {\n\t\tpctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tif err := n.Post(pctx, e); err != nil {\n\t\t\tmaskedErrStr, maskErr := masktoken.MaskTokenFromString(err.Error(), token)\n\t\t\tif maskErr != nil {\n\t\t\t\terr = maskErr\n",
                    "rendered": {
                      "text": "\tgo func(n notifier.Interface, e eventv1.Event) {\n\t\tpctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tif err := n.Post(pctx, e); err != nil {\n\t\t\tmaskedErrStr, maskErr := masktoken.MaskTokenFromString(err.Error(), token)\n\t\t\tif maskErr != nil {\n\t\t\t\terr = maskErr\n",
                      "markdown": "`\tgo func(n notifier.Interface, e eventv1.Event) {\n\t\tpctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tif err := n.Post(pctx, e); err != nil {\n\t\t\tmaskedErrStr, maskErr := masktoken.MaskTokenFromString(err.Error(), token)\n\t\t\tif maskErr != nil {\n\t\t\t\terr = maskErr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 107,
                  "endLine": 355,
                  "endColumn": 115,
                  "snippet": {
                    "text": "\t\treturn nil, \"\", fmt.Errorf(\"provider has no address\")\n\t}\n\n\tfactory := notifier.NewFactory(webhook, proxy, username, provider.Spec.Channel, token, headers, certPool, password, string(provider.UID))\n\tsender, err := factory.Notifier(provider.Spec.Type)\n\tif err != nil {\n\t\treturn nil, \"\", fmt.Errorf(\"failed to initialize notifier: %w\", err)\n",
                    "rendered": {
                      "text": "\t\treturn nil, \"\", fmt.Errorf(\"provider has no address\")\n\t}\n\n\tfactory := notifier.NewFactory(webhook, proxy, username, provider.Spec.Channel, token, headers, certPool, password, string(provider.UID))\n\tsender, err := factory.Notifier(provider.Spec.Type)\n\tif err != nil {\n\t\treturn nil, \"\", fmt.Errorf(\"failed to initialize notifier: %w\", err)\n",
                      "markdown": "`\t\treturn nil, \"\", fmt.Errorf(\"provider has no address\")\n\t}\n\n\tfactory := notifier.NewFactory(webhook, proxy, username, provider.Spec.Channel, token, headers, certPool, password, string(provider.UID))\n\tsender, err := factory.Notifier(provider.Spec.Type)\n\tif err != nil {\n\t\treturn nil, \"\", fmt.Errorf(\"failed to initialize notifier: %w\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 3,
                  "endLine": 291,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tif val, ok := secret.Data[\"password\"]; ok {\n\t\t\tpassword = strings.TrimSpace(string(val))\n\t\t}\n\n\t\tif val, ok := secret.Data[\"proxy\"]; ok {\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tif val, ok := secret.Data[\"password\"]; ok {\n\t\t\tpassword = strings.TrimSpace(string(val))\n\t\t}\n\n\t\tif val, ok := secret.Data[\"proxy\"]; ok {\n",
                      "markdown": "`\t\t}\n\n\t\tif val, ok := secret.Data[\"password\"]; ok {\n\t\t\tpassword = strings.TrimSpace(string(val))\n\t\t}\n\n\t\tif val, ok := secret.Data[\"proxy\"]; ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 29,
                  "endLine": 290,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\twebhook = strings.TrimSpace(string(val))\n\t\t}\n\n\t\tif val, ok := secret.Data[\"password\"]; ok {\n\t\t\tpassword = strings.TrimSpace(string(val))\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\twebhook = strings.TrimSpace(string(val))\n\t\t}\n\n\t\tif val, ok := secret.Data[\"password\"]; ok {\n\t\t\tpassword = strings.TrimSpace(string(val))\n\t\t}\n\n",
                      "markdown": "`\t\t\twebhook = strings.TrimSpace(string(val))\n\t\t}\n\n\t\tif val, ok := secret.Data[\"password\"]; ok {\n\t\t\tpassword = strings.TrimSpace(string(val))\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 1,
                  "endLine": 272,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tusername := provider.Spec.Username\n\tproxy := provider.Spec.Proxy\n\ttoken := \"\"\n\tpassword := \"\"\n\theaders := make(map[string]string)\n\tif provider.Spec.SecretRef != nil {\n\t\tvar secret corev1.Secret\n",
                    "rendered": {
                      "text": "\tusername := provider.Spec.Username\n\tproxy := provider.Spec.Proxy\n\ttoken := \"\"\n\tpassword := \"\"\n\theaders := make(map[string]string)\n\tif provider.Spec.SecretRef != nil {\n\t\tvar secret corev1.Secret\n",
                      "markdown": "`\tusername := provider.Spec.Username\n\tproxy := provider.Spec.Proxy\n\ttoken := \"\"\n\tpassword := \"\"\n\theaders := make(map[string]string)\n\tif provider.Spec.SecretRef != nil {\n\t\tvar secret corev1.Secret\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/internal/server/event_handlers.go"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 60,
                  "endLine": 228,
                  "endColumn": 69,
                  "snippet": {
                    "text": "}\n\n// getNotificationParams constructs the notification parameters from the given\n// event and alert, and returns a notifier, event, token and timeout for sending\n// the notification. The returned event is a mutated form of the input event\n// based on the alert configuration.\nfunc (s *EventServer) getNotificationParams(ctx context.Context, event *eventv1.Event, alert *apiv1beta3.Alert) (notifier.Interface, *eventv1.Event, string, time.Duration, error) {\n",
                    "rendered": {
                      "text": "}\n\n// getNotificationParams constructs the notification parameters from the given\n// event and alert, and returns a notifier, event, token and timeout for sending\n// the notification. The returned event is a mutated form of the input event\n// based on the alert configuration.\nfunc (s *EventServer) getNotificationParams(ctx context.Context, event *eventv1.Event, alert *apiv1beta3.Alert) (notifier.Interface, *eventv1.Event, string, time.Duration, error) {\n",
                      "markdown": "`}\n\n// getNotificationParams constructs the notification parameters from the given\n// event and alert, and returns a notifier, event, token and timeout for sending\n// the notification. The returned event is a mutated form of the input event\n// based on the alert configuration.\nfunc (s *EventServer) getNotificationParams(ctx context.Context, event *eventv1.Event, alert *apiv1beta3.Alert) (notifier.Interface, *eventv1.Event, string, time.Duration, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 7,
                  "endLine": 83,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  [#796](https://github.com/fluxcd/notification-controller/pull/796)\n- Alertmanager: Change timestamp label to .StartsAt\n  [#795](https://github.com/fluxcd/notification-controller/pull/795)\n- Use `password` as fallback for the Git provider `token` auth\n  [#790](https://github.com/fluxcd/notification-controller/pull/790)\n- Add support for Bitbucket Context path\n  [#747](https://github.com/fluxcd/notification-controller/pull/747)\n",
                    "rendered": {
                      "text": "  [#796](https://github.com/fluxcd/notification-controller/pull/796)\n- Alertmanager: Change timestamp label to .StartsAt\n  [#795](https://github.com/fluxcd/notification-controller/pull/795)\n- Use `password` as fallback for the Git provider `token` auth\n  [#790](https://github.com/fluxcd/notification-controller/pull/790)\n- Add support for Bitbucket Context path\n  [#747](https://github.com/fluxcd/notification-controller/pull/747)\n",
                      "markdown": "`  [#796](https://github.com/fluxcd/notification-controller/pull/796)\n- Alertmanager: Change timestamp label to .StartsAt\n  [#795](https://github.com/fluxcd/notification-controller/pull/795)\n- Use `password` as fallback for the Git provider `token` auth\n  [#790](https://github.com/fluxcd/notification-controller/pull/790)\n- Add support for Bitbucket Context path\n  [#747](https://github.com/fluxcd/notification-controller/pull/747)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 45,
                  "endLine": 1566,
                  "endColumn": 49,
                  "snippet": {
                    "text": "**Release date:** 2020-09-12\n\nThis prerelease comes with the option to watch for resources\nin the runtime namespace of the controller or at cluster level.\n\n## 0.0.9\n\n",
                    "rendered": {
                      "text": "**Release date:** 2020-09-12\n\nThis prerelease comes with the option to watch for resources\nin the runtime namespace of the controller or at cluster level.\n\n## 0.0.9\n\n",
                      "markdown": "`**Release date:** 2020-09-12\n\nThis prerelease comes with the option to watch for resources\nin the runtime namespace of the controller or at cluster level.\n\n## 0.0.9\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1412,
                  "startColumn": 1,
                  "endLine": 1412,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#118](https://github.com/fluxcd/notification-controller/pull/118)\n\nImprovements:\n* Update Kubernetes packages to v1.20.2\n  [#119](https://github.com/fluxcd/notification-controller/pull/119)\n\n## 0.6.1\n",
                    "rendered": {
                      "text": "  [#118](https://github.com/fluxcd/notification-controller/pull/118)\n\nImprovements:\n* Update Kubernetes packages to v1.20.2\n  [#119](https://github.com/fluxcd/notification-controller/pull/119)\n\n## 0.6.1\n",
                      "markdown": "`  [#118](https://github.com/fluxcd/notification-controller/pull/118)\n\nImprovements:\n* Update Kubernetes packages to v1.20.2\n  [#119](https://github.com/fluxcd/notification-controller/pull/119)\n\n## 0.6.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1393,
                  "startColumn": 1,
                  "endLine": 1393,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#124](https://github.com/fluxcd/notification-controller/pull/124)\n* Allow ImageUpdateAutomations in object refs\n  [#128](https://github.com/fluxcd/notification-controller/pull/128)\n* Update fluxcd/pkg/runtime to v0.8.0\n  [#129](https://github.com/fluxcd/notification-controller/pull/129)\n  \n## 0.6.2\n",
                    "rendered": {
                      "text": "  [#124](https://github.com/fluxcd/notification-controller/pull/124)\n* Allow ImageUpdateAutomations in object refs\n  [#128](https://github.com/fluxcd/notification-controller/pull/128)\n* Update fluxcd/pkg/runtime to v0.8.0\n  [#129](https://github.com/fluxcd/notification-controller/pull/129)\n  \n## 0.6.2\n",
                      "markdown": "`  [#124](https://github.com/fluxcd/notification-controller/pull/124)\n* Allow ImageUpdateAutomations in object refs\n  [#128](https://github.com/fluxcd/notification-controller/pull/128)\n* Update fluxcd/pkg/runtime to v0.8.0\n  [#129](https://github.com/fluxcd/notification-controller/pull/129)\n  \n## 0.6.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1369,
                  "startColumn": 44,
                  "endLine": 1369,
                  "endColumn": 52,
                  "snippet": {
                    "text": "The `Receiver` API gains a new webhook type called `generic-hmac`,\nthat validates the caller legitimacy using HMAC signatures.\n\nThe `Alert` API comes with support for image update notifications\nand is now possible to trigger container image updates to Git\nusing Sonatype Nexus webhooks.\n\n",
                    "rendered": {
                      "text": "The `Receiver` API gains a new webhook type called `generic-hmac`,\nthat validates the caller legitimacy using HMAC signatures.\n\nThe `Alert` API comes with support for image update notifications\nand is now possible to trigger container image updates to Git\nusing Sonatype Nexus webhooks.\n\n",
                      "markdown": "`The `Receiver` API gains a new webhook type called `generic-hmac`,\nthat validates the caller legitimacy using HMAC signatures.\n\nThe `Alert` API comes with support for image update notifications\nand is now possible to trigger container image updates to Git\nusing Sonatype Nexus webhooks.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 1,
                  "endLine": 1299,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#156](https://github.com/fluxcd/notification-controller/pull/156)\n* Use unstructured client to annotate receiver targets\n  [#151](https://github.com/fluxcd/notification-controller/pull/151)\n* Update runtime dependencies\n  [#157](https://github.com/fluxcd/notification-controller/pull/157)\n\nFixes:\n",
                    "rendered": {
                      "text": "  [#156](https://github.com/fluxcd/notification-controller/pull/156)\n* Use unstructured client to annotate receiver targets\n  [#151](https://github.com/fluxcd/notification-controller/pull/151)\n* Update runtime dependencies\n  [#157](https://github.com/fluxcd/notification-controller/pull/157)\n\nFixes:\n",
                      "markdown": "`  [#156](https://github.com/fluxcd/notification-controller/pull/156)\n* Use unstructured client to annotate receiver targets\n  [#151](https://github.com/fluxcd/notification-controller/pull/151)\n* Update runtime dependencies\n  [#157](https://github.com/fluxcd/notification-controller/pull/157)\n\nFixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1229,
                  "startColumn": 38,
                  "endLine": 1229,
                  "endColumn": 42,
                  "snippet": {
                    "text": "but can be configured with the `--rate-limit-interval` command arg.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n```\n",
                    "rendered": {
                      "text": "but can be configured with the `--rate-limit-interval` command arg.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n```\n",
                      "markdown": "`but can be configured with the `--rate-limit-interval` command arg.\n\nThe event server exposes HTTP request metrics to track the amount of rate limited events.\nThe following promql will get the rate at which requests are rate limited:\n```\nrate(gotk_event_http_request_duration_seconds_count{code=\"429\"}[30s])\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 1,
                  "endLine": 1173,
                  "endColumn": 9,
                  "snippet": {
                    "text": "dependencies to align them with the Kubernetes 1.21 release.\n\nImprovements:\n* Update Kubernetes dependencies\n  [#210](https://github.com/fluxcd/notification-controller/pull/210)\n* Add cert pool to Slack provider requests\n  [#207](https://github.com/fluxcd/notification-controller/pull/207)\n",
                    "rendered": {
                      "text": "dependencies to align them with the Kubernetes 1.21 release.\n\nImprovements:\n* Update Kubernetes dependencies\n  [#210](https://github.com/fluxcd/notification-controller/pull/210)\n* Add cert pool to Slack provider requests\n  [#207](https://github.com/fluxcd/notification-controller/pull/207)\n",
                      "markdown": "`dependencies to align them with the Kubernetes 1.21 release.\n\nImprovements:\n* Update Kubernetes dependencies\n  [#210](https://github.com/fluxcd/notification-controller/pull/210)\n* Add cert pool to Slack provider requests\n  [#207](https://github.com/fluxcd/notification-controller/pull/207)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1169,
                  "startColumn": 29,
                  "endLine": 1169,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n**Release date:** 2021-06-08\n\nThis prerelease comes with an update to the Kubernetes and controller-runtime\ndependencies to align them with the Kubernetes 1.21 release.\n\nImprovements:\n",
                    "rendered": {
                      "text": "\n**Release date:** 2021-06-08\n\nThis prerelease comes with an update to the Kubernetes and controller-runtime\ndependencies to align them with the Kubernetes 1.21 release.\n\nImprovements:\n",
                      "markdown": "`\n**Release date:** 2021-06-08\n\nThis prerelease comes with an update to the Kubernetes and controller-runtime\ndependencies to align them with the Kubernetes 1.21 release.\n\nImprovements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 1,
                  "endLine": 1158,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#223](https://github.com/fluxcd/notification-controller/pull/223)\n* Request reconcile using patch instead of update\n  [#217](https://github.com/fluxcd/notification-controller/pull/217) \n* Update dependencies\n  [#226](https://github.com/fluxcd/notification-controller/pull/226)\n\nFixes:\n",
                    "rendered": {
                      "text": "  [#223](https://github.com/fluxcd/notification-controller/pull/223)\n* Request reconcile using patch instead of update\n  [#217](https://github.com/fluxcd/notification-controller/pull/217) \n* Update dependencies\n  [#226](https://github.com/fluxcd/notification-controller/pull/226)\n\nFixes:\n",
                      "markdown": "`  [#223](https://github.com/fluxcd/notification-controller/pull/223)\n* Request reconcile using patch instead of update\n  [#217](https://github.com/fluxcd/notification-controller/pull/217) \n* Update dependencies\n  [#226](https://github.com/fluxcd/notification-controller/pull/226)\n\nFixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1156,
                  "startColumn": 42,
                  "endLine": 1157,
                  "snippet": {
                    "text": "  [#224](https://github.com/fluxcd/notification-controller/pull/224)\n* providers/sentry: add environment support\n  [#223](https://github.com/fluxcd/notification-controller/pull/223)\n* Request reconcile using patch instead of update\n  [#217](https://github.com/fluxcd/notification-controller/pull/217) \n* Update dependencies\n  [#226](https://github.com/fluxcd/notification-controller/pull/226)\n\n",
                    "rendered": {
                      "text": "  [#224](https://github.com/fluxcd/notification-controller/pull/224)\n* providers/sentry: add environment support\n  [#223](https://github.com/fluxcd/notification-controller/pull/223)\n* Request reconcile using patch instead of update\n  [#217](https://github.com/fluxcd/notification-controller/pull/217) \n* Update dependencies\n  [#226](https://github.com/fluxcd/notification-controller/pull/226)\n\n",
                      "markdown": "`  [#224](https://github.com/fluxcd/notification-controller/pull/224)\n* providers/sentry: add environment support\n  [#223](https://github.com/fluxcd/notification-controller/pull/223)\n* Request reconcile using patch instead of update\n  [#217](https://github.com/fluxcd/notification-controller/pull/217) \n* Update dependencies\n  [#226](https://github.com/fluxcd/notification-controller/pull/226)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1071,
                  "startColumn": 1,
                  "endLine": 1071,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#282](https://github.com/fluxcd/notification-controller/pull/282)\n* Update Alpine to v3.14\n  [#285](https://github.com/fluxcd/notification-controller/pull/285)\n* Update controller-runtime v0.10.2\n  [#289](https://github.com/fluxcd/notification-controller/pull/289)\n\nFixes:\n",
                    "rendered": {
                      "text": "  [#282](https://github.com/fluxcd/notification-controller/pull/282)\n* Update Alpine to v3.14\n  [#285](https://github.com/fluxcd/notification-controller/pull/285)\n* Update controller-runtime v0.10.2\n  [#289](https://github.com/fluxcd/notification-controller/pull/289)\n\nFixes:\n",
                      "markdown": "`  [#282](https://github.com/fluxcd/notification-controller/pull/282)\n* Update Alpine to v3.14\n  [#285](https://github.com/fluxcd/notification-controller/pull/285)\n* Update controller-runtime v0.10.2\n  [#289](https://github.com/fluxcd/notification-controller/pull/289)\n\nFixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 1,
                  "endLine": 1069,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#277](https://github.com/fluxcd/notification-controller/pull/277)\n* Use condition helpers in reconciler (kstatus compat)\n  [#282](https://github.com/fluxcd/notification-controller/pull/282)\n* Update Alpine to v3.14\n  [#285](https://github.com/fluxcd/notification-controller/pull/285)\n* Update controller-runtime v0.10.2\n  [#289](https://github.com/fluxcd/notification-controller/pull/289)\n",
                    "rendered": {
                      "text": "  [#277](https://github.com/fluxcd/notification-controller/pull/277)\n* Use condition helpers in reconciler (kstatus compat)\n  [#282](https://github.com/fluxcd/notification-controller/pull/282)\n* Update Alpine to v3.14\n  [#285](https://github.com/fluxcd/notification-controller/pull/285)\n* Update controller-runtime v0.10.2\n  [#289](https://github.com/fluxcd/notification-controller/pull/289)\n",
                      "markdown": "`  [#277](https://github.com/fluxcd/notification-controller/pull/277)\n* Use condition helpers in reconciler (kstatus compat)\n  [#282](https://github.com/fluxcd/notification-controller/pull/282)\n* Update Alpine to v3.14\n  [#285](https://github.com/fluxcd/notification-controller/pull/285)\n* Update controller-runtime v0.10.2\n  [#289](https://github.com/fluxcd/notification-controller/pull/289)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 1,
                  "endLine": 1041,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n* Update docs for telegram\n  [#300](https://github.com/fluxcd/notification-controller/pull/300)\n\n## 0.19.0\n",
                    "rendered": {
                      "text": "  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n* Update docs for telegram\n  [#300](https://github.com/fluxcd/notification-controller/pull/300)\n\n## 0.19.0\n",
                      "markdown": "`  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n* Update docs for telegram\n  [#300](https://github.com/fluxcd/notification-controller/pull/300)\n\n## 0.19.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1039,
                  "startColumn": 1,
                  "endLine": 1039,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n* Update docs for telegram\n  [#300](https://github.com/fluxcd/notification-controller/pull/300)\n",
                    "rendered": {
                      "text": "  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n* Update docs for telegram\n  [#300](https://github.com/fluxcd/notification-controller/pull/300)\n",
                      "markdown": "`  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n* Update docs for telegram\n  [#300](https://github.com/fluxcd/notification-controller/pull/300)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 1,
                  "endLine": 1037,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* Update Go to v1.17 and controller-runtime to v0.11\n  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n",
                    "rendered": {
                      "text": "Improvements:\n* Update Go to v1.17 and controller-runtime to v0.11\n  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n",
                      "markdown": "`Improvements:\n* Update Go to v1.17 and controller-runtime to v0.11\n  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n* Update Dockerfile xx base and bump alpine to 3.15\n  [#297](https://github.com/fluxcd/notification-controller/pull/297)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 1,
                  "endLine": 1035,
                  "endColumn": 9,
                  "snippet": {
                    "text": "In addition, the controller is now built with Go 1.17 and Alpine 3.15.\n\nImprovements:\n* Update Go to v1.17 and controller-runtime to v0.11\n  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n",
                    "rendered": {
                      "text": "In addition, the controller is now built with Go 1.17 and Alpine 3.15.\n\nImprovements:\n* Update Go to v1.17 and controller-runtime to v0.11\n  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n",
                      "markdown": "`In addition, the controller is now built with Go 1.17 and Alpine 3.15.\n\nImprovements:\n* Update Go to v1.17 and controller-runtime to v0.11\n  [#279](https://github.com/fluxcd/notification-controller/pull/279)\n* Update dependencies (fix CVE-2021-43565)\n  [#301](https://github.com/fluxcd/notification-controller/pull/301)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1029,
                  "startColumn": 29,
                  "endLine": 1029,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n**Release date:** 2022-01-11\n\nThis prerelease comes with an update to the Kubernetes and controller-runtime dependencies\nto align them with the Kubernetes 1.23 release.\n\nIn addition, the controller is now built with Go 1.17 and Alpine 3.15.\n",
                    "rendered": {
                      "text": "\n**Release date:** 2022-01-11\n\nThis prerelease comes with an update to the Kubernetes and controller-runtime dependencies\nto align them with the Kubernetes 1.23 release.\n\nIn addition, the controller is now built with Go 1.17 and Alpine 3.15.\n",
                      "markdown": "`\n**Release date:** 2022-01-11\n\nThis prerelease comes with an update to the Kubernetes and controller-runtime dependencies\nto align them with the Kubernetes 1.23 release.\n\nIn addition, the controller is now built with Go 1.17 and Alpine 3.15.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1002,
                  "startColumn": 1,
                  "endLine": 1002,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#306](https://github.com/fluxcd/notification-controller/pull/306)\n* Add documentation for gitea\n  [#308](https://github.com/fluxcd/notification-controller/pull/308)\n* Update development documentation\n  [#309](https://github.com/fluxcd/notification-controller/pull/309)\n\nFixes:\n",
                    "rendered": {
                      "text": "  [#306](https://github.com/fluxcd/notification-controller/pull/306)\n* Add documentation for gitea\n  [#308](https://github.com/fluxcd/notification-controller/pull/308)\n* Update development documentation\n  [#309](https://github.com/fluxcd/notification-controller/pull/309)\n\nFixes:\n",
                      "markdown": "`  [#306](https://github.com/fluxcd/notification-controller/pull/306)\n* Add documentation for gitea\n  [#308](https://github.com/fluxcd/notification-controller/pull/308)\n* Update development documentation\n  [#309](https://github.com/fluxcd/notification-controller/pull/309)\n\nFixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 960,
                  "startColumn": 1,
                  "endLine": 960,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- Add Grafana alerting provider [#322](https://github.com/fluxcd/notification-controller/pull/322)\n\nImprovements:\n- Update documentation for alert provider type [#321](https://github.com/fluxcd/notification-controller/pull/321)\n- Make username and channel field optional for Discord provider [#324](https://github.com/fluxcd/notification-controller/pull/324)\n\n## 0.21.0\n",
                    "rendered": {
                      "text": "- Add Grafana alerting provider [#322](https://github.com/fluxcd/notification-controller/pull/322)\n\nImprovements:\n- Update documentation for alert provider type [#321](https://github.com/fluxcd/notification-controller/pull/321)\n- Make username and channel field optional for Discord provider [#324](https://github.com/fluxcd/notification-controller/pull/324)\n\n## 0.21.0\n",
                      "markdown": "`- Add Grafana alerting provider [#322](https://github.com/fluxcd/notification-controller/pull/322)\n\nImprovements:\n- Update documentation for alert provider type [#321](https://github.com/fluxcd/notification-controller/pull/321)\n- Make username and channel field optional for Discord provider [#324](https://github.com/fluxcd/notification-controller/pull/324)\n\n## 0.21.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 1,
                  "endLine": 944,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#331](https://github.com/fluxcd/notification-controller/pull/331)\n- Switch to controller-runtime metadata client\n  [#330](https://github.com/fluxcd/notification-controller/pull/330)\n- Update dependencies\n  [#333](https://github.com/fluxcd/notification-controller/pull/333)\n\n## 0.22.0\n",
                    "rendered": {
                      "text": "  [#331](https://github.com/fluxcd/notification-controller/pull/331)\n- Switch to controller-runtime metadata client\n  [#330](https://github.com/fluxcd/notification-controller/pull/330)\n- Update dependencies\n  [#333](https://github.com/fluxcd/notification-controller/pull/333)\n\n## 0.22.0\n",
                      "markdown": "`  [#331](https://github.com/fluxcd/notification-controller/pull/331)\n- Switch to controller-runtime metadata client\n  [#330](https://github.com/fluxcd/notification-controller/pull/330)\n- Update dependencies\n  [#333](https://github.com/fluxcd/notification-controller/pull/333)\n\n## 0.22.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 1,
                  "endLine": 920,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fix any warnings.\n\nImprovements:\n- Update dependencies\n  [#338](https://github.com/fluxcd/notification-controller/pull/338)\n- add fsgroup for securityContext\n  [#342](https://github.com/fluxcd/notification-controller/pull/342)\n",
                    "rendered": {
                      "text": "fix any warnings.\n\nImprovements:\n- Update dependencies\n  [#338](https://github.com/fluxcd/notification-controller/pull/338)\n- add fsgroup for securityContext\n  [#342](https://github.com/fluxcd/notification-controller/pull/342)\n",
                      "markdown": "`fix any warnings.\n\nImprovements:\n- Update dependencies\n  [#338](https://github.com/fluxcd/notification-controller/pull/338)\n- add fsgroup for securityContext\n  [#342](https://github.com/fluxcd/notification-controller/pull/342)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 1,
                  "endLine": 902,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n- Update `pkg/runtime` and `apis/meta`\n  [#345](https://github.com/fluxcd/notification-controller/pull/345)\n- Update dependencies\n  [#346](https://github.com/fluxcd/notification-controller/pull/346)\n- Cleanup metadata fields before alerting\n  [#347](https://github.com/fluxcd/notification-controller/pull/347)\n",
                    "rendered": {
                      "text": "Improvements:\n- Update `pkg/runtime` and `apis/meta`\n  [#345](https://github.com/fluxcd/notification-controller/pull/345)\n- Update dependencies\n  [#346](https://github.com/fluxcd/notification-controller/pull/346)\n- Cleanup metadata fields before alerting\n  [#347](https://github.com/fluxcd/notification-controller/pull/347)\n",
                      "markdown": "`Improvements:\n- Update `pkg/runtime` and `apis/meta`\n  [#345](https://github.com/fluxcd/notification-controller/pull/345)\n- Update dependencies\n  [#346](https://github.com/fluxcd/notification-controller/pull/346)\n- Cleanup metadata fields before alerting\n  [#347](https://github.com/fluxcd/notification-controller/pull/347)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 1,
                  "endLine": 900,
                  "endColumn": 9,
                  "snippet": {
                    "text": "The code base was refactored to align with `fluxcd/pkg/runtime` v0.13 release.\n\nImprovements:\n- Update `pkg/runtime` and `apis/meta`\n  [#345](https://github.com/fluxcd/notification-controller/pull/345)\n- Update dependencies\n  [#346](https://github.com/fluxcd/notification-controller/pull/346)\n",
                    "rendered": {
                      "text": "The code base was refactored to align with `fluxcd/pkg/runtime` v0.13 release.\n\nImprovements:\n- Update `pkg/runtime` and `apis/meta`\n  [#345](https://github.com/fluxcd/notification-controller/pull/345)\n- Update dependencies\n  [#346](https://github.com/fluxcd/notification-controller/pull/346)\n",
                      "markdown": "`The code base was refactored to align with `fluxcd/pkg/runtime` v0.13 release.\n\nImprovements:\n- Update `pkg/runtime` and `apis/meta`\n  [#345](https://github.com/fluxcd/notification-controller/pull/345)\n- Update dependencies\n  [#346](https://github.com/fluxcd/notification-controller/pull/346)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 1,
                  "endLine": 877,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#352](https://github.com/fluxcd/notification-controller/pull/352)\n- Align version of dependencies when Fuzzing\n  [#354](https://github.com/fluxcd/notification-controller/pull/354)\n- Update fluxcd/pkg/runtime to v0.13.4\n  [#355](https://github.com/fluxcd/notification-controller/pull/355)\n\n## 0.23.1\n",
                    "rendered": {
                      "text": "  [#352](https://github.com/fluxcd/notification-controller/pull/352)\n- Align version of dependencies when Fuzzing\n  [#354](https://github.com/fluxcd/notification-controller/pull/354)\n- Update fluxcd/pkg/runtime to v0.13.4\n  [#355](https://github.com/fluxcd/notification-controller/pull/355)\n\n## 0.23.1\n",
                      "markdown": "`  [#352](https://github.com/fluxcd/notification-controller/pull/352)\n- Align version of dependencies when Fuzzing\n  [#354](https://github.com/fluxcd/notification-controller/pull/354)\n- Update fluxcd/pkg/runtime to v0.13.4\n  [#355](https://github.com/fluxcd/notification-controller/pull/355)\n\n## 0.23.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 1,
                  "endLine": 873,
                  "endColumn": 9,
                  "snippet": {
                    "text": "In addition, various dependencies have been updated to their latest versions.\n\nImprovements:\n- Update the webex notification provider and markdown\n  [#352](https://github.com/fluxcd/notification-controller/pull/352)\n- Align version of dependencies when Fuzzing\n  [#354](https://github.com/fluxcd/notification-controller/pull/354)\n",
                    "rendered": {
                      "text": "In addition, various dependencies have been updated to their latest versions.\n\nImprovements:\n- Update the webex notification provider and markdown\n  [#352](https://github.com/fluxcd/notification-controller/pull/352)\n- Align version of dependencies when Fuzzing\n  [#354](https://github.com/fluxcd/notification-controller/pull/354)\n",
                      "markdown": "`In addition, various dependencies have been updated to their latest versions.\n\nImprovements:\n- Update the webex notification provider and markdown\n  [#352](https://github.com/fluxcd/notification-controller/pull/352)\n- Align version of dependencies when Fuzzing\n  [#354](https://github.com/fluxcd/notification-controller/pull/354)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 1,
                  "endLine": 856,
                  "endColumn": 9,
                  "snippet": {
                    "text": "tokens. Furthermore, dependencies have been updated to their latest versions.\n\nImprovements:\n- Update dependencies\n  [#364](https://github.com/fluxcd/notification-controller/pull/364)\n\nFixes:\n",
                    "rendered": {
                      "text": "tokens. Furthermore, dependencies have been updated to their latest versions.\n\nImprovements:\n- Update dependencies\n  [#364](https://github.com/fluxcd/notification-controller/pull/364)\n\nFixes:\n",
                      "markdown": "`tokens. Furthermore, dependencies have been updated to their latest versions.\n\nImprovements:\n- Update dependencies\n  [#364](https://github.com/fluxcd/notification-controller/pull/364)\n\nFixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 845,
                  "startColumn": 1,
                  "endLine": 845,
                  "endColumn": 9,
                  "snippet": {
                    "text": "please static security analysers (CVE-2022-27191).\n\nFixes:\n- Update golang.org/x/crypto\n  [#367](https://github.com/fluxcd/notification-controller/pull/367)\n\n## 0.23.3\n",
                    "rendered": {
                      "text": "please static security analysers (CVE-2022-27191).\n\nFixes:\n- Update golang.org/x/crypto\n  [#367](https://github.com/fluxcd/notification-controller/pull/367)\n\n## 0.23.3\n",
                      "markdown": "`please static security analysers (CVE-2022-27191).\n\nFixes:\n- Update golang.org/x/crypto\n  [#367](https://github.com/fluxcd/notification-controller/pull/367)\n\n## 0.23.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 834,
                  "startColumn": 1,
                  "endLine": 834,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n- Check for duplicate commit status in Bitbucket\n  [#366](https://github.com/fluxcd/notification-controller/pull/366)\n- Update dependencies\n  [#371](https://github.com/fluxcd/notification-controller/pull/371)\n\n## 0.23.4\n",
                    "rendered": {
                      "text": "Improvements:\n- Check for duplicate commit status in Bitbucket\n  [#366](https://github.com/fluxcd/notification-controller/pull/366)\n- Update dependencies\n  [#371](https://github.com/fluxcd/notification-controller/pull/371)\n\n## 0.23.4\n",
                      "markdown": "`Improvements:\n- Check for duplicate commit status in Bitbucket\n  [#366](https://github.com/fluxcd/notification-controller/pull/366)\n- Update dependencies\n  [#371](https://github.com/fluxcd/notification-controller/pull/371)\n\n## 0.23.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 819,
                  "startColumn": 1,
                  "endLine": 819,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#375](https://github.com/fluxcd/notification-controller/pull/375)\n* Add docs for Microsoft Teams\n  [#370](https://github.com/fluxcd/notification-controller/pull/370)\n* Update dependencies\n  [#371](https://github.com/fluxcd/notification-controller/pull/371)\n  [#373](https://github.com/fluxcd/notification-controller/pull/373)\n  [#379](https://github.com/fluxcd/notification-controller/pull/379)\n",
                    "rendered": {
                      "text": "  [#375](https://github.com/fluxcd/notification-controller/pull/375)\n* Add docs for Microsoft Teams\n  [#370](https://github.com/fluxcd/notification-controller/pull/370)\n* Update dependencies\n  [#371](https://github.com/fluxcd/notification-controller/pull/371)\n  [#373](https://github.com/fluxcd/notification-controller/pull/373)\n  [#379](https://github.com/fluxcd/notification-controller/pull/379)\n",
                      "markdown": "`  [#375](https://github.com/fluxcd/notification-controller/pull/375)\n* Add docs for Microsoft Teams\n  [#370](https://github.com/fluxcd/notification-controller/pull/370)\n* Update dependencies\n  [#371](https://github.com/fluxcd/notification-controller/pull/371)\n  [#373](https://github.com/fluxcd/notification-controller/pull/373)\n  [#379](https://github.com/fluxcd/notification-controller/pull/379)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 1,
                  "endLine": 797,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n* build: Upgrade to Go 1.18 [#389](https://github.com/fluxcd/notification-controller/pull/389)\n\n",
                    "rendered": {
                      "text": "* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n* build: Upgrade to Go 1.18 [#389](https://github.com/fluxcd/notification-controller/pull/389)\n\n",
                      "markdown": "`* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n* build: Upgrade to Go 1.18 [#389](https://github.com/fluxcd/notification-controller/pull/389)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 1,
                  "endLine": 796,
                  "endColumn": 9,
                  "snippet": {
                    "text": "inor improvements and updates dependencies\nto patch upstream CVEs.\n\nImprovements:\n* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n* build: Upgrade ",
                    "rendered": {
                      "text": "inor improvements and updates dependencies\nto patch upstream CVEs.\n\nImprovements:\n* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n* build: Upgrade ",
                      "markdown": "`inor improvements and updates dependencies\nto patch upstream CVEs.\n\nImprovements:\n* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n* build: Upgrade `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 1,
                  "endLine": 795,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nImprovements:\n* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n",
                    "rendered": {
                      "text": "\nImprovements:\n* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n",
                      "markdown": "`\nImprovements:\n* Force github.com/emicklei/go-restful to v2.16.0 [#390](https://github.com/fluxcd/notification-controller/pull/390)\n* Update flux types api versions [#381](https://github.com/fluxcd/notification-controller/pull/381)\n* Update Azure DevOps Go API [#384](https://github.com/fluxcd/notification-controller/pull/384)\n* Update dependencies [#387](https://github.com/fluxcd/notification-controller/pull/387)\n* Use masktoken pkg for redacting token [#388](https://github.com/fluxcd/notification-controller/pull/388)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 1,
                  "endLine": 781,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* Add OCIRepository event source\n  [#396](https://github.com/fluxcd/notification-controller/pull/396)\n* Update dependencies\n  [#397](https://github.com/fluxcd/notification-controller/pull/397)\n* Add missing language to fenced code block\n  [#394](https://github.com/fluxcd/notification-controller/pull/394)\n",
                    "rendered": {
                      "text": "Improvements:\n* Add OCIRepository event source\n  [#396](https://github.com/fluxcd/notification-controller/pull/396)\n* Update dependencies\n  [#397](https://github.com/fluxcd/notification-controller/pull/397)\n* Add missing language to fenced code block\n  [#394](https://github.com/fluxcd/notification-controller/pull/394)\n",
                      "markdown": "`Improvements:\n* Add OCIRepository event source\n  [#396](https://github.com/fluxcd/notification-controller/pull/396)\n* Update dependencies\n  [#397](https://github.com/fluxcd/notification-controller/pull/397)\n* Add missing language to fenced code block\n  [#394](https://github.com/fluxcd/notification-controller/pull/394)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 1,
                  "endLine": 750,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* Enables RecoverPanic option on reconcilers\n  [#403](https://github.com/fluxcd/notification-controller/pull/403)\n* Update Kubernetes packages to v1.25.0\n  [#407](https://github.com/fluxcd/notification-controller/pull/407)\n\n## 0.25.1\n",
                    "rendered": {
                      "text": "Improvements:\n* Enables RecoverPanic option on reconcilers\n  [#403](https://github.com/fluxcd/notification-controller/pull/403)\n* Update Kubernetes packages to v1.25.0\n  [#407](https://github.com/fluxcd/notification-controller/pull/407)\n\n## 0.25.1\n",
                      "markdown": "`Improvements:\n* Enables RecoverPanic option on reconcilers\n  [#403](https://github.com/fluxcd/notification-controller/pull/403)\n* Update Kubernetes packages to v1.25.0\n  [#407](https://github.com/fluxcd/notification-controller/pull/407)\n\n## 0.25.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 1,
                  "endLine": 703,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* api: add custom validation for v1.Duration types\n  [#420](https://github.com/fluxcd/notification-controller/pull/420)\n* Update dependencies\n  [#423](https://github.com/fluxcd/notification-controller/pull/423)\n* Dockerfile: Build with Go 1.19\n  [#424](https://github.com/fluxcd/notification-controller/pull/424)\n",
                    "rendered": {
                      "text": "Improvements:\n* api: add custom validation for v1.Duration types\n  [#420](https://github.com/fluxcd/notification-controller/pull/420)\n* Update dependencies\n  [#423](https://github.com/fluxcd/notification-controller/pull/423)\n* Dockerfile: Build with Go 1.19\n  [#424](https://github.com/fluxcd/notification-controller/pull/424)\n",
                      "markdown": "`Improvements:\n* api: add custom validation for v1.Duration types\n  [#420](https://github.com/fluxcd/notification-controller/pull/420)\n* Update dependencies\n  [#423](https://github.com/fluxcd/notification-controller/pull/423)\n* Dockerfile: Build with Go 1.19\n  [#424](https://github.com/fluxcd/notification-controller/pull/424)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 1,
                  "endLine": 681,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#426](https://github.com/fluxcd/notification-controller/pull/426)\n\nImprovements:\n* Update dependencies\n  [#430](https://github.com/fluxcd/notification-controller/pull/430)\n\n## 0.27.0\n",
                    "rendered": {
                      "text": "  [#426](https://github.com/fluxcd/notification-controller/pull/426)\n\nImprovements:\n* Update dependencies\n  [#430](https://github.com/fluxcd/notification-controller/pull/430)\n\n## 0.27.0\n",
                      "markdown": "`  [#426](https://github.com/fluxcd/notification-controller/pull/426)\n\nImprovements:\n* Update dependencies\n  [#430](https://github.com/fluxcd/notification-controller/pull/430)\n\n## 0.27.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 7,
                  "endLine": 663,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* Update dependencies\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* docs: update spec to reflect v1beta1 Event API\n  [#443](https://github.com/fluxcd/notification-controller/pull/443)\n\n## 0.28.0\n",
                    "rendered": {
                      "text": "  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* Update dependencies\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* docs: update spec to reflect v1beta1 Event API\n  [#443](https://github.com/fluxcd/notification-controller/pull/443)\n\n## 0.28.0\n",
                      "markdown": "`  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* Update dependencies\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* docs: update spec to reflect v1beta1 Event API\n  [#443](https://github.com/fluxcd/notification-controller/pull/443)\n\n## 0.28.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 1,
                  "endLine": 661,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* Refactor notifiers to use Flux Event v1beta1 API\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* Update dependencies\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* docs: update spec to reflect v1beta1 Event API\n  [#443](https://github.com/fluxcd/notification-controller/pull/443)\n",
                    "rendered": {
                      "text": "Improvements:\n* Refactor notifiers to use Flux Event v1beta1 API\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* Update dependencies\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* docs: update spec to reflect v1beta1 Event API\n  [#443](https://github.com/fluxcd/notification-controller/pull/443)\n",
                      "markdown": "`Improvements:\n* Refactor notifiers to use Flux Event v1beta1 API\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* Update dependencies\n  [#442](https://github.com/fluxcd/notification-controller/pull/442)\n* docs: update spec to reflect v1beta1 Event API\n  [#443](https://github.com/fluxcd/notification-controller/pull/443)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 54,
                  "endLine": 591,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n### `notification.toolkit.fluxcd.io/v1beta2`\n\nAfter upgrading the controller to v0.30.0, you need to update the notification\n**Custom Resources** in Git\nby replacing `notification.toolkit.fluxcd.io/v1beta1` with\n`notification.toolkit.fluxcd.io/v1beta2` in all YAML manifests.\n",
                    "rendered": {
                      "text": "\n### `notification.toolkit.fluxcd.io/v1beta2`\n\nAfter upgrading the controller to v0.30.0, you need to update the notification\n**Custom Resources** in Git\nby replacing `notification.toolkit.fluxcd.io/v1beta1` with\n`notification.toolkit.fluxcd.io/v1beta2` in all YAML manifests.\n",
                      "markdown": "`\n### `notification.toolkit.fluxcd.io/v1beta2`\n\nAfter upgrading the controller to v0.30.0, you need to update the notification\n**Custom Resources** in Git\nby replacing `notification.toolkit.fluxcd.io/v1beta1` with\n`notification.toolkit.fluxcd.io/v1beta2` in all YAML manifests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 1,
                  "endLine": 550,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#463](https://github.com/fluxcd/notification-controller/pull/463)\n* Set rate limiter option in test reconcilers\n  [#465](https://github.com/fluxcd/notification-controller/pull/465)\n* Update dependencies\n  [#466](https://github.com/fluxcd/notification-controller/pull/466)\n* build: Enable SBOM and SLSA Provenance\n  [#467](https://github.com/fluxcd/notification-controller/pull/467)\n",
                    "rendered": {
                      "text": "  [#463](https://github.com/fluxcd/notification-controller/pull/463)\n* Set rate limiter option in test reconcilers\n  [#465](https://github.com/fluxcd/notification-controller/pull/465)\n* Update dependencies\n  [#466](https://github.com/fluxcd/notification-controller/pull/466)\n* build: Enable SBOM and SLSA Provenance\n  [#467](https://github.com/fluxcd/notification-controller/pull/467)\n",
                      "markdown": "`  [#463](https://github.com/fluxcd/notification-controller/pull/463)\n* Set rate limiter option in test reconcilers\n  [#465](https://github.com/fluxcd/notification-controller/pull/465)\n* Update dependencies\n  [#466](https://github.com/fluxcd/notification-controller/pull/466)\n* build: Enable SBOM and SLSA Provenance\n  [#467](https://github.com/fluxcd/notification-controller/pull/467)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 1,
                  "endLine": 526,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* Support RFC-0005 revision format\n  [#472](https://github.com/fluxcd/notification-controller/pull/472)\n* Update dependencies\n  [#474](https://github.com/fluxcd/notification-controller/pull/474)\n\n## 0.31.0\n",
                    "rendered": {
                      "text": "Improvements:\n* Support RFC-0005 revision format\n  [#472](https://github.com/fluxcd/notification-controller/pull/472)\n* Update dependencies\n  [#474](https://github.com/fluxcd/notification-controller/pull/474)\n\n## 0.31.0\n",
                      "markdown": "`Improvements:\n* Support RFC-0005 revision format\n  [#472](https://github.com/fluxcd/notification-controller/pull/472)\n* Update dependencies\n  [#474](https://github.com/fluxcd/notification-controller/pull/474)\n\n## 0.31.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 1,
                  "endLine": 507,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#479](https://github.com/fluxcd/notification-controller/pull/479)\n\nImprovements:\n* Update dependencies\n  [#478](https://github.com/fluxcd/notification-controller/pull/478)\n  [#480](https://github.com/fluxcd/notification-controller/pull/480)\n\n",
                    "rendered": {
                      "text": "  [#479](https://github.com/fluxcd/notification-controller/pull/479)\n\nImprovements:\n* Update dependencies\n  [#478](https://github.com/fluxcd/notification-controller/pull/478)\n  [#480](https://github.com/fluxcd/notification-controller/pull/480)\n\n",
                      "markdown": "`  [#479](https://github.com/fluxcd/notification-controller/pull/479)\n\nImprovements:\n* Update dependencies\n  [#478](https://github.com/fluxcd/notification-controller/pull/478)\n  [#480](https://github.com/fluxcd/notification-controller/pull/480)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 11,
                  "endLine": 503,
                  "endColumn": 19,
                  "snippet": {
                    "text": "versions.\n\nFixes:\n* receiver: update default ImageRepository version\n  [#479](https://github.com/fluxcd/notification-controller/pull/479)\n\nImprovements:\n",
                    "rendered": {
                      "text": "versions.\n\nFixes:\n* receiver: update default ImageRepository version\n  [#479](https://github.com/fluxcd/notification-controller/pull/479)\n\nImprovements:\n",
                      "markdown": "`versions.\n\nFixes:\n* receiver: update default ImageRepository version\n  [#479](https://github.com/fluxcd/notification-controller/pull/479)\n\nImprovements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 1,
                  "endLine": 486,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n* Update Go to 1.20\n  [#483](https://github.com/fluxcd/notification-controller/pull/483)\n* Update dependencies\n  [#485](https://github.com/fluxcd/notification-controller/pull/485)\n* Use `logger.SetLogger` to also configure `klog`\n  [#486](https://github.com/fluxcd/notification-controller/pull/486)\n",
                    "rendered": {
                      "text": "Improvements:\n* Update Go to 1.20\n  [#483](https://github.com/fluxcd/notification-controller/pull/483)\n* Update dependencies\n  [#485](https://github.com/fluxcd/notification-controller/pull/485)\n* Use `logger.SetLogger` to also configure `klog`\n  [#486](https://github.com/fluxcd/notification-controller/pull/486)\n",
                      "markdown": "`Improvements:\n* Update Go to 1.20\n  [#483](https://github.com/fluxcd/notification-controller/pull/483)\n* Update dependencies\n  [#485](https://github.com/fluxcd/notification-controller/pull/485)\n* Use `logger.SetLogger` to also configure `klog`\n  [#486](https://github.com/fluxcd/notification-controller/pull/486)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 1,
                  "endLine": 484,
                  "endColumn": 9,
                  "snippet": {
                    "text": "of the controller (providing a consistent log format).\n\nImprovements:\n* Update Go to 1.20\n  [#483](https://github.com/fluxcd/notification-controller/pull/483)\n* Update dependencies\n  [#485](https://github.com/fluxcd/notification-controller/pull/485)\n",
                    "rendered": {
                      "text": "of the controller (providing a consistent log format).\n\nImprovements:\n* Update Go to 1.20\n  [#483](https://github.com/fluxcd/notification-controller/pull/483)\n* Update dependencies\n  [#485](https://github.com/fluxcd/notification-controller/pull/485)\n",
                      "markdown": "`of the controller (providing a consistent log format).\n\nImprovements:\n* Update Go to 1.20\n  [#483](https://github.com/fluxcd/notification-controller/pull/483)\n* Update dependencies\n  [#485](https://github.com/fluxcd/notification-controller/pull/485)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 122,
                  "endLine": 447,
                  "endColumn": 126,
                  "snippet": {
                    "text": "\n#### API changes\n\nThe `Receiver` kind was promoted from v1beta2 to v1 (GA). All other kinds of the notification.toolkit.fluxcd.io group stay at version v1beta2.\n\nThe receivers.notification.toolkit.fluxcd.io CRD contains the following versions:\n\n",
                    "rendered": {
                      "text": "\n#### API changes\n\nThe `Receiver` kind was promoted from v1beta2 to v1 (GA). All other kinds of the notification.toolkit.fluxcd.io group stay at version v1beta2.\n\nThe receivers.notification.toolkit.fluxcd.io CRD contains the following versions:\n\n",
                      "markdown": "`\n#### API changes\n\nThe `Receiver` kind was promoted from v1beta2 to v1 (GA). All other kinds of the notification.toolkit.fluxcd.io group stay at version v1beta2.\n\nThe receivers.notification.toolkit.fluxcd.io CRD contains the following versions:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 1,
                  "endLine": 429,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#514](https://github.com/fluxcd/notification-controller/pull/514)\n- Add InclusionList to Alert CRD\n  [#515](https://github.com/fluxcd/notification-controller/pull/515)\n- Update dependencies\n  [#520](https://github.com/fluxcd/notification-controller/pull/520)\n- Improve event handler tests\n  [#521](https://github.com/fluxcd/notification-controller/pull/521)\n",
                    "rendered": {
                      "text": "  [#514](https://github.com/fluxcd/notification-controller/pull/514)\n- Add InclusionList to Alert CRD\n  [#515](https://github.com/fluxcd/notification-controller/pull/515)\n- Update dependencies\n  [#520](https://github.com/fluxcd/notification-controller/pull/520)\n- Improve event handler tests\n  [#521](https://github.com/fluxcd/notification-controller/pull/521)\n",
                      "markdown": "`  [#514](https://github.com/fluxcd/notification-controller/pull/514)\n- Add InclusionList to Alert CRD\n  [#515](https://github.com/fluxcd/notification-controller/pull/515)\n- Update dependencies\n  [#520](https://github.com/fluxcd/notification-controller/pull/520)\n- Improve event handler tests\n  [#521](https://github.com/fluxcd/notification-controller/pull/521)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 6,
                  "endLine": 417,
                  "endColumn": 15,
                  "snippet": {
                    "text": "and removes the deprecated `.status.url` field from the Receiver v1 API.\n\nA new field was added to the Alert v1beta2 API named `.spec.inclusionList` for\nbetter control over events filtering.\n\nIn addition, the controller dependencies have been updated to their latest\nversions.\n",
                    "rendered": {
                      "text": "and removes the deprecated `.status.url` field from the Receiver v1 API.\n\nA new field was added to the Alert v1beta2 API named `.spec.inclusionList` for\nbetter control over events filtering.\n\nIn addition, the controller dependencies have been updated to their latest\nversions.\n",
                      "markdown": "`and removes the deprecated `.status.url` field from the Receiver v1 API.\n\nA new field was added to the Alert v1beta2 API named `.spec.inclusionList` for\nbetter control over events filtering.\n\nIn addition, the controller dependencies have been updated to their latest\nversions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 1,
                  "endLine": 404,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n- Add event metadata field to Alert spec\n  [#519](https://github.com/fluxcd/notification-controller/pull/506)\n- Update Alpine to 3.18\n  [#524](https://github.com/fluxcd/notification-controller/pull/524)\n- build(deps): bump github.com/cloudflare/circl from 1.3.2 to 1.3.3\n  [#525](https://github.com/fluxcd/notification-controller/pull/525)\n",
                    "rendered": {
                      "text": "Improvements:\n- Add event metadata field to Alert spec\n  [#519](https://github.com/fluxcd/notification-controller/pull/506)\n- Update Alpine to 3.18\n  [#524](https://github.com/fluxcd/notification-controller/pull/524)\n- build(deps): bump github.com/cloudflare/circl from 1.3.2 to 1.3.3\n  [#525](https://github.com/fluxcd/notification-controller/pull/525)\n",
                      "markdown": "`Improvements:\n- Add event metadata field to Alert spec\n  [#519](https://github.com/fluxcd/notification-controller/pull/506)\n- Update Alpine to 3.18\n  [#524](https://github.com/fluxcd/notification-controller/pull/524)\n- build(deps): bump github.com/cloudflare/circl from 1.3.2 to 1.3.3\n  [#525](https://github.com/fluxcd/notification-controller/pull/525)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 1,
                  "endLine": 376,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#533](https://github.com/fluxcd/notification-controller/pull/533)\n- Prefix event key attributes with identifier\n  [#534](https://github.com/fluxcd/notification-controller/pull/534)\n- Update workflows and enable dependabot\n  [#535](https://github.com/fluxcd/notification-controller/pull/535)\n- build(deps): bump github/codeql-action from 2.3.3 to 2.3.4\n  [#536](https://github.com/fluxcd/notification-controller/pull/536)\n",
                    "rendered": {
                      "text": "  [#533](https://github.com/fluxcd/notification-controller/pull/533)\n- Prefix event key attributes with identifier\n  [#534](https://github.com/fluxcd/notification-controller/pull/534)\n- Update workflows and enable dependabot\n  [#535](https://github.com/fluxcd/notification-controller/pull/535)\n- build(deps): bump github/codeql-action from 2.3.3 to 2.3.4\n  [#536](https://github.com/fluxcd/notification-controller/pull/536)\n",
                      "markdown": "`  [#533](https://github.com/fluxcd/notification-controller/pull/533)\n- Prefix event key attributes with identifier\n  [#534](https://github.com/fluxcd/notification-controller/pull/534)\n- Update workflows and enable dependabot\n  [#535](https://github.com/fluxcd/notification-controller/pull/535)\n- build(deps): bump github/codeql-action from 2.3.3 to 2.3.4\n  [#536](https://github.com/fluxcd/notification-controller/pull/536)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 1,
                  "endLine": 370,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n- Include eventv1.MetaTokenKey on event rate limiting key calculation\n  [#530](https://github.com/fluxcd/notification-controller/pull/530)\n- Update dependencies and Kubernetes to 1.27.2\n  [#532](https://github.com/fluxcd/notification-controller/pull/532)\n- Remove the tini supervisor\n  [#533](https://github.com/fluxcd/notification-controller/pull/533)\n",
                    "rendered": {
                      "text": "\n- Include eventv1.MetaTokenKey on event rate limiting key calculation\n  [#530](https://github.com/fluxcd/notification-controller/pull/530)\n- Update dependencies and Kubernetes to 1.27.2\n  [#532](https://github.com/fluxcd/notification-controller/pull/532)\n- Remove the tini supervisor\n  [#533](https://github.com/fluxcd/notification-controller/pull/533)\n",
                      "markdown": "`\n- Include eventv1.MetaTokenKey on event rate limiting key calculation\n  [#530](https://github.com/fluxcd/notification-controller/pull/530)\n- Update dependencies and Kubernetes to 1.27.2\n  [#532](https://github.com/fluxcd/notification-controller/pull/532)\n- Remove the tini supervisor\n  [#533](https://github.com/fluxcd/notification-controller/pull/533)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 91,
                  "endLine": 342,
                  "snippet": {
                    "text": "\n- Fix Alert `.spec.eventMetadata` documentation\n  [#541](https://github.com/fluxcd/notification-controller/pull/541)\n- Fix `TestProviderReconciler_Reconcile/finalizes_suspended_object` to use patch instead of update\n  [#550](https://github.com/fluxcd/notification-controller/pull/550)\n\n## 1.0.0-rc.4\n\n",
                    "rendered": {
                      "text": "\n- Fix Alert `.spec.eventMetadata` documentation\n  [#541](https://github.com/fluxcd/notification-controller/pull/541)\n- Fix `TestProviderReconciler_Reconcile/finalizes_suspended_object` to use patch instead of update\n  [#550](https://github.com/fluxcd/notification-controller/pull/550)\n\n## 1.0.0-rc.4\n\n",
                      "markdown": "`\n- Fix Alert `.spec.eventMetadata` documentation\n  [#541](https://github.com/fluxcd/notification-controller/pull/541)\n- Fix `TestProviderReconciler_Reconcile/finalizes_suspended_object` to use patch instead of update\n  [#550](https://github.com/fluxcd/notification-controller/pull/550)\n\n## 1.0.0-rc.4\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 1,
                  "endLine": 334,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n  [#563](https://github.com/fluxcd/notification-controller/pull/563)\n- Update GCP dependencies\n  [#569](https://github.com/fluxcd/notification-controller/pull/569)\n\nFixes:\n",
                    "rendered": {
                      "text": "  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n  [#563](https://github.com/fluxcd/notification-controller/pull/563)\n- Update GCP dependencies\n  [#569](https://github.com/fluxcd/notification-controller/pull/569)\n\nFixes:\n",
                      "markdown": "`  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n  [#563](https://github.com/fluxcd/notification-controller/pull/563)\n- Update GCP dependencies\n  [#569](https://github.com/fluxcd/notification-controller/pull/569)\n\nFixes:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 1,
                  "endLine": 332,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Align go.mod version with Kubernetes (Go 1.20)\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n  [#563](https://github.com/fluxcd/notification-controller/pull/563)\n- Update GCP dependencies\n  [#569](https://github.com/fluxcd/notification-controller/pull/569)\n",
                    "rendered": {
                      "text": "  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Align go.mod version with Kubernetes (Go 1.20)\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n  [#563](https://github.com/fluxcd/notification-controller/pull/563)\n- Update GCP dependencies\n  [#569](https://github.com/fluxcd/notification-controller/pull/569)\n",
                      "markdown": "`  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Align go.mod version with Kubernetes (Go 1.20)\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n  [#563](https://github.com/fluxcd/notification-controller/pull/563)\n- Update GCP dependencies\n  [#569](https://github.com/fluxcd/notification-controller/pull/569)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 37,
                  "endLine": 312,
                  "endColumn": 45,
                  "snippet": {
                    "text": "and [Google Pub/Sub](https://github.com/fluxcd/notification-controller/blob/v1.0.0/docs/spec/v1beta2/providers.md#google-pubsub).\n\nIn addition, dependencies have been updated\nto their latest version, including an update of Kubernetes to v1.27.3.\n\nFor a comprehensive list of changes since `v0.33.x`, please refer to the\nchangelog for [v1.0.0-rc.1](#100-rc1), [v1.0.0-rc.2](#100-rc2),\n",
                    "rendered": {
                      "text": "and [Google Pub/Sub](https://github.com/fluxcd/notification-controller/blob/v1.0.0/docs/spec/v1beta2/providers.md#google-pubsub).\n\nIn addition, dependencies have been updated\nto their latest version, including an update of Kubernetes to v1.27.3.\n\nFor a comprehensive list of changes since `v0.33.x`, please refer to the\nchangelog for [v1.0.0-rc.1](#100-rc1), [v1.0.0-rc.2](#100-rc2),\n",
                      "markdown": "`and [Google Pub/Sub](https://github.com/fluxcd/notification-controller/blob/v1.0.0/docs/spec/v1beta2/providers.md#google-pubsub).\n\nIn addition, dependencies have been updated\nto their latest version, including an update of Kubernetes to v1.27.3.\n\nFor a comprehensive list of changes since `v0.33.x`, please refer to the\nchangelog for [v1.0.0-rc.1](#100-rc1), [v1.0.0-rc.2](#100-rc2),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 1,
                  "endLine": 282,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#583](https://github.com/fluxcd/notification-controller/pull/583)\n- Align docs structure with other controllers\n  [#582](https://github.com/fluxcd/notification-controller/pull/582)\n- Update dependencies\n  [#600](https://github.com/fluxcd/notification-controller/pull/600)\n  [#606](https://github.com/fluxcd/notification-controller/pull/606)\n\n",
                    "rendered": {
                      "text": "  [#583](https://github.com/fluxcd/notification-controller/pull/583)\n- Align docs structure with other controllers\n  [#582](https://github.com/fluxcd/notification-controller/pull/582)\n- Update dependencies\n  [#600](https://github.com/fluxcd/notification-controller/pull/600)\n  [#606](https://github.com/fluxcd/notification-controller/pull/606)\n\n",
                      "markdown": "`  [#583](https://github.com/fluxcd/notification-controller/pull/583)\n- Align docs structure with other controllers\n  [#582](https://github.com/fluxcd/notification-controller/pull/582)\n- Update dependencies\n  [#600](https://github.com/fluxcd/notification-controller/pull/600)\n  [#606](https://github.com/fluxcd/notification-controller/pull/606)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 1,
                  "endLine": 233,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#639](https://github.com/fluxcd/notification-controller/pull/639)\n- Address miscellaneous issues throughout code base\n  [#627](https://github.com/fluxcd/notification-controller/pull/627)\n- Update dependencies\n  [#609](https://github.com/fluxcd/notification-controller/pull/609)\n  [#612](https://github.com/fluxcd/notification-controller/pull/612)\n  [#613](https://github.com/fluxcd/notification-controller/pull/613)\n",
                    "rendered": {
                      "text": "  [#639](https://github.com/fluxcd/notification-controller/pull/639)\n- Address miscellaneous issues throughout code base\n  [#627](https://github.com/fluxcd/notification-controller/pull/627)\n- Update dependencies\n  [#609](https://github.com/fluxcd/notification-controller/pull/609)\n  [#612](https://github.com/fluxcd/notification-controller/pull/612)\n  [#613](https://github.com/fluxcd/notification-controller/pull/613)\n",
                      "markdown": "`  [#639](https://github.com/fluxcd/notification-controller/pull/639)\n- Address miscellaneous issues throughout code base\n  [#627](https://github.com/fluxcd/notification-controller/pull/627)\n- Update dependencies\n  [#609](https://github.com/fluxcd/notification-controller/pull/609)\n  [#612](https://github.com/fluxcd/notification-controller/pull/612)\n  [#613](https://github.com/fluxcd/notification-controller/pull/613)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 22,
                  "endLine": 225,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Improvements:\n- Add Provider for NATS Subject\n  [#651](https://github.com/fluxcd/notification-controller/pull/651)\n- Cap provider address at 2048 bytes\n  [#654](https://github.com/fluxcd/notification-controller/pull/654)\n- Refactor events and introduce v1beta3 API for Alert and Provider\n  [#540](https://github.com/fluxcd/notification-controller/pull/540)\n",
                    "rendered": {
                      "text": "Improvements:\n- Add Provider for NATS Subject\n  [#651](https://github.com/fluxcd/notification-controller/pull/651)\n- Cap provider address at 2048 bytes\n  [#654](https://github.com/fluxcd/notification-controller/pull/654)\n- Refactor events and introduce v1beta3 API for Alert and Provider\n  [#540](https://github.com/fluxcd/notification-controller/pull/540)\n",
                      "markdown": "`Improvements:\n- Add Provider for NATS Subject\n  [#651](https://github.com/fluxcd/notification-controller/pull/651)\n- Cap provider address at 2048 bytes\n  [#654](https://github.com/fluxcd/notification-controller/pull/654)\n- Refactor events and introduce v1beta3 API for Alert and Provider\n  [#540](https://github.com/fluxcd/notification-controller/pull/540)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 48,
                  "endLine": 199,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n### `notification.toolkit.fluxcd.io/v1beta3`\n\nAfter upgrading the controller to v1.2.0, please update the notification Custom\nResources for `Alert` and `Provider` in Git by replacing\n`notification.toolkit.fluxcd.io/v1beta2` with\n`notification.toolkit.fluxcd.io/v1beta3` in all the YAML manifests.\n",
                    "rendered": {
                      "text": "\n### `notification.toolkit.fluxcd.io/v1beta3`\n\nAfter upgrading the controller to v1.2.0, please update the notification Custom\nResources for `Alert` and `Provider` in Git by replacing\n`notification.toolkit.fluxcd.io/v1beta2` with\n`notification.toolkit.fluxcd.io/v1beta3` in all the YAML manifests.\n",
                      "markdown": "`\n### `notification.toolkit.fluxcd.io/v1beta3`\n\nAfter upgrading the controller to v1.2.0, please update the notification Custom\nResources for `Alert` and `Provider` in Git by replacing\n`notification.toolkit.fluxcd.io/v1beta2` with\n`notification.toolkit.fluxcd.io/v1beta3` in all the YAML manifests.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 1,
                  "endLine": 183,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [#666](https://github.com/fluxcd/notification-controller/pull/666)\n- Replace whilp/git-urls module by chainguard-dev/git-urls\n  [#667](https://github.com/fluxcd/notification-controller/pull/667)\n- Update dependencies\n  [#669](https://github.com/fluxcd/notification-controller/pull/669)\n\n## 1.2.0\n",
                    "rendered": {
                      "text": "  [#666](https://github.com/fluxcd/notification-controller/pull/666)\n- Replace whilp/git-urls module by chainguard-dev/git-urls\n  [#667](https://github.com/fluxcd/notification-controller/pull/667)\n- Update dependencies\n  [#669](https://github.com/fluxcd/notification-controller/pull/669)\n\n## 1.2.0\n",
                      "markdown": "`  [#666](https://github.com/fluxcd/notification-controller/pull/666)\n- Replace whilp/git-urls module by chainguard-dev/git-urls\n  [#667](https://github.com/fluxcd/notification-controller/pull/667)\n- Update dependencies\n  [#669](https://github.com/fluxcd/notification-controller/pull/669)\n\n## 1.2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 1,
                  "endLine": 179,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Lastly, a small number of dependencies got updated to their latest versions.\n\nImprovements:\n- Update Go to 1.21.x\n  [#666](https://github.com/fluxcd/notification-controller/pull/666)\n- Replace whilp/git-urls module by chainguard-dev/git-urls\n  [#667](https://github.com/fluxcd/notification-controller/pull/667)\n",
                    "rendered": {
                      "text": "Lastly, a small number of dependencies got updated to their latest versions.\n\nImprovements:\n- Update Go to 1.21.x\n  [#666](https://github.com/fluxcd/notification-controller/pull/666)\n- Replace whilp/git-urls module by chainguard-dev/git-urls\n  [#667](https://github.com/fluxcd/notification-controller/pull/667)\n",
                      "markdown": "`Lastly, a small number of dependencies got updated to their latest versions.\n\nImprovements:\n- Update Go to 1.21.x\n  [#666](https://github.com/fluxcd/notification-controller/pull/666)\n- Replace whilp/git-urls module by chainguard-dev/git-urls\n  [#667](https://github.com/fluxcd/notification-controller/pull/667)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 1,
                  "endLine": 160,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Improvements:\n- build: update Alpine to 3.19\n  [#675](https://github.com/fluxcd/notification-controller/pull/675)\n- Update dependencies\n  [#677](https://github.com/fluxcd/notification-controller/pull/677)\n\n## 1.2.1\n",
                    "rendered": {
                      "text": "Improvements:\n- build: update Alpine to 3.19\n  [#675](https://github.com/fluxcd/notification-controller/pull/675)\n- Update dependencies\n  [#677](https://github.com/fluxcd/notification-controller/pull/677)\n\n## 1.2.1\n",
                      "markdown": "`Improvements:\n- build: update Alpine to 3.19\n  [#675](https://github.com/fluxcd/notification-controller/pull/675)\n- Update dependencies\n  [#677](https://github.com/fluxcd/notification-controller/pull/677)\n\n## 1.2.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 8,
                  "endLine": 158,
                  "endColumn": 16,
                  "snippet": {
                    "text": "the container base image to Alpine v3.19.\n\nImprovements:\n- build: update Alpine to 3.19\n  [#675](https://github.com/fluxcd/notification-controller/pull/675)\n- Update dependencies\n  [#677](https://github.com/fluxcd/notification-controller/pull/677)\n",
                    "rendered": {
                      "text": "the container base image to Alpine v3.19.\n\nImprovements:\n- build: update Alpine to 3.19\n  [#675](https://github.com/fluxcd/notification-controller/pull/675)\n- Update dependencies\n  [#677](https://github.com/fluxcd/notification-controller/pull/677)\n",
                      "markdown": "`the container base image to Alpine v3.19.\n\nImprovements:\n- build: update Alpine to 3.19\n  [#675](https://github.com/fluxcd/notification-controller/pull/675)\n- Update dependencies\n  [#677](https://github.com/fluxcd/notification-controller/pull/677)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 67,
                  "endLine": 154,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n**Release date:** 2023-12-11\n\nThis patch releases updates a variety of dependencies, including an update of\nthe container base image to Alpine v3.19.\n\nImprovements:\n",
                    "rendered": {
                      "text": "\n**Release date:** 2023-12-11\n\nThis patch releases updates a variety of dependencies, including an update of\nthe container base image to Alpine v3.19.\n\nImprovements:\n",
                      "markdown": "`\n**Release date:** 2023-12-11\n\nThis patch releases updates a variety of dependencies, including an update of\nthe container base image to Alpine v3.19.\n\nImprovements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 22,
                  "endLine": 125,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  [#695](https://github.com/fluxcd/notification-controller/pull/695)\n\nFixes:\n- Fix BitBucket status update panic\n  [#722](https://github.com/fluxcd/notification-controller/pull/722)\n- fix typo in docs/spec/v1beta3/providers.md\n  [#699](https://github.com/fluxcd/notification-controller/pull/699)\n",
                    "rendered": {
                      "text": "  [#695](https://github.com/fluxcd/notification-controller/pull/695)\n\nFixes:\n- Fix BitBucket status update panic\n  [#722](https://github.com/fluxcd/notification-controller/pull/722)\n- fix typo in docs/spec/v1beta3/providers.md\n  [#699](https://github.com/fluxcd/notification-controller/pull/699)\n",
                      "markdown": "`  [#695](https://github.com/fluxcd/notification-controller/pull/695)\n\nFixes:\n- Fix BitBucket status update panic\n  [#722](https://github.com/fluxcd/notification-controller/pull/722)\n- fix typo in docs/spec/v1beta3/providers.md\n  [#699](https://github.com/fluxcd/notification-controller/pull/699)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 82,
                  "endLine": 17,
                  "endColumn": 7,
                  "snippet": {
                    "text": "office/create-incoming-webhooks-with-workflows-for-microsoft-teams-8ae491c7-0394-4861-ba59-055e33f75498).\nSee the [Provider API documentation](https://fluxcd.io/flux/components/notification/providers/#microsoft-teams)\nfor more information. After getting the URL for the new Incoming Webhook Workflow,\nupdate the secret used by the `msteams` Provider object with the new URL.\n\nIn addition, the Kubernetes dependencies have been updated to v1.31.1 and\nvarious other controller dependencies have been updated to their latest\nversion. The controller is now built with Go 1.23.\n\nFixes:\n- telegram notifier should ",
                    "rendered": {
                      "text": "office/create-incoming-webhooks-with-workflows-for-microsoft-teams-8ae491c7-0394-4861-ba59-055e33f75498).\nSee the [Provider API documentation](https://fluxcd.io/flux/components/notification/providers/#microsoft-teams)\nfor more information. After getting the URL for the new Incoming Webhook Workflow,\nupdate the secret used by the `msteams` Provider object with the new URL.\n\nIn addition, the Kubernetes dependencies have been updated to v1.31.1 and\nvarious other controller dependencies have been updated to their latest\nversion. The controller is now built with Go 1.23.\n\nFixes:\n- telegram notifier should ",
                      "markdown": "`office/create-incoming-webhooks-with-workflows-for-microsoft-teams-8ae491c7-0394-4861-ba59-055e33f75498).\nSee the [Provider API documentation](https://fluxcd.io/flux/components/notification/providers/#microsoft-teams)\nfor more information. After getting the URL for the new Incoming Webhook Workflow,\nupdate the secret used by the `msteams` Provider object with the new URL.\n\nIn addition, the Kubernetes dependencies have been updated to v1.31.1 and\nvarious other controller dependencies have been updated to their latest\nversion. The controller is now built with Go 1.23.\n\nFixes:\n- telegram notifier should `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1647,
                  "startColumn": 52,
                  "endLine": 1647,
                  "endColumn": 61,
                  "snippet": {
                    "text": "**Release date:** 2020-07-02\n\nThis alpha release comes with improvements to alerts delivering.\nThe alert delivery method is **at-most once** with a timeout of 15 seconds.\nThe controller performs automatic retries for connection errors and 500-range response code.\nIf the webhook receiver returns an error, the controller will retry sending an alert for\nfour times with an exponential backoff of maximum 30 seconds.\n",
                    "rendered": {
                      "text": "**Release date:** 2020-07-02\n\nThis alpha release comes with improvements to alerts delivering.\nThe alert delivery method is **at-most once** with a timeout of 15 seconds.\nThe controller performs automatic retries for connection errors and 500-range response code.\nIf the webhook receiver returns an error, the controller will retry sending an alert for\nfour times with an exponential backoff of maximum 30 seconds.\n",
                      "markdown": "`**Release date:** 2020-07-02\n\nThis alpha release comes with improvements to alerts delivering.\nThe alert delivery method is **at-most once** with a timeout of 15 seconds.\nThe controller performs automatic retries for connection errors and 500-range response code.\nIf the webhook receiver returns an error, the controller will retry sending an alert for\nfour times with an exponential backoff of maximum 30 seconds.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1565,
                  "startColumn": 40,
                  "endLine": 1565,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n**Release date:** 2020-09-12\n\nThis prerelease comes with the option to watch for resources\nin the runtime namespace of the controller or at cluster level.\n\n## 0.0.9\n",
                    "rendered": {
                      "text": "\n**Release date:** 2020-09-12\n\nThis prerelease comes with the option to watch for resources\nin the runtime namespace of the controller or at cluster level.\n\n## 0.0.9\n",
                      "markdown": "`\n**Release date:** 2020-09-12\n\nThis prerelease comes with the option to watch for resources\nin the runtime namespace of the controller or at cluster level.\n\n## 0.0.9\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1489,
                  "startColumn": 25,
                  "endLine": 1489,
                  "endColumn": 30,
                  "snippet": {
                    "text": "* Add support for sending a `Notification-Controller` HTTP header from\n  the forward notifier\n    [#84](https://github.com/fluxcd/notification-controller/pull/84)\n* Verify repository ID in Git notifiers\n    [#82](https://github.com/fluxcd/notification-controller/pull/82)\n* Use subgroup in GitLab\n    [#80](https://github.com/fluxcd/notification-controller/pull/80)\n",
                    "rendered": {
                      "text": "* Add support for sending a `Notification-Controller` HTTP header from\n  the forward notifier\n    [#84](https://github.com/fluxcd/notification-controller/pull/84)\n* Verify repository ID in Git notifiers\n    [#82](https://github.com/fluxcd/notification-controller/pull/82)\n* Use subgroup in GitLab\n    [#80](https://github.com/fluxcd/notification-controller/pull/80)\n",
                      "markdown": "`* Add support for sending a `Notification-Controller` HTTP header from\n  the forward notifier\n    [#84](https://github.com/fluxcd/notification-controller/pull/84)\n* Verify repository ID in Git notifiers\n    [#82](https://github.com/fluxcd/notification-controller/pull/82)\n* Use subgroup in GitLab\n    [#80](https://github.com/fluxcd/notification-controller/pull/80)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1420,
                  "startColumn": 26,
                  "endLine": 1420,
                  "endColumn": 31,
                  "snippet": {
                    "text": "**Release date:** 2021-01-14\n\nThis prerelease comes with support for triggering\ncontainer image updates to Git using webhook receiver and\nfixes a regression bug introduced in `v0.6.0` that caused\nreconciliation request annotations to be ignored in certain scenarios.\n\n",
                    "rendered": {
                      "text": "**Release date:** 2021-01-14\n\nThis prerelease comes with support for triggering\ncontainer image updates to Git using webhook receiver and\nfixes a regression bug introduced in `v0.6.0` that caused\nreconciliation request annotations to be ignored in certain scenarios.\n\n",
                      "markdown": "`**Release date:** 2021-01-14\n\nThis prerelease comes with support for triggering\ncontainer image updates to Git using webhook receiver and\nfixes a regression bug introduced in `v0.6.0` that caused\nreconciliation request annotations to be ignored in certain scenarios.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1401,
                  "startColumn": 26,
                  "endLine": 1401,
                  "endColumn": 31,
                  "snippet": {
                    "text": "**Release date:** 2021-01-19\n\nThis prerelease comes with support for triggering\ncontainer image updates to Git using Quay and GCR webhooks.\n\nThe Kubernetes packages were updated to v1.20.2 and controller-runtime to v0.8.0.\n\n",
                    "rendered": {
                      "text": "**Release date:** 2021-01-19\n\nThis prerelease comes with support for triggering\ncontainer image updates to Git using Quay and GCR webhooks.\n\nThe Kubernetes packages were updated to v1.20.2 and controller-runtime to v0.8.0.\n\n",
                      "markdown": "`**Release date:** 2021-01-19\n\nThis prerelease comes with support for triggering\ncontainer image updates to Git using Quay and GCR webhooks.\n\nThe Kubernetes packages were updated to v1.20.2 and controller-runtime to v0.8.0.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1370,
                  "startColumn": 57,
                  "endLine": 1371,
                  "snippet": {
                    "text": "that validates the caller legitimacy using HMAC signatures.\n\nThe `Alert` API comes with support for image update notifications\nand is now possible to trigger container image updates to Git\nusing Sonatype Nexus webhooks.\n\nTwo new argument flags are introduced to support configuring the QPS\n(`--kube-api-qps`) and burst (`--kube-api-burst`) while communicating\n",
                    "rendered": {
                      "text": "that validates the caller legitimacy using HMAC signatures.\n\nThe `Alert` API comes with support for image update notifications\nand is now possible to trigger container image updates to Git\nusing Sonatype Nexus webhooks.\n\nTwo new argument flags are introduced to support configuring the QPS\n(`--kube-api-qps`) and burst (`--kube-api-burst`) while communicating\n",
                      "markdown": "`that validates the caller legitimacy using HMAC signatures.\n\nThe `Alert` API comes with support for image update notifications\nand is now possible to trigger container image updates to Git\nusing Sonatype Nexus webhooks.\n\nTwo new argument flags are introduced to support configuring the QPS\n(`--kube-api-qps`) and burst (`--kube-api-burst`) while communicating\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 45,
                  "endLine": 1286,
                  "endColumn": 50,
                  "snippet": {
                    "text": "This is the tenth MINOR prerelease.\n\nThis prerelease comes with support for sending alerts to Google Chat\nand for triggering container image updates to Git using Azure Container Registry. \n\nFeatures:\n* Provide the ability to send events to Google Chat\n",
                    "rendered": {
                      "text": "This is the tenth MINOR prerelease.\n\nThis prerelease comes with support for sending alerts to Google Chat\nand for triggering container image updates to Git using Azure Container Registry. \n\nFeatures:\n* Provide the ability to send events to Google Chat\n",
                      "markdown": "`This is the tenth MINOR prerelease.\n\nThis prerelease comes with support for sending alerts to Google Chat\nand for triggering container image updates to Git using Azure Container Registry. \n\nFeatures:\n* Provide the ability to send events to Google Chat\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1091,
                  "startColumn": 14,
                  "endLine": 1091,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  [#262](https://github.com/fluxcd/notification-controller/pull/262)\n* Fix MSTeams certificates\n  [#257](https://github.com/fluxcd/notification-controller/pull/257)\n* Use regex to find and replace token\n  [#271](https://github.com/fluxcd/notification-controller/pull/271)\n\n## 0.18.0\n",
                    "rendered": {
                      "text": "  [#262](https://github.com/fluxcd/notification-controller/pull/262)\n* Fix MSTeams certificates\n  [#257](https://github.com/fluxcd/notification-controller/pull/257)\n* Use regex to find and replace token\n  [#271](https://github.com/fluxcd/notification-controller/pull/271)\n\n## 0.18.0\n",
                      "markdown": "`  [#262](https://github.com/fluxcd/notification-controller/pull/262)\n* Fix MSTeams certificates\n  [#257](https://github.com/fluxcd/notification-controller/pull/257)\n* Use regex to find and replace token\n  [#271](https://github.com/fluxcd/notification-controller/pull/271)\n\n## 0.18.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 22,
                  "endLine": 707,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  [#423](https://github.com/fluxcd/notification-controller/pull/423)\n* Dockerfile: Build with Go 1.19\n  [#424](https://github.com/fluxcd/notification-controller/pull/424)\n* docs: Fix table with git commit status providers\n  [#421](https://github.com/fluxcd/notification-controller/pull/421)\n\n## 0.26.0\n",
                    "rendered": {
                      "text": "  [#423](https://github.com/fluxcd/notification-controller/pull/423)\n* Dockerfile: Build with Go 1.19\n  [#424](https://github.com/fluxcd/notification-controller/pull/424)\n* docs: Fix table with git commit status providers\n  [#421](https://github.com/fluxcd/notification-controller/pull/421)\n\n## 0.26.0\n",
                      "markdown": "`  [#423](https://github.com/fluxcd/notification-controller/pull/423)\n* Dockerfile: Build with Go 1.19\n  [#424](https://github.com/fluxcd/notification-controller/pull/424)\n* docs: Fix table with git commit status providers\n  [#421](https://github.com/fluxcd/notification-controller/pull/421)\n\n## 0.26.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 36,
                  "endLine": 692,
                  "endColumn": 45,
                  "snippet": {
                    "text": "(time) duration. Effectively, this means values without a time unit (e.g. `ms`,\n`s`, `m`, `h`) will now be rejected by the API server. To stimulate sane\nconfigurations, the units `ns`, `us` and `µs` can no longer be configured, nor\ncan `h` be set for fields defining a timeout value.\n\nIn addition, the controller dependencies have been updated\nto Kubernetes controller-runtime v0.13.\n",
                    "rendered": {
                      "text": "(time) duration. Effectively, this means values without a time unit (e.g. `ms`,\n`s`, `m`, `h`) will now be rejected by the API server. To stimulate sane\nconfigurations, the units `ns`, `us` and `µs` can no longer be configured, nor\ncan `h` be set for fields defining a timeout value.\n\nIn addition, the controller dependencies have been updated\nto Kubernetes controller-runtime v0.13.\n",
                      "markdown": "`(time) duration. Effectively, this means values without a time unit (e.g. `ms`,\n`s`, `m`, `h`) will now be rejected by the API server. To stimulate sane\nconfigurations, the units `ns`, `us` and `µs` can no longer be configured, nor\ncan `h` be set for fields defining a timeout value.\n\nIn addition, the controller dependencies have been updated\nto Kubernetes controller-runtime v0.13.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 57,
                  "endLine": 689,
                  "endColumn": 63,
                  "snippet": {
                    "text": "**Release date:** 2022-09-27\n\nThis prerelease comes with strict validation rules for API fields which define a\n(time) duration. Effectively, this means values without a time unit (e.g. `ms`,\n`s`, `m`, `h`) will now be rejected by the API server. To stimulate sane\nconfigurations, the units `ns`, `us` and `µs` can no longer be configured, nor\ncan `h` be set for fields defining a timeout value.\n",
                    "rendered": {
                      "text": "**Release date:** 2022-09-27\n\nThis prerelease comes with strict validation rules for API fields which define a\n(time) duration. Effectively, this means values without a time unit (e.g. `ms`,\n`s`, `m`, `h`) will now be rejected by the API server. To stimulate sane\nconfigurations, the units `ns`, `us` and `µs` can no longer be configured, nor\ncan `h` be set for fields defining a timeout value.\n",
                      "markdown": "`**Release date:** 2022-09-27\n\nThis prerelease comes with strict validation rules for API fields which define a\n(time) duration. Effectively, this means values without a time unit (e.g. `ms`,\n`s`, `m`, `h`) will now be rejected by the API server. To stimulate sane\nconfigurations, the units `ns`, `us` and `µs` can no longer be configured, nor\ncan `h` be set for fields defining a timeout value.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 19,
                  "endLine": 619,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#### Enhanced Git commit status updates\n\nStarting with this version, the controller uses the `Provider` cluster assigned `UID`\nto compose a unique Git commit status ID to avoid name collisions\nwhen multiple clusters write to the same repository.\n\nImprovements:\n",
                    "rendered": {
                      "text": "#### Enhanced Git commit status updates\n\nStarting with this version, the controller uses the `Provider` cluster assigned `UID`\nto compose a unique Git commit status ID to avoid name collisions\nwhen multiple clusters write to the same repository.\n\nImprovements:\n",
                      "markdown": "`#### Enhanced Git commit status updates\n\nStarting with this version, the controller uses the `Provider` cluster assigned `UID`\nto compose a unique Git commit status ID to avoid name collisions\nwhen multiple clusters write to the same repository.\n\nImprovements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 13,
                  "endLine": 616,
                  "endColumn": 18,
                  "snippet": {
                    "text": "[better integration with `kstatus`](https://github.com/kubernetes-sigs/cli-utils/blob/master/pkg/kstatus/README.md#conditions),\nand record the Observed Generation on the Condition.\n\n#### Enhanced Git commit status updates\n\nStarting with this version, the controller uses the `Provider` cluster assigned `UID`\nto compose a unique Git commit status ID to avoid name collisions\n",
                    "rendered": {
                      "text": "[better integration with `kstatus`](https://github.com/kubernetes-sigs/cli-utils/blob/master/pkg/kstatus/README.md#conditions),\nand record the Observed Generation on the Condition.\n\n#### Enhanced Git commit status updates\n\nStarting with this version, the controller uses the `Provider` cluster assigned `UID`\nto compose a unique Git commit status ID to avoid name collisions\n",
                      "markdown": "`[better integration with `kstatus`](https://github.com/kubernetes-sigs/cli-utils/blob/master/pkg/kstatus/README.md#conditions),\nand record the Observed Generation on the Condition.\n\n#### Enhanced Git commit status updates\n\nStarting with this version, the controller uses the `Provider` cluster assigned `UID`\nto compose a unique Git commit status ID to avoid name collisions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 23,
                  "endLine": 593,
                  "snippet": {
                    "text": "### `notification.toolkit.fluxcd.io/v1beta2`\n\nAfter upgrading the controller to v0.30.0, you need to update the notification\n**Custom Resources** in Git\nby replacing `notification.toolkit.fluxcd.io/v1beta1` with\n`notification.toolkit.fluxcd.io/v1beta2` in all YAML manifests.\n\n#### Breaking changes\n",
                    "rendered": {
                      "text": "### `notification.toolkit.fluxcd.io/v1beta2`\n\nAfter upgrading the controller to v0.30.0, you need to update the notification\n**Custom Resources** in Git\nby replacing `notification.toolkit.fluxcd.io/v1beta1` with\n`notification.toolkit.fluxcd.io/v1beta2` in all YAML manifests.\n\n#### Breaking changes\n",
                      "markdown": "`### `notification.toolkit.fluxcd.io/v1beta2`\n\nAfter upgrading the controller to v0.30.0, you need to update the notification\n**Custom Resources** in Git\nby replacing `notification.toolkit.fluxcd.io/v1beta1` with\n`notification.toolkit.fluxcd.io/v1beta2` in all YAML manifests.\n\n#### Breaking changes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 43,
                  "endLine": 329,
                  "snippet": {
                    "text": "  [#565](https://github.com/fluxcd/notification-controller/pull/565)\n- Improve error messages in Gitea notifier\n  [#556](https://github.com/fluxcd/notification-controller/pull/556)\n- Make Gitea tests independent of 3rd-party service\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Align go.mod version with Kubernetes (Go 1.20)\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n",
                    "rendered": {
                      "text": "  [#565](https://github.com/fluxcd/notification-controller/pull/565)\n- Improve error messages in Gitea notifier\n  [#556](https://github.com/fluxcd/notification-controller/pull/556)\n- Make Gitea tests independent of 3rd-party service\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Align go.mod version with Kubernetes (Go 1.20)\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n",
                      "markdown": "`  [#565](https://github.com/fluxcd/notification-controller/pull/565)\n- Improve error messages in Gitea notifier\n  [#556](https://github.com/fluxcd/notification-controller/pull/556)\n- Make Gitea tests independent of 3rd-party service\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Align go.mod version with Kubernetes (Go 1.20)\n  [#558](https://github.com/fluxcd/notification-controller/pull/558)\n- Update dependencies\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 57,
                  "endLine": 229,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  [#654](https://github.com/fluxcd/notification-controller/pull/654)\n- Refactor events and introduce v1beta3 API for Alert and Provider\n  [#540](https://github.com/fluxcd/notification-controller/pull/540)\n- Add Bitbucket server/Bitbucket Data Center provider for git commit status\n  [#639](https://github.com/fluxcd/notification-controller/pull/639)\n- Address miscellaneous issues throughout code base\n  [#627](https://github.com/fluxcd/notification-controller/pull/627)\n",
                    "rendered": {
                      "text": "  [#654](https://github.com/fluxcd/notification-controller/pull/654)\n- Refactor events and introduce v1beta3 API for Alert and Provider\n  [#540](https://github.com/fluxcd/notification-controller/pull/540)\n- Add Bitbucket server/Bitbucket Data Center provider for git commit status\n  [#639](https://github.com/fluxcd/notification-controller/pull/639)\n- Address miscellaneous issues throughout code base\n  [#627](https://github.com/fluxcd/notification-controller/pull/627)\n",
                      "markdown": "`  [#654](https://github.com/fluxcd/notification-controller/pull/654)\n- Refactor events and introduce v1beta3 API for Alert and Provider\n  [#540](https://github.com/fluxcd/notification-controller/pull/540)\n- Add Bitbucket server/Bitbucket Data Center provider for git commit status\n  [#639](https://github.com/fluxcd/notification-controller/pull/639)\n- Address miscellaneous issues throughout code base\n  [#627](https://github.com/fluxcd/notification-controller/pull/627)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 39,
                  "endLine": 200,
                  "endColumn": 44,
                  "snippet": {
                    "text": "### `notification.toolkit.fluxcd.io/v1beta3`\n\nAfter upgrading the controller to v1.2.0, please update the notification Custom\nResources for `Alert` and `Provider` in Git by replacing\n`notification.toolkit.fluxcd.io/v1beta2` with\n`notification.toolkit.fluxcd.io/v1beta3` in all the YAML manifests.\n\n",
                    "rendered": {
                      "text": "### `notification.toolkit.fluxcd.io/v1beta3`\n\nAfter upgrading the controller to v1.2.0, please update the notification Custom\nResources for `Alert` and `Provider` in Git by replacing\n`notification.toolkit.fluxcd.io/v1beta2` with\n`notification.toolkit.fluxcd.io/v1beta3` in all the YAML manifests.\n\n",
                      "markdown": "`### `notification.toolkit.fluxcd.io/v1beta3`\n\nAfter upgrading the controller to v1.2.0, please update the notification Custom\nResources for `Alert` and `Provider` in Git by replacing\n`notification.toolkit.fluxcd.io/v1beta2` with\n`notification.toolkit.fluxcd.io/v1beta3` in all the YAML manifests.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 5,
                  "endLine": 100,
                  "endColumn": 14,
                  "snippet": {
                    "text": "Fixes:\n- Sanitize provider data loaded from secret\n  [#789](https://github.com/fluxcd/notification-controller/pull/789)\n- Fix timeout propagation for alerts\n  [#757](https://github.com/fluxcd/notification-controller/pull/757)\n- Fix Telegram MarkdownV2 escaping\n  [#776](https://github.com/fluxcd/notification-controller/pull/776)\n",
                    "rendered": {
                      "text": "Fixes:\n- Sanitize provider data loaded from secret\n  [#789](https://github.com/fluxcd/notification-controller/pull/789)\n- Fix timeout propagation for alerts\n  [#757](https://github.com/fluxcd/notification-controller/pull/757)\n- Fix Telegram MarkdownV2 escaping\n  [#776](https://github.com/fluxcd/notification-controller/pull/776)\n",
                      "markdown": "`Fixes:\n- Sanitize provider data loaded from secret\n  [#789](https://github.com/fluxcd/notification-controller/pull/789)\n- Fix timeout propagation for alerts\n  [#757](https://github.com/fluxcd/notification-controller/pull/757)\n- Fix Telegram MarkdownV2 escaping\n  [#776](https://github.com/fluxcd/notification-controller/pull/776)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 36,
                  "endLine": 83,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  [#796](https://github.com/fluxcd/notification-controller/pull/796)\n- Alertmanager: Change timestamp label to .StartsAt\n  [#795](https://github.com/fluxcd/notification-controller/pull/795)\n- Use `password` as fallback for the Git provider `token` auth\n  [#790](https://github.com/fluxcd/notification-controller/pull/790)\n- Add support for Bitbucket Context path\n  [#747](https://github.com/fluxcd/notification-controller/pull/747)\n",
                    "rendered": {
                      "text": "  [#796](https://github.com/fluxcd/notification-controller/pull/796)\n- Alertmanager: Change timestamp label to .StartsAt\n  [#795](https://github.com/fluxcd/notification-controller/pull/795)\n- Use `password` as fallback for the Git provider `token` auth\n  [#790](https://github.com/fluxcd/notification-controller/pull/790)\n- Add support for Bitbucket Context path\n  [#747](https://github.com/fluxcd/notification-controller/pull/747)\n",
                      "markdown": "`  [#796](https://github.com/fluxcd/notification-controller/pull/796)\n- Alertmanager: Change timestamp label to .StartsAt\n  [#795](https://github.com/fluxcd/notification-controller/pull/795)\n- Use `password` as fallback for the Git provider `token` auth\n  [#790](https://github.com/fluxcd/notification-controller/pull/790)\n- Add support for Bitbucket Context path\n  [#747](https://github.com/fluxcd/notification-controller/pull/747)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 1,
                  "endLine": 147,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n\t\tbash -c \"/runner.sh\"\n\n# Run fuzz tests for the duration set in FUZZ_TIME.\nfuzz-native: \n",
                    "rendered": {
                      "text": "\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n\t\tbash -c \"/runner.sh\"\n\n# Run fuzz tests for the duration set in FUZZ_TIME.\nfuzz-native: \n",
                      "markdown": "`\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n\t\tbash -c \"/runner.sh\"\n\n# Run fuzz tests for the duration set in FUZZ_TIME.\nfuzz-native: \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 7,
                  "snippet": {
                    "text": "controller-gen: ## Download controller-gen locally if necessary.\n\t$(call go-install-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@$(CONTROLLER_GEN_VERSION))\n\n# Find or download gen-crd-api-reference-docs\nGEN_CRD_API_REFERENCE_DOCS = $(GOBIN)/gen-crd-api-reference-docs\n.PHONY: gen-crd-api-reference-docs\ngen-crd-api-reference-docs:\n",
                    "rendered": {
                      "text": "controller-gen: ## Download controller-gen locally if necessary.\n\t$(call go-install-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@$(CONTROLLER_GEN_VERSION))\n\n# Find or download gen-crd-api-reference-docs\nGEN_CRD_API_REFERENCE_DOCS = $(GOBIN)/gen-crd-api-reference-docs\n.PHONY: gen-crd-api-reference-docs\ngen-crd-api-reference-docs:\n",
                      "markdown": "`controller-gen: ## Download controller-gen locally if necessary.\n\t$(call go-install-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@$(CONTROLLER_GEN_VERSION))\n\n# Find or download gen-crd-api-reference-docs\nGEN_CRD_API_REFERENCE_DOCS = $(GOBIN)/gen-crd-api-reference-docs\n.PHONY: gen-crd-api-reference-docs\ngen-crd-api-reference-docs:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 1,
                  "endLine": 155,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tFUZZ_TIME=$(FUZZ_TIME) \\\n\t\t./tests/fuzz/native_go_run.sh\n\n# Find or download controller-gen\nCONTROLLER_GEN = $(GOBIN)/controller-gen\n.PHONY: controller-gen\ncontroller-gen: ## Download controller-gen locally if necessary.\n",
                    "rendered": {
                      "text": "\tFUZZ_TIME=$(FUZZ_TIME) \\\n\t\t./tests/fuzz/native_go_run.sh\n\n# Find or download controller-gen\nCONTROLLER_GEN = $(GOBIN)/controller-gen\n.PHONY: controller-gen\ncontroller-gen: ## Download controller-gen locally if necessary.\n",
                      "markdown": "`\tFUZZ_TIME=$(FUZZ_TIME) \\\n\t\t./tests/fuzz/native_go_run.sh\n\n# Find or download controller-gen\nCONTROLLER_GEN = $(GOBIN)/controller-gen\n.PHONY: controller-gen\ncontroller-gen: ## Download controller-gen locally if necessary.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 1,
                  "endLine": 147,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n\t\tbash -c \"/runner.sh\"\n\n# Run fuzz tests for the duration set in FUZZ_TIME.\nfuzz-native: \n",
                    "rendered": {
                      "text": "\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n\t\tbash -c \"/runner.sh\"\n\n# Run fuzz tests for the duration set in FUZZ_TIME.\nfuzz-native: \n",
                      "markdown": "`\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n\t\tbash -c \"/runner.sh\"\n\n# Run fuzz tests for the duration set in FUZZ_TIME.\nfuzz-native: \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Run each fuzzer once to ensure they will work when executed by oss-fuzz.\nfuzz-smoketest: fuzz-build\n\tdocker run --rm \\\n\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n",
                    "rendered": {
                      "text": "\n# Run each fuzzer once to ensure they will work when executed by oss-fuzz.\nfuzz-smoketest: fuzz-build\n\tdocker run --rm \\\n\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n",
                      "markdown": "`\n# Run each fuzzer once to ensure they will work when executed by oss-fuzz.\nfuzz-smoketest: fuzz-build\n\tdocker run --rm \\\n\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\t-v \"$(shell pwd)/tests/fuzz/oss_fuzz_run.sh\":/runner.sh \\\n\t\tlocal-fuzzing:latest \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 16,
                  "endLine": 137,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n\t\t-v \"$(shell go env GOMODCACHE):/root/go/pkg/mod\" \\\n\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\tlocal-fuzzing:latest\n\n",
                    "rendered": {
                      "text": "\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n\t\t-v \"$(shell go env GOMODCACHE):/root/go/pkg/mod\" \\\n\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\tlocal-fuzzing:latest\n\n",
                      "markdown": "`\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n\t\t-v \"$(shell go env GOMODCACHE):/root/go/pkg/mod\" \\\n\t\t-v \"$(shell pwd)/build/fuzz/out\":/out \\\n\t\tlocal-fuzzing:latest\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tmkdir -p $(shell pwd)/build/fuzz/out/\n\n\tdocker build . --pull --tag local-fuzzing:latest -f tests/fuzz/Dockerfile.builder\n\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n\t\t-v \"$(shell go env GOMODCACHE):/root/go/pkg/mod\" \\\n",
                    "rendered": {
                      "text": "\tmkdir -p $(shell pwd)/build/fuzz/out/\n\n\tdocker build . --pull --tag local-fuzzing:latest -f tests/fuzz/Dockerfile.builder\n\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n\t\t-v \"$(shell go env GOMODCACHE):/root/go/pkg/mod\" \\\n",
                      "markdown": "`\tmkdir -p $(shell pwd)/build/fuzz/out/\n\n\tdocker build . --pull --tag local-fuzzing:latest -f tests/fuzz/Dockerfile.builder\n\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n\t\t-v \"$(shell go env GOMODCACHE):/root/go/pkg/mod\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\trm -rf $(shell pwd)/build/fuzz/\n\tmkdir -p $(shell pwd)/build/fuzz/out/\n\n\tdocker build . --pull --tag local-fuzzing:latest -f tests/fuzz/Dockerfile.builder\n\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n",
                    "rendered": {
                      "text": "\trm -rf $(shell pwd)/build/fuzz/\n\tmkdir -p $(shell pwd)/build/fuzz/out/\n\n\tdocker build . --pull --tag local-fuzzing:latest -f tests/fuzz/Dockerfile.builder\n\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n",
                      "markdown": "`\trm -rf $(shell pwd)/build/fuzz/\n\tmkdir -p $(shell pwd)/build/fuzz/out/\n\n\tdocker build . --pull --tag local-fuzzing:latest -f tests/fuzz/Dockerfile.builder\n\tdocker run --rm \\\n\t\t-e FUZZING_LANGUAGE=go -e SANITIZER=address \\\n\t\t-e CIFUZZ_DEBUG='True' -e OSS_FUZZ_PROJECT_NAME=fluxcd \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "endLine": 124,
                  "endColumn": 17,
                  "snippet": {
                    "text": "docker-push:\n\tdocker push ${IMG}\n\n# Set the docker image in-cluster\ndocker-deploy:\n\tkubectl -n flux-system set image deployment/notification-controller manager=${IMG}\n\n",
                    "rendered": {
                      "text": "docker-push:\n\tdocker push ${IMG}\n\n# Set the docker image in-cluster\ndocker-deploy:\n\tkubectl -n flux-system set image deployment/notification-controller manager=${IMG}\n\n",
                      "markdown": "`docker-push:\n\tdocker push ${IMG}\n\n# Set the docker image in-cluster\ndocker-deploy:\n\tkubectl -n flux-system set image deployment/notification-controller manager=${IMG}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Push the docker image\ndocker-push:\n\tdocker push ${IMG}\n\n# Set the docker image in-cluster\ndocker-deploy:\n",
                    "rendered": {
                      "text": "\n# Push the docker image\ndocker-push:\n\tdocker push ${IMG}\n\n# Set the docker image in-cluster\ndocker-deploy:\n",
                      "markdown": "`\n# Push the docker image\ndocker-push:\n\tdocker push ${IMG}\n\n# Set the docker image in-cluster\ndocker-deploy:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 10,
                  "endLine": 120,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t-t ${IMG} \\\n\t${BUILD_ARGS} .\n\n# Push the docker image\ndocker-push:\n\tdocker push ${IMG}\n\n",
                    "rendered": {
                      "text": "\t-t ${IMG} \\\n\t${BUILD_ARGS} .\n\n# Push the docker image\ndocker-push:\n\tdocker push ${IMG}\n\n",
                      "markdown": "`\t-t ${IMG} \\\n\t${BUILD_ARGS} .\n\n# Push the docker image\ndocker-push:\n\tdocker push ${IMG}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Build the docker image\ndocker-build:\n\tdocker buildx build \\\n\t--platform=$(BUILD_PLATFORMS) \\\n\t-t ${IMG} \\\n\t${BUILD_ARGS} .\n",
                    "rendered": {
                      "text": "\n# Build the docker image\ndocker-build:\n\tdocker buildx build \\\n\t--platform=$(BUILD_PLATFORMS) \\\n\t-t ${IMG} \\\n\t${BUILD_ARGS} .\n",
                      "markdown": "`\n# Build the docker image\ndocker-build:\n\tdocker buildx build \\\n\t--platform=$(BUILD_PLATFORMS) \\\n\t-t ${IMG} \\\n\t${BUILD_ARGS} .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 11,
                  "endLine": 113,
                  "endColumn": 19,
                  "snippet": {
                    "text": "generate: controller-gen\n\tcd api; $(CONTROLLER_GEN) object:headerFile=\"../hack/boilerplate.go.txt\" paths=\"./...\"\n\n# Build the docker image\ndocker-build:\n\tdocker buildx build \\\n\t--platform=$(BUILD_PLATFORMS) \\\n",
                    "rendered": {
                      "text": "generate: controller-gen\n\tcd api; $(CONTROLLER_GEN) object:headerFile=\"../hack/boilerplate.go.txt\" paths=\"./...\"\n\n# Build the docker image\ndocker-build:\n\tdocker buildx build \\\n\t--platform=$(BUILD_PLATFORMS) \\\n",
                      "markdown": "`generate: controller-gen\n\tcd api; $(CONTROLLER_GEN) object:headerFile=\"../hack/boilerplate.go.txt\" paths=\"./...\"\n\n# Build the docker image\ndocker-build:\n\tdocker buildx build \\\n\t--platform=$(BUILD_PLATFORMS) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 11,
                  "endLine": 102,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n\n# Run go vet against code\nvet:\n",
                    "rendered": {
                      "text": "# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n\n# Run go vet against code\nvet:\n",
                      "markdown": "`# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n\n# Run go vet against code\nvet:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 3,
                  "endLine": 101,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n\n# Run go vet against code\n",
                    "rendered": {
                      "text": "\n# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n\n# Run go vet against code\n",
                      "markdown": "`\n# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n\n# Run go vet against code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 8,
                  "endLine": 99,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tcd api; rm -f go.sum; go mod tidy -compat=1.22\n\trm -f go.sum; go mod tidy -compat=1.23\n\n# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n",
                    "rendered": {
                      "text": "\tcd api; rm -f go.sum; go mod tidy -compat=1.22\n\trm -f go.sum; go mod tidy -compat=1.23\n\n# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n",
                      "markdown": "`\tcd api; rm -f go.sum; go mod tidy -compat=1.22\n\trm -f go.sum; go mod tidy -compat=1.23\n\n# Run go fmt against code\nfmt:\n\tgo fmt ./...\n\tcd api; go fmt ./...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 23,
                  "endLine": 78,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n# Delete dev deployment and CRDs\ndev-cleanup: manifests\n\tmkdir -p config/dev && cp config/default/* config/dev\n\tcd config/dev && kustomize edit set image fluxcd/notification-controller=${IMG}\n\tkustomize build config/dev | kubectl delete -f -\n\trm -rf config/dev\n",
                    "rendered": {
                      "text": "\n# Delete dev deployment and CRDs\ndev-cleanup: manifests\n\tmkdir -p config/dev && cp config/default/* config/dev\n\tcd config/dev && kustomize edit set image fluxcd/notification-controller=${IMG}\n\tkustomize build config/dev | kubectl delete -f -\n\trm -rf config/dev\n",
                      "markdown": "`\n# Delete dev deployment and CRDs\ndev-cleanup: manifests\n\tmkdir -p config/dev && cp config/default/* config/dev\n\tcd config/dev && kustomize edit set image fluxcd/notification-controller=${IMG}\n\tkustomize build config/dev | kubectl delete -f -\n\trm -rf config/dev\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 23,
                  "endLine": 71,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n# Deploy controller dev image in the configured Kubernetes cluster in ~/.kube/config\ndev-deploy: manifests\n\tmkdir -p config/dev && cp config/default/* config/dev\n\tcd config/dev && kustomize edit set image fluxcd/notification-controller=${IMG}\n\tkustomize build config/dev | kubectl apply -f -\n\trm -rf config/dev\n",
                    "rendered": {
                      "text": "\n# Deploy controller dev image in the configured Kubernetes cluster in ~/.kube/config\ndev-deploy: manifests\n\tmkdir -p config/dev && cp config/default/* config/dev\n\tcd config/dev && kustomize edit set image fluxcd/notification-controller=${IMG}\n\tkustomize build config/dev | kubectl apply -f -\n\trm -rf config/dev\n",
                      "markdown": "`\n# Deploy controller dev image in the configured Kubernetes cluster in ~/.kube/config\ndev-deploy: manifests\n\tmkdir -p config/dev && cp config/default/* config/dev\n\tcd config/dev && kustomize edit set image fluxcd/notification-controller=${IMG}\n\tkustomize build config/dev | kubectl apply -f -\n\trm -rf config/dev\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tgo run ./main.go --metrics-addr=:9094\n\ndownload-crd-deps:\n\tcurl -s https://raw.githubusercontent.com/fluxcd/source-controller/${SOURCE_VER}/config/crd/bases/source.toolkit.fluxcd.io_gitrepositories.yaml > config/crd/bases/gitrepositories.yaml\n\n# Install CRDs into a cluster\ninstall: manifests\n",
                    "rendered": {
                      "text": "\tgo run ./main.go --metrics-addr=:9094\n\ndownload-crd-deps:\n\tcurl -s https://raw.githubusercontent.com/fluxcd/source-controller/${SOURCE_VER}/config/crd/bases/source.toolkit.fluxcd.io_gitrepositories.yaml > config/crd/bases/gitrepositories.yaml\n\n# Install CRDs into a cluster\ninstall: manifests\n",
                      "markdown": "`\tgo run ./main.go --metrics-addr=:9094\n\ndownload-crd-deps:\n\tcurl -s https://raw.githubusercontent.com/fluxcd/source-controller/${SOURCE_VER}/config/crd/bases/source.toolkit.fluxcd.io_gitrepositories.yaml > config/crd/bases/gitrepositories.yaml\n\n# Install CRDs into a cluster\ninstall: manifests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\nrun: generate fmt vet manifests\n\tgo run ./main.go --metrics-addr=:9094\n\ndownload-crd-deps:\n",
                    "rendered": {
                      "text": "\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\nrun: generate fmt vet manifests\n\tgo run ./main.go --metrics-addr=:9094\n\ndownload-crd-deps:\n",
                      "markdown": "`\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\nrun: generate fmt vet manifests\n\tgo run ./main.go --metrics-addr=:9094\n\ndownload-crd-deps:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "endLine": 46,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tcd api; go test ./... -coverprofile cover.out\n\n# Build manager binary\nmanager: generate fmt vet\n\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\n",
                    "rendered": {
                      "text": "\tcd api; go test ./... -coverprofile cover.out\n\n# Build manager binary\nmanager: generate fmt vet\n\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\n",
                      "markdown": "`\tcd api; go test ./... -coverprofile cover.out\n\n# Build manager binary\nmanager: generate fmt vet\n\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 19,
                  "endLine": 41,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n# Run tests\nKUBEBUILDER_ASSETS?=\"$(shell $(ENVTEST) --arch=$(ENVTEST_ARCH) use -i $(ENVTEST_KUBERNETES_VERSION) --bin-dir=$(ENVTEST_ASSETS_DIR) -p path)\"\ntest: tidy generate fmt vet manifests api-docs download-crd-deps install-envtest\n\tKUBEBUILDER_ASSETS=$(KUBEBUILDER_ASSETS) go test ./... $(GO_TEST_ARGS) -v -coverprofile cover.out\n\tcd api; go test ./... -coverprofile cover.out\n\n",
                    "rendered": {
                      "text": "\n# Run tests\nKUBEBUILDER_ASSETS?=\"$(shell $(ENVTEST) --arch=$(ENVTEST_ARCH) use -i $(ENVTEST_KUBERNETES_VERSION) --bin-dir=$(ENVTEST_ASSETS_DIR) -p path)\"\ntest: tidy generate fmt vet manifests api-docs download-crd-deps install-envtest\n\tKUBEBUILDER_ASSETS=$(KUBEBUILDER_ASSETS) go test ./... $(GO_TEST_ARGS) -v -coverprofile cover.out\n\tcd api; go test ./... -coverprofile cover.out\n\n",
                      "markdown": "`\n# Run tests\nKUBEBUILDER_ASSETS?=\"$(shell $(ENVTEST) --arch=$(ENVTEST_ARCH) use -i $(ENVTEST_KUBERNETES_VERSION) --bin-dir=$(ENVTEST_ASSETS_DIR) -p path)\"\ntest: tidy generate fmt vet manifests api-docs download-crd-deps install-envtest\n\tKUBEBUILDER_ASSETS=$(KUBEBUILDER_ASSETS) go test ./... $(GO_TEST_ARGS) -v -coverprofile cover.out\n\tcd api; go test ./... -coverprofile cover.out\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 32,
                  "endLine": 25,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# Allows for defining additional Go test args, e.g. '-tags integration'.\nGO_TEST_ARGS ?=\n\n# Allows for defining additional Docker buildx arguments, e.g. '--push'.\nBUILD_ARGS ?= --load\n# Architectures to build images for.\nBUILD_PLATFORMS ?= linux/amd64\n",
                    "rendered": {
                      "text": "# Allows for defining additional Go test args, e.g. '-tags integration'.\nGO_TEST_ARGS ?=\n\n# Allows for defining additional Docker buildx arguments, e.g. '--push'.\nBUILD_ARGS ?= --load\n# Architectures to build images for.\nBUILD_PLATFORMS ?= linux/amd64\n",
                      "markdown": "`# Allows for defining additional Go test args, e.g. '-tags integration'.\nGO_TEST_ARGS ?=\n\n# Allows for defining additional Docker buildx arguments, e.g. '--push'.\nBUILD_ARGS ?= --load\n# Architectures to build images for.\nBUILD_PLATFORMS ?= linux/amd64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 16,
                  "endLine": 19,
                  "endColumn": 21,
                  "snippet": {
                    "text": "ifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\nendif\n\n# Allows for defining additional Go test args, e.g. '-tags integration'.\n",
                    "rendered": {
                      "text": "ifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\nendif\n\n# Allows for defining additional Go test args, e.g. '-tags integration'.\n",
                      "markdown": "`ifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\nendif\n\n# Allows for defining additional Go test args, e.g. '-tags integration'.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 16,
                  "endLine": 17,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)\nifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\nendif\n",
                    "rendered": {
                      "text": "\n# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)\nifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\nendif\n",
                      "markdown": "`\n# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)\nifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 17,
                  "endLine": 16,
                  "endColumn": 22,
                  "snippet": {
                    "text": "GEN_API_REF_DOCS_VERSION ?= e327d0730470cbd61b06300f81c5fcf91c23c113\n\n# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)\nifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\n",
                    "rendered": {
                      "text": "GEN_API_REF_DOCS_VERSION ?= e327d0730470cbd61b06300f81c5fcf91c23c113\n\n# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)\nifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\n",
                      "markdown": "`GEN_API_REF_DOCS_VERSION ?= e327d0730470cbd61b06300f81c5fcf91c23c113\n\n# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)\nifeq (,$(shell go env GOBIN))\nGOBIN=$(shell go env GOPATH)/bin\nelse\nGOBIN=$(shell go env GOBIN)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 26,
                  "endLine": 8,
                  "endColumn": 31,
                  "snippet": {
                    "text": "SOURCE_VER ?= v1.2.4\n\n# Repository root based on Git metadata\nREPOSITORY_ROOT := $(shell git rev-parse --show-toplevel)\nBUILD_DIR := $(REPOSITORY_ROOT)/build\n\n# API (doc) generation utilities\n",
                    "rendered": {
                      "text": "SOURCE_VER ?= v1.2.4\n\n# Repository root based on Git metadata\nREPOSITORY_ROOT := $(shell git rev-parse --show-toplevel)\nBUILD_DIR := $(REPOSITORY_ROOT)/build\n\n# API (doc) generation utilities\n",
                      "markdown": "`SOURCE_VER ?= v1.2.4\n\n# Repository root based on Git metadata\nREPOSITORY_ROOT := $(shell git rev-parse --show-toplevel)\nBUILD_DIR := $(REPOSITORY_ROOT)/build\n\n# API (doc) generation utilities\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/flux-notification-controller.zip/Makefile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 7,
                  "endColumn": 31,
                  "snippet": {
                    "text": "CRD_OPTIONS ?= crd:crdVersions=v1\nSOURCE_VER ?= v1.2.4\n\n# Repository root based on Git metadata\nREPOSITORY_ROOT := $(shell git rev-parse --show-toplevel)\nBUILD_DIR := $(REPOSITORY_ROOT)/build\n\n",
                    "rendered": {
                      "text": "CRD_OPTIONS ?= crd:crdVersions=v1\nSOURCE_VER ?= v1.2.4\n\n# Repository root based on Git metadata\nREPOSITORY_ROOT := $(shell git rev-parse --show-toplevel)\nBUILD_DIR := $(REPOSITORY_ROOT)/build\n\n",
                      "markdown": "`CRD_OPTIONS ?= crd:crdVersions=v1\nSOURCE_VER ?= v1.2.4\n\n# Repository root based on Git metadata\nREPOSITORY_ROOT := $(shell git rev-parse --show-toplevel)\nBUILD_DIR := $(REPOSITORY_ROOT)/build\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}