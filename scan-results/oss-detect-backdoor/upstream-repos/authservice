{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/rbac.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 29,
                  "endLine": 241,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  // refresh token to obtain new tokens. Configure the `proxy_uri` when\n  // both of these requests should be made through a web proxy. The format of `proxy_uri` is\n  // `http://proxyserver.example.com:8080`, where `:<port_number>` is optional.\n  // Userinfo (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n  // The `proxy_uri` should always start with `http://`.\n  // The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n  // an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n",
                    "rendered": {
                      "text": "  // refresh token to obtain new tokens. Configure the `proxy_uri` when\n  // both of these requests should be made through a web proxy. The format of `proxy_uri` is\n  // `http://proxyserver.example.com:8080`, where `:<port_number>` is optional.\n  // Userinfo (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n  // The `proxy_uri` should always start with `http://`.\n  // The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n  // an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n",
                      "markdown": "`  // refresh token to obtain new tokens. Configure the `proxy_uri` when\n  // both of these requests should be made through a web proxy. The format of `proxy_uri` is\n  // `http://proxyserver.example.com:8080`, where `:<port_number>` is optional.\n  // Userinfo (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n  // The `proxy_uri` should always start with `http://`.\n  // The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n  // an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 80,
                  "endLine": 244,
                  "endColumn": 88,
                  "snippet": {
                    "text": "o (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n  // The `proxy_uri` should always start with `http://`.\n  // The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n  // an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n  // of the OIDC provider in plain text in the CONNECT request, but all other communication will occur\n  // over an encrypted HTTPS connection negotiated directly between the Authservice and\n  // the OIDC provider. See also the related `trusted_certificate_authority` configuration o",
                    "rendered": {
                      "text": "o (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n  // The `proxy_uri` should always start with `http://`.\n  // The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n  // an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n  // of the OIDC provider in plain text in the CONNECT request, but all other communication will occur\n  // over an encrypted HTTPS connection negotiated directly between the Authservice and\n  // the OIDC provider. See also the related `trusted_certificate_authority` configuration o",
                      "markdown": "`o (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n  // The `proxy_uri` should always start with `http://`.\n  // The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n  // an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n  // of the OIDC provider in plain text in the CONNECT request, but all other communication will occur\n  // over an encrypted HTTPS connection negotiated directly between the Authservice and\n  // the OIDC provider. See also the related `trusted_certificate_authority` configuration o`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 77,
                  "endLine": 128,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    // Used during token verification.\n    string jwks = 4;\n\n    // Configuration to allow JWKs to be retrieved and updated asynchronously at regular intervals.\n    JwksFetcherConfig jwks_fetcher = 17;\n  }\n\n",
                    "rendered": {
                      "text": "    // Used during token verification.\n    string jwks = 4;\n\n    // Configuration to allow JWKs to be retrieved and updated asynchronously at regular intervals.\n    JwksFetcherConfig jwks_fetcher = 17;\n  }\n\n",
                      "markdown": "`    // Used during token verification.\n    string jwks = 4;\n\n    // Configuration to allow JWKs to be retrieved and updated asynchronously at regular intervals.\n    JwksFetcherConfig jwks_fetcher = 17;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 19,
                  "endLine": 99,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n\n  // This message defines a setting to allow asynchronous retrieval and update of the JWK for\n  // JWT validation at regular intervals.\n  message JwksFetcherConfig {\n    // Request URI that has the JWKs.\n    // Required if `configuration_uri` is not set.\n",
                    "rendered": {
                      "text": "  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n\n  // This message defines a setting to allow asynchronous retrieval and update of the JWK for\n  // JWT validation at regular intervals.\n  message JwksFetcherConfig {\n    // Request URI that has the JWKs.\n    // Required if `configuration_uri` is not set.\n",
                      "markdown": "`  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n\n  // This message defines a setting to allow asynchronous retrieval and update of the JWK for\n  // JWT validation at regular intervals.\n  message JwksFetcherConfig {\n    // Request URI that has the JWKs.\n    // Required if `configuration_uri` is not set.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 71,
                  "endLine": 98,
                  "endColumn": 79,
                  "snippet": {
                    "text": "  // Required.\n  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n\n  // This message defines a setting to allow asynchronous retrieval and update of the JWK for\n  // JWT validation at regular intervals.\n  message JwksFetcherConfig {\n    // Request URI that has the JWKs.\n",
                    "rendered": {
                      "text": "  // Required.\n  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n\n  // This message defines a setting to allow asynchronous retrieval and update of the JWK for\n  // JWT validation at regular intervals.\n  message JwksFetcherConfig {\n    // Request URI that has the JWKs.\n",
                      "markdown": "`  // Required.\n  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n\n  // This message defines a setting to allow asynchronous retrieval and update of the JWK for\n  // JWT validation at regular intervals.\n  message JwksFetcherConfig {\n    // Request URI that has the JWKs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 85,
                  "endLine": 91,
                  "endColumn": 89,
                  "snippet": {
                    "text": "t.\n  string token_uri = 2;\n\n  // This value will be used as the `redirect_uri` param of the authorization code grant\n  // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n  // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.\n  // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to\n  // the service so that the Authservice can intercept the request and handle it\n  // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-exampl",
                    "rendered": {
                      "text": "t.\n  string token_uri = 2;\n\n  // This value will be used as the `redirect_uri` param of the authorization code grant\n  // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n  // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.\n  // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to\n  // the service so that the Authservice can intercept the request and handle it\n  // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-exampl",
                      "markdown": "`t.\n  string token_uri = 2;\n\n  // This value will be used as the `redirect_uri` param of the authorization code grant\n  // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n  // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.\n  // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to\n  // the service so that the Authservice can intercept the request and handle it\n  // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-exampl`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 61,
                  "endLine": 211,
                  "endColumn": 67,
                  "snippet": {
                    "text": "  // This configuration option sets the number of seconds since the most recent incoming request from that user\n  // until the user's session with the Authservice should expire.\n  // When configured to `0`, which is the default value, session expiration will not consider idle time,\n  // but can still consider timeout based on maximum absolute time since added.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                    "rendered": {
                      "text": "  // This configuration option sets the number of seconds since the most recent incoming request from that user\n  // until the user's session with the Authservice should expire.\n  // When configured to `0`, which is the default value, session expiration will not consider idle time,\n  // but can still consider timeout based on maximum absolute time since added.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                      "markdown": "`  // This configuration option sets the number of seconds since the most recent incoming request from that user\n  // until the user's session with the Authservice should expire.\n  // When configured to `0`, which is the default value, session expiration will not consider idle time,\n  // but can still consider timeout based on maximum absolute time since added.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 27,
                  "endLine": 211,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  // This configuration option sets the number of seconds since the most recent incoming request from that user\n  // until the user's session with the Authservice should expire.\n  // When configured to `0`, which is the default value, session expiration will not consider idle time,\n  // but can still consider timeout based on maximum absolute time since added.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                    "rendered": {
                      "text": "  // This configuration option sets the number of seconds since the most recent incoming request from that user\n  // until the user's session with the Authservice should expire.\n  // When configured to `0`, which is the default value, session expiration will not consider idle time,\n  // but can still consider timeout based on maximum absolute time since added.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                      "markdown": "`  // This configuration option sets the number of seconds since the most recent incoming request from that user\n  // until the user's session with the Authservice should expire.\n  // When configured to `0`, which is the default value, session expiration will not consider idle time,\n  // but can still consider timeout based on maximum absolute time since added.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 39,
                  "endLine": 199,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                    "rendered": {
                      "text": "  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                      "markdown": "`  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 100,
                  "endLine": 199,
                  "snippet": {
                    "text": "l be removed when the user finishes the login.\n  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                    "rendered": {
                      "text": "l be removed when the user finishes the login.\n  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n",
                      "markdown": "`l be removed when the user finishes the login.\n  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n  // Optional.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 79,
                  "endLine": 198,
                  "endColumn": 88,
                  "snippet": {
                    "text": "  // which will be removed when the user finishes the login.\n  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n",
                    "rendered": {
                      "text": "  // which will be removed when the user finishes the login.\n  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n",
                      "markdown": "`  // which will be removed when the user finishes the login.\n  // This configuration option sets the number of seconds since a user's session with the Authservice has started\n  // until that session should expire.\n  // When configured to `0`, which is the default value, the session will never timeout based on the time\n  // that it was started, but can still timeout due to being idle.\n  // When both `absolute_session_timeout` and `idle_session_timeout` are zero, then sessions will never\n  // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 8,
                  "endLine": 93,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n  // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.\n  // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to\n  // the service so that the Authservice can intercept the request and handle it\n  // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-example/config/bookinfo-gateway.yaml)).\n  // Required.\n  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n",
                    "rendered": {
                      "text": "  // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n  // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.\n  // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to\n  // the service so that the Authservice can intercept the request and handle it\n  // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-example/config/bookinfo-gateway.yaml)).\n  // Required.\n  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n",
                      "markdown": "`  // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n  // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.\n  // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to\n  // the service so that the Authservice can intercept the request and handle it\n  // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-example/config/bookinfo-gateway.yaml)).\n  // Required.\n  string callback_uri = 3 [(validate.rules).string.min_len = 1];\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 11,
                  "endLine": 66,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  // A URI specifying the destination to which the Authservice will redirect any request made to the\n  // logout `path`. For example, it may be desirable to redirect the logged out user to the homepage\n  // of the service application, or to the\n  // [logout endpoint of the OIDC Provider](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout).\n  // As with all redirects, the user's browser will perform a GET to this URI.\n  // Required when the OIDC discovery is not used or when the OIDC discovery does not provide the\n",
                    "rendered": {
                      "text": "\n  // A URI specifying the destination to which the Authservice will redirect any request made to the\n  // logout `path`. For example, it may be desirable to redirect the logged out user to the homepage\n  // of the service application, or to the\n  // [logout endpoint of the OIDC Provider](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout).\n  // As with all redirects, the user's browser will perform a GET to this URI.\n  // Required when the OIDC discovery is not used or when the OIDC discovery does not provide the\n",
                      "markdown": "`\n  // A URI specifying the destination to which the Authservice will redirect any request made to the\n  // logout `path`. For example, it may be desirable to redirect the logged out user to the homepage\n  // of the service application, or to the\n  // [logout endpoint of the OIDC Provider](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout).\n  // As with all redirects, the user's browser will perform a GET to this URI.\n  // Required when the OIDC discovery is not used or when the OIDC discovery does not provide the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 52,
                  "endLine": 59,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  // cookies and respond with a redirect to the configured `redirect_uri`. Removing the cookies\n  // causes the user to be unauthenticated in future requests.\n  // If the service application has its own logout controller, then it may be desirable to have its\n  // logout controller redirect to this path. If the service application does not need its own logout\n  // controller, then the application's logout button/link's href can GET or POST directly to this path.\n  // Required.\n  string path = 1 [(validate.rules).string.min_len = 1];\n",
                    "rendered": {
                      "text": "  // cookies and respond with a redirect to the configured `redirect_uri`. Removing the cookies\n  // causes the user to be unauthenticated in future requests.\n  // If the service application has its own logout controller, then it may be desirable to have its\n  // logout controller redirect to this path. If the service application does not need its own logout\n  // controller, then the application's logout button/link's href can GET or POST directly to this path.\n  // Required.\n  string path = 1 [(validate.rules).string.min_len = 1];\n",
                      "markdown": "`  // cookies and respond with a redirect to the configured `redirect_uri`. Removing the cookies\n  // causes the user to be unauthenticated in future requests.\n  // If the service application has its own logout controller, then it may be desirable to have its\n  // logout controller redirect to this path. If the service application does not need its own logout\n  // controller, then the application's logout button/link's href can GET or POST directly to this path.\n  // Required.\n  string path = 1 [(validate.rules).string.min_len = 1];\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/oidc/config.proto"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 11,
                  "endLine": 58,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  // Whenever a request is made to that path, the Authservice will remove the Authservice-specific\n  // cookies and respond with a redirect to the configured `redirect_uri`. Removing the cookies\n  // causes the user to be unauthenticated in future requests.\n  // If the service application has its own logout controller, then it may be desirable to have its\n  // logout controller redirect to this path. If the service application does not need its own logout\n  // controller, then the application's logout button/link's href can GET or POST directly to this path.\n  // Required.\n",
                    "rendered": {
                      "text": "  // Whenever a request is made to that path, the Authservice will remove the Authservice-specific\n  // cookies and respond with a redirect to the configured `redirect_uri`. Removing the cookies\n  // causes the user to be unauthenticated in future requests.\n  // If the service application has its own logout controller, then it may be desirable to have its\n  // logout controller redirect to this path. If the service application does not need its own logout\n  // controller, then the application's logout button/link's href can GET or POST directly to this path.\n  // Required.\n",
                      "markdown": "`  // Whenever a request is made to that path, the Authservice will remove the Authservice-specific\n  // cookies and respond with a redirect to the configured `redirect_uri`. Removing the cookies\n  // causes the user to be unauthenticated in future requests.\n  // If the service application has its own logout controller, then it may be desirable to have its\n  // logout controller redirect to this path. If the service application does not need its own logout\n  // controller, then the application's logout button/link's href can GET or POST directly to this path.\n  // Required.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/mock/config.proto"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/config.proto"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 46,
                  "endLine": 167,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  repeated StringMatch excluded_paths = 1;\n\n  // List of paths that the request must include. If the list is not empty, the\n  // rule is satisfied if request path matches at least one of the path in the list.\n  // If the list is empty, the rule is ignored, in other words the rule is always satisfied.\n  // Optional.\n  repeated StringMatch included_paths = 2;\n",
                    "rendered": {
                      "text": "  repeated StringMatch excluded_paths = 1;\n\n  // List of paths that the request must include. If the list is not empty, the\n  // rule is satisfied if request path matches at least one of the path in the list.\n  // If the list is empty, the rule is ignored, in other words the rule is always satisfied.\n  // Optional.\n  repeated StringMatch included_paths = 2;\n",
                      "markdown": "`  repeated StringMatch excluded_paths = 1;\n\n  // List of paths that the request must include. If the list is not empty, the\n  // rule is satisfied if request path matches at least one of the path in the list.\n  // If the list is empty, the rule is ignored, in other words the rule is always satisfied.\n  // Optional.\n  repeated StringMatch included_paths = 2;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/config.proto"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 19,
                  "endLine": 130,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  // on the Istio Authentication Policy\n  // (see https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1).\n  // CAUTION: Be sure that your configured `OIDCConfig.callback` and `OIDCConfig.logout` paths\n  // each satisfies at least one of the trigger rules, or else the Authservice will not be able to\n  // intercept requests made to those paths to perform the appropriate login/logout behavior.\n  // Optional. Leave this empty to always trigger authentication for all paths.\n  repeated TriggerRule trigger_rules = 9;\n",
                    "rendered": {
                      "text": "  // on the Istio Authentication Policy\n  // (see https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1).\n  // CAUTION: Be sure that your configured `OIDCConfig.callback` and `OIDCConfig.logout` paths\n  // each satisfies at least one of the trigger rules, or else the Authservice will not be able to\n  // intercept requests made to those paths to perform the appropriate login/logout behavior.\n  // Optional. Leave this empty to always trigger authentication for all paths.\n  repeated TriggerRule trigger_rules = 9;\n",
                      "markdown": "`  // on the Istio Authentication Policy\n  // (see https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1).\n  // CAUTION: Be sure that your configured `OIDCConfig.callback` and `OIDCConfig.logout` paths\n  // each satisfies at least one of the trigger rules, or else the Authservice will not be able to\n  // intercept requests made to those paths to perform the appropriate login/logout behavior.\n  // Optional. Leave this empty to always trigger authentication for all paths.\n  repeated TriggerRule trigger_rules = 9;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/config.proto"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 4,
                  "endLine": 100,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  // until a matching filter is found. The first matching filter is then applied to the request.\n  // After the first match is made, other filters in the chain are ignored.\n  // Order of chain declaration is therefore important.\n  // At least one `FilterChain` is required in this array.\n  repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];\n\n  // The IP address for the Authservice to listen for incoming requests to process.\n",
                    "rendered": {
                      "text": "  // until a matching filter is found. The first matching filter is then applied to the request.\n  // After the first match is made, other filters in the chain are ignored.\n  // Order of chain declaration is therefore important.\n  // At least one `FilterChain` is required in this array.\n  repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];\n\n  // The IP address for the Authservice to listen for incoming requests to process.\n",
                      "markdown": "`  // until a matching filter is found. The first matching filter is then applied to the request.\n  // After the first match is made, other filters in the chain are ignored.\n  // Order of chain declaration is therefore important.\n  // At least one `FilterChain` is required in this array.\n  repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];\n\n  // The IP address for the Authservice to listen for incoming requests to process.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/config.proto"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 4,
                  "endLine": 88,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  // If all filters return OK, the envoy proxy is notified that the request may continue.\n  // The first filter that returns a non-OK response causes the request to be rejected with\n  // the filter's returned status and any remaining filters are skipped.\n  // At least one `Filter` is required in this array.\n  repeated Filter filters = 3 [(validate.rules).repeated.min_items = 1];\n}\n\n",
                    "rendered": {
                      "text": "  // If all filters return OK, the envoy proxy is notified that the request may continue.\n  // The first filter that returns a non-OK response causes the request to be rejected with\n  // the filter's returned status and any remaining filters are skipped.\n  // At least one `Filter` is required in this array.\n  repeated Filter filters = 3 [(validate.rules).repeated.min_items = 1];\n}\n\n",
                      "markdown": "`  // If all filters return OK, the envoy proxy is notified that the request may continue.\n  // The first filter that returns a non-OK response causes the request to be rejected with\n  // the filter's returned status and any remaining filters are skipped.\n  // At least one `Filter` is required in this array.\n  repeated Filter filters = 3 [(validate.rules).repeated.min_items = 1];\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/config.proto"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/v1/config.proto"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 8,
                  "endLine": 103,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  // At least one `FilterChain` is required in this array.\n  repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];\n\n  // The IP address for the Authservice to listen for incoming requests to process.\n  // Required.\n  string listen_address = 2 [(validate.rules).string.ip = true];\n\n",
                    "rendered": {
                      "text": "  // At least one `FilterChain` is required in this array.\n  repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];\n\n  // The IP address for the Authservice to listen for incoming requests to process.\n  // Required.\n  string listen_address = 2 [(validate.rules).string.ip = true];\n\n",
                      "markdown": "`  // At least one `FilterChain` is required in this array.\n  repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];\n\n  // The IP address for the Authservice to listen for incoming requests to process.\n  // Required.\n  string listen_address = 2 [(validate.rules).string.ip = true];\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.go"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 28,
                  "endLine": 335,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t// refresh token to obtain new tokens. Configure the `proxy_uri` when\n\t// both of these requests should be made through a web proxy. The format of `proxy_uri` is\n\t// `http://proxyserver.example.com:8080`, where `:<port_number>` is optional.\n\t// Userinfo (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n\t// The `proxy_uri` should always start with `http://`.\n\t// The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n\t// an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n",
                    "rendered": {
                      "text": "\t// refresh token to obtain new tokens. Configure the `proxy_uri` when\n\t// both of these requests should be made through a web proxy. The format of `proxy_uri` is\n\t// `http://proxyserver.example.com:8080`, where `:<port_number>` is optional.\n\t// Userinfo (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n\t// The `proxy_uri` should always start with `http://`.\n\t// The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n\t// an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n",
                      "markdown": "`\t// refresh token to obtain new tokens. Configure the `proxy_uri` when\n\t// both of these requests should be made through a web proxy. The format of `proxy_uri` is\n\t// `http://proxyserver.example.com:8080`, where `:<port_number>` is optional.\n\t// Userinfo (usernames and passwords) in the `proxy_uri` setting are not yet supported.\n\t// The `proxy_uri` should always start with `http://`.\n\t// The Authservice will upgrade the connection to the OIDC provider to HTTPS using\n\t// an HTTP CONNECT request to the proxy server. The proxy server will see the hostname and port number\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 12,
                  "endLine": 559,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t} else if v, ok := interface{}(m.GetTrustedCertificateAuthorityRefreshInterval()).(interface{ Validate() error }); ok {\n\t\tif err := v.Validate(); err != nil {\n\t\t\treturn OIDCConfigValidationError{\n\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\tcause:  err,\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t} else if v, ok := interface{}(m.GetTrustedCertificateAuthorityRefreshInterval()).(interface{ Validate() error }); ok {\n\t\tif err := v.Validate(); err != nil {\n\t\t\treturn OIDCConfigValidationError{\n\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\tcause:  err,\n\t\t\t}\n",
                      "markdown": "`\t} else if v, ok := interface{}(m.GetTrustedCertificateAuthorityRefreshInterval()).(interface{ Validate() error }); ok {\n\t\tif err := v.Validate(); err != nil {\n\t\t\treturn OIDCConfigValidationError{\n\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\tcause:  err,\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 13,
                  "endLine": 550,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\tcase interface{ Validate() error }:\n\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\terrors = append(errors, OIDCConfigValidationError{\n\t\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\tcause:  err,\n\t\t\t\t})\n",
                    "rendered": {
                      "text": "\t\tcase interface{ Validate() error }:\n\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\terrors = append(errors, OIDCConfigValidationError{\n\t\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\tcause:  err,\n\t\t\t\t})\n",
                      "markdown": "`\t\tcase interface{ Validate() error }:\n\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\terrors = append(errors, OIDCConfigValidationError{\n\t\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\tcause:  err,\n\t\t\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 13,
                  "endLine": 542,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\tcase interface{ ValidateAll() error }:\n\t\t\tif err := v.ValidateAll(); err != nil {\n\t\t\t\terrors = append(errors, OIDCConfigValidationError{\n\t\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\tcause:  err,\n\t\t\t\t})\n",
                    "rendered": {
                      "text": "\t\tcase interface{ ValidateAll() error }:\n\t\t\tif err := v.ValidateAll(); err != nil {\n\t\t\t\terrors = append(errors, OIDCConfigValidationError{\n\t\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\tcause:  err,\n\t\t\t\t})\n",
                      "markdown": "`\t\tcase interface{ ValidateAll() error }:\n\t\t\tif err := v.ValidateAll(); err != nil {\n\t\t\t\terrors = append(errors, OIDCConfigValidationError{\n\t\t\t\t\tfield:  \"TrustedCertificateAuthorityRefreshInterval\",\n\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\tcause:  err,\n\t\t\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 1033,
                  "startColumn": 32,
                  "endLine": 1033,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetName()) < 1 {\n\t\terr := OIDCConfig_SecretReferenceValidationError{\n\t\t\tfield:  \"Name\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetName()) < 1 {\n\t\terr := OIDCConfig_SecretReferenceValidationError{\n\t\t\tfield:  \"Name\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetName()) < 1 {\n\t\terr := OIDCConfig_SecretReferenceValidationError{\n\t\t\tfield:  \"Name\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 33,
                  "endLine": 701,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\tif utf8.RuneCountInString(m.GetClientSecret()) < 1 {\n\t\t\terr := OIDCConfigValidationError{\n\t\t\t\tfield:  \"ClientSecret\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n",
                    "rendered": {
                      "text": "\t\tif utf8.RuneCountInString(m.GetClientSecret()) < 1 {\n\t\t\terr := OIDCConfigValidationError{\n\t\t\t\tfield:  \"ClientSecret\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n",
                      "markdown": "`\t\tif utf8.RuneCountInString(m.GetClientSecret()) < 1 {\n\t\t\terr := OIDCConfigValidationError{\n\t\t\t\tfield:  \"ClientSecret\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 32,
                  "endLine": 414,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetClientId()) < 1 {\n\t\terr := OIDCConfigValidationError{\n\t\t\tfield:  \"ClientId\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetClientId()) < 1 {\n\t\terr := OIDCConfigValidationError{\n\t\t\tfield:  \"ClientId\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetClientId()) < 1 {\n\t\terr := OIDCConfigValidationError{\n\t\t\tfield:  \"ClientId\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 32,
                  "endLine": 403,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetCallbackUri()) < 1 {\n\t\terr := OIDCConfigValidationError{\n\t\t\tfield:  \"CallbackUri\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetCallbackUri()) < 1 {\n\t\terr := OIDCConfigValidationError{\n\t\t\tfield:  \"CallbackUri\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetCallbackUri()) < 1 {\n\t\terr := OIDCConfigValidationError{\n\t\t\tfield:  \"CallbackUri\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 32,
                  "endLine": 285,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetPath()) < 1 {\n\t\terr := LogoutConfigValidationError{\n\t\t\tfield:  \"Path\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetPath()) < 1 {\n\t\terr := LogoutConfigValidationError{\n\t\t\tfield:  \"Path\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetPath()) < 1 {\n\t\terr := LogoutConfigValidationError{\n\t\t\tfield:  \"Path\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 32,
                  "endLine": 175,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetServerUri()) < 1 {\n\t\terr := RedisConfigValidationError{\n\t\t\tfield:  \"ServerUri\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetServerUri()) < 1 {\n\t\terr := RedisConfigValidationError{\n\t\t\tfield:  \"ServerUri\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetServerUri()) < 1 {\n\t\terr := RedisConfigValidationError{\n\t\t\tfield:  \"ServerUri\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/oidc/config.pb.validate.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 32,
                  "endLine": 63,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetHeader()) < 1 {\n\t\terr := TokenConfigValidationError{\n\t\t\tfield:  \"Header\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetHeader()) < 1 {\n\t\terr := TokenConfigValidationError{\n\t\t\tfield:  \"Header\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetHeader()) < 1 {\n\t\terr := TokenConfigValidationError{\n\t\t\tfield:  \"Header\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/authservice.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/authservice.yaml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 22,
                  "snippet": {
                    "text": "  name: authservice\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: authservice\n  namespace: authservice\n  labels:\n",
                    "rendered": {
                      "text": "  name: authservice\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: authservice\n  namespace: authservice\n  labels:\n",
                      "markdown": "`  name: authservice\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: authservice\n  namespace: authservice\n  labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/http-echo.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/http-echo.yaml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 30,
                  "snippet": {
                    "text": "  namespace: http-echo\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: http-echo\n  namespace: http-echo\n  labels:\n",
                    "rendered": {
                      "text": "  namespace: http-echo\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: http-echo\n  namespace: http-echo\n  labels:\n",
                      "markdown": "`  namespace: http-echo\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: http-echo\n  namespace: http-echo\n  labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/telemetry.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/ingress-gateway.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/authz-policy.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/redis.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/redis.yaml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 28,
                  "snippet": {
                    "text": "  namespace: redis\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\n  namespace: redis\n  labels:\n",
                    "rendered": {
                      "text": "  namespace: redis\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\n  namespace: redis\n  labels:\n",
                      "markdown": "`  namespace: redis\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\n  namespace: redis\n  labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 33,
                  "endLine": 157,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 6,
                  "endLine": 157,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 33,
                  "endLine": 147,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 6,
                  "endLine": 147,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 22,
                  "endLine": 143,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                    "rendered": {
                      "text": "    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                      "markdown": "`    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 10,
                  "endLine": 143,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                    "rendered": {
                      "text": "    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                      "markdown": "`    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 35,
                  "endLine": 141,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                    "rendered": {
                      "text": "    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                      "markdown": "`    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 33,
                  "endLine": 139,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 6,
                  "endLine": 139,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n    \n    /opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 4,
                  "endLine": 126,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    KEYCLOAK_SERVER=\"http://keycloak:8080\"\n    REALM=\"master\"\n    USERNAME=authservice\n    PASSWORD=authservice\n    CLIENT_ID=authservice\n    CLIENT_SECRET=authservice-secret\n    REDIRECT_URL=https://http-echo.authservice.internal/callback\n",
                    "rendered": {
                      "text": "    KEYCLOAK_SERVER=\"http://keycloak:8080\"\n    REALM=\"master\"\n    USERNAME=authservice\n    PASSWORD=authservice\n    CLIENT_ID=authservice\n    CLIENT_SECRET=authservice-secret\n    REDIRECT_URL=https://http-echo.authservice.internal/callback\n",
                      "markdown": "`    KEYCLOAK_SERVER=\"http://keycloak:8080\"\n    REALM=\"master\"\n    USERNAME=authservice\n    PASSWORD=authservice\n    CLIENT_ID=authservice\n    CLIENT_SECRET=authservice-secret\n    REDIRECT_URL=https://http-echo.authservice.internal/callback\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 35,
                  "endLine": 104,
                  "endColumn": 43,
                  "snippet": {
                    "text": "          env:\n            - name: KEYCLOAK_ADMIN\n              value: admin\n            - name: KEYCLOAK_ADMIN_PASSWORD\n              value: admin\n          volumeMounts:\n            - name: setup-script\n",
                    "rendered": {
                      "text": "          env:\n            - name: KEYCLOAK_ADMIN\n              value: admin\n            - name: KEYCLOAK_ADMIN_PASSWORD\n              value: admin\n          volumeMounts:\n            - name: setup-script\n",
                      "markdown": "`          env:\n            - name: KEYCLOAK_ADMIN\n              value: admin\n            - name: KEYCLOAK_ADMIN_PASSWORD\n              value: admin\n          volumeMounts:\n            - name: setup-script\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 35,
                  "endLine": 77,
                  "endColumn": 43,
                  "snippet": {
                    "text": "          env:\n            - name: KEYCLOAK_ADMIN\n              value: admin\n            - name: KEYCLOAK_ADMIN_PASSWORD\n              value: admin\n          readinessProbe:\n            initialDelaySeconds: 5\n",
                    "rendered": {
                      "text": "          env:\n            - name: KEYCLOAK_ADMIN\n              value: admin\n            - name: KEYCLOAK_ADMIN_PASSWORD\n              value: admin\n          readinessProbe:\n            initialDelaySeconds: 5\n",
                      "markdown": "`          env:\n            - name: KEYCLOAK_ADMIN\n              value: admin\n            - name: KEYCLOAK_ADMIN_PASSWORD\n              value: admin\n          readinessProbe:\n            initialDelaySeconds: 5\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 38,
                  "endLine": 96,
                  "endColumn": 42,
                  "snippet": {
                    "text": "      initContainers:\n        - name: wait-for-keycloak\n          image: busybox:stable\n          command: [\"sh\", \"-c\", \"until nc -v -z -w3 keycloak 8080; do sleep 2; done\"]\n      containers:\n        - name: setup-keycloak\n          image: quay.io/keycloak/keycloak:23.0.6\n",
                    "rendered": {
                      "text": "      initContainers:\n        - name: wait-for-keycloak\n          image: busybox:stable\n          command: [\"sh\", \"-c\", \"until nc -v -z -w3 keycloak 8080; do sleep 2; done\"]\n      containers:\n        - name: setup-keycloak\n          image: quay.io/keycloak/keycloak:23.0.6\n",
                      "markdown": "`      initContainers:\n        - name: wait-for-keycloak\n          image: busybox:stable\n          command: [\"sh\", \"-c\", \"until nc -v -z -w3 keycloak 8080; do sleep 2; done\"]\n      containers:\n        - name: setup-keycloak\n          image: quay.io/keycloak/keycloak:23.0.6\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/manifests/keycloak.yaml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 22,
                  "snippet": {
                    "text": "  name: keycloak\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: keycloak\n  namespace: keycloak\n  labels:\n",
                    "rendered": {
                      "text": "  name: keycloak\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: keycloak\n  namespace: keycloak\n  labels:\n",
                      "markdown": "`  name: keycloak\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: keycloak\n  namespace: keycloak\n  labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/mock/envoy-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/mock/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/ci.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/ci.yaml"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 17,
                  "endLine": 132,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - run: make docker e2e/legacy\n      - name: Upload e2e logs on failure\n        uses: actions/upload-artifact@v4\n        if: failure()\n",
                    "rendered": {
                      "text": "      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - run: make docker e2e/legacy\n      - name: Upload e2e logs on failure\n        uses: actions/upload-artifact@v4\n        if: failure()\n",
                      "markdown": "`      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - run: make docker e2e/legacy\n      - name: Upload e2e logs on failure\n        uses: actions/upload-artifact@v4\n        if: failure()\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/ci.yaml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 17,
                  "endLine": 102,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - run: make docker e2e/${{ matrix.group }}\n      - name: Upload e2e logs on failure\n        uses: actions/upload-artifact@v4\n        if: failure()\n",
                    "rendered": {
                      "text": "      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - run: make docker e2e/${{ matrix.group }}\n      - name: Upload e2e logs on failure\n        uses: actions/upload-artifact@v4\n        if: failure()\n",
                      "markdown": "`      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - run: make docker e2e/${{ matrix.group }}\n      - name: Upload e2e logs on failure\n        uses: actions/upload-artifact@v4\n        if: failure()\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/publish.yaml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - uses: docker/setup-qemu-action@v3\n        with:\n          platforms: amd64,arm64\n",
                    "rendered": {
                      "text": "        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - uses: docker/setup-qemu-action@v3\n        with:\n          platforms: amd64,arm64\n",
                      "markdown": "`        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - uses: docker/setup-qemu-action@v3\n        with:\n          platforms: amd64,arm64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/publish.yaml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 33,
                  "snippet": {
                    "text": "    steps:\n      - name: \"Set release tag\"\n        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n",
                    "rendered": {
                      "text": "    steps:\n      - name: \"Set release tag\"\n        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n",
                      "markdown": "`    steps:\n      - name: \"Set release tag\"\n        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/publish.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/publish.yaml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 55,
                  "endLine": 34,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n      - uses: actions/checkout@v4\n",
                    "rendered": {
                      "text": "        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n      - uses: actions/checkout@v4\n",
                      "markdown": "`        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n      - uses: actions/checkout@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/publish.yaml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 33,
                  "snippet": {
                    "text": "    steps:\n      - name: \"Set release tag\"\n        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n",
                    "rendered": {
                      "text": "    steps:\n      - name: \"Set release tag\"\n        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n",
                      "markdown": "`    steps:\n      - name: \"Set release tag\"\n        if: ${{ github.ref_type == 'tag' }}\n        shell: bash\n        run: |\n          # Set the VERSION to force the version of the Docker images\n          echo \"VERSION=${GITHUB_REF_NAME}\" >> \"$GITHUB_ENV\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/fips.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/scan.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/scan.yaml"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          # Only fail the build on PRs. Do not fail the build on the scheduled run, to let the workflow\n          # continue and have the report uploaded.\n          fail-build: ${{ github.event_name != 'schedule' }}\n      - run: cat ${{ steps.scan.outputs.sarif }}\n        if: always()  # Always print the report to the stdout.\n      # Do not upload the security advisories on every commit or pull request.\n      # Upload the security advisories only for the nightly scans.\n",
                    "rendered": {
                      "text": "          # Only fail the build on PRs. Do not fail the build on the scheduled run, to let the workflow\n          # continue and have the report uploaded.\n          fail-build: ${{ github.event_name != 'schedule' }}\n      - run: cat ${{ steps.scan.outputs.sarif }}\n        if: always()  # Always print the report to the stdout.\n      # Do not upload the security advisories on every commit or pull request.\n      # Upload the security advisories only for the nightly scans.\n",
                      "markdown": "`          # Only fail the build on PRs. Do not fail the build on the scheduled run, to let the workflow\n          # continue and have the report uploaded.\n          fail-build: ${{ github.event_name != 'schedule' }}\n      - run: cat ${{ steps.scan.outputs.sarif }}\n        if: always()  # Always print the report to the stdout.\n      # Do not upload the security advisories on every commit or pull request.\n      # Upload the security advisories only for the nightly scans.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/workflows/scan.yaml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 50,
                  "snippet": {
                    "text": "          platforms: amd64\n      - uses: docker/setup-buildx-action@v3\n      - uses: actions/checkout@v4\n      - run: make docker\n      - uses: anchore/scan-action@v3\n        id: scan\n        with:\n          image: local/authservice:scan-amd64\n",
                    "rendered": {
                      "text": "          platforms: amd64\n      - uses: docker/setup-buildx-action@v3\n      - uses: actions/checkout@v4\n      - run: make docker\n      - uses: anchore/scan-action@v3\n        id: scan\n        with:\n          image: local/authservice:scan-amd64\n",
                      "markdown": "`          platforms: amd64\n      - uses: docker/setup-buildx-action@v3\n      - uses: actions/checkout@v4\n      - run: make docker\n      - uses: anchore/scan-action@v3\n        id: scan\n        with:\n          image: local/authservice:scan-amd64\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc_test.go"
                },
                "region": {
                  "startLine": 1099,
                  "startColumn": 18,
                  "endLine": 1099,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\tclock := oidc.Clock{}\n\tsessions := &mockSessionStoreFactory{store: oidc.NewMemoryStore(&clock, time.Hour, time.Hour)}\n\tstore := sessions.Get(basicOIDCConfig)\n\ttlsPool := internal.NewTLSConfigPool(context.Background())\n\th, err := NewOIDCHandler(basicOIDCConfig, tlsPool, funcJWKSProvider, sessions, clock,\n\t\toidc.NewStaticGenerator(newSessionID, newNonce, newState, newCodeVerifier))\n",
                    "rendered": {
                      "text": "\n\tclock := oidc.Clock{}\n\tsessions := &mockSessionStoreFactory{store: oidc.NewMemoryStore(&clock, time.Hour, time.Hour)}\n\tstore := sessions.Get(basicOIDCConfig)\n\ttlsPool := internal.NewTLSConfigPool(context.Background())\n\th, err := NewOIDCHandler(basicOIDCConfig, tlsPool, funcJWKSProvider, sessions, clock,\n\t\toidc.NewStaticGenerator(newSessionID, newNonce, newState, newCodeVerifier))\n",
                      "markdown": "`\n\tclock := oidc.Clock{}\n\tsessions := &mockSessionStoreFactory{store: oidc.NewMemoryStore(&clock, time.Hour, time.Hour)}\n\tstore := sessions.Get(basicOIDCConfig)\n\ttlsPool := internal.NewTLSConfigPool(context.Background())\n\th, err := NewOIDCHandler(basicOIDCConfig, tlsPool, funcJWKSProvider, sessions, clock,\n\t\toidc.NewStaticGenerator(newSessionID, newNonce, newState, newCodeVerifier))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc_test.go"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 18,
                  "endLine": 231,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\tclock := oidc.Clock{}\n\tsessions := &mockSessionStoreFactory{store: oidc.NewMemoryStore(&clock, time.Hour, time.Hour)}\n\tstore := sessions.Get(basicOIDCConfig)\n\ttlsPool := internal.NewTLSConfigPool(context.Background())\n\th, err := NewOIDCHandler(basicOIDCConfig, tlsPool,\n\t\toidc.NewJWKSProvider(newConfigFor(basicOIDCConfig), tlsPool), sessions, clock,\n",
                    "rendered": {
                      "text": "\n\tclock := oidc.Clock{}\n\tsessions := &mockSessionStoreFactory{store: oidc.NewMemoryStore(&clock, time.Hour, time.Hour)}\n\tstore := sessions.Get(basicOIDCConfig)\n\ttlsPool := internal.NewTLSConfigPool(context.Background())\n\th, err := NewOIDCHandler(basicOIDCConfig, tlsPool,\n\t\toidc.NewJWKSProvider(newConfigFor(basicOIDCConfig), tlsPool), sessions, clock,\n",
                      "markdown": "`\n\tclock := oidc.Clock{}\n\tsessions := &mockSessionStoreFactory{store: oidc.NewMemoryStore(&clock, time.Hour, time.Hour)}\n\tstore := sessions.Get(basicOIDCConfig)\n\ttlsPool := internal.NewTLSConfigPool(context.Background())\n\th, err := NewOIDCHandler(basicOIDCConfig, tlsPool,\n\t\toidc.NewJWKSProvider(newConfigFor(basicOIDCConfig), tlsPool), sessions, clock,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/redis_test.go"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 36,
                  "endLine": 175,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.HSet(ctx, \"s1\", keyAccessToken, \"\").Err())\n\t\terr := rs.refreshExpiration(ctx, \"s1\", time.Time{})\n\t\trequire.ErrorIs(t, err, ErrRedis)\n\t\trequire.Equal(t, redis.Nil, client.Get(ctx, \"s1\").Err())\n\t})\n\n\tt.Run(\"no expiration set if no timeouts\", func(t *testing.T) {\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.HSet(ctx, \"s1\", keyAccessToken, \"\").Err())\n\t\terr := rs.refreshExpiration(ctx, \"s1\", time.Time{})\n\t\trequire.ErrorIs(t, err, ErrRedis)\n\t\trequire.Equal(t, redis.Nil, client.Get(ctx, \"s1\").Err())\n\t})\n\n\tt.Run(\"no expiration set if no timeouts\", func(t *testing.T) {\n",
                      "markdown": "`\t\trequire.NoError(t, client.HSet(ctx, \"s1\", keyAccessToken, \"\").Err())\n\t\terr := rs.refreshExpiration(ctx, \"s1\", time.Time{})\n\t\trequire.ErrorIs(t, err, ErrRedis)\n\t\trequire.Equal(t, redis.Nil, client.Get(ctx, \"s1\").Err())\n\t})\n\n\tt.Run(\"no expiration set if no timeouts\", func(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/redis_test.go"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 4,
                  "endLine": 112,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t// Verify that clearing the authz state also updates the session access timestamp\n\trequire.NoError(t, store.ClearAuthorizationState(ctx, \"s1\"))\n\n\tvar at redisAuthState\n\tvals := client.HMGet(ctx, \"s1\", keyState, keyNonce, keyRequestedURL)\n\trequire.NoError(t, vals.Scan(&at))\n\trequire.Empty(t, at.State)\n",
                    "rendered": {
                      "text": "\t// Verify that clearing the authz state also updates the session access timestamp\n\trequire.NoError(t, store.ClearAuthorizationState(ctx, \"s1\"))\n\n\tvar at redisAuthState\n\tvals := client.HMGet(ctx, \"s1\", keyState, keyNonce, keyRequestedURL)\n\trequire.NoError(t, vals.Scan(&at))\n\trequire.Empty(t, at.State)\n",
                      "markdown": "`\t// Verify that clearing the authz state also updates the session access timestamp\n\trequire.NoError(t, store.ClearAuthorizationState(ctx, \"s1\"))\n\n\tvar at redisAuthState\n\tvals := client.HMGet(ctx, \"s1\", keyState, keyNonce, keyRequestedURL)\n\trequire.NoError(t, vals.Scan(&at))\n\trequire.Empty(t, at.State)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/redis_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/redis_test.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 28,
                  "endLine": 171,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\tctx := context.Background()\n\n\tt.Run(\"delete session if no time added\", func(t *testing.T) {\n\t\trequire.NoError(t, client.HSet(ctx, \"s1\", keyAccessToken, \"\").Err())\n\t\terr := rs.refreshExpiration(ctx, \"s1\", time.Time{})\n\t\trequire.ErrorIs(t, err, ErrRedis)\n",
                    "rendered": {
                      "text": "\n\tctx := context.Background()\n\n\tt.Run(\"delete session if no time added\", func(t *testing.T) {\n\t\trequire.NoError(t, client.HSet(ctx, \"s1\", keyAccessToken, \"\").Err())\n\t\terr := rs.refreshExpiration(ctx, \"s1\", time.Time{})\n\t\trequire.ErrorIs(t, err, ErrRedis)\n",
                      "markdown": "`\n\tctx := context.Background()\n\n\tt.Run(\"delete session if no time added\", func(t *testing.T) {\n\t\trequire.NoError(t, client.HSet(ctx, \"s1\", keyAccessToken, \"\").Err())\n\t\terr := rs.refreshExpiration(ctx, \"s1\", time.Time{})\n\t\trequire.ErrorIs(t, err, ErrRedis)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/redis_test.go"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 62,
                  "endLine": 98,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t}\n\trequire.NoError(t, store.SetAuthorizationState(ctx, \"s1\", as))\n\n\t// Verify that the right state is returned and the expiration time is updated\n\tgot, err := store.GetAuthorizationState(ctx, \"s1\")\n\trequire.NoError(t, err)\n\trequire.Equal(t, as, got)\n",
                    "rendered": {
                      "text": "\t}\n\trequire.NoError(t, store.SetAuthorizationState(ctx, \"s1\", as))\n\n\t// Verify that the right state is returned and the expiration time is updated\n\tgot, err := store.GetAuthorizationState(ctx, \"s1\")\n\trequire.NoError(t, err)\n\trequire.Equal(t, as, got)\n",
                      "markdown": "`\t}\n\trequire.NoError(t, store.SetAuthorizationState(ctx, \"s1\", as))\n\n\t// Verify that the right state is returned and the expiration time is updated\n\tgot, err := store.GetAuthorizationState(ctx, \"s1\")\n\trequire.NoError(t, err)\n\trequire.Equal(t, as, got)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/redis_test.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 55,
                  "endLine": 39,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\trequire.Nil(t, tr)\n\n\t// Create a session and verify it's added and accessed time is set\n\ttr = &TokenResponse{\n\t\tIDToken:              newToken(),\n\t\tAccessToken:          newToken(),\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\trequire.Nil(t, tr)\n\n\t// Create a session and verify it's added and accessed time is set\n\ttr = &TokenResponse{\n\t\tIDToken:              newToken(),\n\t\tAccessToken:          newToken(),\n",
                      "markdown": "`\trequire.NoError(t, err)\n\trequire.Nil(t, tr)\n\n\t// Create a session and verify it's added and accessed time is set\n\ttr = &TokenResponse{\n\t\tIDToken:              newToken(),\n\t\tAccessToken:          newToken(),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 22,
                  "endLine": 203,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t}\n\n\tsecret := new(corev1.Secret)\n\tif err := s.k8sClient.Get(ctx, req.NamespacedName, secret); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tsecret := new(corev1.Secret)\n\tif err := s.k8sClient.Get(ctx, req.NamespacedName, secret); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n",
                      "markdown": "`\t}\n\n\tsecret := new(corev1.Secret)\n\tif err := s.k8sClient.Get(ctx, req.NamespacedName, secret); err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 44,
                  "endLine": 212,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\treturn ctrl.Result{}, nil\n\t}\n\n\tclientSecretBytes, ok := secret.Data[clientSecretKey]\n\tif !ok || len(clientSecretBytes) == 0 {\n\t\ts.log.Error(\"\", errors.New(\"client-secret not found in secret\"), \"secret\", secret)\n\t\t// Do not return an error here, as trying to process the secret again\n",
                    "rendered": {
                      "text": "\t\treturn ctrl.Result{}, nil\n\t}\n\n\tclientSecretBytes, ok := secret.Data[clientSecretKey]\n\tif !ok || len(clientSecretBytes) == 0 {\n\t\ts.log.Error(\"\", errors.New(\"client-secret not found in secret\"), \"secret\", secret)\n\t\t// Do not return an error here, as trying to process the secret again\n",
                      "markdown": "`\t\treturn ctrl.Result{}, nil\n\t}\n\n\tclientSecretBytes, ok := secret.Data[clientSecretKey]\n\tif !ok || len(clientSecretBytes) == 0 {\n\t\ts.log.Error(\"\", errors.New(\"client-secret not found in secret\"), \"secret\", secret)\n\t\t// Do not return an error here, as trying to process the secret again\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 39,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\"github.com/istio-ecosystem/authservice/internal\"\n)\n\nconst clientSecretKey = \"client-secret\"\n\nvar (\n\t_ run.PreRunner      = (*SecretController)(nil)\n",
                    "rendered": {
                      "text": "\t\"github.com/istio-ecosystem/authservice/internal\"\n)\n\nconst clientSecretKey = \"client-secret\"\n\nvar (\n\t_ run.PreRunner      = (*SecretController)(nil)\n",
                      "markdown": "`\t\"github.com/istio-ecosystem/authservice/internal\"\n)\n\nconst clientSecretKey = \"client-secret\"\n\nvar (\n\t_ run.PreRunner      = (*SecretController)(nil)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 37,
                  "endLine": 121,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t}\n\n\t// The controller manager is encapsulated in the secret controller because we\n\t// only need it to watch secrets and update the configuration.\n\t//TODO: Add manager options, like metrics, healthz, leader election, etc.\n\ts.manager, err = ctrl.NewManager(s.restConf, ctrl.Options{\n\t\tCache: cache.Options{\n",
                    "rendered": {
                      "text": "\t}\n\n\t// The controller manager is encapsulated in the secret controller because we\n\t// only need it to watch secrets and update the configuration.\n\t//TODO: Add manager options, like metrics, healthz, leader election, etc.\n\ts.manager, err = ctrl.NewManager(s.restConf, ctrl.Options{\n\t\tCache: cache.Options{\n",
                      "markdown": "`\t}\n\n\t// The controller manager is encapsulated in the secret controller because we\n\t// only need it to watch secrets and update the configuration.\n\t//TODO: Add manager options, like metrics, healthz, leader election, etc.\n\ts.manager, err = ctrl.NewManager(s.restConf, ctrl.Options{\n\t\tCache: cache.Options{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 19,
                  "endLine": 121,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t}\n\n\t// The controller manager is encapsulated in the secret controller because we\n\t// only need it to watch secrets and update the configuration.\n\t//TODO: Add manager options, like metrics, healthz, leader election, etc.\n\ts.manager, err = ctrl.NewManager(s.restConf, ctrl.Options{\n\t\tCache: cache.Options{\n",
                    "rendered": {
                      "text": "\t}\n\n\t// The controller manager is encapsulated in the secret controller because we\n\t// only need it to watch secrets and update the configuration.\n\t//TODO: Add manager options, like metrics, healthz, leader election, etc.\n\ts.manager, err = ctrl.NewManager(s.restConf, ctrl.Options{\n\t\tCache: cache.Options{\n",
                      "markdown": "`\t}\n\n\t// The controller manager is encapsulated in the secret controller because we\n\t// only need it to watch secrets and update the configuration.\n\t//TODO: Add manager options, like metrics, healthz, leader election, etc.\n\ts.manager, err = ctrl.NewManager(s.restConf, ctrl.Options{\n\t\tCache: cache.Options{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 39,
                  "endLine": 96,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\treturn nil\n\t}\n\n\t// Load the current namespace from the service account directory\n\tif s.namespace == \"\" {\n\t\tconst namespaceFile = \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\"\n\t\tvar data []byte\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\t}\n\n\t// Load the current namespace from the service account directory\n\tif s.namespace == \"\" {\n\t\tconst namespaceFile = \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\"\n\t\tvar data []byte\n",
                      "markdown": "`\t\treturn nil\n\t}\n\n\t// Load the current namespace from the service account directory\n\tif s.namespace == \"\" {\n\t\tconst namespaceFile = \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\"\n\t\tvar data []byte\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 41,
                  "endLine": 81,
                  "snippet": {
                    "text": "\t\terr              error\n\t)\n\n\t// Check if there are any k8s secrets to watch\n\tfor _, c := range s.config.Chains {\n\t\tfor _, f := range c.Filters {\n\t\t\toidcCfg, isOIDCConf := f.Type.(*configv1.Filter_Oidc)\n\t\t\tif isOIDCConf && oidcCfg.Oidc.GetClientSecretRef() != nil {\n",
                    "rendered": {
                      "text": "\t\terr              error\n\t)\n\n\t// Check if there are any k8s secrets to watch\n\tfor _, c := range s.config.Chains {\n\t\tfor _, f := range c.Filters {\n\t\t\toidcCfg, isOIDCConf := f.Type.(*configv1.Filter_Oidc)\n\t\t\tif isOIDCConf && oidcCfg.Oidc.GetClientSecretRef() != nil {\n",
                      "markdown": "`\t\terr              error\n\t)\n\n\t// Check if there are any k8s secrets to watch\n\tfor _, c := range s.config.Chains {\n\t\tfor _, f := range c.Filters {\n\t\t\toidcCfg, isOIDCConf := f.Type.(*configv1.Filter_Oidc)\n\t\t\tif isOIDCConf && oidcCfg.Oidc.GetClientSecretRef() != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/tls.go"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 21,
                  "endLine": 150,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tp.mu.Lock()\n\ttlsConfig, ok := p.configs[id]\n\tif !ok {\n\t\tlog.Error(\"couldn't update TLS config\", errors.New(\"config not found\"))\n\t\tp.mu.Unlock()\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "\tp.mu.Lock()\n\ttlsConfig, ok := p.configs[id]\n\tif !ok {\n\t\tlog.Error(\"couldn't update TLS config\", errors.New(\"config not found\"))\n\t\tp.mu.Unlock()\n\t\treturn\n\t}\n",
                      "markdown": "`\tp.mu.Lock()\n\ttlsConfig, ok := p.configs[id]\n\tif !ok {\n\t\tlog.Error(\"couldn't update TLS config\", errors.New(\"config not found\"))\n\t\tp.mu.Unlock()\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/mock/docker-compose.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 56,
                  "endLine": 45,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\nThe `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\nYou can use the `DOCKER_TARGETS` environment variable to control the operating systems and architectures\nyou want to build the Docker images for.\n\n\n",
                    "rendered": {
                      "text": "\nThe `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\nYou can use the `DOCKER_TARGETS` environment variable to control the operating systems and architectures\nyou want to build the Docker images for.\n\n\n",
                      "markdown": "`\nThe `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\nYou can use the `DOCKER_TARGETS` environment variable to control the operating systems and architectures\nyou want to build the Docker images for.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 33,
                  "endLine": 28,
                  "endColumn": 42,
                  "snippet": {
                    "text": "```\n\nThe resulting binaries will be in the `bin/` directory. You can play with the \n`TARGETS` environment variable to control the operating systems and architectures you want\nto build for.\n\n\n",
                    "rendered": {
                      "text": "```\n\nThe resulting binaries will be in the `bin/` directory. You can play with the \n`TARGETS` environment variable to control the operating systems and architectures you want\nto build for.\n\n\n",
                      "markdown": "````\n\nThe resulting binaries will be in the `bin/` directory. You can play with the \n`TARGETS` environment variable to control the operating systems and architectures you want\nto build for.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 34,
                  "endLine": 112,
                  "endColumn": 43,
                  "snippet": {
                    "text": "#### Backward-compatibility tests\n\nThe [e2e/legacy](e2e/legacy/) suite directory contains a set of tests that are designed to verify the\nbackward compatibility of the Auth Service with the older C++ based version. This suite can be run with\nthe current image and the old image as follows:\n\n```bash\n",
                    "rendered": {
                      "text": "#### Backward-compatibility tests\n\nThe [e2e/legacy](e2e/legacy/) suite directory contains a set of tests that are designed to verify the\nbackward compatibility of the Auth Service with the older C++ based version. This suite can be run with\nthe current image and the old image as follows:\n\n```bash\n",
                      "markdown": "`#### Backward-compatibility tests\n\nThe [e2e/legacy](e2e/legacy/) suite directory contains a set of tests that are designed to verify the\nbackward compatibility of the Auth Service with the older C++ based version. This suite can be run with\nthe current image and the old image as follows:\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 24,
                  "endLine": 91,
                  "endColumn": 32,
                  "snippet": {
                    "text": "> The end-to-end tests use the `authservice` Docker image, and it **must be up-to-date**.  \n> Make sure you run `make clean docker` before running the tests\n\nThe end-to-end tests use Docker Compose or [KinD](https://kind.sigs.k8s.io/) to set up the required\ninfrastructure before running the tests.  Once the tests are done, the infrastructure is automatically\ntorn down if tests pass, or left running  if tests fail, to facilitate troubleshooting. Container logs\nare also captured upon test failure, to aid in debugging.\n",
                    "rendered": {
                      "text": "> The end-to-end tests use the `authservice` Docker image, and it **must be up-to-date**.  \n> Make sure you run `make clean docker` before running the tests\n\nThe end-to-end tests use Docker Compose or [KinD](https://kind.sigs.k8s.io/) to set up the required\ninfrastructure before running the tests.  Once the tests are done, the infrastructure is automatically\ntorn down if tests pass, or left running  if tests fail, to facilitate troubleshooting. Container logs\nare also captured upon test failure, to aid in debugging.\n",
                      "markdown": "`> The end-to-end tests use the `authservice` Docker image, and it **must be up-to-date**.  \n> Make sure you run `make clean docker` before running the tests\n\nThe end-to-end tests use Docker Compose or [KinD](https://kind.sigs.k8s.io/) to set up the required\ninfrastructure before running the tests.  Once the tests are done, the infrastructure is automatically\ntorn down if tests pass, or left running  if tests fail, to facilitate troubleshooting. Container logs\nare also captured upon test failure, to aid in debugging.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 44,
                  "endLine": 88,
                  "endColumn": 52,
                  "snippet": {
                    "text": "```\n\n> [!Note]\n> The end-to-end tests use the `authservice` Docker image, and it **must be up-to-date**.  \n> Make sure you run `make clean docker` before running the tests\n\nThe end-to-end tests use Docker Compose or [KinD](https://kind.sigs.k8s.io/) to set up the required\n",
                    "rendered": {
                      "text": "```\n\n> [!Note]\n> The end-to-end tests use the `authservice` Docker image, and it **must be up-to-date**.  \n> Make sure you run `make clean docker` before running the tests\n\nThe end-to-end tests use Docker Compose or [KinD](https://kind.sigs.k8s.io/) to set up the required\n",
                      "markdown": "````\n\n> [!Note]\n> The end-to-end tests use the `authservice` Docker image, and it **must be up-to-date**.  \n> Make sure you run `make clean docker` before running the tests\n\nThe end-to-end tests use Docker Compose or [KinD](https://kind.sigs.k8s.io/) to set up the required\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 21,
                  "endLine": 46,
                  "endColumn": 29,
                  "snippet": {
                    "text": "The `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\nYou can use the `DOCKER_TARGETS` environment variable to control the operating systems and architectures\nyou want to build the Docker images for.\n\n\n## Generating the API code\n",
                    "rendered": {
                      "text": "The `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\nYou can use the `DOCKER_TARGETS` environment variable to control the operating systems and architectures\nyou want to build the Docker images for.\n\n\n## Generating the API code\n",
                      "markdown": "`The `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\nYou can use the `DOCKER_TARGETS` environment variable to control the operating systems and architectures\nyou want to build the Docker images for.\n\n\n## Generating the API code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 64,
                  "endLine": 41,
                  "endColumn": 72,
                  "snippet": {
                    "text": "$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\nThis will automatically build the required binaries and create a Docker image with them.\n\nThe `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\n",
                    "rendered": {
                      "text": "$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\nThis will automatically build the required binaries and create a Docker image with them.\n\nThe `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\n",
                      "markdown": "`$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\nThis will automatically build the required binaries and create a Docker image with them.\n\nThe `make docker` target will produce images that are suitable to be used in the `e2e` tests.\nThe `make docker-push` target will produce multi-arch images and push them to the registry.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 53,
                  "endLine": 38,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\nThis will automatically build the required binaries and create a Docker image with them.\n",
                    "rendered": {
                      "text": "\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\nThis will automatically build the required binaries and create a Docker image with them.\n",
                      "markdown": "`\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\nThis will automatically build the required binaries and create a Docker image with them.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 43,
                  "endLine": 37,
                  "endColumn": 51,
                  "snippet": {
                    "text": "To build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\n",
                    "rendered": {
                      "text": "To build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\n",
                      "markdown": "`To build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 6,
                  "endLine": 37,
                  "endColumn": 14,
                  "snippet": {
                    "text": "To build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\n",
                    "rendered": {
                      "text": "To build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\n",
                      "markdown": "`To build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n$ make docker-push    # Build and push the multi-arch Docker images to the registry\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n## Docker image\n\nTo build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n",
                    "rendered": {
                      "text": "\n## Docker image\n\nTo build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n",
                      "markdown": "`\n## Docker image\n\nTo build the Docker image, run:\n\n```bash\n$ make docker         # Build a single-arch Docker image tagged with \"-latest-$arch\" \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/DEVELOPMENT.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 2,
                  "endLine": 32,
                  "endColumn": 10,
                  "snippet": {
                    "text": "to build for.\n\n\n## Docker image\n\nTo build the Docker image, run:\n\n",
                    "rendered": {
                      "text": "to build for.\n\n\n## Docker image\n\nTo build the Docker image, run:\n\n",
                      "markdown": "`to build for.\n\n\n## Docker image\n\nTo build the Docker image, run:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 30,
                  "endLine": 659,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tif len(m.GetChains()) < 1 {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"Chains\",\n\t\t\treason: \"value must contain at least 1 item(s)\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif len(m.GetChains()) < 1 {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"Chains\",\n\t\t\treason: \"value must contain at least 1 item(s)\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif len(m.GetChains()) < 1 {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"Chains\",\n\t\t\treason: \"value must contain at least 1 item(s)\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 30,
                  "endLine": 516,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tif len(m.GetFilters()) < 1 {\n\t\terr := FilterChainValidationError{\n\t\t\tfield:  \"Filters\",\n\t\t\treason: \"value must contain at least 1 item(s)\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif len(m.GetFilters()) < 1 {\n\t\terr := FilterChainValidationError{\n\t\t\tfield:  \"Filters\",\n\t\t\treason: \"value must contain at least 1 item(s)\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif len(m.GetFilters()) < 1 {\n\t\terr := FilterChainValidationError{\n\t\t\tfield:  \"Filters\",\n\t\t\treason: \"value must contain at least 1 item(s)\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 32,
                  "endLine": 476,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetName()) < 1 {\n\t\terr := FilterChainValidationError{\n\t\t\tfield:  \"Name\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetName()) < 1 {\n\t\terr := FilterChainValidationError{\n\t\t\tfield:  \"Name\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetName()) < 1 {\n\t\terr := FilterChainValidationError{\n\t\t\tfield:  \"Name\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 33,
                  "endLine": 112,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\tif utf8.RuneCountInString(m.GetEquality()) < 1 {\n\t\t\terr := MatchValidationError{\n\t\t\t\tfield:  \"Equality\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n",
                    "rendered": {
                      "text": "\t\tif utf8.RuneCountInString(m.GetEquality()) < 1 {\n\t\t\terr := MatchValidationError{\n\t\t\t\tfield:  \"Equality\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n",
                      "markdown": "`\t\tif utf8.RuneCountInString(m.GetEquality()) < 1 {\n\t\t\terr := MatchValidationError{\n\t\t\t\tfield:  \"Equality\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 33,
                  "endLine": 88,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\tif utf8.RuneCountInString(m.GetPrefix()) < 1 {\n\t\t\terr := MatchValidationError{\n\t\t\t\tfield:  \"Prefix\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n",
                    "rendered": {
                      "text": "\t\tif utf8.RuneCountInString(m.GetPrefix()) < 1 {\n\t\t\terr := MatchValidationError{\n\t\t\t\tfield:  \"Prefix\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n",
                      "markdown": "`\t\tif utf8.RuneCountInString(m.GetPrefix()) < 1 {\n\t\t\terr := MatchValidationError{\n\t\t\t\tfield:  \"Prefix\",\n\t\t\t\treason: \"value length must be at least 1 runes\",\n\t\t\t}\n\t\t\tif !all {\n\t\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 32,
                  "endLine": 62,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tif utf8.RuneCountInString(m.GetHeader()) < 1 {\n\t\terr := MatchValidationError{\n\t\t\tfield:  \"Header\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif utf8.RuneCountInString(m.GetHeader()) < 1 {\n\t\terr := MatchValidationError{\n\t\t\tfield:  \"Header\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif utf8.RuneCountInString(m.GetHeader()) < 1 {\n\t\terr := MatchValidationError{\n\t\t\tfield:  \"Header\",\n\t\t\treason: \"value length must be at least 1 runes\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 33,
                  "endLine": 704,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n",
                      "markdown": "`\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n\t\t}\n\t\tif !all {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 44,
                  "endLine": 701,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n\t}\n\n\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n",
                    "rendered": {
                      "text": "\n\t}\n\n\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n",
                      "markdown": "`\n\t}\n\n\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/gen/go/v1/config.pb.validate.go"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 3,
                  "endLine": 701,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\t}\n\n\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n",
                    "rendered": {
                      "text": "\n\t}\n\n\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n",
                      "markdown": "`\n\t}\n\n\tif ip := net.ParseIP(m.GetListenAddress()); ip == nil {\n\t\terr := ConfigValidationError{\n\t\t\tfield:  \"ListenAddress\",\n\t\t\treason: \"value must be a valid IP address\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/buf.gen.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/buf.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/config/Makefile"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 24,
                  "endLine": 17,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nBUF ?= github.com/bufbuild/buf/cmd/buf@v1.32.2\n\nPROTO_SOURCES := $(shell find . -name '*.proto')\n\n.PHONY: build\nbuild: $(PROTO_SOURCES) ## Generate the Go code from the protobuf definitions\n",
                    "rendered": {
                      "text": "\nBUF ?= github.com/bufbuild/buf/cmd/buf@v1.32.2\n\nPROTO_SOURCES := $(shell find . -name '*.proto')\n\n.PHONY: build\nbuild: $(PROTO_SOURCES) ## Generate the Go code from the protobuf definitions\n",
                      "markdown": "`\nBUF ?= github.com/bufbuild/buf/cmd/buf@v1.32.2\n\nPROTO_SOURCES := $(shell find . -name '*.proto')\n\n.PHONY: build\nbuild: $(PROTO_SOURCES) ## Generate the Go code from the protobuf definitions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/redis/docker-compose.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/redis/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 33,
                  "endLine": 58,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 6,
                  "endLine": 58,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 33,
                  "endLine": 48,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "endLine": 48,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 22,
                  "endLine": 44,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                    "rendered": {
                      "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                      "markdown": "`\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                    "rendered": {
                      "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                      "markdown": "`\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 31,
                  "endLine": 42,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                    "rendered": {
                      "text": "    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                      "markdown": "`    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 33,
                  "endLine": 40,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "endLine": 40,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 33,
                  "endLine": 32,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                      "markdown": "`    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 6,
                  "endLine": 32,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                      "markdown": "`    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "endColumn": 8,
                  "snippet": {
                    "text": "KEYCLOAK_SERVER=\"http://keycloak:8080\"\nREALM=\"master\"\nUSERNAME=authservice\nPASSWORD=authservice\nCLIENT_ID=authservice\nCLIENT_SECRET=authservice-secret\nREDIRECT_URL=https://host.docker.internal:8443/callback\n",
                    "rendered": {
                      "text": "KEYCLOAK_SERVER=\"http://keycloak:8080\"\nREALM=\"master\"\nUSERNAME=authservice\nPASSWORD=authservice\nCLIENT_ID=authservice\nCLIENT_SECRET=authservice-secret\nREDIRECT_URL=https://host.docker.internal:8443/callback\n",
                      "markdown": "`KEYCLOAK_SERVER=\"http://keycloak:8080\"\nREALM=\"master\"\nUSERNAME=authservice\nPASSWORD=authservice\nCLIENT_ID=authservice\nCLIENT_SECRET=authservice-secret\nREDIRECT_URL=https://host.docker.internal:8443/callback\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 26,
                  "endLine": 27,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nset -ex\n\n/opt/keycloak/bin/kcadm.sh update realms/${REALM} \\\n    -s accessTokenLifespan=10 \\\n    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                    "rendered": {
                      "text": "\nset -ex\n\n/opt/keycloak/bin/kcadm.sh update realms/${REALM} \\\n    -s accessTokenLifespan=10 \\\n    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                      "markdown": "`\nset -ex\n\n/opt/keycloak/bin/kcadm.sh update realms/${REALM} \\\n    -s accessTokenLifespan=10 \\\n    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/docker-compose.yaml"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 115,
                  "endLine": 104,
                  "endColumn": 123,
                  "snippet": {
                    "text": "    # Healthcheck to make sure the created client has been successfully created, and that other services\n    # can depend on\n    healthcheck:\n      test: /opt/keycloak/bin/kcreg.sh get authservice --server http://keycloak:8080 --realm master --user admin --password admin\n      interval: 2s\n      timeout: 2s\n      retries: 10\n",
                    "rendered": {
                      "text": "    # Healthcheck to make sure the created client has been successfully created, and that other services\n    # can depend on\n    healthcheck:\n      test: /opt/keycloak/bin/kcreg.sh get authservice --server http://keycloak:8080 --realm master --user admin --password admin\n      interval: 2s\n      timeout: 2s\n      retries: 10\n",
                      "markdown": "`    # Healthcheck to make sure the created client has been successfully created, and that other services\n    # can depend on\n    healthcheck:\n      test: /opt/keycloak/bin/kcreg.sh get authservice --server http://keycloak:8080 --realm master --user admin --password admin\n      interval: 2s\n      timeout: 2s\n      retries: 10\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/docker-compose.yaml"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 21,
                  "endLine": 95,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    entrypoint: /opt/setup-keycloak.sh\n    volumes:\n      - type: bind\n",
                    "rendered": {
                      "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    entrypoint: /opt/setup-keycloak.sh\n    volumes:\n      - type: bind\n",
                      "markdown": "`    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    entrypoint: /opt/setup-keycloak.sh\n    volumes:\n      - type: bind\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/docker-compose.yaml"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 118,
                  "endLine": 78,
                  "endColumn": 126,
                  "snippet": {
                    "text": "        source: certs\n        target: /opt/keycloak/certs\n    healthcheck:\n      test: /opt/keycloak/bin/kcadm.sh get realms/master --server http://localhost:8080 --realm master --user admin --password admin\n      interval: 5s\n      timeout: 2s\n      retries: 30\n",
                    "rendered": {
                      "text": "        source: certs\n        target: /opt/keycloak/certs\n    healthcheck:\n      test: /opt/keycloak/bin/kcadm.sh get realms/master --server http://localhost:8080 --realm master --user admin --password admin\n      interval: 5s\n      timeout: 2s\n      retries: 30\n",
                      "markdown": "`        source: certs\n        target: /opt/keycloak/certs\n    healthcheck:\n      test: /opt/keycloak/bin/kcadm.sh get realms/master --server http://localhost:8080 --realm master --user admin --password admin\n      interval: 5s\n      timeout: 2s\n      retries: 30\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/docker-compose.yaml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 21,
                  "endLine": 69,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - \"9443:9443\"\n    command: start-dev --https-port=9443 --https-certificate-file=/opt/keycloak/certs/host.docker.internal.crt --https-certificate-key-file=/opt/keycloak/certs/host.docker.internal.key\n",
                    "rendered": {
                      "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - \"9443:9443\"\n    command: start-dev --https-port=9443 --https-certificate-file=/opt/keycloak/certs/host.docker.internal.crt --https-certificate-key-file=/opt/keycloak/certs/host.docker.internal.key\n",
                      "markdown": "`    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - \"9443:9443\"\n    command: start-dev --https-port=9443 --https-certificate-file=/opt/keycloak/certs/host.docker.internal.crt --https-certificate-key-file=/opt/keycloak/certs/host.docker.internal.key\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/docker-compose.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 4,
                  "endLine": 41,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  http-echo:\n    image: jmalloc/echo-server:0.3.6\n    platform: linux/${ARCH:-amd64}\n    hostname: http-echo\n\n  # This is the `authservice` image that should be up-to-date when running the tests.\n  ext-authz:\n",
                    "rendered": {
                      "text": "  http-echo:\n    image: jmalloc/echo-server:0.3.6\n    platform: linux/${ARCH:-amd64}\n    hostname: http-echo\n\n  # This is the `authservice` image that should be up-to-date when running the tests.\n  ext-authz:\n",
                      "markdown": "`  http-echo:\n    image: jmalloc/echo-server:0.3.6\n    platform: linux/${ARCH:-amd64}\n    hostname: http-echo\n\n  # This is the `authservice` image that should be up-to-date when running the tests.\n  ext-authz:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/docker-compose.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/envoy-config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 20,
                  "endLine": 62,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                tls_certificates:\n                  - certificate_chain:\n                      filename: /etc/envoy/certs/host.docker.internal.crt\n                    private_key:\n                      filename: /etc/envoy/certs/host.docker.internal.key\n                validation_context:\n                  trusted_ca:\n",
                    "rendered": {
                      "text": "                tls_certificates:\n                  - certificate_chain:\n                      filename: /etc/envoy/certs/host.docker.internal.crt\n                    private_key:\n                      filename: /etc/envoy/certs/host.docker.internal.key\n                validation_context:\n                  trusted_ca:\n",
                      "markdown": "`                tls_certificates:\n                  - certificate_chain:\n                      filename: /etc/envoy/certs/host.docker.internal.crt\n                    private_key:\n                      filename: /etc/envoy/certs/host.docker.internal.key\n                validation_context:\n                  trusted_ca:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/envoy-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 47,
                  "endLine": 35,
                  "endColumn": 55,
                  "snippet": {
                    "text": "The setup is performed in the [setup-keycloak.sh](setup-keycloak.sh) script, which\nconfigures the default `master` realm with:\n\n* A user named `authservice` with a predefined password.\n* A client named `authservice` with a predefined secret.\n\nThe user and client will be used in the e2e tests to verify the entire Authorization Code flow.\n",
                    "rendered": {
                      "text": "The setup is performed in the [setup-keycloak.sh](setup-keycloak.sh) script, which\nconfigures the default `master` realm with:\n\n* A user named `authservice` with a predefined password.\n* A client named `authservice` with a predefined secret.\n\nThe user and client will be used in the e2e tests to verify the entire Authorization Code flow.\n",
                      "markdown": "`The setup is performed in the [setup-keycloak.sh](setup-keycloak.sh) script, which\nconfigures the default `master` realm with:\n\n* A user named `authservice` with a predefined password.\n* A client named `authservice` with a predefined secret.\n\nThe user and client will be used in the e2e tests to verify the entire Authorization Code flow.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/README.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 51,
                  "endLine": 8,
                  "endColumn": 59,
                  "snippet": {
                    "text": "for the old one.\n\nThe test suite contains tests that use the Keycloak OIDC provider. A\nKeycloak instance is deployed and configured in the Docker environment as the backend\nOIDC provider. The following diagram shows the setup:\n\n```mermaid\n",
                    "rendered": {
                      "text": "for the old one.\n\nThe test suite contains tests that use the Keycloak OIDC provider. A\nKeycloak instance is deployed and configured in the Docker environment as the backend\nOIDC provider. The following diagram shows the setup:\n\n```mermaid\n",
                      "markdown": "`for the old one.\n\nThe test suite contains tests that use the Keycloak OIDC provider. A\nKeycloak instance is deployed and configured in the Docker environment as the backend\nOIDC provider. The following diagram shows the setup:\n\n```mermaid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 20,
                  "endLine": 191,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tt.Run(\"request after logout requires login again\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"request after logout requires login again\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\n\tt.Run(\"request after logout requires login again\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 20,
                  "endLine": 172,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tt.Run(\"logout\", func(t *testing.T) {\n\t\t// Logout\n\t\tres, err := client.Get(testURL + \"/logout\")\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the session logout\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"logout\", func(t *testing.T) {\n\t\t// Logout\n\t\tres, err := client.Get(testURL + \"/logout\")\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the session logout\n",
                      "markdown": "`\n\tt.Run(\"logout\", func(t *testing.T) {\n\t\t// Logout\n\t\tres, err := client.Get(testURL + \"/logout\")\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the session logout\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 20,
                  "endLine": 160,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t})\n\n\tt.Run(\"second request works without login redirect\", func(t *testing.T) {\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t})\n\n\tt.Run(\"second request works without login redirect\", func(t *testing.T) {\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t})\n\n\tt.Run(\"second request works without login redirect\", func(t *testing.T) {\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 20,
                  "endLine": 142,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tt.Run(\"first request requires login\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"first request requires login\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\n\tt.Run(\"first request requires login\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\ttime.Sleep(10 * time.Second)\n\n\tt.Run(\"request with expired tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                    "rendered": {
                      "text": "\ttime.Sleep(10 * time.Second)\n\n\tt.Run(\"request with expired tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                      "markdown": "`\ttime.Sleep(10 * time.Second)\n\n\tt.Run(\"request with expired tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 19,
                  "endLine": 107,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t// Let's perform a request now and after 10 seconds to verify that the access token is refreshed\n\n\tt.Run(\"request with same tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                    "rendered": {
                      "text": "\t// Let's perform a request now and after 10 seconds to verify that the access token is refreshed\n\n\tt.Run(\"request with same tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                      "markdown": "`\t// Let's perform a request now and after 10 seconds to verify that the access token is refreshed\n\n\tt.Run(\"request with same tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 87,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "endLine": 60,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 78,
                  "endLine": 198,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 67,
                  "endLine": 198,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 78,
                  "endLine": 149,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 67,
                  "endLine": 149,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 77,
                  "endLine": 94,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 66,
                  "endLine": 94,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 77,
                  "endLine": 67,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 66,
                  "endLine": 67,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tkeyCloakLoginFormID = \"kc-form-login\"\n\ttestCAFile          = \"certs/ca.crt\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nvar (\n",
                    "rendered": {
                      "text": "\tkeyCloakLoginFormID = \"kc-form-login\"\n\ttestCAFile          = \"certs/ca.crt\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nvar (\n",
                      "markdown": "`\tkeyCloakLoginFormID = \"kc-form-login\"\n\ttestCAFile          = \"certs/ca.crt\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nvar (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/legacy/legacy_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/istiogw-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/istiod-config.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 55,
                  "endLine": 26,
                  "endColumn": 91,
                  "snippet": {
                    "text": "#    # Default log levels to be used by sidecars and gateways.\n#    # The HTTP and RBAC loggers will print the requests and responses with all the headers,\n#    # and the access decision records.\n#    # The `misc` is a bit noisy due to the version of Envoy being used, and we just silence\n#    # it to remove deprecation warning messages.\n#    componentLogLevel: \"http:debug,rbac:debug,misc:error\"\n\n",
                    "rendered": {
                      "text": "#    # Default log levels to be used by sidecars and gateways.\n#    # The HTTP and RBAC loggers will print the requests and responses with all the headers,\n#    # and the access decision records.\n#    # The `misc` is a bit noisy due to the version of Envoy being used, and we just silence\n#    # it to remove deprecation warning messages.\n#    componentLogLevel: \"http:debug,rbac:debug,misc:error\"\n\n",
                      "markdown": "`#    # Default log levels to be used by sidecars and gateways.\n#    # The HTTP and RBAC loggers will print the requests and responses with all the headers,\n#    # and the access decision records.\n#    # The `misc` is a bit noisy due to the version of Envoy being used, and we just silence\n#    # it to remove deprecation warning messages.\n#    componentLogLevel: \"http:debug,rbac:debug,misc:error\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/istiod-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/istiod-config.yaml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    # send traffic to the services\n    holdApplicationUntilProxyStarts: true\n  extensionProviders:\n    # Configure the backend for the Auth Service provider that can be used in AuthorizationPolicies\n    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n",
                    "rendered": {
                      "text": "    # send traffic to the services\n    holdApplicationUntilProxyStarts: true\n  extensionProviders:\n    # Configure the backend for the Auth Service provider that can be used in AuthorizationPolicies\n    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n",
                      "markdown": "`    # send traffic to the services\n    holdApplicationUntilProxyStarts: true\n  extensionProviders:\n    # Configure the backend for the Auth Service provider that can be used in AuthorizationPolicies\n    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/kind-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/cluster/kind-config.yaml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 29,
                  "endLine": 20,
                  "endColumn": 38,
                  "snippet": {
                    "text": "nodes:\n  - role: control-plane\n    extraPortMappings:\n      # We expose the httpbin service in these host ports to make them accessible from the host without\n      # having to install additional tooling such as MetalLB to access it.\n      - containerPort: 30000\n        hostPort: 30000\n",
                    "rendered": {
                      "text": "nodes:\n  - role: control-plane\n    extraPortMappings:\n      # We expose the httpbin service in these host ports to make them accessible from the host without\n      # having to install additional tooling such as MetalLB to access it.\n      - containerPort: 30000\n        hostPort: 30000\n",
                      "markdown": "`nodes:\n  - role: control-plane\n    extraPortMappings:\n      # We expose the httpbin service in these host ports to make them accessible from the host without\n      # having to install additional tooling such as MetalLB to access it.\n      - containerPort: 30000\n        hostPort: 30000\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/istio_test.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 21,
                  "endLine": 54,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\t\ti.Require().NoError(err)\n\n\t\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\t\tres, err := client.Get(uri)\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\t\t\ti.Require().NoError(err)\n\n\t\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\t\tres, err := client.Get(uri)\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\t\t\ti.Require().NoError(err)\n\n\t\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\t\tres, err := client.Get(uri)\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/istio_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 79,
                  "endLine": 61,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\t\t\ti.Require().NoError(client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\t\ti.Require().NoError(client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\t\ti.Require().NoError(client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/istio_test.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 68,
                  "endLine": 61,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\t\t\ti.Require().NoError(client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\t\ti.Require().NoError(client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\t\ti.Require().NoError(client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\t\ti.Require().NoError(err)\n\n\t\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/istio_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ttestCAFile          = \"certs/ca.crt\"\n\tkeyCloakLoginFormID = \"kc-form-login\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nfunc (i *IstioSuite) TestIstioEnforcement() {\n",
                    "rendered": {
                      "text": "\ttestCAFile          = \"certs/ca.crt\"\n\tkeyCloakLoginFormID = \"kc-form-login\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nfunc (i *IstioSuite) TestIstioEnforcement() {\n",
                      "markdown": "`\ttestCAFile          = \"certs/ca.crt\"\n\tkeyCloakLoginFormID = \"kc-form-login\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nfunc (i *IstioSuite) TestIstioEnforcement() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/istio_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/istio_test.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 71,
                  "endLine": 44,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\t\t\tclient, err := e2e.NewOIDCTestClient(\n\t\t\t\te2e.WithLoggingOptions(i.T().Log),\n\t\t\t\te2e.WithCustomCA(testCAFile),\n\t\t\t\t// Map the keycloak cluster DNS name to the local address where the service is exposed\n\t\t\t\te2e.WithCustomAddressMappings(map[string]string{\n\t\t\t\t\t\"http-echo.authservice.internal:80\":  \"localhost:30002\",\n\t\t\t\t\t\"http-echo.authservice.internal:443\": \"localhost:30000\",\n",
                    "rendered": {
                      "text": "\t\t\tclient, err := e2e.NewOIDCTestClient(\n\t\t\t\te2e.WithLoggingOptions(i.T().Log),\n\t\t\t\te2e.WithCustomCA(testCAFile),\n\t\t\t\t// Map the keycloak cluster DNS name to the local address where the service is exposed\n\t\t\t\te2e.WithCustomAddressMappings(map[string]string{\n\t\t\t\t\t\"http-echo.authservice.internal:80\":  \"localhost:30002\",\n\t\t\t\t\t\"http-echo.authservice.internal:443\": \"localhost:30000\",\n",
                      "markdown": "`\t\t\tclient, err := e2e.NewOIDCTestClient(\n\t\t\t\te2e.WithLoggingOptions(i.T().Log),\n\t\t\t\te2e.WithCustomCA(testCAFile),\n\t\t\t\t// Map the keycloak cluster DNS name to the local address where the service is exposed\n\t\t\t\te2e.WithCustomAddressMappings(map[string]string{\n\t\t\t\t\t\"http-echo.authservice.internal:80\":  \"localhost:30002\",\n\t\t\t\t\t\"http-echo.authservice.internal:443\": \"localhost:30000\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 116,
                  "endLine": 4,
                  "endColumn": 125,
                  "snippet": {
                    "text": "# Istio e2e tests\n\nThe [Istio](https://istio.io/) end-to-end tests are designed to verify the integration of the\nAuth Service with Istio. They deploy a [KinD](https://kind.sigs.k8s.io/) Kubernetes cluster where Istio and the Auth Service are\ninstalled and then run a series of tests to verify the integration. The following diagram shows the setup:\n\n```mermaid\n",
                    "rendered": {
                      "text": "# Istio e2e tests\n\nThe [Istio](https://istio.io/) end-to-end tests are designed to verify the integration of the\nAuth Service with Istio. They deploy a [KinD](https://kind.sigs.k8s.io/) Kubernetes cluster where Istio and the Auth Service are\ninstalled and then run a series of tests to verify the integration. The following diagram shows the setup:\n\n```mermaid\n",
                      "markdown": "`# Istio e2e tests\n\nThe [Istio](https://istio.io/) end-to-end tests are designed to verify the integration of the\nAuth Service with Istio. They deploy a [KinD](https://kind.sigs.k8s.io/) Kubernetes cluster where Istio and the Auth Service are\ninstalled and then run a series of tests to verify the integration. The following diagram shows the setup:\n\n```mermaid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 4,
                  "endLine": 4,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# Istio e2e tests\n\nThe [Istio](https://istio.io/) end-to-end tests are designed to verify the integration of the\nAuth Service with Istio. They deploy a [KinD](https://kind.sigs.k8s.io/) Kubernetes cluster where Istio and the Auth Service are\ninstalled and then run a series of tests to verify the integration. The following diagram shows the setup:\n\n```mermaid\n",
                    "rendered": {
                      "text": "# Istio e2e tests\n\nThe [Istio](https://istio.io/) end-to-end tests are designed to verify the integration of the\nAuth Service with Istio. They deploy a [KinD](https://kind.sigs.k8s.io/) Kubernetes cluster where Istio and the Auth Service are\ninstalled and then run a series of tests to verify the integration. The following diagram shows the setup:\n\n```mermaid\n",
                      "markdown": "`# Istio e2e tests\n\nThe [Istio](https://istio.io/) end-to-end tests are designed to verify the integration of the\nAuth Service with Istio. They deploy a [KinD](https://kind.sigs.k8s.io/) Kubernetes cluster where Istio and the Auth Service are\ninstalled and then run a series of tests to verify the integration. The following diagram shows the setup:\n\n```mermaid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 51,
                  "endLine": 116,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\n\nfunc (i *IstioSuite) istioInstalled(client kubernetes.Interface) bool {\n\t_, err := client.CoreV1().Services(\"istio-system\").Get(context.Background(), \"istiod\", metav1.GetOptions{})\n\treturn err == nil\n}\n\n",
                    "rendered": {
                      "text": "}\n\nfunc (i *IstioSuite) istioInstalled(client kubernetes.Interface) bool {\n\t_, err := client.CoreV1().Services(\"istio-system\").Get(context.Background(), \"istiod\", metav1.GetOptions{})\n\treturn err == nil\n}\n\n",
                      "markdown": "`}\n\nfunc (i *IstioSuite) istioInstalled(client kubernetes.Interface) bool {\n\t_, err := client.CoreV1().Services(\"istio-system\").Get(context.Background(), \"istiod\", metav1.GetOptions{})\n\treturn err == nil\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 7,
                  "endLine": 127,
                  "snippet": {
                    "text": "\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n\t}\n\treturn cmd\n}\n",
                    "rendered": {
                      "text": "\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n\t}\n\treturn cmd\n}\n",
                      "markdown": "`\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n\t}\n\treturn cmd\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 1,
                  "endLine": 124,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tcmd := fmt.Sprintf(\"helm --kubeconfig %s install %s %s --version %s -n istio-system --create-namespace --wait\",\n\t\te2e.KubeConfig, name, chart, i.IstioVersion)\n\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n\t}\n\treturn cmd\n}\n",
                    "rendered": {
                      "text": "\tcmd := fmt.Sprintf(\"helm --kubeconfig %s install %s %s --version %s -n istio-system --create-namespace --wait\",\n\t\te2e.KubeConfig, name, chart, i.IstioVersion)\n\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n\t}\n\treturn cmd\n}\n",
                      "markdown": "`\tcmd := fmt.Sprintf(\"helm --kubeconfig %s install %s %s --version %s -n istio-system --create-namespace --wait\",\n\t\te2e.KubeConfig, name, chart, i.IstioVersion)\n\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n\t}\n\treturn cmd\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nfunc (i *IstioSuite) helmInstall(name, chart, values string) string {\n\tcmd := fmt.Sprintf(\"helm --kubeconfig %s install %s %s --version %s -n istio-system --create-namespace --wait\",\n\t\te2e.KubeConfig, name, chart, i.IstioVersion)\n\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n",
                    "rendered": {
                      "text": "}\n\nfunc (i *IstioSuite) helmInstall(name, chart, values string) string {\n\tcmd := fmt.Sprintf(\"helm --kubeconfig %s install %s %s --version %s -n istio-system --create-namespace --wait\",\n\t\te2e.KubeConfig, name, chart, i.IstioVersion)\n\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n",
                      "markdown": "`}\n\nfunc (i *IstioSuite) helmInstall(name, chart, values string) string {\n\tcmd := fmt.Sprintf(\"helm --kubeconfig %s install %s %s --version %s -n istio-system --create-namespace --wait\",\n\t\te2e.KubeConfig, name, chart, i.IstioVersion)\n\tif values != \"\" {\n\t\tcmd += fmt.Sprintf(\" -f %s\", values)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 7,
                  "endLine": 108,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\ti.helmInstall(\"istio-ingress\", \"istio/gateway\", istioGwConfig),\n\t}\n\n\tfor _, cmd := range istioInstall {\n\t\tparts := strings.Split(cmd, \" \")\n\t\tout, err := exec.Command(parts[0], parts[1:]...).CombinedOutput()\n\t\ti.Require().NoError(err, string(out))\n",
                    "rendered": {
                      "text": "\t\ti.helmInstall(\"istio-ingress\", \"istio/gateway\", istioGwConfig),\n\t}\n\n\tfor _, cmd := range istioInstall {\n\t\tparts := strings.Split(cmd, \" \")\n\t\tout, err := exec.Command(parts[0], parts[1:]...).CombinedOutput()\n\t\ti.Require().NoError(err, string(out))\n",
                      "markdown": "`\t\ti.helmInstall(\"istio-ingress\", \"istio/gateway\", istioGwConfig),\n\t}\n\n\tfor _, cmd := range istioInstall {\n\t\tparts := strings.Split(cmd, \" \")\n\t\tout, err := exec.Command(parts[0], parts[1:]...).CombinedOutput()\n\t\ti.Require().NoError(err, string(out))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 12,
                  "endLine": 102,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\tvar istioInstall = []string{\n\t\tfmt.Sprintf(\"helm repo add istio %s --force-update\", istioHelmRepo),\n\t\t\"helm repo update istio\",\n\t\ti.helmInstall(\"istio-base\", \"istio/base\", \"\"),\n\t\ti.helmInstall(\"istiod\", \"istio/istiod\", istiodConfig),\n\t\ti.helmInstall(\"istio-ingress\", \"istio/gateway\", istioGwConfig),\n",
                    "rendered": {
                      "text": "\n\tvar istioInstall = []string{\n\t\tfmt.Sprintf(\"helm repo add istio %s --force-update\", istioHelmRepo),\n\t\t\"helm repo update istio\",\n\t\ti.helmInstall(\"istio-base\", \"istio/base\", \"\"),\n\t\ti.helmInstall(\"istiod\", \"istio/istiod\", istiodConfig),\n\t\ti.helmInstall(\"istio-ingress\", \"istio/gateway\", istioGwConfig),\n",
                      "markdown": "`\n\tvar istioInstall = []string{\n\t\tfmt.Sprintf(\"helm repo add istio %s --force-update\", istioHelmRepo),\n\t\t\"helm repo update istio\",\n\t\ti.helmInstall(\"istio-base\", \"istio/base\", \"\"),\n\t\ti.helmInstall(\"istiod\", \"istio/istiod\", istiodConfig),\n\t\ti.helmInstall(\"istio-ingress\", \"istio/gateway\", istioGwConfig),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/istio/suite_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/mock/mock_test.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 18,
                  "endLine": 64,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t})\n\n\tt.Run(\"deny\", func(t *testing.T) {\n\t\tres, err := http.Get(withPath(includedPath))\n\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 403, res.StatusCode)\n",
                    "rendered": {
                      "text": "\t})\n\n\tt.Run(\"deny\", func(t *testing.T) {\n\t\tres, err := http.Get(withPath(includedPath))\n\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 403, res.StatusCode)\n",
                      "markdown": "`\t})\n\n\tt.Run(\"deny\", func(t *testing.T) {\n\t\tres, err := http.Get(withPath(includedPath))\n\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 403, res.StatusCode)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/mock/mock_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 17,
                  "endLine": 187,
                  "endColumn": 81,
                  "snippet": {
                    "text": "}\n\nfunc (r *randomGenerator) generate(n int) string {\n\tconst charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = charset[r.rand.Intn(len(charset))]\n",
                    "rendered": {
                      "text": "}\n\nfunc (r *randomGenerator) generate(n int) string {\n\tconst charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = charset[r.rand.Intn(len(charset))]\n",
                      "markdown": "`}\n\nfunc (r *randomGenerator) generate(n int) string {\n\tconst charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = charset[r.rand.Intn(len(charset))]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/discovery.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 24,
                  "endLine": 58,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t}\n\n\t// Make a GET request to the well-known configuration endpoint\n\tresponse, err := client.Get(url)\n\tif err != nil {\n\t\treturn WellKnownConfig{}, err\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Make a GET request to the well-known configuration endpoint\n\tresponse, err := client.Get(url)\n\tif err != nil {\n\t\treturn WellKnownConfig{}, err\n\t}\n",
                      "markdown": "`\t}\n\n\t// Make a GET request to the well-known configuration endpoint\n\tresponse, err := client.Get(url)\n\tif err != nil {\n\t\treturn WellKnownConfig{}, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/discovery.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 17,
                  "endLine": 250,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tcache := newCache(t, config)\n\n\t\t// Load the entry in the cache and remove it to let the background refresher refresh it\n\t\t_, err := cache.Get(context.Background(), config)\n\t\trequire.NoError(t, err)\n\t\trequire.NoError(t, jwks.RemoveKey(pub))\n\n",
                    "rendered": {
                      "text": "\t\tcache := newCache(t, config)\n\n\t\t// Load the entry in the cache and remove it to let the background refresher refresh it\n\t\t_, err := cache.Get(context.Background(), config)\n\t\trequire.NoError(t, err)\n\t\trequire.NoError(t, jwks.RemoveKey(pub))\n\n",
                      "markdown": "`\t\tcache := newCache(t, config)\n\n\t\t// Load the entry in the cache and remove it to let the background refresher refresh it\n\t\t_, err := cache.Get(context.Background(), config)\n\t\trequire.NoError(t, err)\n\t\trequire.NoError(t, jwks.RemoveKey(pub))\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 21,
                  "endLine": 230,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tcache := newCache(t, config)\n\n\t\tfor i := 0; i < 5; i++ {\n\t\t\tkeys, err := cache.Get(context.Background(), config)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, jwks, keys)\n\t\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount)) // Cached results after the first request\n",
                    "rendered": {
                      "text": "\t\tcache := newCache(t, config)\n\n\t\tfor i := 0; i < 5; i++ {\n\t\t\tkeys, err := cache.Get(context.Background(), config)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, jwks, keys)\n\t\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount)) // Cached results after the first request\n",
                      "markdown": "`\t\tcache := newCache(t, config)\n\n\t\tfor i := 0; i < 5; i++ {\n\t\t\tkeys, err := cache.Get(context.Background(), config)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, jwks, keys)\n\t\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount)) // Cached results after the first request\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 20,
                  "endLine": 211,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t}\n\t\tcache := newCache(t, config)\n\n\t\tkeys, err := cache.Get(context.Background(), config)\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, jwks, keys)\n\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount))\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tcache := newCache(t, config)\n\n\t\tkeys, err := cache.Get(context.Background(), config)\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, jwks, keys)\n\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount))\n",
                      "markdown": "`\t\t}\n\t\tcache := newCache(t, config)\n\n\t\tkeys, err := cache.Get(context.Background(), config)\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, jwks, keys)\n\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "endLine": 192,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t\tcache := newCache(t, config)\n\n\t\t_, err := cache.Get(context.Background(), config)\n\n\t\trequire.ErrorIs(t, err, ErrJWKSFetch)\n\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount)) // The attempt to load the JWKS is made, but fails\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tcache := newCache(t, config)\n\n\t\t_, err := cache.Get(context.Background(), config)\n\n\t\trequire.ErrorIs(t, err, ErrJWKSFetch)\n\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount)) // The attempt to load the JWKS is made, but fails\n",
                      "markdown": "`\t\t}\n\t\tcache := newCache(t, config)\n\n\t\t_, err := cache.Get(context.Background(), config)\n\n\t\trequire.ErrorIs(t, err, ErrJWKSFetch)\n\t\trequire.Equal(t, int32(1), atomic.LoadInt32(server.requestCount)) // The attempt to load the JWKS is made, but fails\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 20,
                  "endLine": 129,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\tjwks, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: keys,\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\tjwks, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: keys,\n\t\t\t},\n",
                      "markdown": "`\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\tjwks, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: keys,\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 20,
                  "endLine": 107,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\tjwks, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: singleKey,\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\tjwks, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: singleKey,\n\t\t\t},\n",
                      "markdown": "`\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\tjwks, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: singleKey,\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\t_, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: \"{aaa}\",\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\t_, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: \"{aaa}\",\n\t\t\t},\n",
                      "markdown": "`\t\tgo func() { require.NoError(t, cache.ServeContext(ctx)) }()\n\t\tt.Cleanup(cancel)\n\n\t\t_, err := cache.Get(context.Background(), &oidcv1.OIDCConfig{\n\t\t\tJwksConfig: &oidcv1.OIDCConfig_Jwks{\n\t\t\t\tJwks: \"{aaa}\",\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 19,
                  "endLine": 148,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"b3319a147514df7ee5e4bcdee51350cc890cc89e\", key.KeyID())\n\t})\n}\n\n",
                    "rendered": {
                      "text": "\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"b3319a147514df7ee5e4bcdee51350cc890cc89e\", key.KeyID())\n\t})\n}\n\n",
                      "markdown": "`\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"b3319a147514df7ee5e4bcdee51350cc890cc89e\", key.KeyID())\n\t})\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 29,
                  "endLine": 144,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\n\t\tkey, ok = jwks.LookupKeyID(\"b3319a147514df7ee5e4bcdee51350cc890cc89e\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n",
                    "rendered": {
                      "text": "\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\n\t\tkey, ok = jwks.LookupKeyID(\"b3319a147514df7ee5e4bcdee51350cc890cc89e\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n",
                      "markdown": "`\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\n\t\tkey, ok = jwks.LookupKeyID(\"b3319a147514df7ee5e4bcdee51350cc890cc89e\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 19,
                  "endLine": 142,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\n\t\tkey, ok = jwks.LookupKeyID(\"b3319a147514df7ee5e4bcdee51350cc890cc89e\")\n\t\trequire.True(t, ok)\n",
                    "rendered": {
                      "text": "\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\n\t\tkey, ok = jwks.LookupKeyID(\"b3319a147514df7ee5e4bcdee51350cc890cc89e\")\n\t\trequire.True(t, ok)\n",
                      "markdown": "`\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\n\t\tkey, ok = jwks.LookupKeyID(\"b3319a147514df7ee5e4bcdee51350cc890cc89e\")\n\t\trequire.True(t, ok)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 30,
                  "endLine": 138,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 2, jwks.Len())\n\n\t\tkey, ok := jwks.LookupKeyID(\"62a93512c9ee4c7f8067b5a216dade2763d32a47\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 2, jwks.Len())\n\n\t\tkey, ok := jwks.LookupKeyID(\"62a93512c9ee4c7f8067b5a216dade2763d32a47\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n",
                      "markdown": "`\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 2, jwks.Len())\n\n\t\tkey, ok := jwks.LookupKeyID(\"62a93512c9ee4c7f8067b5a216dade2763d32a47\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\t})\n\n\tt.Run(\"multiple-keys\", func(t *testing.T) {\n",
                    "rendered": {
                      "text": "\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\t})\n\n\tt.Run(\"multiple-keys\", func(t *testing.T) {\n",
                      "markdown": "`\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n\t\trequire.Equal(t, \"62a93512c9ee4c7f8067b5a216dade2763d32a47\", key.KeyID())\n\t})\n\n\tt.Run(\"multiple-keys\", func(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 30,
                  "endLine": 116,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 1, jwks.Len())\n\n\t\tkey, ok := jwks.LookupKeyID(\"62a93512c9ee4c7f8067b5a216dade2763d32a47\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 1, jwks.Len())\n\n\t\tkey, ok := jwks.LookupKeyID(\"62a93512c9ee4c7f8067b5a216dade2763d32a47\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n",
                      "markdown": "`\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 1, jwks.Len())\n\n\t\tkey, ok := jwks.LookupKeyID(\"62a93512c9ee4c7f8067b5a216dade2763d32a47\")\n\t\trequire.True(t, ok)\n\t\trequire.Equal(t, jwa.RS256, key.Algorithm())\n\t\trequire.Equal(t, jwa.KeyType(\"RSA\"), key.KeyType())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  \"kty\": \"RSA\",\n  \"alg\": \"RS256\",\n  \"use\": \"sig\",\n  \"kid\": \"62a93512c9ee4c7f8067b5a216dade2763d32a47\",\n  \"n\":\n  \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n  \"e\": \"AQAB\"\n",
                    "rendered": {
                      "text": "  \"kty\": \"RSA\",\n  \"alg\": \"RS256\",\n  \"use\": \"sig\",\n  \"kid\": \"62a93512c9ee4c7f8067b5a216dade2763d32a47\",\n  \"n\":\n  \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n  \"e\": \"AQAB\"\n",
                      "markdown": "`  \"kty\": \"RSA\",\n  \"alg\": \"RS256\",\n  \"use\": \"sig\",\n  \"kid\": \"62a93512c9ee4c7f8067b5a216dade2763d32a47\",\n  \"n\":\n  \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n  \"e\": \"AQAB\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 13,
                  "endLine": 60,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"kid\": \"b3319a147514df7ee5e4bcdee51350cc890cc89e\",\n      \"n\":\n      \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n      \"e\": \"AQAB\"\n",
                    "rendered": {
                      "text": "      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"kid\": \"b3319a147514df7ee5e4bcdee51350cc890cc89e\",\n      \"n\":\n      \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n      \"e\": \"AQAB\"\n",
                      "markdown": "`      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"kid\": \"b3319a147514df7ee5e4bcdee51350cc890cc89e\",\n      \"n\":\n      \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n      \"e\": \"AQAB\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"kid\": \"62a93512c9ee4c7f8067b5a216dade2763d32a47\",\n      \"n\":\n      \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n      \"e\": \"AQAB\"\n",
                    "rendered": {
                      "text": "      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"kid\": \"62a93512c9ee4c7f8067b5a216dade2763d32a47\",\n      \"n\":\n      \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n      \"e\": \"AQAB\"\n",
                      "markdown": "`      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"kid\": \"62a93512c9ee4c7f8067b5a216dade2763d32a47\",\n      \"n\":\n      \"up97uqrF9MWOPaPkwSaBeuAPLOr9FKcaWGdVEGzQ4f3Zq5WKVZowx9TCBxmImNJ1qmUi13pB8otwM_l5lfY1AFBMxVbQCUXntLovhDaiSvYp4wGDjFzQiYA-pUq8h6MUZBnhleYrkU7XlCBwNVyN8qNMkpLA7KFZYz-486GnV2NIJJx_4BGa3HdKwQGxi2tjuQsQvao5W4xmSVaaEWopBwMy2QmlhSFQuPUpTaywTqUcUq_6SfAHhZ4IDa_FxEd2c2z8gFGtfst9cY3lRYf-c_ZdboY3mqN9Su3-j3z5r2SHWlhB_LNAjyWlBGsvbGPlTqDziYQwZN4aGsqVKQb9Vw\",\n      \"e\": \"AQAB\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 38,
                  "endLine": 94,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n\nfunc TestSessionStoreFactoryRedisFails(t *testing.T) {\n",
                    "rendered": {
                      "text": "\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n\nfunc TestSessionStoreFactoryRedisFails(t *testing.T) {\n",
                      "markdown": "`\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n\nfunc TestSessionStoreFactoryRedisFails(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 38,
                  "endLine": 93,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n\n",
                    "rendered": {
                      "text": "\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n\n",
                      "markdown": "`\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 40,
                  "endLine": 92,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n",
                    "rendered": {
                      "text": "\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n",
                      "markdown": "`\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 40,
                  "endLine": 91,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n",
                    "rendered": {
                      "text": "\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n",
                      "markdown": "`\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n\trequire.Equal(t, redis2.Addr(), store.Get(config.Chains[3].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 40,
                  "endLine": 90,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\trequire.Len(t, store.redis, 2)\n\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n",
                    "rendered": {
                      "text": "\trequire.Len(t, store.redis, 2)\n\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n",
                      "markdown": "`\trequire.Len(t, store.redis, 2)\n\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n\trequire.Equal(t, redis1.Addr(), store.Get(config.Chains[2].Filters[0].GetOidc()).(*redisStore).client.(*redis.Client).Options().Addr)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 21,
                  "endLine": 89,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\trequire.NotNil(t, store.memory)\n\trequire.Len(t, store.redis, 2)\n\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n",
                    "rendered": {
                      "text": "\trequire.NotNil(t, store.memory)\n\trequire.Len(t, store.redis, 2)\n\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n",
                      "markdown": "`\trequire.NotNil(t, store.memory)\n\trequire.Len(t, store.redis, 2)\n\n\trequire.Nil(t, store.Get(nil))\n\trequire.IsType(t, &memoryStore{}, store.Get(&oidcv1.OIDCConfig{}))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[0].Filters[1].GetOidc()))\n\trequire.IsType(t, &memoryStore{}, store.Get(config.Chains[1].Filters[0].GetOidc()))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/session_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller_lifecycle_test.go"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc TestErrorLoadingConfig(t *testing.T) {\n\tt.Setenv(\"KUBECONFIG\", \"non-existent-file\")\n\tsc := NewSecretController(loadTestConf(t, \"testdata/oidc-with-secret-ref.json\"))\n\tsc.namespace = defaultNamespace\n\n\trequire.ErrorIs(t, sc.PreRun(), ErrLoadingConfig)\n",
                    "rendered": {
                      "text": "\nfunc TestErrorLoadingConfig(t *testing.T) {\n\tt.Setenv(\"KUBECONFIG\", \"non-existent-file\")\n\tsc := NewSecretController(loadTestConf(t, \"testdata/oidc-with-secret-ref.json\"))\n\tsc.namespace = defaultNamespace\n\n\trequire.ErrorIs(t, sc.PreRun(), ErrLoadingConfig)\n",
                      "markdown": "`\nfunc TestErrorLoadingConfig(t *testing.T) {\n\tt.Setenv(\"KUBECONFIG\", \"non-existent-file\")\n\tsc := NewSecretController(loadTestConf(t, \"testdata/oidc-with-secret-ref.json\"))\n\tsc.namespace = defaultNamespace\n\n\trequire.ErrorIs(t, sc.PreRun(), ErrLoadingConfig)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller_lifecycle_test.go"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nfunc startEnv(t *testing.T) *rest.Config {\n\tenv := &envtest.Environment{}\n\tcfg, err := env.Start()\n\trequire.NoError(t, err)\n\n",
                    "rendered": {
                      "text": "}\n\nfunc startEnv(t *testing.T) *rest.Config {\n\tenv := &envtest.Environment{}\n\tcfg, err := env.Start()\n\trequire.NoError(t, err)\n\n",
                      "markdown": "`}\n\nfunc startEnv(t *testing.T) *rest.Config {\n\tenv := &envtest.Environment{}\n\tcfg, err := env.Start()\n\trequire.NoError(t, err)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller_reconcile_test.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 11,
                  "endLine": 106,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t\t\t\tName:      \"test-secret-2\",\n\t\t\t\t},\n\t\t\t\tData: map[string][]byte{\n\t\t\t\t\tclientSecretKey: []byte(\"fake-client-secret-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n",
                    "rendered": {
                      "text": "\t\t\t\t\tName:      \"test-secret-2\",\n\t\t\t\t},\n\t\t\t\tData: map[string][]byte{\n\t\t\t\t\tclientSecretKey: []byte(\"fake-client-secret-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n",
                      "markdown": "`\t\t\t\t\tName:      \"test-secret-2\",\n\t\t\t\t},\n\t\t\t\tData: map[string][]byte{\n\t\t\t\t\tclientSecretKey: []byte(\"fake-client-secret-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller_reconcile_test.go"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 11,
                  "endLine": 97,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t\t\t\tName:      \"test-secret-1\",\n\t\t\t\t},\n\t\t\t\tData: map[string][]byte{\n\t\t\t\t\tclientSecretKey: []byte(\"fake-client-secret-1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n",
                    "rendered": {
                      "text": "\t\t\t\t\tName:      \"test-secret-1\",\n\t\t\t\t},\n\t\t\t\tData: map[string][]byte{\n\t\t\t\t\tclientSecretKey: []byte(\"fake-client-secret-1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n",
                      "markdown": "`\t\t\t\t\tName:      \"test-secret-1\",\n\t\t\t\t},\n\t\t\t\tData: map[string][]byte{\n\t\t\t\t\tclientSecretKey: []byte(\"fake-client-secret-1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/k8s/secret_controller_reconcile_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/logging.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 16,
                  "endLine": 50,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\tDefault:  \"Default\",\n\tHealth:   \"Health server messages\",\n\tIDP:      \"Identity provider requests/responses\",\n\tJWKS:     \"JWKS update and parse messages\",\n\tRequests: \"Logs all requests and responses received by the server\",\n\tServer:   \"Server request handling messages\",\n\tSession:  \"Session store messages\",\n",
                    "rendered": {
                      "text": "\tDefault:  \"Default\",\n\tHealth:   \"Health server messages\",\n\tIDP:      \"Identity provider requests/responses\",\n\tJWKS:     \"JWKS update and parse messages\",\n\tRequests: \"Logs all requests and responses received by the server\",\n\tServer:   \"Server request handling messages\",\n\tSession:  \"Session store messages\",\n",
                      "markdown": "`\tDefault:  \"Default\",\n\tHealth:   \"Health server messages\",\n\tIDP:      \"Identity provider requests/responses\",\n\tJWKS:     \"JWKS update and parse messages\",\n\tRequests: \"Logs all requests and responses received by the server\",\n\tServer:   \"Server request handling messages\",\n\tSession:  \"Session store messages\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/config_test.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 44,
                  "endLine": 51,
                  "endColumn": 48,
                  "snippet": {
                    "text": "}\n\nconst (\n\tmsgLengthValidation = \"value length must be at least 1 runes\"\n\tmsgInvalidClientID  = `invalid OIDCConfig.ClientId: value contains substring \":\"`\n)\n\n",
                    "rendered": {
                      "text": "}\n\nconst (\n\tmsgLengthValidation = \"value length must be at least 1 runes\"\n\tmsgInvalidClientID  = `invalid OIDCConfig.ClientId: value contains substring \":\"`\n)\n\n",
                      "markdown": "`}\n\nconst (\n\tmsgLengthValidation = \"value length must be at least 1 runes\"\n\tmsgInvalidClientID  = `invalid OIDCConfig.ClientId: value contains substring \":\"`\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.golangci.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 62,
                  "endLine": 23,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  even if another reviewer has already approved the PR.\n* During the review, address the comments and commit the changes\n  _without_ squashing the commits. This facilitates incremental reviews\n  since the reviewer does not go through all the code again to find out\n  what has changed since the last review. When a change goes out of sync with main,\n  please rebase and force push, keeping the original commits where practical.\n* Commits are squashed prior to merging a pull request, using the title\n",
                    "rendered": {
                      "text": "  even if another reviewer has already approved the PR.\n* During the review, address the comments and commit the changes\n  _without_ squashing the commits. This facilitates incremental reviews\n  since the reviewer does not go through all the code again to find out\n  what has changed since the last review. When a change goes out of sync with main,\n  please rebase and force push, keeping the original commits where practical.\n* Commits are squashed prior to merging a pull request, using the title\n",
                      "markdown": "`  even if another reviewer has already approved the PR.\n* During the review, address the comments and commit the changes\n  _without_ squashing the commits. This facilitates incremental reviews\n  since the reviewer does not go through all the code again to find out\n  what has changed since the last review. When a change goes out of sync with main,\n  please rebase and force push, keeping the original commits where practical.\n* Commits are squashed prior to merging a pull request, using the title\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.licenserc.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/authservice.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/authservice.yaml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 17,
                  "snippet": {
                    "text": "# limitations under the License.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: authservice\n  labels:\n    app: authservice\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: authservice\n  labels:\n    app: authservice\n",
                      "markdown": "`# limitations under the License.\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: authservice\n  labels:\n    app: authservice\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/oidc-intercept-policy.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/authservice-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/istiod-values.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/istiod-values.yaml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 40,
                  "endLine": 22,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n        # This must match the Kubernetes service and port where the authservice is listening.\n        service: \"authservice.authservice.svc.cluster.local\"\n        port: \"10003\"   # This port is the one to be set in the authservice config\n",
                    "rendered": {
                      "text": "    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n        # This must match the Kubernetes service and port where the authservice is listening.\n        service: \"authservice.authservice.svc.cluster.local\"\n        port: \"10003\"   # This port is the one to be set in the authservice config\n",
                      "markdown": "`    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n        # This must match the Kubernetes service and port where the authservice is listening.\n        service: \"authservice.authservice.svc.cluster.local\"\n        port: \"10003\"   # This port is the one to be set in the authservice config\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/istiod-values.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 40,
                  "endLine": 18,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# Example Istiod values.yaml that configures the Authservice as an extension provider\nmeshConfig:\n  extensionProviders:\n    # Configure the backend for the Auth Service provider that can be used in AuthorizationPolicies\n    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n",
                    "rendered": {
                      "text": "# Example Istiod values.yaml that configures the Authservice as an extension provider\nmeshConfig:\n  extensionProviders:\n    # Configure the backend for the Auth Service provider that can be used in AuthorizationPolicies\n    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n",
                      "markdown": "`# Example Istiod values.yaml that configures the Authservice as an extension provider\nmeshConfig:\n  extensionProviders:\n    # Configure the backend for the Auth Service provider that can be used in AuthorizationPolicies\n    # in CUSTOM mode.\n    - name: authservice-grpc\n      envoyExtAuthzGrpc:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/examples/minimal/authz-policy.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 33,
                  "endLine": 59,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 6,
                  "endLine": 59,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 33,
                  "endLine": 48,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "endLine": 48,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcreg.sh create \\\n    -s clientId=\"${CLIENT_ID}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 22,
                  "endLine": 44,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                    "rendered": {
                      "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                      "markdown": "`\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                    "rendered": {
                      "text": "\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n",
                      "markdown": "`\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 31,
                  "endLine": 42,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                    "rendered": {
                      "text": "    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                      "markdown": "`    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n    --new-password \"${PASSWORD}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 33,
                  "endLine": 40,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "endLine": 40,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n",
                      "markdown": "`    --server \"${KEYCLOAK_SERVER}\" \\\n    --realm \"${REALM}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh set-password \\\n    --username \"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 33,
                  "endLine": 32,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                      "markdown": "`    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 6,
                  "endLine": 32,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                    "rendered": {
                      "text": "    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n",
                      "markdown": "`    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n    --user \"${KEYCLOAK_ADMIN}\" \\\n    --password \"${KEYCLOAK_ADMIN_PASSWORD}\"\n\n/opt/keycloak/bin/kcadm.sh create users \\\n    -s username=\"${USERNAME}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "endColumn": 8,
                  "snippet": {
                    "text": "KEYCLOAK_SERVER=\"http://keycloak:8080\"\nREALM=\"master\"\nUSERNAME=authservice\nPASSWORD=authservice\nCLIENT_ID=authservice\nCLIENT_SECRET=authservice-secret\nREDIRECT_URL=https://host.docker.internal:8443/callback\n",
                    "rendered": {
                      "text": "KEYCLOAK_SERVER=\"http://keycloak:8080\"\nREALM=\"master\"\nUSERNAME=authservice\nPASSWORD=authservice\nCLIENT_ID=authservice\nCLIENT_SECRET=authservice-secret\nREDIRECT_URL=https://host.docker.internal:8443/callback\n",
                      "markdown": "`KEYCLOAK_SERVER=\"http://keycloak:8080\"\nREALM=\"master\"\nUSERNAME=authservice\nPASSWORD=authservice\nCLIENT_ID=authservice\nCLIENT_SECRET=authservice-secret\nREDIRECT_URL=https://host.docker.internal:8443/callback\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 26,
                  "endLine": 27,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nset -ex\n\n/opt/keycloak/bin/kcadm.sh update realms/${REALM} \\\n    -s accessTokenLifespan=10 \\\n    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                    "rendered": {
                      "text": "\nset -ex\n\n/opt/keycloak/bin/kcadm.sh update realms/${REALM} \\\n    -s accessTokenLifespan=10 \\\n    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n",
                      "markdown": "`\nset -ex\n\n/opt/keycloak/bin/kcadm.sh update realms/${REALM} \\\n    -s accessTokenLifespan=10 \\\n    --realm \"${REALM}\" \\\n    --server \"${KEYCLOAK_SERVER}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/setup-keycloak.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/docker-compose.yaml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 115,
                  "endLine": 124,
                  "endColumn": 123,
                  "snippet": {
                    "text": "    # Healthcheck to make sure the created client has been successfully created, and that other services\n    # can depend on\n    healthcheck:\n      test: /opt/keycloak/bin/kcreg.sh get authservice --server http://keycloak:8080 --realm master --user admin --password admin\n      interval: 2s\n      timeout: 2s\n      retries: 10\n",
                    "rendered": {
                      "text": "    # Healthcheck to make sure the created client has been successfully created, and that other services\n    # can depend on\n    healthcheck:\n      test: /opt/keycloak/bin/kcreg.sh get authservice --server http://keycloak:8080 --realm master --user admin --password admin\n      interval: 2s\n      timeout: 2s\n      retries: 10\n",
                      "markdown": "`    # Healthcheck to make sure the created client has been successfully created, and that other services\n    # can depend on\n    healthcheck:\n      test: /opt/keycloak/bin/kcreg.sh get authservice --server http://keycloak:8080 --realm master --user admin --password admin\n      interval: 2s\n      timeout: 2s\n      retries: 10\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/docker-compose.yaml"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 21,
                  "endLine": 115,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    entrypoint: /opt/setup-keycloak.sh\n    volumes:\n      - type: bind\n",
                    "rendered": {
                      "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    entrypoint: /opt/setup-keycloak.sh\n    volumes:\n      - type: bind\n",
                      "markdown": "`    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    entrypoint: /opt/setup-keycloak.sh\n    volumes:\n      - type: bind\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/docker-compose.yaml"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 118,
                  "endLine": 98,
                  "endColumn": 126,
                  "snippet": {
                    "text": "        source: certs\n        target: /opt/keycloak/certs\n    healthcheck:\n      test: /opt/keycloak/bin/kcadm.sh get realms/master --server http://localhost:8080 --realm master --user admin --password admin\n      interval: 5s\n      timeout: 2s\n      retries: 30\n",
                    "rendered": {
                      "text": "        source: certs\n        target: /opt/keycloak/certs\n    healthcheck:\n      test: /opt/keycloak/bin/kcadm.sh get realms/master --server http://localhost:8080 --realm master --user admin --password admin\n      interval: 5s\n      timeout: 2s\n      retries: 30\n",
                      "markdown": "`        source: certs\n        target: /opt/keycloak/certs\n    healthcheck:\n      test: /opt/keycloak/bin/kcadm.sh get realms/master --server http://localhost:8080 --realm master --user admin --password admin\n      interval: 5s\n      timeout: 2s\n      retries: 30\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/docker-compose.yaml"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 21,
                  "endLine": 89,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - \"9443:9443\"\n    command: start-dev  --https-port=9443 --https-certificate-file=/opt/keycloak/certs/host.docker.internal.crt --https-certificate-key-file=/opt/keycloak/certs/host.docker.internal.key\n",
                    "rendered": {
                      "text": "    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - \"9443:9443\"\n    command: start-dev  --https-port=9443 --https-certificate-file=/opt/keycloak/certs/host.docker.internal.crt --https-certificate-key-file=/opt/keycloak/certs/host.docker.internal.key\n",
                      "markdown": "`    platform: linux/${ARCH:-amd64}\n    environment:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: admin\n    ports:\n      - \"9443:9443\"\n    command: start-dev  --https-port=9443 --https-certificate-file=/opt/keycloak/certs/host.docker.internal.crt --https-certificate-key-file=/opt/keycloak/certs/host.docker.internal.key\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/docker-compose.yaml"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 4,
                  "endLine": 41,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  http-echo:\n    image: jmalloc/echo-server:0.3.6\n    platform: linux/${ARCH:-amd64}\n    hostname: http-echo\n\n  # idp-proxy is a proxy that will be used to forward traffic to the external authorization server\n  # Set the OIDC config `proxy_url` to `http://idp-proxy:9000` in the `authservice` config to use this proxy.\n",
                    "rendered": {
                      "text": "  http-echo:\n    image: jmalloc/echo-server:0.3.6\n    platform: linux/${ARCH:-amd64}\n    hostname: http-echo\n\n  # idp-proxy is a proxy that will be used to forward traffic to the external authorization server\n  # Set the OIDC config `proxy_url` to `http://idp-proxy:9000` in the `authservice` config to use this proxy.\n",
                      "markdown": "`  http-echo:\n    image: jmalloc/echo-server:0.3.6\n    platform: linux/${ARCH:-amd64}\n    hostname: http-echo\n\n  # idp-proxy is a proxy that will be used to forward traffic to the external authorization server\n  # Set the OIDC config `proxy_url` to `http://idp-proxy:9000` in the `authservice` config to use this proxy.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/docker-compose.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/envoy-config.yaml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 20,
                  "endLine": 62,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                tls_certificates:\n                  - certificate_chain:\n                      filename: /etc/envoy/certs/host.docker.internal.crt\n                    private_key:\n                      filename: /etc/envoy/certs/host.docker.internal.key\n                validation_context:\n                  trusted_ca:\n",
                    "rendered": {
                      "text": "                tls_certificates:\n                  - certificate_chain:\n                      filename: /etc/envoy/certs/host.docker.internal.crt\n                    private_key:\n                      filename: /etc/envoy/certs/host.docker.internal.key\n                validation_context:\n                  trusted_ca:\n",
                      "markdown": "`                tls_certificates:\n                  - certificate_chain:\n                      filename: /etc/envoy/certs/host.docker.internal.crt\n                    private_key:\n                      filename: /etc/envoy/certs/host.docker.internal.key\n                validation_context:\n                  trusted_ca:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/envoy-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 20,
                  "endLine": 223,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tt.Run(\"request after logout requires login again\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"request after logout requires login again\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\n\tt.Run(\"request after logout requires login again\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 20,
                  "endLine": 204,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tt.Run(\"logout\", func(t *testing.T) {\n\t\t// Logout\n\t\tres, err := client.Get(testURL + \"/logout\")\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the session logout\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"logout\", func(t *testing.T) {\n\t\t// Logout\n\t\tres, err := client.Get(testURL + \"/logout\")\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the session logout\n",
                      "markdown": "`\n\tt.Run(\"logout\", func(t *testing.T) {\n\t\t// Logout\n\t\tres, err := client.Get(testURL + \"/logout\")\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the session logout\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 20,
                  "endLine": 192,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t})\n\n\tt.Run(\"second request works without login redirect\", func(t *testing.T) {\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t})\n\n\tt.Run(\"second request works without login redirect\", func(t *testing.T) {\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t})\n\n\tt.Run(\"second request works without login redirect\", func(t *testing.T) {\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 20,
                  "endLine": 174,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tt.Run(\"first request requires login\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\n\tt.Run(\"first request requires login\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\n\tt.Run(\"first request requires login\", func(t *testing.T) {\n\t\t// Send a request to the test server. It will be redirected to the IdP login page\n\t\tres, err := client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 19,
                  "endLine": 151,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\ttime.Sleep(10 * time.Second)\n\n\tt.Run(\"request with expired tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                    "rendered": {
                      "text": "\ttime.Sleep(10 * time.Second)\n\n\tt.Run(\"request with expired tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                      "markdown": "`\ttime.Sleep(10 * time.Second)\n\n\tt.Run(\"request with expired tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 19,
                  "endLine": 138,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t// Let's perform a request now and after 10 seconds to verify that the access token is refreshed\n\n\tt.Run(\"request with same tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                    "rendered": {
                      "text": "\t// Let's perform a request now and after 10 seconds to verify that the access token is refreshed\n\n\tt.Run(\"request with same tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n",
                      "markdown": "`\t// Let's perform a request now and after 10 seconds to verify that the access token is refreshed\n\n\tt.Run(\"request with same tokens\", func(t *testing.T) {\n\t\tres, err = client.Get(testURL)\n\t\trequire.NoError(t, err)\n\n\t\tbody, err = io.ReadAll(res.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 19,
                  "endLine": 118,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 19,
                  "endLine": 91,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n",
                      "markdown": "`\trequire.NoError(t, err)\n\n\t// Send a request to the test server. It will be redirected to the IdP login page\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\n\t// Parse the response body to get the URL where the login page would post the user-entered credentials\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 18,
                  "endLine": 73,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\trequire.NoError(t, docker.StartDockerService(idpProxyService))\n\trequire.NoError(t, docker.WaitForDockerService(idpProxyService, e2e.DockerServiceContainerUp, 10*time.Second, 500*time.Millisecond))\n\n\tres, err = client.Get(testURL)\n\trequire.NoError(t, err)\n\t// As this is the first request with no kind of session, the client is redirected to the IdP login page.\n\t// Assume this redirect as enough to consider the test successful and relay the details into the TestOIDC test.\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, docker.StartDockerService(idpProxyService))\n\trequire.NoError(t, docker.WaitForDockerService(idpProxyService, e2e.DockerServiceContainerUp, 10*time.Second, 500*time.Millisecond))\n\n\tres, err = client.Get(testURL)\n\trequire.NoError(t, err)\n\t// As this is the first request with no kind of session, the client is redirected to the IdP login page.\n\t// Assume this redirect as enough to consider the test successful and relay the details into the TestOIDC test.\n",
                      "markdown": "`\trequire.NoError(t, docker.StartDockerService(idpProxyService))\n\trequire.NoError(t, docker.WaitForDockerService(idpProxyService, e2e.DockerServiceContainerUp, 10*time.Second, 500*time.Millisecond))\n\n\tres, err = client.Get(testURL)\n\trequire.NoError(t, err)\n\t// As this is the first request with no kind of session, the client is redirected to the IdP login page.\n\t// Assume this redirect as enough to consider the test successful and relay the details into the TestOIDC test.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 65,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\trequire.NoError(t, docker.StopDockerService(idpProxyService))\n\trequire.NoError(t, docker.WaitForDockerService(idpProxyService, e2e.DockerServiceExited, 10*time.Second, 500*time.Millisecond))\n\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\trequire.Equal(t, http.StatusForbidden, res.StatusCode)\n\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, docker.StopDockerService(idpProxyService))\n\trequire.NoError(t, docker.WaitForDockerService(idpProxyService, e2e.DockerServiceExited, 10*time.Second, 500*time.Millisecond))\n\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\trequire.Equal(t, http.StatusForbidden, res.StatusCode)\n\n",
                      "markdown": "`\trequire.NoError(t, docker.StopDockerService(idpProxyService))\n\trequire.NoError(t, docker.WaitForDockerService(idpProxyService, e2e.DockerServiceExited, 10*time.Second, 500*time.Millisecond))\n\n\tres, err := client.Get(testURL)\n\trequire.NoError(t, err)\n\trequire.Equal(t, http.StatusForbidden, res.StatusCode)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 78,
                  "endLine": 230,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 67,
                  "endLine": 230,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 78,
                  "endLine": 181,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 67,
                  "endLine": 181,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\t\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\t\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\t\trequire.NoError(t, err)\n\n\t\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 77,
                  "endLine": 125,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 66,
                  "endLine": 125,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 77,
                  "endLine": 98,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 66,
                  "endLine": 98,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n",
                      "markdown": "`\trequire.NoError(t, client.ParseLoginForm(res.Body, keyCloakLoginFormID))\n\n\t// Submit the login form to the IdP. This will authenticate and redirect back to the application\n\tres, err = client.Login(map[string]string{\"username\": username, \"password\": password, \"credentialId\": \"\"})\n\trequire.NoError(t, err)\n\n\t// Verify that we get the expected response from the application\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tkeyCloakLoginFormID = \"kc-form-login\"\n\ttestCAFile          = \"certs/ca.crt\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nvar (\n",
                    "rendered": {
                      "text": "\tkeyCloakLoginFormID = \"kc-form-login\"\n\ttestCAFile          = \"certs/ca.crt\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nvar (\n",
                      "markdown": "`\tkeyCloakLoginFormID = \"kc-form-login\"\n\ttestCAFile          = \"certs/ca.crt\"\n\tusername            = \"authservice\"\n\tpassword            = \"authservice\"\n)\n\nvar (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/keycloak_test.go"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t)\n\trequire.NoError(t, err)\n\n\tdocker := e2e.NewDockerCompose(e2e.WithDockerComposeLogFunc(t.Log))\n\n\t// Stop the IDP proxy and verify that the request is rejected\n\trequire.NoError(t, docker.StopDockerService(idpProxyService))\n",
                    "rendered": {
                      "text": "\t)\n\trequire.NoError(t, err)\n\n\tdocker := e2e.NewDockerCompose(e2e.WithDockerComposeLogFunc(t.Log))\n\n\t// Stop the IDP proxy and verify that the request is rejected\n\trequire.NoError(t, docker.StopDockerService(idpProxyService))\n",
                      "markdown": "`\t)\n\trequire.NoError(t, err)\n\n\tdocker := e2e.NewDockerCompose(e2e.WithDockerComposeLogFunc(t.Log))\n\n\t// Stop the IDP proxy and verify that the request is rejected\n\trequire.NoError(t, docker.StopDockerService(idpProxyService))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/README.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 47,
                  "endLine": 32,
                  "endColumn": 55,
                  "snippet": {
                    "text": "The setup is performed in the [setup-keycloak.sh](setup-keycloak.sh) script, which  configures the default\n`master` realm with:\n\n* A user named `authservice` with a predefined password.\n* A client named `authservice` with a predefined secret.\n\nThe user and client will be used in the e2e tests to verify the entire Authorization Code flow.\n",
                    "rendered": {
                      "text": "The setup is performed in the [setup-keycloak.sh](setup-keycloak.sh) script, which  configures the default\n`master` realm with:\n\n* A user named `authservice` with a predefined password.\n* A client named `authservice` with a predefined secret.\n\nThe user and client will be used in the e2e tests to verify the entire Authorization Code flow.\n",
                      "markdown": "`The setup is performed in the [setup-keycloak.sh](setup-keycloak.sh) script, which  configures the default\n`master` realm with:\n\n* A user named `authservice` with a predefined password.\n* A client named `authservice` with a predefined secret.\n\nThe user and client will be used in the e2e tests to verify the entire Authorization Code flow.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 51,
                  "endLine": 4,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# Keycloak e2e tests\n\nThe Keycloak e2e test suite contains tests that use the Keycloak OIDC provider. A\nKeycloak instance is deployed and configured in the Docker environment as the backend\nOIDC provider. The following diagram shows the setup:\n\n```mermaid\n",
                    "rendered": {
                      "text": "# Keycloak e2e tests\n\nThe Keycloak e2e test suite contains tests that use the Keycloak OIDC provider. A\nKeycloak instance is deployed and configured in the Docker environment as the backend\nOIDC provider. The following diagram shows the setup:\n\n```mermaid\n",
                      "markdown": "`# Keycloak e2e tests\n\nThe Keycloak e2e test suite contains tests that use the Keycloak OIDC provider. A\nKeycloak instance is deployed and configured in the Docker environment as the backend\nOIDC provider. The following diagram shows the setup:\n\n```mermaid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/idp-proxy-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/keycloak/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-certs.mk"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 12,
                  "endLine": 17,
                  "snippet": {
                    "text": "# limitations under the License.\n\nCERTS_DIR := certs\nSHELL     := bash\n\n$(CERTS_DIR):\n\t@mkdir -p $(CERTS_DIR)\n\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\nCERTS_DIR := certs\nSHELL     := bash\n\n$(CERTS_DIR):\n\t@mkdir -p $(CERTS_DIR)\n\n",
                      "markdown": "`# limitations under the License.\n\nCERTS_DIR := certs\nSHELL     := bash\n\n$(CERTS_DIR):\n\t@mkdir -p $(CERTS_DIR)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-certs.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-certs.mk"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 12,
                  "endLine": 17,
                  "snippet": {
                    "text": "# limitations under the License.\n\nCERTS_DIR := certs\nSHELL     := bash\n\n$(CERTS_DIR):\n\t@mkdir -p $(CERTS_DIR)\n\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\nCERTS_DIR := certs\nSHELL     := bash\n\n$(CERTS_DIR):\n\t@mkdir -p $(CERTS_DIR)\n\n",
                      "markdown": "`# limitations under the License.\n\nCERTS_DIR := certs\nSHELL     := bash\n\n$(CERTS_DIR):\n\t@mkdir -p $(CERTS_DIR)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-k8s.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-k8s.mk"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 15,
                  "endLine": 20,
                  "endColumn": 20,
                  "snippet": {
                    "text": "# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\nROOT := $(shell git rev-parse --show-toplevel)\n\ninclude $(ROOT)/env.mk\n\n",
                    "rendered": {
                      "text": "# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\nROOT := $(shell git rev-parse --show-toplevel)\n\ninclude $(ROOT)/env.mk\n\n",
                      "markdown": "`# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\nROOT := $(shell git rev-parse --show-toplevel)\n\ninclude $(ROOT)/env.mk\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/k8s_suite.go"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 5,
                  "endLine": 135,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tdec := yaml.NewDecoder(bytes.NewReader(content))\n\n\tfor {\n\t\tvar node yaml.Node\n\t\terr := dec.Decode(&node)\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tdec := yaml.NewDecoder(bytes.NewReader(content))\n\n\tfor {\n\t\tvar node yaml.Node\n\t\terr := dec.Decode(&node)\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n",
                      "markdown": "`\tdec := yaml.NewDecoder(bytes.NewReader(content))\n\n\tfor {\n\t\tvar node yaml.Node\n\t\terr := dec.Decode(&node)\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n\n\tto := time.NewTimer(timeout)\n\ttk := time.NewTicker(tick)\n",
                    "rendered": {
                      "text": "// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n\n\tto := time.NewTimer(timeout)\n\ttk := time.NewTicker(tick)\n",
                      "markdown": "`// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n\n\tto := time.NewTimer(timeout)\n\ttk := time.NewTicker(tick)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 41,
                  "endLine": 97,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\tfor {\n\t\tselect {\n\t\tcase <-to.C:\n\t\t\treturn fmt.Errorf(\"timeout waiting for service %s to match: %s\", name, status)\n\t\tcase <-tk.C:\n\t\t\tout, err := cmd.CombinedOutput()\n\t\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\tfor {\n\t\tselect {\n\t\tcase <-to.C:\n\t\t\treturn fmt.Errorf(\"timeout waiting for service %s to match: %s\", name, status)\n\t\tcase <-tk.C:\n\t\t\tout, err := cmd.CombinedOutput()\n\t\t\tif err != nil {\n",
                      "markdown": "`\tfor {\n\t\tselect {\n\t\tcase <-to.C:\n\t\t\treturn fmt.Errorf(\"timeout waiting for service %s to match: %s\", name, status)\n\t\tcase <-tk.C:\n\t\t\tout, err := cmd.CombinedOutput()\n\t\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 19,
                  "endLine": 86,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n\n\tto := time.NewTimer(timeout)\n",
                    "rendered": {
                      "text": "\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n\n\tto := time.NewTimer(timeout)\n",
                      "markdown": "`\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n\n\tto := time.NewTimer(timeout)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 81,
                  "endLine": 84,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\treturn nil\n}\n\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n",
                    "rendered": {
                      "text": "\treturn nil\n}\n\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n",
                      "markdown": "`\treturn nil\n}\n\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 35,
                  "endLine": 84,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\treturn nil\n}\n\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n",
                    "rendered": {
                      "text": "\treturn nil\n}\n\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n",
                      "markdown": "`\treturn nil\n}\n\n// WaitForDockerService waits for a docker service to match a status in the given timeout or returns an error\nfunc (d DockerCompose) WaitForDockerService(name string, status DockerServiceStatus, timeout, tick time.Duration) error {\n\td.log(\"Waiting for docker service\", name, \"to match\", status)\n\tcmd := exec.Command(\"docker\", \"compose\", \"ps\", \"-a\", \"--format\", \"{{ .Status }}\", name)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 16,
                  "endLine": 76,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n// StopDockerService stops a docker service or returns an error\nfunc (d DockerCompose) StopDockerService(name string) error {\n\td.log(\"Stopping docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"stop\", name).CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w: %s\", err, string(out))\n",
                    "rendered": {
                      "text": "\n// StopDockerService stops a docker service or returns an error\nfunc (d DockerCompose) StopDockerService(name string) error {\n\td.log(\"Stopping docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"stop\", name).CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w: %s\", err, string(out))\n",
                      "markdown": "`\n// StopDockerService stops a docker service or returns an error\nfunc (d DockerCompose) StopDockerService(name string) error {\n\td.log(\"Stopping docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"stop\", name).CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w: %s\", err, string(out))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 28,
                  "endLine": 74,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\treturn nil\n}\n\n// StopDockerService stops a docker service or returns an error\nfunc (d DockerCompose) StopDockerService(name string) error {\n\td.log(\"Stopping docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"stop\", name).CombinedOutput()\n",
                    "rendered": {
                      "text": "\treturn nil\n}\n\n// StopDockerService stops a docker service or returns an error\nfunc (d DockerCompose) StopDockerService(name string) error {\n\td.log(\"Stopping docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"stop\", name).CombinedOutput()\n",
                      "markdown": "`\treturn nil\n}\n\n// StopDockerService stops a docker service or returns an error\nfunc (d DockerCompose) StopDockerService(name string) error {\n\td.log(\"Stopping docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"stop\", name).CombinedOutput()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 16,
                  "endLine": 66,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n// StartDockerService starts a docker service or returns an error\nfunc (d DockerCompose) StartDockerService(name string) error {\n\td.log(\"Starting docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"start\", name).CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w: %s\", err, string(out))\n",
                    "rendered": {
                      "text": "\n// StartDockerService starts a docker service or returns an error\nfunc (d DockerCompose) StartDockerService(name string) error {\n\td.log(\"Starting docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"start\", name).CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w: %s\", err, string(out))\n",
                      "markdown": "`\n// StartDockerService starts a docker service or returns an error\nfunc (d DockerCompose) StartDockerService(name string) error {\n\td.log(\"Starting docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"start\", name).CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"%w: %s\", err, string(out))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 30,
                  "endLine": 64,
                  "endColumn": 38,
                  "snippet": {
                    "text": "// NoopLogFunc is a log function that does nothing\nfunc NoopLogFunc(...any) {}\n\n// StartDockerService starts a docker service or returns an error\nfunc (d DockerCompose) StartDockerService(name string) error {\n\td.log(\"Starting docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"start\", name).CombinedOutput()\n",
                    "rendered": {
                      "text": "// NoopLogFunc is a log function that does nothing\nfunc NoopLogFunc(...any) {}\n\n// StartDockerService starts a docker service or returns an error\nfunc (d DockerCompose) StartDockerService(name string) error {\n\td.log(\"Starting docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"start\", name).CombinedOutput()\n",
                      "markdown": "`// NoopLogFunc is a log function that does nothing\nfunc NoopLogFunc(...any) {}\n\n// StartDockerService starts a docker service or returns an error\nfunc (d DockerCompose) StartDockerService(name string) error {\n\td.log(\"Starting docker service\", name)\n\tout, err := exec.Command(\"docker\", \"compose\", \"start\", name).CombinedOutput()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/docker.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 46,
                  "endLine": 34,
                  "endColumn": 54,
                  "snippet": {
                    "text": ")\n\ntype (\n\t// DockerCompose is a helper to interact with docker compose command\n\tDockerCompose struct {\n\t\tlog func(...any)\n\t}\n",
                    "rendered": {
                      "text": ")\n\ntype (\n\t// DockerCompose is a helper to interact with docker compose command\n\tDockerCompose struct {\n\t\tlog func(...any)\n\t}\n",
                      "markdown": "`)\n\ntype (\n\t// DockerCompose is a helper to interact with docker compose command\n\tDockerCompose struct {\n\t\tlog func(...any)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-docker.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-docker.mk"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 15,
                  "endLine": 20,
                  "endColumn": 20,
                  "snippet": {
                    "text": "# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\nROOT := $(shell git rev-parse --show-toplevel)\n\ninclude $(ROOT)/env.mk # Load common variables\n-include $(ROOT)/.makerc  # Pick up any local overrides.\n",
                    "rendered": {
                      "text": "# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\nROOT := $(shell git rev-parse --show-toplevel)\n\ninclude $(ROOT)/env.mk # Load common variables\n-include $(ROOT)/.makerc  # Pick up any local overrides.\n",
                      "markdown": "`# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\nROOT := $(shell git rev-parse --show-toplevel)\n\ninclude $(ROOT)/env.mk # Load common variables\n-include $(ROOT)/.makerc  # Pick up any local overrides.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/suite-docker.mk"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# limitations under the License.\n\n# This file contains the common e2e targets and variables for e2e suites that use\n# Docker compose to spin up the environment.\n# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\n# This file contains the common e2e targets and variables for e2e suites that use\n# Docker compose to spin up the environment.\n# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\n",
                      "markdown": "`# limitations under the License.\n\n# This file contains the common e2e targets and variables for e2e suites that use\n# Docker compose to spin up the environment.\n# When adding a suite, create a new directory under e2e/ and add a Makefile that\n# includes this file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/e2e/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/.github/codecov.yml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 22,
                  "endLine": 613,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\treturn false, codes.InvalidArgument\n\t}\n\n\tjwtSet, err := o.jwks.Get(ctx, o.config)\n\tif err != nil {\n\t\tlog.Error(\"error fetching jwks\", err)\n\t\treturn false, codes.Internal\n",
                    "rendered": {
                      "text": "\t\treturn false, codes.InvalidArgument\n\t}\n\n\tjwtSet, err := o.jwks.Get(ctx, o.config)\n\tif err != nil {\n\t\tlog.Error(\"error fetching jwks\", err)\n\t\treturn false, codes.Internal\n",
                      "markdown": "`\t\treturn false, codes.InvalidArgument\n\t}\n\n\tjwtSet, err := o.jwks.Get(ctx, o.config)\n\tif err != nil {\n\t\tlog.Error(\"error fetching jwks\", err)\n\t\treturn false, codes.Internal\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 25,
                  "endLine": 587,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\treturn false, codes.Internal\n\t}\n\n\toidcNonce, ok := idToken.Get(\"nonce\")\n\tif !ok && isNonceRequired {\n\t\tlog.Info(\"id token does not have nonce claim\")\n\t\treturn false, codes.InvalidArgument\n",
                    "rendered": {
                      "text": "\t\treturn false, codes.Internal\n\t}\n\n\toidcNonce, ok := idToken.Get(\"nonce\")\n\tif !ok && isNonceRequired {\n\t\tlog.Info(\"id token does not have nonce claim\")\n\t\treturn false, codes.InvalidArgument\n",
                      "markdown": "`\t\treturn false, codes.Internal\n\t}\n\n\toidcNonce, ok := idToken.Get(\"nonce\")\n\tif !ok && isNonceRequired {\n\t\tlog.Info(\"id token does not have nonce claim\")\n\t\treturn false, codes.InvalidArgument\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 20,
                  "endLine": 401,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n// refreshToken retrieves new tokens from the Identity Provider using the given refresh token.\nfunc (o *oidcHandler) refreshToken(ctx context.Context, log telemetry.Logger, expiredTokens *oidc.TokenResponse, token, sessionID string) *oidc.TokenResponse {\n\tstore := o.sessions.Get(o.config)\n\n\tform := url.Values{\n\t\t\"grant_type\":    []string{\"refresh_token\"},\n",
                    "rendered": {
                      "text": "\n// refreshToken retrieves new tokens from the Identity Provider using the given refresh token.\nfunc (o *oidcHandler) refreshToken(ctx context.Context, log telemetry.Logger, expiredTokens *oidc.TokenResponse, token, sessionID string) *oidc.TokenResponse {\n\tstore := o.sessions.Get(o.config)\n\n\tform := url.Values{\n\t\t\"grant_type\":    []string{\"refresh_token\"},\n",
                      "markdown": "`\n// refreshToken retrieves new tokens from the Identity Provider using the given refresh token.\nfunc (o *oidcHandler) refreshToken(ctx context.Context, log telemetry.Logger, expiredTokens *oidc.TokenResponse, token, sessionID string) *oidc.TokenResponse {\n\tstore := o.sessions.Get(o.config)\n\n\tform := url.Values{\n\t\t\"grant_type\":    []string{\"refresh_token\"},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 27,
                  "endLine": 304,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t}\n\n\tstateFromReq := queryParams.Get(\"state\")\n\tcodeFromReq := queryParams.Get(\"code\")\n\tif stateFromReq == \"\" || codeFromReq == \"\" {\n\t\tlog.Info(\"form data is invalid, missing state or code\", \"state\", stateFromReq, \"code\", codeFromReq)\n\t\tsetDenyResponse(resp, newDenyResponse(), codes.InvalidArgument)\n",
                    "rendered": {
                      "text": "\t}\n\n\tstateFromReq := queryParams.Get(\"state\")\n\tcodeFromReq := queryParams.Get(\"code\")\n\tif stateFromReq == \"\" || codeFromReq == \"\" {\n\t\tlog.Info(\"form data is invalid, missing state or code\", \"state\", stateFromReq, \"code\", codeFromReq)\n\t\tsetDenyResponse(resp, newDenyResponse(), codes.InvalidArgument)\n",
                      "markdown": "`\t}\n\n\tstateFromReq := queryParams.Get(\"state\")\n\tcodeFromReq := queryParams.Get(\"code\")\n\tif stateFromReq == \"\" || codeFromReq == \"\" {\n\t\tlog.Info(\"form data is invalid, missing state or code\", \"state\", stateFromReq, \"code\", codeFromReq)\n\t\tsetDenyResponse(resp, newDenyResponse(), codes.InvalidArgument)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 28,
                  "endLine": 303,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tstateFromReq := queryParams.Get(\"state\")\n\tcodeFromReq := queryParams.Get(\"code\")\n\tif stateFromReq == \"\" || codeFromReq == \"\" {\n\t\tlog.Info(\"form data is invalid, missing state or code\", \"state\", stateFromReq, \"code\", codeFromReq)\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tstateFromReq := queryParams.Get(\"state\")\n\tcodeFromReq := queryParams.Get(\"code\")\n\tif stateFromReq == \"\" || codeFromReq == \"\" {\n\t\tlog.Info(\"form data is invalid, missing state or code\", \"state\", stateFromReq, \"code\", codeFromReq)\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tstateFromReq := queryParams.Get(\"state\")\n\tcodeFromReq := queryParams.Get(\"code\")\n\tif stateFromReq == \"\" || codeFromReq == \"\" {\n\t\tlog.Info(\"form data is invalid, missing state or code\", \"state\", stateFromReq, \"code\", codeFromReq)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 20,
                  "endLine": 288,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n// retrieveTokens retrieves the tokens from the Identity Provider and redirects the user back to the originally requested URL.\nfunc (o *oidcHandler) retrieveTokens(ctx context.Context, log telemetry.Logger, req *envoy.CheckRequest, resp *envoy.CheckResponse, sessionID string) {\n\tstore := o.sessions.Get(o.config)\n\n\t_, query, _ := inthttp.GetPathQueryFragment(req.GetAttributes().GetRequest().GetHttp().GetPath())\n\tqueryParams, err := url.ParseQuery(query)\n",
                    "rendered": {
                      "text": "\n// retrieveTokens retrieves the tokens from the Identity Provider and redirects the user back to the originally requested URL.\nfunc (o *oidcHandler) retrieveTokens(ctx context.Context, log telemetry.Logger, req *envoy.CheckRequest, resp *envoy.CheckResponse, sessionID string) {\n\tstore := o.sessions.Get(o.config)\n\n\t_, query, _ := inthttp.GetPathQueryFragment(req.GetAttributes().GetRequest().GetHttp().GetPath())\n\tqueryParams, err := url.ParseQuery(query)\n",
                      "markdown": "`\n// retrieveTokens retrieves the tokens from the Identity Provider and redirects the user back to the originally requested URL.\nfunc (o *oidcHandler) retrieveTokens(ctx context.Context, log telemetry.Logger, req *envoy.CheckRequest, resp *envoy.CheckResponse, sessionID string) {\n\tstore := o.sessions.Get(o.config)\n\n\t_, query, _ := inthttp.GetPathQueryFragment(req.GetAttributes().GetRequest().GetHttp().GetPath())\n\tqueryParams, err := url.ParseQuery(query)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 20,
                  "endLine": 230,
                  "endColumn": 25,
                  "snippet": {
                    "text": "func (o *oidcHandler) redirectToIDP(ctx context.Context, log telemetry.Logger,\n\tresp *envoy.CheckResponse, httpRequest *envoy.AttributeContext_HttpRequest, oldSessionID string) {\n\n\tstore := o.sessions.Get(o.config)\n\tif oldSessionID != \"\" {\n\t\t// remove old session and regenerate session_id to prevent session fixation attacks\n\t\tif err := store.RemoveSession(ctx, oldSessionID); err != nil {\n",
                    "rendered": {
                      "text": "func (o *oidcHandler) redirectToIDP(ctx context.Context, log telemetry.Logger,\n\tresp *envoy.CheckResponse, httpRequest *envoy.AttributeContext_HttpRequest, oldSessionID string) {\n\n\tstore := o.sessions.Get(o.config)\n\tif oldSessionID != \"\" {\n\t\t// remove old session and regenerate session_id to prevent session fixation attacks\n\t\tif err := store.RemoveSession(ctx, oldSessionID); err != nil {\n",
                      "markdown": "`func (o *oidcHandler) redirectToIDP(ctx context.Context, log telemetry.Logger,\n\tresp *envoy.CheckResponse, httpRequest *envoy.AttributeContext_HttpRequest, oldSessionID string) {\n\n\tstore := o.sessions.Get(o.config)\n\tif oldSessionID != \"\" {\n\t\t// remove old session and regenerate session_id to prevent session fixation attacks\n\t\tif err := store.RemoveSession(ctx, oldSessionID); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 20,
                  "endLine": 162,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\tlog.Debug(\"attempting session retrieval\")\n\n\tstore := o.sessions.Get(o.config)\n\ttokenResponse, err := store.GetTokenResponse(ctx, sessionID)\n\tif err != nil {\n\t\tlog.Error(\"error retrieving tokens from session store\", err)\n",
                    "rendered": {
                      "text": "\n\tlog.Debug(\"attempting session retrieval\")\n\n\tstore := o.sessions.Get(o.config)\n\ttokenResponse, err := store.GetTokenResponse(ctx, sessionID)\n\tif err != nil {\n\t\tlog.Error(\"error retrieving tokens from session store\", err)\n",
                      "markdown": "`\n\tlog.Debug(\"attempting session retrieval\")\n\n\tstore := o.sessions.Get(o.config)\n\ttokenResponse, err := store.GetTokenResponse(ctx, sessionID)\n\tif err != nil {\n\t\tlog.Error(\"error retrieving tokens from session store\", err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 22,
                  "endLine": 123,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\tlog.Info(\"handling logout request\")\n\t\tif sessionID != \"\" {\n\t\t\tlog.Info(\"removing session from session store during logout\", \"session-id\", sessionID)\n\t\t\tstore := o.sessions.Get(o.config)\n\t\t\tif err := store.RemoveSession(ctx, sessionID); err != nil {\n\t\t\t\tlog.Error(\"error removing session\", err)\n\t\t\t\tsetDenyResponse(resp, newSessionErrorResponse(), codes.Unauthenticated)\n",
                    "rendered": {
                      "text": "\t\tlog.Info(\"handling logout request\")\n\t\tif sessionID != \"\" {\n\t\t\tlog.Info(\"removing session from session store during logout\", \"session-id\", sessionID)\n\t\t\tstore := o.sessions.Get(o.config)\n\t\t\tif err := store.RemoveSession(ctx, sessionID); err != nil {\n\t\t\t\tlog.Error(\"error removing session\", err)\n\t\t\t\tsetDenyResponse(resp, newSessionErrorResponse(), codes.Unauthenticated)\n",
                      "markdown": "`\t\tlog.Info(\"handling logout request\")\n\t\tif sessionID != \"\" {\n\t\t\tlog.Info(\"removing session from session store during logout\", \"session-id\", sessionID)\n\t\t\tstore := o.sessions.Get(o.config)\n\t\t\tif err := store.RemoveSession(ctx, sessionID); err != nil {\n\t\t\t\tlog.Error(\"error removing session\", err)\n\t\t\t\tsetDenyResponse(resp, newSessionErrorResponse(), codes.Unauthenticated)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 784,
                  "startColumn": 3,
                  "endLine": 784,
                  "endColumn": 12,
                  "snippet": {
                    "text": "// getCookieDirectives returns the directives to use in the Set-Cookie header depending on the timeout.\nfunc getCookieDirectives(timeout time.Duration) []string {\n\tdirectives := []string{inthttp.HeaderSetCookieHTTPOnly, inthttp.HeaderSetCookieSecure, inthttp.HeaderSetCookieSameSiteLax, \"Path=/\"}\n\tif timeout >= 0 {\n\t\tdirectives = append(directives, fmt.Sprintf(\"%s=%d\", inthttp.HeaderSetCookieMaxAge, int(timeout.Seconds())))\n\t}\n\treturn directives\n",
                    "rendered": {
                      "text": "// getCookieDirectives returns the directives to use in the Set-Cookie header depending on the timeout.\nfunc getCookieDirectives(timeout time.Duration) []string {\n\tdirectives := []string{inthttp.HeaderSetCookieHTTPOnly, inthttp.HeaderSetCookieSecure, inthttp.HeaderSetCookieSameSiteLax, \"Path=/\"}\n\tif timeout >= 0 {\n\t\tdirectives = append(directives, fmt.Sprintf(\"%s=%d\", inthttp.HeaderSetCookieMaxAge, int(timeout.Seconds())))\n\t}\n\treturn directives\n",
                      "markdown": "`// getCookieDirectives returns the directives to use in the Set-Cookie header depending on the timeout.\nfunc getCookieDirectives(timeout time.Duration) []string {\n\tdirectives := []string{inthttp.HeaderSetCookieHTTPOnly, inthttp.HeaderSetCookieSecure, inthttp.HeaderSetCookieSameSiteLax, \"Path=/\"}\n\tif timeout >= 0 {\n\t\tdirectives = append(directives, fmt.Sprintf(\"%s=%d\", inthttp.HeaderSetCookieMaxAge, int(timeout.Seconds())))\n\t}\n\treturn directives\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 60,
                  "endLine": 776,
                  "endColumn": 69,
                  "snippet": {
                    "text": "}\n\n// generateSetCookieHeader generates the Set-Cookie header value with the given cookie name, value, and timeout.\nfunc generateSetCookieHeader(cookieName, cookieValue string, timeout time.Duration) string {\n\tdirectives := getCookieDirectives(timeout)\n\treturn inthttp.EncodeCookieHeader(cookieName, cookieValue, directives)\n}\n",
                    "rendered": {
                      "text": "}\n\n// generateSetCookieHeader generates the Set-Cookie header value with the given cookie name, value, and timeout.\nfunc generateSetCookieHeader(cookieName, cookieValue string, timeout time.Duration) string {\n\tdirectives := getCookieDirectives(timeout)\n\treturn inthttp.EncodeCookieHeader(cookieName, cookieValue, directives)\n}\n",
                      "markdown": "`}\n\n// generateSetCookieHeader generates the Set-Cookie header value with the given cookie name, value, and timeout.\nfunc generateSetCookieHeader(cookieName, cookieValue string, timeout time.Duration) string {\n\tdirectives := getCookieDirectives(timeout)\n\treturn inthttp.EncodeCookieHeader(cookieName, cookieValue, directives)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 65,
                  "endLine": 459,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\n\tif bodyTokens.ExpiresIn > 0 {\n\t\tlog.Debug(\"updating access token expiration\")\n\t\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t\t// have taken to retrieve the token.\n\t\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\t\tnewTokenResponse.AccessTokenExpiresAt = o.clock.Now().Add(expiresIn)\n",
                    "rendered": {
                      "text": "\n\tif bodyTokens.ExpiresIn > 0 {\n\t\tlog.Debug(\"updating access token expiration\")\n\t\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t\t// have taken to retrieve the token.\n\t\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\t\tnewTokenResponse.AccessTokenExpiresAt = o.clock.Now().Add(expiresIn)\n",
                      "markdown": "`\n\tif bodyTokens.ExpiresIn > 0 {\n\t\tlog.Debug(\"updating access token expiration\")\n\t\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t\t// have taken to retrieve the token.\n\t\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\t\tnewTokenResponse.AccessTokenExpiresAt = o.clock.Now().Add(expiresIn)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 35,
                  "endLine": 459,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n\tif bodyTokens.ExpiresIn > 0 {\n\t\tlog.Debug(\"updating access token expiration\")\n\t\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t\t// have taken to retrieve the token.\n\t\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\t\tnewTokenResponse.AccessTokenExpiresAt = o.clock.Now().Add(expiresIn)\n",
                    "rendered": {
                      "text": "\n\tif bodyTokens.ExpiresIn > 0 {\n\t\tlog.Debug(\"updating access token expiration\")\n\t\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t\t// have taken to retrieve the token.\n\t\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\t\tnewTokenResponse.AccessTokenExpiresAt = o.clock.Now().Add(expiresIn)\n",
                      "markdown": "`\n\tif bodyTokens.ExpiresIn > 0 {\n\t\tlog.Debug(\"updating access token expiration\")\n\t\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t\t// have taken to retrieve the token.\n\t\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\t\tnewTokenResponse.AccessTokenExpiresAt = o.clock.Now().Add(expiresIn)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 64,
                  "endLine": 373,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t// have taken to retrieve the token.\n\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\taccessTokenExpiration := o.clock.Now().Add(expiresIn)\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t// have taken to retrieve the token.\n\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\taccessTokenExpiration := o.clock.Now().Add(expiresIn)\n",
                      "markdown": "`\t\treturn\n\t}\n\n\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t// have taken to retrieve the token.\n\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\taccessTokenExpiration := o.clock.Now().Add(expiresIn)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/authz/oidc.go"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 34,
                  "endLine": 373,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t// have taken to retrieve the token.\n\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\taccessTokenExpiration := o.clock.Now().Add(expiresIn)\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t// have taken to retrieve the token.\n\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\taccessTokenExpiration := o.clock.Now().Add(expiresIn)\n",
                      "markdown": "`\t\treturn\n\t}\n\n\t// Knock 5 seconds off the expiry time to take into account the time it may\n\t// have taken to retrieve the token.\n\texpiresIn := time.Duration(bodyTokens.ExpiresIn)*time.Second - 5\n\taccessTokenExpiration := o.clock.Now().Add(expiresIn)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks.go"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 21,
                  "endLine": 127,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\tlog.Debug(\"fetching JWKS\", \"jwks\", jwksConfig.JwksUri)\n\n\tjwks, err := j.cache.Get(ctx, jwksConfig.JwksUri)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"%w: %v\", ErrJWKSFetch, err)\n\t}\n",
                    "rendered": {
                      "text": "\n\tlog.Debug(\"fetching JWKS\", \"jwks\", jwksConfig.JwksUri)\n\n\tjwks, err := j.cache.Get(ctx, jwksConfig.JwksUri)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"%w: %v\", ErrJWKSFetch, err)\n\t}\n",
                      "markdown": "`\n\tlog.Debug(\"fetching JWKS\", \"jwks\", jwksConfig.JwksUri)\n\n\tjwks, err := j.cache.Get(ctx, jwksConfig.JwksUri)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"%w: %v\", ErrJWKSFetch, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/oidc/jwks.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 31,
                  "endLine": 91,
                  "endColumn": 40,
                  "snippet": {
                    "text": "// Get the JWKS for the given OIDC configuration\nfunc (j *DefaultJWKSProvider) Get(ctx context.Context, config *oidcv1.OIDCConfig) (jwk.Set, error) {\n\tif config.GetJwksFetcher() != nil {\n\t\t<-j.started // wait until the service is fully started\n\t\treturn j.fetchDynamic(ctx, config)\n\t}\n\treturn j.fetchStatic(config.GetJwks())\n",
                    "rendered": {
                      "text": "// Get the JWKS for the given OIDC configuration\nfunc (j *DefaultJWKSProvider) Get(ctx context.Context, config *oidcv1.OIDCConfig) (jwk.Set, error) {\n\tif config.GetJwksFetcher() != nil {\n\t\t<-j.started // wait until the service is fully started\n\t\treturn j.fetchDynamic(ctx, config)\n\t}\n\treturn j.fetchStatic(config.GetJwks())\n",
                      "markdown": "`// Get the JWKS for the given OIDC configuration\nfunc (j *DefaultJWKSProvider) Get(ctx context.Context, config *oidcv1.OIDCConfig) (jwk.Set, error) {\n\tif config.GetJwksFetcher() != nil {\n\t\t<-j.started // wait until the service is fully started\n\t\treturn j.fetchDynamic(ctx, config)\n\t}\n\treturn j.fetchStatic(config.GetJwks())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http.go"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 19,
                  "endLine": 92,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n// BasicAuthHeader returns the value of the Authorization header for the given id and secret.\nfunc BasicAuthHeader(id string, secret string) string {\n\treturn \"Basic \" + base64.StdEncoding.EncodeToString([]byte(id+\":\"+secret))\n}\n\n// NewHTTPClient creates a new HTTP client with the given OIDC configuration and TLS pool.\n",
                    "rendered": {
                      "text": "\n// BasicAuthHeader returns the value of the Authorization header for the given id and secret.\nfunc BasicAuthHeader(id string, secret string) string {\n\treturn \"Basic \" + base64.StdEncoding.EncodeToString([]byte(id+\":\"+secret))\n}\n\n// NewHTTPClient creates a new HTTP client with the given OIDC configuration and TLS pool.\n",
                      "markdown": "`\n// BasicAuthHeader returns the value of the Authorization header for the given id and secret.\nfunc BasicAuthHeader(id string, secret string) string {\n\treturn \"Basic \" + base64.StdEncoding.EncodeToString([]byte(id+\":\"+secret))\n}\n\n// NewHTTPClient creates a new HTTP client with the given OIDC configuration and TLS pool.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 11,
                  "endLine": 18,
                  "endColumn": 17,
                  "snippet": {
                    "text": "package http\n\nimport (\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n",
                    "rendered": {
                      "text": "package http\n\nimport (\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n",
                      "markdown": "`package http\n\nimport (\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 63,
                  "endLine": 65,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\treturn\n}\n\n// DecodeCookiesHeader parses the value of the Cookie header to find all the cookies set.\n// It returns a map of name->value for all the found valid cookies.\nfunc DecodeCookiesHeader(headerValue string) map[string]string {\n\tcookies := make(map[string]string, 0)\n",
                    "rendered": {
                      "text": "\treturn\n}\n\n// DecodeCookiesHeader parses the value of the Cookie header to find all the cookies set.\n// It returns a map of name->value for all the found valid cookies.\nfunc DecodeCookiesHeader(headerValue string) map[string]string {\n\tcookies := make(map[string]string, 0)\n",
                      "markdown": "`\treturn\n}\n\n// DecodeCookiesHeader parses the value of the Cookie header to find all the cookies set.\n// It returns a map of name->value for all the found valid cookies.\nfunc DecodeCookiesHeader(headerValue string) map[string]string {\n\tcookies := make(map[string]string, 0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 24,
                  "endLine": 128,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n\n\tfor _, tt := range tests {\n",
                    "rendered": {
                      "text": "\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n\n\tfor _, tt := range tests {\n",
                      "markdown": "`\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n\n\tfor _, tt := range tests {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 24,
                  "endLine": 127,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n\n",
                    "rendered": {
                      "text": "\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n\n",
                      "markdown": "`\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 12,
                  "endLine": 126,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\twant       string\n\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n",
                    "rendered": {
                      "text": "\t\twant       string\n\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n",
                      "markdown": "`\t\twant       string\n\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\tid, secret string\n\t\twant       string\n\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n",
                    "rendered": {
                      "text": "\t\tid, secret string\n\t\twant       string\n\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n",
                      "markdown": "`\t\tid, secret string\n\t\twant       string\n\t}{\n\t\t{\"user\", \"password\", \"Basic dXNlcjpwYXNzd29yZA==\"},\n\t\t{\"user\", \"password with spaces\", \"Basic dXNlcjpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n\t\t{\"user with spaces\", \"password\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZA==\"},\n\t\t{\"user with spaces\", \"password with spaces\", \"Basic dXNlciB3aXRoIHNwYWNlczpwYXNzd29yZCB3aXRoIHNwYWNlcw==\"},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 16,
                  "endLine": 136,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\tgot := BasicAuthHeader(tt.id, tt.secret)\n\t\t\trequire.Equal(t, tt.want, got)\n\n\t\t\tgot2, err := base64.StdEncoding.DecodeString(tt.want[6:])\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, tt.id+\":\"+tt.secret, string(got2))\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\tgot := BasicAuthHeader(tt.id, tt.secret)\n\t\t\trequire.Equal(t, tt.want, got)\n\n\t\t\tgot2, err := base64.StdEncoding.DecodeString(tt.want[6:])\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, tt.id+\":\"+tt.secret, string(got2))\n\t\t})\n",
                      "markdown": "`\t\t\tgot := BasicAuthHeader(tt.id, tt.secret)\n\t\t\trequire.Equal(t, tt.want, got)\n\n\t\t\tgot2, err := base64.StdEncoding.DecodeString(tt.want[6:])\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, tt.id+\":\"+tt.secret, string(got2))\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 19,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"testing\"\n\n",
                    "rendered": {
                      "text": "\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"testing\"\n\n",
                      "markdown": "`\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"testing\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/http/http_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/server/authz_test.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 11,
                  "endLine": 131,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n\tconn, err := s.GRPCConn()\n\trequire.NoError(t, err)\n\tclient := envoy.NewAuthorizationClient(conn)\n\n\tok, err := client.Check(context.Background(), header(\"test\"))\n\trequire.NoError(t, err)\n",
                    "rendered": {
                      "text": "\n\tconn, err := s.GRPCConn()\n\trequire.NoError(t, err)\n\tclient := envoy.NewAuthorizationClient(conn)\n\n\tok, err := client.Check(context.Background(), header(\"test\"))\n\trequire.NoError(t, err)\n",
                      "markdown": "`\n\tconn, err := s.GRPCConn()\n\trequire.NoError(t, err)\n\tclient := envoy.NewAuthorizationClient(conn)\n\n\tok, err := client.Check(context.Background(), header(\"test\"))\n\trequire.NoError(t, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/server/authz_test.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/file_test.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 34,
                  "endLine": 87,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\twantUpdates:   []string{\"update 2\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"error reading file at start\",\n\t\t\tfileReader: newMockReader(\"test\", \"original\", errors.New(\"error reading file\")),\n\t\t\tinterval:   watcherInterval,\n\t\t\twantErr:    true,\n",
                    "rendered": {
                      "text": "\t\t\twantUpdates:   []string{\"update 2\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"error reading file at start\",\n\t\t\tfileReader: newMockReader(\"test\", \"original\", errors.New(\"error reading file\")),\n\t\t\tinterval:   watcherInterval,\n\t\t\twantErr:    true,\n",
                      "markdown": "`\t\t\twantUpdates:   []string{\"update 2\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"error reading file at start\",\n\t\t\tfileReader: newMockReader(\"test\", \"original\", errors.New(\"error reading file\")),\n\t\t\tinterval:   watcherInterval,\n\t\t\twantErr:    true,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/internal/file_test.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\twantUpdates:   []string{\"update 1\", \"update 2\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"missed update due to slow interval\",\n\t\t\tfileReader: newMockReader(\"test\", \"original\", nil),\n\t\t\tgenUpdates: func(reader *mockReader) {\n\t\t\t\treader.setData([]byte(\"update 1\")) // no waiting for the read to happen and performing next update\n",
                    "rendered": {
                      "text": "\t\t\twantUpdates:   []string{\"update 1\", \"update 2\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"missed update due to slow interval\",\n\t\t\tfileReader: newMockReader(\"test\", \"original\", nil),\n\t\t\tgenUpdates: func(reader *mockReader) {\n\t\t\t\treader.setData([]byte(\"update 1\")) // no waiting for the read to happen and performing next update\n",
                      "markdown": "`\t\t\twantUpdates:   []string{\"update 1\", \"update 2\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"missed update due to slow interval\",\n\t\t\tfileReader: newMockReader(\"test\", \"original\", nil),\n\t\t\tgenUpdates: func(reader *mockReader) {\n\t\t\t\treader.setData([]byte(\"update 1\")) // no waiting for the read to happen and performing next update\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 23,
                  "endLine": 18,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# Builder image used to create a non-root user and to pick the SSL CA certs from\nFROM alpine:3.18.0 as builder\nRUN apk --update add ca-certificates\nRUN adduser --disabled-password --gecos \"\" --uid 65532 nonroot\n\n\nFROM scratch\n",
                    "rendered": {
                      "text": "# Builder image used to create a non-root user and to pick the SSL CA certs from\nFROM alpine:3.18.0 as builder\nRUN apk --update add ca-certificates\nRUN adduser --disabled-password --gecos \"\" --uid 65532 nonroot\n\n\nFROM scratch\n",
                      "markdown": "`# Builder image used to create a non-root user and to pick the SSL CA certs from\nFROM alpine:3.18.0 as builder\nRUN apk --update add ca-certificates\nRUN adduser --disabled-password --gecos \"\" --uid 65532 nonroot\n\n\nFROM scratch\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 27,
                  "endLine": 52,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\torg.opencontainers.image.version=$(DOCKER_TAG) \\\n\torg.opencontainers.image.revision=$(REVISION)\n\n# In non-Linux systems, use Docker to build FIPS-compliant binaries.\nOS := $(shell uname)\nifeq ($(OS),Darwin)\nBUILD_FIPS_IN_DOCKER ?= true\n",
                    "rendered": {
                      "text": "\torg.opencontainers.image.version=$(DOCKER_TAG) \\\n\torg.opencontainers.image.revision=$(REVISION)\n\n# In non-Linux systems, use Docker to build FIPS-compliant binaries.\nOS := $(shell uname)\nifeq ($(OS),Darwin)\nBUILD_FIPS_IN_DOCKER ?= true\n",
                      "markdown": "`\torg.opencontainers.image.version=$(DOCKER_TAG) \\\n\torg.opencontainers.image.revision=$(REVISION)\n\n# In non-Linux systems, use Docker to build FIPS-compliant binaries.\nOS := $(shell uname)\nifeq ($(OS),Darwin)\nBUILD_FIPS_IN_DOCKER ?= true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 9,
                  "snippet": {
                    "text": "DOCKER_TAG ?= $(REVISION)\nendif\n\n# Docker metadata\nDOCKER_METADATA := \\\n\torg.opencontainers.image.title=$(NAME) \\\n\torg.opencontainers.image.description=\"Move OIDC token acquisition out of your app code and into the Istio mesh\" \\\n",
                    "rendered": {
                      "text": "DOCKER_TAG ?= $(REVISION)\nendif\n\n# Docker metadata\nDOCKER_METADATA := \\\n\torg.opencontainers.image.title=$(NAME) \\\n\torg.opencontainers.image.description=\"Move OIDC token acquisition out of your app code and into the Istio mesh\" \\\n",
                      "markdown": "`DOCKER_TAG ?= $(REVISION)\nendif\n\n# Docker metadata\nDOCKER_METADATA := \\\n\torg.opencontainers.image.title=$(NAME) \\\n\torg.opencontainers.image.description=\"Move OIDC token acquisition out of your app code and into the Istio mesh\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "endLine": 35,
                  "endColumn": 24,
                  "snippet": {
                    "text": "DOCKER_TARGETS        ?= linux-amd64 linux-arm64\nDOCKER_BUILDER_NAME   ?= $(NAME)-builder\n\nREVISION := $(shell git rev-parse HEAD)\nifneq ($(strip $(VERSION)),)\n# Remove the suffix as we want N.N.N instead of vN.N.N\nDOCKER_TAG ?= $(strip $(VERSION:v%=%))\n",
                    "rendered": {
                      "text": "DOCKER_TARGETS        ?= linux-amd64 linux-arm64\nDOCKER_BUILDER_NAME   ?= $(NAME)-builder\n\nREVISION := $(shell git rev-parse HEAD)\nifneq ($(strip $(VERSION)),)\n# Remove the suffix as we want N.N.N instead of vN.N.N\nDOCKER_TAG ?= $(strip $(VERSION:v%=%))\n",
                      "markdown": "`DOCKER_TARGETS        ?= linux-amd64 linux-arm64\nDOCKER_BUILDER_NAME   ?= $(NAME)-builder\n\nREVISION := $(shell git rev-parse HEAD)\nifneq ($(strip $(VERSION)),)\n# Remove the suffix as we want N.N.N instead of vN.N.N\nDOCKER_TAG ?= $(strip $(VERSION:v%=%))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 60,
                  "endLine": 30,
                  "endColumn": 68,
                  "snippet": {
                    "text": "TARGETS      ?= linux-amd64 linux-arm64 #darwin-amd64 darwin-arm64\nFIPS_TARGETS := $(filter linux-%,$(TARGETS))\n\n# DOCKER_HUB is exported so that it can be referenced in e2e docker compose files\nexport DOCKER_HUB     ?= $(GO_MODULE:github.com/%=ghcr.io/%)\nDOCKER_TARGETS        ?= linux-amd64 linux-arm64\nDOCKER_BUILDER_NAME   ?= $(NAME)-builder\n",
                    "rendered": {
                      "text": "TARGETS      ?= linux-amd64 linux-arm64 #darwin-amd64 darwin-arm64\nFIPS_TARGETS := $(filter linux-%,$(TARGETS))\n\n# DOCKER_HUB is exported so that it can be referenced in e2e docker compose files\nexport DOCKER_HUB     ?= $(GO_MODULE:github.com/%=ghcr.io/%)\nDOCKER_TARGETS        ?= linux-amd64 linux-arm64\nDOCKER_BUILDER_NAME   ?= $(NAME)-builder\n",
                      "markdown": "`TARGETS      ?= linux-amd64 linux-arm64 #darwin-amd64 darwin-arm64\nFIPS_TARGETS := $(filter linux-%,$(TARGETS))\n\n# DOCKER_HUB is exported so that it can be referenced in e2e docker compose files\nexport DOCKER_HUB     ?= $(GO_MODULE:github.com/%=ghcr.io/%)\nDOCKER_TARGETS        ?= linux-amd64 linux-arm64\nDOCKER_BUILDER_NAME   ?= $(NAME)-builder\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 20,
                  "endLine": 16,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# limitations under the License.\n\nROOT      := $(shell git rev-parse --show-toplevel)\nGO_MODULE := $(shell sed -ne 's/^module //gp' $(ROOT)/go.mod)\nNAME      ?= authservice\n\n-include $(ROOT)/.makerc  # Pick up any local overrides.\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\nROOT      := $(shell git rev-parse --show-toplevel)\nGO_MODULE := $(shell sed -ne 's/^module //gp' $(ROOT)/go.mod)\nNAME      ?= authservice\n\n-include $(ROOT)/.makerc  # Pick up any local overrides.\n",
                      "markdown": "`# limitations under the License.\n\nROOT      := $(shell git rev-parse --show-toplevel)\nGO_MODULE := $(shell sed -ne 's/^module //gp' $(ROOT)/go.mod)\nNAME      ?= authservice\n\n-include $(ROOT)/.makerc  # Pick up any local overrides.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/env.mk"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 20,
                  "endLine": 15,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\nROOT      := $(shell git rev-parse --show-toplevel)\nGO_MODULE := $(shell sed -ne 's/^module //gp' $(ROOT)/go.mod)\nNAME      ?= authservice\n\n",
                    "rendered": {
                      "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\nROOT      := $(shell git rev-parse --show-toplevel)\nGO_MODULE := $(shell sed -ne 's/^module //gp' $(ROOT)/go.mod)\nNAME      ?= authservice\n\n",
                      "markdown": "`# See the License for the specific language governing permissions and\n# limitations under the License.\n\nROOT      := $(shell git rev-parse --show-toplevel)\nGO_MODULE := $(shell sed -ne 's/^module //gp' $(ROOT)/go.mod)\nNAME      ?= authservice\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 38,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2024 Tetrate\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2024 Tetrate\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2024 Tetrate\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 22,
                  "endLine": 37,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n    \"${BUILD_IMAGE}\" \\\n    /bin/bash -c \"git config --global --add safe.directory /source ; ${*:2}\"\n",
                    "rendered": {
                      "text": "    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n    \"${BUILD_IMAGE}\" \\\n    /bin/bash -c \"git config --global --add safe.directory /source ; ${*:2}\"\n",
                      "markdown": "`    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n    \"${BUILD_IMAGE}\" \\\n    /bin/bash -c \"git config --global --add safe.directory /source ; ${*:2}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 20,
                  "endLine": 36,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n    \"${BUILD_IMAGE}\" \\\n",
                    "rendered": {
                      "text": "    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n    \"${BUILD_IMAGE}\" \\\n",
                      "markdown": "`    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n    \"${BUILD_IMAGE}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 12,
                  "endLine": 35,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    --rm \\\n    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n",
                    "rendered": {
                      "text": "    --rm \\\n    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n",
                      "markdown": "`    --rm \\\n    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n    -v \"$(go env GOMODCACHE)\":/go/pkg/mod \\\n    -e GOPROXY=\"$(go env GOPROXY)\" \\\n    -e GOPRIVATE=\"$(go env GOPRIVATE)\" \\\n    -w /source \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 31,
                  "endColumn": 7,
                  "snippet": {
                    "text": "ROOT=$(git rev-parse --show-toplevel)\nGO_VERSION=$(sed -ne 's/^go //gp' \"${ROOT}/go.mod\")\nBUILD_IMAGE=\"golang:${GO_VERSION}\"\n\ndocker run \\\n    --rm \\\n    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n",
                    "rendered": {
                      "text": "ROOT=$(git rev-parse --show-toplevel)\nGO_VERSION=$(sed -ne 's/^go //gp' \"${ROOT}/go.mod\")\nBUILD_IMAGE=\"golang:${GO_VERSION}\"\n\ndocker run \\\n    --rm \\\n    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n",
                      "markdown": "`ROOT=$(git rev-parse --show-toplevel)\nGO_VERSION=$(sed -ne 's/^go //gp' \"${ROOT}/go.mod\")\nBUILD_IMAGE=\"golang:${GO_VERSION}\"\n\ndocker run \\\n    --rm \\\n    --platform \"${1}\" \\\n    -v \"${PWD}\":/source \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 41,
                  "endLine": 17,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script runs the given command in a Docker container.\n\nif [[ ${#} -lt 2 ]]; then\n    echo \"Usage: ${0} <platform> <command>\"\n",
                    "rendered": {
                      "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script runs the given command in a Docker container.\n\nif [[ ${#} -lt 2 ]]; then\n    echo \"Usage: ${0} <platform> <command>\"\n",
                      "markdown": "`# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script runs the given command in a Docker container.\n\nif [[ ${#} -lt 2 ]]; then\n    echo \"Usage: ${0} <platform> <command>\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 6,
                  "endLine": 17,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script runs the given command in a Docker container.\n\nif [[ ${#} -lt 2 ]]; then\n    echo \"Usage: ${0} <platform> <command>\"\n",
                    "rendered": {
                      "text": "# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script runs the given command in a Docker container.\n\nif [[ ${#} -lt 2 ]]; then\n    echo \"Usage: ${0} <platform> <command>\"\n",
                      "markdown": "`# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script runs the given command in a Docker container.\n\nif [[ ${#} -lt 2 ]]; then\n    echo \"Usage: ${0} <platform> <command>\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/run-in-docker.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Copyright 2024 Tetrate\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Copyright 2024 Tetrate\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Copyright 2024 Tetrate\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 15,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "## How does authservice work?\n\n[This flowchart](https://miro.com/app/board/o9J_kvus6b4=/) explains how `authservice`\nmakes decisions at different points in the login lifecycle.\n\n## Contributing\n\n",
                    "rendered": {
                      "text": "## How does authservice work?\n\n[This flowchart](https://miro.com/app/board/o9J_kvus6b4=/) explains how `authservice`\nmakes decisions at different points in the login lifecycle.\n\n## Contributing\n\n",
                      "markdown": "`## How does authservice work?\n\n[This flowchart](https://miro.com/app/board/o9J_kvus6b4=/) explains how `authservice`\nmakes decisions at different points in the login lifecycle.\n\n## Contributing\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 14,
                  "endLine": 25,
                  "endColumn": 18,
                  "snippet": {
                    "text": "* Compatible with any standard OIDC Provider\n* Supports multiple OIDC Providers for same application\n* Trusts custom CA certs when talking to OIDC Providers\n* Works either at the sidecar or gateway level\n\n\n## How does authservice work?\n",
                    "rendered": {
                      "text": "* Compatible with any standard OIDC Provider\n* Supports multiple OIDC Providers for same application\n* Trusts custom CA certs when talking to OIDC Providers\n* Works either at the sidecar or gateway level\n\n\n## How does authservice work?\n",
                      "markdown": "`* Compatible with any standard OIDC Provider\n* Supports multiple OIDC Providers for same application\n* Trusts custom CA certs when talking to OIDC Providers\n* Works either at the sidecar or gateway level\n\n\n## How does authservice work?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 14,
                  "endLine": 18,
                  "endColumn": 23,
                  "snippet": {
                    "text": "Some of the features it provides:\n* Transparent login and logout\n  * Retrieves OAuth2 Access tokens, ID tokens, and refresh tokens\n* Fine-grained control over which url paths are protected\n* Session management\n  * Configuration of session lifetime and idle timeouts\n  * Refreshes expired tokens automatically\n",
                    "rendered": {
                      "text": "Some of the features it provides:\n* Transparent login and logout\n  * Retrieves OAuth2 Access tokens, ID tokens, and refresh tokens\n* Fine-grained control over which url paths are protected\n* Session management\n  * Configuration of session lifetime and idle timeouts\n  * Refreshes expired tokens automatically\n",
                      "markdown": "`Some of the features it provides:\n* Transparent login and logout\n  * Retrieves OAuth2 Access tokens, ID tokens, and refresh tokens\n* Fine-grained control over which url paths are protected\n* Session management\n  * Configuration of session lifetime and idle timeouts\n  * Refreshes expired tokens automatically\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 1,
                  "endLine": 225,
                  "endColumn": 6,
                  "snippet": {
                    "text": "dist:  ## Package the release binaries\n\t@mkdir -p $(OUTDIR)/dist\n\t@cd $(OUTDIR) && for f in $(NAME)-*; do \\\n\t\ttar cvzf dist/$$f.tar.gz $$f; \\\n\tdone\n\n.PHONY: help\n",
                    "rendered": {
                      "text": "dist:  ## Package the release binaries\n\t@mkdir -p $(OUTDIR)/dist\n\t@cd $(OUTDIR) && for f in $(NAME)-*; do \\\n\t\ttar cvzf dist/$$f.tar.gz $$f; \\\n\tdone\n\n.PHONY: help\n",
                      "markdown": "`dist:  ## Package the release binaries\n\t@mkdir -p $(OUTDIR)/dist\n\t@cd $(OUTDIR) && for f in $(NAME)-*; do \\\n\t\ttar cvzf dist/$$f.tar.gz $$f; \\\n\tdone\n\n.PHONY: help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 1,
                  "endLine": 217,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t@$(MAKE) format\n\t@if [ ! -z \"`git status -s`\" ]; then \\\n\t\techo \"The following differences will fail CI until committed:\"; \\\n\t\tgit diff; \\\n\t\texit 1; \\\n\tfi\n\n",
                    "rendered": {
                      "text": "\t@$(MAKE) format\n\t@if [ ! -z \"`git status -s`\" ]; then \\\n\t\techo \"The following differences will fail CI until committed:\"; \\\n\t\tgit diff; \\\n\t\texit 1; \\\n\tfi\n\n",
                      "markdown": "`\t@$(MAKE) format\n\t@if [ ! -z \"`git status -s`\" ]; then \\\n\t\techo \"The following differences will fail CI until committed:\"; \\\n\t\tgit diff; \\\n\t\texit 1; \\\n\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "endLine": 177,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\ndocker-push/%: TAG_SUFFIX=$(if $(subst static,,$(*)),-fips)\ndocker-push/%:\n\t@echo \"Pushing Docker image $(DOCKER_HUB)/$(NAME):$(DOCKER_TAG)$(TAG_SUFFIX)\"\n\t@docker buildx build \\\n\t\t$(DOCKER_BUILD_ARGS) \\\n\t\t--builder $(DOCKER_BUILDER_NAME) \\\n",
                    "rendered": {
                      "text": "\ndocker-push/%: TAG_SUFFIX=$(if $(subst static,,$(*)),-fips)\ndocker-push/%:\n\t@echo \"Pushing Docker image $(DOCKER_HUB)/$(NAME):$(DOCKER_TAG)$(TAG_SUFFIX)\"\n\t@docker buildx build \\\n\t\t$(DOCKER_BUILD_ARGS) \\\n\t\t--builder $(DOCKER_BUILDER_NAME) \\\n",
                      "markdown": "`\ndocker-push/%: TAG_SUFFIX=$(if $(subst static,,$(*)),-fips)\ndocker-push/%:\n\t@echo \"Pushing Docker image $(DOCKER_HUB)/$(NAME):$(DOCKER_TAG)$(TAG_SUFFIX)\"\n\t@docker buildx build \\\n\t\t$(DOCKER_BUILD_ARGS) \\\n\t\t--builder $(DOCKER_BUILDER_NAME) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 128,
                  "endLine": 173,
                  "endColumn": 136,
                  "snippet": {
                    "text": "docker-push: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-static-%) docker-push/static ## Build and push the multi-arch Docker images\n\n.PHONY: docker-push-fips\ndocker-push-fips: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-fips-%) docker-push/fips ## Build and push the multi-arch FIPS Docker images\n\ndocker-push/%: TAG_SUFFIX=$(if $(subst static,,$(*)),-fips)\ndocker-push/%:\n",
                    "rendered": {
                      "text": "docker-push: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-static-%) docker-push/static ## Build and push the multi-arch Docker images\n\n.PHONY: docker-push-fips\ndocker-push-fips: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-fips-%) docker-push/fips ## Build and push the multi-arch FIPS Docker images\n\ndocker-push/%: TAG_SUFFIX=$(if $(subst static,,$(*)),-fips)\ndocker-push/%:\n",
                      "markdown": "`docker-push: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-static-%) docker-push/static ## Build and push the multi-arch Docker images\n\n.PHONY: docker-push-fips\ndocker-push-fips: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-fips-%) docker-push/fips ## Build and push the multi-arch FIPS Docker images\n\ndocker-push/%: TAG_SUFFIX=$(if $(subst static,,$(*)),-fips)\ndocker-push/%:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 122,
                  "endLine": 170,
                  "endColumn": 130,
                  "snippet": {
                    "text": "\t\t.\n\n.PHONY: docker-push\ndocker-push: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-static-%) docker-push/static ## Build and push the multi-arch Docker images\n\n.PHONY: docker-push-fips\ndocker-push-fips: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-fips-%) docker-push/fips ## Build and push the multi-arch FIPS Docker images\n",
                    "rendered": {
                      "text": "\t\t.\n\n.PHONY: docker-push\ndocker-push: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-static-%) docker-push/static ## Build and push the multi-arch Docker images\n\n.PHONY: docker-push-fips\ndocker-push-fips: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-fips-%) docker-push/fips ## Build and push the multi-arch FIPS Docker images\n",
                      "markdown": "`\t\t.\n\n.PHONY: docker-push\ndocker-push: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-static-%) docker-push/static ## Build and push the multi-arch Docker images\n\n.PHONY: docker-push-fips\ndocker-push-fips: docker-pre $(DOCKER_TARGETS:%=$(OUTDIR)/$(NAME)-fips-%) docker-push/fips ## Build and push the multi-arch FIPS Docker images\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 16,
                  "endLine": 155,
                  "endColumn": 24,
                  "snippet": {
                    "text": "docker/%: FLAVOR=$(subst /,,$(dir $(*)))\ndocker/%: TAG_SUFFIX=$(if $(subst static,,${FLAVOR}),-fips)\ndocker/%: $(OUTDIR)/$(NAME)-$$(FLAVOR)-$$(notdir %)\n\t@echo \"Building Docker image $(DOCKER_HUB)/$(NAME):$(DOCKER_TAG)-$(DOCKER_ARCH)$(TAG_SUFFIX)\"\n\t@docker buildx build \\\n\t\t$(DOCKER_BUILD_ARGS) \\\n\t\t--builder $(DOCKER_BUILDER_NAME) \\\n",
                    "rendered": {
                      "text": "docker/%: FLAVOR=$(subst /,,$(dir $(*)))\ndocker/%: TAG_SUFFIX=$(if $(subst static,,${FLAVOR}),-fips)\ndocker/%: $(OUTDIR)/$(NAME)-$$(FLAVOR)-$$(notdir %)\n\t@echo \"Building Docker image $(DOCKER_HUB)/$(NAME):$(DOCKER_TAG)-$(DOCKER_ARCH)$(TAG_SUFFIX)\"\n\t@docker buildx build \\\n\t\t$(DOCKER_BUILD_ARGS) \\\n\t\t--builder $(DOCKER_BUILDER_NAME) \\\n",
                      "markdown": "`docker/%: FLAVOR=$(subst /,,$(dir $(*)))\ndocker/%: TAG_SUFFIX=$(if $(subst static,,${FLAVOR}),-fips)\ndocker/%: $(OUTDIR)/$(NAME)-$$(FLAVOR)-$$(notdir %)\n\t@echo \"Building Docker image $(DOCKER_HUB)/$(NAME):$(DOCKER_TAG)-$(DOCKER_ARCH)$(TAG_SUFFIX)\"\n\t@docker buildx build \\\n\t\t$(DOCKER_BUILD_ARGS) \\\n\t\t--builder $(DOCKER_BUILDER_NAME) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 76,
                  "endLine": 147,
                  "endColumn": 84,
                  "snippet": {
                    "text": "docker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n\n.SECONDEXPANSION:\ndocker/%: PLATFORM=$(subst -,/,$(notdir $(*)))\n",
                    "rendered": {
                      "text": "docker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n\n.SECONDEXPANSION:\ndocker/%: PLATFORM=$(subst -,/,$(notdir $(*)))\n",
                      "markdown": "`docker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n\n.SECONDEXPANSION:\ndocker/%: PLATFORM=$(subst -,/,$(notdir $(*)))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 68,
                  "endLine": 144,
                  "endColumn": 76,
                  "snippet": {
                    "text": "INSECURE_REGISTRY_ARG := --output=type=registry,registry.insecure=true\n\n.PHONY: docker\ndocker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n",
                    "rendered": {
                      "text": "INSECURE_REGISTRY_ARG := --output=type=registry,registry.insecure=true\n\n.PHONY: docker\ndocker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n",
                      "markdown": "`INSECURE_REGISTRY_ARG := --output=type=registry,registry.insecure=true\n\n.PHONY: docker\ndocker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 7,
                  "endLine": 144,
                  "snippet": {
                    "text": "PLATFORMS := $(subst -,/,$(subst $(space),$(comma),$(DOCKER_TARGETS)))\nINSECURE_REGISTRY_ARG := --output=type=registry,registry.insecure=true\n\n.PHONY: docker\ndocker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n",
                    "rendered": {
                      "text": "PLATFORMS := $(subst -,/,$(subst $(space),$(comma),$(DOCKER_TARGETS)))\nINSECURE_REGISTRY_ARG := --output=type=registry,registry.insecure=true\n\n.PHONY: docker\ndocker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n",
                      "markdown": "`PLATFORMS := $(subst -,/,$(subst $(space),$(comma),$(DOCKER_TARGETS)))\nINSECURE_REGISTRY_ARG := --output=type=registry,registry.insecure=true\n\n.PHONY: docker\ndocker: docker-pre $(DOCKER_TARGETS:%=docker/static/%)  ## Build the Docker images\n\n.PHONY: docker-fips\ndocker-fips: docker-pre $(DOCKER_TARGETS:%=docker/fips/%)  ## Build the FIPS Docker images\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 9,
                  "snippet": {
                    "text": ".PHONY: docker-pre\ndocker-pre:\n\t@docker buildx inspect $(DOCKER_BUILDER_NAME) || \\\n\t\tdocker buildx create --name $(DOCKER_BUILDER_NAME) \\\n\t\t\t--driver docker-container --driver-opt network=host \\\n\t\t\t--buildkitd-flags '--allow-insecure-entitlement network.host' --use\n\n",
                    "rendered": {
                      "text": ".PHONY: docker-pre\ndocker-pre:\n\t@docker buildx inspect $(DOCKER_BUILDER_NAME) || \\\n\t\tdocker buildx create --name $(DOCKER_BUILDER_NAME) \\\n\t\t\t--driver docker-container --driver-opt network=host \\\n\t\t\t--buildkitd-flags '--allow-insecure-entitlement network.host' --use\n\n",
                      "markdown": "`.PHONY: docker-pre\ndocker-pre:\n\t@docker buildx inspect $(DOCKER_BUILDER_NAME) || \\\n\t\tdocker buildx create --name $(DOCKER_BUILDER_NAME) \\\n\t\t\t--driver docker-container --driver-opt network=host \\\n\t\t\t--buildkitd-flags '--allow-insecure-entitlement network.host' --use\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 3,
                  "endLine": 129,
                  "endColumn": 11,
                  "snippet": {
                    "text": ".PHONY: force-e2e\nforce-e2e:\n\n##@ Docker targets\n\n.PHONY: docker-pre\ndocker-pre:\n",
                    "rendered": {
                      "text": ".PHONY: force-e2e\nforce-e2e:\n\n##@ Docker targets\n\n.PHONY: docker-pre\ndocker-pre:\n",
                      "markdown": "`.PHONY: force-e2e\nforce-e2e:\n\n##@ Docker targets\n\n.PHONY: docker-pre\ndocker-pre:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 14,
                  "endLine": 61,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t-ldflags '-linkmode=external -s -w -extldflags \"-static\"' -tags \"netgo\" \\\n\t\t-o $@ $(PKG)\n\t@echo \"Verifying FIPS symbols are present\"\n\t@strings $@ | grep -q _Cfunc__goboringcrypto_ || (echo \"FIPS symbols not found\" && exit 1)\nelse\n# Run the FIPS build in a Linux container if the host OS is not Linux\n\t@$(ROOT)/run-in-docker.sh $(GOOS)/$(GOARCH) make $@\n",
                    "rendered": {
                      "text": "\t\t-ldflags '-linkmode=external -s -w -extldflags \"-static\"' -tags \"netgo\" \\\n\t\t-o $@ $(PKG)\n\t@echo \"Verifying FIPS symbols are present\"\n\t@strings $@ | grep -q _Cfunc__goboringcrypto_ || (echo \"FIPS symbols not found\" && exit 1)\nelse\n# Run the FIPS build in a Linux container if the host OS is not Linux\n\t@$(ROOT)/run-in-docker.sh $(GOOS)/$(GOARCH) make $@\n",
                      "markdown": "`\t\t-ldflags '-linkmode=external -s -w -extldflags \"-static\"' -tags \"netgo\" \\\n\t\t-o $@ $(PKG)\n\t@echo \"Verifying FIPS symbols are present\"\n\t@strings $@ | grep -q _Cfunc__goboringcrypto_ || (echo \"FIPS symbols not found\" && exit 1)\nelse\n# Run the FIPS build in a Linux container if the host OS is not Linux\n\t@$(ROOT)/run-in-docker.sh $(GOOS)/$(GOARCH) make $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/authservice.zip/Makefile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 37,
                  "endLine": 18,
                  "endColumn": 43,
                  "snippet": {
                    "text": "PKG\t   \t   ?= ./cmd\nBUILD_OPTS ?=\nTEST_OPTS  ?=\nTEST_PKGS  ?= $(shell go list ./... | grep -v /e2e)\nOUTDIR     ?= bin\n\ninclude env.mk    # Load common variables\n",
                    "rendered": {
                      "text": "PKG\t   \t   ?= ./cmd\nBUILD_OPTS ?=\nTEST_OPTS  ?=\nTEST_PKGS  ?= $(shell go list ./... | grep -v /e2e)\nOUTDIR     ?= bin\n\ninclude env.mk    # Load common variables\n",
                      "markdown": "`PKG\t   \t   ?= ./cmd\nBUILD_OPTS ?=\nTEST_OPTS  ?=\nTEST_PKGS  ?= $(shell go list ./... | grep -v /e2e)\nOUTDIR     ?= bin\n\ninclude env.mk    # Load common variables\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}